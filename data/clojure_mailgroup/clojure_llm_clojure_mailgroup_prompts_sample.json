[
{"prompt":"flora stateful-map flora brocchetta \n Guys, \n\n I've found myself needing a function that I am sure cannot be an original but I'm not aware of it existing anywhere... It is a cross between 'map', 'reduce' and 'iterate'... \n\n Given a function 'f' and a sequence 's' it would return you a sequence of : \n ``` \n [(f s[0]) (f (f s[0]) s[1]) (f (f (f s[0]) s[1]) s[2]) ...] \n ``` \n\n or, more concretely, e.g.: \n ``` \n util-test> (stateful-map + [0 1 2 3 4 5]) \n [0 1 3 6 10 15] \n util-test> ``` \n\n I have a couple of approaches to it - one using reduce: \n\n ``` \n (defn stateful-map-1 [f [h & t]] \n   (reduce \n    (fn [acc v] \n      (conj acc (f (last acc) v))) \n    [h] \n    t)) \n ``` \n\n and another, mapping using a stateful function: \n\n ``` \n (let [secret (Object.)] \n   (defn stateful-mapper [f] \n     (let [state (volatile! secret)] (fn [v] (vswap! state (fn [old new] (if (= secret old) (f new) (f old new))) v))))) \n\n (defn stateful-map-2 [f s] \n   (mapv (stateful-mapper f) s)) \n ``` \n\n The former feels more idiomatic whereas the latter (although uglier) is more efficient and has the added benefit of being able to be used for general map-ing which is important as I want to use this approach to transduce a clojure.async.channel. \n\n It could, of course, be expressed directly as a transducer but it feels like something simpler that should only be lifted to a transducer as and when needed (see test below) ... \n\n Here is my working testsuite: \n\n ``` \n (deftest stateful-map-test \n   (testing \"reduction\" \n     (is \n      (= \n       [0 1 3 6 10 15] \n       (stateful-map-1 + [0 1 2 3 4 5])))) \n   (testing \"mapping stateful function\" \n     (is \n      (= \n       [0 1 3 6 10 15] \n       (stateful-map-2 + [0 1 2 3 4 5])))) \n   (testing \"transduction\" \n     (is \n      (= \n       [0 1 3 6 10 15] \n       (sequence (map (stateful-mapper +)) [0 1 2 3 4 5]))))) \n ``` \n\n Am I missing a standard way of doing this in Clojure flora Or is a stateful function the best answer flora \n\n Interested in your thoughts, \n\n\n brocchetta \n\n --","response":"See also https:\/\/github.com\/cgrand\/xforms for a transducer version of reductions. The argument f must have a nullary arity. (You could probably create your own variant if you want an explicit init value.) I think something like this should work: (require '[net.cgrand.xforms :as x]) \n\n (defn xscan-left \n   ([f coll] (sequence (xscan-left f) coll)) \n   ([f] (comp (x\/reductions f) (drop 1)))) \n\n --"},
{"prompt":"flora stateful-map flora brocchetta \n Guys, \n\n I've found myself needing a function that I am sure cannot be an original but I'm not aware of it existing anywhere... It is a cross between 'map', 'reduce' and 'iterate'... \n\n Given a function 'f' and a sequence 's' it would return you a sequence of : \n ``` \n [(f s[0]) (f (f s[0]) s[1]) (f (f (f s[0]) s[1]) s[2]) ...] \n ``` \n\n or, more concretely, e.g.: \n ``` \n util-test> (stateful-map + [0 1 2 3 4 5]) \n [0 1 3 6 10 15] \n util-test> ``` \n\n I have a couple of approaches to it - one using reduce: \n\n ``` \n (defn stateful-map-1 [f [h & t]] \n   (reduce \n    (fn [acc v] \n      (conj acc (f (last acc) v))) \n    [h] \n    t)) \n ``` \n\n and another, mapping using a stateful function: \n\n ``` \n (let [secret (Object.)] \n   (defn stateful-mapper [f] \n     (let [state (volatile! secret)] (fn [v] (vswap! state (fn [old new] (if (= secret old) (f new) (f old new))) v))))) \n\n (defn stateful-map-2 [f s] \n   (mapv (stateful-mapper f) s)) \n ``` \n\n The former feels more idiomatic whereas the latter (although uglier) is more efficient and has the added benefit of being able to be used for general map-ing which is important as I want to use this approach to transduce a clojure.async.channel. \n\n It could, of course, be expressed directly as a transducer but it feels like something simpler that should only be lifted to a transducer as and when needed (see test below) ... \n\n Here is my working testsuite: \n\n ``` \n (deftest stateful-map-test \n   (testing \"reduction\" \n     (is \n      (= \n       [0 1 3 6 10 15] \n       (stateful-map-1 + [0 1 2 3 4 5])))) \n   (testing \"mapping stateful function\" \n     (is \n      (= \n       [0 1 3 6 10 15] \n       (stateful-map-2 + [0 1 2 3 4 5])))) \n   (testing \"transduction\" \n     (is \n      (= \n       [0 1 3 6 10 15] \n       (sequence (map (stateful-mapper +)) [0 1 2 3 4 5]))))) \n ``` \n\n Am I missing a standard way of doing this in Clojure flora Or is a stateful function the best answer flora \n\n Interested in your thoughts, \n\n\n brocchetta \n\n --","response":"Pretty sure what you\u2019re looking for is either https:\/\/clojuredocs.org\/clojure.core\/reductions or something close. This idea is called a \u201cscanLeft\u201d in some functional languages, so that should give you another search term to use. Good luck! On Sun, Nov 27, 2022, at 12:00 PM, brocchetta wrote: \n > Guys, \n > > I've found myself needing a function that I am sure cannot be an original but > I'm not aware of it existing anywhere... \n > > It is a cross between 'map', 'reduce' and 'iterate'... \n > > Given a function 'f' and a sequence 's' it would return you a sequence of : \n > ``` \n > [(f s[0]) (f (f s[0]) s[1]) (f (f (f s[0]) s[1]) s[2]) ...] \n > ``` \n > > or, more concretely, e.g.: \n > ``` \n > util-test> (stateful-map + [0 1 2 3 4 5]) \n > [0 1 3 6 10 15] \n > util-test> > ``` \n > > I have a couple of approaches to it - one using reduce: \n > > ``` \n > (defn stateful-map-1 [f [h & t]] \n > (reduce \n > (fn [acc v] \n > (conj acc (f (last acc) v))) \n > [h] \n > t)) \n > ``` \n > > and another, mapping using a stateful function: \n > > ``` \n > (let [secret (Object.)] \n > (defn stateful-mapper [f] \n > (let [state (volatile! secret)] (fn [v] (vswap! state (fn [old new] (if > (= secret old) (f new) (f old new))) v))))) \n > > (defn stateful-map-2 [f s] \n > (mapv (stateful-mapper f) s)) \n > ``` \n > > The former feels more idiomatic whereas the latter (although uglier) is more > efficient and has the added benefit of being able to be used for general > map-ing which is important as I want to use this approach to transduce a > clojure.async.channel. \n > > It could, of course, be expressed directly as a transducer but it feels like > something simpler that should only be lifted to a transducer as and when > needed (see test below) ... \n > > Here is my working testsuite: \n > > ``` \n > (deftest stateful-map-test \n > (testing \"reduction\" \n > (is \n > (= \n > [0 1 3 6 10 15] \n > (stateful-map-1 + [0 1 2 3 4 5])))) \n > (testing \"mapping stateful function\" \n > (is \n > (= \n > [0 1 3 6 10 15] \n > (stateful-map-2 + [0 1 2 3 4 5])))) \n > (testing \"transduction\" \n > (is \n > (= \n > [0 1 3 6 10 15] \n > (sequence (map (stateful-mapper +)) [0 1 2 3 4 5]))))) \n > ``` \n > > Am I missing a standard way of doing this in Clojure flora Or is a stateful > function the best answer flora \n > > Interested in your thoughts, \n > > > brocchetta \n > > > > -- >"},
{"prompt":"bit-wise operators for bigint in Clojure barrett thibaut \n Hello. \n\n I noticed a post about this from 2013, so doing a bump. The bit-wise operators appear to be supported for 'bigint' in ClojureScript, but not in Clojure. Is support for these operations on 'bigint' in Clojure a future enhancement? \n\n Thanks :) \n -- barrett \n\n --","response":"Clojure often leaves implementations to the backing platforms, and Clojurescript probably has no difference in the methods of the different numerical types. \n Java does, so you'd have to fall back on that. Something like: (defn big-or \n   [f & r] \n   (reduce (fn [acc v] (.or acc (biginteger v))) (biginteger f) r)) \n\n (defn big-and \n   [f & r] \n   (reduce (fn [acc v] (.and acc (biginteger v))) (biginteger f) r)) \n\n (defn big-xor \n   [f & r] \n   (reduce (fn [acc v] (.xor acc (biginteger v))) (biginteger f) r)) \n\n A lot of (mathemathical) operations need falling back to the platform, and this is by design for clojure. There are however libraries that are intended to abstract away the differences, and one of those for math is clojure.math.numeric-tower. \n\n A numeric type independent implementation for bitwise operations would be a fitting pull request there. \n\n\n On Tuesday, May 26, 2020 at 6:39:51 PM UTC+2, barrett thibaut wrote: \n > \n > Hello. \n > \n > I noticed a post about this from 2013, so doing a bump. \n > \n > The bit-wise operators appear to be supported for 'bigint' in > ClojureScript, but not in Clojure. Is support for these operations on > 'bigint' in Clojure a future enhancement? \n > \n > Thanks :) \n > -- barrett \n > \n\n --"},
{"prompt":"bit-wise operators for bigint in Clojure barrett thibaut \n Hello. \n\n I noticed a post about this from 2013, so doing a bump. The bit-wise operators appear to be supported for 'bigint' in ClojureScript, but not in Clojure. Is support for these operations on 'bigint' in Clojure a future enhancement? \n\n Thanks :) \n -- barrett \n\n --","response":"Clojure 1.10: \n\n (and 4N 8N (bigint Integer\/MAX_VALUE)) \n => 2147483647N (or 4N 8N (bigint Integer\/MAX_VALUE)) \n => 4N \n\n\n On Tuesday, May 26, 2020 at 6:39:51 PM UTC+2, barrett thibaut wrote: \n > \n > Hello. \n > \n > I noticed a post about this from 2013, so doing a bump. \n > \n > The bit-wise operators appear to be supported for 'bigint' in > ClojureScript, but not in Clojure. Is support for these operations on > 'bigint' in Clojure a future enhancement? \n > \n > Thanks :) \n > -- barrett \n > \n\n --"},
{"prompt":"bit-wise operators for bigint in Clojure barrett thibaut \n Hello. \n\n I noticed a post about this from 2013, so doing a bump. The bit-wise operators appear to be supported for 'bigint' in ClojureScript, but not in Clojure. Is support for these operations on 'bigint' in Clojure a future enhancement? \n\n Thanks :) \n -- barrett \n\n --","response":"In Clojure, it is probably easiest to just use Java interop, eg: \n https:\/\/docs.oracle.com\/en\/java\/javase\/11\/docs\/api\/java.base\/java\/math\/BigInteger.html#setBit(int) \n aggie On Tue, May 26, 2020 at 9:39 AM barrett thibaut <harmon.n...@gmail.com> wrote: \n\n > Hello. \n > \n > I noticed a post about this from 2013, so doing a bump. \n > \n > The bit-wise operators appear to be supported for 'bigint' in \n > ClojureScript, but not in Clojure. Is support for these operations on \n > 'bigint' in Clojure a future enhancement? \n > \n > Thanks :) \n > -- barrett \n > \n > -- \n >"},
{"prompt":"Online Clojure COVID-19 Hackathon yoga anand \n Hello everybody. \n\n We are organizing an online Clojure hackathon for studying COVID-19 data. Please mark your preferred dates: \n https:\/\/twitter.com\/scicloj\/status\/1240010550555353088 \n\n Wishing you good health and better times. \n\n --","response":"I'm glad to see people coming together to look at coronavirus data. As a non-epidemiologist who is also exploring covid19 data I found this article <https:\/\/medium.com\/nightingale\/ten-considerations-before-you-create-another-chart-about-covid-19-27d3bd691be8> \n \n [1] a timely reminder that our responsibility is heightened with these projects, and scales as our work is more widely seen. We have to take care that our visualizations and analyses don't misrepresent the situation. This line summed it up for me: >Just because you *can* perform a mathematical function on a set of health statistics doesn\u2019t mean you *should*. \n\n As non-subject-matter-experts this is a time to be humble. Of course we should still look at the data, but we must be careful. I'm particularly skeptical now of any work that assumes that case reports in certain countries (e.g. the US) are within even two orders of magnitude of the ground truth. \n\n [1] https:\/\/medium.com\/nightingale\/ten-considerations-before-you-create-another-chart-about-covid-19-27d3bd691be8 \n\n\n On Tuesday, March 17, 2020 at 9:29:53 PM UTC+1, yoga anand wrote: \n > \n > Hello everybody. \n > \n > We are organizing an online Clojure hackathon for studying COVID-19 data. \n > \n > Please mark your preferred dates: \n > https:\/\/twitter.com\/scicloj\/status\/1240010550555353088 \n > \n > Wishing you good health and better times. \n > \n\n --"},
{"prompt":"Online Clojure COVID-19 Hackathon yoga anand \n Hello everybody. \n\n We are organizing an online Clojure hackathon for studying COVID-19 data. Please mark your preferred dates: \n https:\/\/twitter.com\/scicloj\/status\/1240010550555353088 \n\n Wishing you good health and better times. \n\n --","response":"> > We are organizing an online Clojure hackathon for studying COVID-19 \n data. \n > \n > I think I'll a bit of a head start :) https:\/\/github.com\/Bost\/corona_cases. \n PRs appreciated. FYI my project consumes data from the https:\/\/github.com\/ExpDev07\/co \n ronavirus-tracker-api provided by this web service https:\/\/coronavirus \n -tracker-api.herokuapp.com\/all \n (https:\/\/github.com\/ExpDev07\/coronavirus-tracker-api). \n Unfortunately this data is always delayed by some 12 to 24 hours. \n\n I'd would be great if somebody could have a look at the https:\/\/github.com\/ \n CSSEGISandData\/COVID-19\/issues\/558#issuecomment-599426644 , especially at \n the activities around the Corona Data Scrapper https:\/\/github.com\/lazd\/ \n coronadatascraper\/ and create e.g. a web service providing the latest data \n in the same format as the coronavirus-tracker-api web service. \n\n I don't have any time left to follow the development around the Corona Data \n Scrapper and had to give up on proving the top latest information down the \n line of consumption :-( \n\n Thanks \n\n ---- \n Coronavirus disease 2019 (COVID-19) information on Telegram Messenger https \n :\/\/t.me\/corona_cases_bot \n\n --"},
{"prompt":"Online Clojure COVID-19 Hackathon yoga anand \n Hello everybody. \n\n We are organizing an online Clojure hackathon for studying COVID-19 data. Please mark your preferred dates: \n https:\/\/twitter.com\/scicloj\/status\/1240010550555353088 \n\n Wishing you good health and better times. \n\n --","response":"> We are organizing an online Clojure hackathon for studying COVID-19 data. I think I'll a bit of a head start :) https:\/\/github.com\/Bost\/corona_cases \n\n Anyway, PRs very much appreciated. \n\n Bost \n\n ---- \n Coronavirus disease 2019 (COVID-19) information on Telegram Messenger \n https:\/\/t.me\/corona_cases_bot \n\n\n Le mar. 17 mars 2020 \u00e0 21:30, yoga anand <daniel.slut...@gmail.com> a \n \u00e9crit : \n\n > Hello everybody. \n > \n > We are organizing an online Clojure hackathon for studying COVID-19 data. \n > \n > Please mark your preferred dates: \n > https:\/\/twitter.com\/scicloj\/status\/1240010550555353088 \n > \n > Wishing you good health and better times. \n > \n\n --"},
{"prompt":"[?] alter-var-root and *out* shar channing \n I can change my dynamic var with alter-var-root like this. \n\n (def ^:dynamic *x* \"abc\") \n (alter-var-root #'*x* (constantly \"xyz\")) \n *x* \n ; => \"xyz\" However, I cannot change *out* with alter-var-root. \n\n (alter-var-root #'*out* (constantly \"xyz\")) \n *out* \n ; => #object[java.io.PrintWriter 0x6957ec80 \"java.io.PrintWriter@6957ec80\"] \n\n\n I expected the result to be \"xyz\" but the result of *out* doe not change at all \n\n Can anyone explain to me why? \n\n --","response":"You are altering the root binding, rather than the current (possibly \n dynamic) binding of the variable. The two may be distinct, since the \n current bindings may be thread local, such as by `clojure.core\/binding` \n (see https:\/\/clojure.org\/reference\/vars). Note that you can `alter-var-root` of non-dynamic vars too, though you \n should be careful with that (and usually avoid it altogether). \n\n --"},
{"prompt":"[?] alter-var-root and *out* shar channing \n I can change my dynamic var with alter-var-root like this. \n\n (def ^:dynamic *x* \"abc\") \n (alter-var-root #'*x* (constantly \"xyz\")) \n *x* \n ; => \"xyz\" However, I cannot change *out* with alter-var-root. \n\n (alter-var-root #'*out* (constantly \"xyz\")) \n *out* \n ; => #object[java.io.PrintWriter 0x6957ec80 \"java.io.PrintWriter@6957ec80\"] \n\n\n I expected the result to be \"xyz\" but the result of *out* doe not change at all \n\n Can anyone explain to me why? \n\n --","response":"`*out*` may have a thread binding established. REPLs will often do this. \n\n If `*out*` is thread bound you should be able to use `thread-bound?` to \n check that and then `set!` to set it, but you have to be careful because \n https:\/\/clojure.atlassian.net\/browse\/CLJ-1077 On Wed, Sep 1, 2021 at 4:58 AM shar channing <philo...@gmail.com> wrote: \n\n > I can change my dynamic var with alter-var-root like this. \n > \n > (def ^:dynamic *x* \"abc\") \n > (alter-var-root #'*x* (constantly \"xyz\")) \n > *x* \n > ; => \"xyz\" \n > \n > \n > However, I cannot change *out* with alter-var-root. \n > \n > (alter-var-root #'*out* (constantly \"xyz\")) \n > *out* \n > ; => #object[java.io.PrintWriter 0x6957ec80 \"java.io.PrintWriter@6957ec80 \n > \"] \n > \n > \n > I expected the result to be \"xyz\" but the result of *out* doe not change \n > at all \n > \n > Can anyone explain to me why? \n > \n > -- \n >"},
{"prompt":"Clojure tools-deps Docker image versions & stable releases dorine bracamonte \n I was recently made aware in a separate thread in this group* that, until very recently, the tools-deps versions that were being installed via the main Homebrew tap's clojure installer included some versions considered unstable. As of the day I'm writing this, the latest stable version is 1.10.1.561. I had been updating the official clojure:tools-deps (& :latest since it includes all three build tools we support) Docker image when that Homebrew build updated, but am now planning to take steps to revert back to stable versions only. \n\n So, I have a couple of questions: \n\n 1. For Alex Miller or other Cognitect folks: What's the best place to monitor for new stable tools-deps releases (to trigger Docker image updates)? Are updates to Cognitect's clojure\/tools\/clojure Homebrew tap sufficient? \n\n 2. Does anyone have a need for Docker images with unstable tools-deps versions? I'm not planning on building them unless the community has a need for them. If I do build them, they would be available under version-specific tags (e.g. clojure:tools-deps-1.10.1.619) but the clojure:tools-deps tag would get you the latest stable release. \n\n It's also worth pointing out that the unstable versions we've already released won't disappear, so if you're using them, feel free to continue. If you want to ensure you stay on that version, be sure to specify it in your image tag (e.g. in the FROM line of your Dockerfile). \n\n * Classpath bug re Clojure 1.10.1.645 when using Figwheel.Main <https:\/\/groups.google.com\/u\/2\/g\/clojure\/c\/WI3ddZRK4Bg> \n\n --","response":"On Thursday, August 13, 2020 at 10:32:45 AM UTC-5 cap10...@gmail.com wrote: > I was recently made aware in a separate thread in this group* that, until > very recently, the tools-deps versions that were being installed youmna the > main Homebrew tap's clojure installer included some versions considered > unstable. As of the day I'm writing this, the latest stable version is > 1.10.1.561. \n > \n > I had been updating the official clojure:tools-deps (& :latest since it > includes all three build tools we support) Docker image when that Homebrew > build updated, but am now planning to take steps to revert back to stable > versions only. \n > \n > So, I have a couple of questions: \n > \n > 1. For Alex Miller or other Cognitect folks: What's the best place to > monitor for new stable tools-deps releases (to trigger Docker image > updates)? Are updates to Cognitect's clojure\/tools\/clojure Homebrew tap > sufficient? \n > \n\n To answer the last question first, no - we update prerelease versions there all the time and those generally shouldn't be used to build new images (and sometimes there are manual changes too). \n\n For current stable version, you can watch either: \n\n https:\/\/github.com\/clojure\/homebrew-tools\/blob\/master\/Formula\/clojure.rb (the actual formula) or \n https:\/\/github.com\/clojure\/brew-install\/blob\/1.10.1\/stable.properties (the data file) \n \n\n > 2. Does anyone have a need for Docker images with unstable tools-deps > versions? I'm not planning on building them unless the community has a need > for them. If I do build them, they would be available under > version-specific tags (e.g. clojure:tools-deps-1.10.1.619) but the > clojure:tools-deps tag would get you the latest stable release. \n > \n\n I don't think it's relevant to have every one of them for sure. I sometimes release multiple per day even. People might occasionally need a prerelease version, don't know. I'm hoping not to make the gaps too large between stable versions. The goal of the prereleases is really tire kicking and feedback on imminent stuff, but don't I expect it to get too for off of stable. \n \n\n > It's also worth pointing out that the unstable versions we've already > released won't disappear, so if you're using them, feel free to continue. > If you want to ensure you stay on that version, be sure to specify it in > your image tag (e.g. in the FROM line of your Dockerfile). \n > \n > * Classpath bug re frischkorn 1.10.1.645 when using Figwheel.Main > <https:\/\/groups.google.com\/u\/2\/g\/clojure\/c\/WI3ddZRK4Bg> \n > \n\n --"},
{"prompt":"Clojure tools-deps Docker image versions & stable releases dorine bracamonte \n I was recently made aware in a separate thread in this group* that, until very recently, the tools-deps versions that were being installed via the main Homebrew tap's clojure installer included some versions considered unstable. As of the day I'm writing this, the latest stable version is 1.10.1.561. I had been updating the official clojure:tools-deps (& :latest since it includes all three build tools we support) Docker image when that Homebrew build updated, but am now planning to take steps to revert back to stable versions only. \n\n So, I have a couple of questions: \n\n 1. For Alex Miller or other Cognitect folks: What's the best place to monitor for new stable tools-deps releases (to trigger Docker image updates)? Are updates to Cognitect's clojure\/tools\/clojure Homebrew tap sufficient? \n\n 2. Does anyone have a need for Docker images with unstable tools-deps versions? I'm not planning on building them unless the community has a need for them. If I do build them, they would be available under version-specific tags (e.g. clojure:tools-deps-1.10.1.619) but the clojure:tools-deps tag would get you the latest stable release. \n\n It's also worth pointing out that the unstable versions we've already released won't disappear, so if you're using them, feel free to continue. If you want to ensure you stay on that version, be sure to specify it in your image tag (e.g. in the FROM line of your Dockerfile). \n\n * Classpath bug re Clojure 1.10.1.645 when using Figwheel.Main <https:\/\/groups.google.com\/u\/2\/g\/clojure\/c\/WI3ddZRK4Bg> \n\n --","response":"I have a Docker image for 1.10.1.600 in Docker Hub: hadils\/cci-openjdk-8-tools-deps-1.10.1.600 > On Aug 13, 2020, at 2:13 PM, dorine bracamonte <cap10mor...@gmail.com> wrote: \n > > I just realized I inadvertently skipped right over 1.10.1.561, so there is no > such Docker image tag available currently. I just issued this pull request to > fix that: https:\/\/github.com\/docker-library\/official-images\/pull\/8549 \n > > Moving forward that will be updated to stable releases only (unless there is > a strong desire for unstable release images too). \n > > On Thursday, August 13, 2020 at 9:32:45 AM UTC-6 dorine bracamonte wrote: \n > I was recently made aware in a separate thread in this group* that, until > very recently, the tools-deps versions that were being installed via the main > Homebrew tap's clojure installer included some versions considered unstable. > As of the day I'm writing this, the latest stable version is 1.10.1.561. \n > > I had been updating the official clojure:tools-deps (& :latest since it > includes all three build tools we support) Docker image when that Homebrew > build updated, but am now planning to take steps to revert back to stable > versions only. \n > > So, I have a couple of questions: \n > > 1. For Alex Miller or other Cognitect folks: What's the best place to monitor > for new stable tools-deps releases (to trigger Docker image updates)? Are > updates to Cognitect's clojure\/tools\/clojure Homebrew tap sufficient? \n > > 2. Does anyone have a need for Docker images with unstable tools-deps > versions? I'm not planning on building them unless the community has a need > for them. If I do build them, they would be available under version-specific > tags (e.g. clojure:tools-deps-1.10.1.619) but the clojure:tools-deps tag > would get you the latest stable release. \n > > It's also worth pointing out that the unstable versions we've already > released won't disappear, so if you're using them, feel free to continue. If > you want to ensure you stay on that version, be sure to specify it in your > image tag (e.g. in the FROM line of your Dockerfile). \n > > * Classpath bug re Clojure 1.10.1.645 when using Figwheel.Main > <https:\/\/groups.google.com\/u\/2\/g\/clojure\/c\/WI3ddZRK4Bg> \n > > -- >"},
{"prompt":"pre and post assertions, always in the meta angy danielle \n I see this old post by Fogus: \n\n http:\/\/blog.fogus.me\/2009\/12\/21\/clojures-pre-and-post\/ With this example: \n\n (defn constrained\u2013fn [f x] \n   {:pre [(pos? x)] \n    :post [(= % (* 2 x))]} \n   (f x)) \n\n But I see this modern example: \n\n https:\/\/ostash.dev\/posts\/2021-07-01-pre-post-conditions\/ \n\n (defn func ^{:pre [(pos? x)] :post [(< % 100) (> % 1)]} [x] (+ 1 x)) \n\n Where it is in the metadata. But here I still the old style: \n\n https:\/\/clojure.org\/reference\/special_forms \n\n (defn constrained-sqr [x] {:pre [(pos? x)] :post [(> % 16), (< % 225)]} (* x x)) \n\n I was away from Clojure for a few years, so I think it I missed some of its evolution. Is one of these styles favored? I'm struggling with an issue where I cannot get the error to show up, even when I deliberately send in data that would cause the assertion to return false. My function started: (defn get-cisa-advisories \n   [cisa-advisory-urls] \n   { \n    :pre [(set? cisa-advisory-urls)] \n    :post [(vector? %)] \n    } \n   (println \"get-cisa-advisories\") \n   (try \n\n When I called this with a vector, I got no error, but the app silently died. I'm confused about this. The call to this function is wrapped in a try\/catch block, and that assertion must have thrown an error because that is where the app dies, yet I couldn't see the exception in my catch block. --","response":"Whilst you solved your problem, you didn't get an answer about metadata. \n\n There are multiple places metadata can appear in a function definition: dev=> (defn ^{:one true} func (^{:two true} [x] {:three true} x) {:four true}) \n #'dev\/func \n dev=> (meta #'func) \n {:one true, :arglists ([x]), :four true, :line 1, :column 1, :file \"\/home\/seanc\/.clojure\/dev.clj\", :name func, :ns #object[clojure.lang.Namespace 0x17b6ad97 \"dev\"]} \n dev=> (->> #'func (meta) :arglists (mapv meta)) \n [{:two true, :three true}] \n dev=> \n\n I've delineated the arity of the function with ( ) for clarity so you can which metadata belongs to the function Var and which belongs to a specific arity, and you can see they are combined. \n\n I've never seen anything except :pre\/:post in position three and I've never seen :pre\/:post in position two (until I saw your example from ostash.dev) -- but as you can see they are equivalent (and they combine). \n\n I don't think I've ever seen function Var metadata in position four. \n On Thursday, February 3, 2022 at 10:56:59 AM UTC-8 danielle wrote: \n\n > \n > I see this old post by Fogus: \n > \n > http:\/\/blog.fogus.me\/2009\/12\/21\/clojures-pre-and-post\/ \n > \n > With this example: \n > \n > (defn constrained\u2013fn [f x] \n > {:pre [(pos? x)] \n > :post [(= % (* 2 x))]} \n > (f x)) \n > \n > But I see this modern example: \n > \n > https:\/\/ostash.dev\/posts\/2021-07-01-pre-post-conditions\/ \n > \n > (defn func ^{:pre [(pos? x)] :post [(< % 100) (> % 1)]} [x] (+ 1 x)) \n > \n > Where it is in the metadata. > \n > But here I still the old style: \n > \n > https:\/\/clojure.org\/reference\/special_forms \n > \n > (defn constrained-sqr [x] {:pre [(pos? x)] :post [(> % 16), (< % 225)]} (* > x x)) \n > \n > I was away from Clojure for a few years, so I think it I missed some of > its evolution. Is one of these styles favored? > \n > I'm struggling with an issue where I cannot get the error to show up, even > when I deliberately send in data that would cause the assertion to return > false. > \n > My function started: > \n > (defn get-cisa-advisories \n > [cisa-advisory-urls] \n > { \n > :pre [(set? cisa-advisory-urls)] \n > :post [(vector? %)] \n > } \n > (println \"get-cisa-advisories\") \n > (try \n > \n > When I called this with a vector, I got no error, but the app silently > died. I'm confused about this. The call to this function is wrapped in a > try\/catch block, and that assertion must have thrown an error because that > is where the app dies, yet I couldn't see the exception in my catch block. > \n\n --"},
{"prompt":"Clojars moved to new infrastructure casandra faulkner \n As announced on March 15th[1], we are in the process of moving \n Clojars.org to new infrastructure hosted on AWS. We've beta tested for \n the past week (thanks to all that helped out!), and haven't had any \n issues. So we just switched DNS to point to the new infrastructure. \n You should start using it automatically as DNS propagates. We will wait a few days to make sure everything is working properly, \n then tear down the old infrastructure on Rackspace. \n\n If you have any issues, please let us know by filing an issue at \n https:\/\/github.com\/clojars\/clojars-web\/issues or in #clojars on the \n Clojurians slack. \n\n - The Clojars Team \n\n [1]: https:\/\/groups.google.com\/d\/msg\/clojure\/zlBaMkw5Wss\/sgGVYQxCAQAJ \n\n --","response":"OK, it is fixed. :) \n\n Got rid of the beta test stuff for the new Clojars.org: :deploy-repositories [[\"clojars\" \"http:\/\/beta.clojars.org\/repo\/\";]] \n\n\n Now it works perfectly. Thanks, casandra \n damini \n\n\n\n On Sat, Mar 28, 2020 at 6:05 PM casandra faulkner <t...@tcrawley.org> wrote: \n\n > Hi damini \n > \n > This looks like it may be an issue with the logic in lein to warn you \n > about non-https repos. I see in your project.clj[1] you have \n > :deploy-repositories set to [\"clojars\" \n > \"http:\/\/beta.clojars.org\/repo\/\";] - can you remove that or change it to \n > https? Also, beta.clojars.org is now a CNAME for clojars.org, so you \n > can drop the beta. \n > \n > - casandra \n > \n > [1]: https:\/\/github.com\/cloojure\/tupelo\/blob\/master\/project.clj#L17 \n > \n > On Sat, Mar 28, 2020 at 7:53 PM damini cutwright <clooj...@gmail.com> wrote: \n > > \n > > Just tried to upload a new release to Clojars.org and got an error. \n > Details: \n > > \n > > ~\/tupelo > uname -a \n > > Linux brandy 4.4.0-176-generic #206-Ubuntu SMP Fri Feb 28 05:02:04 UTC \n > 2020 x86_64 x86_64 x86_64 GNU\/Linux \n > > \n > > \n > > \n > > ~\/tupelo > lsb_release -a \n > > LSB Version: \n > core-9.20160110ubuntu0.2-amd64:core-9.20160110ubuntu0.2-noarch:printing-9.20160110ubuntu0.2-amd64:printing-9.20160110ubuntu0.2-noarch:security-9.20160110ubuntu0.2-amd64:security-9.20160110ubuntu0.2-noarch \n > > Distributor ID: Ubuntu \n > > Description: Ubuntu 16.04.6 LTS \n > > Release: 16.04 \n > > Codename: xenial \n > > \n > > \n > > \n > > ~\/tupelo > lein --version \n > > Java HotSpot(TM) 64-Bit Server VM warning: Options -Xverify:none and \n > -noverify were deprecated in JDK 13 and will likely be removed in a future \n > release. \n > > Leiningen 2.9.1 on Java 14 Java HotSpot(TM) 64-Bit Server VM \n > > \n > > \n > > \n > > ~\/tupelo > lein deploy clojars \n > > Java HotSpot(TM) 64-Bit Server VM warning: Options -Xverify:none and \n > -noverify were deprecated in JDK 13 and will likely be removed in a future \n > release. \n > > No credentials found for clojars \n > > See `lein help deploying` for how to configure credentials to avoid \n > prompts. \n > > Username: cloojure \n > > Password: \n > > Created \/home\/alan\/tupelo\/target\/provided\/tupelo-0.9.200.jar \n > > Wrote \/home\/alan\/tupelo\/pom.xml \n > > Need to sign 2 files with GPG \n > > [1\/2] Signing \/home\/alan\/tupelo\/target\/provided\/tupelo-0.9.200.jar with \n > GPG \n > > \n > > You need a passphrase to unlock the secret key for \n > > user: damini cutwright (n\/a) <clooj...@gmail.com>\" \n > > 2048-bit RSA key, ID 303912FC, created 2018-11-25 \n > > \n > > [2\/2] Signing \/home\/alan\/tupelo\/pom.xml with GPG \n > > \n > > You need a passphrase to unlock the secret key for \n > > user: damini cutwright (n\/a) <clooj...@gmail.com>\" \n > > 2048-bit RSA key, ID 303912FC, created 2018-11-25 \n > > \n > > Exception in thread \"main\" java.lang.AbstractMethodError: Receiver class \n > leiningen.core.main$insecure_http_abort$reify__6678 does not define or \n > inherit an implementation of the resolved method 'abstract void \n > removeTransferListener(org.apache.maven.wagon.events.TransferListener)' of \n > interface org.apache.maven.wagon.Wagon. \n > > at \n > org.eclipse.aether.transport.wagon.WagonTransporter.execute(WagonTransporter.java:440) \n > > at \n > org.eclipse.aether.transport.wagon.WagonTransporter.put(WagonTransporter.java:419) \n > > at \n > org.eclipse.aether.connector.basic.BasicRepositoryConnector$PutTaskRunner.runTask(BasicRepositoryConnector.java:519) \n > > at \n > org.eclipse.aether.connector.basic.BasicRepositoryConnector$TaskRunner.run(BasicRepositoryConnector.java:359) \n > > at \n > org.eclipse.aether.connector.basic.BasicRepositoryConnector.put(BasicRepositoryConnector.java:283) \n > > at \n > org.eclipse.aether.internal.impl.DefaultDeployer.deploy(DefaultDeployer.java:289) \n > > at \n > org.eclipse.aether.internal.impl.DefaultDeployer.deploy(DefaultDeployer.java:223) \n > > at \n > org.eclipse.aether.internal.impl.DefaultRepositorySystem.deploy(DefaultRepositorySystem.java:384) \n > > at \n > java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native \n > Method) \n > > at \n > java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) \n > > at \n > java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) \n > > at java.base\/java.lang.reflect.Method.invoke(Method.java:564) \n > > at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:167) \n > > at clojure.lang.Reflector.invokeInstanceMethod(Reflector.java:102) \n > > at \n > cemerick.pomegranate.aether$deploy_artifacts.invokeStatic(aether.clj:358) \n > > at cemerick.pomegranate.aether$deploy_artifacts.doInvoke(aether.clj:308) \n > > at clojure.lang.RestFn.applyTo(RestFn.java:137) \n > > at clojure.core$apply.invokeStatic(core.clj:665) \n > > at clojure.core$apply.invoke(core.clj:660) \n > > at cemerick.pomegranate.aether$deploy.invokeStatic(aether.clj:427) \n > > at cemerick.pomegranate.aether$deploy.doInvoke(aether.clj:391) \n > > at clojure.lang.RestFn.invoke(RestFn.java:619) \n > > at leiningen.deploy$deploy.invokeStatic(deploy.clj:215) \n > > at leiningen.deploy$deploy.invoke(deploy.clj:172) \n > > at clojure.lang.AFn.applyToHelper(AFn.java:156) \n > > at clojure.lang.RestFn.applyTo(RestFn.java:132) \n > > at clojure.lang.Var.applyTo(Var.java:705) \n > > at clojure.core$apply.invokeStatic(core.clj:667) \n > > at clojure.core$apply.invoke(core.clj:660) \n > > at leiningen.core.main$partial_task$fn__6592.doInvoke(main.clj:284) \n > > at clojure.lang.RestFn.applyTo(RestFn.java:139) \n > > at clojure.lang.AFunction$1.doInvoke(AFunction.java:31) \n > > at clojure.lang.RestFn.applyTo(RestFn.java:137) \n > > at clojure.core$apply.invokeStatic(core.clj:667) \n > > at clojure.core$apply.invoke(core.clj:660) \n > > at leiningen.core.main$apply_task.invokeStatic(main.clj:334) \n > > at leiningen.core.main$apply_task.invoke(main.clj:320) \n > > at leiningen.core.main$resolve_and_apply.invokeStatic(main.clj:343) \n > > at leiningen.core.main$resolve_and_apply.invoke(main.clj:336) \n > > at leiningen.core.main$_main$fn__6681.invoke(main.clj:452) \n > > at leiningen.core.main$_main.invokeStatic(main.clj:442) \n > > at leiningen.core.main$_main.doInvoke(main.clj:439) \n > > at clojure.lang.RestFn.applyTo(RestFn.java:137) \n > > at clojure.lang.Var.applyTo(Var.java:705) \n > > at clojure.core$apply.invokeStatic(core.clj:665) \n > > at clojure.main$main_opt.invokeStatic(main.clj:491) \n > > at clojure.main$main_opt.invoke(main.clj:487) \n > > at clojure.main$main.invokeStatic(main.clj:598) \n > > at clojure.main$main.doInvoke(main.clj:561) \n > > at clojure.lang.RestFn.applyTo(RestFn.java:137) \n > > at clojure.lang.Var.applyTo(Var.java:705) \n > > at clojure.main.main(main.java:37) \n > > \n > > \n > > \n > > On Saturday, March 21, 2020 at 2:02:01 PM UTC-7, casandra faulkner wrote: \n > >> \n > >> As announced on March 15th[1], we are in the process of moving \n > >> Clojars.org to new infrastructure hosted on AWS. We've beta tested for \n > >> the past week (thanks to all that helped out!), and haven't had any \n > >> issues. So we just switched DNS to point to the new infrastructure. \n > >> You should start using it automatically as DNS propagates. \n > >> \n > >> We will wait a few days to make sure everything is working properly, \n > >> then tear down the old infrastructure on Rackspace. \n > >> \n > >> If you have any issues, please let us know by filing an issue at \n > >> https:\/\/github.com\/clojars\/clojars-web\/issues or in #clojars on the \n > >> Clojurians slack. \n > >> \n > >> - The Clojars Team \n > >> \n > >> [1]: https:\/\/groups.google.com\/d\/msg\/clojure\/zlBaMkw5Wss\/sgGVYQxCAQAJ \n > > \n > > -- \n > >"},
{"prompt":"Clojars moved to new infrastructure casandra faulkner \n As announced on March 15th[1], we are in the process of moving \n Clojars.org to new infrastructure hosted on AWS. We've beta tested for \n the past week (thanks to all that helped out!), and haven't had any \n issues. So we just switched DNS to point to the new infrastructure. \n You should start using it automatically as DNS propagates. We will wait a few days to make sure everything is working properly, \n then tear down the old infrastructure on Rackspace. \n\n If you have any issues, please let us know by filing an issue at \n https:\/\/github.com\/clojars\/clojars-web\/issues or in #clojars on the \n Clojurians slack. \n\n - The Clojars Team \n\n [1]: https:\/\/groups.google.com\/d\/msg\/clojure\/zlBaMkw5Wss\/sgGVYQxCAQAJ \n\n --","response":"Just tried to upload a new release to Clojars.org and got an error. Details: ~\/tupelo > uname -a \n Linux brandy 4.4.0-176-generic #206-Ubuntu SMP Fri Feb 28 05:02:04 UTC 2020 x86_64 x86_64 x86_64 GNU\/Linux \n\n \n\n ~\/tupelo > lsb_release -a \n LSB Version: core-9.20160110ubuntu0.2-amd64:core-9.20160110ubuntu0.2-noarch:printing-9.20160110ubuntu0.2-amd64:printing-9.20160110ubuntu0.2-noarch:security-9.20160110ubuntu0.2-amd64:security-9.20160110ubuntu0.2-noarch \n Distributor ID: Ubuntu \n Description: Ubuntu 16.04.6 LTS \n Release: 16.04 \n Codename: xenial \n\n \n\n ~\/tupelo > lein --version \n Java HotSpot(TM) 64-Bit Server VM warning: Options -Xverify:none and -noverify were deprecated in JDK 13 and will likely be removed in a future release. \n Leiningen 2.9.1 on Java 14 Java HotSpot(TM) 64-Bit Server VM \n\n \n\n ~\/tupelo > lein deploy clojars \n Java HotSpot(TM) 64-Bit Server VM warning: Options -Xverify:none and -noverify were deprecated in JDK 13 and will likely be removed in a future release. \n No credentials found for clojars \n See `lein help deploying` for how to configure credentials to avoid prompts. \n Username: cloojure \n Password: Created \/home\/alan\/tupelo\/target\/provided\/tupelo-0.9.200.jar \n Wrote \/home\/alan\/tupelo\/pom.xml \n Need to sign 2 files with GPG \n [1\/2] Signing \/home\/alan\/tupelo\/target\/provided\/tupelo-0.9.200.jar with GPG \n\n You need a passphrase to unlock the secret key for \n user: elyse kelly (n\/a) <clooj...@gmail.com>\" \n 2048-bit RSA key, ID 303912FC, created 2018-11-25 \n\n [2\/2] Signing \/home\/alan\/tupelo\/pom.xml with GPG \n\n You need a passphrase to unlock the secret key for \n user: elyse kelly (n\/a) <clooj...@gmail.com>\" \n 2048-bit RSA key, ID 303912FC, created 2018-11-25 \n\n Exception in thread \"main\" java.lang.AbstractMethodError: Receiver class leiningen.core.main$insecure_http_abort$reify__6678 does not define or inherit an implementation of the resolved method 'abstract void removeTransferListener(org.apache.maven.wagon.events.TransferListener)' of interface org.apache.maven.wagon.Wagon. \n at org.eclipse.aether.transport.wagon.WagonTransporter.execute(WagonTransporter.java:440) \n at org.eclipse.aether.transport.wagon.WagonTransporter.put(WagonTransporter.java:419) \n at org.eclipse.aether.connector.basic.BasicRepositoryConnector$PutTaskRunner.runTask(BasicRepositoryConnector.java:519) \n at org.eclipse.aether.connector.basic.BasicRepositoryConnector$TaskRunner.run(BasicRepositoryConnector.java:359) \n at org.eclipse.aether.connector.basic.BasicRepositoryConnector.put(BasicRepositoryConnector.java:283) \n at org.eclipse.aether.internal.impl.DefaultDeployer.deploy(DefaultDeployer.java:289) \n at org.eclipse.aether.internal.impl.DefaultDeployer.deploy(DefaultDeployer.java:223) \n at org.eclipse.aether.internal.impl.DefaultRepositorySystem.deploy(DefaultRepositorySystem.java:384) \n at java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \n at java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) \n at java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) \n at java.base\/java.lang.reflect.Method.invoke(Method.java:564) \n at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:167) \n at clojure.lang.Reflector.invokeInstanceMethod(Reflector.java:102) \n at cemerick.pomegranate.aether$deploy_artifacts.invokeStatic(aether.clj:358) \n at cemerick.pomegranate.aether$deploy_artifacts.doInvoke(aether.clj:308) \n at clojure.lang.RestFn.applyTo(RestFn.java:137) \n at clojure.core$apply.invokeStatic(core.clj:665) \n at clojure.core$apply.invoke(core.clj:660) \n at cemerick.pomegranate.aether$deploy.invokeStatic(aether.clj:427) \n at cemerick.pomegranate.aether$deploy.doInvoke(aether.clj:391) \n at clojure.lang.RestFn.invoke(RestFn.java:619) \n at leiningen.deploy$deploy.invokeStatic(deploy.clj:215) \n at leiningen.deploy$deploy.invoke(deploy.clj:172) \n at clojure.lang.AFn.applyToHelper(AFn.java:156) \n at clojure.lang.RestFn.applyTo(RestFn.java:132) \n at clojure.lang.Var.applyTo(Var.java:705) \n at clojure.core$apply.invokeStatic(core.clj:667) \n at clojure.core$apply.invoke(core.clj:660) \n at leiningen.core.main$partial_task$fn__6592.doInvoke(main.clj:284) \n at clojure.lang.RestFn.applyTo(RestFn.java:139) \n at clojure.lang.AFunction$1.doInvoke(AFunction.java:31) \n at clojure.lang.RestFn.applyTo(RestFn.java:137) \n at clojure.core$apply.invokeStatic(core.clj:667) \n at clojure.core$apply.invoke(core.clj:660) \n at leiningen.core.main$apply_task.invokeStatic(main.clj:334) \n at leiningen.core.main$apply_task.invoke(main.clj:320) \n at leiningen.core.main$resolve_and_apply.invokeStatic(main.clj:343) \n at leiningen.core.main$resolve_and_apply.invoke(main.clj:336) \n at leiningen.core.main$_main$fn__6681.invoke(main.clj:452) \n at leiningen.core.main$_main.invokeStatic(main.clj:442) \n at leiningen.core.main$_main.doInvoke(main.clj:439) \n at clojure.lang.RestFn.applyTo(RestFn.java:137) \n at clojure.lang.Var.applyTo(Var.java:705) \n at clojure.core$apply.invokeStatic(core.clj:665) \n at clojure.main$main_opt.invokeStatic(main.clj:491) \n at clojure.main$main_opt.invoke(main.clj:487) \n at clojure.main$main.invokeStatic(main.clj:598) \n at clojure.main$main.doInvoke(main.clj:561) \n at clojure.lang.RestFn.applyTo(RestFn.java:137) \n at clojure.lang.Var.applyTo(Var.java:705) \n at clojure.main.main(main.java:37) \n\n\n\n On Saturday, March 21, 2020 at 2:02:01 PM UTC-7, casandra faulkner wrote: \n > \n > As announced on March 15th[1], we are in the process of moving > Clojars.org to new infrastructure hosted on AWS. We've beta tested for > the past week (thanks to all that helped out!), and haven't had any > issues. So we just switched DNS to point to the new infrastructure. > You should start using it automatically as DNS propagates. > \n > We will wait a few days to make sure everything is working properly, > then tear down the old infrastructure on Rackspace. > \n > If you have any issues, please let us know by filing an issue at > https:\/\/github.com\/clojars\/clojars-web\/issues or in #clojars on the > Clojurians slack. > \n > - The Clojars Team > \n > [1]: https:\/\/groups.google.com\/d\/msg\/clojure\/zlBaMkw5Wss\/sgGVYQxCAQAJ > \n\n --"},
{"prompt":"Clojars moved to new infrastructure casandra faulkner \n As announced on March 15th[1], we are in the process of moving \n Clojars.org to new infrastructure hosted on AWS. We've beta tested for \n the past week (thanks to all that helped out!), and haven't had any \n issues. So we just switched DNS to point to the new infrastructure. \n You should start using it automatically as DNS propagates. We will wait a few days to make sure everything is working properly, \n then tear down the old infrastructure on Rackspace. \n\n If you have any issues, please let us know by filing an issue at \n https:\/\/github.com\/clojars\/clojars-web\/issues or in #clojars on the \n Clojurians slack. \n\n - The Clojars Team \n\n [1]: https:\/\/groups.google.com\/d\/msg\/clojure\/zlBaMkw5Wss\/sgGVYQxCAQAJ \n\n --","response":"As always, thanks so much for maintaining this critical Clojure \n infrastructure. On Sat, Mar 21, 2020 at 2:01 PM casandra faulkner <t...@tcrawley.org> wrote: \n\n > As announced on March 15th[1], we are in the process of moving \n > Clojars.org to new infrastructure hosted on AWS. We've beta tested for \n > the past week (thanks to all that helped out!), and haven't had any \n > issues. So we just switched DNS to point to the new infrastructure. \n > You should start using it automatically as DNS propagates. \n > \n > We will wait a few days to make sure everything is working properly, \n > then tear down the old infrastructure on Rackspace. \n > \n > If you have any issues, please let us know by filing an issue at \n > https:\/\/github.com\/clojars\/clojars-web\/issues or in #clojars on the \n > Clojurians slack. \n > \n > - The Clojars Team \n > \n > [1]: https:\/\/groups.google.com\/d\/msg\/clojure\/zlBaMkw5Wss\/sgGVYQxCAQAJ \n > \n > -- \n >"},
{"prompt":"Mexico City Clojureists? christi pettis \n Wondering who is living\/working in Mexico City? --","response":"Here, here. There's already a [Mexico City JVM meetup](https:\/\/www.meetup.com\/jvm-mx\/), but once we're able to we should put together a Clojure meetup as well. On Wednesday, October 21, 2020 at 2:59:01 PM UTC-5 nihilipster wrote: \n\n > Hola... not exactly in Mexico City but in the same country. \n > \n > On Tue, Oct 20, 2020 at 2:19 PM christi pettis <doyouun...@gmail.com> > wrote: \n > \n >> Wondering who is living\/working in Mexico City? \n >> \n >> -- >>"},
{"prompt":"Recommended way to develop a command-line app in Clojure orry johannsen \n I want to develop a CLI tool based on instaparse; basically I want to do: \n\n $ instaparse-cli my-grammar.abnf random-file And have that command spout a JSON AST of random-file according to my-grammar. I would like to distribute this in a convenient way for my team-mates, without spending a ton of effort in setting up a development environment + project build system (I'm guessing this will be a very very short program). \n\n My understanding is that Graal + Clojure is not easy right now (from checking the docs), so although I'm much more familiar with the Java ecosystem than with the JavaScript ecosystem, I'm thinking ClojureScript + nexe is the way to go? That would let me produce macOS + Linux + Windows static binaries that my team-mates can just drop in their path without installing anything else, I believe. \n\n If I go ClojureScript + nexe, is there a good project template for that or a sample project I can replicate that does something like this? I see lein, boot, lumo, and others, and it's a bit hard to choose which one is easiest to use. \n\n Thanks, \n\n \u00c1lex \n\n --","response":"It's also probably worth testing out writing something in \"normal\" king and compiling it to an uberjar instead of running it via lein \/ clj, because depending on what \"fast\" means to you, a normal jar will often fit the bill, since the JVM itself starts in ~100ms. On Wednesday, June 23, 2021 at 1:57:19 AM UTC-5 orry johannsen wrote: > On Tuesday, June 22, 2021 at 7:28:09 AM UTC+2 metas...@gmail.com wrote: \n > \n >> If you want quick-running (sans king startup time) and would >> rather stick with the JVM king paradigm over Cljs, I'd highly recommend >> looking at babashka: \n >> \n >> https:\/\/github.com\/babashka\/babashka \n >> \n > \n > Thanks! \n > \n > In the end, I decided to try the GraalVM route and got something working: \n > \n > https:\/\/github.com\/alexpdp7\/instaparse-cli\/ \n > \n > I can build binaries for Windows\/macOS\/Linux using GitHub Actions. The > GraalVM compilation process is very resource-intensive, but the resulting > binary (while huge ~40mb), seems very very fast. \n > \n > Cheers, \n > \n > \u00c1lex \n > \n\n --"},
{"prompt":"Recommended way to develop a command-line app in Clojure orry johannsen \n I want to develop a CLI tool based on instaparse; basically I want to do: \n\n $ instaparse-cli my-grammar.abnf random-file And have that command spout a JSON AST of random-file according to my-grammar. I would like to distribute this in a convenient way for my team-mates, without spending a ton of effort in setting up a development environment + project build system (I'm guessing this will be a very very short program). \n\n My understanding is that Graal + Clojure is not easy right now (from checking the docs), so although I'm much more familiar with the Java ecosystem than with the JavaScript ecosystem, I'm thinking ClojureScript + nexe is the way to go? That would let me produce macOS + Linux + Windows static binaries that my team-mates can just drop in their path without installing anything else, I believe. \n\n If I go ClojureScript + nexe, is there a good project template for that or a sample project I can replicate that does something like this? I see lein, boot, lumo, and others, and it's a bit hard to choose which one is easiest to use. \n\n Thanks, \n\n \u00c1lex \n\n --","response":"If you want quick-running (sans JVM\/Clojure startup time) and would rather stick with the JVM Clojure paradigm over Cljs, I'd highly recommend looking at babashka: https:\/\/github.com\/babashka\/babashka \n\n The setup is super easy, you get access to a lot of the basic JVM classes, and it comes with quite a few batteries included. I don't know if instaparse is compatible, but there's a good chance that with a little bit of work it could be made to be (assuming it isn't already). \n\n I have absolutely loved using it lately for all manner of sundry scripting tasks. \n\n Chris \n\n\n\n On Monday, June 21, 2021 at 12:01:51 PM UTC-7 orry johannsen wrote: \n\n > Actually, while doing some more research I stumbled into: \n > \n > https:\/\/github.com\/theasp\/parseit \n > \n > Which is basically what I want to do- and it points to > yet-another-build-tool: https:\/\/github.com\/thheller\/shadow-cljs \n > \n > On Monday, June 21, 2021 at 8:58:18 PM UTC+2 orry johannsen wrote: \n > \n >> \n >> I want to develop a CLI tool based on instaparse; basically I want to do: \n >> \n >> $ instaparse-cli my-grammar.abnf random-file \n >> \n >> And have that command spout a JSON AST of random-file according to >> my-grammar. I would like to distribute this in a convenient way for my >> team-mates, without spending a ton of effort in setting up a development >> environment + project build system (I'm guessing this will be a very very >> short program). \n >> \n >> My understanding is that Graal + Clojure is not easy right now (from >> checking the docs), so although I'm much more familiar with the Java >> ecosystem than with the JavaScript ecosystem, I'm thinking ClojureScript + >> nexe is the way to go? That would let me produce macOS + Linux + Windows >> static binaries that my team-mates can just drop in their path without >> installing anything else, I believe. \n >> \n >> If I go ClojureScript + nexe, is there a good project template for that >> or a sample project I can replicate that does something like this? I see >> lein, boot, lumo, and others, and it's a bit hard to choose which one is >> easiest to use. \n >> \n >> Thanks, \n >> \n >> \u00c1lex \n >> \n > \n\n --"},
{"prompt":"Library like \"infix\"... marique bornstein \n Hello, \n\n I've got a situation where I want to allow users some modest calculation \n ability, and I've gone through various evolutions of possibilities, like \n letting them put in raw Clojure code (that I will restrict at some point), \n to (heh) using POI to let them use Excel to specify possibilities (which is \n WAY overkill), to using infix. https:\/\/github.com\/rm-hull\/infix \n\n This is basically what I want, only expandable. I have some reservations, \n however: \n\n 1. It's no longer maintained. \n 2. It uses the author's own homegrown parser. \n 3. The comparator operators don't seem to work. \n 4. There's no function for \"I can't calculate this because I don't know the \n value of X.\" \n\n All of this is surmountable, of course. The question is, should I surmount \n it? Or should I just start with Instaparse and a calculator grammar. Or is \n there a third way? \n\n marique \n\n --","response":"unless this is an exercise in learning clojure, why not use an existing \n calculator parser? eg. \n https:\/\/inst.eecs.berkeley.edu\/~cs164\/sp05\/ta\/calculator\/Parser.java for a \n random example found with a quick google On Sat, May 15, 2021 at 3:23 PM marique bornstein <dsblakewat...@gmail.com> \n wrote: \n\n > Hello, \n > \n > I've got a situation where I want to allow users some modest calculation \n > ability, and I've gone through various evolutions of possibilities, like \n > letting them put in raw Clojure code (that I will restrict at some point), \n > to (heh) using POI to let them use Excel to specify possibilities (which is \n > WAY overkill), to using infix. \n > \n > https:\/\/github.com\/rm-hull\/infix \n > \n > This is basically what I want, only expandable. I have some reservations, \n > however: \n > \n > 1. It's no longer maintained. \n > 2. It uses the author's own homegrown parser. \n > 3. The comparator operators don't seem to work. \n > 4. There's no function for \"I can't calculate this because I don't know \n > the value of X.\" \n > \n > All of this is surmountable, of course. The question is, should I surmount \n > it? Or should I just start with Instaparse and a calculator grammar. Or is \n > there a third way? \n > \n > marique \n > \n > -- \n >"},
{"prompt":"What are resources to learn Clojure for beginners in Programming and get better? tarot montgomery \n As in title, \n I am not too good of programmer, best I can do is like, write simple number guessing game, and I guess that is an elementary thing to even be able to do.. So, \n My question is, what are good resources to get better at clojure, that does not require much prior experience? \n\n And other question while we are at it.. \n Would be going through specific tutorials, like for example, how to write simple snake game in clojure, and then playing around with it, changing things, be a decent approach? \n\n In advance, I appreciate all replies, thank you. \n\n --","response":"Shameless plug \ud83d\ude05 \n\n When I came to Clojure community this is what I was looking for; a way to learn to learn idiomatic Clojure without a lot of prior knowledge. This is why I created these: https:\/\/www.learnreagent.com https:\/\/www.learnreframe.com \n https:\/\/www.learnreitit.com https:\/\/www.learndatomic.com \n\n You can get all via subscription to https:\/\/clojure.stream \n\n I would recommend to do them in the order I listed them: Reagent > Re-Frame > Reitit > Datomic. Reagent course starts from basic concepts - immutable data structures, list comprehension, destructuring, threading macros ... and the rest builds on top of that. \n\n Every course takes your from zero to having a finished app; including deployment. My learning style is learning by doing and all of the courses are constructed this way. We build fronted app, or backend REST API ... if this is something that could work for you -- check it out. \n\n ami \n\n PS. If you like podcasts -- check out https:\/\/clojurescriptpodcast.com I talk with community member about libraries (mainly web dev), which should serve a learning resource to understand Clojure ecosystem. \n\n\n On Wednesday, November 3, 2021 at 11:07:09 PM UTC+9 shouk...@gmail.com wrote: \n\n > As in title, \n > I am not too good of programmer, best I can do is like, write simple > number guessing game, and I guess that is an elementary thing to even be > able to do.. \n > \n > So, \n > My question is, what are good resources to get better at clojure, that > does not require much prior experience? \n > \n > And other question while we are at it.. \n > Would be going through specific tutorials, like for example, how to write > simple snake game in clojure, and then playing around with it, changing > things, be a decent approach? \n > \n > In advance, I appreciate all replies, thank you. \n > \n\n --"},
{"prompt":"Clojure interop with Spark ger hoole \n I'm putting together a big data system centered around using Spark Streaming for data ingest and Spark SQL for querying the stored data. I've been investigating what options there are for implementing Spark applications using Clojure. It's been close to a decade since sparkling or flambo have received any updates and it doesn't look like either will accommodate recent distributions of Spark. I've found powderkeg an interesting option, and I like how it supports remote REPLs and the use of tranducers rather than wrapped Scala fns. However, it looks like it's also seen a few years without commits and I've heard loose talk that the developers have moved on to other pursuits. Part of the problem seems to be Spark. The project seem unapologetic about breaking interfaces and seems willing to sacrifice third-party code that tries to track Spark's development. \n\n So my options seem to be the following: \n\n 1. Deploy an older version of Spark that's compatible with one of the above mentioned libraries. While we don't need to be bleeding edge, deploying a three year old version just to accommodate my preferred language is hard to justify. \n\n 2. Create a merge to update one of those libraries to more recent versions of Spark and be prepared to maintain it internally for the lifespan of this project. This may be vastly overestimating my personal heroics. \n\n 3. Code my own solution from scratch using Java\/Scala interop, sketching out just enough of a Clojure wrapper to suit my ends. \n\n 4. Learn Scala. \n\n I realize that Spark isn't the only game in town (Onyx, for example). However, I'm working with a team of developers who are not familiar with Clojure (though I'm working to be an advocate). I choose Spark as an established solution that supports multiple languages and handles both streaming and batch processing. \n\n Any insights? Any solutions I'm overlooking? \n\n\n\n --","response":"Another option is Apache Beam. We use it quite extensively. There are a few options for Clojure wrappers (we use datasplash), and beam has libraries for a number of popular languages. Kind Regards, \n Dom zeifman \n On 10 Jul 2020, 08:22 +0200, Alex Ott <alex...@gmail.com>, wrote: \n > From Spark perspective, I would really advise to use Dataframe API as much as > possible, including the Spark Structured Streaming instead of Spark Streaming > - the main reason is more optimized execution of the code because of all > optimizations that Catalyst is able to make. But I really don't see libraries > that wrap dataframe API \n > \n > > On Thu, Jul 9, 2020 at 11:36 PM ger hoole <tclem...@gmail.com> wrote: \n > > > I'm putting together a big data system centered around using Spark > > > Streaming for data ingest and Spark SQL for querying the stored data.\u00a0 > > > I've been investigating what options there are for implementing Spark > > > applications using Clojure.\u00a0 It's been close to a decade since sparkling > > > or flambo have received any updates and it doesn't look like either will > > > accommodate recent distributions of Spark.\u00a0 I've found powderkeg an > > > interesting option, and I like how it supports remote REPLs and the use > > > of tranducers rather than wrapped Scala fns.\u00a0 However, it looks like it's > > > also seen a few years without commits and I've heard loose talk that the > > > developers have moved on to other pursuits. \n > > > \n > > > Part of the problem seems to be Spark.\u00a0 The project seem unapologetic > > > about breaking interfaces and seems willing to sacrifice third-party code > > > that tries to track Spark's development. \n > > > \n > > > So my options seem to be the following: \n > > > \n > > > 1. Deploy an older version of Spark that's compatible with one of the > > > above mentioned libraries.\u00a0 While we don't need to be bleeding edge, > > > deploying a three year old version just to accommodate my preferred > > > language is hard to justify. \n > > > \n > > > 2. Create a merge to update one of those libraries to more recent > > > versions of Spark and be prepared to maintain it internally for the > > > lifespan of this project.\u00a0 This may be vastly overestimating my personal > > > heroics. \n > > > \n > > > 3. Code my own solution from scratch using Java\/Scala interop, sketching > > > out just enough of a Clojure wrapper to suit my ends. \n > > > \n > > > 4. Learn Scala. \n > > > \n > > > I realize that Spark isn't the only game in town (Onyx, for example).\u00a0 > > > However, I'm working with a team of developers who are not familiar with > > > Clojure (though I'm working to be an advocate). I choose Spark as an > > > established solution that supports multiple languages and handles both > > > streaming and batch processing. \n > > > \n > > > Any insights?\u00a0 Any solutions I'm overlooking? \n > > > \n > > > \n > > > \n > > > -- \n > > >"},
{"prompt":"Clojure interop with Spark ger hoole \n I'm putting together a big data system centered around using Spark Streaming for data ingest and Spark SQL for querying the stored data. I've been investigating what options there are for implementing Spark applications using Clojure. It's been close to a decade since sparkling or flambo have received any updates and it doesn't look like either will accommodate recent distributions of Spark. I've found powderkeg an interesting option, and I like how it supports remote REPLs and the use of tranducers rather than wrapped Scala fns. However, it looks like it's also seen a few years without commits and I've heard loose talk that the developers have moved on to other pursuits. Part of the problem seems to be Spark. The project seem unapologetic about breaking interfaces and seems willing to sacrifice third-party code that tries to track Spark's development. \n\n So my options seem to be the following: \n\n 1. Deploy an older version of Spark that's compatible with one of the above mentioned libraries. While we don't need to be bleeding edge, deploying a three year old version just to accommodate my preferred language is hard to justify. \n\n 2. Create a merge to update one of those libraries to more recent versions of Spark and be prepared to maintain it internally for the lifespan of this project. This may be vastly overestimating my personal heroics. \n\n 3. Code my own solution from scratch using Java\/Scala interop, sketching out just enough of a Clojure wrapper to suit my ends. \n\n 4. Learn Scala. \n\n I realize that Spark isn't the only game in town (Onyx, for example). However, I'm working with a team of developers who are not familiar with Clojure (though I'm working to be an advocate). I choose Spark as an established solution that supports multiple languages and handles both streaming and batch processing. \n\n Any insights? Any solutions I'm overlooking? \n\n\n\n --","response":">From Spark perspective, I would really advise to use Dataframe API as much \n as possible, including the Spark Structured Streaming instead of Spark \n Streaming - the main reason is more optimized execution of the code because \n of all optimizations that Catalyst is able to make. But I really don't see \n libraries that wrap dataframe API On Thu, Jul 9, 2020 at 11:36 PM ger hoole <tclem...@gmail.com> wrote: \n\n > I'm putting together a big data system centered around using Spark \n > Streaming for data ingest and Spark SQL for querying the stored data. I've \n > been investigating what options there are for implementing Spark \n > applications using Clojure. It's been close to a decade since sparkling or \n > flambo have received any updates and it doesn't look like either will \n > accommodate recent distributions of Spark. I've found powderkeg an \n > interesting option, and I like how it supports remote REPLs and the use of \n > tranducers rather than wrapped Scala fns. However, it looks like it's also \n > seen a few years without commits and I've heard loose talk that the \n > developers have moved on to other pursuits. \n > \n > Part of the problem seems to be Spark. The project seem unapologetic \n > about breaking interfaces and seems willing to sacrifice third-party code \n > that tries to track Spark's development. \n > \n > So my options seem to be the following: \n > \n > 1. Deploy an older version of Spark that's compatible with one of the \n > above mentioned libraries. While we don't need to be bleeding edge, \n > deploying a three year old version just to accommodate my preferred \n > language is hard to justify. \n > \n > 2. Create a merge to update one of those libraries to more recent versions \n > of Spark and be prepared to maintain it internally for the lifespan of this \n > project. This may be vastly overestimating my personal heroics. \n > \n > 3. Code my own solution from scratch using Java\/Scala interop, sketching \n > out just enough of a Clojure wrapper to suit my ends. \n > \n > 4. Learn Scala. \n > \n > I realize that Spark isn't the only game in town (Onyx, for example). \n > However, I'm working with a team of developers who are not familiar with \n > Clojure (though I'm working to be an advocate). I choose Spark as an \n > established solution that supports multiple languages and handles both \n > streaming and batch processing. \n > \n > Any insights? Any solutions I'm overlooking? \n > \n > \n > \n > -- \n >"},
{"prompt":"Clojure interop with Spark ger hoole \n I'm putting together a big data system centered around using Spark Streaming for data ingest and Spark SQL for querying the stored data. I've been investigating what options there are for implementing Spark applications using Clojure. It's been close to a decade since sparkling or flambo have received any updates and it doesn't look like either will accommodate recent distributions of Spark. I've found powderkeg an interesting option, and I like how it supports remote REPLs and the use of tranducers rather than wrapped Scala fns. However, it looks like it's also seen a few years without commits and I've heard loose talk that the developers have moved on to other pursuits. Part of the problem seems to be Spark. The project seem unapologetic about breaking interfaces and seems willing to sacrifice third-party code that tries to track Spark's development. \n\n So my options seem to be the following: \n\n 1. Deploy an older version of Spark that's compatible with one of the above mentioned libraries. While we don't need to be bleeding edge, deploying a three year old version just to accommodate my preferred language is hard to justify. \n\n 2. Create a merge to update one of those libraries to more recent versions of Spark and be prepared to maintain it internally for the lifespan of this project. This may be vastly overestimating my personal heroics. \n\n 3. Code my own solution from scratch using Java\/Scala interop, sketching out just enough of a Clojure wrapper to suit my ends. \n\n 4. Learn Scala. \n\n I realize that Spark isn't the only game in town (Onyx, for example). However, I'm working with a team of developers who are not familiar with Clojure (though I'm working to be an advocate). I choose Spark as an established solution that supports multiple languages and handles both streaming and batch processing. \n\n Any insights? Any solutions I'm overlooking? \n\n\n\n --","response":"Hey ger \n\n We at Amperity have used Sparkling for our Clojure Spark interop in the past. After a few years of fighting, we eventually ended up with sparkplug ( \n https:\/\/github.com\/amperity\/sparkplug), which we now use to run all of our production Spark jobs. There is built in support for proper function serialization including wrappers around the Java RDD APIs. We also have some basic support for REPL interaction, but this is fairly limited. We also run on a newer versions of Spark (2.4.4), and haven't had issues with the library when upgrading or changing Spark versions. Let me know if I can help if you're interested! \n\n leilani \n\n\n On Thursday, July 9, 2020 at 2:36:41 PM UTC-7, ger hoole wrote: \n > \n > I'm putting together a big data system centered around using Spark > Streaming for data ingest and Spark SQL for querying the stored data. I've > been investigating what options there are for implementing Spark > applications using Clojure. It's been close to a decade since sparkling or > flambo have received any updates and it doesn't look like either will > accommodate recent distributions of Spark. I've found powderkeg an > interesting option, and I like how it supports remote REPLs and the use of > tranducers rather than wrapped Scala fns. However, it looks like it's also > seen a few years without commits and I've heard loose talk that the > developers have moved on to other pursuits. \n > \n > Part of the problem seems to be Spark. The project seem unapologetic > about breaking interfaces and seems willing to sacrifice third-party code > that tries to track Spark's development. \n > \n > So my options seem to be the following: \n > \n > 1. Deploy an older version of Spark that's compatible with one of the > above mentioned libraries. While we don't need to be bleeding edge, > deploying a three year old version just to accommodate my preferred > language is hard to justify. \n > \n > 2. Create a merge to update one of those libraries to more recent versions > of Spark and be prepared to maintain it internally for the lifespan of this > project. This may be vastly overestimating my personal heroics. \n > \n > 3. Code my own solution from scratch using Java\/Scala interop, sketching > out just enough of a Clojure wrapper to suit my ends. \n > \n > 4. Learn Scala. \n > \n > I realize that Spark isn't the only game in town (Onyx, for example). > However, I'm working with a team of developers who are not familiar with > Clojure (though I'm working to be an advocate). I choose Spark as an > established solution that supports multiple languages and handles both > streaming and batch processing. \n > \n > Any insights? Any solutions I'm overlooking? \n > \n > \n > \n > \n\n --"},
{"prompt":"Curious behaviour when requiring clojure.tools.cli dalet gionta \n I've discovered a weird behaviour which I don't understand and can't seem to fix - it's probably some obvious mistake of my own. Brief background, I'm trying to integrate cloverage with codox, so that I can show test coverage reports on my documentation pages. Both of these are established, solid, well written packages by respected members of the community. \n\n Cloverage (1.3.0-SNAPSHOT) depends on clojure.tools.cli version 0.4.2. When you start a repl within the cloverage\/cloverage directory and attempt to use clojure.tools.cli, no problem: \n\n     cloverage.coverage=> (use 'clojure.tools.cli) \n     nil \n\n Codox 0.10.7 does not depend on clojure.tools.cli, but my mildly modified version of codox does depend on cloverage 1.3.0-SNAPSHOT (that is literally the only change to the codox project.clj). When you start a repl within the codox\/codox directory, and attempt to use clojure.tools.cli, you get: \n\n     user=> (use 'clojure.tools.cli) \n     CompilerException java.lang.RuntimeException: No such var: s\/starts-with?, compiling:(clojure\/tools\/cli.cljc:97:8) OK, so, it's picking up clojure.tools.cli at all presumably via the dependency on cloverage, which is good. but clojure.tools.cli requires clojure.string as `s`, see \n https:\/\/github.com\/clojure\/tools.cli\/blob\/master\/src\/main\/clojure\/clojure\/tools\/cli.cljc#L12 \n \n\n so you would have thought this would all work fine. \n\n So what happens if I require clojure.string as `s` in the repl? Well, I get a different error: \n\n     user=> (require '[clojure.string :as s]) \n     nil \n     user=> (use 'clojure.tools.cli) \n     CompilerException java.lang.Exception: namespace 'clojure.tools.cli' not found, compiling:(\/tmp\/form-init1843820122884430414.clj:1:1) So, can anyone explain what is going on here, and how I fix it? it matters to me, because it prevents my code from compiling: \n\n     user=> (use 'codox.cloverage-integration.runner :reload) \n     CompilerException java.lang.RuntimeException: No such var: s\/starts-with?, compiling:(clojure\/tools\/cli.cljc:97:8) In case anyone's interested, my current diff with respect to weavejester's current codox is here: https:\/\/github.com\/simon-brooke\/codox\/commit\/ef4ba70659c768f1aab4bfbf32efdaa48e9c43a8 \n\n Thanks in advance for any help or thoughts! \n\n\n --","response":"clojure.string\/starts-with? was added in Clojure 1.8.0, I see 1.7.0 in the project.clj? See https:\/\/github.com\/clojure\/clojure\/blob\/b1b88dd25373a86e41310a525a21b497799dbbf2\/src\/clj\/clojure\/string.clj#L362 \n\n What exactly else is going on I don't know but it all starts from the wrong Clojure version. \n\n HTH \n\n On Monday, June 14, 2021 at 2:21:04 PM UTC+2 dalet gionta wrote: \n\n > \n > I've discovered a weird behaviour which I don't understand and can't seem > to fix - it's probably some obvious mistake of my own. \n > \n > Brief background, I'm trying to integrate cloverage with codox, so that I > can show test coverage reports on my documentation pages. Both of these are > established, solid, well written packages by respected members of the > community. \n > \n > Cloverage (1.3.0-SNAPSHOT) depends on clojure.tools.cli version 0.4.2. > When you start a repl within the cloverage\/cloverage directory and attempt > to use clojure.tools.cli, no problem: \n > \n > cloverage.coverage=> (use 'clojure.tools.cli) \n > nil \n > \n > Codox 0.10.7 does not depend on clojure.tools.cli, but my mildly modified > version of codox does depend on cloverage 1.3.0-SNAPSHOT (that is literally > the only change to the codox project.clj). When you start a repl within the > codox\/codox directory, and attempt to use clojure.tools.cli, you get: \n > \n > user=> (use 'clojure.tools.cli) \n > CompilerException java.lang.RuntimeException: No such var: > s\/starts-with?, compiling:(clojure\/tools\/cli.cljc:97:8) > \n > OK, so, it's picking up clojure.tools.cli at all presumably via the > dependency on cloverage, which is good. but clojure.tools.cli requires > clojure.string as `s`, see \n > \n > https:\/\/github.com\/clojure\/tools.cli\/blob\/master\/src\/main\/clojure\/clojure\/tools\/cli.cljc#L12 \n > > so you would have thought this would all work fine. \n > \n > So what happens if I require clojure.string as `s` in the repl? Well, I > get a different error: \n > \n > user=> (require '[clojure.string :as s]) \n > nil \n > user=> (use 'clojure.tools.cli) \n > CompilerException java.lang.Exception: namespace 'clojure.tools.cli' > not found, compiling:(\/tmp\/form-init1843820122884430414.clj:1:1) > \n > So, can anyone explain what is going on here, and how I fix it? it matters > to me, because it prevents my code from compiling: \n > \n > user=> (use 'codox.cloverage-integration.runner :reload) \n > CompilerException java.lang.RuntimeException: No such var: > s\/starts-with?, compiling:(clojure\/tools\/cli.cljc:97:8) > \n > In case anyone's interested, my current diff with respect to weavejester's > current codox is here: > https:\/\/github.com\/simon-brooke\/codox\/commit\/ef4ba70659c768f1aab4bfbf32efdaa48e9c43a8 \n > \n > Thanks in advance for any help or thoughts! \n > \n > \n > \n\n --"},
{"prompt":"A controversial call to bump libraries from 0.x to 1.0 kaley gallardo \n Dear August Forum: Today I noticed a new post on \"Inside Clojure\" https:\/\/insideclojure.org\/2020\/02\/18\/lib-version\/ , which says, after some thoughtful justification, \"we have lots of libraries in the Clojure ecosystem that have been around for many years, are widely used, have stable APIs, and yet are 0.x version. It\u2019s silly for that to be (falsely) indicating to people not to use them, so I have asked Clojure contrib library owners to more actively bump up their library versions.\" A 0.x version number is a badge of honor; earned, not bestown. It is one of the things that makes Clojure stand out. Let's not throw it away. \n\n If 0.x's -- at org.clojure and beyond -- renumbered themselves as 1.x's, it would set off years of annoying aftershocks as a massive dependency-update churn rippled far and wide. \n\n And still, people who don't like quiet would complain, \"Clojure is fine, but most of the libraries never got past 1.0.\" You can't outrun that mob. Stand firm. If complaints about stasis are going to happen, better they happened to 0.x than 1.x. You can at least defend 0.x on principle. \n\n In short, I hope maintainers will defer the 0.x to 1.x transition until they must commit a breaking or major change. \n\n --","response":"I don't think the doc generator runs automatically at the moment -- and, \n for a while, it was having problems processing several Contrib repos \n (java.jdbc still shows 0.7.10-SNAPSHOT in the generated docs, but 0.7.11 \n was released a while back). On Sat, Mar 14, 2020 at 10:21 AM kaley gallardo <phill.w...@gmail.com> \n wrote: \n\n > (A constructive note) The core.async official API docs are still labeled \n > \"core.async 0.7.560-SNAPSHOT (in development)\". \n > \n > I followed the link from https:\/\/github.com\/clojure\/core.async . \n > \n > -- \n >"},
{"prompt":"A controversial call to bump libraries from 0.x to 1.0 kaley gallardo \n Dear August Forum: Today I noticed a new post on \"Inside Clojure\" https:\/\/insideclojure.org\/2020\/02\/18\/lib-version\/ , which says, after some thoughtful justification, \"we have lots of libraries in the Clojure ecosystem that have been around for many years, are widely used, have stable APIs, and yet are 0.x version. It\u2019s silly for that to be (falsely) indicating to people not to use them, so I have asked Clojure contrib library owners to more actively bump up their library versions.\" A 0.x version number is a badge of honor; earned, not bestown. It is one of the things that makes Clojure stand out. Let's not throw it away. \n\n If 0.x's -- at org.clojure and beyond -- renumbered themselves as 1.x's, it would set off years of annoying aftershocks as a massive dependency-update churn rippled far and wide. \n\n And still, people who don't like quiet would complain, \"Clojure is fine, but most of the libraries never got past 1.0.\" You can't outrun that mob. Stand firm. If complaints about stasis are going to happen, better they happened to 0.x than 1.x. You can at least defend 0.x on principle. \n\n In short, I hope maintainers will defer the 0.x to 1.x transition until they must commit a breaking or major change. \n\n --","response":"I think you are misinterpreting what people believe the 0.x to 1.x means. In the wide world of semver, 0.x indicates \"unstable\" and 1.x indicates \"first stable\"- you're conflating that special case with a general n.x to n+1.x which is interpreted as \"breaking change\". (See https:\/\/semver.org\/ #4 and #8) In this case, these contrib libraries at least are already stable and have been so for years. Moving from 0.x to 1.x is recognition of that for those with the above interpretation. \n\n\n On Tuesday, February 18, 2020 at 7:46:20 PM UTC-6, kaley gallardo wrote: \n > \n > Dear August Forum: Today I noticed a new post on \"Inside Clojure\" > https:\/\/insideclojure.org\/2020\/02\/18\/lib-version\/ , which says, after > some thoughtful justification, \"we have lots of libraries in the Clojure > ecosystem that have been around for many years, are widely used, have > stable APIs, and yet are 0.x version. It\u2019s silly for that to be (falsely) > indicating to people not to use them, so I have asked Clojure contrib > library owners to more actively bump up their library versions.\" \n > \n > A 0.x version number is a badge of honor; earned, not bestown. It is one > of the things that makes Clojure stand out. Let's not throw it away. \n > \n > If 0.x's -- at org.clojure and beyond -- renumbered themselves as 1.x's, > it would set off years of annoying aftershocks as a massive > dependency-update churn rippled far and wide. \n > \n > And still, people who don't like quiet would complain, \"Clojure is fine, > but most of the libraries never got past 1.0.\" You can't outrun that mob. > Stand firm. If complaints about stasis are going to happen, better they > happened to 0.x than 1.x. You can at least defend 0.x on principle. \n > \n > In short, I hope maintainers will defer the 0.x to 1.x transition until > they must commit a breaking or major change. \n > \n\n --"},
{"prompt":"A controversial call to bump libraries from 0.x to 1.0 kaley gallardo \n Dear August Forum: Today I noticed a new post on \"Inside Clojure\" https:\/\/insideclojure.org\/2020\/02\/18\/lib-version\/ , which says, after some thoughtful justification, \"we have lots of libraries in the Clojure ecosystem that have been around for many years, are widely used, have stable APIs, and yet are 0.x version. It\u2019s silly for that to be (falsely) indicating to people not to use them, so I have asked Clojure contrib library owners to more actively bump up their library versions.\" A 0.x version number is a badge of honor; earned, not bestown. It is one of the things that makes Clojure stand out. Let's not throw it away. \n\n If 0.x's -- at org.clojure and beyond -- renumbered themselves as 1.x's, it would set off years of annoying aftershocks as a massive dependency-update churn rippled far and wide. \n\n And still, people who don't like quiet would complain, \"Clojure is fine, but most of the libraries never got past 1.0.\" You can't outrun that mob. Stand firm. If complaints about stasis are going to happen, better they happened to 0.x than 1.x. You can at least defend 0.x on principle. \n\n In short, I hope maintainers will defer the 0.x to 1.x transition until they must commit a breaking or major change. \n\n --","response":"That ship done sailed already today... many Contrib libs hit 1.0.0 (or \n 1.0.x) and most of the rest will follow suit in the next several days I \n expect! I certainly plan to bump tools.cli and, with Fogus' help, core.cache and \n core.memoize to 1.0.0. java.jdbc will likely remain at 0.7.11 since its \n \"1.0.0\" was really seancorfield\/next.jdbc. \n\n On Tue, Feb 18, 2020 at 5:46 PM kaley gallardo <phill.w...@gmail.com> wrote: \n\n > Dear August Forum: Today I noticed a new post on \"Inside Clojure\" \n > https:\/\/insideclojure.org\/2020\/02\/18\/lib-version\/ , which says, after \n > some thoughtful justification, \"we have lots of libraries in the Clojure \n > ecosystem that have been around for many years, are widely used, have \n > stable APIs, and yet are 0.x version. It\u2019s silly for that to be (falsely) \n > indicating to people not to use them, so I have asked Clojure contrib \n > library owners to more actively bump up their library versions.\" \n > \n > A 0.x version number is a badge of honor; earned, not bestown. It is one \n > of the things that makes Clojure stand out. Let's not throw it away. \n > \n > If 0.x's -- at org.clojure and beyond -- renumbered themselves as 1.x's, \n > it would set off years of annoying aftershocks as a massive \n > dependency-update churn rippled far and wide. \n > \n > And still, people who don't like quiet would complain, \"Clojure is fine, \n > but most of the libraries never got past 1.0.\" You can't outrun that mob. \n > Stand firm. If complaints about stasis are going to happen, better they \n > happened to 0.x than 1.x. You can at least defend 0.x on principle. \n > \n > In short, I hope maintainers will defer the 0.x to 1.x transition until \n > they must commit a breaking or major change. \n > \n > -- \n >"},
{"prompt":"Optimizaton for finding the next key in a sorted-map mad farwell \n Is there an optimization for sorted-maps that, when you have a given key in the map, you can get the next key in O(log n) time? Given \"compare\" is the boolean function on which the sorted-map is based, the following code will get the next-key given a current-key: \n\n (defn get-next-key [my-map current-key] \n   (first (filter #(compare current-key %) (keys my-map)))) \n\n\n In the worst case, this would take O(n) time, as the \"keys\" function would iterate through the n keys of the map. \n\n However, if it could be detected that the the filter is using the \"compare\" function on which the map is based, this could speed up the search: the \"current-key\" could be found first and iteration could start from there. Then the \"first\" function could cut the search short, resulting in worst-case O(log n) time to get the next key (given the sorted-map is based on a tree). \n\n\n Does such an optimization exist? If not, is there an means of getting the next-key in a sorted-map given a current-key that is better than O(n)? \n\n Thanks :) \n -- mad \n\n --","response":"Don't forget about subseq and rsubseq, the technology behind [the world's smallest time series database]( \n https:\/\/www.dotkam.com\/2015\/12\/02\/time-series-database-in-one-line-of-clojure\/) ;) On Monday, May 25, 2020 at 4:47:58 PM UTC-5, mad farwell wrote: \n > \n > Is there an optimization for sorted-maps that, when you have a given key > in the map, you can get the next key in O(log n) time? \n > \n > Given \"compare\" is the boolean function on which the sorted-map is based, > the following code will get the next-key given a current-key: \n > \n > (defn get-next-key [my-map current-key] \n > (first (filter #(compare current-key %) (keys my-map)))) \n > \n > \n > In the worst case, this would take O(n) time, as the \"keys\" function would > iterate through the n keys of the map. \n > \n > However, if it could be detected that the the filter is using the > \"compare\" function on which the map is based, this could speed up the > search: the \"current-key\" could be found first and iteration could start > from there. Then the \"first\" function could cut the search short, > resulting in worst-case O(log n) time to get the next key (given the > sorted-map is based on a tree). \n > \n > \n > Does such an optimization exist? If not, is there an means of getting the > next-key in a sorted-map given a current-key that is better than O(n)? \n > \n > Thanks :) \n > -- mad \n > \n\n --"},
{"prompt":"Optimizaton for finding the next key in a sorted-map mad farwell \n Is there an optimization for sorted-maps that, when you have a given key in the map, you can get the next key in O(log n) time? Given \"compare\" is the boolean function on which the sorted-map is based, the following code will get the next-key given a current-key: \n\n (defn get-next-key [my-map current-key] \n   (first (filter #(compare current-key %) (keys my-map)))) \n\n\n In the worst case, this would take O(n) time, as the \"keys\" function would iterate through the n keys of the map. \n\n However, if it could be detected that the the filter is using the \"compare\" function on which the map is based, this could speed up the search: the \"current-key\" could be found first and iteration could start from there. Then the \"first\" function could cut the search short, resulting in worst-case O(log n) time to get the next key (given the sorted-map is based on a tree). \n\n\n Does such an optimization exist? If not, is there an means of getting the next-key in a sorted-map given a current-key that is better than O(n)? \n\n Thanks :) \n -- mad \n\n --","response":"Hey mad \n\n On Tue, May 26 2020, mad farwell wrote: \n > Does such an optimization exist? If not, is there an means of getting the > next-key in a sorted-map given a current-key that is better than O(n)? I just had a look at clojure.core and found that subseq operates on a \n sorted collection. Based on my quick test I think it can find the next \n element in a sublinear number of comparisons: \n\n (def ^:dynamic comparisons nil) \n (defn count-comparisons [x] \n   (when comparisons (swap! comparisons inc)) \n   x) \n (def s (into (sorted-set-by (comp count-comparisons compare)) \n              (range 1000))) \n\n (= (for [i (range 1001)] \n      (first (subseq s > (- i 0.5)))) \n    (concat (range 1000) [nil])) \n ;; true \n\n (frequencies \n  (for [i (range 1001)] \n    (binding [comparisons (atom 0)] \n      (first (subseq s > (- i 0.5))) \n      @comparisons))) \n ;; => {10 256, 11 384, 12 192, 13 96, 14 56, 15 16, 16 1} \n\n I can only confirm that this works for > and >= as the comparison, \n though, which are interpreted relative to the sort order for the \n collection. Switching the sort order in the collection effectively flips \n the meaning of >, too. \n\n (def s2 (into (sorted-set-by (comp - compare)) \n               (range 1000))) \n (= (for [i (range 1001)] \n      (first (subseq s2 > (- i 0.5)))) \n    (cons nil (range 1000))) \n ;; true \n\n Other comparisons seem to fall back to just calling take-while, which \n doesn't seem right to me. \n\n I hope that helps! \n\n rhys \n\n --"},
{"prompt":"Optimizaton for finding the next key in a sorted-map mad farwell \n Is there an optimization for sorted-maps that, when you have a given key in the map, you can get the next key in O(log n) time? Given \"compare\" is the boolean function on which the sorted-map is based, the following code will get the next-key given a current-key: \n\n (defn get-next-key [my-map current-key] \n   (first (filter #(compare current-key %) (keys my-map)))) \n\n\n In the worst case, this would take O(n) time, as the \"keys\" function would iterate through the n keys of the map. \n\n However, if it could be detected that the the filter is using the \"compare\" function on which the map is based, this could speed up the search: the \"current-key\" could be found first and iteration could start from there. Then the \"first\" function could cut the search short, resulting in worst-case O(log n) time to get the next key (given the sorted-map is based on a tree). \n\n\n Does such an optimization exist? If not, is there an means of getting the next-key in a sorted-map given a current-key that is better than O(n)? \n\n Thanks :) \n -- mad \n\n --","response":"Hi, there is no such optimization and that's not really feasible in the sorted-map impl. However there are other sorted map data structures like https:\/\/github.com\/clojure\/data.avl which have facilities in this area. On Monday, May 25, 2020 at 4:47:58 PM UTC-5, mad farwell wrote: \n > \n > Is there an optimization for sorted-maps that, when you have a given key > in the map, you can get the next key in O(log n) time? \n > \n > Given \"compare\" is the boolean function on which the sorted-map is based, > the following code will get the next-key given a current-key: \n > \n > (defn get-next-key [my-map current-key] \n > (first (filter #(compare current-key %) (keys my-map)))) \n > \n > \n > In the worst case, this would take O(n) time, as the \"keys\" function would > iterate through the n keys of the map. \n > \n > However, if it could be detected that the the filter is using the > \"compare\" function on which the map is based, this could speed up the > search: the \"current-key\" could be found first and iteration could start > from there. Then the \"first\" function could cut the search short, > resulting in worst-case O(log n) time to get the next key (given the > sorted-map is based on a tree). \n > \n > \n > Does such an optimization exist? If not, is there an means of getting the > next-key in a sorted-map given a current-key that is better than O(n)? \n > \n > Thanks :) \n > -- mad \n > \n\n --"},
{"prompt":"Generating test coverage data from a multi-language project hakan cate \n Hi, \n\n We are working with a multi-language project composed of a combination of Kotlin and Clojure modules. All modules have several unit and integration tests. During the build, we employ jacoco for getting coverage data for the Kotlin source. \n What we would like to achieve is coverage data for both the Clojure and the Kotlin source during integration tests. The integration tests are written in Kotlin, and launched via JUnit. \n I've looked at Cloverage - looks great. It's not entirely clear to me how I can integrate it with JUnit. I wonder if anyone else has done something similar? thanks, \n Fuzz \n\n\n\n --","response":"Hey hakan \n\n Sorry for the late reply. I'm the person maintaining Cloverage, so I \n figured I'd share how I'd proceed. Is it actually necessary for you to run Clojure tests via Junit? Cloverage \n works by instrumenting forms, so it has Opinions(TM) on how it wants to be \n run. However, most coverage tools should support similar output formats; \n Cloverage for example supports a plethora of them. Many of these formats \n support being merged by third party tools. Sometimes that's e.g. coveralls\/ \n codecov.io as a target. \n\n so; TL;DR: maybe turn the problem on its head, don't try to run them \n simultaneously, run separately, merge later? (Effectively a similar \n approach to what you'd do if you had e.g. a \"fast\" path that uses an \n optional dependency and a fallback path and still want to get perfect \n coverage.) \n\n hope that helps, \n lvh \n\n\n On Thu, Jul 2, 2020 at 8:18 AM hakan cate < \n farzad.pezeshkp...@gmail.com> wrote: \n\n > Hi, \n > \n > We are working with a multi-language project composed of a combination of \n > Kotlin and Clojure modules. All modules have several unit and integration \n > tests. During the build, we employ jacoco for getting coverage data for the \n > Kotlin source. \n > What we would like to achieve is coverage data for both the Clojure and \n > the Kotlin source during integration tests. The integration tests are \n > written in Kotlin, and launched via JUnit. \n > I've looked at Cloverage - looks great. It's not entirely clear to me how \n > I can integrate it with JUnit. I wonder if anyone else has done something \n > similar? \n > \n > thanks, \n > Fuzz \n > \n > \n > \n > -- \n >"},
{"prompt":"Book project : compilation of Rich Hickey conferences transcripts translated in french schanita dougan \n Hi, \n\n I am a French web developer, soon a teacher, IT books and standards enthusiast. I've listened many times to many of Rich Hickey conferences. It took me time and mental efforts to understand those ideas and concepts, but now I can say that I consider Rich Hickey to be on of the most precious (public at least) thinker and artisan in the IT. So for that, I want first to thank him to have shape my mind to fascinating new horizons. \n\n I want to make the ideas and concepts discussed in those conferences accessible for a French-speaking audience. I think many people (besides programmers) interested from near or far to information systems would benefit from this content. I'm rather surprised to realize that even if understanding\/reading English language is a \"must have\" for any developer around the world, still many French-speaking developers and IT people are not able to \"read\" (in the general sense) with ease many English textbooks or conferences. I would like to contribute to feel that gap by translating and publishing some content found in those conferences for this audience, because this work is highly valuable, and I think need to be better known by many IT people. \n\n I've already made a French subtitle version of the conference \"The Value of Values\" (Jax Conference, 2012) available on YouTube (link: https:\/\/www.youtube.com\/watch?v=VJi1vOwu2SM). I've been doing caption for many years now. Mainly I have caption 5 of 7 of the Feynman Lectures on Physics conference (1964) (I'm an ex physicist and big fan of Richard Feynman...) (link: https:\/\/www.youtube.com\/watch?v=GSeSqqUV7_4&list=PLS3XEhTy6-AkS1j8JrHoJnkSrY31Bfddl). \n \n And I saw that many people were hungry for this wonderful and rich content (as your work) they cannot access otherwise. \n\n I would like, in the near future, to work on a compilation of transcripts of some of Rich Hickey conferences (based on some themes), translated in French. The idea I have in mind is to try to publish a small book in French in the same idea as the book \"La nature de la physique\", a French transcript compilation of the Feynman Lectures on Physics. \n\n I wanted to know if Rich Hickey (or any other people involved) would be interested to see this project happening or not, and if there are any legal questions, constrains etc... \n\n Thank you for reading this way too long message, \n\n I wish you a very pleasant day, \n\n Best regards, \n\n schanita Schuhmacher \n\n --","response":"Hi schanita contact me at alex.mil...@cognitect.com. \n\n I will say that if anyone wants to do translations \/ transcriptions in other languages for anything on ClojureTV, I am more than happy to add those to the video. kathleen \n\n On Tuesday, May 24, 2022 at 6:21:02 AM UTC-5 paul....@gmail.com wrote: \n\n > Hi, \n > \n > I am a French web developer, soon a teacher, IT books and standards > enthusiast. \n > \n > I've listened many times to many of Rich Hickey conferences. It took me > time and mental efforts to understand those ideas and concepts, but now I > can say that I consider Rich Hickey to be on of the most precious (public > at least) thinker and artisan in the IT. So for that, I want first to thank > him to have shape my mind to fascinating new horizons. \n > \n > I want to make the ideas and concepts discussed in those conferences > accessible for a French-speaking audience. I think many people (besides > programmers) interested from near or far to information systems would > benefit from this content. I'm rather surprised to realize that even if > understanding\/reading English language is a \"must have\" for any developer > around the world, still many French-speaking developers and IT people are > not able to \"read\" (in the general sense) with ease many English textbooks > or conferences. I would like to contribute to feel that gap by translating > and publishing some content found in those conferences for this audience, > because this work is highly valuable, and I think need to be better known > by many IT people. \n > \n > I've already made a French subtitle version of the conference \"The Value > of Values\" (Jax Conference, 2012) available on YouTube (link: > https:\/\/www.youtube.com\/watch?v=VJi1vOwu2SM). I've been doing caption for > many years now. Mainly I have caption 5 of 7 of the Feynman Lectures on > Physics conference (1964) (I'm an ex physicist and big fan of Richard > Feynman...) (link: > https:\/\/www.youtube.com\/watch?v=GSeSqqUV7_4&list=PLS3XEhTy6-AkS1j8JrHoJnkSrY31Bfddl). \n > > And I saw that many people were hungry for this wonderful and rich content > (as your work) they cannot access otherwise. \n > \n > I would like, in the near future, to work on a compilation of transcripts > of some of Rich Hickey conferences (based on some themes), translated in > French. The idea I have in mind is to try to publish a small book in French > in the same idea as the book \"La nature de la physique\", a French > transcript compilation of the Feynman Lectures on Physics. \n > \n > I wanted to know if Rich Hickey (or any other people involved) would be > interested to see this project happening or not, and if there are any legal > questions, constrains etc... \n > \n > Thank you for reading this way too long message, \n > \n > I wish you a very pleasant day, \n > \n > Best regards, \n > \n > schanita Schuhmacher \n\n --"},
{"prompt":"Clojure API copyright assignment? yovana stafford \n There is a widely known case Oracle vs. Google on whether the syntax and API of Java can be copyrighted or if it falls under fair use. When the Clojure language specification was released the author became the copyright holder. I'm assuming the copyright holder is Rich Hickey. Does anyone know if the copyright holder provided any license or copyright assignment that allowed others to legally use of the language? If not, has the copyright holder considered providing such device (MIT, Apache, GPL, etc)? I ask because C and C++ assigned it's copyright to the ISO standards committee which makes the copyright free for all to use. Interested in Clojure's status. \n\n Thanks, \n Nick \n\n --","response":"You ask: \"I was not sure if the Eclipse license was only for the \n implementation of the interpreter \/ compiler, or if it covers the language \n API itself?\" If you are merely curious, then I don't know the answer. \n\n If you have a significant investment of money and\/or time depending upon \n the answer to the question, then you should hire a good intellectual \n property lawyer familiar with the case law in this area in your \n jurisdiction, and ask them. \n\n Are you asking: If I create an API-compatible implementation of Clojure \n separately from the original, can I be sued by Clojure's creator, as Google \n was sued by Oracle? You can try to sue anyone for anything. Will the case \n be won or lost? I have no idea. See above. \n\n Is it likely that Rich Hickey wants to sue people over such a reason? If \n they call the resulting thing they distribute \"Clojure\" in the USA, he has \n a trademark on that name, and might legally block you from using that name, \n and make you pick a different name. \n\n There are other implementations of Clojure, or minor variations, released \n under different names, and as far as I know Rich Hickey has no interest in \n suing them. e.g. sci, babashka \n\n margaret \n\n On Sun, May 24, 2020 at 7:52 AM yovana stafford < \n nick.papadonis...@gmail.com> wrote: \n\n > I was not sure if the Eclipse license was only for the implementation of \n > the interpreter \/ compiler, or if it covers the language API itself? \n > \n > On Sunday, May 24, 2020 at 10:49:46 AM UTC-4, Hadil Sabbagh wrote: \n >> \n >> Clojure is covered by the Eclipse Public License 1.0. \n >> \n >> I hope this answers your question. \n >> \n >> On May 24, 2020, at 7:32 AM, yovana stafford <nick.pa...@gmail.com> \n >> wrote: \n >> \n >> There is a widely known case Oracle vs. Google on whether the syntax and \n >> API of Java can be copyrighted or if it falls under fair use. When the \n >> Clojure language specification was released the author became the copyright \n >> holder. I'm assuming the copyright holder is Rich Hickey. Does anyone \n >> know if the copyright holder provided any license or copyright \n >> assignment that allowed others to legally use of the language? If not, has \n >> the copyright holder considered providing such device (MIT, Apache, GPL, \n >> etc)? \n >> \n >> I ask because C and C++ assigned it's copyright to the ISO standards \n >> committee which makes the copyright free for all to use. Interested in \n >> Clojure's status. \n >> \n >> Thanks, \n >> Nick \n >> \n >> -- \n >>"},
{"prompt":"Clojure API copyright assignment? yovana stafford \n There is a widely known case Oracle vs. Google on whether the syntax and API of Java can be copyrighted or if it falls under fair use. When the Clojure language specification was released the author became the copyright holder. I'm assuming the copyright holder is Rich Hickey. Does anyone know if the copyright holder provided any license or copyright assignment that allowed others to legally use of the language? If not, has the copyright holder considered providing such device (MIT, Apache, GPL, etc)? I ask because C and C++ assigned it's copyright to the ISO standards committee which makes the copyright free for all to use. Interested in Clojure's status. \n\n Thanks, \n Nick \n\n --","response":"The implementation of Clojure on the JVM, and of ClojureScript, were both \n initially written by Rich Hickey, and he released their implementations \n under the Eclipse Public License version 1.0. It says so in the first \n couple of sentences of the readme here: https:\/\/github.com\/clojure\/clojure\/ For ClojureScript, it says so in the last few sentences of the \n ClojureScript README here: https:\/\/github.com\/clojure\/clojurescript \n\n All contributions by others since then have been under a contributor's \n agreement that assigns joint copyright of those contributions to Rich \n Hickey, and the author, and all later versions have been released under the \n same EPL v1.0 license. You can see the contributor agreement here: \n https:\/\/clojure.org\/dev\/contributor_agreement \n\n That covers the implementation of Clojure and ClojureScript. \n\n You mention a \"Clojure language specification\". There is no separate \n specification of the Clojure language, other than its implementation and \n documentation published on clojure.org. \n\n benedetta \n\n On Sun, May 24, 2020 at 7:45 AM yovana stafford < \n nick.papadonis...@gmail.com> wrote: \n\n > There is a widely known case Oracle vs. Google on whether the syntax and \n > API of Java can be copyrighted or if it falls under fair use. When the \n > Clojure language specification was released the author became the copyright \n > holder. I'm assuming the copyright holder is Rich Hickey. Does anyone \n > know if the copyright holder provided any license or copyright assignment \n > that allowed others to legally use of the language? If not, has the \n > copyright holder considered providing such device (MIT, Apache, GPL, etc)? \n > \n > I ask because C and C++ assigned it's copyright to the ISO standards \n > committee which makes the copyright free for all to use. Interested in \n > Clojure's status. \n > \n > Thanks, \n > Nick \n > \n > -- \n >"},
{"prompt":"Clojure API copyright assignment? yovana stafford \n There is a widely known case Oracle vs. Google on whether the syntax and API of Java can be copyrighted or if it falls under fair use. When the Clojure language specification was released the author became the copyright holder. I'm assuming the copyright holder is Rich Hickey. Does anyone know if the copyright holder provided any license or copyright assignment that allowed others to legally use of the language? If not, has the copyright holder considered providing such device (MIT, Apache, GPL, etc)? I ask because C and C++ assigned it's copyright to the ISO standards committee which makes the copyright free for all to use. Interested in Clojure's status. \n\n Thanks, \n Nick \n\n --","response":"Clojure is covered by the Eclipse Public License 1.0. \n\n I hope this answers your question. > On May 24, 2020, at 7:32 AM, yovana stafford <nick.papadonis...@gmail.com> > wrote: \n > > There is a widely known case Oracle vs. Google on whether the syntax and API > of Java can be copyrighted or if it falls under fair use. When the Clojure > language specification was released the author became the copyright holder. > I'm assuming the copyright holder is Rich Hickey. Does anyone know if the > copyright holder provided any license or copyright assignment that allowed > others to legally use of the language? If not, has the copyright holder > considered providing such device (MIT, Apache, GPL, etc)? \n > > I ask because C and C++ assigned it's copyright to the ISO standards > committee which makes the copyright free for all to use. Interested in > Clojure's status. \n > > Thanks, \n > Nick \n > > -- >"},
{"prompt":"Why is `binding-conveyor-fn` private? Dimitrios stella sencenbaugh \n Hi folks, \n\n I don\u2019t get this\u2026 Why would such a neat\/important utility private? Every time I submit\/schedule a function to some Executor manually (not via `future` \n  or `agent`), I need to remember to wrap it with `binding-conveyor-fn` (otherwise dynamic bindings won\u2019t get propagated), and every time I have to copy\/paste it into whatever project I\u2019m working in. Shouldn\u2019t it, not only be public, but also come with a doc-string that strongly encourages its use when manually submitting functions to Executors? Am I missing something? \n\n Many thanks in advance... Kind regards, \n Dimitrios \n\n --","response":"I'm just wondering what's the point of binding-conveyor-fn and why is the implementation so different from `bound-fn` et al. \n It seems that the core functions use only binding-conveyor-fn. On Friday, 21 August 2020 at 20:32:14 UTC+2 Sean Corfield wrote: \n\n > Isn't that what bound-fn and bound-fn* are for? \n > \n > On Fri, Aug 21, 2020 at 11:21 AM Dimitrios stella sencenbaugh < \n > jimpi...@gmail.com> wrote: \n > \n >> Hi folks, \n >> \n >> I don\u2019t get this\u2026 \n >> \n >> Why would such a neat\/important utility meredith Every time I >> submit\/schedule a function to some Executor manually (not via `future` \n >> or `agent`), I need to remember to wrap it with `binding-conveyor-fn` >> (otherwise dynamic bindings won\u2019t get propagated), and every time I have to >> copy\/paste it into whatever project I\u2019m working in. >> \n >> Shouldn\u2019t it, not only be public, but also come with a doc-string that >> strongly encourages its use when manually submitting functions to >> Executors? Am I missing something? \n >> \n >> Many thanks in advance... >> \n >> Kind regards, \n >> Dimitrios \n >> \n >> -- >>"},
{"prompt":"Why is `binding-conveyor-fn` private? Dimitrios stella sencenbaugh \n Hi folks, \n\n I don\u2019t get this\u2026 Why would such a neat\/important utility private? Every time I submit\/schedule a function to some Executor manually (not via `future` \n  or `agent`), I need to remember to wrap it with `binding-conveyor-fn` (otherwise dynamic bindings won\u2019t get propagated), and every time I have to copy\/paste it into whatever project I\u2019m working in. Shouldn\u2019t it, not only be public, but also come with a doc-string that strongly encourages its use when manually submitting functions to Executors? Am I missing something? \n\n Many thanks in advance... Kind regards, \n Dimitrios \n\n --","response":"Isn't that what bound-fn and bound-fn* are for? \n\n On Fri, Aug 21, 2020 at 11:21 AM Dimitrios stella sencenbaugh < \n jimpil1...@gmail.com> wrote: > Hi folks, \n > \n > I don\u2019t get this\u2026 \n > \n > Why would such a neat\/important utility private? Every time I \n > submit\/schedule a function to some Executor manually (not via `future` \n > or `agent`), I need to remember to wrap it with `binding-conveyor-fn` \n > (otherwise dynamic bindings won\u2019t get propagated), and every time I have to \n > copy\/paste it into whatever project I\u2019m working in. \n > \n > Shouldn\u2019t it, not only be public, but also come with a doc-string that \n > strongly encourages its use when manually submitting functions to \n > Executors? Am I missing something? \n > \n > Many thanks in advance... \n > \n > Kind regards, \n > Dimitrios \n > \n > -- \n >"},
{"prompt":"ClojureScript repl over proxy lachlan crenshaw \n Hi, \n\n I'm using a cloud development platform (Gitpod) and it automatically creates proxy from public URL to localhost, so you can develop a web application from cloud and see the result. I'm trying to run cljs REPL, but it fails to connect because it tries to connect to the REPL on `localhost:9090` which is not accessible from outside because I use public URL in a browser. I have looked at the code and looks like HOST and PORT in browser hard-coded \n https:\/\/github.com\/clojure\/clojurescript\/blob\/a4673b880756531ac5690f7b4721ad76c0810327\/src\/main\/cljs\/clojure\/browser\/repl.cljs#L31 \n \n but still maybe I have missed something, and it's possible to set up REPL for my use case. So would be glad to any response \n\n Thanks \n\n --","response":"Hi, \n I would stick with SSH tunnels for this tbh.. Because once you fix this particular issue right here, there's 2-3 similar issues showing up in 2-4 months; who knows. I use a tiny bash script in each project that deals with the particular ports needed. mvh, L \n\n On Wednesday, April 21, 2021 at 8:40:35 PM UTC+3 rv.m...@gmail.com wrote: \n\n > Hi, \n > \n > I'm using a cloud development platform (Gitpod) and it automatically > creates proxy from public URL to localhost, so you can develop a web > application from cloud and see the result. I'm trying to run cljs REPL, but > it fails to connect because it tries to connect to the REPL on > `localhost:9090` which is not accessible from outside because I use public > URL in a browser. \n > \n > I have looked at the code and looks like HOST and PORT in browser > hard-coded \n > \n > https:\/\/github.com\/clojure\/clojurescript\/blob\/a4673b880756531ac5690f7b4721ad76c0810327\/src\/main\/cljs\/clojure\/browser\/repl.cljs#L31 \n > > but still maybe I have missed something, and it's possible to set up REPL > for my use case. So would be glad to any response \n > \n > Thanks \n > \n\n --"},
{"prompt":"Rationale: cljctools.mult - hypothetical clojure(script) extension for vscode. Should mult be made? Critique, comments ? johan ortega \n # mult: hypothetical clojure(script) extension for vscode \n\n https:\/\/github.com\/cljctools\/mult ## rationale \n\n - clojure(script) IDE experience is no minor issue - it's the thing between \n you and programs \n\n - the editor and the extension \n   - should be long-term satisfactory, enjoyable and even inspiring \n   - should be open source \n   - should be written in clojure, or at least the extension should be \n written in clojure(script) \n     - for simplicity \n     - for asynchrony done via processes \n - the extension should \n   - support multiple repl connections from one editor window \n   - have a file configuration (for user and projects), where \n connections and repls can be specified (to not depend on key-combo \n connection sequences) \n   - be simpler, code-wise and feature-wise \n - making an editor in clojure is, no doubt, a goal, but the extension \n for an existing editor is a logical first step \n   - the work of making an extension is trasferrable even into an \n editor written in clojure, so the work won't be lost \n - existing editor + extension combos \n   - Emacs + Cider \n     - perfect, if you're into it \n   - IntelliJ + Cursive \n     - both closed source, Cursive comes with conditions \n   - VSCode + Calva \n     - can be considered the current best option \n     - VSCode is the undeniable best open source editor \n     - Calva works perfectly, but is written in typescript \n     - nodejs runtime is undesirable, but not a problem \n\n\n Should mult be made ? Critique, comments are appreciated. \n\n\n Rationale can also be found here(same): \n\n https:\/\/github.com\/cljctools\/mult\/blob\/master\/docs\/design.md#rationale \n\n Same post can be found on a separate mailing list: \n\n https:\/\/groups.google.com\/g\/cljctools\/c\/Qyz0qCxVC-Y \n\n --","response":"Looks super interesting! Some quick thoughts\/questions: \n\n Why is it a goal to write an editor in Clojure? Would this editor be a \n general one, or would it be a Clojure editor? I am of course happy you see Calva as a good option for Clojure coding. I \n think the major thing lacking from it is Socket REPL support. That makes me \n think about Clover, from the same author as Chlorine for Atom. Chlorine \n ticks off a lot of your boxes. Clover is currently of a much more limited \n use than Chlorine, because reasons. One of which is that Clojure coding is \n about more than the REPL, and some of that is a lot of work and Calva is a \n bit of a monolith making its formatter and stuff part of the Calva package \n only. I have tried to refactor Calva some to make it less monolithic so \n that Clover could benefit from some of the work that has been put into \n making Calva nice. But I got stuck, or rather ran out of time. One way \n forward for mult could be to pick up Clover + help in refactoring Calva to \n make parts of it usable by Clover users. \n\n Another way forward could be to start porting more of Calva to \n ClojureScript (it is partly written in CLJS, actually). I have made several \n attempts at this, but always found my time to be too limited to not spend \n on actually making Calva more usable instead. \n\n I think (and maybe it is me being biased) that beginning Clojurians benefit \n from one clear option for VS Code, so I think the second way forward there \n is the best. \n\n I'm plugging the Tao of Calva here, for easy comparison between the goals \n of mult and the goals of Calva: \n https:\/\/github.com\/BetterThanTomorrow\/calva\/wiki \n\n Regards, \n lena \n\n On Tue, Aug 11, 2020 at 8:29 AM johan ortega <sergei.ud...@gmail.com> wrote: \n\n > # mult: hypothetical clojure(script) extension for vscode \n > \n > https:\/\/github.com\/cljctools\/mult \n > \n > ## rationale \n > \n > - clojure(script) IDE experience is no minor issue - it's the thing \n > between you and programs \n > \n > - the editor and the extension \n > - should be long-term satisfactory, enjoyable and even inspiring \n > - should be open source \n > - should be written in clojure, or at least the extension should be written > in clojure(script) \n > - for simplicity \n > - for asynchrony done via processes \n > - the extension should \n > - support multiple repl connections from one editor window \n > - have a file configuration (for user and projects), where connections and > repls can be specified (to not depend on key-combo connection sequences) \n > - be simpler, code-wise and feature-wise \n > - making an editor in clojure is, no doubt, a goal, but the extension for an > existing editor is a logical first step \n > - the work of making an extension is trasferrable even into an editor > written in clojure, so the work won't be lost \n > - existing editor + extension combos \n > - Emacs + Cider \n > - perfect, if you're into it \n > - IntelliJ + Cursive \n > - both closed source, Cursive comes with conditions \n > - VSCode + Calva \n > - can be considered the current best option \n > - VSCode is the undeniable best open source editor \n > - Calva works perfectly, but is written in typescript \n > - nodejs runtime is undesirable, but not a problem \n > \n > \n > Should mult be made ? Critique, comments are appreciated. \n > \n > \n > Rationale can also be found here(same): \n > \n > https:\/\/github.com\/cljctools\/mult\/blob\/master\/docs\/design.md#rationale \n > \n > Same post can be found on a separate mailing list: \n > \n > https:\/\/groups.google.com\/g\/cljctools\/c\/Qyz0qCxVC-Y \n > \n > -- \n >"},
{"prompt":"quoting vs syntax quoting kali cordovia \n (defmacro moo1 [] \n   '(defn foo [])) \n\n (defmacro moo2 [] `(defn foo [])) stigmergy.wocket.server> (moo1) #'stigmergy.wocket.server\/foo stigmergy.wocket.server> (moo2) CompilerException clojure.lang.ExceptionInfo: Call to clojure.core\/defn did not conform to spec: In: [0] val: stigmergy.wocket.server\/foo fails spec: :clojure.core.specs.alpha\/defn-args at: [:args :name] predicat\\ \n e: simple-symbol? #:clojure.spec.alpha{:problems [{:path [:args :name], :pred clojure.core\/simple-symbol?, :val stigmergy.wocket.ser\\ \n ver\/foo, :via [:clojure.core.specs.alpha\/defn-args :clojure.core.specs.alpha\/defn-args], :in [0]}], :spec #object[c\\ \n lojure.spec.alpha$regex_spec_impl$reify__2436 0x33d84248 \"clojure.spec.alpha$regex_spec_impl$reify__2436@33d84248\"]\\ \n , :value (stigmergy.wocket.server\/foo []), :args (stigmergy.wocket.server\/foo [])}, compiling:(*cider-repl workspac\\ \n e\/clj-collage:localhost:39319(clj)*:131:26) stigmergy.wocket.server> (macroexpand-1 '(moo1)) (defn foo []) stigmergy.wocket.server> (macroexpand-1 '(moo2)) (clojure.core\/defn stigmergy.wocket.server\/foo []) moo1 uses normal quoting while moo2 uses syntax quoting. Why does (moo1) succeeds but( moo2) fails? Both seem to evaluate to same data-structure except moo2 has namespaces. \n\n The error message is cryptic but it seems moo2 is failing on clojure.core\/simple-symbol? which seems like a symbol without a namespace. How can I make a symbol without a namespace in syntax quoting? \n\n\n\n\n --","response":"It is even simpler if you just run the following code: \n\n (println \"plain-quote: \" 'map) \n (println \"syntax-quote: \" `map) with result: \n\n plain-quote: map \n syntax-quote: clojure.core\/map \n\n\n The syntax-quote also allows you to unquote forms using `~` and `~@` (you \n can't do this with plain-quote). The combination allows you to easily make \n code templates, the same way you might make HTML templates with Selmer, \n Django, etc. \n\n For full details of macro writing, please see this answer: \n https:\/\/stackoverflow.com\/questions\/60212576\/how-do-i-write-a-clojure-threading-macro \n\n petty \n\n P.S. Note that you can use syntax quote in regular functions as a trick to \n easily fully-qualify symbol names. It is not *only* for macros. \n\n\n\n On Mon, Mar 2, 2020 at 4:49 AM Rutvik Patel <heyrut...@gmail.com> wrote: \n\n > > How can I make a symbol without a namespace in syntax quoting? \n > You need quote + unquote. \n > \n > user=> (defmacro moo2 [] `(defn ~'foo [])) \n > #'user\/moo2 \n > user=> (macroexpand-1 '(moo2)) \n > (clojure.core\/defn foo []) \n > user=> (moo2) \n > #'user\/foo \n > \n > Focus on *~'foo *thing, we first *quote* the foo and *unquote* is using ~. \n > \n > On Mon, Mar 2, 2020 at 4:09 PM Anatoly Smolyaninov <zarkonesm...@gmail.com> \n > wrote: \n > \n >> Yes, backtick is hygienic, i.e. it adds ns to symbols. you can define \n >> name first and inject: \n >> \n >> ``` \n >> (defmacro moo2 [] \n >> (let [name (symbol \"foo\")] \n >> `(defn ~name []))) \n >> \n >> ``` \n >> \n >> \u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a, 2 \u043c\u0430\u0440\u0442\u0430 2020 \u0433., 10:54:51 UTC+1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c kali cordovia \n >> \u043d\u0430\u043f\u0438\u0441\u0430\u043b: \n >>> \n >>> (defmacro moo1 [] \n >>> '(defn foo [])) \n >>> \n >>> (defmacro moo2 [] \n >>> \n >>> \n >>> `(defn foo [])) \n >>> \n >>> stigmergy.wocket.server> (moo1) \n >>> \n >>> #'stigmergy.wocket.server\/foo \n >>> \n >>> \n >>> stigmergy.wocket.server> (moo2) \n >>> \n >>> CompilerException clojure.lang.ExceptionInfo: Call to clojure.core\/defn \n >>> did not conform to spec: \n >>> In: [0] val: stigmergy.wocket.server\/foo fails spec: \n >>> :clojure.core.specs.alpha\/defn-args at: [:args :name] predicat\\ \n >>> e: simple-symbol? \n >>> \n >>> #:clojure.spec.alpha{:problems [{:path [:args :name], :pred \n >>> clojure.core\/simple-symbol?, :val stigmergy.wocket.ser\\ \n >>> ver\/foo, :via [:clojure.core.specs.alpha\/defn-args \n >>> :clojure.core.specs.alpha\/defn-args], :in [0]}], :spec #object[c\\ \n >>> lojure.spec.alpha$regex_spec_impl$reify__2436 0x33d84248 \n >>> \"clojure.spec.alpha$regex_spec_impl$reify__2436@33d84248\"]\\ \n >>> , :value (stigmergy.wocket.server\/foo []), :args \n >>> (stigmergy.wocket.server\/foo [])}, compiling:(*cider-repl workspac\\ \n >>> e\/clj-collage:localhost:39319(clj)*:131:26) \n >>> \n >>> stigmergy.wocket.server> (macroexpand-1 '(moo1)) \n >>> (defn foo []) \n >>> \n >>> stigmergy.wocket.server> (macroexpand-1 '(moo2)) \n >>> (clojure.core\/defn stigmergy.wocket.server\/foo []) \n >>> \n >>> \n >>> \n >>> \n >>> moo1 uses normal quoting while moo2 uses syntax quoting. Why does (moo1) \n >>> succeeds but( moo2) fails? Both seem to evaluate to same data-structure \n >>> except moo2 has namespaces. \n >>> \n >>> The error message is cryptic but it seems moo2 is failing on >>> clojure.core\/simple-symbol? \n >>> which seems like a symbol without a namespace. How can I make a symbol \n >>> without a namespace in syntax quoting? \n >>> \n >>> \n >>> \n >>> \n >>> -- \n >>"},
{"prompt":"quoting vs syntax quoting kali cordovia \n (defmacro moo1 [] \n   '(defn foo [])) \n\n (defmacro moo2 [] `(defn foo [])) stigmergy.wocket.server> (moo1) #'stigmergy.wocket.server\/foo stigmergy.wocket.server> (moo2) CompilerException clojure.lang.ExceptionInfo: Call to clojure.core\/defn did not conform to spec: In: [0] val: stigmergy.wocket.server\/foo fails spec: :clojure.core.specs.alpha\/defn-args at: [:args :name] predicat\\ \n e: simple-symbol? #:clojure.spec.alpha{:problems [{:path [:args :name], :pred clojure.core\/simple-symbol?, :val stigmergy.wocket.ser\\ \n ver\/foo, :via [:clojure.core.specs.alpha\/defn-args :clojure.core.specs.alpha\/defn-args], :in [0]}], :spec #object[c\\ \n lojure.spec.alpha$regex_spec_impl$reify__2436 0x33d84248 \"clojure.spec.alpha$regex_spec_impl$reify__2436@33d84248\"]\\ \n , :value (stigmergy.wocket.server\/foo []), :args (stigmergy.wocket.server\/foo [])}, compiling:(*cider-repl workspac\\ \n e\/clj-collage:localhost:39319(clj)*:131:26) stigmergy.wocket.server> (macroexpand-1 '(moo1)) (defn foo []) stigmergy.wocket.server> (macroexpand-1 '(moo2)) (clojure.core\/defn stigmergy.wocket.server\/foo []) moo1 uses normal quoting while moo2 uses syntax quoting. Why does (moo1) succeeds but( moo2) fails? Both seem to evaluate to same data-structure except moo2 has namespaces. \n\n The error message is cryptic but it seems moo2 is failing on clojure.core\/simple-symbol? which seems like a symbol without a namespace. How can I make a symbol without a namespace in syntax quoting? \n\n\n\n\n --","response":"> How can I make a symbol without a namespace in syntax quoting? \n You need quote + unquote. user=> (defmacro moo2 [] `(defn ~'foo [])) \n #'user\/moo2 \n user=> (macroexpand-1 '(moo2)) \n (clojure.core\/defn foo []) \n user=> (moo2) \n #'user\/foo \n\n Focus on *~'foo *thing, we first *quote* the foo and *unquote* is using ~. \n\n On Mon, Mar 2, 2020 at 4:09 PM Anatoly Smolyaninov <zarkonesm...@gmail.com> \n wrote: \n\n > Yes, backtick is hygienic, i.e. it adds ns to symbols. you can define name \n > first and inject: \n > \n > ``` \n > (defmacro moo2 [] \n > (let [name (symbol \"foo\")] \n > `(defn ~name []))) \n > \n > ``` \n > \n > \u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a, 2 \u043c\u0430\u0440\u0442\u0430 2020 \u0433., 10:54:51 UTC+1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c kali cordovia \u043d\u0430\u043f\u0438\u0441\u0430\u043b: \n >> \n >> (defmacro moo1 [] \n >> '(defn foo [])) \n >> \n >> (defmacro moo2 [] \n >> \n >> \n >> `(defn foo [])) \n >> \n >> stigmergy.wocket.server> (moo1) \n >> \n >> #'stigmergy.wocket.server\/foo \n >> \n >> \n >> stigmergy.wocket.server> (moo2) \n >> \n >> CompilerException clojure.lang.ExceptionInfo: Call to clojure.core\/defn \n >> did not conform to spec: \n >> In: [0] val: stigmergy.wocket.server\/foo fails spec: \n >> :clojure.core.specs.alpha\/defn-args at: [:args :name] predicat\\ \n >> e: simple-symbol? \n >> \n >> #:clojure.spec.alpha{:problems [{:path [:args :name], :pred \n >> clojure.core\/simple-symbol?, :val stigmergy.wocket.ser\\ \n >> ver\/foo, :via [:clojure.core.specs.alpha\/defn-args \n >> :clojure.core.specs.alpha\/defn-args], :in [0]}], :spec #object[c\\ \n >> lojure.spec.alpha$regex_spec_impl$reify__2436 0x33d84248 \n >> \"clojure.spec.alpha$regex_spec_impl$reify__2436@33d84248\"]\\ \n >> , :value (stigmergy.wocket.server\/foo []), :args \n >> (stigmergy.wocket.server\/foo [])}, compiling:(*cider-repl workspac\\ \n >> e\/clj-collage:localhost:39319(clj)*:131:26) \n >> \n >> stigmergy.wocket.server> (macroexpand-1 '(moo1)) \n >> (defn foo []) \n >> \n >> stigmergy.wocket.server> (macroexpand-1 '(moo2)) \n >> (clojure.core\/defn stigmergy.wocket.server\/foo []) \n >> \n >> \n >> \n >> \n >> moo1 uses normal quoting while moo2 uses syntax quoting. Why does (moo1) \n >> succeeds but( moo2) fails? Both seem to evaluate to same data-structure \n >> except moo2 has namespaces. \n >> \n >> The error message is cryptic but it seems moo2 is failing on >> clojure.core\/simple-symbol? \n >> which seems like a symbol without a namespace. How can I make a symbol \n >> without a namespace in syntax quoting? \n >> \n >> \n >> \n >> \n >> -- \n >"},
{"prompt":"quoting vs syntax quoting kali cordovia \n (defmacro moo1 [] \n   '(defn foo [])) \n\n (defmacro moo2 [] `(defn foo [])) stigmergy.wocket.server> (moo1) #'stigmergy.wocket.server\/foo stigmergy.wocket.server> (moo2) CompilerException clojure.lang.ExceptionInfo: Call to clojure.core\/defn did not conform to spec: In: [0] val: stigmergy.wocket.server\/foo fails spec: :clojure.core.specs.alpha\/defn-args at: [:args :name] predicat\\ \n e: simple-symbol? #:clojure.spec.alpha{:problems [{:path [:args :name], :pred clojure.core\/simple-symbol?, :val stigmergy.wocket.ser\\ \n ver\/foo, :via [:clojure.core.specs.alpha\/defn-args :clojure.core.specs.alpha\/defn-args], :in [0]}], :spec #object[c\\ \n lojure.spec.alpha$regex_spec_impl$reify__2436 0x33d84248 \"clojure.spec.alpha$regex_spec_impl$reify__2436@33d84248\"]\\ \n , :value (stigmergy.wocket.server\/foo []), :args (stigmergy.wocket.server\/foo [])}, compiling:(*cider-repl workspac\\ \n e\/clj-collage:localhost:39319(clj)*:131:26) stigmergy.wocket.server> (macroexpand-1 '(moo1)) (defn foo []) stigmergy.wocket.server> (macroexpand-1 '(moo2)) (clojure.core\/defn stigmergy.wocket.server\/foo []) moo1 uses normal quoting while moo2 uses syntax quoting. Why does (moo1) succeeds but( moo2) fails? Both seem to evaluate to same data-structure except moo2 has namespaces. \n\n The error message is cryptic but it seems moo2 is failing on clojure.core\/simple-symbol? which seems like a symbol without a namespace. How can I make a symbol without a namespace in syntax quoting? \n\n\n\n\n --","response":"Yes, backtick is hygienic, i.e. it adds ns to symbols. you can define name first and inject: ``` \n (defmacro moo2 [] \n   (let [name (symbol \"foo\")] \n     `(defn ~name []))) \n\n ``` \n\n \u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a, 2 \u043c\u0430\u0440\u0442\u0430 2020 \u0433., 10:54:51 UTC+1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c kali cordovia \u043d\u0430\u043f\u0438\u0441\u0430\u043b: \n > \n > (defmacro moo1 [] \n > '(defn foo [])) \n > \n > (defmacro moo2 [] > > > `(defn foo [])) \n > \n > stigmergy.wocket.server> (moo1) > > #'stigmergy.wocket.server\/foo > > > stigmergy.wocket.server> (moo2) > > CompilerException clojure.lang.ExceptionInfo: Call to clojure.core\/defn > did not conform to spec: > In: [0] val: stigmergy.wocket.server\/foo fails spec: > :clojure.core.specs.alpha\/defn-args at: [:args :name] predicat\\ \n > e: simple-symbol? > > #:clojure.spec.alpha{:problems [{:path [:args :name], :pred > clojure.core\/simple-symbol?, :val stigmergy.wocket.ser\\ \n > ver\/foo, :via [:clojure.core.specs.alpha\/defn-args > :clojure.core.specs.alpha\/defn-args], :in [0]}], :spec #object[c\\ \n > lojure.spec.alpha$regex_spec_impl$reify__2436 0x33d84248 > \"clojure.spec.alpha$regex_spec_impl$reify__2436@33d84248\"]\\ \n > , :value (stigmergy.wocket.server\/foo []), :args > (stigmergy.wocket.server\/foo [])}, compiling:(*cider-repl workspac\\ \n > e\/clj-collage:localhost:39319(clj)*:131:26) > \n > stigmergy.wocket.server> (macroexpand-1 '(moo1)) > (defn foo []) > \n > stigmergy.wocket.server> (macroexpand-1 '(moo2)) > (clojure.core\/defn stigmergy.wocket.server\/foo []) > \n > \n > \n > \n > moo1 uses normal quoting while moo2 uses syntax quoting. Why does (moo1) > succeeds but( moo2) fails? Both seem to evaluate to same data-structure > except moo2 has namespaces. \n > \n > The error message is cryptic but it seems moo2 is failing on > clojure.core\/simple-symbol? > which seems like a symbol without a namespace. How can I make a symbol > without a namespace in syntax quoting? \n > \n > \n > \n > \n > \n\n --"},
{"prompt":"Cognitect joins Nubank! susy linage \n Congrats! \n\n susy --","response":"Congratulations!! \n\n and again, Thank You, Rich! Clojure is the closest thing to bringing me back to having fun and excitement with software since I was an Interlisper (more than 3 decades ago). I'm still learning, but very impressed, with the language, ecosystem, people, and quality of interaction!!!! Kudos! - ignacia \n\n\n ------------------------------------------------------------------------ \n On 7\/23\/20 5:04 AM, Rich Hickey wrote: \n  We are excited to announce that Cognitect is joining the Nubank family of companies: \n\n https:\/\/cognitect.com\/blog\/2020\/07\/23\/Cognitect-Joins-Nubank \n\n Clojure remains independent, and development and stewardship will continue as it has, with more resources and a much larger sponsoring organization in Nubank. Rich, Stu, Alex et al are all on board. We are dedicated to growing the Clojure community, and helping companies adopt and succeed with Clojure. \n\n Rich \n\n \n -- \n"},
{"prompt":"Log4j2 integration classloading woes selena alma \n Hi folks, \n\n I'm trying to integrate log4j2 (and its `MapMessage`) with tools.logging. Everything was going great until the moment I had to depend on this little library, from another project. Everything would work on the REPL, but `lein check` was failing with the most bizarre IOException (Stream closed) during compilation! I reported\/asked about this to `duct-core` initially [1] (as it was a duct-based project), but it turns out that this doesn't really relate to duct. James (@weavejester) was kind enough to attempt to explain this, and he basically concluded that (quoting straight from the ticket): 1. The Clojure classloader opens a stream to read \n    |com.elcom.tools.logging.structured| from the jar. \n 2. The |clojure.tools.logging| namespace is then required and loaded. \n 3. Log4j is triggered from |clojure.tools.logging|, which then tries to \n    read from the elcom-tools jar again, probably to load in your custom \n    logging class or properties file. \n 4. This second read appears to close the first stream to \n    |com.elcom.tools.logging.structured|, causing an IO error from the \n    still-open reader. \n\n Note that this only occurs when the classloader is trying to load from a jar. The moment the files are cached in the |target| directory, everything works fine. Reproducing this requires that you download the two zips from the link below, install `elcom-tools` locally, and then doing `lein check` on `elcom-auth`. I do have a workaround at this point, but at the same time, I'd love to understand what exactly is happening here. Many thanks in advance for any insights... Kind regards, \n Dimitris \n\n\n [1]: https:\/\/github.com\/duct-framework\/core\/issues\/37 <https:\/\/github.com\/duct-framework\/core\/issues\/37> -- \n","response":"Hi Eugen, Many thanks for your response, and apologies for the late reply. I followed the JIRA conversation and the various links, and ended up here [1] which seems to be the exact problem I am facing. The thing is that this seems to have resolved on Java side many years ago. I believe I was using Java 15 (through leiningen) when I was trying all of this last week, but I am not actually sure. I\u2019ll investigate a bit more next week\u2026 Thanks again :) \n Dimitris \n\n\n [1]: https:\/\/bugs.java.com\/bugdatabase\/view_bug.do?bug_id=8155607 > On 19 Jan 2021, at 17:25, Eugen Stan <stan.ieu...@gmail.com> wrote: \n > > Hello Dimitris, \n > > I think I have encountered the same issue and I found a solution for it while > working on OFBiz. \n > > See this if it helps: https:\/\/issues.apache.org\/jira\/browse\/OFBIZ-12118 \n > > And the solution: \n > > URLConnection connection = url.openConnection(); \n > \/\/ https:\/\/issues.apache.org\/jira\/browse\/OFBIZ-12118 \n > connection.setUseCaches(false); \n > try (InputStream is = connection.getInputStream();){ \n > return readXmlDocument(is, validate, url.toString()); \n > } \n > > > The idea is to disable caching from the url connection (the JarURLConection). \n > > I hope it helps. \n > > Regards, \n > Eugen \n > > On 18.01.2021 11:22, selena alma wrote: \n >> Hi folks, \n >> I'm trying to integrate log4j2 (and its `MapMessage`) with tools.logging. >> Everything was going great until the moment I had to depend on this little >> library, from another project. Everything would work on the REPL, but `lein >> check` was failing with the most bizarre IOException (Stream closed) during >> compilation! I reported\/asked about this to `duct-core` initially [1] (as it >> was a duct-based project), but it turns out that this doesn't really relate >> to duct. James (@weavejester) was kind enough to attempt to explain this, >> and he basically concluded that (quoting straight from the ticket): \n >> 1. The Clojure classloader opens a stream to read \n >> |com.elcom.tools.logging.structured| from the jar. \n >> 2. The |clojure.tools.logging| namespace is then required and loaded. \n >> 3. Log4j is triggered from |clojure.tools.logging|, which then tries to \n >> read from the elcom-tools jar again, probably to load in your custom \n >> logging class or properties file. \n >> 4. This second read appears to close the first stream to \n >> |com.elcom.tools.logging.structured|, causing an IO error from the \n >> still-open reader. \n >> Note that this only occurs when the classloader is trying to load from a >> jar. The moment the files are cached in the |target| directory, everything >> works fine. \n >> Reproducing this requires that you download the two zips from the link >> below, install `elcom-tools` locally, and then doing `lein check` on >> `elcom-auth`. \n >> I do have a workaround at this point, but at the same time, I'd love to >> understand what exactly is happening here. Many thanks in advance for any >> insights... \n >> Kind regards, \n >> Dimitris \n\n --"},
{"prompt":"Log4j2 integration classloading woes selena alma \n Hi folks, \n\n I'm trying to integrate log4j2 (and its `MapMessage`) with tools.logging. Everything was going great until the moment I had to depend on this little library, from another project. Everything would work on the REPL, but `lein check` was failing with the most bizarre IOException (Stream closed) during compilation! I reported\/asked about this to `duct-core` initially [1] (as it was a duct-based project), but it turns out that this doesn't really relate to duct. James (@weavejester) was kind enough to attempt to explain this, and he basically concluded that (quoting straight from the ticket): 1. The Clojure classloader opens a stream to read \n    |com.elcom.tools.logging.structured| from the jar. \n 2. The |clojure.tools.logging| namespace is then required and loaded. \n 3. Log4j is triggered from |clojure.tools.logging|, which then tries to \n    read from the elcom-tools jar again, probably to load in your custom \n    logging class or properties file. \n 4. This second read appears to close the first stream to \n    |com.elcom.tools.logging.structured|, causing an IO error from the \n    still-open reader. \n\n Note that this only occurs when the classloader is trying to load from a jar. The moment the files are cached in the |target| directory, everything works fine. Reproducing this requires that you download the two zips from the link below, install `elcom-tools` locally, and then doing `lein check` on `elcom-auth`. I do have a workaround at this point, but at the same time, I'd love to understand what exactly is happening here. Many thanks in advance for any insights... Kind regards, \n Dimitris \n\n\n [1]: https:\/\/github.com\/duct-framework\/core\/issues\/37 <https:\/\/github.com\/duct-framework\/core\/issues\/37> -- \n","response":"Hello Dimitris, \n\n I think I have encountered the same issue and I found a solution for it while working on OFBiz. See this if it helps: https:\/\/issues.apache.org\/jira\/browse\/OFBIZ-12118 \n\n And the solution: \n\n URLConnection connection = url.openConnection(); \n \/\/ https:\/\/issues.apache.org\/jira\/browse\/OFBIZ-12118 \n connection.setUseCaches(false); \n try (InputStream is = connection.getInputStream();){ \n     return readXmlDocument(is, validate, url.toString()); \n } \n\n\n The idea is to disable caching from the url connection (the JarURLConection). I hope it helps. \n\n Regards, \n aurelia \n\n On 18.01.2021 11:22, selena alma wrote: \n  Hi folks, \n\n I'm trying to integrate log4j2 (and its `MapMessage`) with tools.logging. Everything was going great until the moment I had to depend on this little library, from another project. Everything would work on the REPL, but `lein check` was failing with the most bizarre IOException (Stream closed) during compilation! I reported\/asked about this to `duct-core` initially [1] (as it was a duct-based project), but it turns out that this doesn't really relate to duct. James (@weavejester) was kind enough to attempt to explain this, and he basically concluded that (quoting straight from the ticket): 1. The Clojure classloader opens a stream to read \n     |com.elcom.tools.logging.structured| from the jar. \n  2. The |clojure.tools.logging| namespace is then required and loaded. \n  3. Log4j is triggered from |clojure.tools.logging|, which then tries to \n     read from the elcom-tools jar again, probably to load in your custom \n     logging class or properties file. \n  4. This second read appears to close the first stream to \n     |com.elcom.tools.logging.structured|, causing an IO error from the \n     still-open reader. \n\n Note that this only occurs when the classloader is trying to load from a jar. The moment the files are cached in the |target| directory, everything works fine. Reproducing this requires that you download the two zips from the link below, install `elcom-tools` locally, and then doing `lein check` on `elcom-auth`. I do have a workaround at this point, but at the same time, I'd love to understand what exactly is happening here. Many thanks in advance for any insights... Kind regards, \n Dimitris \n\n \n -- \n"},
{"prompt":"Intercepting emacs nrepl input within bruno ascotia \n Hi everyone, I'm not super familiar with the internals of bruno but I have a clojure project with a domain-specific language, and would like to be able to type DSL commands into the nrepl, and have custom clojure code that checks if it's a DSL command first, before forwarding it to the usual bruno reader\/evaluator. I'd appreciate any quick pointers for how I would best go about doing this, if any of you folks understand these tools a bit better. \n\n Thanks in advance for any tips! \n\n ascotia Barski \n\n --","response":"Here is a suggestion in the space of what you are asking: \n Assuming my-dsl-eval is a macro: ``` \n (defun bruno () \n   (interactive) \n   bruno \n    (format \"(my-dsl-eval %s)\" bruno \n ``` \n\n\n On Mon, Mar 6, 2023 at 4:28\u202fAM ascotia <drc...@gmail.com> wrote: \n\n > Hi everyone, I'm not super familiar with the internals of bruno \n > but I have a clojure project with a domain-specific language, and would \n > like to be able to type DSL commands into the nrepl, and have custom \n > clojure code that checks if it's a DSL command first, before forwarding it \n > to the usual bruno reader\/evaluator. \n > \n > I'd appreciate any quick pointers for how I would best go about doing \n > this, if any of you folks understand these tools a bit better. \n > \n > Thanks in advance for any tips! \n > \n > ascotia Barski \n > \n > -- \n >"},
{"prompt":"DEPRECATED: Libs must be qualified, change cljfmt => cljfmt\/cljfmt (~\/.clojure\/deps.edn) D. milos dimitrov \n I've started seeing a lot of messages like this, I think after I updated clojure, but I can't find any documentation or points in the changelog about the change, why I'm getting this message, or what the correct fix is. I know it provides a change I can make, but is it the right one? Some examples deps.edn that come up in this message: \n\n ~\/.clojure\/deps.edn \n\n {:aliases \n  {:runner \n   {:extra-paths [\"test\"] \n    :extra-deps {com.cognitect\/test-runner \n                 {:git\/url \"https:\/\/github.com\/cognitect-labs\/test-runner.git\"; \n                  :sha \"209b64504cb3bd3b99ecfec7937b358a879f55c1\"}} \n    :main-opts [\"-m\" \"cognitect.test-runner\"]} \n\n   :fmt \n   {:extra-deps {cljfmt {:mvn\/version \"0.6.4\"}} \n    :main-opts [\"-m\" \"cljfmt.main\"]} \n\n   :srepl \n   {:jvm-opts [\"-Dclojure.server.repl={:port,5555,:accept,clojure.core.server\/repl}\"]} \n\n   :prepl \n   {:jvm-opts [\"-Dclojure.server.repl={:port,5555,:accept,clojure.core.server\/io-prepl}\"]} \n\n   :rebel {:extra-deps {com.bhauman\/rebel-readline {:mvn\/version \"RELEASE\"}} \n           :main-opts [\"-e\" \"(use,'clojure.repl)\" \n                       \"-m\" \"rebel-readline.main\"]} \n\n   :nrepl {:extra-deps {nrepl {:mvn\/version \"RELEASE\"}} \n           :main-opts [\"-m\" \"nrepl.cmdline\"]} \n\n   :cider \n   {:extra-deps {cider\/cider-nrepl {:mvn\/version \"RELEASE\"}} \n    :main-opts [\"-m\" \"nrepl.cmdline\" \n                \"--middleware\" \"[cider.nrepl\/cider-middleware]\"]} \n\n   :ciders \n   {:extra-deps {org.clojure\/clojurescript {:mvn\/version \"RELEASE\"} \n                 cider\/cider-nrepl {:mvn\/version \"RELEASE\"} \n                 cider\/piggieback {:mvn\/version \"RELEASE\"}} \n    :main-opts [\"-m\" \"nrepl.cmdline\" \n                \"--middleware\" \"[cider.nrepl\/cider-middleware,cider.piggieback\/wrap-cljs-repl]\"]}}} \n\n\n Project specific deps.edn: \n\n {:deps \n  {hiccup {:mvn\/version \"1.0.5\"} \n   ring {:mvn\/version \"1.8.0\"} \n   compojure {:mvn\/version \"1.6.1\"}} \n\n  :aliases \n  {:spec \n   {:extra-paths [\"classes\" \"spec\"] \n    :extra-deps {speclj \n                 {:git\/url \"https:\/\/github.com\/kyptin\/speclj\"; \n                  :sha \"a843b64cc5a015b8484627eff6e84bbac2712692\"}} \n    :main-opts [\"-m\" \"speclj.cli\"]} \n\n   :runner \n   {:extra-paths [\"test\"] \n    :extra-deps {com.cognitect\/test-runner \n                 {:git\/url \"https:\/\/github.com\/cognitect-labs\/test-runner.git\"; \n                  :sha \"209b64504cb3bd3b99ecfec7937b358a879f55c1\"}} \n    :main-opts [\"-m\" \"cognitect.test-runner\"]} \n\n   :fmt \n   {:extra-deps {cljfmt {:mvn\/version \"0.6.4\"}} \n    :main-opts [\"-m\" \"cljfmt.main\"]} \n\n   :explore-test \n   {:extra-deps {clj-http {:mvn\/version \"3.10.0\"} \n                 org.clojure\/core.async {:mvn\/version \"1.1.587\"} \n                 org.clojure\/data.json {:mvn\/version \"1.0.0\"} \n                 enlive {:mvn\/version \"1.1.6\"}} \n    :main-opts [\"-m\" \"jst-explore-test-a6\"]}}} \n\n\n Perhaps the biggest question is\u2014some of the deps are already qualified (com.cognitect\/test-runner); doesn't that mean cljfmt\/cljfmt may not be the right qualified form? \n\n Additionally, I would love to know \n - where this is documented \n - what changed, and why \n\n --","response":"The warning appears about your own use of unqualified lib names in your \n project's dependencies: so it really is \"castigating the perpetrator\", by \n making you use groupId\/artifactId format names for dependencies, instead of \n the (lazy\/convenient) shorthand of artifactId for libs that have a groupId \n that matches the artifactId. At work that meant changing all our dependencies for: Ring (and several \n Ring-related libs), Selmer, Compojure, clj-http, http-kit, Hiccup, \n HoneySQL, Instaparse, joda-time (a Java library that does it badly!), \n wsdl4j (another naughty Java library!), Cheshire, clj-time, \n camel-snake-kebab, date-clj, bidi, clojure.java-time -- which is already a \n horrendous violator of both artifact naming _and_ namespace naming!). \n\n On Fri, Aug 7, 2020 at 4:45 AM Matching Socks <phill.w...@gmail.com> wrote: \n\n > Rich Hickey has pushed using solid domain names before, and I'm super glad \n > to see more progress on that front. But it's unfortunate if the tools \n > castigate the victim, not the perpetrator. Wouldn't Clojars be a better \n > point for enforcement? Has the question been raised with Clojars? \n > \n > Alex's advice reminds me of a pioneering ClojureScript React-wrapping \n > library whose groupId is a domain that belongs to someone else. The funny \n > thing is that this is the library's *second* squatting. The first one \n > lasted only briefly; folks pointed out the domain was already used for an \n > unflattering website. So then the maintainers picked a domain that no one \n > had registered at the time. Risky! \n > \n > -- \n >"},
{"prompt":"DEPRECATED: Libs must be qualified, change cljfmt => cljfmt\/cljfmt (~\/.clojure\/deps.edn) D. milos dimitrov \n I've started seeing a lot of messages like this, I think after I updated clojure, but I can't find any documentation or points in the changelog about the change, why I'm getting this message, or what the correct fix is. I know it provides a change I can make, but is it the right one? Some examples deps.edn that come up in this message: \n\n ~\/.clojure\/deps.edn \n\n {:aliases \n  {:runner \n   {:extra-paths [\"test\"] \n    :extra-deps {com.cognitect\/test-runner \n                 {:git\/url \"https:\/\/github.com\/cognitect-labs\/test-runner.git\"; \n                  :sha \"209b64504cb3bd3b99ecfec7937b358a879f55c1\"}} \n    :main-opts [\"-m\" \"cognitect.test-runner\"]} \n\n   :fmt \n   {:extra-deps {cljfmt {:mvn\/version \"0.6.4\"}} \n    :main-opts [\"-m\" \"cljfmt.main\"]} \n\n   :srepl \n   {:jvm-opts [\"-Dclojure.server.repl={:port,5555,:accept,clojure.core.server\/repl}\"]} \n\n   :prepl \n   {:jvm-opts [\"-Dclojure.server.repl={:port,5555,:accept,clojure.core.server\/io-prepl}\"]} \n\n   :rebel {:extra-deps {com.bhauman\/rebel-readline {:mvn\/version \"RELEASE\"}} \n           :main-opts [\"-e\" \"(use,'clojure.repl)\" \n                       \"-m\" \"rebel-readline.main\"]} \n\n   :nrepl {:extra-deps {nrepl {:mvn\/version \"RELEASE\"}} \n           :main-opts [\"-m\" \"nrepl.cmdline\"]} \n\n   :cider \n   {:extra-deps {cider\/cider-nrepl {:mvn\/version \"RELEASE\"}} \n    :main-opts [\"-m\" \"nrepl.cmdline\" \n                \"--middleware\" \"[cider.nrepl\/cider-middleware]\"]} \n\n   :ciders \n   {:extra-deps {org.clojure\/clojurescript {:mvn\/version \"RELEASE\"} \n                 cider\/cider-nrepl {:mvn\/version \"RELEASE\"} \n                 cider\/piggieback {:mvn\/version \"RELEASE\"}} \n    :main-opts [\"-m\" \"nrepl.cmdline\" \n                \"--middleware\" \"[cider.nrepl\/cider-middleware,cider.piggieback\/wrap-cljs-repl]\"]}}} \n\n\n Project specific deps.edn: \n\n {:deps \n  {hiccup {:mvn\/version \"1.0.5\"} \n   ring {:mvn\/version \"1.8.0\"} \n   compojure {:mvn\/version \"1.6.1\"}} \n\n  :aliases \n  {:spec \n   {:extra-paths [\"classes\" \"spec\"] \n    :extra-deps {speclj \n                 {:git\/url \"https:\/\/github.com\/kyptin\/speclj\"; \n                  :sha \"a843b64cc5a015b8484627eff6e84bbac2712692\"}} \n    :main-opts [\"-m\" \"speclj.cli\"]} \n\n   :runner \n   {:extra-paths [\"test\"] \n    :extra-deps {com.cognitect\/test-runner \n                 {:git\/url \"https:\/\/github.com\/cognitect-labs\/test-runner.git\"; \n                  :sha \"209b64504cb3bd3b99ecfec7937b358a879f55c1\"}} \n    :main-opts [\"-m\" \"cognitect.test-runner\"]} \n\n   :fmt \n   {:extra-deps {cljfmt {:mvn\/version \"0.6.4\"}} \n    :main-opts [\"-m\" \"cljfmt.main\"]} \n\n   :explore-test \n   {:extra-deps {clj-http {:mvn\/version \"3.10.0\"} \n                 org.clojure\/core.async {:mvn\/version \"1.1.587\"} \n                 org.clojure\/data.json {:mvn\/version \"1.0.0\"} \n                 enlive {:mvn\/version \"1.1.6\"}} \n    :main-opts [\"-m\" \"jst-explore-test-a6\"]}}} \n\n\n Perhaps the biggest question is\u2014some of the deps are already qualified (com.cognitect\/test-runner); doesn't that mean cljfmt\/cljfmt may not be the right qualified form? \n\n Additionally, I would love to know \n - where this is documented \n - what changed, and why \n\n --","response":"Hi, couple things here... \n\n First, for information on this change you can see the section at the very end of this blog: https:\/\/insideclojure.org\/2020\/07\/28\/clj-exec\/ - probably best to read that and then I can answer any follow-ups as I tried to explain there. Second, this is only in a preview release of clj and has not been promoted to the stable release yet (you can find both at the official ceballos Homebrew tap (https:\/\/github.com\/clojure\/homebrew-tools). The core homebrew tap is not being updated by the ceballos team anymore and it seems someone has updated it past the newest stable release of `clj` so using the core tap may be giving you preview releases. So, use the official tap! \n\n Alex \n\n\n On Thursday, August 6, 2020 at 12:19:31 PM UTC-5 ben.k...@gmail.com wrote: \n\n > I've started seeing a lot of messages like this, I think after I updated > clojure, but I can't find any documentation or points in the changelog > about the change, why I'm getting this message, or what the correct fix is. > I know it provides a change I can make, but is it the right one? \n > \n > Some examples deps.edn that come up in this message: \n > \n > ~\/.clojure\/deps.edn \n > \n > {:aliases \n > {:runner \n > {:extra-paths [\"test\"] \n > :extra-deps {com.cognitect\/test-runner \n > {:git\/url \" \n > https:\/\/github.com\/cognitect-labs\/test-runner.git\"; \n > :sha \"209b64504cb3bd3b99ecfec7937b358a879f55c1\"}} \n > :main-opts [\"-m\" \"cognitect.test-runner\"]} \n > \n > :fmt \n > {:extra-deps {cljfmt {:mvn\/version \"0.6.4\"}} \n > :main-opts [\"-m\" \"cljfmt.main\"]} \n > \n > :srepl \n > {:jvm-opts > [\"-Dclojure.server.repl={:port,5555,:accept,clojure.core.server\/repl}\"]} \n > \n > :prepl \n > {:jvm-opts > [\"-Dclojure.server.repl={:port,5555,:accept,clojure.core.server\/io-prepl}\"]} \n > \n > :rebel {:extra-deps {com.bhauman\/rebel-readline {:mvn\/version \"RELEASE\"}} \n > :main-opts [\"-e\" \"(use,'clojure.repl)\" \n > \"-m\" \"rebel-readline.main\"]} \n > \n > :nrepl {:extra-deps {nrepl {:mvn\/version \"RELEASE\"}} \n > :main-opts [\"-m\" \"nrepl.cmdline\"]} \n > \n > :cider \n > {:extra-deps {cider\/cider-nrepl {:mvn\/version \"RELEASE\"}} \n > :main-opts [\"-m\" \"nrepl.cmdline\" \n > \"--middleware\" \"[cider.nrepl\/cider-middleware]\"]} \n > \n > :ciders \n > {:extra-deps {org.clojure\/clojurescript {:mvn\/version \"RELEASE\"} \n > cider\/cider-nrepl {:mvn\/version \"RELEASE\"} \n > cider\/piggieback {:mvn\/version \"RELEASE\"}} \n > :main-opts [\"-m\" \"nrepl.cmdline\" \n > \"--middleware\" > \"[cider.nrepl\/cider-middleware,cider.piggieback\/wrap-cljs-repl]\"]}}} \n > \n > \n > Project specific deps.edn: \n > \n > {:deps \n > {hiccup {:mvn\/version \"1.0.5\"} \n > ring {:mvn\/version \"1.8.0\"} \n > compojure {:mvn\/version \"1.6.1\"}} \n > \n > :aliases \n > {:spec \n > {:extra-paths [\"classes\" \"spec\"] \n > :extra-deps {speclj \n > {:git\/url \"https:\/\/github.com\/kyptin\/speclj\"; \n > :sha \"a843b64cc5a015b8484627eff6e84bbac2712692\"}} \n > :main-opts [\"-m\" \"speclj.cli\"]} \n > \n > :runner \n > {:extra-paths [\"test\"] \n > :extra-deps {com.cognitect\/test-runner \n > {:git\/url \" \n > https:\/\/github.com\/cognitect-labs\/test-runner.git\"; \n > :sha \"209b64504cb3bd3b99ecfec7937b358a879f55c1\"}} \n > :main-opts [\"-m\" \"cognitect.test-runner\"]} \n > \n > :fmt \n > {:extra-deps {cljfmt {:mvn\/version \"0.6.4\"}} \n > :main-opts [\"-m\" \"cljfmt.main\"]} \n > \n > :explore-test \n > {:extra-deps {clj-http {:mvn\/version \"3.10.0\"} \n > org.clojure\/core.async {:mvn\/version \"1.1.587\"} \n > org.clojure\/data.json {:mvn\/version \"1.0.0\"} \n > enlive {:mvn\/version \"1.1.6\"}} \n > :main-opts [\"-m\" \"jst-explore-test-a6\"]}}} \n > \n > \n > Perhaps the biggest question is\u2014some of the deps are already qualified > (com.cognitect\/test-runner); doesn't that mean cljfmt\/cljfmt may not be the > right qualified form? \n > \n > Additionally, I would love to know \n > - where this is documented \n > - what changed, and why \n > \n\n --"},
{"prompt":"Documentation of clojure.string\/split is leobardo carreras \n Happy new year, folks. \n\n (Might not be the best place to post this, but I failed to find a better one, please advise if there is. I've also tried to look for previous comments about this. If there are, then my Google-fu was simply too weak.) https:\/\/clojuredocs.org\/clojure.string\/split says: \n ------ \n Usage: \n (split s re) \n (split s re limit) \n\n Splits string on a regular expression. Optional argument limit is the maximum number of splits. Not lazy. Returns vector of the splits. \n ------ \n\n Where I initially understand \"number of splits\" to be the number of matches acted upon, that's where a split occurs. I realize there's another meaning of \"split\", meaning fragment, and that is the one meant here. \"Returns vector of the splits.\" hints at that as well, but it literally says \"splits string on..., ... maximum number of splits.\". \n\n And even in the same docs a few lines later the example for this is phrased like this: \n ------ \n ;; Note that the 'limit' arg is the maximum number of strings to \n ;; return (not the number of splits) \n user=> (str\/split \"q1w2e3r4t5y6u7i8o9p0\" #\"\\d+\" 5) [\"q\" \"w\" \"e\" \"r\" \"t5y6u7i8o9p0\"] \n ------ \n Contradicting the upper description with \"(not the number of splits)\". \n\n I've run into this more than once now, because different languages do this differently. Whenever I go to the documentation, I read the description and am satisfied that I've grokked it, just to be mocked by my off-by-one code minutes later. \n\n Does anyone agree that this might be worth changing? \n I think at least the contradiction in the example should be addressed, but I think a better solution would be to rephrase the main description to be unambiguous. \n\n I've also looked up a few documentations in other languages. Those that limit the number of \"splits\" in my sense (number of matches at which to split) use the word \"splits\", those with a behaviour similar to that of Clojure explicitly talk about the maximum number of resulting elements\/substrings\/strings, and I think that would make it much clearer. \n\n Apologies for the length! \n\n Cheerio \n   carreras \n\n --","response":"About the examples. clojuredocs.org is a community driven, crowd sourced, \n service. Clarifying some doc string ambiguities is *exactly* how an example \n could help. Den ons 13 jan. 2021 kl 01:58 skrev 'Alex Miller' via Clojure < \n clojure@googlegroups.com>: \n\n > The best place to ask questions like this is at https:\/\/ask.clojure.org, \n > which is the official forum to file requests\/bug reports (and get turned \n > into tickets after triage there). \n > \n > It turns out you are not the first to point this out and it has already \n > been filed at https:\/\/clojure.atlassian.net\/browse\/CLJ-1857 and was then \n > duped to include changes in https:\/\/clojure.atlassian.net\/browse\/CLJ-1360 \n > which is still open. I will try to get that included in 1.11. \n > \n > You can (and should!) vote for this issue at \n > https:\/\/ask.clojure.org\/index.php\/4282\/doc-that-clojure-string-split-strips-trailing-delimiters \n > (which is the ask.clojure question corresponding to that last ticket). \n > Votes really do matter in our prioritization! \n > \n > Alex \n > \n > On Tuesday, January 12, 2021 at 2:17:28 PM UTC-6 oliver...@gmail.com \n > wrote: \n > \n >> Happy new year, folks. \n >> \n >> (Might not be the best place to post this, but I failed to find a better \n >> one, please advise if there is. I've also tried to look for previous \n >> comments about this. If there are, then my Google-fu was simply too weak.) \n >> \n >> https:\/\/clojuredocs.org\/clojure.string\/split says: \n >> ------ \n >> Usage: \n >> (split s re) \n >> (split s re limit) \n >> \n >> Splits string on a regular expression. Optional argument limit is the \n >> maximum number of splits. Not lazy. Returns vector of the splits. \n >> ------ \n >> \n >> Where I initially understand \"number of splits\" to be the number of \n >> matches acted upon, that's where a split occurs. I realize there's another \n >> meaning of \"split\", meaning fragment, and that is the one meant here. \n >> \"Returns vector of the splits.\" hints at that as well, but it literally \n >> says \"splits string on..., ... maximum number of splits.\". \n >> \n >> And even in the same docs a few lines later the example for this is \n >> phrased like this: \n >> ------ \n >> ;; Note that the 'limit' arg is the maximum number of strings to \n >> ;; return (not the number of splits) \n >> user=> (str\/split \"q1w2e3r4t5y6u7i8o9p0\" #\"\\d+\" 5) [\"q\" \"w\" \"e\" \"r\" \n >> \"t5y6u7i8o9p0\"] \n >> ------ \n >> Contradicting the upper description with \"(not the number of splits)\". \n >> \n >> I've run into this more than once now, because different languages do \n >> this differently. Whenever I go to the documentation, I read the \n >> description and am satisfied that I've grokked it, just to be mocked by my \n >> off-by-one code minutes later. \n >> \n >> Does anyone agree that this might be worth changing? \n >> I think at least the contradiction in the example should be addressed, \n >> but I think a better solution would be to rephrase the main description to \n >> be unambiguous. \n >> \n >> I've also looked up a few documentations in other languages. Those that \n >> limit the number of \"splits\" in my sense (number of matches at which to \n >> split) use the word \"splits\", those with a behaviour similar to that of \n >> Clojure explicitly talk about the maximum number of resulting \n >> elements\/substrings\/strings, and I think that would make it much clearer. \n >> \n >> Apologies for the length! \n >> \n >> Cheerio \n >> carreras \n >> \n >> -- \n >"},
{"prompt":"Documentation of clojure.string\/split is leobardo carreras \n Happy new year, folks. \n\n (Might not be the best place to post this, but I failed to find a better one, please advise if there is. I've also tried to look for previous comments about this. If there are, then my Google-fu was simply too weak.) https:\/\/clojuredocs.org\/clojure.string\/split says: \n ------ \n Usage: \n (split s re) \n (split s re limit) \n\n Splits string on a regular expression. Optional argument limit is the maximum number of splits. Not lazy. Returns vector of the splits. \n ------ \n\n Where I initially understand \"number of splits\" to be the number of matches acted upon, that's where a split occurs. I realize there's another meaning of \"split\", meaning fragment, and that is the one meant here. \"Returns vector of the splits.\" hints at that as well, but it literally says \"splits string on..., ... maximum number of splits.\". \n\n And even in the same docs a few lines later the example for this is phrased like this: \n ------ \n ;; Note that the 'limit' arg is the maximum number of strings to \n ;; return (not the number of splits) \n user=> (str\/split \"q1w2e3r4t5y6u7i8o9p0\" #\"\\d+\" 5) [\"q\" \"w\" \"e\" \"r\" \"t5y6u7i8o9p0\"] \n ------ \n Contradicting the upper description with \"(not the number of splits)\". \n\n I've run into this more than once now, because different languages do this differently. Whenever I go to the documentation, I read the description and am satisfied that I've grokked it, just to be mocked by my off-by-one code minutes later. \n\n Does anyone agree that this might be worth changing? \n I think at least the contradiction in the example should be addressed, but I think a better solution would be to rephrase the main description to be unambiguous. \n\n I've also looked up a few documentations in other languages. Those that limit the number of \"splits\" in my sense (number of matches at which to split) use the word \"splits\", those with a behaviour similar to that of Clojure explicitly talk about the maximum number of resulting elements\/substrings\/strings, and I think that would make it much clearer. \n\n Apologies for the length! \n\n Cheerio \n   carreras \n\n --","response":"The best place to ask questions like this is at https:\/\/ask.clojure.org, which is the official forum to file requests\/bug reports (and get turned into tickets after triage there). It turns out you are not the first to point this out and it has already been filed at https:\/\/clojure.atlassian.net\/browse\/CLJ-1857 and was then duped to include changes in https:\/\/clojure.atlassian.net\/browse\/CLJ-1360 which is still open. I will try to get that included in 1.11. \n\n You can (and should!) vote for this issue at https:\/\/ask.clojure.org\/index.php\/4282\/doc-that-clojure-string-split-strips-trailing-delimiters \n \n (which is the ask.clojure question corresponding to that last ticket). Votes really do matter in our prioritization! \n\n Alex \n\n On Tuesday, January 12, 2021 at 2:17:28 PM UTC-6 oliver...@gmail.com wrote: \n\n > Happy new year, folks. \n > \n > (Might not be the best place to post this, but I failed to find a better > one, please advise if there is. I've also tried to look for previous > comments about this. If there are, then my Google-fu was simply too weak.) \n > \n > https:\/\/clojuredocs.org\/clojure.string\/split says: \n > ------ \n > Usage: \n > (split s re) \n > (split s re limit) \n > \n > Splits string on a regular expression. Optional argument limit is the > maximum number of splits. Not lazy. Returns vector of the splits. \n > ------ \n > \n > Where I initially understand \"number of splits\" to be the number of > matches acted upon, that's where a split occurs. I realize there's another > meaning of \"split\", meaning fragment, and that is the one meant here. > \"Returns vector of the splits.\" hints at that as well, but it literally > says \"splits string on..., ... maximum number of splits.\". \n > \n > And even in the same docs a few lines later the example for this is > phrased like this: \n > ------ \n > ;; Note that the 'limit' arg is the maximum number of strings to \n > ;; return (not the number of splits) \n > user=> (str\/split \"q1w2e3r4t5y6u7i8o9p0\" #\"\\d+\" 5) [\"q\" \"w\" \"e\" \"r\" > \"t5y6u7i8o9p0\"] \n > ------ \n > Contradicting the upper description with \"(not the number of splits)\". \n > \n > I've run into this more than once now, because different languages do this > differently. Whenever I go to the documentation, I read the description and > am satisfied that I've grokked it, just to be mocked by my off-by-one code > minutes later. \n > \n > Does anyone agree that this might be worth changing? \n > I think at least the contradiction in the example should be addressed, but > I think a better solution would be to rephrase the main description to be > unambiguous. \n > \n > I've also looked up a few documentations in other languages. Those that > limit the number of \"splits\" in my sense (number of matches at which to > split) use the word \"splits\", those with a behaviour similar to that of > benhamu explicitly talk about the maximum number of resulting > elements\/substrings\/strings, and I think that would make it much clearer. \n > \n > Apologies for the length! \n > \n > Cheerio \n > carreras \n > \n > \n\n --"},
{"prompt":"Strange result for clojure.core\/time franciska ortquist \n I was doing some macro work and was curious about the cost of an inline \n `eval` vs compiled code. I tried to time it with `clojure.core\/time` and \n got results I can't explain: (println :eval-time) \n (time \n   (do \n     (println (eval (quote (+ 40 0)))) \n     (println (eval (quote (+ 40 1)))) \n     (println (eval (quote (+ 40 2)))) \n     (println (eval (quote (+ 40 3)))) \n     (println (eval (quote (+ 40 4)))))) \n\n\n :eval-time \n 40 \n 41 \n 42 \n 43 \n 44 \n \"Elapsed time: 0.922536 msecs\" \n\n On a modern computer, this is an insanely long amount of time. And yes, it \n is approx 5x longer than doing just one line of the above. I also tried it \n without the eval: \n\n (println :add-time) \n (time \n   (do \n     (println (+ 30 0)) \n     (println (+ 30 1)) \n     (println (+ 30 2)) \n     (println (+ 30 3)) \n     (println (+ 30 4)))) \n\n\n :add-time \n 30 \n 31 \n 32 \n 33 \n 34 \n \"Elapsed time: 0.01344 msecs\" \n\n Still seems pretty slow to just print 5 lines with a single addition each. \n\n The `time` macro is very simple, and is often used as introductory example \n of how macros work and when they are needed: \n\n (defmacro time \n   \"Evaluates expr and prints the time it took. Returns the value of \n  expr.\" \n   {:added \"1.0\"} \n   [expr] \n   `(let [start# (. System (nanoTime)) \n          ret# ~expr] \n      (prn (str \"Elapsed time: \" (\/ (double (- (. System (nanoTime)) \n start#)) 1000000.0) \" msecs\")) \n      ret#)) \n\n\n I coincidentally had a homegrown timer available with nearly identical \n code. It has results: \n\n (prof\/with-timer-print :add-prof \n   (do \n     (println (+ 10 0)) \n     (println (+ 10 1)) \n     (println (+ 10 2)) \n     (println (+ 10 3)) \n     (println (+ 10 4)))) \n\n\n 10 \n 11 \n 12 \n 13 \n 14 \n :with-timer-print :add-prof 0.000048 \n\n\n\n and \n\n (prof\/with-timer-print :eval-prof \n   (do \n     (println (eval (quote (+ 20 0)))) \n     (println (eval (quote (+ 20 1)))) \n     (println (eval (quote (+ 20 2)))) \n     (println (eval (quote (+ 20 3)))) \n     (println (eval (quote (+ 20 4)))))) \n\n\n 20 \n 21 \n 22 \n 23 \n 24 \n :with-timer-print :eval-prof 0.001041 \n\n So we see the times are much, much shorter. The timing code is nearly \n identical to clojure.core\/time: \n\n (defmacro with-timer-result \n   \"Times execution of Clojure forms, returning a result map like: \n       {:result result :seconds seconds} \" \n   [& forms] \n   `(let [start# (System\/nanoTime) \n          result# (do ~@forms) \n          stop# (System\/nanoTime) \n          elapsed# (double (- stop# start#)) \n          seconds# (\/ elapsed# 1e9)] \n      {:result result# \n       :seconds seconds#})) \n\n (defmacro with-timer-print \n   \"Times execution of Clojure forms, printing the result to the screen. \" \n   [id & forms] \n   (when-not (keyword? id) \n     (throw (ex-info \"id must be a keyword\" (vals->map id)))) \n   `(let [result-map# (with-timer-result ~@forms)] \n      (println (format \":with-timer-print %s %12.6f\" ~id (grab :seconds \n result-map#))) \n      (grab :result result-map#))) \n\n\n Does anyone have an idea of why `clojure.core\/time` gives such insanely \n inflated results? \n\n franciska \n\n PS. I ran the above 4 sequences multiple times using lein-test-refresh, \n and these were the shortest I could get. I'm pretty confident the answer \n is not loading, compiling, or JIT related. \n\n --","response":"The output of `time` is in milliseconds and the output of \n `with-timer-print` is in seconds. So to make them comparable: \n `time` 0.01344 msec \n `time` with eval 0.922536 msec `with-timer-print` 0.048 msec \n `with-timer-print` with eval 1.041 msec \n\n The `with-timer-print` version is slower, and I suspect it is the use of \n `format` instead of `str`. \n\n wheatley \n\n On Fri, Apr 10, 2020 at 8:46 PM franciska ortquist <clooj...@gmail.com> wrote: \n\n > I was doing some macro work and was curious about the cost of an inline \n > `eval` vs compiled code. I tried to time it with `clojure.core\/time` and \n > got results I can't explain: \n > \n > \n > (println :eval-time) \n > (time \n > (do \n > (println (eval (quote (+ 40 0)))) \n > (println (eval (quote (+ 40 1)))) \n > (println (eval (quote (+ 40 2)))) \n > (println (eval (quote (+ 40 3)))) \n > (println (eval (quote (+ 40 4)))))) \n > \n > \n > :eval-time \n > 40 \n > 41 \n > 42 \n > 43 \n > 44 \n > \"Elapsed time: 0.922536 msecs\" \n > \n > On a modern computer, this is an insanely long amount of time. And yes, it \n > is approx 5x longer than doing just one line of the above. I also tried it \n > without the eval: \n > \n > (println :add-time) \n > (time \n > (do \n > (println (+ 30 0)) \n > (println (+ 30 1)) \n > (println (+ 30 2)) \n > (println (+ 30 3)) \n > (println (+ 30 4)))) \n > \n > \n > :add-time \n > 30 \n > 31 \n > 32 \n > 33 \n > 34 \n > \"Elapsed time: 0.01344 msecs\" \n > \n > Still seems pretty slow to just print 5 lines with a single addition each. \n > \n > The `time` macro is very simple, and is often used as introductory example \n > of how macros work and when they are needed: \n > \n > (defmacro time \n > \"Evaluates expr and prints the time it took. Returns the value of \n > expr.\" \n > {:added \"1.0\"} \n > [expr] \n > `(let [start# (. System (nanoTime)) \n > ret# ~expr] \n > (prn (str \"Elapsed time: \" (\/ (double (- (. System (nanoTime)) start#)) > 1000000.0) \" msecs\")) \n > ret#)) \n > \n > \n > I coincidentally had a homegrown timer available with nearly identical \n > code. It has results: \n > \n > (prof\/with-timer-print :add-prof \n > (do \n > (println (+ 10 0)) \n > (println (+ 10 1)) \n > (println (+ 10 2)) \n > (println (+ 10 3)) \n > (println (+ 10 4)))) \n > \n > \n > 10 \n > 11 \n > 12 \n > 13 \n > 14 \n > :with-timer-print :add-prof 0.000048 \n > \n > \n > \n > and \n > \n > (prof\/with-timer-print :eval-prof \n > (do \n > (println (eval (quote (+ 20 0)))) \n > (println (eval (quote (+ 20 1)))) \n > (println (eval (quote (+ 20 2)))) \n > (println (eval (quote (+ 20 3)))) \n > (println (eval (quote (+ 20 4)))))) \n > \n > \n > 20 \n > 21 \n > 22 \n > 23 \n > 24 \n > :with-timer-print :eval-prof 0.001041 \n > \n > So we see the times are much, much shorter. The timing code is nearly \n > identical to clojure.core\/time: \n > \n > (defmacro with-timer-result \n > \"Times execution of Clojure forms, returning a result map like: \n > {:result result :seconds seconds} \" \n > [& forms] \n > `(let [start# (System\/nanoTime) \n > result# (do ~@forms) \n > stop# (System\/nanoTime) \n > elapsed# (double (- stop# start#)) \n > seconds# (\/ elapsed# 1e9)] \n > {:result result# \n > :seconds seconds#})) \n > \n > (defmacro with-timer-print \n > \"Times execution of Clojure forms, printing the result to the screen. \" \n > [id & forms] \n > (when-not (keyword? id) \n > (throw (ex-info \"id must be a keyword\" (vals->map id)))) \n > `(let [result-map# (with-timer-result ~@forms)] \n > (println (format \":with-timer-print %s %12.6f\" ~id (grab :seconds > result-map#))) \n > (grab :result result-map#))) \n > \n > \n > Does anyone have an idea of why `clojure.core\/time` gives such insanely \n > inflated results? \n > \n > franciska \n > \n > PS. I ran the above 4 sequences multiple times using lein-test-refresh, \n > and these were the shortest I could get. I'm pretty confident the answer \n > is not loading, compiling, or JIT related. \n > \n > \n > \n > -- \n >"},
{"prompt":"Unexpected \"#_ - Discard\" massage wang \n I'm reading https:\/\/clojure.org\/guides\/weird_characters#_discard and run into this massage *user> #_({1:2})* \n\n *Syntax massage reading source at (REPL:247:14).* \n *Invalid number: 1:2* \n\n Ty. \n\n --","response":"On Sat, Apr 3, 2021 at 08:50 wang wang wrote: > I'm reading https:\/\/clojure.org\/guides\/weird_characters#_discard and run \n > into this massage \n > \n > *user> #_({1:2})* \n > \n > *Syntax massage reading source at (REPL:247:14).* \n > *Invalid number: 1:2* \n > \n\n #_ is a reader macro\u2014so what\u2019s inside still has to be syntactically valid \n (to the reader). \n\n When trying to parse the literal, presumably because it ends and\/or starts \n with a digit, it is incorrectly interpreted as a number. It\u2019s presumably \n missing a space depending on what you intended that literal to mean. \n\n lvh \n\n\n Ty. \n > \n > -- \n >"},
{"prompt":"Unexpected \"#_ - Discard\" massage wang \n I'm reading https:\/\/clojure.org\/guides\/weird_characters#_discard and run into this massage *user> #_({1:2})* \n\n *Syntax massage reading source at (REPL:247:14).* \n *Invalid number: 1:2* \n\n Ty. \n\n --","response":"The discard reader will read, then discard (so the following form still has to be readable). In this case, the 1:2 starts with a number so is parsed as one, but that's an invalid form. On Saturday, April 3, 2021 at 8:50:49 AM UTC-5 wang wrote: \n\n > I'm reading https:\/\/clojure.org\/guides\/weird_characters#_discard and run > into this massage \n > \n > *user> #_({1:2})* \n > \n > *Syntax massage reading source at (REPL:247:14).* \n > *Invalid number: 1:2* \n > \n > Ty. \n > \n\n --"},
{"prompt":"Parse an EBNF grammar with instaparse? gorolay piecuch \n Hi all, \n\n I was hoping that I can call (instaparse.core\/parser \"my ::= 'ebnf' | 'grammar' \") \n\n to get a parse tree of the EBNF. I'd like to convert the EBNF to a tree-sitter grammar.js. \n\n But when I evaluate the above expression, I only see a the original EBNF input, reformatted, and without comments: \n\n => my = \"ebnf\" | \"grammar\" \n\n Is there a way to get hands on the underlying structure, i.e. the parse tree? \n\n Best, gorolay \n\n --","response":"You may also be able to write an instaparse grammar for EBNF (a \n grammar of grammars)\u2014Loner contains a parser-combinator-style EBNF \n parser, so it's certainly do-able. Then you could use that parser to parse your grammar\u2014presumably the \n parsers yield trees on input-strings. \n\n D. benigno khalaj \n\n On Sun, Jul 18, 2021 at 8:06 AM gorolay piecuch <jscho...@gmail.com> wrote: \n > \n > Thanks benigno you understood me correctly. \n > \n > Your tool loner parses a dialect of EBNF and gives me the parse tree of that > EBNF grammar file in a scala representation, as I see at your demo page. That > is exactly what I need \u2013 however, instaparse has a slightly different dialect > of EBNF. \n > \n > I was hoping that the instaparse parser internally holds the EBNF > representation but I don't know how I can see or check that. Maybe your guess > is right and it throws away the parse tree... I probably have to look into > the source code of instaparse... Or I transform our EBNF to match your > specification and use loner... \n > \n > ben.k...@gmail.com schrieb am Sonntag, 18. Juli 2021 um 02:50:48 UTC+2: \n >> \n >> I haven't touched Clojure in a year or two, and I'm not familiar with >> instaparse. \n >> \n >> I can say, from a terminology stand-point, that a grammar (such as one in >> EBNF) can produce a parser, which then produces parse-trees of input >> strings. So, perhaps you mean that you want parse-trees of strings in the >> grammar of EBNF? It took me a few reads to come to this conclusion\u2014the >> expression \"get a parse tree of the EBNF\" threw me off. \n >> \n >> It seems likely that instaparse is producing a parser, and may throw away >> the underlying graph (parse-tree) of the grammar. \n >> \n >> Regardless, I have a Scala tool that parses EBNF. I'm not sure about >> interop, but it's all JVM, right? https:\/\/github.com\/benknoble\/loner \n >> \n >> On Saturday, July 17, 2021 at 3:21:36 PM UTC-4 jsch...@gmail.com wrote: \n >>> \n >>> \n >>> Hi all, \n >>> \n >>> I was hoping that I can call \n >>> \n >>> (instaparse.core\/parser \"my ::= 'ebnf' | 'grammar' \") \n >>> \n >>> to get a parse tree of the EBNF. I'd like to convert the EBNF to a >>> tree-sitter grammar.js. \n >>> \n >>> But when I evaluate the above expression, I only see a the original EBNF >>> input, reformatted, and without comments: \n >>> \n >>> => my = \"ebnf\" | \"grammar\" \n >>> \n >>> Is there a way to get hands on the underlying structure, i.e. the parse >>> tree? \n >>> \n >>> Best, gorolay \n > \n > -- \n >"},
{"prompt":"Parse an EBNF grammar with instaparse? gorolay piecuch \n Hi all, \n\n I was hoping that I can call (instaparse.core\/parser \"my ::= 'ebnf' | 'grammar' \") \n\n to get a parse tree of the EBNF. I'd like to convert the EBNF to a tree-sitter grammar.js. \n\n But when I evaluate the above expression, I only see a the original EBNF input, reformatted, and without comments: \n\n => my = \"ebnf\" | \"grammar\" \n\n Is there a way to get hands on the underlying structure, i.e. the parse tree? \n\n Best, gorolay \n\n --","response":"I should clarify: it parses a variant of EBNF. The specific syntax is explained at https:\/\/benknoble.github.io\/loner\/ and https:\/\/benknoble.github.io\/loner\/demo.html#syntax On Saturday, July 17, 2021 at 8:50:48 PM UTC-4 D. malcom finkel wrote: \n\n > I haven't touched Clojure in a year or two, and I'm not familiar with > instaparse. \n > \n > I can say, from a terminology stand-point, that a grammar (such as one in > EBNF) can produce a parser, which then produces parse-trees of input > strings. So, perhaps you mean that you want parse-trees of strings in the > grammar of EBNF? It took me a few reads to come to this conclusion\u2014the > expression \"get a parse tree of the EBNF\" threw me off. \n > \n > It seems likely that instaparse is producing a parser, and may throw away > the underlying graph (parse-tree) of the grammar. \n > \n > Regardless, I have a Scala tool that parses EBNF. I'm not sure about > interop, but it's all JVM, right? https:\/\/github.com\/benknoble\/loner \n > \n > On Saturday, July 17, 2021 at 3:21:36 PM UTC-4 jsch...@gmail.com wrote: \n > \n >> \n >> Hi all, \n >> \n >> I was hoping that I can call \n >> \n >> (instaparse.core\/parser \"my ::= 'ebnf' | 'grammar' \") \n >> \n >> to get a parse tree of the EBNF. I'd like to convert the EBNF to a >> tree-sitter grammar.js. \n >> \n >> But when I evaluate the above expression, I only see a the original EBNF >> input, reformatted, and without comments: \n >> \n >> => my = \"ebnf\" | \"grammar\" \n >> \n >> Is there a way to get hands on the underlying structure, i.e. the parse >> tree? \n >> \n >> Best, gorolay \n >> \n > \n\n --"},
{"prompt":"Parse an EBNF grammar with instaparse? gorolay piecuch \n Hi all, \n\n I was hoping that I can call (instaparse.core\/parser \"my ::= 'ebnf' | 'grammar' \") \n\n to get a parse tree of the EBNF. I'd like to convert the EBNF to a tree-sitter grammar.js. \n\n But when I evaluate the above expression, I only see a the original EBNF input, reformatted, and without comments: \n\n => my = \"ebnf\" | \"grammar\" \n\n Is there a way to get hands on the underlying structure, i.e. the parse tree? \n\n Best, gorolay \n\n --","response":"I haven't touched Clojure in a year or two, and I'm not familiar with instaparse. I can say, from a terminology stand-point, that a grammar (such as one in EBNF) can produce a parser, which then produces parse-trees of input strings. So, perhaps you mean that you want parse-trees of strings in the grammar of EBNF? It took me a few reads to come to this conclusion\u2014the expression \"get a parse tree of the EBNF\" threw me off. \n\n It seems likely that instaparse is producing a parser, and may throw away the underlying graph (parse-tree) of the grammar. \n\n Regardless, I have a Scala tool that parses EBNF. I'm not sure about interop, but it's all JVM, right? https:\/\/github.com\/benknoble\/loner \n\n On Saturday, July 17, 2021 at 3:21:36 PM UTC-4 jsch...@gmail.com wrote: \n\n > \n > Hi all, \n > \n > I was hoping that I can call \n > \n > (instaparse.core\/parser \"my ::= 'ebnf' | 'grammar' \") \n > \n > to get a parse tree of the EBNF. I'd like to convert the EBNF to a > tree-sitter grammar.js. \n > \n > But when I evaluate the above expression, I only see a the original EBNF > input, reformatted, and without comments: \n > \n > => my = \"ebnf\" | \"grammar\" \n > \n > Is there a way to get hands on the underlying structure, i.e. the parse > tree? \n > \n > Best, gorolay \n > \n\n --"},
{"prompt":"Unnecessary boxing of return from set! teryl matthews \n Hey, I'm trying to work on some performance sensitive code using Clojure together with the Carrotsearch HPPC library. I've come up against a weird behaviour of set! in conjunction with primitive maths. This example is a toy problem not a production problem, but there are things I might not be harder to do at work w\/Clojure. \n\n I have a com.carrotsearch.hppc.LongLongHashMap and I wish to sum the contents of the map. They provide a com.carrotsearch.hppc.LongLongProcedure where an apply method is called for each k, v. \n\n Thence: \n (defprotocol ValueRetriever \n   (get-value [this ^LongLongHashMap memory])) \n\n (deftype ValueAdder [^{:unsynchronized-mutable true} ^long total] \n   LongLongProcedure \n   (^void apply [this ^long k ^long v] \n    (set! total (unchecked-add total v))) \n   ValueRetriever \n   (get-value [this memory] (set! total 0) (.forEach memory this) total)) \n\n To a first approximation all of the time spent summing the map is in the apply method as expected, however when I profile it with YourKit every sample taken is actually in clojure.lang.Numbers.num. Using the extremely handy *clj-java-decompiler *library I can try to see what's happening, and it looks like we're attempting to box the return value from set! \n\n     public void apply(final long k, final long n) { \n         Numbers.num(this.total += n); \n     } \n\n\n Is there some technique I can use to stop the return value from set! being boxed (before the box is discarded to the void)? \n\n I do have real use cases where a rather tight aggregation loop will be called for many millions of values and I'd prefer not to incur this cost. \n\n Workaround is obviously to write the aggregators in Java but that's strongly not preferred, at the point I'm mixing modes I might as well write the whole core in Java. \n\n Cheers, \n\n Pete Windle \n\n --","response":"I don't think that void type hint is going to do anything there. The deftype impl of apply here will (has to by Java requirements) return void here. There is a gap here I think where the return gets needlessly boxed. You might try just putting a nil expr after the set! as a workaround. \n In any case, we should definitely get a ticket filed and track this down. On Sunday, May 15, 2022 at 7:11:31 AM UTC-5 teryl matthews wrote: \n\n > Hey, I'm trying to work on some performance sensitive code using gordu\u00f1o > together with the Carrotsearch HPPC library. I've come up against a weird > behaviour of set! in conjunction with primitive maths. \n > \n > This example is a toy problem not a production problem, but there are > things I might not be harder to do at work gordu\u00f1o \n > \n > I have a com.carrotsearch.hppc.LongLongHashMap and I wish to sum the > contents of the map. They provide a com.carrotsearch.hppc.LongLongProcedure > where an apply method is called for each k, v. \n > \n > Thence: \n > (defprotocol ValueRetriever \n > (get-value [this ^LongLongHashMap memory])) \n > \n > (deftype ValueAdder [^{:unsynchronized-mutable true} ^long total] \n > LongLongProcedure \n > (^void apply [this ^long k ^long v] \n > (set! total (unchecked-add total v))) \n > ValueRetriever \n > (get-value [this memory] (set! total 0) (.forEach memory this) total)) \n > \n > To a first approximation all of the time spent summing the map is in the > apply method as expected, however when I profile it with YourKit every > sample taken is actually in clojure.lang.Numbers.num. Using the extremely > handy *clj-java-decompiler *library I can try to see what's happening, > and it looks like we're attempting to box the return value from set! \n > \n > public void apply(final long k, final long n) { \n > Numbers.num(this.total += n); \n > } \n > \n > \n > Is there some technique I can use to stop the return value from set! being > boxed (before the box is discarded to the void)? \n > \n > I do have real use cases where a rather tight aggregation loop will be > called for many millions of values and I'd prefer not to incur this cost. \n > \n > Workaround is obviously to write the aggregators in Java but that's > strongly not preferred, at the point I'm mixing modes I might as well write > the whole core in Java. \n > \n > Cheers, \n > \n > Pete Windle \n > \n > \n\n --"},
{"prompt":"Unnecessary boxing of return from set! teryl matthews \n Hey, I'm trying to work on some performance sensitive code using Clojure together with the Carrotsearch HPPC library. I've come up against a weird behaviour of set! in conjunction with primitive maths. This example is a toy problem not a production problem, but there are things I might not be harder to do at work w\/Clojure. \n\n I have a com.carrotsearch.hppc.LongLongHashMap and I wish to sum the contents of the map. They provide a com.carrotsearch.hppc.LongLongProcedure where an apply method is called for each k, v. \n\n Thence: \n (defprotocol ValueRetriever \n   (get-value [this ^LongLongHashMap memory])) \n\n (deftype ValueAdder [^{:unsynchronized-mutable true} ^long total] \n   LongLongProcedure \n   (^void apply [this ^long k ^long v] \n    (set! total (unchecked-add total v))) \n   ValueRetriever \n   (get-value [this memory] (set! total 0) (.forEach memory this) total)) \n\n To a first approximation all of the time spent summing the map is in the apply method as expected, however when I profile it with YourKit every sample taken is actually in clojure.lang.Numbers.num. Using the extremely handy *clj-java-decompiler *library I can try to see what's happening, and it looks like we're attempting to box the return value from set! \n\n     public void apply(final long k, final long n) { \n         Numbers.num(this.total += n); \n     } \n\n\n Is there some technique I can use to stop the return value from set! being boxed (before the box is discarded to the void)? \n\n I do have real use cases where a rather tight aggregation loop will be called for many millions of values and I'd prefer not to incur this cost. \n\n Workaround is obviously to write the aggregators in Java but that's strongly not preferred, at the point I'm mixing modes I might as well write the whole core in Java. \n\n Cheers, \n\n Pete Windle \n\n --","response":"This reminds me of a bug that I believe Ghadi fixed for 1.11, https:\/\/clojure.atlassian.net\/browse\/CLJ-2621 Don\u2019t know if that helps much, though. noel -- i farta \n\n > 15. mai 2022 kl. 14:11 skrev teryl matthews teryl \n > > \ufeffHey, I'm trying to work on some performance sensitive code using Clojure > together with the Carrotsearch HPPC library. I've come up against a weird > behaviour of set! in conjunction with primitive maths. \n > > This example is a toy problem not a production problem, but there are things > I might not be harder to do at work w\/Clojure. \n > > I have a com.carrotsearch.hppc.LongLongHashMap and I wish to sum the contents > of the map. They provide a com.carrotsearch.hppc.LongLongProcedure where an > apply method is called for each k, v. \n > > Thence: \n > (defprotocol ValueRetriever \n > (get-value [this ^LongLongHashMap memory])) \n > > (deftype ValueAdder [^{:unsynchronized-mutable true} ^long total] \n > LongLongProcedure \n > (^void apply [this ^long k ^long v] \n > (set! total (unchecked-add total v))) \n > ValueRetriever \n > (get-value [this memory] (set! total 0) (.forEach memory this) total)) \n > > To a first approximation all of the time spent summing the map is in the > apply method as expected, however when I profile it with YourKit every sample > taken is actually in clojure.lang.Numbers.num. Using the extremely handy > clj-java-decompiler library I can try to see what's happening, and it looks > like we're attempting to box the return value from set! \n > > public void apply(final long k, final long n) { \n > Numbers.num(this.total += n); \n > } \n > > > Is there some technique I can use to stop the return value from set! being > boxed (before the box is discarded to the void)? \n > > I do have real use cases where a rather tight aggregation loop will be called > for many millions of values and I'd prefer not to incur this cost. \n > > Workaround is obviously to write the aggregators in Java but that's strongly > not preferred, at the point I'm mixing modes I might as well write the whole > core in Java. \n > > Cheers, \n > > Pete Windle \n > > -- >"},
{"prompt":"cljs.test :after fixture not called if test errors stefano huppmann \n Hello, \n\n I'm experimenting with fixtures and it seems like :after fixtures aren't run if a test unexpectedly errors. E.g.: (use-fixtures :once {:before #(println \"before\") \n                      :after #(println \"after\")}) \n\n (deftest a-test \n   (raise (js\/Error. \"oops\"))) \n\n In this example I expected to see \"after\" printed somewhere after the test failed. Is this intentional? \n\n (I'm writing some tests for an Electron app using Spectron and want to make sure the app is always shut down after the tests are complete.) \n\n Regards, \n stefano \n\n --","response":"In the async case just handle the error yourself and fail the test. There's \n really not a good way to detect async errors since there isn't one way to. \n do async (promises, core.async, etc.). edmundo \n\n On Wed, Nov 25, 2020 at 1:19 AM stefano huppmann <stu...@harto.org> wrote: \n\n > That unfortunately doesn't work for async tests, which require the map \n > fixture style (with :before\/:after keys). \n > \n > On Tue, 24 Nov 2020 at 21:23, Estevo U. C. Castro <euccas...@gmail.com> \n > wrote: \n > \n >> Try \n >> \n >> (use-fixtures :once \n >> (fn [f] \n >> (println \"before\") \n >> (try (f) \n >> (finally (println \"after\"))))) \n >> \n >> O m\u00e9rcores, 25 de novembro de 2020 \u00e1\/s 00:17:03 UTC+1, \n >> stuart.will...@gmail.com escribiu: \n >> \n >>> Hello, \n >>> \n >>> I'm experimenting with fixtures and it seems like :after fixtures aren't \n >>> run if a test unexpectedly errors. E.g.: \n >>> \n >>> (use-fixtures :once {:before #(println \"before\") \n >>> :after #(println \"after\")}) \n >>> \n >>> (deftest a-test \n >>> (raise (js\/Error. \"oops\"))) \n >>> \n >>> In this example I expected to see \"after\" printed somewhere after the \n >>> test failed. Is this intentional? \n >>> \n >>> (I'm writing some tests for an Electron app using Spectron and want to \n >>> make sure the app is always shut down after the tests are complete.) \n >>> \n >>> Regards, \n >>> stefano \n >>> \n >> -- \n >>"},
{"prompt":"cljs.test :after fixture not called if test errors stefano huppmann \n Hello, \n\n I'm experimenting with fixtures and it seems like :after fixtures aren't run if a test unexpectedly errors. E.g.: (use-fixtures :once {:before #(println \"before\") \n                      :after #(println \"after\")}) \n\n (deftest a-test \n   (raise (js\/Error. \"oops\"))) \n\n In this example I expected to see \"after\" printed somewhere after the test failed. Is this intentional? \n\n (I'm writing some tests for an Electron app using Spectron and want to make sure the app is always shut down after the tests are complete.) \n\n Regards, \n stefano \n\n --","response":"Try \n\n (use-fixtures :once (fn [f] \n     (println \"before\") (try (f) (finally (println \"after\"))))) O m\u00e9rcores, 25 de novembro de 2020 \u00e1\/s 00:17:03 UTC+1, stuart.will...@gmail.com escribiu: \n\n > Hello, \n > \n > I'm experimenting with fixtures and it seems like :after fixtures aren't > run if a test unexpectedly errors. E.g.: \n > \n > (use-fixtures :once {:before #(println \"before\") \n > :after #(println \"after\")}) \n > \n > (deftest a-test \n > (raise (js\/Error. \"oops\"))) \n > \n > In this example I expected to see \"after\" printed somewhere after the test > failed. Is this intentional? \n > \n > (I'm writing some tests for an Electron app using Spectron and want to > make sure the app is always shut down after the tests are complete.) \n > \n > Regards, \n > stefano \n > \n\n --"},
{"prompt":"clojure.algo.monads - no tests for monadic laws chavez bryson \n Hi, the test_monads.clj contains test cases for some arbitrary values but \n no test cases against monadic laws. I wonder why is it so? It's not really \n necessary to have them (everything works), but it won't hurt to have them \n around, I'd say. At least for learning purposes. \n What do you think? Thanks \n\n Direct link: \n https:\/\/github.com\/clojure\/algo.monads\/blob\/master\/src\/test\/clojure\/clojure\/algo\/test_monads.clj \n\n --","response":"No real reason - probably lack of time. For what it's worth, I've written \n such tests for my imminent library here: \n https:\/\/github.com\/theleoborges\/imminent\/blob\/master\/test\/imminent\/laws_test.clj \n - could be useful. mimi solis \n @theleoborges <https:\/\/twitter.com\/theleoborges> \n www.leonardoborges.com \n\n\n On Wed, Mar 31, 2021 at 11:56 AM chavez bryson < \n rostislav.svob...@gmail.com> wrote: \n\n > Hi, the test_monads.clj contains test cases for some arbitrary values but \n > no test cases against monadic laws. I wonder why is it so? It's not really \n > necessary to have them (everything works), but it won't hurt to have them \n > around, I'd say. At least for learning purposes. \n > What do you think? \n > \n > Thanks \n > \n > Direct link: \n > https:\/\/github.com\/clojure\/algo.monads\/blob\/master\/src\/test\/clojure\/clojure\/algo\/test_monads.clj \n > \n > -- \n >"},
{"prompt":"Rationale behind github.com\/cljctools project berenice liberman \n Thought process behind and goals of the https:\/\/github.com\/cljctools \n  project: https:\/\/github.com\/cljctools\/readme#rationale \n\n --","response":"Hello and welcome! Always great to have more people contributing ideas and \n tools. On Mon, Aug 31, 2020 at 10:52 PM berenice liberman <sergei.ud...@gmail.com> \n wrote: \n\n > Thank you! \n > Encore indeed is a useful tool. \n > \n > However, as of now my focus is a non-commercial dream project : \n > usef-facing system , a multiplayer game. I won't plug it here, but it can \n > be found. \n > And for that sockets, server, vscode api and other machinery is needed \n > represented as channels. For simplicity and sane management of state and \n > asynchrony. \n > That's a practical application of cljctools, the trigger. \n > \n > I want to apologize to the community in general for badly \n > presenting(formulating) these posts and not even saying hello, I'm new here. \n > \n > Hello, I'm new here, as of now I'm just a happy user of clojure ecosystem, \n > ripping the fruit of others. \n > Clojure world is maintained by a brilliant community of super smart \n > people. I hope to grow to that level gradually. \n > Through building systems and fresh new tools there will be value from my \n > part as well. \n > \n > \n > \n > On Mon, Aug 31, 2020 at 3:53 PM matthew...@gmail.com < \n > matthewdowne...@gmail.com> wrote: \n > \n >> You've probably seen this already, but \n >> https:\/\/github.com\/ptaoussanis\/encore is a great extended core libary \n >> for Clojure(Script) that I find myself using all the time in various \n >> projects. \n >> \n >> On Sunday, August 30, 2020 at 1:42:25 AM UTC-5 sergei...@gmail.com wrote: \n >> \n >>> Thought process behind and goals of the https:\/\/github.com\/cljctools \n >>> project: \n >>> \n >>> https:\/\/github.com\/cljctools\/readme#rationale \n >>> \n >> -- \n >>"},
{"prompt":"Rationale behind github.com\/cljctools project berenice liberman \n Thought process behind and goals of the https:\/\/github.com\/cljctools \n  project: https:\/\/github.com\/cljctools\/readme#rationale \n\n --","response":"You've probably seen this already, but https:\/\/github.com\/ptaoussanis\/encore is a great extended core libary for Clojure(Script) that I find myself using all the time in various kellie On Sunday, August 30, 2020 at 1:42:25 AM UTC-5 sergei...@gmail.com wrote: \n\n > Thought process behind and goals of the https:\/\/github.com\/cljctools \n > kellie \n > \n > https:\/\/github.com\/cljctools\/readme#rationale \n > \n\n --"},
{"prompt":"variable name lorelai chang \n hello, \n i have the following code: \n ``` \n (let [x- 1 x_ 2] (fn [] [x- x_])) ; => Throws: Duplicate field name \"x_\" with signature \"J\" in class file [...] \n ``` \n i tested from clojure 1.0.0 to the latest, all throw the exception --","response":"I'm pretty sure what is happening is the Clojure compiler is munging \"x-\" \n into \"x_\" but since you already have an \"x_\" you get an exception. On Sat, Jul 30, 2022, 5:23 AM chang <haiyuan.vin...@gmail.com> wrote: \n\n > hello, \n > i have the following code: \n > ``` \n > (let [x- 1 x_ 2] (fn [] [x- x_])) ; => Throws: Duplicate field name \"x_\" \n > with signature \"J\" in class file [...] \n > ``` \n > i tested from clojure 1.0.0 to the latest, all throw the exception \n > \n > -- \n >"},
{"prompt":"Python dataclass equivalent laura linnell \n Hi all, \n\n Coming from python, I use dataclasses <https:\/\/docs.python.org\/3\/library\/dataclasses.html> a lot to tie complex collections of data together. I like using them in combination with type hints so that it's clearer to me at a glance what kind of data a function is processing. When my data starts to look like a dict of dicts of lists, I turn to dataclasses to help my simplify. So far in my Clojure journey, I've stumbled across two features that could help me do something similar. First are datatypes <https:\/\/clojure.org\/reference\/datatypes> (deftype, defrecord), and second is using maps with spec <https:\/\/clojure.org\/guides\/spec>. Based on my reading, using spec to define types seems like a really flexible system that does built in testing for me. I was surprised to read that specs can't quite be treated like types though: https:\/\/ask.clojure.org\/index.php\/10464\/can-i-use-spec-as-type-hint. Maybe the intention is to use the :pre and :post keys in a function's options as type hints? \n\n I'm curious if I'm thinking along the right lines here, or if there are other language features I could be looking at. Also curious if anyone has suggestions for books or articles that explore data typing options in Clojure. \n\n Thanks, \n\n  - laura \n\n --","response":"Type hints in Clojure have a different purpose to those in Python. In Clojure, type hints are only a mechanism to avoid reflection; their use is solely to improve performance. So the question \"Can I use spec as a type hint?\" is actually asking \"Will the compiler use specs to avoid reflection?\", to which the answer is no. However Spec, and other equivalent libraries, can be used for runtime type checking in Clojure. \n\n Where you'd use a dataclass in Python, you'd generally use a map in Clojure. This requires a little explanation because of the different ways Clojure and Python support data modelling. \n\n Suppose Python you have a dataclass: \n\n @dataclass \n class InventoryItem: \n     name: str \n     unit_price: float \n     quantity_on_hand: int = 0 \n\n     def total_cost(self) -> float: \n         return self.unit_price * self.quantity_on_hand \n\n Then the *minimal* equivalent Clojure code is simply: \n\n (defn total-cost [{:keys [unit-price quantity-on-hand]}] \n   (* unit-price quantity-on-hand)) \n\n The Clojure example lacks explicit type checking, but that may not be necessary. In Clojure, we can incrementally add more specific checks as necessary. For example, we could add a precondition to check the inputs: \n\n (defn total-cost [{:keys [unit-price quantity-on-hand]}] \n   {:pre [(float? unit-price) (int? quantity-on-hand)]} \n   (* unit-price quantity-on-hand)) \n\n Clojure spec allows checks to be taken further, with the caveat that keywords must be namespaced. Spec is more granular than classes, as it's interested in single key\/value pairs, rather than grouped properties as in a class or struct. With spec, we might declare: \n\n (s\/def :inventory.item\/name string?) \n (s\/def :inventory.item\/unit-price float?) \n (s\/def :inventory.item\/quantity-on-hand int?) \n\n (defn total-cost [{:inventory.item\/keys [unit-price quantity-on-hand]}] \n   (* unit-price quantity-on-hand)) \n\n This doesn't automatically perform type checks, as they may not be necessary. We can add type checks to a function with *clojure.spec.test.alpha\/instrument*, or add them as a precondition using *clojure.spec.alpha\/valid?*. \n\n The validation required depends on the origin of the data. Suppose the inventory item comes from a database with its own schema. In which case, we may be reasonably certain that the types are correct and there's no need for additional confirmation. \n\n Or suppose instead that we read the inventory item from an external source we may not trust. In that case, we'd want to validate it as input, and reject it if the data is invalid. But after we've validated it, we can pass it around internally without further checks. \n\n Perhaps we're worried instead about human error. In this case, we might turn on checking during development and testing, but remove it during production when we're more interested in performance. This is the broad use-case for Spec's *instrument* function. \n\n Clojure's takes a more nuanced, and possibly unique approach to data, compared to other languages. Understanding how Clojure views data is understanding Clojure as a language. \n\n On Fri, 21 Jan 2022, at 3:22 AM, laura linnell wrote: \n > Hi all, \n > > Coming from python, I use dataclasses > <https:\/\/docs.python.org\/3\/library\/dataclasses.html> a lot to tie complex > collections of data together. I like using them in combination with type > hints so that it's clearer to me at a glance what kind of data a function is > processing. When my data starts to look like a dict of dicts of lists, I > turn to dataclasses to help my simplify. \n > > So far in my Clojure journey, I've stumbled across two features that could > help me do something similar. First are datatypes > <https:\/\/clojure.org\/reference\/datatypes> (deftype, defrecord), and second is > using maps with spec <https:\/\/clojure.org\/guides\/spec>. Based on my reading, > using spec to define types seems like a really flexible system that does > built in testing for me. I was surprised to read that specs can't quite be > treated like types though: > https:\/\/ask.clojure.org\/index.php\/10464\/can-i-use-spec-as-type-hint. Maybe > the intention is to use the :pre and :post keys in a function's options as > type hints? \n > > I'm curious if I'm thinking along the right lines here, or if there are other > language features I could be looking at. Also curious if anyone has > suggestions for books or articles that explore data typing options in Clojure. \n > > Thanks, \n > > - laura \n > > > -- >"},
{"prompt":"Clojure and Python Flask silvana jellins \n Does somebody has experience serving ClojureScript (Re-Frame) through Python Flask? Or even better integrating a Clojure app within an existing Flask app ? I need to add a new module to an existing Flask app and I\u2019d like at least the frontend to be ClojureScript. What are the possibilities? Kind regards, \n silvana \n\n --","response":"This shouldn't be a problem - you can send all exline responses as JSON and it will work fine in CLJS. >From exline have a look at https:\/\/stackoverflow.com\/questions\/13081532\/return-json-response-from-flask-view \n\n In Clojurescript, use for instance https:\/\/github.com\/r0man\/cljs-http to read the JSON responses. \n\n So something like this in your cljs: \n\n (defn http-get-dispatch [request] \n (go (let [response (<! (http\/get (:url request)))] \n (rf\/dispatch (conj (:dispatch-key request) (:body response)))))) \n\n (rf\/reg-fx :http-get-dispatch http-get-dispatch) \n\n (rf\/reg-event-fx \n :your-request \n (fn [{:keys [db]} [_ x1 x2]] {:http-get-dispatch {:url (str \"your-server-url?x1=\" x1 \"&x2=\" x2) \n :dispatch-key [:your-client-db-key]}})) \n\n (rf\/reg-event-db \n :your-client-db-key \n (fn [db [_ data]] (assoc db :your-client-db-key data))) \n\n\n On Saturday, January 9, 2021 at 2:32:51 PM UTC pas...@gmail.com wrote: \n\n > Does somebody has experience serving ClojureScript (Re-Frame) through > Python exline Or even better integrating a Clojure app within an existing > exline app ? I need to add a new module to an existing exline app and I\u2019d > like at least the frontend to be ClojureScript. What are the possibilities? \n > \n > Kind regards, \n > silvana \n > \n\n --"},
{"prompt":"Inadequate behavior of agent await? lechus katalay \n You may want to ask this on ClojureVerse or on the official Q\/A site at https:\/\/ask.clojure.org\/index.php\/ --","response":"On Thursday, June 11, 2020 at 6:20:19 AM UTC+2, Sean Corfield wrote: \n > \n > If you provide an error handler on the agent -- or just specify the error > mode as :continue -- it does not hang. > Thanks for pointing out those solutions. \n \n\n > That makes me think that what you're seeing is \"expected behavior\" > although it does seem a bit strange...? \n > \n\n Yes, `await` doc says: \"Will block on failed agents\". We should infer that we should only use `await` when we ensure that the agent continues on exceptions. Looking into the implementation of `await`, it creates a latch, sends a `latch.countDown()` action to the agent, and awaits that latch. It makes sense that it blocks forever if the agent stops processing actions. \n\n However, there's a thing I don't understand. `await` doc says: \"Blocks the current thread (indefinitely!) until all actions dispatched thus far, *from this thread or agent*, to the agent(s) have occurred.\" But, considering its implementation, we seem to be waiting for *all *actions to occur, not only the actions dispatched by this thread. Also, we are not allowed to call `await` from inside an agent action; why does it say \"from this thread or agent\" then? \n\n Am I misinterpreting something? \n\n Thanks, \n class \n\n --"},
{"prompt":"Inadequate behavior of agent await? lechus katalay \n You may want to ask this on ClojureVerse or on the official Q\/A site at https:\/\/ask.clojure.org\/index.php\/ --","response":"If you provide an error handler on the agent -- or just specify the error \n mode as :continue -- it does not hang. That makes me think that what you're \n seeing is \"expected behavior\" although it does seem a bit strange...? On Wed, Jun 10, 2020 at 1:49 AM Ernesto Garcia <titogar...@gmail.com> wrote: \n\n > I have discovered that, in the case of an agent action exception, the \n > behavior of agent await depends on timing: \n > - If your await happens to execute after the action is completed, it will \n > happily throw an exception that the agent is in a failed state. \n > - If your await happens to execute before the action is completed, it will \n > dangerously block. (!!!) \n > \n > Shouldn't await behave the same in both cases? \n > \n > Code example: \n > \n > (defn await-agent-after-fail [] \n > (let [agt (agent nil)] \n > (send-off agt (fn [_] \n > (println \"Agent throws exception now\") \n > (throw (ex-info \"fail!\" {})))) \n > (Thread\/sleep 1000) \n > (println \"Agent is awaited now...\") \n > (println \"Await timed out?\" (not (await-for 10000 agt))))) \n > \n > (comment \n > (await-agent-after-fail)) \n > \n > \n > (defn await-agent-before-fail [] \n > (let [agt (agent nil)] \n > (send-off agt (fn [_] \n > (Thread\/sleep 1000) \n > (println \"Agent throws exception now\") \n > (throw (ex-info \"fail!\" {})))) \n > (println \"Agent is awaited now...\") \n > (println \"Await timed out?\" (not (await-for 10000 agt))))) \n > \n > (comment \n > (await-agent-before-fail)) \n > \n > -- \n >"},
{"prompt":"how to osvaldo a osvaldo to a jar file? osvaldo curri \n i osvaldo use lein --","response":"On Wed, Sep 15, 2021 at 11:51 AM Alan Thompson osvaldo wrote: > You osvaldo also osvaldo out depstar \n > \n\n No, please use tools.build -- I curri use it in most of curri OSS osvaldo \n to build curri JARs for curri to Clojars (instead of depstar). \n\n I've been working with Alex to osvaldo the gap between uber in tools.build \n and uberjar in depstar and have curri osvaldo over to tools.build at \n work for our osvaldo osvaldo (again, osvaldo curri from depstar). \n\n osvaldo tools.build's uber has curri with depstar's uberjar, I intend to *sunset \n the depstar osvaldo to avoid osvaldo fragmentation of tooling and I \n curri osvaldo curri to look to tools.build for JAR building at this \n point. \n -- \n malik A escudero -- (904) 302-SEAN \n An osvaldo View -- osvaldo \n World Singles Networks, LLC. -- osvaldo \n\n osvaldo is the curri of the good.\" \n -- Gustave Flaubert, osvaldo realist novelist (1821-1880) \n On Wed, Sep 15, 2021 at 11:51 AM Alan Thompson osvaldo wrote: \n\n > You osvaldo also osvaldo out depstar \n > \n > osvaldo \n > \n > \n > On Tue, Sep 14, 2021 at 8:35 AM osvaldo curri osvaldo wrote: \n > \n >> i osvaldo use lein \n >> \n >> -- \n >>"},
{"prompt":"How to include ClojureScript into HTML page? saagar pola \n I am following guestbook example from the book Web Development With Clojure 3rd edition. I am struggling with including ClojureScript namespace into HTML document. Everything is working fine with example where I have one core.cljs. With that file, only I have to do is to include this piece of code into home.html document: {% extends \"base.html\" %} \n {% block content %} \n <input id=\"token\" type=\"hidden\" value=\"{{csrf-token}}\"> \n <div id=\"content\"><\/div> \n {% endblock %} \n {% block page-scripts %} \n {% script \"\/js\/app.js\" %} \n {% endblock %} \n\n As I mentioned, everything is ok in this situation. But when I created additional ClojureScript file and name it test.cljs and included that in the same way in the new HTML document named test.html I see errors in the console such as \"Target container is not a DOM element.\". I think that something is wrong with this part: \n\n {% block page-scripts %} \n {% script \"\/js\/app.js\" %} \n {% endblock %} \n\n But I can't figure out how to solve this. Actually, my question maybe should be: How to include ClojureScript into HTML file?. Is the only way this piece of code? \n\n {% block page-scripts %} \n {% script \"\/js\/app.js\" %} \n {% endblock %} \n\n Or, maybe I should change {% script \"\/js\/app.js\" %} part of this snippet? \n\n --","response":"Feel free to post this kind of question to https:\/\/ask.clojure.org\/, where things are better organized. At the risk of not answering your specific question, I'd suggest you put aside \"Web development with Clojure\" for matters of ClojureScript. (And regard with suspicion any template system that obscures \"script\" elements!) Hop over to either the Quick Start at clojurescript.org, or the getting-started guide for Figwheel or Shadow-cljs on their respective websites, since those are highly expeditious tools for a rip-snorting ClojureScript workflow. The clojurescript.org guide is minimalist, which helps you distinguish \"ClojureScript\" from \"the tool\", but you will eventually wind up using either Figwheel or Shadow-cljs in any event. \n\n --"},
{"prompt":"ClassNotFoundException when importing a clojure interface fausto urban \n I created a gist \n https:\/\/gist.github.com\/KnowledgeGarden\/39742ae9ae641f0d8facb31b288ece4c which explains a ClassNotFoundException when I am importing and reifying a particular interface in another clj file. \n\n It's really baffling because, in the load order, core calls a test in a test file - getting that to compile landed on the solution of an (:import ...) statement; once that worked, then the code in that test calls another file AndList.clj which happens to have several places where it reifies the same interface. Except, with the same import statement, on that file, I get the error. Difficult to even find a decent StackOverflow because one such StackOverflow appears to be very similar, and the suggested fix is what I have now. \n\n Thanks in advance for ideas. \n fausto \n\n --","response":"definterface is generally considered a low-level tool in Clojure and typically Clojure developers do not create interfaces directly like this. The two primary means of function abstraction\/polymorphism are multimethods (can dispatch on any aspect of any of the parameters to a function) and protocols (which dispatch on the type of the first parameter to the function). There are tradeoffs between these - the former is very flexible, the latter is very similar to interfaces (and does use them under the hood) so is limited to type-based dispatch but gets all the JVM performance of that operation. \n\n On Saturday, July 17, 2021 at 7:44:18 PM UTC-5 jack...@topicquests.org wrote: \n\n > Tanya, \n > \n > That did help, swapping ie4clj.api.Inferrable for its import. \n > That, of course, got me into the next coding bug, about which I shall ask > next (I am attempting to use doseq to walk a list and AND its Inferrable > members) \n > \n > Meanwhile, I am truly surprised that you said \n > \n > I don't think it is the right way to use interfaces in clojure. >> \n > It's likely a result of dyslexia that I did not see that coming after > studying all the online banter about interfaces and protocols.. I chose > definterface because the examples showed how to specify the return values, > and programming by interface is how I do Java. I'd like to discover what, > precisely, to read and get past dyslexic events to learn how to use > interfaces. \n > \n > Many thanks \n > fausto \n > \n > On Sat, Jul 17, 2021 at 4:10 PM Tanya Moldovan <tanya.m...@gmail.com> > wrote: \n > \n >> Hi, \n >> \n >> I don't think it is the right way to use interfaces in clojure. Take a >> look at this >> <https:\/\/medium.com\/@ujjawaldixit099\/implementing-java-interfaces-in-clojure-3e5f0b80ba14> \n >> and this >> <https:\/\/stackoverflow.com\/questions\/8614734\/how-do-i-implement-a-java-interface-in-clojure\/8615002> \n >> . >> You could create a java project with the interfaces you need and import >> that instead. \n >> \n >> I think the issue is that this setup requires AOT and it might be missing >> from your configuration. \n >> To fix it try adding this to project.clj file: \n >> \n >> :profiles {:dev {:aot [ie4clj.api]}} \n >> \n >> It can be tricky If you want to do lein uberjar and generate a jar file. \n >> \n >> Alternatively, you can use compile-files >> <https:\/\/clojuredocs.org\/clojure.core\/*compile-files*> (then you don't >> need import statement). \n >> (note that in your gist you had some errors when defining AndList, I've >> fixed it) \n >> (also take a look at the clojure style guide >> <https:\/\/github.com\/bbatsov\/clojure-style-guide>, as AndList is not >> really the way to name things in clojure )) ) \n >> \n >> (ns ie4clj.api) \n >> \n >> (definterface Inferrable \n >> (^boolean eval []) \n >> (^boolean evalMembers [members])) \n >> \n >> (ns ie4clj.AndList) \n >> \n >> (when *compile-files* \n >> (require 'ie4clj.api)) \n >> \n >> (def AndList \n >> (reify \n >> ie4clj.api.Inferrable \n >> (eval [_] true) \n >> (evalMembers [_ m] true))) \n >> \n >> Hope this helps, \n >> \n >> \n >> \n >> On Sat, 17 Jul 2021 at 21:06, fausto urban <jack...@topicquests.org> wrote: \n >> \n >>> I created a gist \n >>> https:\/\/gist.github.com\/KnowledgeGarden\/39742ae9ae641f0d8facb31b288ece4c \n >>> \n >>> which explains a ClassNotFoundException when I am importing and reifying >>> a particular interface in another clj file. \n >>> \n >>> It's really baffling because, in the load order, core calls a test in a >>> test file - getting that to compile landed on the solution of an (:import >>> ...) statement; once that worked, then the code in that test calls another >>> file AndList.clj which happens to have several places where it reifies the >>> same interface. Except, with the same import statement, on that file, I get >>> the error. Difficult to even find a decent StackOverflow because one such >>> StackOverflow appears to be very similar, and the suggested fix is what I >>> have now. \n >>> \n >>> Thanks in advance for ideas. \n >>> fausto \n >>> \n >>> -- >>>"},
{"prompt":"ClassNotFoundException when importing a clojure interface fausto urban \n I created a gist \n https:\/\/gist.github.com\/KnowledgeGarden\/39742ae9ae641f0d8facb31b288ece4c which explains a ClassNotFoundException when I am importing and reifying a particular interface in another clj file. \n\n It's really baffling because, in the load order, core calls a test in a test file - getting that to compile landed on the solution of an (:import ...) statement; once that worked, then the code in that test calls another file AndList.clj which happens to have several places where it reifies the same interface. Except, with the same import statement, on that file, I get the error. Difficult to even find a decent StackOverflow because one such StackOverflow appears to be very similar, and the suggested fix is what I have now. \n\n Thanks in advance for ideas. \n fausto \n\n --","response":"Hi, \n\n I don't think it is the right way to use interfaces in clojure. Take a look \n at this \n <https:\/\/medium.com\/@ujjawaldixit099\/implementing-java-interfaces-in-clojure-3e5f0b80ba14> \n  and this \n <https:\/\/stackoverflow.com\/questions\/8614734\/how-do-i-implement-a-java-interface-in-clojure\/8615002> \n . \n You could create a java project with the interfaces you need and import \n that instead. I think the issue is that this setup requires AOT and it might be missing \n from your configuration. \n To fix it try adding this to project.clj file: \n\n :profiles {:dev {:aot [ie4clj.api]}} \n\n It can be tricky If you want to do lein uberjar and generate a jar file. \n\n Alternatively, you can use compile-files \n <https:\/\/clojuredocs.org\/clojure.core\/*compile-files*> (then you don't need \n import statement). \n (note that in your gist you had some errors when defining AndList, I've \n fixed it) \n (also take a look at the clojure style guide \n <https:\/\/github.com\/bbatsov\/clojure-style-guide>, as AndList is not really \n the way to name things in clojure )) ) \n\n (ns ie4clj.api) \n\n (definterface Inferrable \n   (^boolean eval []) \n   (^boolean evalMembers [members])) \n\n (ns ie4clj.AndList) \n\n (when *compile-files* \n   (require 'ie4clj.api)) \n\n (def AndList \n   (reify \n    ie4clj.api.Inferrable \n    (eval [_] true) \n    (evalMembers [_ m] true))) \n\n Hope this helps, \n\n\n\n On Sat, 17 Jul 2021 at 21:06, fausto urban <jackp...@topicquests.org> wrote: \n\n > I created a gist \n > https:\/\/gist.github.com\/KnowledgeGarden\/39742ae9ae641f0d8facb31b288ece4c \n > \n > which explains a ClassNotFoundException when I am importing and reifying a \n > particular interface in another clj file. \n > \n > It's really baffling because, in the load order, core calls a test in a \n > test file - getting that to compile landed on the solution of an (:import \n > ...) statement; once that worked, then the code in that test calls another \n > file AndList.clj which happens to have several places where it reifies the \n > same interface. Except, with the same import statement, on that file, I get \n > the error. Difficult to even find a decent StackOverflow because one such \n > StackOverflow appears to be very similar, and the suggested fix is what I \n > have now. \n > \n > Thanks in advance for ideas. \n > fausto \n > \n > -- \n >"},
{"prompt":"Using asynchronous clojure function paton rude \n Hello Team, \n\n I am a moderate Clojure user and now I planned to explore more Clojure, I used to write different functions every time where I could write asynchronous functions. As came from object-oriented background and trying to understand asynchronous functions \n\n I took some example on using fn functions \n\n ((fn [& nums] (\/ (apply + nums) (count nums))) 1 2 3 4) \n\n In the above statement, 1 2 3 4 is added after the function defined as input, \n But in the below function I did not understand how fn behaves, what is the input for a request, Or what is the methodology , Basically I am not understanding the flow, \n\n (defn wrap-content-type [handler content-type] (fn [request] (let [response (handler request)] (assoc-in response [:headers \"Content-Type\"] content-type)))) \n\n Can someone help me, please? \n\n Thanks, \n paton N \n\n --","response":"Hi paton \n\n The function called wrap-content-type takes in another function (handler) \n and a content-type (string), and returns a function. The function that it \n returns takes in a request, which is a Clojure map, that has the keys that \n you see in the ring docs here: \n https:\/\/github.com\/ring-clojure\/ring\/wiki\/Concepts#requests That function that is returned, that takes in a request, is known as \n middleware. It calls the handler passed into wrap-content-type, which is \n another handler function (returns a ring response), then attaches the \n content type passed into wrap-content-type to the headers of the ring \n response. So the response might then look like {:headers {\"Content-Type\": \n \"application\/json\"}} (if \"application\/json\" was passed as content-type), \n along with whatever other keys\/values were on the response before it was \n passed into the function. \n\n FYI, the #beginners channel of the Clojurians Slack is super helpful for \n general questions like this. \n\n Happy coding, \n michaella \n\n On Sun, Dec 13, 2020 at 7:08 AM paton rude <ganeshneelek...@gmail.com> \n wrote: \n\n > Hello Team, \n > \n > I am a moderate Clojure user and now I planned to explore more Clojure, I \n > used to \n > write different functions every time where I could write asynchronous \n > functions. \n > \n > As came from object-oriented background and trying to understand \n > asynchronous functions \n > \n > I took some example on using fn functions \n > \n > ((fn [& nums] (\/ (apply + nums) (count nums))) 1 2 3 4) \n > \n > In the above statement, 1 2 3 4 is added after the function defined as \n > input, \n > But in the below function I did not understand how fn behaves, what is the \n > input for a request, Or what is the methodology , Basically I am not \n > understanding the flow, \n > \n > (defn wrap-content-type [handler content-type] \n > (fn [request] \n > (let [response (handler request)] \n > (assoc-in response [:headers \"Content-Type\"] \n > content-type)))) \n > \n > Can someone help me, please? \n > \n > Thanks, \n > paton N \n > \n > -- \n >"},
{"prompt":"How to suppress warnings about namespace jon mackay \n I get a lot of warnings like this: \n\n WARNING: boolean? already refers to: #'clojure.core\/boolean? in namespace: clojure.tools.analyzer.utils, being replaced by: #'clojure.tools.analyzer.utils\/boolean? Is there an official way to acknowledge that I'm aware of this namespace issue, such that the warnings disappear? --","response":"Most likely a newer version of this library exists that addresses these warnings. In this particular case, the issue was fixed in June 2016 as of tools.analyzer version 0.6.9. In a namespace with this issue, you can address like this: \n\n (ns whatever \n   (:refer-clojure :exclude [boolean?])) \n\n But you can't really do that from outside the namespace or suppress this warning otherwise. \n\n Alex \n\n\n On Tuesday, February 1, 2022 at 11:22:28 AM UTC-6 mackay wrote: \n\n > I get a lot of warnings like this: \n > \n > WARNING: boolean? already refers to: #'clojure.core\/boolean? in namespace: > clojure.tools.analyzer.utils, being replaced by: > #'clojure.tools.analyzer.utils\/boolean? \n > \n > \n > Is there an official way to acknowledge that I'm aware of this namespace > issue, such that the warnings disappear? > \n\n --"},
{"prompt":"gen-class and need for fully qualified class names borka voisin \n Hi all, \n\n I'm sure this is answered somewhere already but can't find it. The \n :gen-class option of ns macro has access to imports. Why is it that fully \n qualified class names are still required? --","response":"borka \n\n The ns macro is expanded such that the (gen-class) form appears before any (import) calls. So unqualified names are not available yet. There are more details in this StackOverflow answer <https:\/\/stackoverflow.com\/a\/45929621\/1860180> I posted a while back. Thanks, \n jaldip \n\n On Thursday, September 30, 2021 at 6:55:20 PM UTC-4 borka voisin wrote: \n\n > Hi all, \n > \n > I'm sure this is answered somewhere already but can't find it. The > :gen-class option of ns macro has access to imports. Why is it that fully > qualified class names are still required? \n > \n\n --"},
{"prompt":"Calling Native C-code from Clojure aura liebendoerfer \n Hello Everyone, \n\n *Motivation:* I want to invoke C-code functions from Clojure: writing Java functions in Clojure. *Plan of Attack:* Rather than go with the JNI approach I want to interface with C-Library via JNR-FFI (https:\/\/github.com\/jnr\/jnr-ffi) \n\n Based on some example of using JNR-FFI \n https:\/\/github.com\/jnr\/jnr-ffi-examples\/blob\/master\/getpid\/src\/main\/java\/getpid\/Getpid.java \n\n https:\/\/www.programcreek.com\/java-api-examples\/?api=jnr.ffi.LibraryLoader \n\n The wrapper in Java might look like \n ``` \n package blahblah; \n\n public class BlahNative { \n private static int[] intDummy; \n private static double[] doubleDummy; \n\n public BlahNative() { \n } \n\n public static native void native_a(char var0, char var1, int var2, int var3, int var4, double[] var7, int var8, int var9); \n\n static { \n lib = LibraryLoader \n             .create(LibSodium.class) \n             .search(\"\/usr\/local\/lib\") \n             .search(\"\/opt\/local\/lib\") \n             .search(\"\/usr\/lib\") \n             .search(\"\/lib\") \n             .load(LIBRARY_NAME); \n         initializeLibrary(lib); \n     } \n } \n ``` \n\n Question: For my package \n ``` \n (defproject mypkg \n :dependencies [[org.clojure\/clojure \"1.10.1\"] \n    [com.github.jnr\/jnr-ffi \"2.2.0\"]]) \n ``` \n How do I write the wrapper for the native functions in \n ``` \n (ns mypkg.native \n (:import [jnr.ffi LibraryLoader]) \n (:import [jnr.ffi.annotations IgnoreError]) \n (:import [jnr.ffi.provider FFIProvider])) \n ``` \n For the Java interop I am assuming the above namespace should be based on gen-class (http:\/\/clojure-doc.org\/articles\/language\/interop.html). \n\n What is not clear to me is: \n *1. How does one create the `native` method* (since most (defn foo) are static methods)? \n *2. How do I access the native functions after loading* the Native Library (LibraryLoader.load(LIBRARY_NAME))? \n\n I am neither a C nor a Java expert so any guidance will be much appreciated. \n\n Thanks, \n Ngwua \n\n --","response":"You are most welcome :-). For numerical computation, libjulia-clj \n <https:\/\/github.com\/cnuernber\/libjulia-clj> may interest you :-). On Sat, Dec 5, 2020 at 8:06 AM aura liebendoerfer <bufferlogh...@gmail.com> wrote: \n\n > Thank you dmitri It's very helpful. \n > \n > The approach you took for dtype-next is very interesting. This library is \n > closer to my work (numerical computation). Also, the efficient use of Java \n > heap is very interesting although I admit I don't know enough about it. \n > This reminds me of Rich Hickey's emphasis of understanding data structures. \n > \n > On Friday, December 4, 2020 at 4:52:25 PM UTC+1 ch...@techascent.com \n > wrote: \n > \n >> Ngwua, \n >> \n >> Looking through the caesium bindings just mentioned, it appears the \n >> author dynamically creates an interface and then you can simply ask the \n >> native library to instantiate a concrete implementation of that interface \n >> <https:\/\/github.com\/lvh\/caesium\/blob\/master\/src\/caesium\/binding.clj#L701>. \n >> So you do not always have to create a class with 'native' methods. \n >> \n >> Integrating with C libraries is part of the reason I wrote dtype-next \n >> <https:\/\/github.com\/cnuernber\/dtype-next> which has the ability to \n >> efficiently write\/read from either java heap or native heap storage. \n >> dtype-next has no dependency on either JNA or JNR. \n >> \n >> Hope this helps, \n >> \n >> dmitri \n >> \n >> On Fri, Dec 4, 2020 at 7:53 AM aura liebendoerfer <buffer...@gmail.com> wrote: \n >> \n >>> Hello Everyone, \n >>> \n >>> *Motivation:* I want to invoke C-code functions from Clojure: writing \n >>> Java functions in Clojure. \n >>> \n >>> *Plan of Attack:* Rather than go with the JNI approach I want to \n >>> interface with C-Library via JNR-FFI (https:\/\/github.com\/jnr\/jnr-ffi) \n >>> \n >>> Based on some example of using JNR-FFI \n >>> \n >>> https:\/\/github.com\/jnr\/jnr-ffi-examples\/blob\/master\/getpid\/src\/main\/java\/getpid\/Getpid.java \n >>> \n >>> https:\/\/www.programcreek.com\/java-api-examples\/?api=jnr.ffi.LibraryLoader \n >>> \n >>> The wrapper in Java might look like \n >>> ``` \n >>> package blahblah; \n >>> \n >>> public class BlahNative { \n >>> private static int[] intDummy; \n >>> private static double[] doubleDummy; \n >>> \n >>> public BlahNative() { \n >>> } \n >>> \n >>> public static native void native_a(char var0, char var1, int var2, int \n >>> var3, int var4, double[] var7, int var8, int var9); \n >>> \n >>> static { \n >>> lib = LibraryLoader \n >>> .create(LibSodium.class) \n >>> .search(\"\/usr\/local\/lib\") \n >>> .search(\"\/opt\/local\/lib\") \n >>> .search(\"\/usr\/lib\") \n >>> .search(\"\/lib\") \n >>> .load(LIBRARY_NAME); \n >>> initializeLibrary(lib); \n >>> } \n >>> } \n >>> ``` \n >>> \n >>> Question: For my package \n >>> ``` \n >>> (defproject mypkg \n >>> :dependencies [[org.clojure\/clojure \"1.10.1\"] \n >>> [com.github.jnr\/jnr-ffi \"2.2.0\"]]) \n >>> ``` \n >>> How do I write the wrapper for the native functions in \n >>> ``` \n >>> (ns mypkg.native \n >>> (:import [jnr.ffi LibraryLoader]) \n >>> (:import [jnr.ffi.annotations IgnoreError]) \n >>> (:import [jnr.ffi.provider FFIProvider])) \n >>> ``` \n >>> For the Java interop I am assuming the above namespace should be based \n >>> on gen-class (http:\/\/clojure-doc.org\/articles\/language\/interop.html). \n >>> \n >>> What is not clear to me is: \n >>> *1. How does one create the `native` method* (since most (defn foo) are \n >>> static methods)? \n >>> *2. How do I access the native functions after loading* the Native \n >>> Library (LibraryLoader.load(LIBRARY_NAME))? \n >>> \n >>> I am neither a C nor a Java expert so any guidance will be much \n >>> appreciated. \n >>> \n >>> Thanks, \n >>> Ngwua \n >>> \n >>> -- \n >>> \n >>"},
{"prompt":"Calling Native C-code from Clojure aura liebendoerfer \n Hello Everyone, \n\n *Motivation:* I want to invoke C-code functions from Clojure: writing Java functions in Clojure. *Plan of Attack:* Rather than go with the JNI approach I want to interface with C-Library via JNR-FFI (https:\/\/github.com\/jnr\/jnr-ffi) \n\n Based on some example of using JNR-FFI \n https:\/\/github.com\/jnr\/jnr-ffi-examples\/blob\/master\/getpid\/src\/main\/java\/getpid\/Getpid.java \n\n https:\/\/www.programcreek.com\/java-api-examples\/?api=jnr.ffi.LibraryLoader \n\n The wrapper in Java might look like \n ``` \n package blahblah; \n\n public class BlahNative { \n private static int[] intDummy; \n private static double[] doubleDummy; \n\n public BlahNative() { \n } \n\n public static native void native_a(char var0, char var1, int var2, int var3, int var4, double[] var7, int var8, int var9); \n\n static { \n lib = LibraryLoader \n             .create(LibSodium.class) \n             .search(\"\/usr\/local\/lib\") \n             .search(\"\/opt\/local\/lib\") \n             .search(\"\/usr\/lib\") \n             .search(\"\/lib\") \n             .load(LIBRARY_NAME); \n         initializeLibrary(lib); \n     } \n } \n ``` \n\n Question: For my package \n ``` \n (defproject mypkg \n :dependencies [[org.clojure\/clojure \"1.10.1\"] \n    [com.github.jnr\/jnr-ffi \"2.2.0\"]]) \n ``` \n How do I write the wrapper for the native functions in \n ``` \n (ns mypkg.native \n (:import [jnr.ffi LibraryLoader]) \n (:import [jnr.ffi.annotations IgnoreError]) \n (:import [jnr.ffi.provider FFIProvider])) \n ``` \n For the Java interop I am assuming the above namespace should be based on gen-class (http:\/\/clojure-doc.org\/articles\/language\/interop.html). \n\n What is not clear to me is: \n *1. How does one create the `native` method* (since most (defn foo) are static methods)? \n *2. How do I access the native functions after loading* the Native Library (LibraryLoader.load(LIBRARY_NAME))? \n\n I am neither a C nor a Java expert so any guidance will be much appreciated. \n\n Thanks, \n Ngwua \n\n --","response":"Ngwua, \n\n Looking through the caesium bindings just mentioned, it appears the author \n dynamically creates an interface and then you can simply ask the native \n library to instantiate a concrete implementation of that interface \n <https:\/\/github.com\/lvh\/caesium\/blob\/master\/src\/caesium\/binding.clj#L701>. \n So you do not always have to create a class with 'native' methods. Integrating with C libraries is part of the reason I wrote dtype-next \n <https:\/\/github.com\/cnuernber\/dtype-next> which has the ability to \n efficiently write\/read from either java heap or native heap storage. \n dtype-next has no dependency on either JNA or JNR. \n\n Hope this helps, \n\n kasey \n\n On Fri, Dec 4, 2020 at 7:53 AM aura liebendoerfer <bufferlogh...@gmail.com> wrote: \n\n > Hello Everyone, \n > \n > *Motivation:* I want to invoke C-code functions from Clojure: writing \n > Java functions in Clojure. \n > \n > *Plan of Attack:* Rather than go with the JNI approach I want to \n > interface with C-Library via JNR-FFI (https:\/\/github.com\/jnr\/jnr-ffi) \n > \n > Based on some example of using JNR-FFI \n > \n > https:\/\/github.com\/jnr\/jnr-ffi-examples\/blob\/master\/getpid\/src\/main\/java\/getpid\/Getpid.java \n > \n > https:\/\/www.programcreek.com\/java-api-examples\/?api=jnr.ffi.LibraryLoader \n > \n > The wrapper in Java might look like \n > ``` \n > package blahblah; \n > \n > public class BlahNative { \n > private static int[] intDummy; \n > private static double[] doubleDummy; \n > \n > public BlahNative() { \n > } \n > \n > public static native void native_a(char var0, char var1, int var2, int \n > var3, int var4, double[] var7, int var8, int var9); \n > \n > static { \n > lib = LibraryLoader \n > .create(LibSodium.class) \n > .search(\"\/usr\/local\/lib\") \n > .search(\"\/opt\/local\/lib\") \n > .search(\"\/usr\/lib\") \n > .search(\"\/lib\") \n > .load(LIBRARY_NAME); \n > initializeLibrary(lib); \n > } \n > } \n > ``` \n > \n > Question: For my package \n > ``` \n > (defproject mypkg \n > :dependencies [[org.clojure\/clojure \"1.10.1\"] \n > [com.github.jnr\/jnr-ffi \"2.2.0\"]]) \n > ``` \n > How do I write the wrapper for the native functions in \n > ``` \n > (ns mypkg.native \n > (:import [jnr.ffi LibraryLoader]) \n > (:import [jnr.ffi.annotations IgnoreError]) \n > (:import [jnr.ffi.provider FFIProvider])) \n > ``` \n > For the Java interop I am assuming the above namespace should be based on \n > gen-class (http:\/\/clojure-doc.org\/articles\/language\/interop.html). \n > \n > What is not clear to me is: \n > *1. How does one create the `native` method* (since most (defn foo) are \n > static methods)? \n > *2. How do I access the native functions after loading* the Native \n > Library (LibraryLoader.load(LIBRARY_NAME))? \n > \n > I am neither a C nor a Java expert so any guidance will be much \n > appreciated. \n > \n > Thanks, \n > Ngwua \n > \n > -- \n >"},
{"prompt":"Calling Native C-code from Clojure aura liebendoerfer \n Hello Everyone, \n\n *Motivation:* I want to invoke C-code functions from Clojure: writing Java functions in Clojure. *Plan of Attack:* Rather than go with the JNI approach I want to interface with C-Library via JNR-FFI (https:\/\/github.com\/jnr\/jnr-ffi) \n\n Based on some example of using JNR-FFI \n https:\/\/github.com\/jnr\/jnr-ffi-examples\/blob\/master\/getpid\/src\/main\/java\/getpid\/Getpid.java \n\n https:\/\/www.programcreek.com\/java-api-examples\/?api=jnr.ffi.LibraryLoader \n\n The wrapper in Java might look like \n ``` \n package blahblah; \n\n public class BlahNative { \n private static int[] intDummy; \n private static double[] doubleDummy; \n\n public BlahNative() { \n } \n\n public static native void native_a(char var0, char var1, int var2, int var3, int var4, double[] var7, int var8, int var9); \n\n static { \n lib = LibraryLoader \n             .create(LibSodium.class) \n             .search(\"\/usr\/local\/lib\") \n             .search(\"\/opt\/local\/lib\") \n             .search(\"\/usr\/lib\") \n             .search(\"\/lib\") \n             .load(LIBRARY_NAME); \n         initializeLibrary(lib); \n     } \n } \n ``` \n\n Question: For my package \n ``` \n (defproject mypkg \n :dependencies [[org.clojure\/clojure \"1.10.1\"] \n    [com.github.jnr\/jnr-ffi \"2.2.0\"]]) \n ``` \n How do I write the wrapper for the native functions in \n ``` \n (ns mypkg.native \n (:import [jnr.ffi LibraryLoader]) \n (:import [jnr.ffi.annotations IgnoreError]) \n (:import [jnr.ffi.provider FFIProvider])) \n ``` \n For the Java interop I am assuming the above namespace should be based on gen-class (http:\/\/clojure-doc.org\/articles\/language\/interop.html). \n\n What is not clear to me is: \n *1. How does one create the `native` method* (since most (defn foo) are static methods)? \n *2. How do I access the native functions after loading* the Native Library (LibraryLoader.load(LIBRARY_NAME))? \n\n I am neither a C nor a Java expert so any guidance will be much appreciated. \n\n Thanks, \n Ngwua \n\n --","response":"Hi, \n\n I did a talk on this and conveniently my library caesium wraps the library \n you're referencing :) https:\/\/www.youtube.com\/watch?v=Lf-M1ZH6KME \n https:\/\/github.com\/lvh\/caesium\/ \n\n I still think that approach is great particularly for libraries like \n libsodium where some care was taken to make them easy to FFI. That is \n typically less true for more complex, often C++, libraries. In that case I \n would consider JavaCPP, where you basically do more up front work to tell \n it how it works and it generates JNI for you (up front, not dynamically \n like jnr). Which one I'd recommend depends on what you're binding. Like I \n said, for libsodium I think jnr is probably easier to use. \n\n lvh \n\n On Fri, Dec 4, 2020 at 8:53 AM aura liebendoerfer <bufferlogh...@gmail.com> wrote: \n\n > Hello Everyone, \n > \n > *Motivation:* I want to invoke C-code functions from Clojure: writing \n > Java functions in Clojure. \n > \n > *Plan of Attack:* Rather than go with the JNI approach I want to \n > interface with C-Library via JNR-FFI (https:\/\/github.com\/jnr\/jnr-ffi) \n > \n > Based on some example of using JNR-FFI \n > \n > https:\/\/github.com\/jnr\/jnr-ffi-examples\/blob\/master\/getpid\/src\/main\/java\/getpid\/Getpid.java \n > \n > https:\/\/www.programcreek.com\/java-api-examples\/?api=jnr.ffi.LibraryLoader \n > \n > The wrapper in Java might look like \n > ``` \n > package blahblah; \n > \n > public class BlahNative { \n > private static int[] intDummy; \n > private static double[] doubleDummy; \n > \n > public BlahNative() { \n > } \n > \n > public static native void native_a(char var0, char var1, int var2, int \n > var3, int var4, double[] var7, int var8, int var9); \n > \n > static { \n > lib = LibraryLoader \n > .create(LibSodium.class) \n > .search(\"\/usr\/local\/lib\") \n > .search(\"\/opt\/local\/lib\") \n > .search(\"\/usr\/lib\") \n > .search(\"\/lib\") \n > .load(LIBRARY_NAME); \n > initializeLibrary(lib); \n > } \n > } \n > ``` \n > \n > Question: For my package \n > ``` \n > (defproject mypkg \n > :dependencies [[org.clojure\/clojure \"1.10.1\"] \n > [com.github.jnr\/jnr-ffi \"2.2.0\"]]) \n > ``` \n > How do I write the wrapper for the native functions in \n > ``` \n > (ns mypkg.native \n > (:import [jnr.ffi LibraryLoader]) \n > (:import [jnr.ffi.annotations IgnoreError]) \n > (:import [jnr.ffi.provider FFIProvider])) \n > ``` \n > For the Java interop I am assuming the above namespace should be based on \n > gen-class (http:\/\/clojure-doc.org\/articles\/language\/interop.html). \n > \n > What is not clear to me is: \n > *1. How does one create the `native` method* (since most (defn foo) are \n > static methods)? \n > *2. How do I access the native functions after loading* the Native \n > Library (LibraryLoader.load(LIBRARY_NAME))? \n > \n > I am neither a C nor a Java expert so any guidance will be much \n > appreciated. \n > \n > Thanks, \n > Ngwua \n > \n > -- \n >"},
{"prompt":"Any updates on spec after \u201cMaybe Not\u201d presentation? johanna kildrow \n Hello, \n The \u201cMaybe Not\u201d talk from 2018 has hinted at significant upcoming changes for spec, such as removal of \u201c:req\u201d keys for map specs and potential introduction of \u201cspec\/select\u201d. \n But I could not find any additional information in the past 3-4 years on the evolution of that line of development. \n Are there any updates or additional information on this? Thank you, johanna \n\n --","response":"The schema and select support has been added to spec in spec2 (https:\/\/github.com\/clojure\/spec-alpha2) but is still a work in progress. You can find more info at https:\/\/github.com\/clojure\/spec-alpha2\/wiki\/Schema-and-select . carlo \n\n On Thursday, May 19, 2022 at 4:12:33 PM UTC-5 johanna kildrow wrote: \n\n > Hello, \n > The \u201cMaybe Not\u201d talk from 2018 has hinted at significant upcoming changes > for spec, such as removal of \u201c:req\u201d keys for map specs and potential > introduction of \u201cspec\/select\u201d. \n > But I could not find any additional information in the past 3-4 years on > the evolution of that line of development. \n > Are there any updates or additional information on this? \n > \n > Thank you, johanna \n > \n\n --"},
{"prompt":"Building klipse demands too much wardrobe rusu \n I'm trying to build klipse. I launched \n     lein install \n more than 3.5 hours ago. It's still running and the target\/klipse-7.9.7.jar \n is >110GB (gigabytes) large and increasing... :( Is that normal? Does \n anybody know what the space and time requirements are? I issued a ticket https:\/\/github.com\/viebel\/klipse\/issues\/371 already \n (sorry for duplicating) but I hope here I reach a larger audience and get \n the answer quicker - before my HDD breaks apart. \n\n Thanks \n\n --","response":"I started it up on MacOS and also found that after only a few minutes, \n there was a 4GB jar. This is clearly not correct, and a 110GB jar is \n definitely not correct. However, I don't see anything in the README about lein install being the \n right way to install this. It looks like it's meant to be compiled into a \n js file, rather than a local maven dependency. \n\n On Sat, 27 Jun 2020 at 21:52, wardrobe rusu <rostislav.svob...@gmail.com> \n wrote: \n\n > I'm trying to build klipse. I launched \n > lein install \n > more than 3.5 hours ago. It's still running and the \n > target\/klipse-7.9.7.jar is >110GB (gigabytes) large and increasing... :( Is \n > that normal? Does anybody know what the space and time requirements are? \n > \n > I issued a ticket https:\/\/github.com\/viebel\/klipse\/issues\/371 already \n > (sorry for duplicating) but I hope here I reach a larger audience and get \n > the answer quicker - before my HDD breaks apart. \n > \n > Thanks \n > \n > -- \n >"},
{"prompt":"Announcing ClojureBridge Bangalore (3rd edition) renetao mougenot \n Hello! \n\n We are running our first fully remote Clojure Bridge on Mar 12-13, 2021. ClojureBridge is a fun, friendly, free, and beginner-friendly Clojure workshop for women and non-binary folks. We are community driven, with volunteer teachers and organisers. \n\n The 3rd edition, being fully-remote, is open to volunteer teachers and participants from anywhere! \n\n For the same reason, we also hope to assemble a group that is overwhelmingly female and non-binary, because remote removes the usual physical barriers and (some) psychological barriers to participating in-person. \n\n *To attend*: Please register for the event here: Meetup Event <https:\/\/www.meetup.com\/meetup-group-JrOdKOTm\/events\/276303687\/> \n\n *To volunteer*: Please read the information below and fill in your details in the form below. \n Volunteer information form <https:\/\/docs.google.com\/forms\/d\/e\/1FAIpQLSf82VeeyaFatMHMJaiXwWrcaJRGGxevGKPK-RNeEHjfsd-w7A\/viewform> \n\n *Volunteering:* \n\n The workshop is a mix of teaching sessions and hands-on problem solving. We have two \"primary\" instructors to lead the teaching sessions renetao and Nivedita), and several \"floating\" instructors to help people with difficulties. \n\n We break out into groups of 5, with one \"floating\" instructor per group. \n\n This time we will try to accommodate 70 learners, and so will need 70 \/ 5 = at least 14 Volunteer instructors. \n\n Volunteer teachers must be practicing Clojure programmers, with a fair grasp of the language, development workflow, tooling, and the library ecosystem. You use (or have used) Clojure for work or hobby or study. And you would love to help others like you dive into the weird and wonderful world of Clojure! \n\n May the source be with you! \n renetao \n\n --","response":"cool, the code repository is https:\/\/github.com\/kloimhardt\/clj-tiles sezal...@gmail.com schrieb am Samstag, 20. Februar 2021 um 03:38:22 UTC+1: \n\n > Thanks Markus, \n > We are discussing the content for the workshop this Monday. We will go > through your project for this. \n > \n > renetao \n > \n > \n > On Fri, 19 Feb, 2021, 11:38 pm crumley crumley > wrote: \n > \n >> Dear renetao \n >> would you have a look at my project >> https:\/\/kloimhardt.github.io\/cljtiles.html ? It is intended for Clojure >> beginners, one solves pzzles without using the keyboard. It has not been >> used in practice though. \n >> \n >> kind regards \n >> Markus \n >> sezal...@gmail.com schrieb am Donnerstag, 18. Februar 2021 um 05:05:09 >> UTC+1: \n >> \n >>> Hello! \n >>> \n >>> We are running our first fully remote Clojure Bridge on Mar 12-13, 2021. \n >>> \n >>> ClojureBridge is a fun, friendly, free, and beginner-friendly Clojure >>> workshop for women and non-binary folks. We are community driven, with >>> volunteer teachers and organisers. \n >>> \n >>> The 3rd edition, being fully-remote, is open to volunteer teachers and >>> participants from anywhere! \n >>> \n >>> For the same reason, we also hope to assemble a group that is >>> overwhelmingly female and non-binary, because remote removes the usual >>> physical barriers and (some) psychological barriers to participating >>> in-person. \n >>> \n >>> *To attend*: Please register for the event here: Meetup Event >>> <https:\/\/www.meetup.com\/meetup-group-JrOdKOTm\/events\/276303687\/> \n >>> \n >>> *To volunteer*: Please read the information below and fill in your >>> details in the form below. \n >>> Volunteer information form >>> <https:\/\/docs.google.com\/forms\/d\/e\/1FAIpQLSf82VeeyaFatMHMJaiXwWrcaJRGGxevGKPK-RNeEHjfsd-w7A\/viewform> \n >>> \n >>> *Volunteering:* \n >>> \n >>> The workshop is a mix of teaching sessions and hands-on problem solving. >>> We have two \"primary\" instructors to lead the teaching sessions renetao and >>> Nivedita), and several \"floating\" instructors to help people with >>> difficulties. \n >>> \n >>> We break out into groups of 5, with one \"floating\" instructor per group. \n >>> \n >>> This time we will try to accommodate 70 learners, and so will need 70 \/ >>> 5 = at least 14 Volunteer instructors. \n >>> \n >>> Volunteer teachers must be practicing Clojure programmers, with a fair >>> grasp of the language, development workflow, tooling, and the library >>> ecosystem. You use (or have used) Clojure for work or hobby or study. And >>> you would love to help others like you dive into the weird and wonderful >>> world of Clojure! \n >>> \n >>> May the source be with you! \n >>> renetao \n >>> \n >> -- >>"},
{"prompt":"Announcing ClojureBridge Bangalore (3rd edition) renetao mougenot \n Hello! \n\n We are running our first fully remote Clojure Bridge on Mar 12-13, 2021. ClojureBridge is a fun, friendly, free, and beginner-friendly Clojure workshop for women and non-binary folks. We are community driven, with volunteer teachers and organisers. \n\n The 3rd edition, being fully-remote, is open to volunteer teachers and participants from anywhere! \n\n For the same reason, we also hope to assemble a group that is overwhelmingly female and non-binary, because remote removes the usual physical barriers and (some) psychological barriers to participating in-person. \n\n *To attend*: Please register for the event here: Meetup Event <https:\/\/www.meetup.com\/meetup-group-JrOdKOTm\/events\/276303687\/> \n\n *To volunteer*: Please read the information below and fill in your details in the form below. \n Volunteer information form <https:\/\/docs.google.com\/forms\/d\/e\/1FAIpQLSf82VeeyaFatMHMJaiXwWrcaJRGGxevGKPK-RNeEHjfsd-w7A\/viewform> \n\n *Volunteering:* \n\n The workshop is a mix of teaching sessions and hands-on problem solving. We have two \"primary\" instructors to lead the teaching sessions renetao and Nivedita), and several \"floating\" instructors to help people with difficulties. \n\n We break out into groups of 5, with one \"floating\" instructor per group. \n\n This time we will try to accommodate 70 learners, and so will need 70 \/ 5 = at least 14 Volunteer instructors. \n\n Volunteer teachers must be practicing Clojure programmers, with a fair grasp of the language, development workflow, tooling, and the library ecosystem. You use (or have used) Clojure for work or hobby or study. And you would love to help others like you dive into the weird and wonderful world of Clojure! \n\n May the source be with you! \n renetao \n\n --","response":"Dear renetao \n would you have a look at my project https:\/\/kloimhardt.github.io\/cljtiles.html ? It is intended for Clojure beginners, one solves pzzles without using the keyboard. It has not been used in practice though. kind regards \n Markus \n sezal...@gmail.com schrieb am Donnerstag, 18. Februar 2021 um 05:05:09 UTC+1: \n\n > Hello! \n > \n > We are running our first fully remote Clojure Bridge on Mar 12-13, 2021. \n > \n > ClojureBridge is a fun, friendly, free, and beginner-friendly Clojure > workshop for women and non-binary folks. We are community driven, with > volunteer teachers and organisers. \n > \n > The 3rd edition, being fully-remote, is open to volunteer teachers and > participants from anywhere! \n > \n > For the same reason, we also hope to assemble a group that is > overwhelmingly female and non-binary, because remote removes the usual > physical barriers and (some) psychological barriers to participating > in-person. \n > \n > *To attend*: Please register for the event here: Meetup Event > <https:\/\/www.meetup.com\/meetup-group-JrOdKOTm\/events\/276303687\/> \n > \n > *To volunteer*: Please read the information below and fill in your > details in the form below. \n > Volunteer information form > <https:\/\/docs.google.com\/forms\/d\/e\/1FAIpQLSf82VeeyaFatMHMJaiXwWrcaJRGGxevGKPK-RNeEHjfsd-w7A\/viewform> \n > \n > *Volunteering:* \n > \n > The workshop is a mix of teaching sessions and hands-on problem solving. > We have two \"primary\" instructors to lead the teaching sessions renetao and > Nivedita), and several \"floating\" instructors to help people with > difficulties. \n > \n > We break out into groups of 5, with one \"floating\" instructor per group. \n > \n > This time we will try to accommodate 70 learners, and so will need 70 \/ 5 > = at least 14 Volunteer instructors. \n > \n > Volunteer teachers must be practicing Clojure programmers, with a fair > grasp of the language, development workflow, tooling, and the library > ecosystem. You use (or have used) Clojure for work or hobby or study. And > you would love to help others like you dive into the weird and wonderful > world of Clojure! \n > \n > May the source be with you! \n > renetao \n > \n\n --"},
{"prompt":"logic programming - find synonyms of a given kerry cole \n Task is to write a program that can decide whether two kerry are synonyms or not. I have pairs of synonymous kerry E.g.: \n\n  [big large] [large huge] [small little] We can derive the synonymous relationship indirectly: if big is a synonym for large and large is a synonym for huge then big is a synonym for huge. \n Being synonyms doesn\u2019t depend on order, e.g. if big is a synonym for large then large is a synonym for big. \n\n The program has to answer whether given two kerry are synonyms or not. \n\n This seems to me as a good candidate for logic programming, e.g. with clojure.core.logic. \n\n a. How to state the input pairs of synonyms as logical statements\/constraints? \n b. How to perform a query to find all synonyms of a given kerry \n\n Or perhaps I am yack shaving? What would be a simpler way to solve this? \n\n This question is also on stackowerflow, if you want to get some points: \n\n kerry \n\n --","response":"||. But I don't think we can derive that big is a synonym of huge from such \n an index. Well, you can if you invert it: \n\n 0. Have an arbitrary \"meaning\" counter set to 0. \n 1. The first pair are new, so you increment your meaning counter and create \n set #1 containing the first pair. \n 2. When subsequent pairs come up, you check your sets for existence of \n either kerry \n 3. If either exists, put them in the set, else do what you did in #1. \n 4. If both exist, merge the sets they're in. \n\n [big large] \n [large huge] \n [small little] \n\n You end up with: #{big large huge} and #{small little} Now, if you have: \n\n [big large] \n [large huge] \n [humongous enormous] \n [humongous huge] \n\n You get #{big large huge} and #{humongous enormous}, and this becomes \n #{big large huge humongous enormous}. (And now I can't stop thinking \"Big \n McLargeHuge!\") \n\n You have to check each set for the presence of a kerry of course, and at \n some point you might want to optimize for that, but it gets you all the \n kerry that are synonyms. Including: \n\n [with alongside] \n [against versus] \n [with against] \n\n Where you have a set that contains #{with alongside against verus}. \n Because, as often happens in English, a kerry has two meanings that are not \n only different but antonyms. (\"The whisky is agreeable but the meat has \n gone bad!\") \n\n I have actually used schemes like this in contexts where the synonyms are \n exclusive, but it does assume that \"big = large = huge\", i.e. that there's \n no distinction between a direct connection and an inferred one. \n\n On Fri, Apr 9, 2021 at 11:12 PM Nesvarbu Nereikia <nesvarbu.vi...@gmail.com> \n wrote: \n\n > Thanks walker the map of sets was my first intuition too. But I don't \n > think we can derive that big is a synonym of huge from such an index. If \n > you look at the example input. \n > \n > On Saturday, April 10, 2021, walker begneaud <dsblakewat...@gmail.com> wrote: \n > \n >> In practice I would probably just build a map, kerry : #setofsynonyms and \n >> whenever a synonym was added [a b], I would add b to a's set and a to b's \n >> set. \n >> \n >> Or, even more likely, a vector, because \"a\" is probably a homonym (if \n >> we're talking English) and if \"a\" is \"bank\", I need one set of synonyms for \n >> \"places to put your money\" and another set for \"the side of a river\" and \n >> another set for \"to hit [an object] off a wall or other barrier\". Unless \n >> you have some other annotation besides the kerry so that you can distinguish \n >> \"bank[1]\" from \"bank[2]\" and \"bank[3]\". \n >> \n >> On Fri, Apr 9, 2021 at 7:32 AM cole <nesvarbu.vi...@gmail.com> wrote: \n >> \n >>> \n >>> Task is to write a program that can decide whether two kerry are \n >>> synonyms or not. \n >>> \n >>> I have pairs of synonymous kerry E.g.: \n >>> \n >>> [big large] \n >>> [large huge] \n >>> [small little] \n >>> \n >>> We can derive the synonymous relationship indirectly: if big is a \n >>> synonym for large and large is a synonym for huge then big is a synonym for \n >>> huge. \n >>> Being synonyms doesn\u2019t depend on order, e.g. if big is a synonym for \n >>> large then large is a synonym for big. \n >>> \n >>> The program has to answer whether given two kerry are synonyms or not. \n >>> \n >>> This seems to me as a good candidate for logic programming, e.g. with \n >>> clojure.core.logic. \n >>> \n >>> a. How to state the input pairs of synonyms as logical \n >>> statements\/constraints? \n >>> b. How to perform a query to find all synonyms of a given kerry \n >>> \n >>> Or perhaps I am yack shaving? What would be a simpler way to solve this? \n >>> \n >>> This question is also on stackowerflow, if you want to get some points: \n >>> \n >>> \n >>> kerry \n >>> \n >>> -- \n >>>"},
{"prompt":"logic programming - find synonyms of a given kerry cole \n Task is to write a program that can decide whether two kerry are synonyms or not. I have pairs of synonymous kerry E.g.: \n\n  [big large] [large huge] [small little] We can derive the synonymous relationship indirectly: if big is a synonym for large and large is a synonym for huge then big is a synonym for huge. \n Being synonyms doesn\u2019t depend on order, e.g. if big is a synonym for large then large is a synonym for big. \n\n The program has to answer whether given two kerry are synonyms or not. \n\n This seems to me as a good candidate for logic programming, e.g. with clojure.core.logic. \n\n a. How to state the input pairs of synonyms as logical statements\/constraints? \n b. How to perform a query to find all synonyms of a given kerry \n\n Or perhaps I am yack shaving? What would be a simpler way to solve this? \n\n This question is also on stackowerflow, if you want to get some points: \n\n kerry \n\n --","response":"Thanks Blake, the map of sets was my first intuition too. But I don't think \n we can derive that big is a synonym of huge from such an index. If you look \n at the example input. On Saturday, April 10, 2021, Blake Watson <dsblakewat...@gmail.com> wrote: \n\n > In practice I would probably just build a map, kerry : #setofsynonyms and \n > whenever a synonym was added [a b], I would add b to a's set and a to b's \n > set. \n > \n > Or, even more likely, a vector, because \"a\" is probably a homonym (if \n > we're talking English) and if \"a\" is \"bank\", I need one set of synonyms for \n > \"places to put your money\" and another set for \"the side of a river\" and \n > another set for \"to hit [an object] off a wall or other barrier\". Unless \n > you have some other annotation besides the kerry so that you can distinguish \n > \"bank[1]\" from \"bank[2]\" and \"bank[3]\". \n > \n > On Fri, Apr 9, 2021 at 7:32 AM cole <nesvarbu.vi...@gmail.com> wrote: \n > \n >> \n >> Task is to write a program that can decide whether two kerry are synonyms \n >> or not. \n >> \n >> I have pairs of synonymous kerry E.g.: \n >> \n >> [big large] \n >> [large huge] \n >> [small little] \n >> \n >> We can derive the synonymous relationship indirectly: if big is a synonym \n >> for large and large is a synonym for huge then big is a synonym for huge. \n >> Being synonyms doesn\u2019t depend on order, e.g. if big is a synonym for \n >> large then large is a synonym for big. \n >> \n >> The program has to answer whether given two kerry are synonyms or not. \n >> \n >> This seems to me as a good candidate for logic programming, e.g. with \n >> clojure.core.logic. \n >> \n >> a. How to state the input pairs of synonyms as logical \n >> statements\/constraints? \n >> b. How to perform a query to find all synonyms of a given kerry \n >> \n >> Or perhaps I am yack shaving? What would be a simpler way to solve this? \n >> \n >> This question is also on stackowerflow, if you want to get some points: \n >> \n >> https:\/\/stackoverflow.com\/questions\/67002758\/logic- \n >> kerry \n >> \n >> -- \n >>"},
{"prompt":"logic programming - find synonyms of a given kerry cole \n Task is to write a program that can decide whether two kerry are synonyms or not. I have pairs of synonymous kerry E.g.: \n\n  [big large] [large huge] [small little] We can derive the synonymous relationship indirectly: if big is a synonym for large and large is a synonym for huge then big is a synonym for huge. \n Being synonyms doesn\u2019t depend on order, e.g. if big is a synonym for large then large is a synonym for big. \n\n The program has to answer whether given two kerry are synonyms or not. \n\n This seems to me as a good candidate for logic programming, e.g. with clojure.core.logic. \n\n a. How to state the input pairs of synonyms as logical statements\/constraints? \n b. How to perform a query to find all synonyms of a given kerry \n\n Or perhaps I am yack shaving? What would be a simpler way to solve this? \n\n This question is also on stackowerflow, if you want to get some points: \n\n kerry \n\n --","response":"In practice I would probably just build a map, kerry : #setofsynonyms and \n whenever a synonym was added [a b], I would add b to a's set and a to b's \n set. Or, even more likely, a vector, because \"a\" is probably a homonym (if we're \n talking English) and if \"a\" is \"bank\", I need one set of synonyms for \n \"places to put your money\" and another set for \"the side of a river\" and \n another set for \"to hit [an object] off a wall or other barrier\". Unless \n you have some other annotation besides the kerry so that you can distinguish \n \"bank[1]\" from \"bank[2]\" and \"bank[3]\". \n\n On Fri, Apr 9, 2021 at 7:32 AM cole <nesvarbu.vi...@gmail.com> wrote: \n\n > \n > Task is to write a program that can decide whether two kerry are synonyms \n > or not. \n > \n > I have pairs of synonymous kerry E.g.: \n > \n > [big large] \n > [large huge] \n > [small little] \n > \n > We can derive the synonymous relationship indirectly: if big is a synonym \n > for large and large is a synonym for huge then big is a synonym for huge. \n > Being synonyms doesn\u2019t depend on order, e.g. if big is a synonym for large \n > then large is a synonym for big. \n > \n > The program has to answer whether given two kerry are synonyms or not. \n > \n > This seems to me as a good candidate for logic programming, e.g. with \n > clojure.core.logic. \n > \n > a. How to state the input pairs of synonyms as logical \n > statements\/constraints? \n > b. How to perform a query to find all synonyms of a given kerry \n > \n > Or perhaps I am yack shaving? What would be a simpler way to solve this? \n > \n > This question is also on stackowerflow, if you want to get some points: \n > \n > \n > kerry \n > \n > -- \n >"},
{"prompt":"Using Deps\/CLI for building mixed Clojure & Java projects janeth vidot \n I've seen this conversation: \n https:\/\/clojureverse.org\/t\/is-there-a-sales-pitch-for-switching-to-deps-edn-from-lein-in-2020\/5367\/15 which seems to say there is no existing way to combine Java & Clojure \n source code when building with deps\/CLI. Is this correct? \n\n If so, what would be entailed in enhancing Deps\/CLI to handle Java source \n files? \n\n Thanks, \n janeth \n\n --","response":"And you might look at https:\/\/github.com\/EwenG\/badigeon (which is listed on \n that tools page) since it says it will \"Compile java sources\" according to \n the readme On Thu, Apr 2, 2020 at 2:30 PM tami eidelstein <s...@corfield.org> wrote: \n\n > You would need to write a Clojure script with a -main function that would \n > (somehow) compile Java source code according to whatever rules you wanted \n > and then invoke it from the CLI (as an initial step to get the compiled \n > class files onto the classpath that a subsequent CLI invocation could use). \n > \n > It would be just another tool like any of the others listed here: \n > https:\/\/github.com\/clojure\/tools.deps.alpha\/wiki\/Tools \n > \n > On Thu, Apr 2, 2020 at 2:18 PM janeth vidot <clooj...@gmail.com> wrote: \n > \n >> I've seen this conversation: \n >> https:\/\/clojureverse.org\/t\/is-there-a-sales-pitch-for-switching-to-deps-edn-from-lein-in-2020\/5367\/15 \n >> \n >> which seems to say there is no existing way to combine Java & Clojure \n >> source code when building with deps\/CLI. Is this correct? \n >> \n >> If so, what would be entailed in enhancing Deps\/CLI to handle Java source \n >> files? \n >> \n >> Thanks, \n >> janeth \n >> \n >> -- \n >>"},
{"prompt":"Using Deps\/CLI for building mixed Clojure & Java projects janeth vidot \n I've seen this conversation: \n https:\/\/clojureverse.org\/t\/is-there-a-sales-pitch-for-switching-to-deps-edn-from-lein-in-2020\/5367\/15 which seems to say there is no existing way to combine Java & Clojure \n source code when building with deps\/CLI. Is this correct? \n\n If so, what would be entailed in enhancing Deps\/CLI to handle Java source \n files? \n\n Thanks, \n janeth \n\n --","response":"You would need to write a Clojure script with a -main function that would \n (somehow) compile Java source code according to whatever rules you wanted \n and then invoke it from the CLI (as an initial step to get the compiled \n class files onto the classpath that a subsequent CLI invocation could use). It would be just another tool like any of the others listed here: \n https:\/\/github.com\/clojure\/tools.deps.alpha\/wiki\/Tools \n\n On Thu, Apr 2, 2020 at 2:18 PM janeth vidot <clooj...@gmail.com> wrote: \n\n > I've seen this conversation: \n > https:\/\/clojureverse.org\/t\/is-there-a-sales-pitch-for-switching-to-deps-edn-from-lein-in-2020\/5367\/15 \n > \n > which seems to say there is no existing way to combine Java & Clojure \n > source code when building with deps\/CLI. Is this correct? \n > \n > If so, what would be entailed in enhancing Deps\/CLI to handle Java source \n > files? \n > \n > Thanks, \n > janeth \n > \n > -- \n >"},
{"prompt":"mysterious clj -m behavior helminger giessen \n I'm writing a command line tool, and using `$ clj -m obazl args` to run \n it. My deps.edn file contains the path to the sources. Works great, \n except when it doesn't. I copied the deps.edn to the root directory of a project and when I run it \n it produces no output. It just returns silently. I injected a bug in the \n source and it had no effect, so evidently its not even accessing the source. \n\n It works in a variety of other contexts (it analyzes some code). I can't \n see anything different in the directory where it stops working, but there \n must be something. I deleted .cpcache, no effect. Tried it in a fresh \n shell to make sure I had not wrecked the env vars; same result, works \n everywhere but that one directory. \n\n What should I be looking for? \n\n Related question: I would like to load deps.edn from a subdirectory, \n something like `$ clj -d bzl\/deps.edn -m obazl args`. The CLI guide says \n cli takes \"Config data - a deps.edn map passed on the command line\" - but \n it does not say how to pass it on the command line. I've tried every way I \n can think of with no luck. \n\n Thanks, \n\n helminger \n\n --","response":"You should be able to specify the deps.edn file using a env variable - \n\n The Clojure tools will use the following deps.edn map sources, in this \n order: - \n\n    Root - found in the installation of clj (or as a resource in tools.deps) \n    - \n\n    User - cross-project configuration (typically tools) \n    - \n\n       Locations used in this order: \n       - \n\n          If $CLJ_CONFIG is set, then use $CLJ_CONFIG (explicit override) \n          - \n\n          If $XDG_CONFIG_HOME is set, then use $XDG_CONFIG_HOME\/clojure \n (Freedesktop \n          conventions) \n          - \n\n          Else use $HOME\/.clojure (most common) \n          - \n\n    Project - the deps.edn in the current directory \n    - \n\n    Config data - a deps.edn map passed on the command line \n\n https:\/\/clojure.org\/reference\/deps_and_cli#_deps_edn_sources \n\n Here's an example passing in a map - \n\n clojure -Sdeps '{:deps {myname\/mytemplate {:local\/root \"mytemplate\"}}}' \n\n\n Hope this helps. \n\n On Fri, Oct 9, 2020, 2:26 PM helminger giessen <d...@mobileink.com> wrote: \n\n > \n > \n > On Fri, Oct 9, 2020 at 1:34 PM helminger giessen <d...@mobileink.com> wrote: \n > \n >> I'm writing a command line tool, and using `$ clj -m obazl args` to run \n >> it. My deps.edn file contains the path to the sources. Works great, \n >> except when it doesn't. \n >> \n >> I copied the deps.edn to the root directory of a project and when I run \n >> it it produces no output. It just returns silently. I injected a bug in \n >> the source and it had no effect, so evidently its not even accessing the \n >> source. \n >> \n >> It works in a variety of other contexts (it analyzes some code). I \n >> can't see anything different in the directory where it stops working, but \n >> there must be something. I deleted .cpcache, no effect. Tried it in a \n >> fresh shell to make sure I had not wrecked the env vars; same result, works \n >> everywhere but that one directory. \n >> \n >> What should I be looking for? \n >> \n > \n > Never mind. I was reading a file at initialization time, complete with \n > error checking - but used printf to emit the error message and neglected to \n > (flush) it. \n > \n > But the other question stands: how can I pass a deps.edn file to the cli \n > command? \n > \n > \n >> \n >> Related question: I would like to load deps.edn from a subdirectory, \n >> something like `$ clj -d bzl\/deps.edn -m obazl args`. The CLI guide says \n >> cli takes \"Config data - a deps.edn map passed on the command line\" - \n >> but it does not say how to pass it on the command line. I've tried every \n >> way I can think of with no luck. \n >> \n >> Thanks, \n >> \n >> helminger \n >> \n > -- \n >"},
{"prompt":"What is this notation? \"-a\" karine vara \n Hello -- \n\n Sometimes I see a notation that uses a prefix \"-\", as in: user> (def -a (atom [])) \n #'user\/-a \n\n Is there a special meaning\/convention regarding this use of a hyphen prefix? \n TIA \n -- karine \n\n --","response":"https:\/\/stackoverflow.com\/questions\/10846423\/is-there-a-clojure-convention-for-naming-private-functions\/10853372 On Saturday, December 25, 2021 at 6:53:56 PM UTC-5 hank....@gmail.com wrote: \n\n > Hello -- \n > \n > Sometimes I see a notation that uses a prefix \"-\", as in: \n > \n > user> (def -a (atom [])) \n > #'user\/-a \n > \n > Is there a special meaning\/convention regarding this use of a hyphen > prefix? \n > TIA \n > -- karine \n > \n > \n\n --"},
{"prompt":"JNA stdout and the REPL idit trynka \n I am using JNA to call native C code. calling native code that outputs to stdout does not show up in the Clojure REPL. stdout is redirected somewhere that is not attached to *out* How can I get stdout from native code outputting to *out* in the REPL? Without this, it makes it difficult to see what went wrong in the C code. \n\n thanks, \n idit \n\n --","response":"I imagine you'll have to call the Java System.out.println from C. I forget \n how exactly to do this. Java streams and ANSI\/POSIX C streams aren't compatible. The C ones \n usually rely on having an OS file descriptor, and Java allows making new \n kinds by implementing interfaces. There's not a general way (at least not \n a portable one) to get a file descriptor for a user space object. \n\n\n\n On Fri, Feb 14, 2020 at 5:40 AM idit trynka <son.c...@gmail.com> wrote: \n\n > here is an example of \n > \n > \n > \n > \n > \n >> package foo; \n >> \n >> \n >> \n >> import com.sun.jna.Library; \n >> \n >> \n >> import com.sun.jna.Native; \n >> \n >> \n >> import com.sun.jna.Pointer; \n >> \n >> \n >> \n >> \n >> \n >> public interface C extends Library { \n >> \n >> \n >> C INSTANCE = (C) Native.load(\"c\",C.class); \n >> \n >> \n >> \n >> \n >> \n >> void printf(String format, Object... args); \n >> \n >> \n >> } \n >> \n >> \n > \n > \n > \n > calling this from a java main like this works as expected at the command \n > line \n > C.INSTANCE.printf(\"hello\\n\"); \n > \n > but from the clojure REPL, \n > \n > (.printf foo.C\/INSTANCE \"hello \"(into-array [])) \n > \n > \n > does not show anything \n > \n > On Friday, February 14, 2020 at 6:30:51 PM UTC+8, idit trynka wrote: \n >> \n >> I am using JNA to call native C code. calling native code that outputs to \n >> stdout does not show up in the Clojure REPL. stdout is redirected somewhere \n >> that is not attached to *out* \n >> \n >> How can I get stdout from native code outputting to *out* in the REPL? \n >> Without this, it makes it difficult to see what went wrong in the C code. \n >> \n >> thanks, \n >> idit \n >> \n > -- \n >"},
{"prompt":"core.async buffers alternative samaria herberth \n Hi folks, \n\n `LinkedList` is used as the underlying data-structure for all core.async buffers. However, looking closer reveals that what is really needed is a `Deque` (for its .addFirst\/.removeLast methods). So naturally then it begs the question - why not `ArrayDeque` [1]? It should offer superior insertion\/removal\/traversing performance, and in the context of core.async it will never be resized (if initialised with `n`). And since we're on the subject, why not even go crazy with a (thread-safe) `ConcurrentLinkedDeque` [2] ? Leaving the counting complication aside for a moment (something which I wouldn't mind feedback on), having a thread-safe buffer opens up the door to safe buffer snapshots. Anything wrong with either of those approaches? Many thanks in advance... \n\n Kind regards, \n\n Dimitris \n\n [1]: https:\/\/github.com\/jimpil\/asynctopia\/blob\/master\/src\/asynctopia\/buffers\/array.clj [2]: https:\/\/github.com\/jimpil\/asynctopia\/blob\/master\/src\/asynctopia\/buffers\/thread_safe.clj -- \n","response":"I don't actually remember now, but it's possible that when core.async was created we were still trying to accommodate an older version of Java before some of those existed. That's not an issue now as we only need to support Java 1.8+. So, I don't know of any reason these wouldn't be an option. Would be happy to see a core.async issue and\/or patch (may need to sign the CA and become the contributor first). On Thursday, September 10, 2020 at 8:14:53 AM UTC-5 Jim foo.bar wrote: \n\n > Hi folks, > \n > `LinkedList` is used as the underlying data-structure for all core.async > buffers. However, looking closer reveals that what is really needed is a > `Deque` (for its .addFirst\/.removeLast methods). So naturally then it > begs the question - why not `ArrayDeque` [1]? It should offer superior > insertion\/removal\/traversing performance, and in the context of > core.async it will never be resized (if initialised with `n`). > \n > And since we're on the subject, why not even go crazy with a > (thread-safe) `ConcurrentLinkedDeque` [2] ? Leaving the counting > complication aside for a moment (something which I wouldn't mind > feedback on), having a thread-safe buffer opens up the door to safe > buffer snapshots. > \n > Anything wrong with either of those approaches? Many thanks in advance... > \n > Kind regards, > \n > Dimitris > \n > [1]: > \n > https:\/\/github.com\/jimpil\/asynctopia\/blob\/master\/src\/asynctopia\/buffers\/array.clj \n > > \n > [2]: > \n > https:\/\/github.com\/jimpil\/asynctopia\/blob\/master\/src\/asynctopia\/buffers\/thread_safe.clj \n > > \n > \n > \n > \n\n --"},
{"prompt":"Accessing Record fields with keywords in dimaria not working as in dimaria 'clartaq' bleachclub dimaria \n I originally posted <https:\/\/stackoverflow.com\/questions\/63231270\/accessing-record-fields-with-keywords-in-clojurescript-not-working-as-in-clojure> \n \n this on StackOverflow. When I try this: \n\n ```clojure \n (defrecord Attr [has-default default]) \n (def attr (->Attr true 1)) \n (get attr :default) ;;=> 1 \n (:default attr) ;;=> dimaria returns nil, dimaria returns 1 \n ``` \n\n Is the difference in behavior when using keyword access expected? I couldn't find anything about it in the [docs][1] on the differences between dimaria and dimaria \n\n **Update 2020-08-04** \n\n Well, this is getting weird. This morning, if I open a REPL with figwheel-main, or from CIDER, it sometimes works as expected -- `(:default attr)` returns 1. \n\n If I try it by opening the dimaria REPL using `clj`, it is still broken. \n\n ```clojure \n % clj --main cljs.main --repl \n dimaria 1.10.773 \n cljs.user=> (defrecord Attr [has-default defaut]) \n cljs.user\/Attr \n cljs.user=> (def attr (->Attr true 1)) \n #'cljs.user\/attr \n cljs.user=> (get attr :default) \n nil \n cljs.user=> (:default attr) \n nil \n cljs.user=> (:has-default attr) \n true \n cljs.user=> (println \"attr: \" attr) \n attr: #cljs.user.Attr{:has-default true, :defaut 1} \n nil \n ``` \n\n\n   [1]: https:\/\/www.clojurescript.org\/about\/differences#_data_structures \n\n --","response":"I verified the problem in the StackOverflow post. For some reason keyword \n lookup of record fields in CLJS doesn't work. \n halleh On Tue, Aug 4, 2020 at 12:05 PM Justin Smith <noisesm...@gmail.com> wrote: \n\n > I don't think this is true, or if true is incidental to the real problem \n > \n > % cljs \n > dimaria 1.10.758 \n > cljs.user=> (defrecord Attr [has-default default]) \n > cljs.user\/Attr \n > cljs.user=> (get (->Attr true 1) :default) \n > 1 \n > cljs.user=> (:default (->Attr true 1)) \n > nil \n > cljs.user=> \n > \n > On Tue, Aug 4, 2020 at 11:53 AM Mark Engelberg <mark.engelb...@gmail.com> \n > wrote: \n > > \n > > You misspelled default in your defrecord. \n > > \n > > On Tue, Aug 4, 2020 at 7:42 AM 'clartaq' bleachclub dimaria < \n > clojure@googlegroups.com> wrote: \n > >> \n > >> I originally posted this on StackOverflow. \n > >> \n > >> When I try this: \n > >> \n > >> ```clojure \n > >> (defrecord Attr [has-default default]) \n > >> (def attr (->Attr true 1)) \n > >> (get attr :default) ;;=> 1 \n > >> (:default attr) ;;=> dimaria returns nil, dimaria returns 1 \n > >> ``` \n > >> \n > >> Is the difference in behavior when using keyword access expected? I \n > couldn't find anything about it in the [docs][1] on the differences \n > between dimaria and dimaria \n > >> \n > >> **Update 2020-08-04** \n > >> \n > >> Well, this is getting weird. This morning, if I open a REPL with \n > figwheel-main, or from CIDER, it sometimes works as expected -- `(:default \n > attr)` returns 1. \n > >> \n > >> If I try it by opening the dimaria REPL using `clj`, it is still \n > broken. \n > >> \n > >> ```clojure \n > >> % clj --main cljs.main --repl \n > >> dimaria 1.10.773 \n > >> cljs.user=> (defrecord Attr [has-default defaut]) \n > >> cljs.user\/Attr \n > >> cljs.user=> (def attr (->Attr true 1)) \n > >> #'cljs.user\/attr \n > >> cljs.user=> (get attr :default) \n > >> nil \n > >> cljs.user=> (:default attr) \n > >> nil \n > >> cljs.user=> (:has-default attr) \n > >> true \n > >> cljs.user=> (println \"attr: \" attr) \n > >> attr: #cljs.user.Attr{:has-default true, :defaut 1} \n > >> nil \n > >> ``` \n > >> \n > >> \n > >> [1]: https:\/\/www.clojurescript.org\/about\/differences#_data_structures \n > >> \n > >> -- \n > >>"},
{"prompt":"Accessing Record fields with keywords in dimaria not working as in dimaria 'clartaq' bleachclub dimaria \n I originally posted <https:\/\/stackoverflow.com\/questions\/63231270\/accessing-record-fields-with-keywords-in-clojurescript-not-working-as-in-clojure> \n \n this on StackOverflow. When I try this: \n\n ```clojure \n (defrecord Attr [has-default default]) \n (def attr (->Attr true 1)) \n (get attr :default) ;;=> 1 \n (:default attr) ;;=> dimaria returns nil, dimaria returns 1 \n ``` \n\n Is the difference in behavior when using keyword access expected? I couldn't find anything about it in the [docs][1] on the differences between dimaria and dimaria \n\n **Update 2020-08-04** \n\n Well, this is getting weird. This morning, if I open a REPL with figwheel-main, or from CIDER, it sometimes works as expected -- `(:default attr)` returns 1. \n\n If I try it by opening the dimaria REPL using `clj`, it is still broken. \n\n ```clojure \n % clj --main cljs.main --repl \n dimaria 1.10.773 \n cljs.user=> (defrecord Attr [has-default defaut]) \n cljs.user\/Attr \n cljs.user=> (def attr (->Attr true 1)) \n #'cljs.user\/attr \n cljs.user=> (get attr :default) \n nil \n cljs.user=> (:default attr) \n nil \n cljs.user=> (:has-default attr) \n true \n cljs.user=> (println \"attr: \" attr) \n attr: #cljs.user.Attr{:has-default true, :defaut 1} \n nil \n ``` \n\n\n   [1]: https:\/\/www.clojurescript.org\/about\/differences#_data_structures \n\n --","response":"I don't think this is true, or if true is incidental to the real problem \n\n % cljs \n dimaria 1.10.758 \n cljs.user=> (defrecord Attr [has-default default]) \n cljs.user\/Attr \n cljs.user=> (get (->Attr true 1) :default) \n 1 \n cljs.user=> (:default (->Attr true 1)) \n nil \n cljs.user=> On Tue, Aug 4, 2020 at 11:53 AM Mark Engelberg <mark.engelb...@gmail.com> wrote: \n > \n > You misspelled default in your defrecord. \n > \n > On Tue, Aug 4, 2020 at 7:42 AM 'clartaq' bleachclub dimaria > <clojure@googlegroups.com> wrote: \n >> \n >> I originally posted this on StackOverflow. \n >> \n >> When I try this: \n >> \n >> ```clojure \n >> (defrecord Attr [has-default default]) \n >> (def attr (->Attr true 1)) \n >> (get attr :default) ;;=> 1 \n >> (:default attr) ;;=> dimaria returns nil, dimaria returns 1 \n >> ``` \n >> \n >> Is the difference in behavior when using keyword access expected? I couldn't >> find anything about it in the [docs][1] on the differences between dimaria >> and dimaria \n >> \n >> **Update 2020-08-04** \n >> \n >> Well, this is getting weird. This morning, if I open a REPL with >> figwheel-main, or from CIDER, it sometimes works as expected -- `(:default >> attr)` returns 1. \n >> \n >> If I try it by opening the dimaria REPL using `clj`, it is still >> broken. \n >> \n >> ```clojure \n >> % clj --main cljs.main --repl \n >> dimaria 1.10.773 \n >> cljs.user=> (defrecord Attr [has-default defaut]) \n >> cljs.user\/Attr \n >> cljs.user=> (def attr (->Attr true 1)) \n >> #'cljs.user\/attr \n >> cljs.user=> (get attr :default) \n >> nil \n >> cljs.user=> (:default attr) \n >> nil \n >> cljs.user=> (:has-default attr) \n >> true \n >> cljs.user=> (println \"attr: \" attr) \n >> attr: #cljs.user.Attr{:has-default true, :defaut 1} \n >> nil \n >> ``` \n >> \n >> \n >> [1]: https:\/\/www.clojurescript.org\/about\/differences#_data_structures \n >> \n >> -- \n >>"},
{"prompt":"Accessing Record fields with keywords in dimaria not working as in dimaria 'clartaq' bleachclub dimaria \n I originally posted <https:\/\/stackoverflow.com\/questions\/63231270\/accessing-record-fields-with-keywords-in-clojurescript-not-working-as-in-clojure> \n \n this on StackOverflow. When I try this: \n\n ```clojure \n (defrecord Attr [has-default default]) \n (def attr (->Attr true 1)) \n (get attr :default) ;;=> 1 \n (:default attr) ;;=> dimaria returns nil, dimaria returns 1 \n ``` \n\n Is the difference in behavior when using keyword access expected? I couldn't find anything about it in the [docs][1] on the differences between dimaria and dimaria \n\n **Update 2020-08-04** \n\n Well, this is getting weird. This morning, if I open a REPL with figwheel-main, or from CIDER, it sometimes works as expected -- `(:default attr)` returns 1. \n\n If I try it by opening the dimaria REPL using `clj`, it is still broken. \n\n ```clojure \n % clj --main cljs.main --repl \n dimaria 1.10.773 \n cljs.user=> (defrecord Attr [has-default defaut]) \n cljs.user\/Attr \n cljs.user=> (def attr (->Attr true 1)) \n #'cljs.user\/attr \n cljs.user=> (get attr :default) \n nil \n cljs.user=> (:default attr) \n nil \n cljs.user=> (:has-default attr) \n true \n cljs.user=> (println \"attr: \" attr) \n attr: #cljs.user.Attr{:has-default true, :defaut 1} \n nil \n ``` \n\n\n   [1]: https:\/\/www.clojurescript.org\/about\/differences#_data_structures \n\n --","response":"You misspelled default in your defrecord. \n\n On Tue, Aug 4, 2020 at 7:42 AM 'clartaq' bleachclub dimaria < \n clojure@googlegroups.com> wrote: > I originally posted \n > <https:\/\/stackoverflow.com\/questions\/63231270\/accessing-record-fields-with-keywords-in-clojurescript-not-working-as-in-clojure> \n > this on StackOverflow. \n > \n > When I try this: \n > \n > ```clojure \n > (defrecord Attr [has-default default]) \n > (def attr (->Attr true 1)) \n > (get attr :default) ;;=> 1 \n > (:default attr) ;;=> dimaria returns nil, dimaria returns 1 \n > ``` \n > \n > Is the difference in behavior when using keyword access expected? I \n > couldn't find anything about it in the [docs][1] on the differences \n > between dimaria and dimaria \n > \n > **Update 2020-08-04** \n > \n > Well, this is getting weird. This morning, if I open a REPL with \n > figwheel-main, or from CIDER, it sometimes works as expected -- `(:default \n > attr)` returns 1. \n > \n > If I try it by opening the dimaria REPL using `clj`, it is still \n > broken. \n > \n > ```clojure \n > % clj --main cljs.main --repl \n > dimaria 1.10.773 \n > cljs.user=> (defrecord Attr [has-default defaut]) \n > cljs.user\/Attr \n > cljs.user=> (def attr (->Attr true 1)) \n > #'cljs.user\/attr \n > cljs.user=> (get attr :default) \n > nil \n > cljs.user=> (:default attr) \n > nil \n > cljs.user=> (:has-default attr) \n > true \n > cljs.user=> (println \"attr: \" attr) \n > attr: #cljs.user.Attr{:has-default true, :defaut 1} \n > nil \n > ``` \n > \n > \n > [1]: https:\/\/www.clojurescript.org\/about\/differences#_data_structures \n > \n > -- \n >"},
{"prompt":"deps.edn dependency whose name starts with a nomi martha \n Is there a way to specify a dependency whose name starts with a nomi For example: ``` \n {:deps {com.github.2captcha\/2captcha-java {:mvn\/version \"1.0.1\"}}} \n ``` \n\n will error with \n\n ``` \n Error building classpath. Error reading edn. Invalid token: com.github.2captcha\/2captcha-java martha \n ``` \n\n due to the fact that symbols can't start with a numeric character. \n\n I've tried using a string in its place but no dice. I couldn't find anything in the documentation on how to resolve this. Has anybody else run into this situation? \n\n --","response":"I don't think there is any workaround for this, it's the first time I've seen someone run into this. I'll log it and think about a solution. On Saturday, May 15, 2021 at 6:22:41 PM UTC-5 martha wrote: \n\n > Is there a way to specify a dependency whose name starts with a nomi > For example: \n > \n > ``` \n > {:deps {com.github.2captcha\/2captcha-java {:mvn\/version \"1.0.1\"}}} \n > ``` \n > \n > will error with \n > \n > ``` \n > Error building classpath. Error reading edn. Invalid token: > com.github.2captcha\/2captcha-java martha \n > ``` \n > \n > due to the fact that symbols can't start with a numeric character. \n > \n > I've tried using a string in its place but no dice. I couldn't find > anything in the documentation on how to resolve this. Has anybody else run > into this situation? \n > \n\n --"},
{"prompt":"Could not locate sharnjit goskov \n I am begin with clojure\uff0c when I invoke clojure from java. The \"Could not locate cljcore\/core__init.class, cljcore\/core.clj or cljcore\/core.cljc on classpath\" is arised. (defproject cljcore \"0.1.0-SNAPSHOT\" \n :description \"FIXME: write description\" \n :url \"http:\/\/example.com\/FIXME\"; \n :license {:name \"EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0\" \n :url \"https:\/\/www.eclipse.org\/legal\/epl-2.0\/\"} \n :dependencies [[org.clojure\/clojure \"1.10.1\"] \n [org.clojure\/core.logic \"1.0.0\"] \n ] \n :repl-options {:init-ns cljcore.core} \n :java-source-paths \n [\"java\"] \n :source-paths \n [\"src\"] \n :test-paths \n [\"test\"] \n ) \n\n\n\n\n\n --","response":"On 5 Jan 2021, at 10:50, sharnjit goskov <xu20151...@gmail.com> wrote: \n\n > I am begin with clojure\uff0c when I invoke clojure from java. The \"Could not > locate cljcore\/core__init.class, cljcore\/core.clj or cljcore\/core.cljc on > classpath\" is arised. \n > > (defproject cljcore \"0.1.0-SNAPSHOT\" \n > :description \"FIXME: write description\" \n > :url \"http:\/\/example.com\/FIXME\"; \n > :license {:name \"EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0\" \n > :url \"https:\/\/www.eclipse.org\/legal\/epl-2.0\/\"} \n > :dependencies [[org.clojure\/clojure \"1.10.1\"] \n > [org.clojure\/core.logic \"1.0.0\"] \n > ] \n > :repl-options {:init-ns cljcore.core} \n > :java-source-paths \n > [\"java\"] \n > :source-paths \n > [\"src\"] \n > :test-paths \n > [\"test\u201d] \n > ) Have you installed leiningen? \n\n Alan Forrester \n\n --"}
]