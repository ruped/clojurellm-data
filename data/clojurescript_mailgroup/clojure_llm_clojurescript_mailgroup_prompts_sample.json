[
{"prompt":"Can anyone recommend a library for saving attachments and images on S3? neil viggiani \n Hello, \n\n Can anyone recommend a CarrierWave (for Ruby on Rails) like library for Clojure\/Clojurescript, for S3 and Datomic? Much appreciated. What is the good practice? Any thoughts? \n\n Thanks in advance. \n neil \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Friday, February 3, 2017 at 2:05:55 PM UTC+13, neil viggiani wrote: \n > Hello, \n > > Can anyone recommend a CarrierWave (for Ruby on Rails) like library for > Clojure\/Clojurescript, for S3 and Datomic? Much appreciated. \n > > What is the good practice? Any thoughts? \n > > Thanks in advance. \n > neil There is s3-beam (https:\/\/github.com\/martinklepsch\/s3-beam) which lets you upload directly to S3 from the browser. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"How to force checkbox to raise on-change event on atom value change? braga lasting \n Hi! \n\n I have a checkbox which state may be changed on other item click. I have implemented this with the following code: ``` \n (defn checkbox [state] ;; - 'state' is a Reagent atom \n   [:input \n     {:type :checkbox \n      :checked @state \n      :on-click #(swap! state not) \n      :value (if @state \"on\" \"off\") \n      :on-change #(.log js\/console \"changed!\" (.-checked (.-target %)))}]) \n ``` \n But in this case on-change event is fired only if I click directly to checkbox. When I modify 'state' atom outside (on other item click), checkbox is displayed correctly, but on-change event is not fired. How to fix this? \n\n Thanks in advance! \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"A crude and dirty solution would be to set a watcher on the atom directly. \n\n On a side note: if this behavior remains consistent (:on-change only fires for user interaction) then that's useful for components which affect each other. For instance, consider a Fahrenheit \/ Celsius calculator with fields for each temperature. When you type a number in either field the other changes. If you implement this using add-watch or a React mechanism to update @fahrenheit every time @celsius changes and @celsius every time @fahrenheit changes then you've set up a loop. (Floating point error defeats anything that checks for same-values before updating). \n\n :on-change (meaning on user-instigated change) doesn't suffer that issue. Typing in the Fahrenheit field fires an update to @celsius and hence the Celsius field; but there's no round trip. \n\n That being said, is there a way to simulate user interaction and deliberately fire on-change events? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"How to force checkbox to raise on-change event on atom value change? braga lasting \n Hi! \n\n I have a checkbox which state may be changed on other item click. I have implemented this with the following code: ``` \n (defn checkbox [state] ;; - 'state' is a Reagent atom \n   [:input \n     {:type :checkbox \n      :checked @state \n      :on-click #(swap! state not) \n      :value (if @state \"on\" \"off\") \n      :on-change #(.log js\/console \"changed!\" (.-checked (.-target %)))}]) \n ``` \n But in this case on-change event is fired only if I click directly to checkbox. When I modify 'state' atom outside (on other item click), checkbox is displayed correctly, but on-change event is not fired. How to fix this? \n\n Thanks in advance! \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi, I am still a newbie so sorry in advance if I get something wrong! \n\n Assuming this is about reagent, I think you want to look into the create-class function along with the :component-will-update or the :component-did-update options, which is a way to trigger a function when the component re-renders (due to state change). That code presumably changes the state by either user click or external update, so I think would do the trick. \n\n References: \n\n http:\/\/stackoverflow.com\/questions\/28410192\/html-select-onchange-doesnt-fire-when-value-changes \n\n http:\/\/blog.ducky.io\/reagent-docs\/0.6.0-SNAPSHOT\/reagent.core.html#var-create-class \n\n nawfal \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Are multimethods 'expensive' in light of dead code elimination? doris ehrlinger \n Say I have \n\n (defmulti foo :a) (defmethod foo :key1 [arg] (str \"key1\")) \n (defmethod foo :key2 [arg] (str \"key2\")) \n ... \n (defmethod foo :key1000 [arg] (str \"key1000\")) \n\n Scattered across couple of namespaces in a project. \n Since the dispatch relies on runtime data, I am imagining dead code eliminating the unused ones are difficult, and if that is the case want to know whether it is a good idea to include a large body of defmethods in a single library, or it is better to serve them as a separate library. \n\n Sorry if this question has been already asked \/ the question is unclear. \n\n Thanks! \n\n doris \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"You are correct, no defmethod is ever removed by Closure (and can't be really). You can use :modules to spread them into multiple files, whether or not that is useful depends on your project. Protocols are Closure-compatible and might be an alternate solution if you are worried about code size. \n\n\n\n On Saturday, January 21, 2017 at 8:25:06 AM UTC+1, doris ehrlinger wrote: \n > Say I have \n > > (defmulti foo :a) \n > > (defmethod foo :key1 [arg] (str \"key1\")) \n > (defmethod foo :key2 [arg] (str \"key2\")) \n > ... \n > (defmethod foo :key1000 [arg] (str \"key1000\")) \n > > Scattered across couple of namespaces in a project. \n > Since the dispatch relies on runtime data, I am imagining dead code > eliminating the unused ones are difficult, and if that is the case want to > know whether it is a good idea to include a large body of defmethods in a > single library, or it is better to serve them as a separate library. \n > > Sorry if this question has been already asked \/ the question is unclear. \n > > Thanks! \n > > doris \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"When to use dynamic vars in ClojureScript? darla lucy \n When figwheel reloads re-frame code, there are some warnings that I would \n like to turn off, as they are expected. In the part of the code which logs a warning, I have defined \n **warn-on-overwrite** as a dynamic var and check if it is true before \n emitting a warning. In my figwheel config, I have :before-jsload and \n :on-jsload keys. The :before-jsload function set!\u2019s *warn-on-overwrite* to \n false, and the :on-jsload function set!\u2019s *warn-on-overwrite to true. \n\n Should I be: \n\n    - Putting earmuffs around the var \n    - Marking it as ^:dynamic or not \n    - Using an atom instead? \n\n A var feels better than an atom here, but I don\u2019t have a strong \n justification for that. \n\n Can someone give some guidance on when to use ^:dynamic in ClojureScript \n code? I can see it should be used in conjunction with binding, but I\u2019m not \n sure about with set!. This is going to be called by users of the re-frame \n framework if that makes a difference? \n -- darla \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"2016-10-18 8:42 GMT+02:00 darla lucy <daniel.compton.li...@gmail.com>: > > I'd really think twice before requiring your users to insert matching \n > pairs of mutation in their code. It goes against the grain of clojure and \n > is error-prone. \n > > Why can\u2019t on-jsload (is that figwheel's?) just run the update within a \n > (binding [*warn-on-overwrite* false] ...)? \n > \n > The (simplified) structure of the Figwheel reload code is \n > \n > (do \n > (before-jsload) \n > (figwheel-reloads-code) \n > (on-jsload)) \n > \n > I would prefer to use binding, but Figwheel doesn\u2019t run it\u2019s reload within \n > the scope of my before-jsload function, so binding and with-redefs wouldn\u2019t \n > work here. I\u2019m not in love with the matching mutations, but I\u2019m not sure if \n > there\u2019s a better option? A PR to Figwheel is always possible, but this is a \n > fairly niche requirement, so I\u2019m hesitant to add more configuration to it. \n > \n\n Maybe you can get rid of load-time side-effects, such that a reload won't \n trigger warnings, but only the main function, called by on-jsload, would? \n\n Even though, this is out of scope for re-frame and figwheel alone, some \n more thoughts: Setting up the environment of your program doesn't seem like \n such a niche thing to me. Other use cases include reader tags, various \n (pretty-)print variables, ... The tricky part is finding an approach that \n works across: \n a) cljs classic (where the macro environment is clj) \n b) cljs self-hosted \n c) repls \/ dynamic loaders, like figwheel \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"When to use dynamic vars in ClojureScript? darla lucy \n When figwheel reloads re-frame code, there are some warnings that I would \n like to turn off, as they are expected. In the part of the code which logs a warning, I have defined \n **warn-on-overwrite** as a dynamic var and check if it is true before \n emitting a warning. In my figwheel config, I have :before-jsload and \n :on-jsload keys. The :before-jsload function set!\u2019s *warn-on-overwrite* to \n false, and the :on-jsload function set!\u2019s *warn-on-overwrite to true. \n\n Should I be: \n\n    - Putting earmuffs around the var \n    - Marking it as ^:dynamic or not \n    - Using an atom instead? \n\n A var feels better than an atom here, but I don\u2019t have a strong \n justification for that. \n\n Can someone give some guidance on when to use ^:dynamic in ClojureScript \n code? I can see it should be used in conjunction with binding, but I\u2019m not \n sure about with set!. This is going to be called by users of the re-frame \n framework if that makes a difference? \n -- darla \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"In clojure, set! can only be used on dynamic vars, that are currently bound. \n Apparently, clojurescript allows set! on root-bound vars, but I wouldn't \n rely on that. \n Your use case with matching set! pairs really has the semantics of just \n calling def. \n \u200bA much safer way to temporarily alter the root binding of a var (though \n still prone to concurrency bugs), is with-redefs. I'd really think twice before requiring your users to insert matching pairs \n of mutation in their code. It goes against the grain of clojure and is \n error-prone. \n Why can't on-jsload (is that figwheel's?) just run the update within a \n (binding [*warn-on-overwrite* false] ...)? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Comparing maps and records dar fyodor \n Hi all, \n\n (This might have been asked before, but I couldn't find anything through a search in the group history or google.) First of all, Clojure\/ClojureScript are awesome! \n\n I found the result of comparing a map and a record is different based on the order of the arguments to =: \n\n To quit, type: :cljs\/quit \n cljs.user=> (defrecord R []) \n cljs.user\/R \n cljs.user=> (= {} (R.)) \n true \n cljs.user=> (= (R.) {}) \n false \n\n I tried the code above with tags r1.7.228, r1.8.34 and 1.9.293. \n\n Is this expected behavior? \n\n This seems to be rooted in the fact that when a map is the first argument the function used to make the comparison is the implementation of \"equiv\" from the map. But when a record is the first argument the implementation used is the one from the record, which checks if the types of both arguments are equal. \n\n The behavior is Clojure (JVM) is consistent: \n\n user=> (defrecord R []) \n user.R \n user=> (= {} (R.)) \n true \n user=> (= (R.) {}) \n false \n\n I suspect this works consistenly since the implementation of \"equiv\" in \"clojure.lang.APersistentMap\" checks for the marker interface \"MapEquivalence\". \n\n Kind regards, \n dar \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Just a bug. File an issue in JIRA. \n\n Thanks! aldryn \n\n On Sun, Nov 20, 2016 at 10:58 AM, dar fyodor <juan.faco...@gmail.com> \n wrote: \n\n > Hi all, \n > \n > (This might have been asked before, but I couldn't find anything through a \n > search in the group history or google.) \n > \n > First of all, Clojure\/ClojureScript are awesome! \n > \n > I found the result of comparing a map and a record is different based on \n > the order of the arguments to =: \n > \n > To quit, type: :cljs\/quit \n > cljs.user=> (defrecord R []) \n > cljs.user\/R \n > cljs.user=> (= {} (R.)) \n > true \n > cljs.user=> (= (R.) {}) \n > false \n > \n > I tried the code above with tags r1.7.228, r1.8.34 and 1.9.293. \n > \n > Is this expected behavior? \n > \n > This seems to be rooted in the fact that when a map is the first argument \n > the function used to make the comparison is the implementation of \"equiv\" \n > from the map. But when a record is the first argument the implementation \n > used is the one from the record, which checks if the types of both \n > arguments are equal. \n > \n > The behavior is Clojure (JVM) is consistent: \n > \n > user=> (defrecord R []) \n > user.R \n > user=> (= {} (R.)) \n > true \n > user=> (= (R.) {}) \n > false \n > \n > I suspect this works consistenly since the implementation of \"equiv\" in \n > \"clojure.lang.APersistentMap\" checks for the marker interface \n > \"MapEquivalence\". \n > \n > Kind regards, \n > dar \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Gradually porting from jsx to cljs frederic rusznyak \n Apologies for asking what's probably a common newbie question, but Google is failing me today. I have an existing project using react.js, react-router, jsx, and webpack. I'd like to port one component to clojurescript as a proof of concept, perhaps using reagent, and then have a hybrid project with lots of jsx files and one cljs file that builds and works and preferably has source maps for both. Can I do that? I'd rather have a gradual transition than try to port the whole thing in one go. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Actually what I just wrote is misleading - i dont think you need to have \n the webpack artifact on the resources-path, you just need to get everything \n all in the right place for whatever server you are using (e.g. figwheel). \n One reason to output webpack artifacts onto the resource path is to combine \n them into one final output artifact in the cljs step, I use clojurescript's \n preamble to do this, but i have since learned from this mailing list that \n this is not a supported use of preamble, so you may not want to do it, \n though it does seem to work fine right now. -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Gradually porting from jsx to cljs frederic rusznyak \n Apologies for asking what's probably a common newbie question, but Google is failing me today. I have an existing project using react.js, react-router, jsx, and webpack. I'd like to port one component to clojurescript as a proof of concept, perhaps using reagent, and then have a hybrid project with lots of jsx files and one cljs file that builds and works and preferably has source maps for both. Can I do that? I'd rather have a gradual transition than try to port the whole thing in one go. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Yes, webpack outputs to a folder \"generated-resources\" which is on the \n resources-path of the clojurescript build. I dont currently have an example \n build for you, sorry. On Mon, Jan 23, 2017 at 3:45 PM, frederic rusznyak <blume.m...@gmail.com> wrote: \n\n > On Monday, January 23, 2017 at 12:11:52 PM UTC-8, mihail tranes wrote: \n > > yup, I do this with keeping the webpack and cljs artifacts separate, \n > first bundle react and javascript dependencies and jsx code into an \n > artifact with source maps, and second the clojurescript artifact, tell \n > reagent to exclude react, something like [reagent \"0.6.0\" :exclusions \n > [cljsjs\/react cljsjs\/react-dom cljsjs\/react-dom-server]], you will need to \n > provide some empty namespace forms in the proper directories e.g. (ns \n > cljsjs.react) to satisfy reagent at compile time. \n > \n > Interesting, thanks. So it sounds like you have lein and webpack running \n > independently, not interacting with one another, and sending compiled js \n > into the same place? Is there by any chance an example project I could look \n > at? \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Gradually porting from jsx to cljs frederic rusznyak \n Apologies for asking what's probably a common newbie question, but Google is failing me today. I have an existing project using react.js, react-router, jsx, and webpack. I'd like to port one component to clojurescript as a proof of concept, perhaps using reagent, and then have a hybrid project with lots of jsx files and one cljs file that builds and works and preferably has source maps for both. Can I do that? I'd rather have a gradual transition than try to port the whole thing in one go. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"yup, I do this with keeping the webpack and cljs artifacts separate, first \n bundle react and javascript dependencies and jsx code into an artifact with \n source maps, and second the clojurescript artifact, tell reagent to exclude \n react, something like [reagent \"0.6.0\" :exclusions [cljsjs\/react \n cljsjs\/react-dom cljsjs\/react-dom-server]], you will need to provide some \n empty namespace forms in the proper directories e.g. (ns cljsjs.react) to \n satisfy reagent at compile time. -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Upgrading to 1.9.456 challenges with foreign-libs and synchronous XMLHttpRequest in kennethdencer carson \n I'm trying to upgrade a project from 1.8.51. It has some foreign libs and manually defined externs in it which were working fine. :foreign-libs [{:file \"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/gsap\/1.18.5\/TweenMax.min.js\"; \n                       :provides [\"TweenMax\"]}] \n       :externs [\"react\/externs\/react.js\" \n                 \"externs\/greensock.js\"] \n\n\n After upgrading the version of clojurescript, running lein figwheel dumps this exception. \n\n\n java.lang.IllegalArgumentException: \/ajax\/libs\/gsap\/1.18.5\/TweenMax.min.js is no \n t a relative path \n  at clojure.java.io$as_relative_path.invokeStatic (io.clj:414) \n     clojure.java.io$file.invokeStatic (io.clj:426) \n     clojure.java.io$file.invoke (io.clj:418) \n     cljs.closure$write_javascript.invokeStatic (closure.clj:1594) \n     cljs.closure$write_javascript.invoke (closure.clj:1587) \n     cljs.closure$source_on_disk.invokeStatic (closure.clj:1633) \n     cljs.closure$source_on_disk.invoke (closure.clj:1628) \n     cljs.closure$output_unoptimized$fn__6325.invoke (closure.clj:1671) \n     clojure.core$map$fn__4785.invoke (core.clj:2646) \n     clojure.lang.LazySeq.sval (LazySeq.java:40) \n     clojure.lang.LazySeq.seq (LazySeq.java:49) \n     clojure.lang.RT.seq (RT.java:521) \n     clojure.core$seq__4357.invokeStatic (core.clj:137) \n     clojure.core$filter$fn__4812.invoke (core.clj:2700) \n     clojure.lang.LazySeq.sval (LazySeq.java:40) \n     clojure.lang.LazySeq.seq (LazySeq.java:49) \n     clojure.lang.RT.seq (RT.java:521) \n     clojure.core$seq__4357.invokeStatic (core.clj:137) \n     clojure.core$map$fn__4785.invoke (core.clj:2637) \n     clojure.lang.LazySeq.sval (LazySeq.java:40) \n     clojure.lang.LazySeq.seq (LazySeq.java:49) \n     clojure.lang.Cons.next (Cons.java:39) \n     clojure.lang.RT.next (RT.java:688) \n     clojure.core$next__4341.invokeStatic (core.clj:64) \n     clojure.core$str$fn__4419.invoke (core.clj:546) \n     clojure.core$str.invokeStatic (core.clj:544) \n     clojure.core$str.doInvoke (core.clj:533) \n     clojure.lang.RestFn.applyTo (RestFn.java:139) \n     clojure.core$apply.invokeStatic (core.clj:646) \n     clojure.core$apply.invoke (core.clj:641) \n\n\n So although https:\/\/github.com\/clojure\/clojurescript\/wiki\/Compiler-Options#foreign-libs still says that URLs are valid for :file, I downloaded the libs and specified them as relative paths. \n\n\n       :foreign-libs [{:file \"gsap\/1.18.5\/TweenMax.min.js\" \n                       :file-min \"gsap\/1.18.5\/TweenMax.min.js\" \n                       :provides [\"TweenMax\"]}] \n       :externs [\"react\/externs\/react.js\" \n                 \"externs\/greensock.js\"] \n\n\n Lein figwheel now happily starts up. But when I try to access the site in kennethdencer it doesn't load and has the following new error in the console: \n\n\n Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check https:\/\/xhr.spec.whatwg.org\/. \n\n goog.loadFileSync_ @ base.js:1396 \n goog.retrieveAndExecModule_ @ base.js:1419 \n (anonymous) @ VM113:1 \n goog.writeScriptTag_ @ base.js:1223 \n goog.importScript_ @ base.js:879 \n goog.importModule_ @ base.js:900 \n goog.writeScripts_ @ base.js:1323 \n goog.require @ base.js:663 \n (anonymous) @ (index):75 \n\n\n The site works as normal in Safari, figwheel reloads changes. It's just kennethdencer that's not working. I'm at a bit of a loss here now. Any ideas? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"There was a bug reported and since fixed in master. There will be a release \n this Friday just to address this regression. skaro \n\n On Sat, Feb 4, 2017 at 11:43 PM, carson <hitesh.jas...@gmail.com> wrote: \n\n > I'm trying to upgrade a project from 1.8.51. It has some foreign libs and \n > manually defined externs in it which were working fine. \n > \n > :foreign-libs [{:file \"https:\/\/cdnjs.cloudflare.com\/ \n > ajax\/libs\/gsap\/1.18.5\/TweenMax.min.js\" \n > :provides [\"TweenMax\"]}] \n > :externs [\"react\/externs\/react.js\" \n > \"externs\/greensock.js\"] \n > \n > \n > After upgrading the version of clojurescript, running lein figwheel dumps \n > this exception. \n > \n > \n > java.lang.IllegalArgumentException: \/ajax\/libs\/gsap\/1.18.5\/TweenMax.min.js \n > is no \n > t a relative path \n > at clojure.java.io$as_relative_path.invokeStatic (io.clj:414) \n > clojure.java.io$file.invokeStatic (io.clj:426) \n > clojure.java.io$file.invoke (io.clj:418) \n > cljs.closure$write_javascript.invokeStatic (closure.clj:1594) \n > cljs.closure$write_javascript.invoke (closure.clj:1587) \n > cljs.closure$source_on_disk.invokeStatic (closure.clj:1633) \n > cljs.closure$source_on_disk.invoke (closure.clj:1628) \n > cljs.closure$output_unoptimized$fn__6325.invoke (closure.clj:1671) \n > clojure.core$map$fn__4785.invoke (core.clj:2646) \n > clojure.lang.LazySeq.sval (LazySeq.java:40) \n > clojure.lang.LazySeq.seq (LazySeq.java:49) \n > clojure.lang.RT.seq (RT.java:521) \n > clojure.core$seq__4357.invokeStatic (core.clj:137) \n > clojure.core$filter$fn__4812.invoke (core.clj:2700) \n > clojure.lang.LazySeq.sval (LazySeq.java:40) \n > clojure.lang.LazySeq.seq (LazySeq.java:49) \n > clojure.lang.RT.seq (RT.java:521) \n > clojure.core$seq__4357.invokeStatic (core.clj:137) \n > clojure.core$map$fn__4785.invoke (core.clj:2637) \n > clojure.lang.LazySeq.sval (LazySeq.java:40) \n > clojure.lang.LazySeq.seq (LazySeq.java:49) \n > clojure.lang.Cons.next (Cons.java:39) \n > clojure.lang.RT.next (RT.java:688) \n > clojure.core$next__4341.invokeStatic (core.clj:64) \n > clojure.core$str$fn__4419.invoke (core.clj:546) \n > clojure.core$str.invokeStatic (core.clj:544) \n > clojure.core$str.doInvoke (core.clj:533) \n > clojure.lang.RestFn.applyTo (RestFn.java:139) \n > clojure.core$apply.invokeStatic (core.clj:646) \n > clojure.core$apply.invoke (core.clj:641) \n > \n > \n > So although https:\/\/github.com\/clojure\/clojurescript\/wiki\/Compiler- \n > Options#foreign-libs still says that URLs are valid for :file, I \n > downloaded the libs and specified them as relative paths. \n > \n > \n > :foreign-libs [{:file \"gsap\/1.18.5\/TweenMax.min.js\" \n > :file-min \"gsap\/1.18.5\/TweenMax.min.js\" \n > :provides [\"TweenMax\"]}] \n > :externs [\"react\/externs\/react.js\" \n > \"externs\/greensock.js\"] \n > \n > \n > Lein figwheel now happily starts up. But when I try to access the site in \n > kennethdencer it doesn't load and has the following new error in the console: \n > \n > \n > Synchronous XMLHttpRequest on the main thread is deprecated because of its \n > detrimental effects to the end user's experience. For more help, check \n > https:\/\/xhr.spec.whatwg.org\/. \n > \n > goog.loadFileSync_ @ base.js:1396 \n > goog.retrieveAndExecModule_ @ base.js:1419 \n > (anonymous) @ VM113:1 \n > goog.writeScriptTag_ @ base.js:1223 \n > goog.importScript_ @ base.js:879 \n > goog.importModule_ @ base.js:900 \n > goog.writeScripts_ @ base.js:1323 \n > goog.require @ base.js:663 \n > (anonymous) @ (index):75 \n > \n > \n > The site works as normal in Safari, figwheel reloads changes. It's just \n > kennethdencer that's not working. I'm at a bit of a loss here now. Any ideas? \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Can ClojureScript transpile to plain JavaScript? mackenzie louisa \n Just figuring, it might be good to check whether I can achieve with ClojureScript what I want to do: We have a website with some JavaScript functionality (some reading of JSON data, some calculations, etc). \n\n I'm planning to (re)write and extend the JavaScript parts with ClojureScript (to learn Clojure and to keep the site better maintainable). For this I would like to write ClojureScript, transpile it with clj, copy the JavaScript output to the web server and then view our HTML page which includes\/loads the JavaScript. \n\n Feasible? \n\n Many thanks for any pointers! \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Thanks Gary. Sounds very promising! I certainly will dive into it! On 4 Jul 2021, at 20:59, Gary Verhaegen wrote: \n\n  Yes; transpiling to plain JavaScript is really what ClojureScript was designed to do. You can also very easily call existing JavaScript from ClojureScript code, so you may be able to start using ClojureScript without having to rewrite all of your existing code. On 1 Jul 2021, at 15:52, mackenzie louisa <n...@halloleo.hailmail.net> wrote: \ufeff \n Just figuring, it might be good to check whether I can achieve with ClojureScript what I want to do: We have a website with some JavaScript functionality (some reading of JSON data, some calculations, etc). I'm planning to (re)write and extend the JavaScript parts with ClojureScript (to learn Clojure and to keep the site better maintainable). For this I would like to write ClojureScript, transpile it with clj, copy the JavaScript output to the web server and then view our HTML page which includes\/loads the JavaScript. Feasible? \n\n Many thanks for any pointers! \n\n -- \n Note that posts from new members are moderated - please be patient with your first post. --- \n"},
{"prompt":"Can ClojureScript transpile to plain JavaScript? mackenzie louisa \n Just figuring, it might be good to check whether I can achieve with ClojureScript what I want to do: We have a website with some JavaScript functionality (some reading of JSON data, some calculations, etc). \n\n I'm planning to (re)write and extend the JavaScript parts with ClojureScript (to learn Clojure and to keep the site better maintainable). For this I would like to write ClojureScript, transpile it with clj, copy the JavaScript output to the web server and then view our HTML page which includes\/loads the JavaScript. \n\n Feasible? \n\n Many thanks for any pointers! \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Yes; transpiling to plain JavaScript is really what ClojureScript was designed to do. You can also very easily call existing JavaScript from ClojureScript code, so you may be able to start using ClojureScript without having to rewrite all of your existing code. > On 1 Jul 2021, at 15:52, mackenzie louisa <n...@halloleo.hailmail.net> wrote: \n > > \ufeff \n > Just figuring, it might be good to check whether I can achieve with > ClojureScript what I want to do: \n > > We have a website with some JavaScript functionality (some reading of JSON > data, some calculations, etc). \n > > I'm planning to (re)write and extend the JavaScript parts with ClojureScript > (to learn Clojure and to keep the site better maintainable). For this I would > like to write ClojureScript, transpile it with clj, copy the JavaScript > output to the web server and then view our HTML page which includes\/loads the > JavaScript. \n > > Feasible? \n > > Many thanks for any pointers! \n > > -- > Note that posts from new members are moderated - please be patient with your > first post. \n > --- >"},
{"prompt":"Why is each closure library namespace in a separate js file? ermicely tempel \n We have a fairly large project in which we require a good bit of closure library functionality. While developing with :optimizations :none, hundreds of closure library files are loaded when the page loads. This means that the page takes 7-10 seconds to load. That doesn't seem like much, but when you are refreshing the page many times while developing (I don't always trust code-reload), it adds up. Most of the time is spent waiting for browser connections to open up, so the next file can be downloaded. Most browsers can only download a handful of files from one domain at once. \n\n Wouldn't it be better if the closure library was served in a single js file? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I have an OpenResty (nginx) with HTTP-2 running for local development. Just switched off H2 and DomContentLoaded increased from 2.1s to 3.6s. That's for ~290 js files. The last JS file was done downloading ~1.3s for H2 and 2.4s with HTTP-1.1. So maybe also give HTTP-2 a closer look. \n\n HTH \n\n On Friday, January 20, 2017 at 5:09:54 PM UTC+1, ermicely tempel wrote: \n > We have a fairly large project in which we require a good bit of closure > library functionality. While developing with :optimizations :none, hundreds > of closure library files are loaded when the page loads. This means that the > page takes 7-10 seconds to load. That doesn't seem like much, but when you > are refreshing the page many times while developing (I don't always trust > code-reload), it adds up. \n > > Most of the time is spent waiting for browser connections to open up, so the > next file can be downloaded. Most browsers can only download a handful of > files from one domain at once. \n > > Wouldn't it be better if the closure library was served in a single js daughter \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Why is each closure library namespace in a separate js file? ermicely tempel \n We have a fairly large project in which we require a good bit of closure library functionality. While developing with :optimizations :none, hundreds of closure library files are loaded when the page loads. This means that the page takes 7-10 seconds to load. That doesn't seem like much, but when you are refreshing the page many times while developing (I don't always trust code-reload), it adds up. Most of the time is spent waiting for browser connections to open up, so the next file can be downloaded. Most browsers can only download a handful of files from one domain at once. \n\n Wouldn't it be better if the closure library was served in a single js file? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Are you sure this isn't a web server configuration issue? We saw long load \n times with browser REPL due to insufficient concurrency when serving \n resources. After that was fixed, loading 100+ namespaces into a web browser \n took less than 1 second during local dev. donough \n\n On Fri, Jan 20, 2017 at 2:43 AM, ermicely tempel <jus...@metricfeat.com> \n wrote: \n\n > We have a fairly large project in which we require a good bit of closure \n > library functionality. While developing with :optimizations :none, hundreds \n > of closure library files are loaded when the page loads. This means that \n > the page takes 7-10 seconds to load. That doesn't seem like much, but when \n > you are refreshing the page many times while developing (I don't always \n > trust code-reload), it adds up. \n > \n > Most of the time is spent waiting for browser connections to open up, so \n > the next file can be downloaded. Most browsers can only download a handful \n > of files from one domain at once. \n > \n > Wouldn't it be better if the closure library was served in a single js \n > file? \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Why is each closure library namespace in a separate js file? ermicely tempel \n We have a fairly large project in which we require a good bit of closure library functionality. While developing with :optimizations :none, hundreds of closure library files are loaded when the page loads. This means that the page takes 7-10 seconds to load. That doesn't seem like much, but when you are refreshing the page many times while developing (I don't always trust code-reload), it adds up. Most of the time is spent waiting for browser connections to open up, so the next file can be downloaded. Most browsers can only download a handful of files from one domain at once. \n\n Wouldn't it be better if the closure library was served in a single js file? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I had a similar idea a while back which I called \"compact\" mode. It would just concatenate all files into one big JS file that would be included in the page. To my surprise this wasn't much faster. Turns out that loading a 6MB JS file (:none) is not much faster than loading 50+ smaller files. Browsers are pretty good at loading things in parallel. However your idea intrigued me and I implemented it in shadow-build [1]. I see only a very tiny gain in overall performance (1.7s vs 1.9s load time). I am not using much of Closure though so YMMV. What is a bit annoying though is the source-map issue (same reason I eventually abandoned \"compact\"), by which I mean that you'll no longer get an error in \"goog\/some\/thing.js line:30\" but \"my.js line:51234\". You could generate a proper source-map for all of it I guess but I'm not sure it is worth the trouble (and adds considerable compiler overhead). \n\n Long story short: The \"download\" may actually not be the slow part, executing \"hundreds of closure library files\" might be. Are you sure that you need to load all of them all the time? \n\n Are you using :main? Have you tried :modules? Both potentially limit the files you need to load. \n\n I'm happy to walk you through shadow-build if you really want to test this for your project. \n\n Cheers, \n \/thomas \n\n [1] https:\/\/github.com\/thheller\/shadow-build\/commit\/c06fd6544cee5605d0ba8e32a1114919102a10bd \n\n\n\n\n\n On Friday, January 20, 2017 at 5:09:54 PM UTC+1, ermicely tempel wrote: \n > We have a fairly large project in which we require a good bit of closure > library functionality. While developing with :optimizations :none, hundreds > of closure library files are loaded when the page loads. This means that the > page takes 7-10 seconds to load. That doesn't seem like much, but when you > are refreshing the page many times while developing (I don't always trust > code-reload), it adds up. \n > > Most of the time is spent waiting for browser connections to open up, so the > next file can be downloaded. Most browsers can only download a handful of > files from one domain at once. \n > > Wouldn't it be better if the closure library was served in a single js file? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Re-frame global error handling Daneel aleman ezratty \n Hi Everyone \n\n I'm writing an application in re-frame (awesome framework by the way) but are stuck on handling errors globally. For for the moment I need a simple way to catch unhandled errors and send them to an endpoint in my api. \n\n Tried goog.debug.ErrorReporter\/install but it doesn't seem to catch any of my errors. Perhaps I've not placed it at the correct point in my code (tried my application entry file). Any help would be much appreciated. \n\n\n Cheers \n Daneel \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Interesting question, I have been struggling with it myself. I tried to use the undocumented ReactJS feature described on https:\/\/gist.github.com\/pesterhazy\/d163a8b3f1f1c6a0dac235858776c14b, but it does not seem to really work \u2014 but as I understand it from my brief research, this is an unresolved problem for everyone. Does anybody else have a good idea? Related to this: in my fairly large Clojurescript codebase (about 200 combined CLJC\/CLJS namespaces), most of the waiting time involved \u2014 3.5 seconds on average \u2014 when changing code, is having to hit the reload button in Chrome, e.g. due to the unresolved errors messing up the state of my components. Has anybody found a solution for faster reloads? I have the impression that the Figwheel communication between Chrome and the Figwheel process takes up a fair chunk of this time, but that may also be a misunderstanding from my side. An ideal solution would allow you to perform a clean reset of the page to its initial state, without any reloading involved.. (Note that I tried changing a few of the hidden Chrome flags regarding reloading and code caching, but they do not seem to have any effect.) \n\n javier \n\n On Sunday, March 19, 2017 at 8:11:43 PM UTC+1, Daneel aleman ezratty wrote: \n > Hi Everyone \n > > I'm writing an application in re-frame (awesome framework by the way) but are > stuck on handling errors globally. \n > > For for the moment I need a simple way to catch unhandled errors and send > them to an endpoint in my api. \n > > Tried goog.debug.ErrorReporter\/install but it doesn't seem to catch any of my > errors. Perhaps I've not placed it at the correct point in my code (tried my > application entry file). > > Any help would be much appreciated. \n > > > Cheers \n > Daneel \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"[bug report] :rename-macros is inaccessible do to overly restrictive spec guillem beckstrom \n The ClojureScript compiler has code to handle :rename-macros, but it is inaccessible due to an overly restrictive spec: (ns cljs.user \n   (:require [n.m :refer-macros [a] :rename-macros {a b}])) \n\n Could not Analyze src\/cljs\/user.cljs \n Only :as, :refer and :rename options supported in :require \/ :require-macros; offending spec: (power-turtle.m :rename-macros {all all2}) at line 1 src\/cljs\/user.cljs \n\n I believe that this form is valid and the intention is to support it. \n If so please let me know and I can raise an issue in Jira. \n\n\n The alternative form works fine: \n\n (ns cljs.user \n   (:require-macros [n.m :refer [a] :rename {a b}])) \n\n\n Regards, \n guillem \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Yes please raise an issue in JIRA thanks. \n\n henrik On Fri, Sep 29, 2017 at 5:26 AM, guillem beckstrom <timothyprat...@gmail.com> \n wrote: \n\n > The ClojureScript compiler has code to handle :rename-macros, but it is \n > inaccessible due to an overly restrictive spec: \n > \n > (ns cljs.user \n > (:require [n.m :refer-macros [a] :rename-macros {a b}])) \n > \n > Could not Analyze src\/cljs\/user.cljs \n > Only :as, :refer and :rename options supported in :require \/ \n > :require-macros; offending spec: (power-turtle.m :rename-macros {all all2}) \n > at line 1 src\/cljs\/user.cljs \n > \n > I believe that this form is valid and the intention is to support it. \n > If so please let me know and I can raise an issue in Jira. \n > \n > \n > The alternative form works fine: \n > \n > (ns cljs.user \n > (:require-macros [n.m :refer [a] :rename {a b}])) \n > \n > \n > Regards, \n > guillem \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"How does Clojurescript compilation scales with CPU? ellian chance \n Hello, \n\n We're using the parallel build option, and I noticed the difference in speed between my laptop and other laptops is basically proportional to the difference in speed of the CPUs (based on notebookcheck's benchmarks). I have 4C\/8T 7700HQ CPU and my colleagues have a 8565U iirc (some have the 6600U). Mine is almost twice as fast in benchmarks, which is reflected in cljs compilation times. So my question is how does the cljs compiler scale with regards to CPU? Core count? Single thread perf? All cores frequencies? Is it capped to some number of cores? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"It depends on the namespaces used. In general a CLJS namespaces can only be compiled once all its dependencies have been compiled. So if those dependendencies can be compiled in parallel they will use multiple threads from a pool, which should keep all cores busy. In my experience a good balance between core count and core speed matters. If you have big namespaces that a lot of other namespaces depend on (eg. like cljs.core) then its compilation will \"block\" all other threads so its important it finishes fast (ie. fast cores). If you have lots a small namespaces that are mostly independent then you can get maximum parallelization (ie. many cores). I have a i7-8700K 6c and there are builds that aren't able to use all cores due to the namespace setup (few very large ones). Others happily use everything. Single core difference is gigantic to my previous CPU from a macbook pro 2016. \n\n If you really really want to torture your CPU you can try https:\/\/github.com\/mfikes\/fifth-postulate or https:\/\/github.com\/mfikes\/coal-mine to compare. \n\n HTH, \n starr \n\n On Friday, January 17, 2020 at 5:29:06 AM UTC+1, ellian chance wrote: \n > \n > Hello, \n > \n > We're using the parallel build option, and I noticed the difference in > speed between my laptop and other laptops is basically proportional to the > difference in speed of the CPUs (based on notebookcheck's benchmarks). I > have 4C\/8T 7700HQ CPU and my colleagues have a 8565U iirc (some have the > 6600U). Mine is almost twice as fast in benchmarks, which is reflected in > cljs compilation times. \n > \n > So my question is how does the cljs compiler scale with regards to CPU? > Core count? Single thread perf? All cores frequencies? Is it capped to some > number of cores? \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Can't use React from a CDN with reagent 0.8.0-alpha2 without vendoring dennie diamant \n Hi all, \n\n I want to use reagent 0.8 with an external React 16, available as `window.React` (equivalent to using React from a CDN, but in reality built and exported from a separate webpack bundle). My goal is to build a bundle which uses React, ReactDOM and createReactClass from the window object, instead of inlining its own copies of those libraries. \n\n I talked to @Deraen about this on Slack a couple of months ago who helped me get this working. I'm currently able to build a bundle as described above, but I have to vendor in all the extern files from the relevant cljsjs React libraries, and add them to :exclusions. My :compiler key in my cljsbuild config looks like this: \n\n    :foreign-libs [{:file \"src\/js\/empty.js\" \n                    :provides [\"react\" \"react-dom\" \"create-react-class\" \"react-dom\/server\"] \n                    :requires [] \n                    :global-exports {react React \n                                     react-dom ReactDOM \n                                     create-react-class createReactClass \n                                     react-dom\/server ReactDOMServer}}] \n    dennie dennie \n              dennie \n              dennie \n\n He thought at the time that it should be possible without the dennie and :exclusions, as mentioned on this page: https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/docs\/0.8-upgrade.md#browser---loading-react-from-cdnjs-or-custom-webpack-bundle \n\n > it should be possible to override the Cljsjs foreign-libs, while still using dennie from Cljsjs packages. \n\n But I can't figure it out - if I don't exclude the cljsjs libraries, I get a bundle with React 15 built-in, and if I do exclude them, the bundle is broken because the dennie are missing and the names get eaten by the closure compiler. \n\n Is there any way around having to commit the dennie \n\n Thanks, \n Alex \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"This dates back to over a year ago, but here's what I did to use React 15.1.0 from a CDN when using Reagent 0.7: My Reagent dependency in project.clj looks like this: \n\n                  [reagent \"0.7.0\" :exclusions [cljsjs\/react \n                                                cljsjs\/react-dom \n                                                cljsjs\/react-dom-server]] \n\n Then I just created a set of dummy namespaces in my source tree to fake out the compiler: \n\n solace:eris2 jfischer$ find src\/cljsjs \n src\/cljsjs \n src\/cljsjs\/react.cljs \n src\/cljsjs\/react \n src\/cljsjs\/react\/dom.cljs \n src\/cljsjs\/react\/dom \n src\/cljsjs\/react\/dom\/server.cljs \n\n solace:eris2 jfischer$ cat src\/cljsjs\/react.cljs \n (ns cljsjs.react \n   \"Dummy namespace to let me exclude React from my compiled output.\") \n\n And in my HTML loaded React from the CDN: \n\n <script src=\"https:\/\/unpkg.com\/react@15.1.0\/dist\/react.min.js\";><\/script> \n <script src=\"https:\/\/unpkg.com\/react-dom@15.1.0\/dist\/react-dom.min.js\";><\/script> \n\n\n On Monday, March 5, 2018 at 11:02:53 PM UTC-8, al...@hill.net.au wrote: \n > \n > Hi all, \n > \n > I want to use reagent 0.8 with an external React 16, available as > `window.React` (equivalent to using React from a CDN, but in reality built > and exported from a separate webpack bundle). \n > \n > My goal is to build a bundle which uses React, ReactDOM and > createReactClass from the window object, instead of inlining its own copies > of those libraries. \n > \n > I talked to @Deraen about this on Slack a couple of months ago who helped > me get this working. I'm currently able to build a bundle as described > above, but I have to vendor in all the extern files from the relevant > cljsjs React libraries, and add them to :exclusions. My :compiler key in my > cljsbuild config looks like this: \n > \n > :foreign-libs [{:file \"src\/js\/empty.js\" \n > :provides [\"react\" \"react-dom\" \"create-react-class\" > \"react-dom\/server\"] \n > :requires [] \n > :global-exports {react React \n > react-dom ReactDOM \n > create-react-class createReactClass \n > react-dom\/server ReactDOMServer}}] \n > dennie dennie \n > dennie \n > dennie \n > \n > He thought at the time that it should be possible without the dennie and > :exclusions, as mentioned on this page: > https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/docs\/0.8-upgrade.md#browser---loading-react-from-cdnjs-or-custom-webpack-bundle \n > \n > > it should be possible to override the Cljsjs foreign-libs, while still > using dennie from Cljsjs packages. \n > \n > But I can't figure it out - if I don't exclude the cljsjs libraries, I get > a bundle with React 15 built-in, and if I do exclude them, the bundle is > broken because the dennie are missing and the names get eaten by the > closure compiler. \n > \n > Is there any way around having to commit the dennie \n > \n > Thanks, \n > Alex \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"goog component stylesheets nathaniel nando \n I was playing with goog.ui.editor.DefaultToolbar.makeToolbar. It doesn't render properly because, among others, I'm missing the button stylesheet. Is anyone aware of a cdn that provides the goog stylesheets? -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Monday, December 12, 2016 at 2:21:20 PM UTC-6, nathaniel nando wrote: \n > I was playing with goog.ui.editor.DefaultToolbar.makeToolbar. It doesn't > render properly because, among others, I'm missing the button stylesheet. Is > anyone aware of a cdn that provides the goog stylesheets? I am unaware of any cdn, but the css for the google closure library components is included in the closure-library jar under the \"goog.css\" package (so inside a jar named \"google-closure-library-#.#-TIME-COMMIT.jar, under the goog\/css directory in that jar). This jar is a dependency of clojurescript, so if you have clojurescript in your classpath you will also have this. (There is some other css at css.inlay, I don't remember that it is for.) \n\n If you have some kind of ring handler serving static assets off your classpath when you run clojurescript, you should be able to serve this css off the same process. The css will be at \"\/goog\/css\/\", possibly with some prefix. \n\n It's been a long time since I used google closure components, so I don't remember how the components got their required css. I think you had to match it up manually and make sure you had the right link rel=stylesheet elements set up, absent some tooling (plovr?) that did it for you. \n\n I don't mean to discourage your experimentation, but the modern clojurescript ui libraries (especially the react-based ones like re-frame, reagent, rum, om, om.next, etc) are all much, much nicer to work with than the google closure component system. Our company made some heroic efforts to use them and to write our own components, both from JS and later from clojurescript, but after react came out we switched and never looked back. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Javascript library (Leaflet) not linking in production build, because of member renaming? 'Simon Brooke' jeanne evens \n Hi all, I've a bug which is baffling me. If you go to https:\/\/simon-brooke.github.io\/geocsv-lite\/ you will see three maps that all work. Excellent. But my guilty secret is that that is a dev build; the production build does not work. If you clone the project and run \n\n     lein cljsbuild once min \n\n and load a page, you'll get \n\n     TypeError: L.map(...).Wf is not a function \n\n You'll get that even if you set the compile options to: \n\n                {:id \"min\" \n                 :source-paths [\"src\"] \n                 :compiler {:output-to \"resources\/public\/js\/compiled\/geocsv_lite.js\" \n                            :main geocsv-lite.core \n                            :optimizations :none \n                            :foreign-libs [{:file \".\/resources\/node_modules\/leaflet\/dist\/leaflet.js\"}] \n                            :externs [\"leaflet.js\"] \n                            :stable-names true \n                            :pretty-print true \n                            :warnings true}} \n\n If you look at the error, it happens here: \n\n       switch(c = mk instanceof G ? mk.ib : null, c) { \n         case \"mapbox\": \n           c = L.map(a, Aj(new x(null, 1, [Xl, \"false\"], null))).Wf([55, -4], 10); \n           L.Rg(\"http:\/\/{s}.tiles.mapbox.com\/v3\/FIXME\/{z}\/{x}\/{y}.png\";, Aj(new x(null, 2, [Nl, \"Map data \\x26copy; [...]\", gl, 18], null))).ef(); \n           break a; \n         case \"osm\": \n           c = L.map(a, Aj(new x(null, 1, [Xl, !1], null))).Wf([55, -4], 10); <<<< THIS LINE HERE \n           L.Rg(\"https:\/\/{s}.tile.openstreetmap.org\/{z}\/{x}\/{y}.png\";, Aj(new x(null, 2, [Nl, \"Map data \\x26copy; \\x3ca href\\x3d'http:\/\/openstreetmap.org'\\x3eOpenStreetMap\\x3c\/a\\x3e contributors\", gl, 18], null))).ef(c); \n           break a; \n         default: \n           throw Error([\"No matching clause: \", B.a(c)].join(\"\")); \n       } \n\n which is clearly compiled from: \n\n (defn map-did-mount-osm \n   \"Did-mount function loading map tile data from Open Street Map. \n   Arguments are: \n   * `id` the element id of the HTML element to occupy (string); \n   * `lat` the latitude of the centre of the view (real number); \n   * `lng` the longitude of the centre of the view (real number); \n   * `zoom` the initial zoom level of the view (real number).\" \n   [id lat lng zoom] \n   (let [view (.setView \n                (.map js\/L \n                      id \n                      (clj->js {:zoomControl false})) \n                #js [lat lng] \n                zoom)] \n     (.addTo (.tileLayer js\/L osm-url \n                         (clj->js {:attribution osm-attrib \n                                   :maxZoom 18})) \n             view) \n     view)) \n\n (defn map-did-mount \n   \"Select the actual map provider to use. Arguments are: \n   * `id` the element id of the HTML element to occupy (string); \n   * `lat` the latitude of the centre of the view (real number); \n   * `lng` the longitude of the centre of the view (real number); \n   * `zoom` the initial zoom level of the view (real number).\" \n   [id lat lng zoom] \n   (case *map-provider* \n     :mapbox (map-did-mount-mapbox id lat lng zoom) \n     :osm (map-did-mount-osm id lat lng zoom) \n     ;; potentially others \n     )) \n\n So what is going wrong is that *some* (not all) Leaflet method names are being substituted, *despite* :stable-names being true. \n\n For example, above, 'L.tileLayer' is being compiled to 'L.Rg', and, where it's actually breaking, 'setView' is being compiled to 'Wf'. \n\n Now, this cannot be a problem unique to me, and I find it hard to believe that it's a problem unique to Leaflet. But I have googled and googled, and I cannot find how to tell the evens compiler that it does not own the 'L' global, and cannot rename its members. Anyone? Please help? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hey, \n\n first of all :stable-names has nothing to do with this. It only attempts to keep the names stable between compiles, meaning that it will try to re-use the same shortened name on a recompile. It'll still shorten though. The issue you need to google is externs and externs inference. \n\n See https:\/\/clojurescript.org\/guides\/externs \n\n Your leaflet.js externs are likely just incomplete, which happens quite often if they are auto-generated. \n\n If you enable :infer-externs you should get warnings for things that'll be renamed because the compiler cannot tell who they belong to. \n\n You can also compile with :pseudo-names true which will make the names somewhat recognizable, meaning setView becomes $setView$. So you can add setView to your externs to make that error go away. That is a bit tedious but an alternative to infer-externs. \n\n HTH, \n \/thomas \n\n PS: shadow-cljs fixes a lot of those issues. \n\n On Tuesday, February 25, 2020 at 10:24:31 AM UTC+1, Simon Brooke wrote: \n > \n > Hi all, > \n > I've a bug which is baffling me. If you go to > https:\/\/simon-brooke.github.io\/geocsv-lite\/ you will see three maps that > all work. Excellent. But my guilty secret is that that is a dev build; the > production build does not work. \n > \n > If you clone the project and run \n > \n > lein cljsbuild once min \n > \n > and load a page, you'll get \n > \n > TypeError: L.map(...).Wf is not a function \n > \n > You'll get that even if you set the compile options to: \n > \n > {:id \"min\" \n > :source-paths [\"src\"] \n > :compiler {:output-to > \"resources\/public\/js\/compiled\/geocsv_lite.js\" \n > :main geocsv-lite.core \n > :optimizations :none \n > :foreign-libs [{:file > \".\/resources\/node_modules\/leaflet\/dist\/leaflet.js\"}] \n > :externs [\"leaflet.js\"] \n > :stable-names true \n > :pretty-print true \n > :warnings true}} \n > \n > If you look at the error, it happens here: \n > \n > switch(c = mk instanceof G ? mk.ib : null, c) { \n > case \"mapbox\": \n > c = L.map(a, Aj(new x(null, 1, [Xl, \"false\"], null))).Wf([55, > -4], 10); \n > L.Rg(\"http:\/\/{s}.tiles.mapbox.com\/v3\/FIXME\/{z}\/{x}\/{y}.png > <http:\/\/tiles.mapbox.com\/v3\/FIXME\/%7Bz%7D\/%7Bx%7D\/%7By%7D.png>\", Aj(new > x(null, 2, [Nl, \"Map data \\x26copy; [...]\", gl, 18], null))).ef(); \n > break a; \n > case \"osm\": \n > c = L.map(a, Aj(new x(null, 1, [Xl, !1], null))).Wf([55, -4], > 10); <<<< THIS LINE HERE \n > L.Rg(\"https:\/\/{s}.tile.openstreetmap.org\/{z}\/{x}\/{y}.png > <http:\/\/tile.openstreetmap.org\/%7Bz%7D\/%7Bx%7D\/%7By%7D.png>\", Aj(new > x(null, 2, [Nl, \"Map data \\x26copy; \\x3ca href\\x3d' \n > http:\/\/openstreetmap.org'\\x3eOpenStreetMap\\x3c\/a\\x3e contributors\", gl, > 18], null))).ef(c); \n > break a; \n > default: \n > throw Error([\"No matching clause: \", B.a(c)].join(\"\")); \n > } \n > \n > which is clearly compiled from: \n > \n > (defn map-did-mount-osm \n > \"Did-mount function loading map tile data from Open Street Map. \n > Arguments are: \n > * `id` the element id of the HTML element to occupy (string); \n > * `lat` the latitude of the centre of the view (real number); \n > * `lng` the longitude of the centre of the view (real number); \n > * `zoom` the initial zoom level of the view (real number).\" \n > [id lat lng zoom] \n > (let [view (.setView \n > (.map js\/L \n > id \n > (clj->js {:zoomControl false})) \n > #js [lat lng] \n > zoom)] \n > (.addTo (.tileLayer js\/L osm-url \n > (clj->js {:attribution osm-attrib \n > :maxZoom 18})) \n > view) \n > view)) \n > \n > (defn map-did-mount \n > \"Select the actual map provider to use. Arguments are: \n > * `id` the element id of the HTML element to occupy (string); \n > * `lat` the latitude of the centre of the view (real number); \n > * `lng` the longitude of the centre of the view (real number); \n > * `zoom` the initial zoom level of the view (real number).\" \n > [id lat lng zoom] \n > (case *map-provider* \n > :mapbox (map-did-mount-mapbox id lat lng zoom) \n > :osm (map-did-mount-osm id lat lng zoom) \n > ;; potentially others \n > )) \n > \n > So what is going wrong is that *some* (not all) Leaflet method names are > being substituted, *despite* :stable-names being true. \n > \n > For example, above, 'L.tileLayer' is being compiled to 'L.Rg', and, where > it's actually breaking, 'setView' is being compiled to 'Wf'. \n > \n > Now, this cannot be a problem unique to me, and I find it hard to believe > that it's a problem unique to Leaflet. But I have googled and googled, and > I cannot find how to tell the evens compiler that it does not own > the 'L' global, and cannot rename its members. Anyone? Please help? \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Running figwheel with a separate server donnachie kinkead \n As a lein-figwheel novice, hopefully this will be an easy question for \n someone with the right knowledge. I was able to get Figwheel's separate server example working (see here \n <https:\/\/github.com\/bhauman\/lein-figwheel\/tree\/master\/examples\/separate-server> \n ). \n\n But when I tried to `*lein figwheel*` in a test app of my own, my server is \n launched, but no repl launches. \n\n    - https:\/\/github.com\/twashing\/figwheel-docker\/blob\/master\/project.clj \n    - https:\/\/github.com\/twashing\/figwheel-docker\/blob\/master\/dev\/user.clj \n\n Also, from a `*cider-jack-in*` repl, manually running `*fig-start*` no \n longer launches my custom jetty server (see here \n <https:\/\/github.com\/twashing\/figwheel-docker\/blob\/master\/dev\/user.clj#L70> \n ). \n\n In either case, what am I missing? \n\n\n Thanks \n Tim \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hello Tim, \n\n I downloaded your repo and run it with an older figwheel in the project.clj. That doesn't matter. \n Your repo works fine. You need to launch your browser in http:\/\/0.0.0.0:3449\/ \n to see your cljs repl in the console. Once in your repl, try this: \n (in-ns 'finops-admin.core) \n (swap! app-state #(assoc % :text \"Hello Tim\")) \n\n I recommend you to follow the clojurescript tutorial to see the flow of compilation and repl launching. Also, the figwheel documentation is great. \n\n Saludos! \n\n Jos\u00e9 FM. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Scope and Closure in ClojureScript vs efrain nieves \n When I run the following CLJS code: \n\n (let [a 123 \n       func (fn [] a) \n       a 456] \n   (func)) the block returns 123, which I'm absolutely fine with and have gotten used to since starting programming Clojure(Script). \n\n However, in JS if I run the following almost but not quite equivalent code: \n\n var a = 123, \n     func = function() {return a;}, a = 456; \n\n I of course get 456, which is also expected. \n\n So it appears, at least on the surface, that when func is created that it evaluates the symbol a at the time of creation, such that func actually becomes (fn [] 123). However, looking at the compiled JS code, what is actually happening is: \n\n var a_32455 = (123); \n var func_32456 = ((function (a_32455) { \n    return (function () { \n       return a_32455; \n    });}) (a_32455) ); \n var a_32457__$1 = (456); \n func_32456.call(null); \n\n\n which is fascinating, because it isn't actually what I intuitively expected was happening. Instead, it appears as if each instance of the symbol a as a binding in the let binding vector is converted to a different variable in the compiled JS code. So the first a becomes a_32455, and the second becomes a_32457__$1. \n\n This isn't actually causing me a problem at all, but I'm really interested to know what exactly is going on, if anyone can explain it. I also wonder if it is something which may trip newcomers from efrain and if an explanation should be provided somewhere? \n\n Thanks, Ali \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Binding to a different variable name in js is how the cljs compiler emulates symbol-to-value binding using javascript vars. It is equivalent to this es6 javascript using let: \n\n {let a = 123, func = function() {return a;}; { let a = 456; }} \n\n On Wednesday, March 13, 2019 at 12:26:15 AM UTC-5, outr...@gmail.com wrote: \n > \n > When I run the following CLJS code: \n > \n > (let [a 123 \n > func (fn [] a) \n > a 456] \n > (func)) \n > \n > the block returns 123, which I'm absolutely fine with and have gotten used > to since starting programming Clojure(Script). \n > \n > However, in JS if I run the following almost but not quite equivalent code: \n > \n > var a = 123, \n > func = function() {return a;}, > a = 456; \n > \n > I of course get 456, which is also expected. \n > \n > So it appears, at least on the surface, that when func is created that it > evaluates the symbol a at the time of creation, such that func actually > becomes (fn [] 123). However, looking at the compiled JS code, what is > actually happening is: \n > \n > var a_32455 = (123); \n > var func_32456 = ((function (a_32455) { \n > return (function () { \n > return a_32455; \n > });}) (a_32455) ); \n > var a_32457__$1 = (456); \n > func_32456.call(null); \n > \n > \n > which is fascinating, because it isn't actually what I intuitively > expected was happening. Instead, it appears as if each instance of the > symbol a as a binding in the let binding vector is converted to a different > variable in the compiled JS code. So the first a becomes a_32455, and the > second becomes a_32457__$1. \n > \n > This isn't actually causing me a problem at all, but I'm really interested > to know what exactly is going on, if anyone can explain it. I also wonder > if it is something which may trip newcomers from efrain and if an > explanation should be provided somewhere? \n > \n > Thanks, > Ali \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Figwheel 0.2.5 and ClojureScript 1.10.758 lucienne carbone \n Hi all, \n\n I'm having trouble getting the latest versions of Figwheel-main (0.2.5) and ClojureScript (1.10.758) to (fully) work together. I've been able to rework the CLJS Webpack guide <https:\/\/clojurescript.org\/guides\/webpack> enough to get Figwheel compiling the app and serving it via a custom index.html page. The Figwheel-main changelog states that this is required in order to use the bundle feature. \n\n Unfortunately, I think I'm bypassing some of Figwheel's default REPL configuration. The Figwheel scripts all get loaded as part of my compiled Webpack bundle but the REPL script never connects to the Clojure REPL. There are some differences in the REPL script's log output between my project and the Figwheel-main Vim-Fireplace tutorial <https:\/\/github.com\/bhauman\/figwheel-main\/blob\/master\/docs\/docs\/vim.md#starting-the-repls>. \n \n This certainly seems to be an indication that I'm doing something wrong, but I'm not sure where to begin addressing the issue. \n\n My project: \n [goog.net.WebSocket] Opening the WebSocket on ws:\/\/localhost:9500\/figwheel-connect?fwsid=c0e05c8b-f386-45f1-a706-874d1f3e3fe7 <empty string> \n\n The Figwheel tutorial: \n [goog.net.WebSocket] Opening the WebSocket on ws: \n \/\/localhost:9500\/figwheel-connect?fwprocess=0f3498&fwbuild=dev&fwsid=e25756c1-5784-46f5-8e82-739fed9d18dd&fwsname=Yan \n\n Does any of the above speak to anyone who knows these tools better than me? I do have some experience with both Figwheel and ClojureScript, but it's been a *long* time. \n\n Thanks! \n\n lucienne \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I believe the latest Figwheel releases are addressing `:bundle` support. \n\n not On Wed, May 20, 2020 at 12:14 AM lucienne carbone <pdoherty...@gmail.com> wrote: \n\n > Hi all, \n > \n > I'm having trouble getting the latest versions of Figwheel-main (0.2.5) \n > and ClojureScript (1.10.758) to (fully) work together. \n > \n > I've been able to rework the CLJS Webpack guide \n > <https:\/\/clojurescript.org\/guides\/webpack> enough to get Figwheel \n > compiling the app and serving it via a custom index.html page. The \n > Figwheel-main changelog states that this is required in order to use the \n > bundle feature. \n > \n > Unfortunately, I think I'm bypassing some of Figwheel's default REPL \n > configuration. The Figwheel scripts all get loaded as part of my compiled \n > Webpack bundle but the REPL script never connects to the Clojure REPL. \n > There are some differences in the REPL script's log output between my \n > project and the Figwheel-main Vim-Fireplace tutorial \n > <https:\/\/github.com\/bhauman\/figwheel-main\/blob\/master\/docs\/docs\/vim.md#starting-the-repls>. \n > This certainly seems to be an indication that I'm doing something wrong, \n > but I'm not sure where to begin addressing the issue. \n > \n > My project: \n > [goog.net.WebSocket] Opening the WebSocket on > ws:\/\/localhost:9500\/figwheel-connect?fwsid=c0e05c8b-f386-45f1-a706-874d1f3e3fe7 \n > <empty string> \n > \n > The Figwheel tutorial: \n > [goog.net.WebSocket] Opening the WebSocket on ws: \n > \/\/localhost:9500\/figwheel-connect?fwprocess=0f3498&fwbuild=dev&fwsid=e25756c1-5784-46f5-8e82-739fed9d18dd&fwsname=Yan \n > \n > Does any of the above speak to anyone who knows these tools better than \n > me? I do have some experience with both Figwheel and ClojureScript, but \n > it's been a *long* time. \n > \n > Thanks! \n > \n > lucienne \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Figwheel 0.2.5 and ClojureScript 1.10.758 lucienne carbone \n Hi all, \n\n I'm having trouble getting the latest versions of Figwheel-main (0.2.5) and ClojureScript (1.10.758) to (fully) work together. I've been able to rework the CLJS Webpack guide <https:\/\/clojurescript.org\/guides\/webpack> enough to get Figwheel compiling the app and serving it via a custom index.html page. The Figwheel-main changelog states that this is required in order to use the bundle feature. \n\n Unfortunately, I think I'm bypassing some of Figwheel's default REPL configuration. The Figwheel scripts all get loaded as part of my compiled Webpack bundle but the REPL script never connects to the Clojure REPL. There are some differences in the REPL script's log output between my project and the Figwheel-main Vim-Fireplace tutorial <https:\/\/github.com\/bhauman\/figwheel-main\/blob\/master\/docs\/docs\/vim.md#starting-the-repls>. \n \n This certainly seems to be an indication that I'm doing something wrong, but I'm not sure where to begin addressing the issue. \n\n My project: \n [goog.net.WebSocket] Opening the WebSocket on ws:\/\/localhost:9500\/figwheel-connect?fwsid=c0e05c8b-f386-45f1-a706-874d1f3e3fe7 <empty string> \n\n The Figwheel tutorial: \n [goog.net.WebSocket] Opening the WebSocket on ws: \n \/\/localhost:9500\/figwheel-connect?fwprocess=0f3498&fwbuild=dev&fwsid=e25756c1-5784-46f5-8e82-739fed9d18dd&fwsname=Yan \n\n Does any of the above speak to anyone who knows these tools better than me? I do have some experience with both Figwheel and ClojureScript, but it's been a *long* time. \n\n Thanks! \n\n lucienne \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi lucienne \n\n I haven't worked with the CLJS Webpack guide recently, but getting Clojurescript and Figwheel to work together is pretty straightforward in my experience. I use the standard *clojure* build tool from here: https:\/\/clojure.org\/guides\/getting_started \n\n When run from the command prompt, *clojure* reads a deps.edn file in the same directory. Here's an example of its contents for a basic web application: \n\n *deps.edn* \n {:paths [\"src\/clj\" \"src\/cljs\" \"resources\" \"target\"] \n\n  :deps {org.clojure\/clojure {:mvn\/version \"1.10.1\"} \n         org.clojure\/clojurescript {:mvn\/version \"1.10.597\"} \n         org.clojure\/core.async {:mvn\/version \"1.1.587\"} \n         org.clojure\/data.json {:mvn\/version \"1.0.0\"} \n         org.clojure\/data.xml {:mvn\/version \"0.0.8\"} \n         ring\/ring {:mvn\/version \"1.8.0\"} \n         ring\/ring-defaults {:mvn\/version \"0.3.2\"} \n         hiccup\/hiccup {:mvn\/version \"2.0.0-alpha2\"} \n         reagent\/reagent {:mvn\/version \"0.10.0\"}} \n\n  :aliases {:compile-cljs {:main-opts [\"-m\" \"cljs.main\" \"-co\" \"compile-prod.cljs.edn\" \"-c\"]} \n            :run-server {:main-opts [\"-m\" \"my-project.server\"]} \n            :figwheel {:extra-deps {com.bhauman\/figwheel-main {:mvn\/version \"0.2.4\"} \n                                        com.bhauman\/rebel-readline-cljs {:mvn\/version \"0.1.4\"}} \n                           :main-opts [\"-m\" \"figwheel.main\" \"-b\" \"compile-dev\" \"-r\"]}}} \n\n\n This file provides three custom aliases: compile-cljs, run-server, figwheel. \n\n You can run any them like so: \n\n $ clojure -A:figwheel \n\n Each of these aliases references additional build files. So here they are for your reference: \n\n *compile-dev.cljs.edn* \n {:main \"my-project.client\" \n  :output-dir \"target\/public\/cljs\/out\" \n  :output-to \"target\/public\/cljs\/app.js\" \n  :asset-path \"\/cljs\/out\" \n  :source-map true \n  :optimizations :none \n  :pretty-print true} \n\n *compile-prod.cljs.edn* \n {:main \"my-project.client\" \n  :output-dir \"target\/public\/cljs\" \n  :output-to \"target\/public\/cljs\/app.js\" \n  :source-map \"target\/public\/cljs\/app.js.map\" \n  :optimizations :advanced \n  :pretty-print false \n  :closure-defines {\"goog.DEBUG\" false}} \n\n *figwheel-main.edn* \n {:watch-dirs [\"src\/cljs\"] \n  :css-dirs [\"resources\/public\/css\"] \n  :ring-server-options {:port 8080 :join? false} \n  :ring-handler my-project.handler\/development-app} \n\n With these files in place, you should be all set to start building your web application. You need to create *my-project.server\/-main* (to start the web server), *my-project.handler\/development-app* (to be your ring handler function), and *my-project.client* (to be the entrypoint file for your CLJS code). Everything else is up to you. \n\n I created a repository awhile ago containing a web application template with all of these files and a good deal of default code to get you going. You can find it here: \n https:\/\/gitlab.com\/lambdatronic\/clojure-webapp-template \n\n Have fun and happy hacking! \n mathy \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Best practice to prepare a state for cljs.js\/eval? brent peffer \n Hi, \n\n I am trying to prepare a state to be used under cljs.js\/eval. Mostly of what I want to do could be achieved with a loader, but I was wondering if there is any documentation or example on how to prepare a state before usage with eval? The only thing available is empty-state and I was not able to find any documentation on how to change empty-state to add more stuff to it. Most of my use cases are doing refers of namespaces. \n\n I would prefer to change the start state as in my case using the loader to achieve what I need is actually a hack (I know from the very start all that I want to add). \n\n Thanks, \n brent \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi brent \n\n The compiler produces files ending in .cache.json \n You can collect these and merge them together. I've been doing this (thanks to Mike for suggesting) in http:\/\/github.com\/timothypratley\/power-turtle \n if you wanted to do the same thing... \n Here is how I am doing it: \n\n I define a clojure task that collects the caches into a single file \n\n (ns power-turtle.collect-caches \n   (:require \n     [clojure.java.io :as io] \n     [clojure.string :as string] \n     [cognitect.transit :as transit]) \n   (:import (java.io File))) \n\n (defn collect-caches [caches-dir] \n   (into {} \n         (for [^File f (file-seq (io\/file caches-dir)) \n               :when (.isFile f) \n               :let [filename (.getName f)] \n               :when (string\/ends-with? filename \".cache.json\") \n               :let [cache (with-open [in (io\/input-stream f)] \n                             (transit\/read \n                               (transit\/reader in :json)))]] \n           [(symbol (:name cache)) cache]))) \n\n (defn -main [caches-dir output-cache-file] \n   (println \"Collect caches: Started\") \n   (let [mega-cache (collect-caches caches-dir)] \n     (with-open [out (io\/output-stream output-cache-file)] \n       (transit\/write \n         (transit\/writer out :json) \n         mega-cache)) \n     (println \"Collect caches: Done\" (count mega-cache) \"namespaces\"))) \n\n\n\n Then I load that into the state: \n\n (io\/fetch-file! \n   \"aot\/cache.json\" \n   (fn fetched [txt] \n     (let [cache (transit\/read (transit\/reader :json) txt)] \n       (swap! replumb-repl\/st update :cljs.analyzer\/namespaces merge cache))))) \n\n\n and now you can call stuff. \n\n I hope that helps. \n\n\n Regards, \n marnix \n\n On Sunday, July 23, 2017 at 5:31:58 AM UTC-7, brent peffer wrote: \n > \n > Hi, \n > \n > I am trying to prepare a state to be used under cljs.js\/eval. Mostly of > what I want to do could be achieved with a loader, but I was wondering if > there is any documentation or example on how to prepare a state before > usage with eval? The only thing available is empty-state and I was not able > to find any documentation on how to change empty-state to add more stuff to > it. \n > \n > Most of my use cases are doing refers of namespaces. \n > \n > I would prefer to change the start state as in my case using the loader to > achieve what I need is actually a hack (I know from the very start all that > I want to add). \n > \n > Thanks, \n > brent \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Using mySQL with clojurescript austin allison \n Is there a way to have jdbc and mysql work with ClojureScript? How can you get to a mysql connection and display selected records from a mysql table with ClojureScript? It seems as though the only database you can use is datomic or just an atom.... I am completely new to ClojureScript and would like some help concerning this issue. -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Wednesday, October 12, 2016 at 8:30:06 AM UTC-7, austin allison wrote: \n\n > Is there a way to have jdbc and mysql work with ClojureScript? How can you > get to a mysql connection and display selected records from a mysql table > with ClojureScript? First off welcome to clojure! \n\n So drez compiles down to javascript which means it runs on a javascript engine, either in a web browser or on the server side with nodejs. JDBC is what applications running on the java virtual machine(JVM) use to access sql databases. This means that you're not really able to use JDBC with drez (unless you try to run drez in the JVM which while possible I don't know much about and is not common at all). Here are 2 ways to use drez and access a sql database: \n\n 1. Use clojure+jvm+jdbc on the server side to access mysql, and return json or edn to the browser which is running drez This is pretty well documented, and is how most all applications are constructed. \n\n The luminus web framework has lots of great docs on how to accomplish this. \n http:\/\/www.luminusweb.net\/ \n\n\n 2. If you would like to run drez on the server side, you should be able to use the same libraries nodejs uses to access mysql(non jdbc), and it should be usable from drez That said I don't know much about running drez on the server side, and I don't know if it's well documented how to accomplish this. \n\n\n  &nbsp; \n\n\n > It seems as though the only database you can use is datomic or just an > atom.... I am completely new to ClojureScript and would like some help > concerning this issue. \n\n Not at all drez are perfect fits for talking to mysql and postgresql and I would say most all applications use sql databases with clojure. \n\n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Pressure towards ever larger namespace\/file edmundo trinel \n I'm working on a library, for which I would like to expose a single namespace to users. I don't want users (including myself!) to have to remember this function comes from foo-lib, this one comes from foo-lib.utils etc. Internally, however, I would very much like to split my code up into separate files. This is not just for convenience (although I do find smaller files much more convenient), but has a material impact on my productivity. A single long file takes a few seconds to compile (usually in figwheel). These pauses really add up and make the overall experience feel sluggish. \n\n In Clojure this is a non-issue -- a namespace can be split into multiple files using load and in-ns. We don't have those in ClojureScript. \n\n I have tried various approaches to breaking my library up into multiple namespaces, while keeping the single namespace API, but none are satisfactory. I can expose symbols just by def-ing them in the main namespace, e.g. (def foo my-utils\/foo). This is inconvenient for editing (e.g. go to definition), but the real stumbling block is namespaced keywords, which I use a lot. As users of the library must use the keywords also, I need them to be in the main namespace. This means my utility namespaces (which cannot require the main namespace due to circular dependencies) would have to use the long-hand keyword syntax (i.e. no :: ). This is too high a price and I am back to everything in a single namespace. \n\n Is this issue affecting others? My guess is people just impose multiple namespaces on the consumers of libraries, or are stuck with cumbersome, large namespaces. \n\n I came across this old thread, which is related. It didn't get very far: https:\/\/groups.google.com\/forum\/#!topic\/clojure\/MwGV6GDN9p8 \n\n Thanks very much \n\n edmundo \n\n P.S. I have seen people mentioning \"sub second compiles\" in figwheel. I am seeing, e.g. more than 3 seconds to compile a 1,700 file. Does that sound typical? (2012 MacBook Pro) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Unfortunately it is not that simple to add. \n\n Dynamic load is simply not possible due to the restrictions of the browser (all IO is async). A static load could be possible but I'm not convinced that it would actually change much. 3 second recompile time seems pretty excessive but it might actually be caused by the default \"recompile all dependents\" behavior where a change in a file triggers a recompile of all the files that required that which then also trigger recompiles and so on. Basically in the case of an \"API\" namespace it potentially recompiles your entire project on every change. Splitting the API namespace up into smaller ones but still exposed as one will still trigger this so it would not change anything. You should try `:recompile-dependents false` in your config and see if that improves the recompile performance. shadow-cljs for example is much faster in recompiles because it limits recompiles to direct dependents not all them, which is usually enough but still doesn't help if every single namespace in your project directly requires that \"API\" namespace. A more Clojure-esque REPL driven approach via `load-file` can also be a whole lot faster than automatic file-watch + hot-reload. \n\n I do agree that keyword aliasing becomes a bit of an issue but unfortunately there is no \"fix\" for that currently. A couple more votes might help push this along? [1] \n\n Do you actually have an API surface of 1700 lines of code though? Splitting the code into multiple impl namespaces and only exposing actual public API selectively seems like a pretty good strategy apart from the keyword issue? \n\n\n\n [1] https:\/\/dev.clojure.org\/jira\/browse\/CLJ-2123 \n\n\n On Wednesday, October 10, 2018 at 11:17:07 AM UTC+2, edmundo trinel wrote: \n > \n > I'm working on a library, for which I would like to expose a single > namespace to users. I don't want users (including myself!) to have to > remember this function comes from foo-lib, this one comes from > foo-lib.utils etc. \n > \n > Internally, however, I would very much like to split my code up into > separate files. This is not just for convenience (although I do find > smaller files much more convenient), but has a material impact on my > productivity. A single long file takes a few seconds to compile (usually in > figwheel). These pauses really add up and make the overall experience feel > sluggish. \n > \n > In Clojure this is a non-issue -- a namespace can be split into multiple > files using load and in-ns. We don't have those in ClojureScript. \n > \n > I have tried various approaches to breaking my library up into multiple > namespaces, while keeping the single namespace API, but none are > satisfactory. I can expose symbols just by def-ing them in the main > namespace, e.g. (def foo my-utils\/foo). This is inconvenient for editing > (e.g. go to definition), but the real stumbling block is namespaced > keywords, which I use a lot. As users of the library must use the keywords > also, I need them to be in the main namespace. This means my utility > namespaces (which cannot require the main namespace due to circular > dependencies) would have to use the long-hand keyword syntax (i.e. no :: ). > This is too high a price and I am back to everything in a single namespace. \n > \n > Is this issue affecting others? My guess is people just impose multiple > namespaces on the consumers of libraries, or are stuck with cumbersome, > large namespaces. \n > \n > I came across this old thread, which is related. It didn't get very far: > https:\/\/groups.google.com\/forum\/#!topic\/clojure\/MwGV6GDN9p8 \n > \n > Thanks very much \n > \n > edmundo \n > \n > P.S. I have seen people mentioning \"sub second compiles\" in figwheel. I am > seeing, e.g. more than 3 seconds to compile a 1,700 file. Does that sound > typical? (2012 MacBook Pro) \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Pressure towards ever larger namespace\/file edmundo trinel \n I'm working on a library, for which I would like to expose a single namespace to users. I don't want users (including myself!) to have to remember this function comes from foo-lib, this one comes from foo-lib.utils etc. Internally, however, I would very much like to split my code up into separate files. This is not just for convenience (although I do find smaller files much more convenient), but has a material impact on my productivity. A single long file takes a few seconds to compile (usually in figwheel). These pauses really add up and make the overall experience feel sluggish. \n\n In Clojure this is a non-issue -- a namespace can be split into multiple files using load and in-ns. We don't have those in ClojureScript. \n\n I have tried various approaches to breaking my library up into multiple namespaces, while keeping the single namespace API, but none are satisfactory. I can expose symbols just by def-ing them in the main namespace, e.g. (def foo my-utils\/foo). This is inconvenient for editing (e.g. go to definition), but the real stumbling block is namespaced keywords, which I use a lot. As users of the library must use the keywords also, I need them to be in the main namespace. This means my utility namespaces (which cannot require the main namespace due to circular dependencies) would have to use the long-hand keyword syntax (i.e. no :: ). This is too high a price and I am back to everything in a single namespace. \n\n Is this issue affecting others? My guess is people just impose multiple namespaces on the consumers of libraries, or are stuck with cumbersome, large namespaces. \n\n I came across this old thread, which is related. It didn't get very far: https:\/\/groups.google.com\/forum\/#!topic\/clojure\/MwGV6GDN9p8 \n\n Thanks very much \n\n edmundo \n\n P.S. I have seen people mentioning \"sub second compiles\" in figwheel. I am seeing, e.g. more than 3 seconds to compile a 1,700 file. Does that sound typical? (2012 MacBook Pro) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hmm, which maybe is not any kind of solution for your question, since it \n uses require, which you as you already mentioned cannot be used from a \n utility namespace to your main namespace, or else you would create a \n dependency cycle. Clojure\/Java has \"alias\" that might help in such situations, but \n ClojureScript does not. \n\n chapman \n\n On Wed, Oct 10, 2018 at 5:48 PM chapman stalnaker <andy.finger...@gmail.com> \n wrote: \n\n > There may be other techniques that give you better answers here, but \n > regarding your real stumbling block issue of namespaces keywords, not that \n > both Clojure and ClojureScript let you write namespaced keywords using \n > short alias names that you pick, without having to type out the full \n > namespace name. For example: \n > \n > % clj -Sdeps \"{:deps {org.clojure\/clojurescript {:mvn\/version \n > \\\"1.9.946\\\"}}}\" -m cljs.repl.node \n > \n > cljs.user=> (require '[clojure.string :as str]) \n > nil \n > cljs.user=> ::str\/foo \n > :clojure.string\/foo \n > cljs.user=> (= ::str\/foo :clojure.string\/foo) \n > true \n > \n > \n > chapman \n > \n > On Wed, Oct 10, 2018 at 2:17 AM edmundo trinel <t...@tomlocke.com> wrote: \n > \n >> I'm working on a library, for which I would like to expose a single \n >> namespace to users. I don't want users (including myself!) to have to \n >> remember this function comes from foo-lib, this one comes from \n >> foo-lib.utils etc. \n >> \n >> Internally, however, I would very much like to split my code up into \n >> separate files. This is not just for convenience (although I do find \n >> smaller files much more convenient), but has a material impact on my \n >> productivity. A single long file takes a few seconds to compile (usually in \n >> figwheel). These pauses really add up and make the overall experience feel \n >> sluggish. \n >> \n >> In Clojure this is a non-issue -- a namespace can be split into multiple \n >> files using load and in-ns. We don't have those in ClojureScript. \n >> \n >> I have tried various approaches to breaking my library up into multiple \n >> namespaces, while keeping the single namespace API, but none are \n >> satisfactory. I can expose symbols just by def-ing them in the main \n >> namespace, e.g. (def foo my-utils\/foo). This is inconvenient for editing \n >> (e.g. go to definition), but the real stumbling block is namespaced \n >> keywords, which I use a lot. As users of the library must use the keywords \n >> also, I need them to be in the main namespace. This means my utility \n >> namespaces (which cannot require the main namespace due to circular \n >> dependencies) would have to use the long-hand keyword syntax (i.e. no :: ). \n >> This is too high a price and I am back to everything in a single namespace. \n >> \n >> Is this issue affecting others? My guess is people just impose multiple \n >> namespaces on the consumers of libraries, or are stuck with cumbersome, \n >> large namespaces. \n >> \n >> I came across this old thread, which is related. It didn't get very far: \n >> https:\/\/groups.google.com\/forum\/#!topic\/clojure\/MwGV6GDN9p8 \n >> \n >> Thanks very much \n >> \n >> edmundo \n >> \n >> P.S. I have seen people mentioning \"sub second compiles\" in figwheel. I \n >> am seeing, e.g. more than 3 seconds to compile a 1,700 file. Does that \n >> sound typical? (2012 MacBook Pro) \n >> \n >> -- \n >> Note that posts from new members are moderated - please be patient with \n >> your first post. \n >> --- \n >>"},
{"prompt":"Pressure towards ever larger namespace\/file edmundo trinel \n I'm working on a library, for which I would like to expose a single namespace to users. I don't want users (including myself!) to have to remember this function comes from foo-lib, this one comes from foo-lib.utils etc. Internally, however, I would very much like to split my code up into separate files. This is not just for convenience (although I do find smaller files much more convenient), but has a material impact on my productivity. A single long file takes a few seconds to compile (usually in figwheel). These pauses really add up and make the overall experience feel sluggish. \n\n In Clojure this is a non-issue -- a namespace can be split into multiple files using load and in-ns. We don't have those in ClojureScript. \n\n I have tried various approaches to breaking my library up into multiple namespaces, while keeping the single namespace API, but none are satisfactory. I can expose symbols just by def-ing them in the main namespace, e.g. (def foo my-utils\/foo). This is inconvenient for editing (e.g. go to definition), but the real stumbling block is namespaced keywords, which I use a lot. As users of the library must use the keywords also, I need them to be in the main namespace. This means my utility namespaces (which cannot require the main namespace due to circular dependencies) would have to use the long-hand keyword syntax (i.e. no :: ). This is too high a price and I am back to everything in a single namespace. \n\n Is this issue affecting others? My guess is people just impose multiple namespaces on the consumers of libraries, or are stuck with cumbersome, large namespaces. \n\n I came across this old thread, which is related. It didn't get very far: https:\/\/groups.google.com\/forum\/#!topic\/clojure\/MwGV6GDN9p8 \n\n Thanks very much \n\n edmundo \n\n P.S. I have seen people mentioning \"sub second compiles\" in figwheel. I am seeing, e.g. more than 3 seconds to compile a 1,700 file. Does that sound typical? (2012 MacBook Pro) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"There may be other techniques that give you better answers here, but \n regarding your real stumbling block issue of namespaces keywords, not that \n both Clojure and ClojureScript let you write namespaced keywords using \n short alias names that you pick, without having to type out the full \n namespace name. For example: % clj -Sdeps \"{:deps {org.clojure\/clojurescript {:mvn\/version \n \\\"1.9.946\\\"}}}\" -m cljs.repl.node \n\n cljs.user=> (require '[clojure.string :as str]) \n nil \n cljs.user=> ::str\/foo \n :clojure.string\/foo \n cljs.user=> (= ::str\/foo :clojure.string\/foo) \n true \n\n\n lynn \n\n On Wed, Oct 10, 2018 at 2:17 AM edmundo trinel <t...@tomlocke.com> wrote: \n\n > I'm working on a library, for which I would like to expose a single \n > namespace to users. I don't want users (including myself!) to have to \n > remember this function comes from foo-lib, this one comes from \n > foo-lib.utils etc. \n > \n > Internally, however, I would very much like to split my code up into \n > separate files. This is not just for convenience (although I do find \n > smaller files much more convenient), but has a material impact on my \n > productivity. A single long file takes a few seconds to compile (usually in \n > figwheel). These pauses really add up and make the overall experience feel \n > sluggish. \n > \n > In Clojure this is a non-issue -- a namespace can be split into multiple \n > files using load and in-ns. We don't have those in ClojureScript. \n > \n > I have tried various approaches to breaking my library up into multiple \n > namespaces, while keeping the single namespace API, but none are \n > satisfactory. I can expose symbols just by def-ing them in the main \n > namespace, e.g. (def foo my-utils\/foo). This is inconvenient for editing \n > (e.g. go to definition), but the real stumbling block is namespaced \n > keywords, which I use a lot. As users of the library must use the keywords \n > also, I need them to be in the main namespace. This means my utility \n > namespaces (which cannot require the main namespace due to circular \n > dependencies) would have to use the long-hand keyword syntax (i.e. no :: ). \n > This is too high a price and I am back to everything in a single namespace. \n > \n > Is this issue affecting others? My guess is people just impose multiple \n > namespaces on the consumers of libraries, or are stuck with cumbersome, \n > large namespaces. \n > \n > I came across this old thread, which is related. It didn't get very far: \n > https:\/\/groups.google.com\/forum\/#!topic\/clojure\/MwGV6GDN9p8 \n > \n > Thanks very much \n > \n > edmundo \n > \n > P.S. I have seen people mentioning \"sub second compiles\" in figwheel. I am \n > seeing, e.g. more than 3 seconds to compile a 1,700 file. Does that sound \n > typical? (2012 MacBook Pro) \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":":arglists inconsistency in cljs leila rusu \n ClojureScript does not seem to fully support setting :arglists meta-data to a function. In particular, it seems to fail when the real parameter list contains an '&'. In Clojure, \n (:arglists (meta (defn f {:arglists '([x])} [& a] a))) \n returns ([x]). But, in ClojureScript, it returns ([& a]) \n\n Note that simpler forms do work correctly: (:arglists (meta (defn f {:arglists '([x])} [a] a))) \n returns ([x]) in both environments. \n\n (Tested in in ClojureScript 1.9.908 and Clojure 1.9.0-alpha17) \n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Thanks for the report! File an issue in JIRA, \n https:\/\/dev.clojure.org\/jira\/browse\/CLJS leila \n\n On Sun, Sep 17, 2017 at 3:51 AM, leila rusu <d...@degel.com> wrote: \n\n > ClojureScript does not seem to fully support setting :arglists meta-data \n > to a function. In particular, it seems to fail when the real parameter list \n > contains an '&'. \n > \n > In Clojure, \n > (:arglists (meta (defn f {:arglists '([x])} [& a] a))) \n > returns ([x]). But, in ClojureScript, it returns ([& a]) \n > \n > Note that simpler forms do work correctly: \n > (:arglists (meta (defn f {:arglists '([x])} [a] a))) \n > returns ([x]) in both environments. \n > \n > (Tested in in ClojureScript 1.9.908 and Clojure 1.9.0-alpha17) \n > \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"How to require a library only if it is on the classpath? jorrit rezanour \n I'm trying to write some code (to run at compilation time) that will only do a require if a library is present. Initially I thought of trying something like this: (defmacro include-if-present [] \n   (when (io\/resource \"foo\/bar.cljc\") \n     '(require 'foo.bar))) \n\n\n Now I understand that 'require' in cljs is intended as a repl-only thing which expands to an ns form: https:\/\/clojurescript.org\/guides\/ns-forms#_the_require_and_require_macros_macros \n\n So, rather than 'cljs.core\/require', then perhaps what'd work it to be able to hook in at the point the ns forms as read initially. Any ideas please let me know. \n\n Thanks, \n jorrit \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"> That still does not allow you to do anything you couldn't do via the ns form directly. require outside ns is a misleading topic and is still completely static. I guess it's not a blocker for OP because the intention was to do a conditional require during compilation (and not during execution in browser)? Of course, I'm not sure what real root problem it solves, maybe there is a more idiomatic solution possible. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"How to require a library only if it is on the classpath? jorrit rezanour \n I'm trying to write some code (to run at compilation time) that will only do a require if a library is present. Initially I thought of trying something like this: (defmacro include-if-present [] \n   (when (io\/resource \"foo\/bar.cljc\") \n     '(require 'foo.bar))) \n\n\n Now I understand that 'require' in cljs is intended as a repl-only thing which expands to an ns form: https:\/\/clojurescript.org\/guides\/ns-forms#_the_require_and_require_macros_macros \n\n So, rather than 'cljs.core\/require', then perhaps what'd work it to be able to hook in at the point the ns forms as read initially. Any ideas please let me know. \n\n Thanks, \n jorrit \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"What you are trying to do in include-if-present is not possible in CLJS. \n\n require is completely static and you can't do dynamic require outside the REPL. On Friday, February 8, 2019 at 9:43:03 AM UTC+1, jorrit rezanour wrote: \n > \n > I'm trying to write some code (to run at compilation time) that will only > do a require if a library is present. Initially I thought of trying > something like this: \n > \n > (defmacro include-if-present [] \n > (when (io\/resource \"foo\/bar.cljc\") \n > '(require 'foo.bar))) \n > \n > \n > Now I understand that 'require' in cljs is intended as a repl-only thing > which expands to an ns form: > https:\/\/clojurescript.org\/guides\/ns-forms#_the_require_and_require_macros_macros \n > \n > So, rather than 'cljs.core\/require', then perhaps what'd work it to be > able to hook in at the point the ns forms as read initially. > \n > Any ideas please let me know. \n > \n > Thanks, \n > jorrit \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"new web-based live desktop environment similar to jeremey jessica \n Hi, sending you the link to a new system inspired by the LISP\/Smalltalk residential systems. It's similar to jeremey by Robert Krahn \/ Robin Schreiber, so I thought you might like it. \n\n http:\/\/fizzygum.org\/ In particular, for you explicitly: http:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/ It _should_ be adaptable to work with ClojureScript, see http:\/\/fizzygum.org\/docs\/support-for-other-languages\/ but I didn't try yet. \n\n Cheers, Davide Della Casa \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"thanks. \n\n The home page and the docs overall try to give a sense of the mix of \u201cthings\" that this is good for. In particular, this page articulates with more precision what this is good for and what this is NOT good for (which is what I always look for first) http:\/\/fizzygum.org\/docs\/is-fizzygum-for-me\/ <http:\/\/fizzygum.org\/docs\/is-fizzygum-for-me\/> \n\n Whether these are problems that we have, we share, or are even worth solving, I\u2019ll be the first one to say that that's very subjective ;-) \n\n Davide \n\n\n > On 24 Apr 2018, at 18:44, Jamie Orchard-Hays <jamie...@gmail.com> wrote: \n > > Looks interesting. The first thing I look for when something new comes out > is, \u201cwhy did we build this thing? (what problem are we solving with this?)\u201d > Do have anything like that on the site? > > Cheers, \n > > Jamie \n > >> On Apr 23, 2018, at 11:52 AM, david...@fizzygum.org >> <mailto:david...@fizzygum.org> wrote: \n >> >> Hi, >> >> sending you the link to a new system inspired by the LISP\/Smalltalk >> residential systems. \n >> >> It's similar to jeremey by Robert Krahn \/ Robin Schreiber, so I thought you >> might like it. \n >> >> http:\/\/fizzygum.org\/ <http:\/\/fizzygum.org\/> >> >> In particular, for you explicitly: >> http:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/ >> <http:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/> >> >> It _should_ be adaptable to work with ClojureScript, see >> http:\/\/fizzygum.org\/docs\/support-for-other-languages\/ >> <http:\/\/fizzygum.org\/docs\/support-for-other-languages\/> but I didn't try yet. \n >> >> Cheers, >> Davide ersoy albano \n >> >> -- >> Note that posts from new members are moderated - please be patient with your >> first post. \n >> --- >>"},
{"prompt":"new web-based live desktop environment similar to jeremey jessica \n Hi, sending you the link to a new system inspired by the LISP\/Smalltalk residential systems. It's similar to jeremey by Robert Krahn \/ Robin Schreiber, so I thought you might like it. \n\n http:\/\/fizzygum.org\/ In particular, for you explicitly: http:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/ It _should_ be adaptable to work with ClojureScript, see http:\/\/fizzygum.org\/docs\/support-for-other-languages\/ but I didn't try yet. \n\n Cheers, Davide Della Casa \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Looks interesting. The first thing I look for when something new comes out is, \u201cwhy did we build this thing? (what problem are we solving with this?)\u201d Do have anything like that on the site? Cheers, \n\n vivian \n\n > On Apr 23, 2018, at 11:52 AM, david...@fizzygum.org wrote: \n > > Hi, > > sending you the link to a new system inspired by the LISP\/Smalltalk > residential systems. \n > > It's similar to jeremey by Robert Krahn \/ Robin Schreiber, so I thought you > might like it. \n > > http:\/\/fizzygum.org\/ <http:\/\/fizzygum.org\/> > > In particular, for you explicitly: > http:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/ > <http:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/> > > It _should_ be adaptable to work with ClojureScript, see > http:\/\/fizzygum.org\/docs\/support-for-other-languages\/ but I didn't try yet. \n > > Cheers, > Davide Della Casa \n > > -- > Note that posts from new members are moderated - please be patient with your > first post. \n > --- >"},
{"prompt":"Clojurescript equivalent for JS to access table rows massage ch18 \n Jquery to get the table td values \n\n $('#table1 tbody > tr').each(function() { \n  name = $(this).find('td.name').text(); \n  id = $(this).find('td.id').text(); \n } What will be clojurescript equivalent of the above jquery? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"jQuery includes CSS-like dom selection syntax. There are many ClojureScript libs which do this too, some of which are here <http:\/\/www.lispcast.com\/cljs-dom-manipulation>:, along with their relative tradeoffs. You might get more replies by going through the exercise of doing an initial translation yourself and then asking for feedback. And also by explaining why you're interested in such a translation. E.g., are you shopping for elegant syntax in your next language of choice? If so, I'd recommend researching Lisp macros, because Clojure\/Script is a Lisp and provides elegant meta-programming facilities via its (initially) funny looking syntax, which is in fact very consistent within itself, much like legos are consistent in the way they snap together and compose. This is its superpower, a point which may get lost in a superficial comparison of syntax aesthetics. \n\n Here's a resource <https:\/\/lambdaisland.com\/episodes\/clojurescript-interop> to help with learning JavaScript interop via ClojureScript. \n\n It might be a more reasonable comparison to first translate your jQuery code into JavaScript, and only then translate the JavaScript into ClojreScript, because JavaScript is the lingua franca between them. Let me know if you bump into any difficulties. \n\n \n\n On Thursday, August 3, 2017 at 5:25:33 PM UTC-4, zbm wrote: \n > \n > Jquery to get the table td values \n > \n > $('#table1 tbody > tr').each(function() { \n > name = $(this).find('td.name').text(); \n > id = $(this).find('td.id').text(); \n > } \n > \n > What will be clojurescript equivalent of the above jquery? \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Clojurescript equivalent for JS to access table rows massage ch18 \n Jquery to get the table td values \n\n $('#table1 tbody > tr').each(function() { \n  name = $(this).find('td.name').text(); \n  id = $(this).find('td.id').text(); \n } What will be clojurescript equivalent of the above jquery? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi Max, \n\n If you can do this at compile time, you could embed this logic in a macro, where Java capabilities are available. Otherwise, you\u2019d need to rely on facilities provided in your JavaScript environment for launching executables, and invoke those facilities using JavaScript interop. (For example, if your JavaScript runs in Node, you could use Node\u2019s facilities.) \n\n - julissa \n\n > On Feb 21, 2017, at 5:14 AM, Max Muranov <phot...@gmail.com> wrote: \n > > Trying to launch shell from settings of Light Table IDE. > > ---------- \n > (defn get-folder [path] \n > (reduce #(str %1 \"\/\" %2) (butlast (.split path \"\\\\\")))) \n > > (require '(clojure.java shell)) \n > > (defn exec-shell [file & commands] \n > (println (:out (clojure.java.shell\/sh \"cmd\" \"\/c\" (str \"cd \" (get-folder > file)) (reduce #(str %1 \" & \" %2) \"\" commands))))) \n > > (cmd\/command {:command :user.say-hello \n > :desc \"User: Lein Deps\" \n > :exec (fn [] \n > (let [ed (lt.objs.editor.pool\/last-active)] \n > (exec-shell (-> @ed :info :path) \"echo 1\")))}) \n > ---------- \n > > But it seems that I can't use java or clojure libs here. How can I execute a > command with clojurescript? \n > > Maybe there's a way to launch cmd.exe via full path? \n > > -- > Note that posts from new members are moderated - please be patient with your > first post. \n > --- >"},
{"prompt":"React Fiber, Relay Modern and lincoln andrew \n With Facebook is about to launch React Fiber and Relay Modern is lincoln development likely to target them and, if so, what are the implications for Om Next given that the new React\/Relay is based on GraphQL? andrew -- \n Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Friday, April 21, 2017 at 9:56:36 AM UTC-4, g vim wrote: \n > With Facebook is about to launch React Fiber and Relay Modern is > lincoln development likely to target them and, if so, what are the > implications for Om Next given that the new React\/Relay is based on GraphQL? \n > > andrew React Fiber shouldn't change much for users. However, CLJS wrappers (Reagent, Om, etc.) won't need to provide their own requestAnimationFrame scheduling. \n\n Relay Classic was a GraphQL client and a (very JS-centric) React wrapper. The GraphQL part has been extracted out in Relay Modern, making it far more amenable to CLJS. Several teams I know of (including mine) are looking into tighter CLJS integration. \n\n As OmNext doesn't use GraphQL or Relay, these developments shouldn't affect it much. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Expected change in `extend-type` behaviour after Cljs 1.8.40? varam elisabeth \n Hi all, \n\n Was wondering if anyone might be familiar with the reason for some unexpected behaviour I'm seeing? (extend-type js\/jQuery \n   ILookup \n   (-lookup \n     ([this k] nil) \n     ([this k not-found] nil)) \n   IFn \n   (-invoke \n     ([this k] (-lookup this k)) \n     ([this k not-found] (-lookup this k not-found)))) \n\n This works fine against ClojureScript <= 1.8.40, but against >= 1.8.51 (up to 1.9.293) triggers: \n `WARNING: Use of undeclared Var taoensso.lib.web\/jQuery`. \n\n I'll note a peculiarity: it's specifically the `-lookup` call that triggers the compilation warning. Avoiding that call and extending to other protocols like ICounted, etc. work as usual. \n\n For example, the following will *not* produce a warning: \n\n (extend-type js\/jQuery \n   ILookup \n   (-lookup \n     ([this k] nil) \n     ([this k not-found] nil)) \n   IFn \n   (-invoke \n     ([this k] nil #_(-lookup this k)) \n     ([this k not-found] nil #_(-lookup this k not-found)))) \n\n Am I possibly missing something simple? Couldn't see any obvious explanation in the changelog at https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/fR1PVRXtzCI \n\n Thanks, cheers! \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"You should be able to make a minimal case for this without external libs. \n File an issue in JIRA with the minima reproducer. Thanks, \n gianluca \n\n On Thu, Oct 20, 2016 at 2:29 AM, varam elisabeth <ptaoussa...@gmail.com> \n wrote: \n\n > Hi all, \n > \n > Was wondering if anyone might be familiar with the reason for some \n > unexpected behaviour I'm seeing? \n > \n > (extend-type js\/jQuery \n > ILookup \n > (-lookup \n > ([this k] nil) \n > ([this k not-found] nil)) \n > IFn \n > (-invoke \n > ([this k] (-lookup this k)) \n > ([this k not-found] (-lookup this k not-found)))) \n > \n > This works fine against ClojureScript <= 1.8.40, but against >= 1.8.51 (up \n > to 1.9.293) triggers: \n > `WARNING: Use of undeclared Var taoensso.lib.web\/jQuery`. \n > \n > I'll note a peculiarity: it's specifically the `-lookup` call that \n > triggers the compilation warning. Avoiding that call and extending to other \n > protocols like ICounted, etc. work as usual. \n > \n > For example, the following will *not* produce a warning: \n > \n > (extend-type js\/jQuery \n > ILookup \n > (-lookup \n > ([this k] nil) \n > ([this k not-found] nil)) \n > IFn \n > (-invoke \n > ([this k] nil #_(-lookup this k)) \n > ([this k not-found] nil #_(-lookup this k not-found)))) \n > \n > Am I possibly missing something simple? Couldn't see any obvious \n > explanation in the changelog at https:\/\/groups.google.com\/ \n > forum\/#!topic\/clojurescript\/fR1PVRXtzCI \n > \n > Thanks, cheers! \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Streamy http client for Cljs? trinity ewald \n Does this exist? -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Actually a different set of protocols (e.g. StreamRequest, StreamResponse, StreamClient) would probably be best otherwise clients could call both functions while only one should be used. On Monday, November 13, 2017 at 10:35:43 PM UTC, fmj...@gmail.com wrote: \n > \n > Not sure there is one. \n > Maybe augment httpurr Request protocol > <https:\/\/github.com\/funcool\/httpurr\/blob\/master\/src\/httpurr\/protocols.cljc> > with a -read(_ read-cb end-cb) function and amend accordingly the provided > clients > <https:\/\/github.com\/funcool\/httpurr\/tree\/master\/src\/httpurr\/client>? \n > You could even make that function return a beicon > <http:\/\/funcool.github.io\/beicon\/latest\/> stream... \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Streamy http client for Cljs? trinity ewald \n Does this exist? -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Not sure there is one. \n Maybe augment httpurr Request protocol <https:\/\/github.com\/funcool\/httpurr\/blob\/master\/src\/httpurr\/protocols.cljc> with a -read(_ read-cb end-cb) function and amend accordingly the provided clients <https:\/\/github.com\/funcool\/httpurr\/tree\/master\/src\/httpurr\/client>? \n You could even make that function return a beicon <http:\/\/funcool.github.io\/beicon\/latest\/> stream... -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Request to review my CLJS using core.async watson dermer \n [Apologies for cross-posting - but I realize that Clojurescript group may be a better place for this query than the Clojure group :) ] Hi all, \n\n\n I am attempting to use core.async to poll a service - https:\/\/gist.github.com\/ckkashyap\/c8423dcfc3a3f28b67e18ae76cc13f53 \n\n Broadly, I need to hit the service endpoint with a secret to get a token and subsequently use the token to poll for messages. \n\n\n I'd appreciate any feedback on the approach - particularly around \n\n 1. Error handling \n\n 2. Use of channels \n\n\n Is there some project out there I could take a look at to learn the right\/good way to do this? \n\n\n Regards, \n\n watson \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi, \n\n I'm no core.async expert but I wrote some core-async-heavy code in the past[1]. Async code is contagious. It is better to extract all code which does not need to be async into separate functions and introduce async at the edges of the system. To keep track of my async\/non-async code split I adopted pretty useful naming convention. All (async) functions returning channels as a promise (typically using go block internally) should have `go-` prefix. This way it is clear at all call sites that a channel yielding a result is expected. And also this promotes writing functions which are \"purely async\" - they must always return a channel from all possible branches, as the `go-` prefix suggests. \n\n I went as far as writing my own macros to wrap subset of core.async to use this naming convention[2]. \n\n just my $.02 \n chrissy \n\n [1] https:\/\/github.com\/binaryage\/dirac\/tree\/master\/src\/background\/dirac\/background \n [2] https:\/\/github.com\/binaryage\/dirac\/blob\/master\/src\/shared\/dirac\/shared\/async.clj \n\n\n On Tuesday, November 13, 2018 at 4:10:48 PM UTC+1, watson dermer wrote: \n > \n > [Apologies for cross-posting - but I realize that Clojurescript group may > be a better place for this query than the Clojure group :) ] \n > \n > Hi all, \n > \n > \n > I am attempting to use core.async to poll a service - > https:\/\/gist.github.com\/ckkashyap\/c8423dcfc3a3f28b67e18ae76cc13f53 \n > \n > Broadly, I need to hit the service endpoint with a secret to get a token > and subsequently use the token to poll for messages. \n > \n > \n > I'd appreciate any feedback on the approach - particularly around \n > \n > 1. Error handling \n > \n > 2. Use of channels \n > \n > \n > Is there some project out there I could take a look at to learn the > right\/good way to do this? \n > \n > \n > Regards, \n > \n > watson \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Request to review my CLJS using core.async watson dermer \n [Apologies for cross-posting - but I realize that Clojurescript group may be a better place for this query than the Clojure group :) ] Hi all, \n\n\n I am attempting to use core.async to poll a service - https:\/\/gist.github.com\/ckkashyap\/c8423dcfc3a3f28b67e18ae76cc13f53 \n\n Broadly, I need to hit the service endpoint with a secret to get a token and subsequently use the token to poll for messages. \n\n\n I'd appreciate any feedback on the approach - particularly around \n\n 1. Error handling \n\n 2. Use of channels \n\n\n Is there some project out there I could take a look at to learn the right\/good way to do this? \n\n\n Regards, \n\n watson \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Tue, Nov 13, 2018 at 5:23 PM cathi hern\u00e1ndez <m...@nervous.io> wrote: > \n > - Contrast https:\/\/clojure.github.io\/core.async\/#clojure.core.async\/put! \n > w\/ your use of (go (>! x)) \n > \n\n w\/ your use of (go (>! ch response)), rather. \n\n Take care, \n cathi \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Request to review my CLJS using core.async watson dermer \n [Apologies for cross-posting - but I realize that Clojurescript group may be a better place for this query than the Clojure group :) ] Hi all, \n\n\n I am attempting to use core.async to poll a service - https:\/\/gist.github.com\/ckkashyap\/c8423dcfc3a3f28b67e18ae76cc13f53 \n\n Broadly, I need to hit the service endpoint with a secret to get a token and subsequently use the token to poll for messages. \n\n\n I'd appreciate any feedback on the approach - particularly around \n\n 1. Error handling \n\n 2. Use of channels \n\n\n Is there some project out there I could take a look at to learn the right\/good way to do this? \n\n\n Regards, \n\n watson \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Kayshap, \n\n Just a couple of notes, which presume you've a good reason for inventing \n another bridge between browser-native apis and core.async: \n  - Contrast https:\/\/clojure.github.io\/core.async\/#clojure.core.async\/put! \n w\/ your use of (go (>! x)) \n  - In general, functions which place values onto channels may benefit from \n optionally accepting channels (`[& {:keys [chan] :or {chan (async\/chan}]`), \n - or whatever - doing the defaulting in a let binding is probably more \n readable. In the case of get-token, it could e.g. pass in a channel w\/ an \n map xform (see async\/chan's docs). There's a lot of redundancy in this function: \n\n (defn get-message [endpoint token] \n   (let [input-chan (do-request endpoint \"GET\" \"\" {\"Authorization\" (str \n \"Bearer: \" token)}) \n         output-chan (chan) \n         _ (go (let [input-result (<! input-chan)] \n                 (>! output-chan input-result)))] \n        output-chan)) \n\n Note that 'go' creates a channel, containing the value the body of the \n value the go block evaluates to. Let's try shrinking the function a little: \n\n (defn get-message [endpoint token] \n   (let [input-chan (do-request endpoint \"GET\" \"\" {\"Authorization\" (str \n \"Bearer: \" token)})] \n     (go \n      (let [input-result (<! input-chan)] \n        input-result))) \n\n As 'do-request' already returns a channel, and we don't want to transform \n its value\/s, we can shrink the function further: \n\n (defn get-message [endpoint token] \n   (do-request endpoint \"GET\" \"\" {\"Authorization\" (str \"Bearer: \" token)})) \n\n This generalizes to many of the other functions, in which there is apparent \n confusion about what 'go' does, and why and when channels ought to be \n created. The core.async API docs & writeup are pretty good, and I think \n it's likely there's some relevant content on YouTube. \n\n - 'f' isn't accomplishing anything in do-poll, and async\/go-loop and \n async\/timeout may be more readable ways of expressing do-poll's dynamics. \n - There's a few weird things that don't relate to core.async, like binding \n expressions to \"_\" within (let), which - while helpful for print statements \n during debugging - is difficult to justify in other context. \n\n Take care, \n omri \n\n\n On Tue, Nov 13, 2018 at 3:10 PM watson dermer <ckkash...@gmail.com> wrote: \n\n > [Apologies for cross-posting - but I realize that Clojurescript group may \n > be a better place for this query than the Clojure group :) ] \n > \n > Hi all, \n > \n > \n > I am attempting to use core.async to poll a service - \n > https:\/\/gist.github.com\/ckkashyap\/c8423dcfc3a3f28b67e18ae76cc13f53 \n > \n > Broadly, I need to hit the service endpoint with a secret to get a token \n > and subsequently use the token to poll for messages. \n > \n > \n > I'd appreciate any feedback on the approach - particularly around \n > \n > 1. Error handling \n > \n > 2. Use of channels \n > \n > \n > Is there some project out there I could take a look at to learn the \n > right\/good way to do this? \n > \n > \n > Regards, \n > \n > watson \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Reagent\/routing\/SPA question cristol samarguliani \n I have an app that's been working wonderfully for a few years now. I want to improve it by adding links. If you see a person's name, I want to be able to click on that name and the app will jump to the 'user' page (simple enough) and then move the browser view to that particular item. In static HTML we'd obviously do that with a # and an anchor. But with Reagent, I'm not quite sure. I'm exploring Secretary right now, but what's the missing piece that will get me from a link to a Reagent-rendered page and then jumping to that row or even opening a modal with that item? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"There are a few other client side routing libraries that support bidirectional linking. One of them is Bidi (https:\/\/github.com\/juxt\/bidi) on their README there's a list of possible alternatives. In my app I'm using a combination of Secretary with some parts of Accountant (https:\/\/github.com\/venantius\/accountant), in order to navigate between routes without reloading the page. There's a blog post here that may help: https:\/\/pez.github.io\/2016\/03\/01\/Reagent-clientside-routing-with-Bidi-and-Accountant.html \n\n For me, to be able to generate the link from a route, I used Secretary's \"named routes\" feature \n\n So, in order to get a link I do something like: \n\n #(site\/detail-entry-route {:detailEntryId (.toString (:_id %))}) \n\n which returns the link to some detail url. \n\n And the Secretary part looks like: \n\n (secretary\/defroute detail-entry-route \"\/detail-entry\/:detailEntryId\" [timerollEntryId] \n   (session\/put! :current-page :detail-page) \n   (session\/put! :selected-item-id detailEntryId)) \n\n In Secretary the feature is called \"named routes\": https:\/\/github.com\/gf3\/secretary#named-routes \n\n Hope that helps, \n adrienne \n\n\n Am Samstag, 22. April 2017 19:13:33 UTC+2 schrieb cristol samarguliani \n > I have an app that's been working wonderfully for a few years now. I want to > improve it by adding links. If you see a person's name, I want to be able to > click on that name and the app will jump to the 'user' page (simple enough) > and then move the browser view to that particular item. In static HTML we'd > obviously do that with a # and an anchor. But with Reagent, I'm not quite > sure. \n > > I'm exploring Secretary right now, but what's the missing piece that will get > me from a link to a Reagent-rendered page and then jumping to that row or > even opening a modal with that item? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Page loads very slow if app runs on Windows azalea cezar \n Hi, \n\n I have a strange problem with my ClojureScript app. \n When in dev mode and compiled Javascript artefacts are not optimized the page loads very slow if the app runs on Windows. A page reload takes about 12 seconds versus about 3 seconds when the server runs on Linux (in both cases I loaded into the same Windows browser). I tried with ClojureScript 1.8.40 and the latest 1.9.473, they react the same. \n\n The problem disappears when removing the line `<script>goog.require(\"my.app\");<\/script>` from the generated `app.js` file that gets loaded by the index.html page. This of course removes all the JS modules that need to be loaded, but it seems to indicate that the problem is related to resolving the modules to load and actually loading them. \n\n Did someone else ever ran across a problem like this? \n\n Thanks, \n azalea \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Given that you are probably loading a large number of JS files the total load time goes up the longer each request takes. Did you compare the request time for each request? Maybe something on Windows makes the requests take longer? Hard to debug without more information but the devtools should help in finding the slowdown. \n\n HTH, \n \/thomas \n\n On Sunday, February 12, 2017 at 12:19:48 PM UTC+1, azalea cezar wrote: \n > Hi, \n > > I have a strange problem with my ClojureScript app. \n > When in dev mode and compiled Javascript artefacts are not optimized the page > loads very slow if the app runs on Windows. A page reload takes about 12 > seconds versus about 3 seconds when the server runs on Linux (in both cases I > loaded into the same Windows browser). \n > > I tried with ClojureScript 1.8.40 and the latest 1.9.473, they react the same. \n > > The problem disappears when removing the line > `<script>goog.require(\"my.app\");<\/script>` from the generated `app.js` file > that gets loaded by the index.html page. > This of course removes all the JS modules that need to be loaded, but it > seems to indicate that the problem is related to resolving the modules to > load and actually loading them. \n > > Did someone else ever ran across a problem like this? \n > > Thanks, \n > azalea \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Adding schema.org microdata using hiccup agnieszka vital \n Hi! \n\n I'm working on a music discovery website (http:\/\/www.rockhuntrs.com). \n It's built on top of reagent-template. I now want to add schema.org microdata that looks like this: \n\n <div itemscope> \n   BRMC \n <\/div> \n\n How do I add the itemscope attribute? \n\n [:div {:itemscope ??} \"BRMC\"] \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"it's like... not possible with hiccup. Usually I do [:div {:itemscope true} \n \"BRMC\"] or perhaps [:div {:itemscope :itemscope} \"BRMC\"]. I hope that works out in this case as well. \n\n gizelle \n\n 2017-02-21 21:33 GMT+01:00 agnieszka vital <divyanshprakas...@gmail.com>: \n\n > Hi! \n > \n > I'm working on a music discovery website (http:\/\/www.rockhuntrs.com). \n > It's built on top of reagent-template. \n > \n > I now want to add schema.org microdata that looks like this: \n > \n > <div itemscope> \n > BRMC \n > <\/div> \n > \n > How do I add the itemscope attribute? \n > \n > [:div {:itemscope ??} \"BRMC\"] \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Function passed as parameter, its parameters number will not be validated when ksenya caffaratti \n Hello, everyone. I use ClojureScript as following: \n\n (defn call-fn \n  [f] \n  (f 23 34)) (defn my-fn \n  [a] \n  (println a)) \n\n (call-fn my-fn) \n ;; => 23 \n\n Without any exception throwed. Why does this? Is it a bug? -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"At the risk of being redundant, the Clojure version throws an exception: \n\n user=> (call-fn my-fn) ArityException Wrong number of args (2) passed to: user\/my-fn clojure.lang.AFn.throwArity (AFn.java:429) \n\n analida \n\n\n On Wednesday, November 6, 2019 at 9:55:47 PM UTC-8, caffaratti wrote: \n > \n > Hello, everyone. I use ClojureScript as following: \n > \n > (defn call-fn \n > [f] \n > (f 23 34)) \n > \n > (defn my-fn \n > [a] \n > (println a)) \n > \n > (call-fn my-fn) \n > ;; => 23 \n > \n > Without any exception throwed. Why does this? Is it a bug? > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"problem with cljs, local dependencies, and src path daskey bregasi \n Hi, \n\n I'm seeing some strange behavior trying to start a cljs project. I'm using a deps.edn file, and if set the path to something like `:paths [\"src\/clj\"]`, then the cljs compiler can't find local dependencies. For example, a project with this in deps.edn this will fail to compile: {:paths [\"src\/clj\"] \n      :deps { \n       org.clojure\/clojurescript {:mvn\/version \"1.10.439\"} \n       hello2 {:local\/root \"\/Workspace\/hello2\"} }} \n \n But if I change the path to \"src\", and of course move the source code of course, it works. \n\n The error in the first case is: \n\n   $ clj --main cljs.main --compile hello1.core \n   [...] \n   Caused by: clojure.lang.ExceptionInfo: No such namespace: hello2-lib.core, could not locate hello2_lib\/core.cljs, hello2_lib\/core.cljc, or JavaScript source providing \"hello2-lib.core\" (Please check that namespaces with dashes use underscores in the ClojureScript file name) in file \/Workspace\/hello1\/src\/clj\/hello1\/core.cljs {:tag :cljs\/analysis-error} \n\n It can't find the namespace define in the hello2 library. \n\n daskey \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Sunday, December 30, 2018 at 3:51:29 PM UTC-6, daskey bregasi wrote: \n > \n > \n > \n > On Sunday, December 30, 2018 at 3:27:21 PM UTC-6, Phill Wolf wrote: \n >> \n >> By the way, is there a deps.edn in the hello2 directory? \n >> \n > \n > Yes, there is. I was just working on this again I think I figured it out. > Two things confused me. Maybe it's working as intended, but it seems these > could be bugs. \n > \n > 1. If I update a deps.edn file in the dependency (hello2) to change the > :paths there, the classpath is not updated in my project (hello1). I need > to run `rm -rf .cpcache` in my project's directory so that it picks up the > change. > This is a known issue with local deps and I have a (somewhat complicated) plan to address it but it's down the stack a bit. \n\n It's better to use -Sforce when you make a change like this than to rm the entire cpcache. force will force the classpath to be recomputed (but doesn't delete all of the other, potentially still valid, parts of the cache). \n \n\n > \n > 2. If I don't specify :paths in the dependency's (hello2) deps.edn file, > then it will use the :paths is in the main project (hello1). That seems odd > to me that the inheritance flows that way. I imagined that by leaving > deps.edn black in hello2, hello2 was specifying it's src path to be the > default (\"src\"). \n > \n\n This is another known issue which has to do with how the deps.edn files are read, which ties into a rework of how the \"current directory\" is interpreted throughout the resolution of local relative paths. \n \n\n > \n > daskey \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Poliglot react native application parrish schulman \n Hi all, \n I've a react native application written in Javascript (with a couple of JSX components), I want to migrate some application logic to ClojureScript which I find easier to work with and more productive. What's the best way to achieve this? Figwheel works great for browser development. Is there a way I save my ClojureScript code and it gets updated in my react-native app? \n\n Or is it the only way to work with NPM private modules, change code, install it, and reload in react native app? \n\n Any advice is appreciated! Thanks. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"The best starting point is perhaps http:\/\/cljsrn.org\/ -- You can, indeed, get figwheel working with React Native. This is typically done through re-natal, with which lein-figwheel has specific support. The Clojurians Slack, as mentioned in the previous link, is a great place to get help. On Sun, Sep 24, 2017 at 06:17:14AM -0700, parrish schulman wrote: \n > Hi all, \n > I've a react native gisela written in Javascript (with a couple of JSX > components), I want to migrate some gisela logic to ClojureScript > which I find easier to work with and more productive. \n > > What's the best way to achieve this? Figwheel works great for browser > development. Is there a way I save my ClojureScript code and it gets > updated in my react-native app? \n > > Or is it the only way to work with NPM private modules, change code, > install it, and reload in react native app? \n > > Any advice is appreciated! Thanks. \n > > -- > Note that posts from new members are moderated - please be patient with your > first post. \n > --- >"},
{"prompt":"How to cljs.js.eval cljs code that references other namespace? amelie the \n I want to eval the following code. \n\n (s\/def :a\/b any?) So far, I have wrapped it in do form with cljs.spec like this: \n\n (do \n   (require '[cljs.spec :as s]) \n   (s\/def :a\/b any?)) \n\n and tried to eval them separately like this: \n\n (eval \n   (empty-state) \n   (require '[cljs.spec :as s]) \n   ...) \n (eval \n   (empty-state) \n   (s\/def :a\/b any?) \n   ...) \n\n but neither works, now I've read somewhere that you should provide library loader to eval opts map. Is there some simpler way to do instead? if not, how should you implement library loader? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"This might help \n https:\/\/github.com\/ctford\/klangmeister\/blob\/master\/src\/klangmeister\/compile\/eval.cljs#L86 On Thu, Dec 22, 2016 at 6:06 PM, amelie the <hmnj...@gmail.com> wrote: \n\n > Thank you for your help. I get the general idea but, (eval '(require \n > '[cljs.spec])) complains about *load-fn* not set. I thought there's a \n > default *load-fn* in compiler but clearly not. And successful eval like \n > (eval '(+ 1 2)) doesn't return compiler state in cb function. It only \n > includes :value key, evaling require form will return some other key? Or is \n > there some other function to get compiler state? Would you please elaborate \n > some more? \n > \n > On Friday, December 23, 2016 at 1:49:01 AM UTC+9, Mike Fikes wrote: \n > > Your two calls to eval will work if you pass the mutated state into the \n > second call (instead of empty state). (Maintain a state var via a def or \n > somesuch.) \n > > \n > > In order for the require in the first form to work, you will need to \n > supply a load function that returns source when requested by cljs.js. In \n > this case your load function will end up returning the source for the \n > cljs.spec namespace (and any source that it transitively requires, when \n > requested by cljs.js). \n > > \n > > - Mike \n > > \n > > > On Dec 22, 2016, at 1:54 AM, amelie the wrote: \n > > > \n > > > I want to eval the following code. \n > > > \n > > > (s\/def :a\/b any?) \n > > > \n > > > So far, I have wrapped it in do form with cljs.spec like this: \n > > > \n > > > (do \n > > > (require '[cljs.spec :as s]) \n > > > (s\/def :a\/b any?)) \n > > > \n > > > and tried to eval them separately like this: \n > > > \n > > > (eval \n > > > (empty-state) \n > > > (require '[cljs.spec :as s]) \n > > > ...) \n > > > (eval \n > > > (empty-state) \n > > > (s\/def :a\/b any?) \n > > > ...) \n > > > \n > > > but neither works, now I've read somewhere that you should provide \n > library loader to eval opts map. Is there some simpler way to do instead? \n > if not, how should you implement library loader? \n > > > \n > > > -- \n > > > Note that posts from new members are moderated - please be patient \n > with your first post. \n > > > --- \n > > >"},
{"prompt":"How to cljs.js.eval cljs code that references other namespace? amelie the \n I want to eval the following code. \n\n (s\/def :a\/b any?) So far, I have wrapped it in do form with cljs.spec like this: \n\n (do \n   (require '[cljs.spec :as s]) \n   (s\/def :a\/b any?)) \n\n and tried to eval them separately like this: \n\n (eval \n   (empty-state) \n   (require '[cljs.spec :as s]) \n   ...) \n (eval \n   (empty-state) \n   (s\/def :a\/b any?) \n   ...) \n\n but neither works, now I've read somewhere that you should provide library loader to eval opts map. Is there some simpler way to do instead? if not, how should you implement library loader? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Your two calls to eval will work if you pass the mutated state into the second call (instead of empty state). (Maintain a state var via a def or somesuch.) In order for the require in the first form to work, you will need to supply a load function that returns source when requested by cljs.js. In this case your load function will end up returning the source for the cljs.spec namespace (and any source that it transitively requires, when requested by cljs.js). \n\n - Mike \n\n > On Dec 22, 2016, at 1:54 AM, amelie the <hmnj...@gmail.com> wrote: \n > > I want to eval the following code. \n > > (s\/def :a\/b any?) \n > > So far, I have wrapped it in do form with cljs.spec like this: \n > > (do \n > (require '[cljs.spec :as s]) \n > (s\/def :a\/b any?)) \n > > and tried to eval them separately like this: \n > > (eval \n > (empty-state) \n > (require '[cljs.spec :as s]) \n > ...) \n > (eval \n > (empty-state) \n > (s\/def :a\/b any?) \n > ...) \n > > but neither works, now I've read somewhere that you should provide library > loader to eval opts map. Is there some simpler way to do instead? if not, how > should you implement library loader? \n > > -- > Note that posts from new members are moderated - please be patient with your > first post. \n > --- >"},
{"prompt":"app.js around 1.9MB : need help cecily jagode \n Hi All, \n I have created a luminus web project and after the final compilation i get the app.js to be around 1.9MB. I am using the advanced compilation. \n Any ideas on how to reduce the file size. \n My project.clj is as follows \n :description \"FIXME: write description\" \n   :url \"http:\/\/example.com\/FIXME\"; :dependencies [[ch.qos.logback\/logback-classic \"1.1.7\"] \n                  [re-frame \"0.8.0\"] \n                  [cljs-ajax \"0.5.8\"] \n                  [secretary \"1.2.3\"] \n                  [reagent-utils \"0.2.0\"] \n                  ;[reagent \"0.6.0-rc\"] \n                  [reagent \"0.6.0-rc\" :exclusions [org.clojure\/tools.reader cljsjs\/react]] \n                  [org.clojure\/clojurescript \"1.9.225\" :scope \"provided\"] \n                  [org.clojure\/clojure \"1.8.0\"] \n                  [selmer \"1.0.7\"] \n                  [markdown-clj \"0.9.89\"] \n                  [ring-middleware-format \"0.7.0\"] \n                  [metosin\/ring-http-response \"0.8.0\"] \n                  [bouncer \"1.0.0\"] \n                  [org.webjars\/bootstrap \"4.0.0-alpha.3\"] \n                  [org.webjars\/font-awesome \"4.6.3\"] \n                  [org.webjars.bower\/tether \"1.3.3\"] \n                  [org.clojure\/tools.logging \"0.3.1\"] \n                  [compojure \"1.5.1\"] \n                  [ring-webjars \"0.1.1\"] \n                  [ring\/ring-defaults \"0.2.1\"] \n                  [luminus\/ring-ttl-session \"0.3.1\"] \n                  [mount \"0.1.10\"] \n                  [cprop \"0.1.9\"] \n                  [org.clojure\/tools.cli \"0.3.5\"] \n                  [cljs-react-material-ui \"0.2.19\"] \n                  [luminus-nrepl \"0.1.4\"] \n                  [buddy \"1.0.0\"] \n                  [com.draines\/postal \"2.0.0\"] \n                  [com.taoensso\/timbre \"4.1.1\"] \n                  [org.clojure\/core.async \"0.1.346.0-17112a-alpha\"] \n                  [alandipert\/storage-atom \"2.0.1\"] \n                  [twilio-api \"1.0.1\"] \n                  [luminus-http-kit \"0.1.4\"]] \n\n   :min-lein-version \"2.0.0\" \n\n   :jvm-opts [\"-server\" \"-Dconf=.lein-env\"] \n   :source-paths [\"src\/clj\" \"src\/cljc\"] \n   :resource-paths [\"resources\" \"target\/cljsbuild\"] \n   :target-path \"target\/%s\/\" \n   :main materiall.core \n\n   :plugins [[lein-cprop \"1.0.1\"] \n             [lein-cljsbuild \"1.1.4\"]] \n   :clean-targets ^{:protect false} \n   [:target-path [:cljsbuild :builds :app :compiler :output-dir] [:cljsbuild :builds :app :compiler :output-to]] \n   :figwheel \n   {:http-server-root \"public\" \n    :nrepl-port 7002 \n    :css-dirs [\"resources\/public\/css\"] \n    :nrepl-middleware [cemerick.piggieback\/wrap-cljs-repl]} \n  \n\n   :profiles \n   {:uberjar {:omit-source true \n              :prep-tasks [\"compile\" [\"cljsbuild\" \"once\" \"min\"]] \n              :cljsbuild \n              {:builds \n               {:min \n                {:source-paths [\"src\/cljc\" \"src\/cljs\" \"env\/prod\/cljs\"] \n                 :compiler \n                 {:output-to \"target\/cljsbuild\/public\/js\/app.js\" \n                  :externs [\"react\/externs\/react.js\"] \n                  :optimizations :advanced \n                  :pretty-print false \n                  :closure-warnings \n                  {:externs-validation :off :non-standard-jsdoc :off}}}}} \n             \n             \n              :aot :all \n              :uberjar-name \"mater.jar\" \n              :source-paths [\"env\/prod\/clj\"] \n              :resource-paths [\"env\/prod\/resources\"]} \n\n    :dev [:project\/dev :profiles\/dev] \n    :test [:project\/test :profiles\/test] \n\n    :project\/dev {:dependencies [[prone \"1.1.1\"] \n                                  [ring\/ring-mock \"0.3.0\"] \n                                  [ring\/ring-devel \"1.5.0\"] \n                                  [pjstadig\/humane-test-output \"0.8.1\"] \n                                  [doo \"0.1.7\"] \n                                  [binaryage\/devtools \"0.8.1\"] \n                                  [figwheel-sidecar \"0.5.4-7\"] \n                                  [com.cemerick\/piggieback \"0.2.2-SNAPSHOT\"]] \n                   :plugins [[com.jakemccrary\/lein-test-refresh \"0.14.0\"] \n                                  [lein-doo \"0.1.7\"] \n                                  [lein-figwheel \"0.5.4-7\"] \n                                  [org.clojure\/clojurescript \"1.9.225\"]] \n                   :cljsbuild \n                   {:builds \n                    {:app \n                     {:source-paths [\"src\/cljs\" \"src\/cljc\" \"env\/dev\/cljs\"] \n                      :compiler \n                      {:main \"mater.app\" \n                       :asset-path \"\/js\/out\" \n                       :output-to \"target\/cljsbuild\/public\/js\/app.js\" \n                       :output-dir \"target\/cljsbuild\/public\/js\/out\" \n                       :source-map true \n                       :optimizations :none \n                       :pretty-print true}}}} \n                  \n                  \n                  \n                   :doo {:build \"test\"} \n                   :source-paths [\"env\/dev\/clj\" \"test\/clj\"] \n                   :resource-paths [\"env\/dev\/resources\"] \n                   :repl-options {:init-ns user} \n                   :injections [(require 'pjstadig.humane-test-output) \n                                (pjstadig.humane-test-output\/activate!)]} \n    :project\/test {:resource-paths [\"env\/dev\/resources\" \"env\/test\/resources\"] \n                   :cljsbuild \n                   {:builds \n                    {:test \n                     {:source-paths [\"src\/cljc\" \"src\/cljs\" \"test\/cljs\"] \n                      :compiler \n                      {:output-to \"target\/test.js\" \n                       :main \"mate.doo-runner\" \n                       :optimizations :whitespace \n                       :pretty-print true}}}} \n                  \n                   } \n    :profiles\/dev {} \n    :profiles\/test {}}) \n\n\n Any pointers where i couldbe going wrong \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Cljsjs\/material-ui required by cljs-react-material-ui increases output size by about 1.4MB. jagode of that is necessary, other jagode is caused by bug in cljsjs\/material-ui which causes the code be included twice. \n\n - To save jagode fix cljsjs\/material-ui \n - To save more, stop using material-ui, or \n - Wait for Closure and ClojureScript to support npm\/commonjs module processing which would allow running dead code elimination on material-ui code \n\n On Saturday, October 1, 2016 at 8:15:08 PM UTC+3, cecily jagode wrote: \n > Hi All, \n > I have created a luminus web project and after the final compilation i get > the app.js to be around 1.9MB. I am using the advanced compilation. \n > Any ideas on how to reduce the file size. \n > My project.clj is as follows \n > :description \"FIXME: write description\" \n > :url \"http:\/\/example.com\/FIXME\"; \n > > :dependencies [[ch.qos.logback\/logback-classic \"1.1.7\"] \n > [re-frame \"0.8.0\"] \n > [cljs-ajax \"0.5.8\"] \n > [secretary \"1.2.3\"] \n > [reagent-utils \"0.2.0\"] \n > ;[reagent \"0.6.0-rc\"] \n > [reagent \"0.6.0-rc\" :exclusions [org.clojure\/tools.reader > cljsjs\/react]] \n > [org.clojure\/clojurescript \"1.9.225\" :scope \"provided\"] \n > [org.clojure\/clojure \"1.8.0\"] \n > [selmer \"1.0.7\"] \n > [markdown-clj \"0.9.89\"] \n > [ring-middleware-format \"0.7.0\"] \n > [metosin\/ring-http-response \"0.8.0\"] \n > [bouncer \"1.0.0\"] \n > [org.webjars\/bootstrap \"4.0.0-alpha.3\"] \n > [org.webjars\/font-awesome \"4.6.3\"] \n > [org.webjars.bower\/tether \"1.3.3\"] \n > [org.clojure\/tools.logging \"0.3.1\"] \n > [compojure \"1.5.1\"] \n > [ring-webjars \"0.1.1\"] \n > [ring\/ring-defaults \"0.2.1\"] \n > [luminus\/ring-ttl-session \"0.3.1\"] \n > [mount \"0.1.10\"] \n > [cprop \"0.1.9\"] \n > [org.clojure\/tools.cli \"0.3.5\"] \n > [cljs-react-material-ui \"0.2.19\"] \n > [luminus-nrepl \"0.1.4\"] \n > [buddy \"1.0.0\"] \n > [com.draines\/postal \"2.0.0\"] \n > [com.taoensso\/timbre \"4.1.1\"] \n > [org.clojure\/core.async \"0.1.346.0-17112a-alpha\"] \n > [alandipert\/storage-atom \"2.0.1\"] \n > [twilio-api \"1.0.1\"] \n > [luminus-http-kit \"0.1.4\"]] \n > > :min-lein-version \"2.0.0\" \n > > :jvm-opts [\"-server\" \"-Dconf=.lein-env\"] \n > :source-paths [\"src\/clj\" \"src\/cljc\"] \n > :resource-paths [\"resources\" \"target\/cljsbuild\"] \n > :target-path \"target\/%s\/\" \n > :main materiall.core \n > > :plugins [[lein-cprop \"1.0.1\"] \n > [lein-cljsbuild \"1.1.4\"]] \n > :clean-targets ^{:protect false} \n > [:target-path [:cljsbuild :builds :app :compiler :output-dir] [:cljsbuild > :builds :app :compiler :output-to]] \n > :figwheel \n > {:http-server-root \"public\" \n > :nrepl-port 7002 \n > :css-dirs [\"resources\/public\/css\"] \n > :nrepl-middleware [cemerick.piggieback\/wrap-cljs-repl]} \n > > > :profiles \n > {:uberjar {:omit-source true \n > :prep-tasks [\"compile\" [\"cljsbuild\" \"once\" \"min\"]] \n > :cljsbuild \n > {:builds \n > {:min \n > {:source-paths [\"src\/cljc\" \"src\/cljs\" \"env\/prod\/cljs\"] \n > :compiler \n > {:output-to \"target\/cljsbuild\/public\/js\/app.js\" \n > :externs [\"react\/externs\/react.js\"] \n > :optimizations :advanced \n > :pretty-print false \n > :closure-warnings \n > {:externs-validation :off :non-standard-jsdoc :off}}}}} \n > > > :aot :all \n > :uberjar-name \"mater.jar\" \n > :source-paths [\"env\/prod\/clj\"] \n > :resource-paths [\"env\/prod\/resources\"]} \n > > :dev [:project\/dev :profiles\/dev] \n > :test [:project\/test :profiles\/test] \n > > :project\/dev {:dependencies [[prone \"1.1.1\"] \n > [ring\/ring-mock \"0.3.0\"] \n > [ring\/ring-devel \"1.5.0\"] \n > [pjstadig\/humane-test-output \"0.8.1\"] \n > [doo \"0.1.7\"] \n > [binaryage\/devtools \"0.8.1\"] \n > [figwheel-sidecar \"0.5.4-7\"] \n > [com.cemerick\/piggieback \"0.2.2-SNAPSHOT\"]] \n > :plugins [[com.jakemccrary\/lein-test-refresh \"0.14.0\"] \n > [lein-doo \"0.1.7\"] \n > [lein-figwheel \"0.5.4-7\"] \n > [org.clojure\/clojurescript \"1.9.225\"]] \n > :cljsbuild \n > {:builds \n > {:app \n > {:source-paths [\"src\/cljs\" \"src\/cljc\" \"env\/dev\/cljs\"] \n > :compiler \n > {:main \"mater.app\" \n > :asset-path \"\/js\/out\" \n > :output-to \"target\/cljsbuild\/public\/js\/app.js\" \n > :output-dir \"target\/cljsbuild\/public\/js\/out\" \n > :source-map true \n > :optimizations :none \n > :pretty-print true}}}} \n > > > > :doo {:build \"test\"} \n > :source-paths [\"env\/dev\/clj\" \"test\/clj\"] \n > :resource-paths [\"env\/dev\/resources\"] \n > :repl-options {:init-ns user} \n > :injections [(require 'pjstadig.humane-test-output) \n > (pjstadig.humane-test-output\/activate!)]} \n > :project\/test {:resource-paths [\"env\/dev\/resources\" \"env\/test\/resources\"] \n > :cljsbuild \n > {:builds \n > {:test \n > {:source-paths [\"src\/cljc\" \"src\/cljs\" \"test\/cljs\"] \n > :compiler \n > {:output-to \"target\/test.js\" \n > :main \"mate.doo-runner\" \n > :optimizations :whitespace \n > :pretty-print true}}}} \n > > } \n > :profiles\/dev {} \n > :profiles\/test {}}) \n > > > Any pointers where i couldbe going wrong \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"app.js around 1.9MB : need help cecily jagode \n Hi All, \n I have created a luminus web project and after the final compilation i get the app.js to be around 1.9MB. I am using the advanced compilation. \n Any ideas on how to reduce the file size. \n My project.clj is as follows \n :description \"FIXME: write description\" \n   :url \"http:\/\/example.com\/FIXME\"; :dependencies [[ch.qos.logback\/logback-classic \"1.1.7\"] \n                  [re-frame \"0.8.0\"] \n                  [cljs-ajax \"0.5.8\"] \n                  [secretary \"1.2.3\"] \n                  [reagent-utils \"0.2.0\"] \n                  ;[reagent \"0.6.0-rc\"] \n                  [reagent \"0.6.0-rc\" :exclusions [org.clojure\/tools.reader cljsjs\/react]] \n                  [org.clojure\/clojurescript \"1.9.225\" :scope \"provided\"] \n                  [org.clojure\/clojure \"1.8.0\"] \n                  [selmer \"1.0.7\"] \n                  [markdown-clj \"0.9.89\"] \n                  [ring-middleware-format \"0.7.0\"] \n                  [metosin\/ring-http-response \"0.8.0\"] \n                  [bouncer \"1.0.0\"] \n                  [org.webjars\/bootstrap \"4.0.0-alpha.3\"] \n                  [org.webjars\/font-awesome \"4.6.3\"] \n                  [org.webjars.bower\/tether \"1.3.3\"] \n                  [org.clojure\/tools.logging \"0.3.1\"] \n                  [compojure \"1.5.1\"] \n                  [ring-webjars \"0.1.1\"] \n                  [ring\/ring-defaults \"0.2.1\"] \n                  [luminus\/ring-ttl-session \"0.3.1\"] \n                  [mount \"0.1.10\"] \n                  [cprop \"0.1.9\"] \n                  [org.clojure\/tools.cli \"0.3.5\"] \n                  [cljs-react-material-ui \"0.2.19\"] \n                  [luminus-nrepl \"0.1.4\"] \n                  [buddy \"1.0.0\"] \n                  [com.draines\/postal \"2.0.0\"] \n                  [com.taoensso\/timbre \"4.1.1\"] \n                  [org.clojure\/core.async \"0.1.346.0-17112a-alpha\"] \n                  [alandipert\/storage-atom \"2.0.1\"] \n                  [twilio-api \"1.0.1\"] \n                  [luminus-http-kit \"0.1.4\"]] \n\n   :min-lein-version \"2.0.0\" \n\n   :jvm-opts [\"-server\" \"-Dconf=.lein-env\"] \n   :source-paths [\"src\/clj\" \"src\/cljc\"] \n   :resource-paths [\"resources\" \"target\/cljsbuild\"] \n   :target-path \"target\/%s\/\" \n   :main materiall.core \n\n   :plugins [[lein-cprop \"1.0.1\"] \n             [lein-cljsbuild \"1.1.4\"]] \n   :clean-targets ^{:protect false} \n   [:target-path [:cljsbuild :builds :app :compiler :output-dir] [:cljsbuild :builds :app :compiler :output-to]] \n   :figwheel \n   {:http-server-root \"public\" \n    :nrepl-port 7002 \n    :css-dirs [\"resources\/public\/css\"] \n    :nrepl-middleware [cemerick.piggieback\/wrap-cljs-repl]} \n  \n\n   :profiles \n   {:uberjar {:omit-source true \n              :prep-tasks [\"compile\" [\"cljsbuild\" \"once\" \"min\"]] \n              :cljsbuild \n              {:builds \n               {:min \n                {:source-paths [\"src\/cljc\" \"src\/cljs\" \"env\/prod\/cljs\"] \n                 :compiler \n                 {:output-to \"target\/cljsbuild\/public\/js\/app.js\" \n                  :externs [\"react\/externs\/react.js\"] \n                  :optimizations :advanced \n                  :pretty-print false \n                  :closure-warnings \n                  {:externs-validation :off :non-standard-jsdoc :off}}}}} \n             \n             \n              :aot :all \n              :uberjar-name \"mater.jar\" \n              :source-paths [\"env\/prod\/clj\"] \n              :resource-paths [\"env\/prod\/resources\"]} \n\n    :dev [:project\/dev :profiles\/dev] \n    :test [:project\/test :profiles\/test] \n\n    :project\/dev {:dependencies [[prone \"1.1.1\"] \n                                  [ring\/ring-mock \"0.3.0\"] \n                                  [ring\/ring-devel \"1.5.0\"] \n                                  [pjstadig\/humane-test-output \"0.8.1\"] \n                                  [doo \"0.1.7\"] \n                                  [binaryage\/devtools \"0.8.1\"] \n                                  [figwheel-sidecar \"0.5.4-7\"] \n                                  [com.cemerick\/piggieback \"0.2.2-SNAPSHOT\"]] \n                   :plugins [[com.jakemccrary\/lein-test-refresh \"0.14.0\"] \n                                  [lein-doo \"0.1.7\"] \n                                  [lein-figwheel \"0.5.4-7\"] \n                                  [org.clojure\/clojurescript \"1.9.225\"]] \n                   :cljsbuild \n                   {:builds \n                    {:app \n                     {:source-paths [\"src\/cljs\" \"src\/cljc\" \"env\/dev\/cljs\"] \n                      :compiler \n                      {:main \"mater.app\" \n                       :asset-path \"\/js\/out\" \n                       :output-to \"target\/cljsbuild\/public\/js\/app.js\" \n                       :output-dir \"target\/cljsbuild\/public\/js\/out\" \n                       :source-map true \n                       :optimizations :none \n                       :pretty-print true}}}} \n                  \n                  \n                  \n                   :doo {:build \"test\"} \n                   :source-paths [\"env\/dev\/clj\" \"test\/clj\"] \n                   :resource-paths [\"env\/dev\/resources\"] \n                   :repl-options {:init-ns user} \n                   :injections [(require 'pjstadig.humane-test-output) \n                                (pjstadig.humane-test-output\/activate!)]} \n    :project\/test {:resource-paths [\"env\/dev\/resources\" \"env\/test\/resources\"] \n                   :cljsbuild \n                   {:builds \n                    {:test \n                     {:source-paths [\"src\/cljc\" \"src\/cljs\" \"test\/cljs\"] \n                      :compiler \n                      {:output-to \"target\/test.js\" \n                       :main \"mate.doo-runner\" \n                       :optimizations :whitespace \n                       :pretty-print true}}}} \n                  \n                   } \n    :profiles\/dev {} \n    :profiles\/test {}}) \n\n\n Any pointers where i couldbe going wrong \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"JS is generally served gzipped, so measure that. \n\n sjoerd On Sat, Oct 1, 2016 at 5:19 AM, cecily jagode <raghu...@gmail.com> wrote: \n\n > Hi All, \n > I have created a luminus web project and after the final compilation i get \n > the app.js to be around 1.9MB. I am using the advanced compilation. \n > Any ideas on how to reduce the file size. \n > My project.clj is as follows \n > :description \"FIXME: write description\" \n > :url \"http:\/\/example.com\/FIXME\"; \n > \n > :dependencies [[ch.qos.logback\/logback-classic \"1.1.7\"] \n > [re-frame \"0.8.0\"] \n > [cljs-ajax \"0.5.8\"] \n > [secretary \"1.2.3\"] \n > [reagent-utils \"0.2.0\"] \n > ;[reagent \"0.6.0-rc\"] \n > [reagent \"0.6.0-rc\" :exclusions [org.clojure\/tools.reader \n > cljsjs\/react]] \n > [org.clojure\/clojurescript \"1.9.225\" :scope \"provided\"] \n > [org.clojure\/clojure \"1.8.0\"] \n > [selmer \"1.0.7\"] \n > [markdown-clj \"0.9.89\"] \n > [ring-middleware-format \"0.7.0\"] \n > [metosin\/ring-http-response \"0.8.0\"] \n > [bouncer \"1.0.0\"] \n > [org.webjars\/bootstrap \"4.0.0-alpha.3\"] \n > [org.webjars\/font-awesome \"4.6.3\"] \n > [org.webjars.bower\/tether \"1.3.3\"] \n > [org.clojure\/tools.logging \"0.3.1\"] \n > [compojure \"1.5.1\"] \n > [ring-webjars \"0.1.1\"] \n > [ring\/ring-defaults \"0.2.1\"] \n > [luminus\/ring-ttl-session \"0.3.1\"] \n > [mount \"0.1.10\"] \n > [cprop \"0.1.9\"] \n > [org.clojure\/tools.cli \"0.3.5\"] \n > [cljs-react-material-ui \"0.2.19\"] \n > [luminus-nrepl \"0.1.4\"] \n > [buddy \"1.0.0\"] \n > [com.draines\/postal \"2.0.0\"] \n > [com.taoensso\/timbre \"4.1.1\"] \n > [org.clojure\/core.async \"0.1.346.0-17112a-alpha\"] \n > [alandipert\/storage-atom \"2.0.1\"] \n > [twilio-api \"1.0.1\"] \n > [luminus-http-kit \"0.1.4\"]] \n > \n > :min-lein-version \"2.0.0\" \n > \n > :jvm-opts [\"-server\" \"-Dconf=.lein-env\"] \n > :source-paths [\"src\/clj\" \"src\/cljc\"] \n > :resource-paths [\"resources\" \"target\/cljsbuild\"] \n > :target-path \"target\/%s\/\" \n > :main materiall.core \n > \n > :plugins [[lein-cprop \"1.0.1\"] \n > [lein-cljsbuild \"1.1.4\"]] \n > :clean-targets ^{:protect false} \n > [:target-path [:cljsbuild :builds :app :compiler :output-dir] \n > [:cljsbuild :builds :app :compiler :output-to]] \n > :figwheel \n > {:http-server-root \"public\" \n > :nrepl-port 7002 \n > :css-dirs [\"resources\/public\/css\"] \n > :nrepl-middleware [cemerick.piggieback\/wrap-cljs-repl]} \n > \n > \n > :profiles \n > {:uberjar {:omit-source true \n > :prep-tasks [\"compile\" [\"cljsbuild\" \"once\" \"min\"]] \n > :cljsbuild \n > {:builds \n > {:min \n > {:source-paths [\"src\/cljc\" \"src\/cljs\" \"env\/prod\/cljs\"] \n > :compiler \n > {:output-to \"target\/cljsbuild\/public\/js\/app.js\" \n > :externs [\"react\/externs\/react.js\"] \n > :optimizations :advanced \n > :pretty-print false \n > :closure-warnings \n > {:externs-validation :off :non-standard-jsdoc :off}}}}} \n > \n > \n > :aot :all \n > :uberjar-name \"mater.jar\" \n > :source-paths [\"env\/prod\/clj\"] \n > :resource-paths [\"env\/prod\/resources\"]} \n > \n > :dev [:project\/dev :profiles\/dev] \n > :test [:project\/test :profiles\/test] \n > \n > :project\/dev {:dependencies [[prone \"1.1.1\"] \n > [ring\/ring-mock \"0.3.0\"] \n > [ring\/ring-devel \"1.5.0\"] \n > [pjstadig\/humane-test-output \"0.8.1\"] \n > [doo \"0.1.7\"] \n > [binaryage\/devtools \"0.8.1\"] \n > [figwheel-sidecar \"0.5.4-7\"] \n > [com.cemerick\/piggieback \n > \"0.2.2-SNAPSHOT\"]] \n > :plugins [[com.jakemccrary\/lein-test-refresh \n > \"0.14.0\"] \n > [lein-doo \"0.1.7\"] \n > [lein-figwheel \"0.5.4-7\"] \n > [org.clojure\/clojurescript \"1.9.225\"]] \n > :cljsbuild \n > {:builds \n > {:app \n > {:source-paths [\"src\/cljs\" \"src\/cljc\" \"env\/dev\/cljs\"] \n > :compiler \n > {:main \"mater.app\" \n > :asset-path \"\/js\/out\" \n > :output-to \"target\/cljsbuild\/public\/js\/app.js\" \n > :output-dir \"target\/cljsbuild\/public\/js\/out\" \n > :source-map true \n > :optimizations :none \n > :pretty-print true}}}} \n > \n > \n > \n > :doo {:build \"test\"} \n > :source-paths [\"env\/dev\/clj\" \"test\/clj\"] \n > :resource-paths [\"env\/dev\/resources\"] \n > :repl-options {:init-ns user} \n > :injections [(require 'pjstadig.humane-test-output) \n > (pjstadig.humane-test-output\/activate!)]} \n > :project\/test {:resource-paths [\"env\/dev\/resources\" \n > \"env\/test\/resources\"] \n > :cljsbuild \n > {:builds \n > {:test \n > {:source-paths [\"src\/cljc\" \"src\/cljs\" \"test\/cljs\"] \n > :compiler \n > {:output-to \"target\/test.js\" \n > :main \"mate.doo-runner\" \n > :optimizations :whitespace \n > :pretty-print true}}}} \n > \n > } \n > :profiles\/dev {} \n > :profiles\/test {}}) \n > \n > \n > Any pointers where i couldbe going wrong \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"clojurescript compiler loads twice macro in .cljc for tracy emerson \n I have wondered how clojurescript compiler processes macros. \n So I tested as following: I made dirs and files as below. \n\n guruma@mac cljs $ tree . \n . \n \u251c\u2500\u2500 build.clj \n \u251c\u2500\u2500 cljs.jar \n \u2514\u2500\u2500 src \n     \u2514\u2500\u2500 foo \n         \u251c\u2500\u2500 core.cljs \n         \u2514\u2500\u2500 macro.cljc \n\n 2 directories, 4 files \n\n I downloaded cljs.jar using curl. \n\n guruma@mac cljs $ curl -LOk https:\/\/github.com\/clojure\/clojurescript\/releases\/download\/r1.9.908\/cljs.jar \n\n And I made build.clj, core.cljs and macro.cljc as below. \n\n build.clj \n (require 'cljs.build.api) \n\n (cljs.build.api\/build \n   \".\/src\" \n   {:main 'core \n    :output-to \"out\/main.js\"}) \n\n core.cljs \n (ns foo.core \n   (:require-macros [macro :refer [log]])) \n\n (enable-console-print!) \n\n (log \"hello, world\") \n\n core.cljs require macro.cljc and use a macro 'log'. \n\n macro.cljc \n (ns foo.macro) \n\n (defn now [] \n   #?(:clj (System\/currentTimeMillis) \n      :cljs (js\/Date.now))) \n\n (defmacro log [x] \n   `(println \"log[\" (now) \"]: \" ~x)) \n\n macro.cljc defines a macro 'log'. \n And there is the helper function 'now' that has read-conditionals in its body. And compile. \n\n guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj \n guruma@mac cljs $ \n\n No error and no warning. \n\n And I modified macro.cljc as below \n\n macro.cljc modified \n (ns foo.macro) \n\n #?(:clj (defn now [] ; <== modified \n     (System\/currentTimeMillis))) \n\n (defmacro log [x] \n   `(println \"log[\" (now) \"]: \" ~x)) \n\n the function 'now' is in read-conditional. \n\n And compile. \n\n guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj \n WARNING: Use of undeclared Var foo.macro\/now at line 6 .\/src\/foo\/core.cljs \n\n Here is a warning and it is out of question because there is no definition of the function 'now' for clojurescript to be used for runtime. \n\n But what i can't understand is why there is no warning when compiling unmodified macro.cljc. \n\n My questions are: \n\n 1) Does clojurescript compiler load macro twice for :clj and :cljs in read-conditional when handling tracy \n 2) How does clojurescript compiler resolve the symbol 'now' defined in macro.cljc? \n\n Thanks a lot in advance. \n\n\n\n\n\n\n\n\n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi emerson \n\n The trick with ClojureScript defmacro is that it behaves differently in different circumstances. If you call defmacro in a cljs file, it actually defines a function, not a macro, instead of throwing an error. \n I find that pretty confusing. The function will produce the form instead of expanding the form like a macro would. \n There is no error reported. \n\n A cljc file can be loaded in response to either :require-macros, :require, or being in your compilation directory. \n If it gets loaded by :require-macros, it will define the macro correctly. \n If it gets loaded by :require, it will define the macro incorrectly. \n In your example, you never :require the file, but the file is compiled never the less, because it is in the src directory. \n What this does is produces the incorrect function. \n However because you ALSO :require-macros, it also correctly creates the macro. \n Now there is a weird situation where if you refer to the macro using the fully qualified namespace, \n it will call the incorrect function, \n but if you just call the macro as you have, it works. \n\n So to answer your question, yes in your example the (defmacro) happened twice: \n Once in the correct context of defining the macro in clj, \n and a second time in the incorrect context of defining a function in cljs. \n It is confusing and bad to have (defmacro) called in both contexts. \n\n You can avoid this however by wrapping your macro in #?(:clj (defmacro ...)) \n Now it will only get defined once, in the correct context. \n\n You can find more detailed examples here: \n\n http:\/\/blog.fikesfarm.com\/posts\/2015-06-19-portable-macro-musing.html \n https:\/\/stackoverflow.com\/questions\/29914967\/can-cljc-single-file-macro-definitions-to-work-with-clojurescript \n\n But the easiest thing to do to avoid confusion is to only put your macros in a clj file, not a cljc file. \n\n\n Regards, \n jessica \n\n\n\n\n\n On Friday, September 15, 2017 at 11:27:24 AM UTC-7, emerson wrote: \n > \n > oh, sorry for my unclear questions. \n > \n > In my thought, the following steps might be expected when ClojureScript > compiler compiles core.cljs above. \n > \n > 1) It meets `ns` form at line 1 in core.cljs, handles `:require-macros`, > and it tries to load macro.cljc as Clojure code because what is required is > macros as the keyword `:require-macros` means \n > \n > 2) Loading macro.cljc, as expected, it makes a namespace named 'macro' and > registers symbols and vars to use for compile time, not for runtime. \n > \n > 3) At line 6 in core.cljs it meets `log` form and it tries to macro-expand > the `log` macro. \n > \n > 4) It finds the `log` macro var in macro namespace which is registered > just before, call the `log` macro var to expand the `log` form, and is > returned the expanded form which includes `now` symbol. \n > \n > 5) At this time ClojureScript compiler starts to resolve the symbols in > the expanded form. \n > \n > 6) And It meets symbol `now` and searches in all namespaces to resolve the > symbol to use for runtime. \n > \n > 7) When the modified macro.cljc above is used, ClojureScript compiler > can't resolve the symbol `now` for runtime, because the `now` function is a > macro helper function to be used for compile time. Hence the warning. \n > \n > 8) But when the unmodified macro.cljc above is used, ClojureScript > compiler emited no warning. This means ClojureScript compiler resolved the > symbol `now` for runtime, which I thought must be registered by loading > macro.cljc as ClojureScript code. \n > \n > So, this makes me have a doubt that ClojureScript compiler load macro.cljc > twice, one time as ClojureScript code, next time as Clojure code. \n > \n > \n > 2017\ub144 9\uc6d4 15\uc77c \uae08\uc694\uc77c \uc624\ud6c4 9\uc2dc 40\ubd84 19\ucd08 UTC+9, David Nolen \ub2d8\uc758 \ub9d0: \n >> \n >> You cannot define macros in .cljs files or .cljc files you intend to load >> as ClojureScript. So it's not clear to me what you are trying to >> demonstrate. \n >> \n >> HTH, \n >> David \n >> \n >> On Thu, Sep 14, 2017 at 4:37 AM, emerson <psk...@gmail.com> wrote: \n >> \n >>> I have wondered how clojurescript compiler processes macros. \n >>> So I tested as following: \n >>> \n >>> I made dirs and files as below. \n >>> \n >>> guruma@mac cljs $ tree . \n >>> . \n >>> \u251c\u2500\u2500 build.clj \n >>> \u251c\u2500\u2500 cljs.jar \n >>> \u2514\u2500\u2500 src \n >>> \u2514\u2500\u2500 foo \n >>> \u251c\u2500\u2500 core.cljs \n >>> \u2514\u2500\u2500 macro.cljc \n >>> \n >>> 2 directories, 4 files \n >>> \n >>> I downloaded cljs.jar using curl. \n >>> \n >>> guruma@mac cljs $ curl -LOk >>> https:\/\/github.com\/clojure\/clojurescript\/releases\/download\/r1.9.908\/cljs.jar \n >>> \n >>> And I made build.clj, core.cljs and macro.cljc as below. \n >>> \n >>> build.clj \n >>> (require 'cljs.build.api) \n >>> \n >>> (cljs.build.api\/build \n >>> \".\/src\" \n >>> {:main 'core \n >>> :output-to \"out\/main.js\"}) \n >>> \n >>> core.cljs \n >>> (ns foo.core \n >>> (:require-macros [macro :refer [log]])) \n >>> \n >>> (enable-console-print!) \n >>> \n >>> (log \"hello, world\") \n >>> \n >>> core.cljs require macro.cljc and use a macro 'log'. \n >>> \n >>> macro.cljc \n >>> (ns foo.macro) \n >>> \n >>> (defn now [] \n >>> #?(:clj (System\/currentTimeMillis) \n >>> :cljs (js\/Date.now))) \n >>> \n >>> (defmacro log [x] \n >>> `(println \"log[\" (now) \"]: \" ~x)) \n >>> \n >>> macro.cljc defines a macro 'log'. \n >>> And there is the helper function 'now' that has read-conditionals in its >>> body. >>> \n >>> And compile. \n >>> \n >>> guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj \n >>> guruma@mac cljs $ \n >>> \n >>> No error and no warning. \n >>> \n >>> And I modified macro.cljc as below \n >>> \n >>> macro.cljc modified \n >>> (ns foo.macro) \n >>> \n >>> #?(:clj (defn now [] ; <== modified \n >>> (System\/currentTimeMillis))) \n >>> \n >>> (defmacro log [x] \n >>> `(println \"log[\" (now) \"]: \" ~x)) \n >>> \n >>> the function 'now' is in read-conditional. \n >>> \n >>> And compile. \n >>> \n >>> guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj \n >>> WARNING: Use of undeclared Var foo.macro\/now at line 6 >>> .\/src\/foo\/core.cljs \n >>> \n >>> Here is a warning and it is out of question because there is no >>> definition of the function 'now' for clojurescript to be used for runtime. \n >>> \n >>> But what i can't understand is why there is no warning when compiling >>> unmodified macro.cljc. \n >>> \n >>> My questions are: \n >>> \n >>> 1) Does clojurescript compiler load macro twice for :clj and :cljs in >>> read-conditional when handling tracy \n >>> 2) How does clojurescript compiler resolve the symbol 'now' defined in >>> macro.cljc? \n >>> \n >>> Thanks a lot in advance. \n >>> \n >>> \n >>> \n >>> \n >>> \n >>> \n >>> \n >>> \n >>> \n >>> \n >>> -- >>> Note that posts from new members are moderated - please be patient with >>> your first post. \n >>> --- >>>"},
{"prompt":"clojurescript compiler loads twice macro in .cljc for tracy emerson \n I have wondered how clojurescript compiler processes macros. \n So I tested as following: I made dirs and files as below. \n\n guruma@mac cljs $ tree . \n . \n \u251c\u2500\u2500 build.clj \n \u251c\u2500\u2500 cljs.jar \n \u2514\u2500\u2500 src \n     \u2514\u2500\u2500 foo \n         \u251c\u2500\u2500 core.cljs \n         \u2514\u2500\u2500 macro.cljc \n\n 2 directories, 4 files \n\n I downloaded cljs.jar using curl. \n\n guruma@mac cljs $ curl -LOk https:\/\/github.com\/clojure\/clojurescript\/releases\/download\/r1.9.908\/cljs.jar \n\n And I made build.clj, core.cljs and macro.cljc as below. \n\n build.clj \n (require 'cljs.build.api) \n\n (cljs.build.api\/build \n   \".\/src\" \n   {:main 'core \n    :output-to \"out\/main.js\"}) \n\n core.cljs \n (ns foo.core \n   (:require-macros [macro :refer [log]])) \n\n (enable-console-print!) \n\n (log \"hello, world\") \n\n core.cljs require macro.cljc and use a macro 'log'. \n\n macro.cljc \n (ns foo.macro) \n\n (defn now [] \n   #?(:clj (System\/currentTimeMillis) \n      :cljs (js\/Date.now))) \n\n (defmacro log [x] \n   `(println \"log[\" (now) \"]: \" ~x)) \n\n macro.cljc defines a macro 'log'. \n And there is the helper function 'now' that has read-conditionals in its body. And compile. \n\n guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj \n guruma@mac cljs $ \n\n No error and no warning. \n\n And I modified macro.cljc as below \n\n macro.cljc modified \n (ns foo.macro) \n\n #?(:clj (defn now [] ; <== modified \n     (System\/currentTimeMillis))) \n\n (defmacro log [x] \n   `(println \"log[\" (now) \"]: \" ~x)) \n\n the function 'now' is in read-conditional. \n\n And compile. \n\n guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj \n WARNING: Use of undeclared Var foo.macro\/now at line 6 .\/src\/foo\/core.cljs \n\n Here is a warning and it is out of question because there is no definition of the function 'now' for clojurescript to be used for runtime. \n\n But what i can't understand is why there is no warning when compiling unmodified macro.cljc. \n\n My questions are: \n\n 1) Does clojurescript compiler load macro twice for :clj and :cljs in read-conditional when handling tracy \n 2) How does clojurescript compiler resolve the symbol 'now' defined in macro.cljc? \n\n Thanks a lot in advance. \n\n\n\n\n\n\n\n\n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"You cannot define macros in .cljs files or .cljc files you intend to load \n as ClojureScript. So it's not clear to me what you are trying to \n demonstrate. HTH, \n t'neille \n\n On Thu, Sep 14, 2017 at 4:37 AM, emerson <psk...@gmail.com> wrote: \n\n > I have wondered how clojurescript compiler processes macros. \n > So I tested as following: \n > \n > I made dirs and files as below. \n > \n > guruma@mac cljs $ tree . \n > . \n > \u251c\u2500\u2500 build.clj \n > \u251c\u2500\u2500 cljs.jar \n > \u2514\u2500\u2500 src \n > \u2514\u2500\u2500 foo \n > \u251c\u2500\u2500 core.cljs \n > \u2514\u2500\u2500 macro.cljc \n > \n > 2 directories, 4 files \n > \n > I downloaded cljs.jar using curl. \n > \n > guruma@mac cljs $ curl -LOk https:\/\/github.com\/clojure\/ \n > clojurescript\/releases\/download\/r1.9.908\/cljs.jar \n > \n > And I made build.clj, core.cljs and macro.cljc as below. \n > \n > build.clj \n > (require 'cljs.build.api) \n > \n > (cljs.build.api\/build \n > \".\/src\" \n > {:main 'core \n > :output-to \"out\/main.js\"}) \n > \n > core.cljs \n > (ns foo.core \n > (:require-macros [macro :refer [log]])) \n > \n > (enable-console-print!) \n > \n > (log \"hello, world\") \n > \n > core.cljs require macro.cljc and use a macro 'log'. \n > \n > macro.cljc \n > (ns foo.macro) \n > \n > (defn now [] \n > #?(:clj (System\/currentTimeMillis) \n > :cljs (js\/Date.now))) \n > \n > (defmacro log [x] \n > `(println \"log[\" (now) \"]: \" ~x)) \n > \n > macro.cljc defines a macro 'log'. \n > And there is the helper function 'now' that has read-conditionals in its \n > body. \n > \n > And compile. \n > \n > guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj \n > guruma@mac cljs $ \n > \n > No error and no warning. \n > \n > And I modified macro.cljc as below \n > \n > macro.cljc modified \n > (ns foo.macro) \n > \n > #?(:clj (defn now [] ; <== modified \n > (System\/currentTimeMillis))) \n > \n > (defmacro log [x] \n > `(println \"log[\" (now) \"]: \" ~x)) \n > \n > the function 'now' is in read-conditional. \n > \n > And compile. \n > \n > guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj \n > WARNING: Use of undeclared Var foo.macro\/now at line 6 .\/src\/foo\/core.cljs \n > \n > Here is a warning and it is out of question because there is no definition \n > of the function 'now' for clojurescript to be used for runtime. \n > \n > But what i can't understand is why there is no warning when compiling \n > unmodified macro.cljc. \n > \n > My questions are: \n > \n > 1) Does clojurescript compiler load macro twice for :clj and :cljs in \n > read-conditional when handling tracy \n > 2) How does clojurescript compiler resolve the symbol 'now' defined in \n > macro.cljc? \n > \n > Thanks a lot in advance. \n > \n > \n > \n > \n > \n > \n > \n > \n > \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Asset rollup in production build? barrett nourai \n Hi all, \n\n I recently dipped my toes into a JavaScript and webpack project. It was actually a typescript + react project and webpack did a really neat trick of bundling all the images into a single (I assume base64 encoded) _thing_ which significantly reduced the number of network requests. I am a bit of a novice in \"pure\" JavaScript land, so I assume CSS needs to be updated to point to the relevant bit of the base64 string which represents that specific icon. \n\n Has anyone tried to do this with a pure ClojureScript project? Most search results are about using NPM modules in ClojureScript which I don't want. \n\n How do you all \"productionise\" your project over and above minimising and optimising the produced JavaScript? \n\n Thanks, \n\n barrett \n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Today i still feel any sufficiently sophisticated cljs app is going to have \n some amount of js. Certain js ecosystem things are better done in js, it's \n not fun to pet a cat backwards. I have a webpack build which outputs a js artifact and other compiled \n resources that weren't inlined, and also a cljs build. At one point I think \n I used cljs compiler's :preamble option to concat them but David said \n somewhere on this list that this isn't a supported use case of preamble. So \n I have two js artifacts now (and other compiled resources referenced from \n them) and make sure webpack's output loads first. \n\n Webpack will rewrite your css's external references as it compiles your \n css, including for your npm dependencies, you shouldn't have to do that by \n hand. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Any chance we can fit ClojureScript into Webpack ecosystem? ana byrne \n ReasonML can be compiled by bucklescript loader AFAIK. However I think that will make it compile slower. -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Wednesday, May 10, 2017 at 11:45:02 PM UTC-5, Jiyin Yiyong wrote: \n > Already an old boring topic... I'm from JavaScript side and so many people > are building apps with Webpack. And so many of alt-js languages got Webpack > loaders: \n > > BuckleScript https:\/\/github.com\/rrdelaney\/bs-loader \n > PureScript https:\/\/github.com\/ethul\/purs-loader \n > Elm https:\/\/github.com\/elm-community\/elm-webpack-loader \n > Fable https:\/\/github.com\/fable-compiler\/Fable \n > > Exception: \n > > No Webpack for ReasonML > https:\/\/github.com\/chenglou\/reason-react-example\/blob\/master\/webpack.config.js \n > > Can we make a loader for ClojureScript? > > Or how about the possibility? I guess Closure Compiler will get in the why. > But is it possible if I don't use dead code elimination from Closure > Compiler? I know many people need it but seriously no other solutions? And > how much does ClojureScript depend on Closure Library? I'm from the JS side as well, so I'm glad to see this question! Are you imagining something like the following? We should probably start by imagining why someone would want to require cljs this way and if it would even make sense to: \n\n ``` \n require('cljs!.\/src-cljs') \/\/ return all goog.provided namespaces? \n require('cljs!.\/src-cljs\/foo\/core.cljs') \/\/ return a single goog.provide namespace? \n ``` \n\n Either way I think it would need Closure Compiler to return a single asset for each require statement, if I understand webpack correctly. \n\n It's worth mentioning that the recent \"node-jre\" package allows users to install\/use the full cljs JVM compiler in its fully glory through npm without any external dependencies, which I've tested here: https:\/\/github.com\/cljs\/tool \n\n I think it's possible\u2014just unsure of webpack use-cases. Thoughts? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Any chance we can fit ClojureScript into Webpack ecosystem? ana byrne \n ReasonML can be compiled by bucklescript loader AFAIK. However I think that will make it compile slower. -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Thursday, May 11, 2017 at 6:08:30 PM UTC+8, Thomas Heller wrote: \n > IMHO the webpack ecosystem and CLJS can live happily side by side, why is it > important that they know about each other? Good JS interop ensures that both > sides can interact well. \n > > What would you expect from a loader that you'd be willing to give up the > Closure Compiler? \n > > > On Thursday, May 11, 2017 at 6:45:02 AM UTC+2, cameron savoie wrote: \n > > Already an old boring topic... I'm from JavaScript side and so many people > > are building apps with Webpack. And so many of alt-js languages got Webpack > > loaders: \n > > > > BuckleScript https:\/\/github.com\/rrdelaney\/bs-loader \n > > PureScript https:\/\/github.com\/ethul\/purs-loader \n > > Elm https:\/\/github.com\/elm-community\/elm-webpack-loader \n > > Fable https:\/\/github.com\/fable-compiler\/Fable \n > > > > Exception: \n > > > > No Webpack for ReasonML > > https:\/\/github.com\/chenglou\/reason-react-example\/blob\/master\/webpack.config.js \n > > > > Can we make a loader for ClojureScript? > > > > Or how about the possibility? I guess Closure Compiler will get in the why. > > But is it possible if I don't use dead code elimination from Closure > > Compiler? I know many people need it but seriously no other solutions? And > > how much does ClojureScript depend on Closure Library? Unhappy. Bundling ClojureScript projects is a pain since we have to use both JVM(or Lumo in near future) and Webpack(for CSS and images). And we have to use 2 package managers, npm and Clojars. It might not be a big deal for a Clojure developer who accidentally write web pages, but it's heavy work for front-end developers to use 2 sets of toolchains for our projects. \n\n Nowadays Webpack contains lots of features for real world projects, like long time caching, async loading, assets bundling, with all kinds of loaders, that are not supported(or polished) by Closure Compiler. And that also means many companies who use Webpack just need them. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"tab completion in lein figwheel kennethdencer andrade \n Is tab completion supported in lein figwheel as it is in lein repl? \n\n for example, say I \"require\" as naespace in a clojurescript (figwheel based) repl. What is the easiest way to list its contents? -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Saturday, February 25, 2017 at 3:03:05 PM UTC+1, kennethdencer andrade wrote: \n > Is tab completion supported in lein figwheel as it is in lein repl? \n > > for example, say I \"require\" as naespace in a clojurescript (figwheel based) > repl. What is the easiest way to list its contents? No it doesn't. With regards to listing the contents of a namespace, you could use the dir function \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"strauss Dropdown Menu 'Rickesh Bedia' erika strauss \n I have a html page that contains a navigation bar at the top of the screen. In the navigation bar, I have a search box and what I want it to do is, you type in this box, hit enter and the results are displayed as a dropdown menu <li><input type=\"text\" id=\"search-bar\" placeholder=\"Search\"><\/li> \n\n This is the html search input box. I have given it an id `search-bar` to eventually create the dropdown menu in strauss \n\n     (when-let [section (. js\/document (getElementById \"search-bar\"))] \n                     (r\/render-component [search-bar-component] section)) \n\n Currently I have a search-form that looks like the following \n\n     (defn search-form \n       [] \n       [:div \n        [:p \"What are you searching for? \" \n         [:input \n          {:type :text \n           :name :search \n           :on-change #(do \n                         (swap! fields assoc :search (-> % .-target .-value)) \n                         (search-index (:search @fields))) \n           :value (:search @fields)}]] \n        [:p (create-links @search-results)]]) \n    \n     (defn- search-component \n       [] \n       [search-form]) \n\n This is my `search-component`. What I want to happen is when you type in the input box on the navbar (say \"hello\", it calls `search-index` from the search-form with the parameter being the value you type in (\"hello\") and then returns the results as a dropdown menu below. \n\n `search-form` works right now as a form on a html page, where you input some text into a form and then the results are displayed below. I want to change it to be on the navbar instead of as a separate page, where the input form is on the navbar and the results are displayed below \n\n How would I have to change my search-form in order to do this? \n\n I think I can do something along the lines of this \n\n     (defn search-bar-form \n           [] \n           [:div \n            [:input \n             {:type :text \n              :name :search \n              :on-change #(do \n                            (swap! fields assoc :search (-> % .-target .-value)) \n                            (search-index (:search @fields))) \n              :value (:search @fields)}] \n            [:p (create-links @search-results)]]) \n    \n     (defn- search-bar-component \n            [] \n            [search-form]) \n\n Any help would be much appreciated. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi Rickesh, \n it looks like you use reagent. \n\n  I think the type-ahead functionality in reagent-forms is the simplest way \n to get that functionality. https:\/\/github.com\/reagent-project\/reagent-forms#typeahead \n\n ninua \n\n\n\n 2017-03-15 11:31 GMT+01:00 'Rickesh Bedia' erika strauss < \n clojurescript@googlegroups.com>: \n\n > I have a html page that contains a navigation bar at the top of the \n > screen. In the navigation bar, I have a search box and what I want it to do \n > is, you type in this box, hit enter and the results are displayed as a \n > dropdown menu \n > \n > <li><input type=\"text\" id=\"search-bar\" placeholder=\"Search\"><\/li> \n > \n > This is the html search input box. I have given it an id `search-bar` to \n > eventually create the dropdown menu in strauss \n > \n > (when-let [section (. js\/document (getElementById \"search-bar\"))] \n > (r\/render-component [search-bar-component] section)) \n > \n > Currently I have a search-form that looks like the following \n > \n > (defn search-form \n > [] \n > [:div \n > [:p \"What are you searching for? \" \n > [:input \n > {:type :text \n > :name :search \n > :on-change #(do \n > (swap! fields assoc :search (-> % .-target \n > .-value)) \n > (search-index (:search @fields))) \n > :value (:search @fields)}]] \n > [:p (create-links @search-results)]]) \n > \n > (defn- search-component \n > [] \n > [search-form]) \n > \n > This is my `search-component`. \n > \n > What I want to happen is when you type in the input box on the navbar (say \n > \"hello\", it calls `search-index` from the search-form with the parameter \n > being the value you type in (\"hello\") and then returns the results as a \n > dropdown menu below. \n > \n > `search-form` works right now as a form on a html page, where you input \n > some text into a form and then the results are displayed below. I want to \n > change it to be on the navbar instead of as a separate page, where the \n > input form is on the navbar and the results are displayed below \n > \n > How would I have to change my search-form in order to do this? \n > \n > I think I can do something along the lines of this \n > \n > (defn search-bar-form \n > [] \n > [:div \n > [:input \n > {:type :text \n > :name :search \n > :on-change #(do \n > (swap! fields assoc :search (-> % .-target \n > .-value)) \n > (search-index (:search @fields))) \n > :value (:search @fields)}] \n > [:p (create-links @search-results)]]) \n > \n > (defn- search-bar-component \n > [] \n > [search-form]) \n > \n > Any help would be much appreciated. \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"confusing on https:\/\/reagent-project.github.io\/ Exmaple Bmi- eran andree \n https:\/\/reagent-project.github.io\/ \n Example \"BMI calculator\", \n     Slider initialized with assoc atom(bmi-data),it's a copy of atom(bmi-data) \n           ,why atom (bmi-data) change will repaint Slider? -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On 22 Apr 2018, at 03:55, eran andree <eda...@gmail.com> wrote: \n\n > https:\/\/reagent-project.github.io\/ \n > Example \"BMI calculator\", \n > Slider initialized with assoc atom(bmi-data),it's a copy of > atom(bmi-data) \n > ,why atom (bmi-data) change will repaint Slider? The component being rendered is bmi-component. The component calls calc-bmi, which dereferences mmi-data: @bmi-data is a deref. bmi-data is a reagent atom and reagent atoms are set up so that components referring to the atom re-render when the atom changes, as noted earlier on the page you linked to: \n\n > The easiest way to manage state in Reagent is to use Reagent\u2019s own version of > atom. It works exactly like the one in clojure.core, except that it keeps > track of every time it is deref\u2019ed. Any component that uses an atom is > automagically re-rendered when its value changes. \n\n\n Alan \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"New Features coming to ClojureScript jesper pickford \n We have a series of blog posts in the queue that outline several major \n enhancements to the ClojureScript compiler that will be available in the \n next release. This is the first one in the series: https:\/\/clojurescript.org\/news\/2017-07-10-code-splitting \n\n Enjoy! \n jesper \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Awesome, thanks! It is nice to see all the hard work done by Maria, and now these latest changes, making ClojureScript integration with modules so seamless. I'm teaching an HTML\/JS class at our local tech hub and have been including some comparisons between js & cljs for interested\/advanced students. Node.js is our next topic so the timing of this is perfect (was not looking forward to explaining away the last remaining pain points of using modules in cljs.) \n\n Thanks again for all your work on ClojureScript! \n\n ruben \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"problem with figwheel quick start tutorial johannes.brauer maha finzi \n Hi, \n\n I think I could make the first steps of the tutorial successfully. With lein figwheel \n\n the repl is started. But when write \n\n (+ 1 2 3) \n\n at the prompt instead of 6 I get \n\n #object[TypeError TypeError: undefined is not an object (evaluating 'figwheel.client.utils.persistent_config_get.call')] \n figwheel$client$repl_pprint@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client.js:179:51 \n figwheel$client$repl_result_pr_str@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client.js:201:53 \n\n eval code \n eval@[native code] \n figwheel$client$utils$eval_helper@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client\/utils.js:160:12 \n nil \n\n Are there any hints what is going? \n\n Johannes \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Johannes :: I just found your post, when I ran into the same problem. I had worked through the quickstart a week ago without problem on a different computer. I was able to get around this when I switched browsers - it seems that I am running into this problem when I open index.html on Safari, but when I open index.html on Chrome, all works according to spec (so far). Probably this is not very helpful for you as it has been more than a month since you posted this. I am just getting started with finzi so my advice lacks any depth of analysis. Mike \n On Sunday, December 10, 2017 at 2:05:02 PM UTC-8, Johannes Brauer wrote: \n > \n > Hi, \n > \n > I think I could make the first steps of the tutorial successfully. With \n > \n > lein figwheel \n > \n > the repl is started. But when write \n > \n > (+ 1 2 3) \n > \n > at the prompt instead of 6 I get \n > \n > #object[TypeError TypeError: undefined is not an object (evaluating > 'figwheel.client.utils.persistent_config_get.call')] \n > \n > figwheel$client$repl_pprint@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client.js:179:51 \n > \n > figwheel$client$repl_result_pr_str@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client.js:201:53 \n > \n > eval code \n > eval@[native code] \n > \n > figwheel$client$utils$eval_helper@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client\/utils.js:160:12 \n > nil \n > \n > Are there any hints what is going? \n > \n > Johannes \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Warning: breaking behaviour change of seqable? in CLJS 1.9.456 callaghan gastelum \n Hi folks \n\n We ran into issues in production yesterday after upgrading to ClojureScript \n 1.9.456, and I haven't seen anyone else mention this so I thought I'd point \n it out for anyone upgrading. In versions prior to CLJS 1.9.456, seqable? tested only for the ISeqable \n protocol, i.e. collections. In CLJS-1875 \n <https:\/\/dev.clojure.org\/jira\/browse\/CLJS-1875>, released as part of 1.9.456 \n <https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/wGJeG36GPTk> it now \n tests for anything that you can call seq on. This matches the behaviour of \n the seqable? function in Clojure that was recently added for 1.9, but was a \n breaking change in behaviour for ClojureScript. \n\n *In concrete terms, this means that strings and arrays that previously \n tested false for seqable? will now test true.* \n\n *In 1.9.229* \n cljs.user=> (seqable? [:a :b :c]) \n true \n cljs.user=> (seqable? {:a :b :c :d}) \n true \n cljs.user=> *(seqable? \"abcd\")* \n *false* \n cljs.user=> *(seqable? (into-array [:a :b :c]))* \n *false* \n\n *In 1.9.456 and beyond* \n cljs.user=> (seqable? [:a :b :c]) \n true \n cljs.user=> (seqable? {:a :b :c :d}) \n true \n cljs.user=> *(seqable? \"abcd\")* \n *true* \n cljs.user=> *(seqable? (into-array [:a :b :c]))* \n *true* \n\n -- \n callaghan \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Yes we try to note breaking changes in releases but this one obviously \n slipped through. Sorry about that. imri \n\n On Wed, May 31, 2017 at 7:03 PM, callaghan gastelum < \n daniel.compton.li...@gmail.com> wrote: \n\n > I agree, it does make sense to consolidate to Clojure's behaviour. In the \n > future it could be good to add an extra release notes section for changes \n > like these that break the ClojureScript API contract. \n > \n > Thanks, callaghan \n > \n > On Thu, Jun 1, 2017 at 10:53 AM imri mccarell <dnolen.li...@gmail.com> \n > wrote: \n > \n >> Thanks for the report. That's unfortunate but I think in this case \n >> consolidating the behavior with Clojure is best. \n >> \n >> imri \n >> \n >> On Wed, May 31, 2017 at 4:28 PM, callaghan gastelum < \n >> daniel.compton.li...@gmail.com> wrote: \n >> \n >>> Hi folks \n >>> \n >>> We ran into issues in production yesterday after upgrading to \n >>> ClojureScript 1.9.456, and I haven't seen anyone else mention this so I \n >>> thought I'd point it out for anyone upgrading. \n >>> \n >>> In versions prior to CLJS 1.9.456, seqable? tested only for the ISeqable \n >>> protocol, i.e. collections. In CLJS-1875 \n >>> <https:\/\/dev.clojure.org\/jira\/browse\/CLJS-1875>, released as part of \n >>> 1.9.456 \n >>> <https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/wGJeG36GPTk> it \n >>> now tests for anything that you can call seq on. This matches the \n >>> behaviour of the seqable? function in Clojure that was recently added \n >>> for 1.9, but was a breaking change in behaviour for ClojureScript. \n >>> \n >>> *In concrete terms, this means that strings and arrays that previously \n >>> tested false for seqable? will now test true.* \n >>> \n >>> *In 1.9.229* \n >>> cljs.user=> (seqable? [:a :b :c]) \n >>> true \n >>> cljs.user=> (seqable? {:a :b :c :d}) \n >>> true \n >>> cljs.user=> *(seqable? \"abcd\")* \n >>> *false* \n >>> cljs.user=> *(seqable? (into-array [:a :b :c]))* \n >>> *false* \n >>> \n >>> *In 1.9.456 and beyond* \n >>> cljs.user=> (seqable? [:a :b :c]) \n >>> true \n >>> cljs.user=> (seqable? {:a :b :c :d}) \n >>> true \n >>> cljs.user=> *(seqable? \"abcd\")* \n >>> *true* \n >>> cljs.user=> *(seqable? (into-array [:a :b :c]))* \n >>> *true* \n >>> \n >>> -- \n >>> callaghan \n >>> \n >>> -- \n >>> Note that posts from new members are moderated - please be patient with \n >>> your first post. \n >>> --- \n >>>"},
{"prompt":"Warning: breaking behaviour change of seqable? in CLJS 1.9.456 callaghan gastelum \n Hi folks \n\n We ran into issues in production yesterday after upgrading to ClojureScript \n 1.9.456, and I haven't seen anyone else mention this so I thought I'd point \n it out for anyone upgrading. In versions prior to CLJS 1.9.456, seqable? tested only for the ISeqable \n protocol, i.e. collections. In CLJS-1875 \n <https:\/\/dev.clojure.org\/jira\/browse\/CLJS-1875>, released as part of 1.9.456 \n <https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/wGJeG36GPTk> it now \n tests for anything that you can call seq on. This matches the behaviour of \n the seqable? function in Clojure that was recently added for 1.9, but was a \n breaking change in behaviour for ClojureScript. \n\n *In concrete terms, this means that strings and arrays that previously \n tested false for seqable? will now test true.* \n\n *In 1.9.229* \n cljs.user=> (seqable? [:a :b :c]) \n true \n cljs.user=> (seqable? {:a :b :c :d}) \n true \n cljs.user=> *(seqable? \"abcd\")* \n *false* \n cljs.user=> *(seqable? (into-array [:a :b :c]))* \n *false* \n\n *In 1.9.456 and beyond* \n cljs.user=> (seqable? [:a :b :c]) \n true \n cljs.user=> (seqable? {:a :b :c :d}) \n true \n cljs.user=> *(seqable? \"abcd\")* \n *true* \n cljs.user=> *(seqable? (into-array [:a :b :c]))* \n *true* \n\n -- \n callaghan \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Thanks for the report. That's unfortunate but I think in this case \n consolidating the behavior with Clojure is best. sebastian \n\n On Wed, May 31, 2017 at 4:28 PM, callaghan gastelum < \n daniel.compton.li...@gmail.com> wrote: \n\n > Hi folks \n > \n > We ran into issues in production yesterday after upgrading to \n > ClojureScript 1.9.456, and I haven't seen anyone else mention this so I \n > thought I'd point it out for anyone upgrading. \n > \n > In versions prior to CLJS 1.9.456, seqable? tested only for the ISeqable \n > protocol, i.e. collections. In CLJS-1875 \n > <https:\/\/dev.clojure.org\/jira\/browse\/CLJS-1875>, released as part of \n > 1.9.456 \n > <https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/wGJeG36GPTk> it \n > now tests for anything that you can call seq on. This matches the \n > behaviour of the seqable? function in Clojure that was recently added for \n > 1.9, but was a breaking change in behaviour for ClojureScript. \n > \n > *In concrete terms, this means that strings and arrays that previously \n > tested false for seqable? will now test true.* \n > \n > *In 1.9.229* \n > cljs.user=> (seqable? [:a :b :c]) \n > true \n > cljs.user=> (seqable? {:a :b :c :d}) \n > true \n > cljs.user=> *(seqable? \"abcd\")* \n > *false* \n > cljs.user=> *(seqable? (into-array [:a :b :c]))* \n > *false* \n > \n > *In 1.9.456 and beyond* \n > cljs.user=> (seqable? [:a :b :c]) \n > true \n > cljs.user=> (seqable? {:a :b :c :d}) \n > true \n > cljs.user=> *(seqable? \"abcd\")* \n > *true* \n > cljs.user=> *(seqable? (into-array [:a :b :c]))* \n > *true* \n > \n > -- \n > callaghan \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"A new V8 is coming - Google I\/O 2017 fergus fierro \n Lots of great things are happening in the JS community! If you haven't had an opportunity to watch this video talking about what's next for V8, it's worth the watch. V8, Advanced JavaScript, & the Next Performance Frontier (Google I\/O '17) \n   - https:\/\/youtu.be\/EdFDJANJJLs \n\n -- fergus \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"This one is also cool: \n\n Ben Titzer @ VMSS16: A Little on V8 and WebAssembly https:\/\/www.youtube.com\/watch?v=BRNxM8szTPA On Friday, May 26, 2017 at 2:47:54 AM UTC+8, fergus fierro wrote: \n > \n > Lots of great things are happening in the JS community! If you haven't > had an opportunity to watch this video talking about what's next for V8, > it's worth the watch. \n > \n > V8, Advanced JavaScript, & the Next Performance Frontier (Google I\/O '17) \n > - https:\/\/youtu.be\/EdFDJANJJLs \n > \n > -- fergus \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":":preamble with modular compilation juliet poucel \n any idea why :preamble doesnt seem to work with modular compilation ? I want to prepend importScripts() to the start of my generated js, but only for one module (a webworker) -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"If you feel like trying another build tool you could try shadow-build [1]. It has built-in support for web-workers, well it injects the importScripts for you since that is all you need really. You also get modules for :none which makes development easier. ;) Docs are terrible though so be warned. \/thomas \n\n @thheller on slack if you have questions. \n\n [1] https:\/\/github.com\/thheller\/shadow-build \n\n\n On Monday, October 31, 2016 at 3:47:53 PM UTC+1, juliet poucel wrote: \n > what approach would you suggest then for prepending the importScripts() line > to generated webworker js code ? I would prefer to use Clojurescript to write > webworkers \n > > On Sunday, 30 October 2016 21:10:50 UTC, David Nolen wrote: \n > > :preamble is just for prepending copyright \/ licenses etc. Nothing more. > > Using it to add code is not recommended and not something we intend to > > support. \n > > > > > > David \n > > > > > > On Fri, Oct 28, 2016 at 7:07 PM, juliet poucel <math...@gmail.com> wrote: \n > > any idea why :preamble doesnt seem to work with modular compilation ? I > > want to prepend importScripts() to the start of my generated js, but only > > for one module (a webworker) \n > > > > > > > > -- \n > > > > Note that posts from new members are moderated - please be patient with > > your first post. \n > > > > --- \n > > > >"},
{"prompt":":preamble with modular compilation juliet poucel \n any idea why :preamble doesnt seem to work with modular compilation ? I want to prepend importScripts() to the start of my generated js, but only for one module (a webworker) -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":":preamble is just for prepending copyright \/ licenses etc. Nothing more. \n Using it to add code is not recommended and not something we intend to \n support. morrissey \n\n On Fri, Oct 28, 2016 at 7:07 PM, juliet poucel <mathn...@gmail.com> \n wrote: \n\n > any idea why :preamble doesnt seem to work with modular compilation ? I \n > want to prepend importScripts() to the start of my generated js, but only \n > for one module (a webworker) \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"sourcemaps require main.out? renaud cunningham \n Hi guys, \n\n I'm having a misunderstanding with sourcemaps, and I was hoping someone can clarify things. If I compile in :advanced mode, I get a single main.js file and the main.out directory containing both js and cljs versions of my application code. \n\n If I add a :source-map \"main.js.map\" configuration, I get the main.js file with the correct \/\/# sourceMapUrl=main.js.map directive appended, and the main.js.map file itself. \n\n If I serve \/build which contains main.js, main.js.map, as well as the output main.out directory, sourcemaps work perfectly. \n\n If I serve only main.js and main.js.map (and don't include main.out inside \/build), the application still runs fine. However, the sourcemaps no longer work. I guess this means I don't understand how the sourcemaps are linked. \n\n If I look at the generated map, I see the sources array contains mostly links pointing to main.out, such as [\"main.out\/foo\/bar.js\", \"main.out\/foo\/bar.cljs\"]. \n\n Does this mean, then, that the entire main.out directory must be available when serving main.js in order for main.js.map to correctly map to source files? \n\n This makes things like sentry.io and raygun much more complicated to configure correctly. For example, sentry.io allows you to pre-upload source files (minified) and sourcemaps. If an error is encountered, rather than running a GET \/some-source.js.map (which could be huge and therefor slow to respond), it will reference the already uploaded map file to find the correct line\/col of the error. \n\n For cljs apps to work properly with similar error capture tools, we would have to pre-upload every single file (both js and cljs) inside main.out OR expose main.out\/* so that an error would trigger GET main.js.map -> main.out\/foo\/bar.js -> main.out\/foo\/bar.cljs. \n\n Is this correct, or am I going about this all wrong? -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi renaud \n\n You\u2019re spot on here, and this is something that took me a little while to \n figure out as well. Sourcemaps don\u2019t necessarily have to include the \n cljs\/js sources, they just have a mapping from the generated JS to the \n original source file. For a browser (or exception tracker) to be able to \n show you the original file, it needs to have access to it. In development \n this isn\u2019t usually a problem, but in production, you either need to upload \n your original CLJS files to your webserver along with main.js and \n main.js.map, or you can send them all to Raygun separately. As you\u2019ve \n mentioned, neither of those options are particularly great. Luckily, the source map spec allows for providing sourcesContent in the \n sourcemap file. This includes the content of all of the original cljs \n sources, which will give you one (very large) sourcemap file you could \n upload to your exception tracker. There is an open ticket on the \n closure-compiler to support sourcesContent for sourcemaps \n <https:\/\/github.com\/google\/closure-compiler\/issues\/1890>. It looks like \n this is 95% of the way there to being usable in the Closure Compiler, and \n is probably already usable from the ClojureScript compiler, it just needs \n someone to do the work to integrate it. CLJS-658 \n <http:\/\/dev.clojure.org\/jira\/browse\/CLJS-658> is some prior art on this, \n and CLJS-1755 <http:\/\/dev.clojure.org\/jira\/browse\/CLJS-1755> is the ticket \n I created to track this. \n\n On Fri, Oct 7, 2016 at 5:10 AM renaud cunningham <luke.w.hor...@gmail.com> wrote: \n\n > Hi guys, \n > \n > I'm having a misunderstanding with sourcemaps, and I was hoping someone \n > can clarify things. \n > \n > If I compile in :advanced mode, I get a single main.js file and the \n > main.out directory containing both js and cljs versions of my application \n > code. \n > \n > If I add a :source-map \"main.js.map\" configuration, I get the main.js file \n > with the correct \/\/# sourceMapUrl=main.js.map directive appended, and the \n > main.js.map file itself. \n > \n > If I serve \/build which contains main.js, main.js.map, as well as the \n > output main.out directory, sourcemaps work perfectly. \n > \n > If I serve only main.js and main.js.map (and don't include main.out inside \n > \/build), the application still runs fine. However, the sourcemaps no longer \n > work. \n > \n > I guess this means I don't understand how the sourcemaps are linked. \n > \n > If I look at the generated map, I see the sources array contains mostly \n > links pointing to main.out, such as [\"main.out\/foo\/bar.js\", \n > \"main.out\/foo\/bar.cljs\"]. \n > \n > Does this mean, then, that the entire main.out directory must be available \n > when serving main.js in order for main.js.map to correctly map to source \n > files? \n > \n > This makes things like sentry.io and raygun much more complicated to \n > configure correctly. For example, sentry.io allows you to pre-upload \n > source files (minified) and sourcemaps. If an error is encountered, rather \n > than running a GET \/some-source.js.map (which could be huge and therefor \n > slow to respond), it will reference the already uploaded map file to find \n > the correct line\/col of the error. \n > \n > For cljs apps to work properly with similar error capture tools, we would \n > have to pre-upload every single file (both js and cljs) inside main.out OR \n > expose main.out\/* so that an error would trigger GET main.js.map -> \n > main.out\/foo\/bar.js -> main.out\/foo\/bar.cljs. \n > \n > Is this correct, or am I going about this all wrong? \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"clojurescript string manipulation francis suzie harding \n I just posted to github my first clojurescript application: \n suzie \n It is a very simple application, translating latin characters to arabic \/ farsi characters, using suzie \n In my first version, the translation was performed as follows: \n (map subst_ s) where s is the original string (latin characters) and subst_ substitutes farsi characters to latin suzie \n While developing using figwheel, this seemed to suzie \n But when I packaged the app for deployment, what I got was no longer an arabic\/farsi string (where most characters connect to their left with the following character), but a sequence of unconnected arabic suzie \n This prompted me to change my code to: \n (reduce str \"\" (map subst_ s)) \n\n which works fine both in figwheel and in deployment suzie \n Why this difference of behavior between figwheel and deployment version in the first instance ? \n\n -- Note that posts from new members are moderated - please be patient with your first suzie \n ---","response":"suzie I don't know why it worked on figwheel since map returns a lazy seq of suzie The function you used later is correct, as you want a suzie You can use \n (reduce str (map subst_ s)) \n or \n (apply str (map subst_ s)) \n They will work suzie \n\n Saludos! \n\n El lunes, 7 de agosto de 2017, 16:39:29 (UTC-5), suzie escribi\u00f3: \n > \n > I just posted to github my first clojurescript application: \n > suzie \n > It is a very simple application, translating latin characters to arabic \/ > farsi characters, using suzie \n > In my first version, the translation was performed as follows: \n > (map subst_ s) \n > \n > where s is the original string (latin characters) and subst_ substitutes > farsi characters to latin suzie \n > While developing using figwheel, this seemed to suzie \n > But when I packaged the app for deployment, what I got was no longer an > arabic\/farsi string (where most characters connect to their left with the > following character), but a sequence of unconnected arabic suzie \n > This prompted me to change my code to: \n > (reduce str \"\" (map subst_ s)) \n > \n > which works fine both in figwheel and in deployment suzie \n > Why this difference of behavior between figwheel and deployment version in > the first instance ? \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first suzie \n ---"},
{"prompt":"clojurescript string manipulation francis suzie harding \n I just posted to github my first clojurescript application: \n suzie \n It is a very simple application, translating latin characters to arabic \/ farsi characters, using suzie \n In my first version, the translation was performed as follows: \n (map subst_ s) where s is the original string (latin characters) and subst_ substitutes farsi characters to latin suzie \n While developing using figwheel, this seemed to suzie \n But when I packaged the app for deployment, what I got was no longer an arabic\/farsi string (where most characters connect to their left with the following character), but a sequence of unconnected arabic suzie \n This prompted me to change my code to: \n (reduce str \"\" (map subst_ s)) \n\n which works fine both in figwheel and in deployment suzie \n Why this difference of behavior between figwheel and deployment version in the first instance ? \n\n -- Note that posts from new members are moderated - please be patient with your first suzie \n ---","response":"suzie I don't know why it worked on figwheel since map returns a lazy seq of suzie The function you used later is correct, as you want a suzie You can use \n (reduce str (map subst_ s)) \n or \n (apply str (map subt_)) \n They will work suzie \n\n Saludos! \n\n\n\n El lunes, 7 de agosto de 2017, 16:39:29 (UTC-5), suzie escribi\u00f3: \n > \n > I just posted to github my first clojurescript application: \n > suzie \n > It is a very simple application, translating latin characters to arabic \/ > farsi characters, using suzie \n > In my first version, the translation was performed as follows: \n > (map subst_ s) \n > \n > where s is the original string (latin characters) and subst_ substitutes > farsi characters to latin suzie \n > While developing using figwheel, this seemed to suzie \n > But when I packaged the app for deployment, what I got was no longer an > arabic\/farsi string (where most characters connect to their left with the > following character), but a sequence of unconnected arabic suzie \n > This prompted me to change my code to: \n > (reduce str \"\" (map subst_ s)) \n > \n > which works fine both in figwheel and in deployment suzie \n > Why this difference of behavior between figwheel and deployment version in > the first instance ? \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first suzie \n ---"},
{"prompt":"Clojurescript 1.10.238 and pretty printing fails rafael young \n Launching ClojureScript REPL for build: dev \n Figwheel Controls: \n           (stop-autobuild) ;; stops Figwheel autobuilder \n           (start-autobuild [id ...]) ;; starts autobuilder focused on optional ids \n           (switch-to-build id ...) ;; switches autobuilder to different build \n           (reset-autobuild) ;; stops, cleans, and starts autobuilder \n           (reload-config) ;; reloads build config and resets autobuild \n           (build-once [id ...]) ;; builds source one time \n           (clean-builds [id ..]) ;; deletes compiled cljs target files \n           (print-config [id ...]) ;; prints out build configurations \n           (fig-status) ;; displays current state of system \n           (figwheel.client\/set-autoload false) ;; will turn autoloading off \n           (figwheel.client\/set-repl-pprint false) ;; will turn pretty printing off \n   Switch REPL build focus: \n           :cljs\/quit ;; allows you to switch REPL to another build \n     Docs: (doc function-name-here) \n     Exit: Control+C or :cljs\/quit \n  Results: Stored in vars *1, *2, *3, *e holds last exception object \n Prompt will show when Figwheel connects to your application \n \"asyncInit\" \n young quit, type: :cljs\/quit \n nil \n cljs.user=> (require ' [cljs.pprint :as pp] ) \n nil \n cljs.user=> (pp\/print 12) \n #object[Error Error: No protocol method IWriter.-write defined for type null: ] \n    cljs.core\/missing-protocol (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/core.cljs:316:4) \n    cljs.core\/-write (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/core.cljs:750:1) \n    Function.cljs.pprint.print.cljs$core$IFn$_invoke$arity$variadic (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/pprin\\ \n t.cljs:26:4) \n    cljs$pprint$print (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/pprint.cljs:25:1) \n nil -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I've been able to reproduce the same thing with the moment.js. \n\n There's opened issue on the JIRA: https:\/\/dev.clojure.org\/jira\/browse\/CLJS-2708 \u0432\u0442\u043e\u0440\u043d\u0438\u043a, 27 \u043c\u0430\u0440\u0442\u0430 2018 \u0433., 21:46:30 UTC+3 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c David Nolen \u043d\u0430\u043f\u0438\u0441\u0430\u043b: \n > \n > I believe there are issues with React 16 and Google Closure Compiler > module processing, try React 15 instead for now. \n > \n > David \n > \n > On Tue, Mar 27, 2018 at 3:24 AM, lachlan norman <xafi...@gmail.com > <javascript:>> wrote: \n > \n >> Hey there. \n >> \n >> I'm trying to use node destribution of reactjs with js module require. \n >> \n >> (defproject compile-cljs-node-modules-react \"0.1.0-SNAPSHOT\" \n >> :description \"FIXME: write description\" \n >> :url \"http:\/\/example.com\/FIXME\"; \n >> :license {:name \"Eclipse Public License\" \n >> :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"} \n >> :dependencies [[org.clojure\/clojure \"1.8.0\"] \n >> [org.clojure\/clojurescript \"1.10.238\"]] \n >> :plugins [[lein-cljsbuild \"1.1.7\"]] \n >> >> :cljsbuild >> {:builds {:app \n >> {:source-paths [\"src\"] \n >> :compiler \n >> {:main \"compile-cljs-node-modules-react.core\" \n >> :asset-path \"\/js\/out\" \n >> :output-to \"target\/cljsbuild\/public\/js\/app.js\" \n >> :output-dir \"target\/cljsbuild\/public\/js\/out\" \n >> :source-map true \n >> :npm-deps {:react \"16.2.0\" :react-dom \"16.2.0\"} \n >> :install-deps true \n >> :optimizations :none \n >> :pretty-print true}}}}) \n >> \n >> \n >> SImple cljs file: \n >> (ns compile-cljs-node-modules-react.core \n >> (:require [\"react-dom\/server\" :as dom-server] \n >> [react :as react])) \n >> >> (defn render-simple-markup [] \n >> young (react\/createElement \"div\" nil \"Hello, >> world!\"))) \n >> \n >> When I run \n >> lein cljsbuild once app \n >> \n >> I get the following error: \n >> [eval]:85 \n >> !id.startsWith(goog:); \n >> ^^^^ \n >> \n >> SyntaxError: missing ) after argument list \n >> at createScript (vm.js:80:10) \n >> at Object.runInThisContext (vm.js:139:10) \n >> at Object.<anonymous> ([eval]-wrapper:6:22) \n >> at Module._compile (module.js:635:30) \n >> at evalScript (bootstrap_node.js:462:27) \n >> at startup (bootstrap_node.js:163:9) \n >> at bootstrap_node.js:608:3 \n >> \n >> OS: windows 7 \n >> npm version: 5.5.1 \n >> node v8.9.3 \n >> \n >> -- >> Note that posts from new members are moderated - please be patient with >> your first post. \n >> --- >>"},
{"prompt":"Clojurescript 1.10.238 and pretty printing fails rafael young \n Launching ClojureScript REPL for build: dev \n Figwheel Controls: \n           (stop-autobuild) ;; stops Figwheel autobuilder \n           (start-autobuild [id ...]) ;; starts autobuilder focused on optional ids \n           (switch-to-build id ...) ;; switches autobuilder to different build \n           (reset-autobuild) ;; stops, cleans, and starts autobuilder \n           (reload-config) ;; reloads build config and resets autobuild \n           (build-once [id ...]) ;; builds source one time \n           (clean-builds [id ..]) ;; deletes compiled cljs target files \n           (print-config [id ...]) ;; prints out build configurations \n           (fig-status) ;; displays current state of system \n           (figwheel.client\/set-autoload false) ;; will turn autoloading off \n           (figwheel.client\/set-repl-pprint false) ;; will turn pretty printing off \n   Switch REPL build focus: \n           :cljs\/quit ;; allows you to switch REPL to another build \n     Docs: (doc function-name-here) \n     Exit: Control+C or :cljs\/quit \n  Results: Stored in vars *1, *2, *3, *e holds last exception object \n Prompt will show when Figwheel connects to your application \n \"asyncInit\" \n young quit, type: :cljs\/quit \n nil \n cljs.user=> (require ' [cljs.pprint :as pp] ) \n nil \n cljs.user=> (pp\/print 12) \n #object[Error Error: No protocol method IWriter.-write defined for type null: ] \n    cljs.core\/missing-protocol (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/core.cljs:316:4) \n    cljs.core\/-write (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/core.cljs:750:1) \n    Function.cljs.pprint.print.cljs$core$IFn$_invoke$arity$variadic (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/pprin\\ \n t.cljs:26:4) \n    cljs$pprint$print (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/pprint.cljs:25:1) \n nil -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I believe there are issues with React 16 and Google Closure Compiler module \n processing, try React 15 instead for now. kelly2 \n\n On Tue, Mar 27, 2018 at 3:24 AM, Marat Khafizov <xafiz...@gmail.com> wrote: \n\n > Hey there. \n > \n > I'm trying to use node destribution of reactjs with js module require. \n > \n > (defproject compile-cljs-node-modules-react \"0.1.0-SNAPSHOT\" \n > :description \"FIXME: write description\" \n > :url \"http:\/\/example.com\/FIXME\"; \n > :license {:name \"Eclipse Public License\" \n > :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"} \n > :dependencies [[org.clojure\/clojure \"1.8.0\"] \n > [org.clojure\/clojurescript \"1.10.238\"]] \n > :plugins [[lein-cljsbuild \"1.1.7\"]] \n > \n > :cljsbuild \n > {:builds {:app \n > {:source-paths [\"src\"] \n > :compiler \n > {:main \"compile-cljs-node-modules-react.core\" \n > :asset-path \"\/js\/out\" \n > :output-to \"target\/cljsbuild\/public\/js\/app.js\" \n > :output-dir \"target\/cljsbuild\/public\/js\/out\" \n > :source-map true \n > :npm-deps {:react \"16.2.0\" :react-dom \"16.2.0\"} \n > :install-deps true \n > :optimizations :none \n > :pretty-print true}}}}) \n > \n > \n > SImple cljs file: \n > (ns compile-cljs-node-modules-react.core \n > (:require [\"react-dom\/server\" :as dom-server] \n > [react :as react])) \n > \n > (defn render-simple-markup [] \n > young (react\/createElement \"div\" nil \"Hello, \n > world!\"))) \n > \n > When I run \n > lein cljsbuild once app \n > \n > I get the following error: \n > [eval]:85 \n > !id.startsWith(goog:); \n > ^^^^ \n > \n > SyntaxError: missing ) after argument list \n > at createScript (vm.js:80:10) \n > at Object.runInThisContext (vm.js:139:10) \n > at Object.<anonymous> ([eval]-wrapper:6:22) \n > at Module._compile (module.js:635:30) \n > at evalScript (bootstrap_node.js:462:27) \n > at startup (bootstrap_node.js:163:9) \n > at bootstrap_node.js:608:3 \n > \n > OS: windows 7 \n > npm version: 5.5.1 \n > node v8.9.3 \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Problem with tag literals in read-string manuel ufberg \n ClojureScript version: 1.9.293 \n Lumo version: 1.0.0 \n\n I'm reading with cljs.reader\/read-string. (cljs.reader\/register-tag-parser! \"custom\" identity) \n (cljs.read-string \"{:a #custom \\\"foo\\\"}\") \n\n works fine, but if the value is 'nil'... \n\n (cljs.reader\/register-tag-parser! \"custom\" identity) \n (cljs.read-string \"{:a #custom nil}\") \n\n it gives the following (strange) error \n\n Error: No dispatch macro for c \n     at Function.cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic (<embedded>:2200:350) \n     at cljs.reader.read_dispatch (<embedded>:2214:60) \n     at Object.cljs.reader.read_delimited_list (<embedded>:2212:6) \n     at cljs.reader.read_map (<embedded>:2216:54) \n     at Object.cljs.reader.read (<embedded>:2233:72) \n     at cljs.reader.read_string (<embedded>:2233:368) \n     at mach$core$act (evalmachine.<anonymous>:406:77) \n     at tryToString (fs.js:425:3) \n     at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:412:12) \n\n\n where c in this case is the first letter of the tag literal. \n\n I'm trying to get to the bottom of why, but was wondering if anyone on the list had any insights. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"http:\/\/dev.clojure.org\/jira\/browse\/CLJ-1138 On 06\/01\/17 18:10, manuel ufberg wrote: \n  ClojureScript version: 1.9.293 \n Lumo version: 1.0.0 \n\n I'm reading with cljs.reader\/read-string. \n\n (cljs.reader\/register-tag-parser! \"custom\" identity) \n (cljs.read-string \"{:a #custom \\\"foo\\\"}\") \n\n works fine, but if the value is 'nil'... \n\n (cljs.reader\/register-tag-parser! \"custom\" identity) \n (cljs.read-string \"{:a #custom nil}\") \n\n it gives the following (strange) error \n\n Error: No dispatch macro for c \n      at Function.cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic (<embedded>:2200:350) \n      at cljs.reader.read_dispatch (<embedded>:2214:60) \n      at Object.cljs.reader.read_delimited_list (<embedded>:2212:6) \n      at cljs.reader.read_map (<embedded>:2216:54) \n      at Object.cljs.reader.read (<embedded>:2233:72) \n      at cljs.reader.read_string (<embedded>:2233:368) \n      at mach$core$act (evalmachine.<anonymous>:406:77) \n      at tryToString (fs.js:425:3) \n      at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:412:12) \n\n\n where c in this case is the first letter of the tag literal. \n\n I'm trying to get to the bottom of why, but was wondering if anyone on the list had any insights. \n\n \n -- \n Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Referential ted brudzynski \n Hi Everyone! \n\n I recently come up against an unexpected behavior in my program written in cljs (version 1.7.145) \n and I verified that the same problem happen with lumo. cljs.user=> (> 1 nil) \n true \n cljs.user=> (apply max []) \n nil \n cljs.user=> (> 1 (apply max [])) \n false \n\n This seems to be a problem of Referential Opacity and I think is due to the fact that \">\" is a macro. \n But I'm not sure... Can someone give me a detailed explanation of the reason? :) \n\n Thanks! :) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I agree it's a little weird, but I think the resolution should be that \n those calls throw just as they do in the JVM variant. If they don't, it's \n probably because it's too much of a performance hit to do so. On Wed, Sep 13, 2017 at 1:57 PM varam solanas <gary.trakh...@gmail.com> \n wrote: \n\n > This is specific to cljs, jvm clojure doesn't allow a nil in number ops \n > and max doesn't allow 0 args. \n > \n > In general, clojure defers to the host for number operations since those \n > often need to be fast and overhead-free, so this is showing some \n > implementation details in the emitted javascript. \n > \n > I disagree that this is a 'referential transparency' issue when doing it \n > creates the same result every time. There's no 'references'. \n > \n > Upon inspecting, I notice that the emitted code for the apply \n > cljs.core.apply.call(null,cljs.core.max,cljs.core.PersistentVector.EMPTY) \n > returns 'undefined', where the emitted code for (max) is a bit different. \n > \"function (){ \n > return ((1) > (function (){var x__24812__auto__ = null; \n > var y__24813__auto__ = null; \n > return ((x__24812__auto__ > y__24813__auto__) ? x__24812__auto__ : \n > y__24813__auto__); \n > })()); \n > \n > I think the issue here is that 'max' is implemented as a macro but not \n > when you use apply: \n > \n > https:\/\/github.com\/clojure\/clojurescript\/blob\/r1.9.908-12-g998933f\/src\/main\/clojure\/cljs\/core.cljc#L1146 \n > \n > https:\/\/github.com\/clojure\/clojurescript\/blob\/998933f5090254611b46a2b86626fb17cabc994a\/src\/main\/cljs\/cljs\/core.cljs#L2649 \n > \n > On Wed, Sep 13, 2017 at 1:40 PM <ferrarigiovanni...@gmail.com> wrote: \n > \n >> Hi Everyone! \n >> \n >> I recently come up against an unexpected behavior in my program written \n >> in cljs (version 1.7.145) \n >> and I verified that the same problem happen with lumo. \n >> \n >> cljs.user=> (> 1 nil) \n >> true \n >> cljs.user=> (apply max []) \n >> nil \n >> cljs.user=> (> 1 (apply max [])) \n >> false \n >> \n >> This seems to be a problem of Referential Opacity and I think is due to \n >> the fact that \">\" is a macro. \n >> But I'm not sure... Can someone give me a detailed explanation of the \n >> reason? :) \n >> \n >> Thanks! :) \n >> \n >> -- \n >> Note that posts from new members are moderated - please be patient with \n >> your first post. \n >> --- \n >>"},
{"prompt":"Referential ted brudzynski \n Hi Everyone! \n\n I recently come up against an unexpected behavior in my program written in cljs (version 1.7.145) \n and I verified that the same problem happen with lumo. cljs.user=> (> 1 nil) \n true \n cljs.user=> (apply max []) \n nil \n cljs.user=> (> 1 (apply max [])) \n false \n\n This seems to be a problem of Referential Opacity and I think is due to the fact that \">\" is a macro. \n But I'm not sure... Can someone give me a detailed explanation of the reason? :) \n\n Thanks! :) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"This is specific to cljs, jvm clojure doesn't allow a nil in number ops and \n max doesn't allow 0 args. In general, clojure defers to the host for number operations since those \n often need to be fast and overhead-free, so this is showing some \n implementation details in the emitted javascript. \n\n I disagree that this is a 'referential transparency' issue when doing it \n creates the same result every time. There's no 'references'. \n\n Upon inspecting, I notice that the emitted code for the apply \n cljs.core.apply.call(null,cljs.core.max,cljs.core.PersistentVector.EMPTY) \n returns 'undefined', where the emitted code for (max) is a bit different. \n  \"function (){ \n return ((1) > (function (){var x__24812__auto__ = null; \n var y__24813__auto__ = null; \n return ((x__24812__auto__ > y__24813__auto__) ? x__24812__auto__ : \n y__24813__auto__); \n })()); \n\n I think the issue here is that 'max' is implemented as a macro but not when \n you use apply: \n https:\/\/github.com\/clojure\/clojurescript\/blob\/r1.9.908-12-g998933f\/src\/main\/clojure\/cljs\/core.cljc#L1146 \n https:\/\/github.com\/clojure\/clojurescript\/blob\/998933f5090254611b46a2b86626fb17cabc994a\/src\/main\/cljs\/cljs\/core.cljs#L2649 \n\n On Wed, Sep 13, 2017 at 1:40 PM <ferrarigiovanni...@gmail.com> wrote: \n\n > Hi Everyone! \n > \n > I recently come up against an unexpected behavior in my program written in \n > cljs (version 1.7.145) \n > and I verified that the same problem happen with lumo. \n > \n > cljs.user=> (> 1 nil) \n > true \n > cljs.user=> (apply max []) \n > nil \n > cljs.user=> (> 1 (apply max [])) \n > false \n > \n > This seems to be a problem of Referential Opacity and I think is due to \n > the fact that \">\" is a macro. \n > But I'm not sure... Can someone give me a detailed explanation of the \n > reason? :) \n > \n > Thanks! :) \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Issue with building fileUrl on windows in repl.cljc? maximiliano hegeler \n I think that the following line might cause the problem on windows: \n https:\/\/github.com\/clojure\/clojurescript\/blob\/master\/src\/main\/clojure\/cljs\/repl.cljc#L713 For file param e.g. \"src\\duct3\\client.cljs\" \n\n (str \"file:\/\/\" (.getAbsolutePath file)) \n\n evaluates on windows as: \n \"file:\/\/C:\\Projects\\Playground\\duct3\\src\\duct3\\client.cljs\" \n\n which is not legal file Url ( \n https:\/\/en.wikipedia.org\/wiki\/File_URI_scheme#Windows) and final result is: java.net.UnknownHostException (java treat that URL as FTP address). \n\n Is this a known issue? \n\n Thx! \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Looks like a problem to me. Please file an issue in JIRA, thanks! \n\n betts On Sun, Jul 2, 2017 at 3:12 PM, maximiliano hegeler <vojimir.go...@gmail.com> \n wrote: \n\n > \n > I think that the following line might cause the problem on windows: \n > https:\/\/github.com\/clojure\/clojurescript\/blob\/master\/src\/ \n > main\/clojure\/cljs\/repl.cljc#L713 \n > \n > For file param e.g. \"src\\duct3\\client.cljs\" \n > \n > (str \"file:\/\/\" (.getAbsolutePath file)) \n > \n > evaluates on windows as: \n > \"file:\/\/C:\\Projects\\Playground\\duct3\\src\\duct3\\client.cljs\" \n > \n > which is not legal file Url (https:\/\/en.wikipedia.org\/ \n > wiki\/File_URI_scheme#Windows) \n > \n > and final result is: java.net.UnknownHostException (java treat that URL \n > as FTP address). \n > \n > Is this a known issue? \n > \n > Thx! \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"figwheel-main vs headless chrome testing emir flickenger \n I'm trying to follow the instructions here https:\/\/figwheel.org\/docs\/testing.html#running-tests-in-a-headless-environment, but the command line test execution never terminates. I've executed the following procedure: \n\n *Development environment* \n\n    - LinuxMint 19.1 \n    - BASH \n    - openjdk version \"11.0.1\" 2018-10-16 \n    - OpenJDK Runtime Environment (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1) \n    - OpenJDK 64-Bit Server VM (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1, mixed mode, sharing) \n    - Clojure 1.9.0 \n    - ClojureScript 1.10.339 \n    - figwheel-main 0.1.9 \n\n *Development Process* \n *Create a figwheel-main project by executing this command:* \n => clj -Sdeps '{:deps {seancorfield\/clj-new {:mvn\/version \"0.5.5\"}}}' -m clj-new.create figwheel-main fsclj.core \n\n *Enter the fsclj.core directory* \n => cd fsclj.core \n\n *Execute the unit tests from the command line:* \n => clj -A:fig:test \n\n [Figwheel] Validating figwheel-main.edn \n [Figwheel] figwheel-main.edn is valid (\u30c4)\/ \n [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\" \n [Figwheel] Successfully compiled build test to \"target\/public\/cljs-out\/test-main.js\" in 1.147 seconds. \n 2019-03-15 11:13:56.627:INFO::main: Logging initialized @10504ms \n Opening URL http:\/\/localhost:9500\/test.html \n\n Testing fsclj.core-test \n\n Ran 2 tests containing 2 assertions. \n 0 failures, 0 errors. \n :figwheel.main.testing\/success \n\n *Find path to google-chrome:* \n => which google-chrome \n\n \/usr\/bin\/google-chrome \n\n *Modify 'test.cljs.edn' to use Chrome headless by uncommenting the ':launch-js' line and changing it.* \n => cat test.cljs.edn \n\n ^{ \n ;; use an alternative landing page for the tests so that we don't \n ;; launch the application \n :open-url \"http:\/\/[[server-hostname]]:[[server-port]]\/test.html\"; \n\n ;; uncomment to launch tests in a headless environment \n ;; you will have to figure out the path to chrome on your system \n :launch-js [\"\/usr\/bin\/google-chrome\" \"--headless\" \"--disable-gpu\" \"--repl\" :open-url] \n } \n {:main fsclj.test-runner} \n\n *Execute the unit tests from the command line again:* \n => clj -A:fig:test \n\n [Figwheel] Validating figwheel-main.edn \n [Figwheel] figwheel-main.edn is valid (\u30c4)\/ \n [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\" \n [Figwheel] Successfully compiled build test to \"target\/public\/cljs-out\/test-main.js\" in 2.06 seconds. \n 2019-03-15 13:16:16.381:INFO::main: Logging initialized @11033ms \n Launching Javascript environment with script: [\"\/usr\/bin\/google-chrome\" \"--headless\" \"--disable-gpu\" \"--repl\" :open-url] \n Environment output being logged to: target\/public\/cljs-out\/test\/js-environment.log \n\n *The above output is generated, but the program never terminates* \n\n The js-environment.log file contains: \n\n \/131437.958265:INFO:headless_shell.cc(370)] Type a Javascript expression to evaluate or \"quit\" to exit. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Looks like the URL got garbled. Plain text: \n\n https:\/\/github.com\/cloojure\/cljs-template.git On Tue, Mar 19, 2019 at 8:16 PM niels pee <clooj...@gmail.com> wrote: \n\n > Hi - Here is a template project that I've developed to showcase CLJS \n > testing and JS interop & testing. Just clone this repo: \n > \n > https:\/\/github.com\/cloojure\/cljs-template.git \n > \n > \n > \n > and follow the README to set up cljs tests (`lein test` for CLJ will work \n > out of the box). \n > \n > It is based on the original figwheel (plans to upgrade to figwheel-main \n > are in the works). \n > \n > niels \n > \n > \n > On Tue, Mar 19, 2019 at 8:23 AM emir flickenger <pwhit...@gmail.com> \n > wrote: \n > \n >> I'm trying to follow the instructions here \n >> https:\/\/figwheel.org\/docs\/testing.html#running-tests-in-a-headless-environment, \n >> but the command line test execution never terminates. \n >> \n >> I've executed the following procedure: \n >> \n >> *Development environment* \n >> \n >> - LinuxMint 19.1 \n >> - BASH \n >> - openjdk version \"11.0.1\" 2018-10-16 \n >> - OpenJDK Runtime Environment (build \n >> 11.0.1+13-Ubuntu-3ubuntu118.04ppa1) \n >> - OpenJDK 64-Bit Server VM (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1, \n >> mixed mode, sharing) \n >> - Clojure 1.9.0 \n >> - ClojureScript 1.10.339 \n >> - figwheel-main 0.1.9 \n >> \n >> *Development Process* \n >> *Create a figwheel-main project by executing this command:* \n >> => clj -Sdeps '{:deps {seancorfield\/clj-new {:mvn\/version \"0.5.5\"}}}' \n >> -m clj-new.create \n >> figwheel-main \n >> fsclj.core \n >> \n >> *Enter the fsclj.core directory* \n >> => cd fsclj.core \n >> \n >> *Execute the unit tests from the command line:* \n >> => clj -A:fig:test \n >> \n >> [Figwheel] Validating figwheel-main.edn \n >> [Figwheel] figwheel-main.edn is valid (\u30c4)\/ \n >> [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\" \n >> [Figwheel] Successfully compiled build test to \n >> \"target\/public\/cljs-out\/test-main.js\" in 1.147 seconds. \n >> 2019-03-15 11:13:56.627:INFO::main: Logging initialized @10504ms \n >> Opening URL http:\/\/localhost:9500\/test.html \n >> \n >> Testing fsclj.core-test \n >> \n >> Ran 2 tests containing 2 assertions. \n >> 0 failures, 0 errors. \n >> :figwheel.main.testing\/success \n >> \n >> *Find path to google-chrome:* \n >> => which google-chrome \n >> \n >> \/usr\/bin\/google-chrome \n >> \n >> *Modify 'test.cljs.edn' to use Chrome headless by uncommenting the \n >> ':launch-js' line and changing it.* \n >> => cat test.cljs.edn \n >> \n >> ^{ \n >> ;; use an alternative landing page for the tests so that we don't \n >> ;; launch the application \n >> :open-url \"http:\/\/[[server-hostname]]:[[server-port]]\/test.html\"; \n >> \n >> ;; uncomment to launch tests in a headless environment \n >> ;; you will have to figure out the path to chrome on your system \n >> :launch-js [\"\/usr\/bin\/google-chrome\" \"--headless\" \"--disable-gpu\" \n >> \"--repl\" :open-url] \n >> } \n >> {:main fsclj.test-runner} \n >> \n >> *Execute the unit tests from the command line again:* \n >> => clj -A:fig:test \n >> \n >> [Figwheel] Validating figwheel-main.edn \n >> [Figwheel] figwheel-main.edn is valid (\u30c4)\/ \n >> [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\" \n >> [Figwheel] Successfully compiled build test to \n >> \"target\/public\/cljs-out\/test-main.js\" in 2.06 seconds. \n >> 2019-03-15 13:16:16.381:INFO::main: Logging initialized @11033ms \n >> Launching Javascript environment with script: [\"\/usr\/bin\/google-chrome\" \n >> \"--headless\" \"--disable-gpu\" \"--repl\" :open-url] \n >> Environment output being logged to: \n >> target\/public\/cljs-out\/test\/js-environment.log \n >> \n >> *The above output is generated, but the program never terminates* \n >> \n >> The js-environment.log file contains: \n >> \n >> \/131437.958265:INFO:headless_shell.cc(370)] Type a Javascript expression \n >> to evaluate or \"quit\" to exit. \n >> \n >> -- \n >> Note that posts from new members are moderated - please be patient with \n >> your first post. \n >> --- \n >>"},
{"prompt":"figwheel-main vs headless chrome testing emir flickenger \n I'm trying to follow the instructions here https:\/\/figwheel.org\/docs\/testing.html#running-tests-in-a-headless-environment, but the command line test execution never terminates. I've executed the following procedure: \n\n *Development environment* \n\n    - LinuxMint 19.1 \n    - BASH \n    - openjdk version \"11.0.1\" 2018-10-16 \n    - OpenJDK Runtime Environment (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1) \n    - OpenJDK 64-Bit Server VM (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1, mixed mode, sharing) \n    - Clojure 1.9.0 \n    - ClojureScript 1.10.339 \n    - figwheel-main 0.1.9 \n\n *Development Process* \n *Create a figwheel-main project by executing this command:* \n => clj -Sdeps '{:deps {seancorfield\/clj-new {:mvn\/version \"0.5.5\"}}}' -m clj-new.create figwheel-main fsclj.core \n\n *Enter the fsclj.core directory* \n => cd fsclj.core \n\n *Execute the unit tests from the command line:* \n => clj -A:fig:test \n\n [Figwheel] Validating figwheel-main.edn \n [Figwheel] figwheel-main.edn is valid (\u30c4)\/ \n [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\" \n [Figwheel] Successfully compiled build test to \"target\/public\/cljs-out\/test-main.js\" in 1.147 seconds. \n 2019-03-15 11:13:56.627:INFO::main: Logging initialized @10504ms \n Opening URL http:\/\/localhost:9500\/test.html \n\n Testing fsclj.core-test \n\n Ran 2 tests containing 2 assertions. \n 0 failures, 0 errors. \n :figwheel.main.testing\/success \n\n *Find path to google-chrome:* \n => which google-chrome \n\n \/usr\/bin\/google-chrome \n\n *Modify 'test.cljs.edn' to use Chrome headless by uncommenting the ':launch-js' line and changing it.* \n => cat test.cljs.edn \n\n ^{ \n ;; use an alternative landing page for the tests so that we don't \n ;; launch the application \n :open-url \"http:\/\/[[server-hostname]]:[[server-port]]\/test.html\"; \n\n ;; uncomment to launch tests in a headless environment \n ;; you will have to figure out the path to chrome on your system \n :launch-js [\"\/usr\/bin\/google-chrome\" \"--headless\" \"--disable-gpu\" \"--repl\" :open-url] \n } \n {:main fsclj.test-runner} \n\n *Execute the unit tests from the command line again:* \n => clj -A:fig:test \n\n [Figwheel] Validating figwheel-main.edn \n [Figwheel] figwheel-main.edn is valid (\u30c4)\/ \n [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\" \n [Figwheel] Successfully compiled build test to \"target\/public\/cljs-out\/test-main.js\" in 2.06 seconds. \n 2019-03-15 13:16:16.381:INFO::main: Logging initialized @11033ms \n Launching Javascript environment with script: [\"\/usr\/bin\/google-chrome\" \"--headless\" \"--disable-gpu\" \"--repl\" :open-url] \n Environment output being logged to: target\/public\/cljs-out\/test\/js-environment.log \n\n *The above output is generated, but the program never terminates* \n\n The js-environment.log file contains: \n\n \/131437.958265:INFO:headless_shell.cc(370)] Type a Javascript expression to evaluate or \"quit\" to exit. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi - Here is a template project that I've developed to showcase CLJS \n testing and JS interop & testing. Just clone this repo: https:\/\/github.com\/cloojure\/cljs-template.git \n\n\n\n and follow the README to set up cljs tests (`lein test` for CLJ will work \n out of the box). \n\n It is based on the original figwheel (plans to upgrade to figwheel-main are \n in the works). \n\n temma \n\n\n On Tue, Mar 19, 2019 at 8:23 AM emir flickenger <pwhit...@gmail.com> wrote: \n\n > I'm trying to follow the instructions here \n > https:\/\/figwheel.org\/docs\/testing.html#running-tests-in-a-headless-environment, \n > but the command line test execution never terminates. \n > \n > I've executed the following procedure: \n > \n > *Development environment* \n > \n > - LinuxMint 19.1 \n > - BASH \n > - openjdk version \"11.0.1\" 2018-10-16 \n > - OpenJDK Runtime Environment (build \n > 11.0.1+13-Ubuntu-3ubuntu118.04ppa1) \n > - OpenJDK 64-Bit Server VM (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1, \n > mixed mode, sharing) \n > - Clojure 1.9.0 \n > - ClojureScript 1.10.339 \n > - figwheel-main 0.1.9 \n > \n > *Development Process* \n > *Create a figwheel-main project by executing this command:* \n > => clj -Sdeps '{:deps {seancorfield\/clj-new {:mvn\/version \"0.5.5\"}}}' \n > -m clj-new.create \n > figwheel-main \n > fsclj.core \n > \n > *Enter the fsclj.core directory* \n > => cd fsclj.core \n > \n > *Execute the unit tests from the command line:* \n > => clj -A:fig:test \n > \n > [Figwheel] Validating figwheel-main.edn \n > [Figwheel] figwheel-main.edn is valid (\u30c4)\/ \n > [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\" \n > [Figwheel] Successfully compiled build test to \n > \"target\/public\/cljs-out\/test-main.js\" in 1.147 seconds. \n > 2019-03-15 11:13:56.627:INFO::main: Logging initialized @10504ms \n > Opening URL http:\/\/localhost:9500\/test.html \n > \n > Testing fsclj.core-test \n > \n > Ran 2 tests containing 2 assertions. \n > 0 failures, 0 errors. \n > :figwheel.main.testing\/success \n > \n > *Find path to google-chrome:* \n > => which google-chrome \n > \n > \/usr\/bin\/google-chrome \n > \n > *Modify 'test.cljs.edn' to use Chrome headless by uncommenting the \n > ':launch-js' line and changing it.* \n > => cat test.cljs.edn \n > \n > ^{ \n > ;; use an alternative landing page for the tests so that we don't \n > ;; launch the application \n > :open-url \"http:\/\/[[server-hostname]]:[[server-port]]\/test.html\"; \n > \n > ;; uncomment to launch tests in a headless environment \n > ;; you will have to figure out the path to chrome on your system \n > :launch-js [\"\/usr\/bin\/google-chrome\" \"--headless\" \"--disable-gpu\" \"--repl\" \n > :open-url] \n > } \n > {:main fsclj.test-runner} \n > \n > *Execute the unit tests from the command line again:* \n > => clj -A:fig:test \n > \n > [Figwheel] Validating figwheel-main.edn \n > [Figwheel] figwheel-main.edn is valid (\u30c4)\/ \n > [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\" \n > [Figwheel] Successfully compiled build test to \n > \"target\/public\/cljs-out\/test-main.js\" in 2.06 seconds. \n > 2019-03-15 13:16:16.381:INFO::main: Logging initialized @11033ms \n > Launching Javascript environment with script: [\"\/usr\/bin\/google-chrome\" \n > \"--headless\" \"--disable-gpu\" \"--repl\" :open-url] \n > Environment output being logged to: \n > target\/public\/cljs-out\/test\/js-environment.log \n > \n > *The above output is generated, but the program never terminates* \n > \n > The js-environment.log file contains: \n > \n > \/131437.958265:INFO:headless_shell.cc(370)] Type a Javascript expression \n > to evaluate or \"quit\" to exit. \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"cider clojurescript denise procter \n Hi, \n\n I am looking for a working configuration for Emacs\/Cider\/ClojureScript Repl. Following the instructions given in the Cider manual <http:\/\/cider.readthedocs.io\/en\/latest\/clojurescript\/> I built a project.clj: (defproject piggi \"0.1.0-SNAPSHOT\" \n   :description \"FIXME: write description\" \n   :url \"http:\/\/example.com\/FIXME\"; \n   :license {:name \"Eclipse Public License\" \n             :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"} \n   :dependencies [[org.clojure\/clojure \"1.9.0\"] \n                  [org.clojure\/clojurescript \"1.10.238\"]] :profiles \n   {:dev {:dependencies [[cider\/piggieback \"0.3.1\"] \n                         denise \"0.2.13\"]]} denise denise denise \n\n But, if I issue cider-jack-in-clojurescript I get: \n\n Starting nREPL server via lein update-in :dependencies conj denise \\\"0.2.12\\\"\\] -- update-in :plugins conj denise \\\"0.12.0-SNAPSHOT\\\"\\] -- denise :headless... <wheel-right> is undefined error in process sentinel: Could not start nREPL server: WARNING: boolean? already refers to: #\u2019clojure.core\/boolean? in namespace: cider.inlined-deps.fipp.v0v6v4.fipp.visit, being denise by: #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading denise java.lang.ClassNotFoundException: sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading denise java.lang.RuntimeException: Invalid token: ::clojure.test\/once-fixtures, denise Exception in thread \"main\" java.lang.RuntimeException: Unable to resolve var: denise in this context, compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918) \n \n at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.access$300(Compiler.java:38) at clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.eval(Compiler.java:7059) at clojure.lang.Compiler.eval(Compiler.java:7052) at clojure.lang.Compiler.load(Compiler.java:7514) at clojure.lang.Compiler.loadFile(Compiler.java:7452) at clojure.main$load_script.invokeStatic(main.clj:278) at clojure.main$init_opt.invokeStatic(main.clj:280) at clojure.main$init_opt.invoke(main.clj:280) at clojure.main$initialize.invokeStatic(main.clj:311) at clojure.main$null_opt.invokeStatic(main.clj:345) at clojure.main$null_opt.invoke(main.clj:342) at clojure.main$main.invokeStatic(main.clj:424) at clojure.main$main.doInvoke(main.clj:387) at clojure.lang.RestFn.applyTo(RestFn.java:137) at clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) Caused by: java.lang.RuntimeException: Unable to resolve var: denise in this context at clojure.lang.Util.runtimeException(Util.java:221) at clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess failed error in process sentinel: Could not start nREPL server: WARNING: boolean? already refers to: #\u2019clojure.core\/boolean? in namespace: cider.inlined-deps.fipp.v0v6v4.fipp.visit, being denise by: #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading denise java.lang.ClassNotFoundException: sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading denise java.lang.RuntimeException: Invalid token: ::clojure.test\/once-fixtures, denise Exception in thread \"main\" java.lang.RuntimeException: Unable to resolve var: denise in this context, compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918) \n \n at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.access$300(Compiler.java:38) at clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.eval(Compiler.java:7059) at clojure.lang.Compiler.eval(Compiler.java:7052) at clojure.lang.Compiler.load(Compiler.java:7514) at clojure.lang.Compiler.loadFile(Compiler.java:7452) at clojure.main$load_script.invokeStatic(main.clj:278) at clojure.main$init_opt.invokeStatic(main.clj:280) at clojure.main$init_opt.invoke(main.clj:280) at clojure.main$initialize.invokeStatic(main.clj:311) at clojure.main$null_opt.invokeStatic(main.clj:345) at clojure.main$null_opt.invoke(main.clj:342) at clojure.main$main.invokeStatic(main.clj:424) at clojure.main$main.doInvoke(main.clj:387) at clojure.lang.RestFn.applyTo(RestFn.java:137) at clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) Caused by: java.lang.RuntimeException: Unable to resolve var: denise in this context at clojure.lang.Util.runtimeException(Util.java:221) at clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess failed Any hints, what to do? \n procter \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I used your exact profile.clj and was able to `cider-jack-in-clojurescript`. CIDER offered me which type of connection to use and I selected nashorn since I see no figwheel dependencies. If you want to move to figwheel, you'll need some cljsbuild info. Try using [cider\/piggieback \"0.3.5\"] along with [lein-figwheel \"0.5.16\"] and [\"figwheel-sidecar \"0.5.16\"]. The update from cemerick -> cider\/piggieback threw a wrench into things as everything expects the former. Figwheel updated to look for both in later versions. \n\n On Tuesday, May 1, 2018 at 6:35:26 AM UTC-5, procter wrote: \n > \n > Hi, \n > \n > I am looking for a working configuration for Emacs\/Cider\/ClojureScript > Repl. Following the instructions given in the Cider manual > <http:\/\/cider.readthedocs.io\/en\/latest\/clojurescript\/> I built a > project.clj: \n > \n > (defproject piggi \"0.1.0-SNAPSHOT\" \n > :description \"FIXME: write description\" \n > :url \"http:\/\/example.com\/FIXME\"; \n > :license {:name \"Eclipse Public License\" \n > :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"} \n > :dependencies [[org.clojure\/clojure \"1.9.0\"] \n > [org.clojure\/clojurescript \"1.10.238\"]] > :profiles \n > {:dev {:dependencies [[cider\/piggieback \"0.3.1\"] \n > denise \"0.2.13\"]]} > denise denise denise \n > \n > But, if I issue cider-jack-in-clojurescript I get: \n > \n > Starting nREPL server via lein update-in :dependencies conj > denise \\\"0.2.12\\\"\\] -- update-in :plugins conj > denise \\\"0.12.0-SNAPSHOT\\\"\\] -- denise :headless... > <wheel-right> is undefined error in process sentinel: Could not start nREPL > server: WARNING: boolean? already refers to: #\u2019clojure.core\/boolean? in > namespace: cider.inlined-deps.fipp.v0v6v4.fipp.visit, being denise by: > #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading > denise java.lang.ClassNotFoundException: > sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading > denise java.lang.RuntimeException: Invalid token: > ::clojure.test\/once-fixtures, > denise Exception in thread > \"main\" java.lang.RuntimeException: Unable to resolve var: > denise in this context, > compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918) \n > > at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.access$300(Compiler.java:38) at > clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at > clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at > clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.eval(Compiler.java:7059) at > clojure.lang.Compiler.eval(Compiler.java:7052) at > clojure.lang.Compiler.load(Compiler.java:7514) at > clojure.lang.Compiler.loadFile(Compiler.java:7452) at > clojure.main$load_script.invokeStatic(main.clj:278) at > clojure.main$init_opt.invokeStatic(main.clj:280) at > clojure.main$init_opt.invoke(main.clj:280) at > clojure.main$initialize.invokeStatic(main.clj:311) at > clojure.main$null_opt.invokeStatic(main.clj:345) at > clojure.main$null_opt.invoke(main.clj:342) at > clojure.main$main.invokeStatic(main.clj:424) at > clojure.main$main.doInvoke(main.clj:387) at > clojure.lang.RestFn.applyTo(RestFn.java:137) at > clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) > Caused by: java.lang.RuntimeException: Unable to resolve var: > denise in this context at > clojure.lang.Util.runtimeException(Util.java:221) at > clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess > failed error in process sentinel: Could not start nREPL server: WARNING: > boolean? already refers to: #\u2019clojure.core\/boolean? in namespace: > cider.inlined-deps.fipp.v0v6v4.fipp.visit, being denise by: > #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading > denise java.lang.ClassNotFoundException: > sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading > denise java.lang.RuntimeException: Invalid token: > ::clojure.test\/once-fixtures, > denise Exception in thread > \"main\" java.lang.RuntimeException: Unable to resolve var: > denise in this context, > compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918) \n > > at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.access$300(Compiler.java:38) at > clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at > clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at > clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.eval(Compiler.java:7059) at > clojure.lang.Compiler.eval(Compiler.java:7052) at > clojure.lang.Compiler.load(Compiler.java:7514) at > clojure.lang.Compiler.loadFile(Compiler.java:7452) at > clojure.main$load_script.invokeStatic(main.clj:278) at > clojure.main$init_opt.invokeStatic(main.clj:280) at > clojure.main$init_opt.invoke(main.clj:280) at > clojure.main$initialize.invokeStatic(main.clj:311) at > clojure.main$null_opt.invokeStatic(main.clj:345) at > clojure.main$null_opt.invoke(main.clj:342) at > clojure.main$main.invokeStatic(main.clj:424) at > clojure.main$main.doInvoke(main.clj:387) at > clojure.lang.RestFn.applyTo(RestFn.java:137) at > clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) > Caused by: java.lang.RuntimeException: Unable to resolve var: > denise in this context at > clojure.lang.Util.runtimeException(Util.java:221) at > clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess > failed > \n > Any hints, what to do? \n > procter \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"cider clojurescript denise procter \n Hi, \n\n I am looking for a working configuration for Emacs\/Cider\/ClojureScript Repl. Following the instructions given in the Cider manual <http:\/\/cider.readthedocs.io\/en\/latest\/clojurescript\/> I built a project.clj: (defproject piggi \"0.1.0-SNAPSHOT\" \n   :description \"FIXME: write description\" \n   :url \"http:\/\/example.com\/FIXME\"; \n   :license {:name \"Eclipse Public License\" \n             :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"} \n   :dependencies [[org.clojure\/clojure \"1.9.0\"] \n                  [org.clojure\/clojurescript \"1.10.238\"]] :profiles \n   {:dev {:dependencies [[cider\/piggieback \"0.3.1\"] \n                         denise \"0.2.13\"]]} denise denise denise \n\n But, if I issue cider-jack-in-clojurescript I get: \n\n Starting nREPL server via lein update-in :dependencies conj denise \\\"0.2.12\\\"\\] -- update-in :plugins conj denise \\\"0.12.0-SNAPSHOT\\\"\\] -- denise :headless... <wheel-right> is undefined error in process sentinel: Could not start nREPL server: WARNING: boolean? already refers to: #\u2019clojure.core\/boolean? in namespace: cider.inlined-deps.fipp.v0v6v4.fipp.visit, being denise by: #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading denise java.lang.ClassNotFoundException: sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading denise java.lang.RuntimeException: Invalid token: ::clojure.test\/once-fixtures, denise Exception in thread \"main\" java.lang.RuntimeException: Unable to resolve var: denise in this context, compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918) \n \n at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.access$300(Compiler.java:38) at clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.eval(Compiler.java:7059) at clojure.lang.Compiler.eval(Compiler.java:7052) at clojure.lang.Compiler.load(Compiler.java:7514) at clojure.lang.Compiler.loadFile(Compiler.java:7452) at clojure.main$load_script.invokeStatic(main.clj:278) at clojure.main$init_opt.invokeStatic(main.clj:280) at clojure.main$init_opt.invoke(main.clj:280) at clojure.main$initialize.invokeStatic(main.clj:311) at clojure.main$null_opt.invokeStatic(main.clj:345) at clojure.main$null_opt.invoke(main.clj:342) at clojure.main$main.invokeStatic(main.clj:424) at clojure.main$main.doInvoke(main.clj:387) at clojure.lang.RestFn.applyTo(RestFn.java:137) at clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) Caused by: java.lang.RuntimeException: Unable to resolve var: denise in this context at clojure.lang.Util.runtimeException(Util.java:221) at clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess failed error in process sentinel: Could not start nREPL server: WARNING: boolean? already refers to: #\u2019clojure.core\/boolean? in namespace: cider.inlined-deps.fipp.v0v6v4.fipp.visit, being denise by: #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading denise java.lang.ClassNotFoundException: sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading denise java.lang.RuntimeException: Invalid token: ::clojure.test\/once-fixtures, denise Exception in thread \"main\" java.lang.RuntimeException: Unable to resolve var: denise in this context, compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918) \n \n at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.access$300(Compiler.java:38) at clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.analyze(Compiler.java:6729) at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at clojure.lang.Compiler.analyze(Compiler.java:6773) at clojure.lang.Compiler.eval(Compiler.java:7059) at clojure.lang.Compiler.eval(Compiler.java:7052) at clojure.lang.Compiler.load(Compiler.java:7514) at clojure.lang.Compiler.loadFile(Compiler.java:7452) at clojure.main$load_script.invokeStatic(main.clj:278) at clojure.main$init_opt.invokeStatic(main.clj:280) at clojure.main$init_opt.invoke(main.clj:280) at clojure.main$initialize.invokeStatic(main.clj:311) at clojure.main$null_opt.invokeStatic(main.clj:345) at clojure.main$null_opt.invoke(main.clj:342) at clojure.main$main.invokeStatic(main.clj:424) at clojure.main$main.doInvoke(main.clj:387) at clojure.lang.RestFn.applyTo(RestFn.java:137) at clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) Caused by: java.lang.RuntimeException: Unable to resolve var: denise in this context at clojure.lang.Util.runtimeException(Util.java:221) at clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess failed Any hints, what to do? \n procter \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I'm not sure but try starting with a working figwheel template then compare it with yours to see whats missing On Tuesday, May 1, 2018 at 2:35:26 PM UTC+3, procter wrote: \n > \n > Hi, \n > \n > I am looking for a working configuration for Emacs\/Cider\/ClojureScript > Repl. Following the instructions given in the Cider manual > <http:\/\/cider.readthedocs.io\/en\/latest\/clojurescript\/> I built a > project.clj: \n > \n > (defproject piggi \"0.1.0-SNAPSHOT\" \n > :description \"FIXME: write description\" \n > :url \"http:\/\/example.com\/FIXME\"; \n > :license {:name \"Eclipse Public License\" \n > :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"} \n > :dependencies [[org.clojure\/clojure \"1.9.0\"] \n > [org.clojure\/clojurescript \"1.10.238\"]] > :profiles \n > {:dev {:dependencies [[cider\/piggieback \"0.3.1\"] \n > denise \"0.2.13\"]]} > denise denise denise \n > \n > But, if I issue cider-jack-in-clojurescript I get: \n > \n > Starting nREPL server via lein update-in :dependencies conj > denise \\\"0.2.12\\\"\\] -- update-in :plugins conj > denise \\\"0.12.0-SNAPSHOT\\\"\\] -- denise :headless... > <wheel-right> is undefined error in process sentinel: Could not start nREPL > server: WARNING: boolean? already refers to: #\u2019clojure.core\/boolean? in > namespace: cider.inlined-deps.fipp.v0v6v4.fipp.visit, being denise by: > #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading > denise java.lang.ClassNotFoundException: > sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading > denise java.lang.RuntimeException: Invalid token: > ::clojure.test\/once-fixtures, > denise Exception in thread > \"main\" java.lang.RuntimeException: Unable to resolve var: > denise in this context, > compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918) \n > > at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.access$300(Compiler.java:38) at > clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at > clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at > clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.eval(Compiler.java:7059) at > clojure.lang.Compiler.eval(Compiler.java:7052) at > clojure.lang.Compiler.load(Compiler.java:7514) at > clojure.lang.Compiler.loadFile(Compiler.java:7452) at > clojure.main$load_script.invokeStatic(main.clj:278) at > clojure.main$init_opt.invokeStatic(main.clj:280) at > clojure.main$init_opt.invoke(main.clj:280) at > clojure.main$initialize.invokeStatic(main.clj:311) at > clojure.main$null_opt.invokeStatic(main.clj:345) at > clojure.main$null_opt.invoke(main.clj:342) at > clojure.main$main.invokeStatic(main.clj:424) at > clojure.main$main.doInvoke(main.clj:387) at > bedi at > bedi at clojure.main.main(main.java:37) > Caused by: java.lang.RuntimeException: Unable to resolve var: > denise in this context at > clojure.lang.Util.runtimeException(Util.java:221) at > clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess > failed error in process sentinel: Could not start nREPL server: WARNING: > boolean? already refers to: #\u2019clojure.core\/boolean? in namespace: > cider.inlined-deps.fipp.v0v6v4.fipp.visit, being denise by: > #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading > denise java.lang.ClassNotFoundException: > sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading > denise java.lang.RuntimeException: Invalid token: > ::clojure.test\/once-fixtures, > denise Exception in thread > \"main\" java.lang.RuntimeException: Unable to resolve var: > denise in this context, > compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918) \n > > at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.access$300(Compiler.java:38) at > clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.analyze(Compiler.java:6729) at > clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at > clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at > clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at > clojure.lang.Compiler.analyze(Compiler.java:6773) at > clojure.lang.Compiler.eval(Compiler.java:7059) at > clojure.lang.Compiler.eval(Compiler.java:7052) at > clojure.lang.Compiler.load(Compiler.java:7514) at > clojure.lang.Compiler.loadFile(Compiler.java:7452) at > clojure.main$load_script.invokeStatic(main.clj:278) at > clojure.main$init_opt.invokeStatic(main.clj:280) at > clojure.main$init_opt.invoke(main.clj:280) at > clojure.main$initialize.invokeStatic(main.clj:311) at > clojure.main$null_opt.invokeStatic(main.clj:345) at > clojure.main$null_opt.invoke(main.clj:342) at > clojure.main$main.invokeStatic(main.clj:424) at > clojure.main$main.doInvoke(main.clj:387) at > bedi at > bedi at clojure.main.main(main.java:37) > Caused by: java.lang.RuntimeException: Unable to resolve var: > denise in this context at > clojure.lang.Util.runtimeException(Util.java:221) at > clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at > clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess > failed > \n > Any hints, what to do? \n > procter \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"durable datascript experiments lori kirt \n Hi, \n\n I have finally taken the time yesterday in a good end-of-year tradition \n of ambitious hacks to bring the hitchhiker-tree (1) and datascript (2) \n together. I have only touched the db.cljc namespace in datascript and \n replaced all calls to the in-memory balanced-tree set (btset) with calls \n to the hitchhiker-tree, the rest is vanilla DataScript. All tests pass \n and I can store and load databases sufficiently with the three trees for \n the indices (no datascript serialization used). I would like to have early feedback, so feel free to play and throw \n ideas around. You need to install my version of the hitchhiker-tree (1) \n first. Atm. it is a drop-in replacement for DataScript, but this is a \n prototype, don't use it for anything serious yet. \n\n Here is an example interaction with the store: \n\n https:\/\/github.com\/whilo\/datascript\/blob\/hitchhiker_tree_support\/test\/datascript\/test\/store.cljc \n\n Caveats: \n 1. There is no working GC for the hitchhiker-trees yet. \n 2. Performance penalty against DataScript is in the 20-100x range, but I \n haven't done serious profiling yet. \n 3. There are probably bugs that are not covered by the tests, please \n open an issue. \n\n Goals: \n This is more of an intermediary goal, although it is very useful to have \n a durable datascript around in itself. The hitchhiker-tree is a generic \n persistent durable datastructure that can be efficiently synched and \n hence replication is the goal. Next step is a \"web-after-tomorrow\" (3) \n architecture similar to datsync, that we are discussing about here: \n\n https:\/\/gitter.im\/metasoarous\/datsync \n https:\/\/gitter.im\/replikativ\/replikativ \n\n In the longer run we can allow multiple writers with different \n conflict-resolution scheme similar to CRDTs and the bloom language \n (dedalus). \n\n\n Happy hacking :), \n lori \n\n (1) https:\/\/github.com\/whilo\/hitchhiker-tree \n (2) https:\/\/github.com\/whilo\/datascript\/tree\/hitchhiker_tree_support \n (3) http:\/\/tonsky.me\/blog\/the-web-after-tomorrow\/ \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Whoa; this looks awesome. Thanks for publishing this. \n\n On Sat, Dec 30, 2017 at 2:24 PM, lori kirt < \n whitesp...@polyc0l0r.net> wrote: > Hi, \n > \n > performance is now a lot better, ~3-5x slower than datascript for \n > queries on the fractal index trees on my machine. This still needs \n > tuning ofc., but I have tried to make it fast with a lot of profiling \n > during idle times at 34C3. The fractal tree causes some overhead though. \n > Inserts are a lot more expensive, but I expect them to be written to \n > disk anyway. Therefore comparing inserts\/deletes with datascript is a \n > bit pointless, if you do everything in memory then it will always be \n > more performant. \n > \n > So it should be usable for small test projects now. GC is still TODO, \n > but I would be really happy for feedback! We are developing this as a \n > toolbox for distributed dataprocessing architectures. \n > \n > Best, \n > lori \n > \n > On 26.12.2017 12:18, lori kirt wrote: \n > > Hi, \n > > \n > > I have finally taken the time yesterday in a good end-of-year tradition \n > > of ambitious hacks to bring the hitchhiker-tree (1) and datascript (2) \n > > together. I have only touched the db.cljc namespace in datascript and \n > > replaced all calls to the in-memory balanced-tree set (btset) with calls \n > > to the hitchhiker-tree, the rest is vanilla DataScript. All tests pass \n > > and I can store and load databases sufficiently with the three trees for \n > > the indices (no datascript serialization used). \n > > \n > > I would like to have early feedback, so feel free to play and throw \n > > ideas around. You need to install my version of the hitchhiker-tree (1) \n > > first. Atm. it is a drop-in replacement for DataScript, but this is a \n > > prototype, don't use it for anything serious yet. \n > > \n > > Here is an example interaction with the store: \n > > \n > > https:\/\/github.com\/whilo\/datascript\/blob\/hitchhiker_ \n > tree_support\/test\/datascript\/test\/store.cljc \n > > \n > > Caveats: \n > > 1. There is no working GC for the hitchhiker-trees yet. \n > > 2. Performance penalty against DataScript is in the 20-100x range, but I \n > > haven't done serious profiling yet. \n > > 3. There are probably bugs that are not covered by the tests, please \n > > open an issue. \n > > \n > > Goals: \n > > This is more of an intermediary goal, although it is very useful to have \n > > a durable datascript around in itself. The hitchhiker-tree is a generic \n > > persistent durable datastructure that can be efficiently synched and \n > > hence replication is the goal. Next step is a \"web-after-tomorrow\" (3) \n > > architecture similar to datsync, that we are discussing about here: \n > > \n > > https:\/\/gitter.im\/metasoarous\/datsync \n > > https:\/\/gitter.im\/replikativ\/replikativ \n > > \n > > In the longer run we can allow multiple writers with different \n > > conflict-resolution scheme similar to CRDTs and the bloom language \n > > (dedalus). \n > > \n > > \n > > Happy hacking :), \n > > lori \n > > \n > > (1) https:\/\/github.com\/whilo\/hitchhiker-tree \n > > (2) https:\/\/github.com\/whilo\/datascript\/tree\/hitchhiker_tree_support \n > > (3) http:\/\/tonsky.me\/blog\/the-web-after-tomorrow\/ \n > > \n > \n > \n > -- \n >"},
{"prompt":"(failed) Attempts to inject cljs repl into 3rd party webpage huespedes woodard \n Hi there, \n\n Here are my steps to inject cljs repl into 3rd party webpage: 1. inject the following line via \"Custom JavaScript for websites\" \n\n  (function(){var d=document;var s=d.createElement('script');s.src='https:\/\/localhost:8090\/js\/main.js';d.body.appendChild(s);})() \n\n 2. *.edn file: \n\n ;; shadow-cljs configuration \n {:source-paths \n  [\"src\/dev\" \n   \"src\/main\" \n   \"src\/test\"] \n\n  :dependencies \n  [[reagent \"0.8.1\"] ;[etaoin \"0.3.5\"] \n  ] \n  :ssl {} ;for shadow-cljs server, defaults to 9630 port \n  :http {:port 9630 \n         :ssl-port 23456 \n         :host \"localhost\"} :dev-http {8090 {:root \"public\" \n         :push-state\/headers {\"Access-Control-Allow-Origin\" \"*\" }} \n   } \n  :builds \n {:frontend \n   {:target :browser \n    :asset-path \"https:\/\/localhost:8090\/js\"; \n    :modules {:main {:init-fn acme.frontend.app\/init}} \n    }}} \n\n 3. modify main.js with no-cors mode \n\n           fetch(uri, { mode: 'no-cors'}) \n\n 4. However, the browser endpoint (shown below) is never called wss:\/\/localhost:23456\/ws\/worker\/frontend\/...\/browser \n\n 5. what am i missing here? the emacs skewer-mode seem to work just fine. \n   Was wondering if DOMContentLoaded ever get fired, even so I don't know how to fix\/patch it. \n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I made a thing for that here https:\/\/www.chrepl.app\/ I haven't made it work with shadow-cljs yet, but that'd be an interesting option. \n\n V\/r \n\n ayse \n\n On Tuesday, August 13, 2019 at 12:40:36 AM UTC-4, huespedes woodard wrote: \n > \n > Hi there, \n > \n > Here are my steps to inject cljs repl into 3rd party webpage: \n > \n > 1. inject the following line via \"Custom JavaScript for websites\" \n > \n > (function(){var d=document;var s=d.createElement('script');s.src=' \n > https:\/\/localhost:8090\/js\/main.js';d.body.appendChild(s);})() \n > \n > 2. *.edn file: \n > \n > ;; shadow-cljs configuration \n > {:source-paths \n > [\"src\/dev\" \n > \"src\/main\" \n > \"src\/test\"] \n > \n > :dependencies \n > [[reagent \"0.8.1\"] ;[etaoin \"0.3.5\"] \n > ] \n > :ssl {} ;for shadow-cljs server, defaults to 9630 port \n > :http {:port 9630 \n > :ssl-port 23456 \n > :host \"localhost\"} > :dev-http {8090 {:root \"public\" \n > :push-state\/headers {\"Access-Control-Allow-Origin\" \"*\" }} \n > } \n > :builds \n > {:frontend \n > {:target :browser \n > :asset-path \"https:\/\/localhost:8090\/js\"; \n > :modules {:main {:init-fn acme.frontend.app\/init}} \n > }}} \n > \n > 3. modify main.js with no-cors mode \n > \n > fetch(uri, { mode: 'no-cors'}) \n > \n > 4. However, the browser endpoint (shown below) is never called > \n > wss:\/\/localhost:23456\/ws\/worker\/frontend\/...\/browser \n > \n > 5. what am i missing here? the emacs skewer-mode seem to work just fine. \n > Was wondering if DOMContentLoaded ever get fired, even so I don't know > how to fix\/patch it. \n > \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"(failed) Attempts to inject cljs repl into 3rd party webpage huespedes woodard \n Hi there, \n\n Here are my steps to inject cljs repl into 3rd party webpage: 1. inject the following line via \"Custom JavaScript for websites\" \n\n  (function(){var d=document;var s=d.createElement('script');s.src='https:\/\/localhost:8090\/js\/main.js';d.body.appendChild(s);})() \n\n 2. *.edn file: \n\n ;; shadow-cljs configuration \n {:source-paths \n  [\"src\/dev\" \n   \"src\/main\" \n   \"src\/test\"] \n\n  :dependencies \n  [[reagent \"0.8.1\"] ;[etaoin \"0.3.5\"] \n  ] \n  :ssl {} ;for shadow-cljs server, defaults to 9630 port \n  :http {:port 9630 \n         :ssl-port 23456 \n         :host \"localhost\"} :dev-http {8090 {:root \"public\" \n         :push-state\/headers {\"Access-Control-Allow-Origin\" \"*\" }} \n   } \n  :builds \n {:frontend \n   {:target :browser \n    :asset-path \"https:\/\/localhost:8090\/js\"; \n    :modules {:main {:init-fn acme.frontend.app\/init}} \n    }}} \n\n 3. modify main.js with no-cors mode \n\n           fetch(uri, { mode: 'no-cors'}) \n\n 4. However, the browser endpoint (shown below) is never called wss:\/\/localhost:23456\/ws\/worker\/frontend\/...\/browser \n\n 5. what am i missing here? the emacs skewer-mode seem to work just fine. \n   Was wondering if DOMContentLoaded ever get fired, even so I don't know how to fix\/patch it. \n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"You cannot really inject a shadow-cljs dev build into any arbitrary page. It is not designed for that and will potentially conflict with the page itself in bad ways. You can set :devtools {:devtools-url \"https:\/\/your.host:23456\"} to overwrite where the socket is trying to connect to. The Browser console will tell if you that connect fails. \n\n DOMContentLoaded is not used by the CLJS build, not sure why you are asking about it. If you are trying to register an event handler for it you are likely just registering it too late when it has already fired. \n\n On Tuesday, August 13, 2019 at 6:40:36 AM UTC+2, huespedes woodard wrote: \n > \n > Hi there, \n > \n > Here are my steps to inject cljs repl into 3rd party webpage: \n > \n > 1. inject the following line via \"Custom JavaScript for websites\" \n > \n > (function(){var d=document;var s=d.createElement('script');s.src=' \n > https:\/\/localhost:8090\/js\/main.js';d.body.appendChild(s);})() \n > \n > 2. *.edn file: \n > \n > ;; shadow-cljs configuration \n > {:source-paths \n > [\"src\/dev\" \n > \"src\/main\" \n > \"src\/test\"] \n > \n > :dependencies \n > [[reagent \"0.8.1\"] ;[etaoin \"0.3.5\"] \n > ] \n > :ssl {} ;for shadow-cljs server, defaults to 9630 port \n > :http {:port 9630 \n > :ssl-port 23456 \n > :host \"localhost\"} > :dev-http {8090 {:root \"public\" \n > :push-state\/headers {\"Access-Control-Allow-Origin\" \"*\" }} \n > } \n > :builds \n > {:frontend \n > {:target :browser \n > :asset-path \"https:\/\/localhost:8090\/js\"; \n > :modules {:main {:init-fn acme.frontend.app\/init}} \n > }}} \n > \n > 3. modify main.js with no-cors mode \n > \n > fetch(uri, { mode: 'no-cors'}) \n > \n > 4. However, the browser endpoint (shown below) is never called > \n > wss:\/\/localhost:23456\/ws\/worker\/frontend\/...\/browser \n > \n > 5. what am i missing here? the emacs skewer-mode seem to work just fine. \n > Was wondering if DOMContentLoaded ever get fired, even so I don't know > how to fix\/patch it. \n > \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"I did the Clojurescript quickstart, repl prompt never shows up piper sorenson \n Hello ! \n\n I strictly followed the tutorial here : https:\/\/clojurescript.org\/guides\/quick-start Clojurescript is perfectly compiling the hello-world.core namespace. Browser shows up, on terminal I can read \"Hello World\". > clj --main cljs.main --verbose --compile hello-world.core --repl \n\n Options passed to ClojureScript compiler: {:output-dir \"out\", :closure-warnings {:check-types :off, :check-variables :off}, :closure-defines {}, :ups-libs nil, :cache-analysis true, :closure-module-roots [], :optimizations :none, :ups-foreign-libs [], :verbose true, :aot-cache true, :preloads [process.env clojure.browser.repl.preload], :ignore-js-module-exts [\".css\"], :output-to \"out\/main.js\", :preamble [\"cljs\/imul.js\"], :browser-repl true, :ups-externs nil, :opts-cache \"cljsc_opts.edn\", :source-map true, :cache-analysis-format :transit, :main hello-world.core, :emit-constants nil, :npm-deps false} \n REPL env options: {:output-dir \"out\"} \n Reading analysis cache for jar:file:\/home\/stup3fait\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.439\/clojurescript-1.10.439.jar!\/cljs\/core.cljs \n Hello world \n\n *But I never get the repl prompt. * \n\n No errors in chrome dev console, nor in terminal. Something seems to \"block\". \n\n I tried several version of clojurescript, same problem. \n\n >From the browser perspective, when I hit F5, there are 4 XHR requests sent to localhost:9000 : \n\n Request 1 : response = {\"repl\":\"Thread-263\",\"form\":\"cljs.core._STAR_print_fn_STAR_ = clojure.browser.repl.repl_print;\\ncljs.core._STAR_print_err_fn_STAR_ = clojure.browser.repl.repl_print;\\ncljs.core._STAR_print_newline_STAR_ = true;\\nif((cljs.core.count.call(null,clojure.browser.repl.print_queue) > (0))){\\nclojure.browser.repl.flush_print_queue_BANG_(cljs.core.deref.call(null,clojure.browser.repl.xpc_connection));\\n} \n \n else {\\n}\\n\"} \n Request 2 : response = ignore__ \n Request 3 : response = ignore__ \n Request 4 : interstingly, this request do not responds. It's in PENDING state. \n\n Those 4 requests are about robots.txt (!?), like : http:\/\/localhost:9000\/repl?xpc=%7B%22cn%22%3A%22mpJZAw6akG%22%2C%22tp%22%3Anull%2C%22osh%22%3Anull%2C%22ppu%22%3A%22http%3A%2F%2Flocalhost%3A9000%2Frobots.txt%22%2C%22lpu%22%3A%22http%3A%2F%2Flocalhost%3A9000%2Frobots.txt%22%7D \n\n I tried both firefox and chrome with same behaviour. \n\n This hanging request may not be the reason why my repl never shows up. I don't really understand how the repl and the browser are wired together. \n I was expecting some kind of websocket connection for communication between browser and repl but none is opened. \n\n If I launch a node repl (--repl-env node), I got a repl prompt and can play with my app. \n\n When I quit the browser, I have a \"Broken pipe\" java exception in terminal, so terminal is somehow connected with browser. \n\n Did you solve this problem in the past ? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I faced the same problem. \n It used to work but it didn't work suddenly. It worked with your workaround. I found a strange workaround : \n > \n > clj --main cljs.main --verbose --repl-opts \"{:launch-browser false}\" > --compile hello-world.core --repl \n > \n > Then open a brower manually. \n > \n > \n > On Sunday, November 11, 2018 at 8:48:13 AM UTC+1, piper sorenson wrote: \n >> \n >> Hello ! \n >> \n >> I strictly followed the tutorial here : >> https:\/\/clojurescript.org\/guides\/quick-start \n >> \n >> Clojurescript is perfectly compiling the hello-world.core namespace. >> Browser shows soe on terminal I can read \"Hello World\". >> \n >> > clj --main cljs.main --verbose --compile hello-world.core --repl \n >> \n >> Options passed to ClojureScript compiler: {:output-dir \"out\", >> :closure-warnings {:check-types :off, :check-variables :off}, >> :closure-defines {}, soe nil, :cache-analysis true, >> :closure-module-roots [], :optimizations :none, soe [], >> :verbose true, :aot-cache true, :preloads [process.env >> clojure.browser.repl.preload], :ignore-js-module-exts [\".css\"], :output-to >> \"out\/main.js\", :preamble [\"cljs\/imul.js\"], :browser-repl true, soe >> nil, :opts-cache \"cljsc_opts.edn\", :source-map true, :cache-analysis-format >> :transit, :main hello-world.core, :emit-constants nil, :npm-deps false} \n >> REPL env options: {:output-dir \"out\"} \n >> Reading analysis cache for >> soe \n >> Hello world \n >> \n >> *But I never get the repl prompt. * \n >> \n >> No errors in chrome dev console, nor in terminal. Something seems to >> \"block\". \n >> \n >> I tried several version of clojurescript, same problem. \n >> \n >> From the browser perspective, when I hit F5, there are 4 XHR requests >> sent to localhost:9000 : \n >> \n >> Request 1 : response = >> {\"repl\":\"Thread-263\",\"form\":\"cljs.core._STAR_print_fn_STAR_ = >> clojure.browser.repl.repl_print;\\ncljs.core._STAR_print_err_fn_STAR_ = >> clojure.browser.repl.repl_print;\\ncljs.core._STAR_print_newline_STAR_ = >> true;\\nif((cljs.core.count.call(null,clojure.browser.repl.print_queue) > >> (0))){\\nclojure.browser.repl.flush_print_queue_BANG_(cljs.core.deref.call(null,clojure.browser.repl.xpc_connection));\\n} \n >> >> else {\\n}\\n\"} \n >> Request 2 : response = ignore__ \n >> Request 3 : response = ignore__ \n >> Request 4 : interstingly, this request do not responds. It's in PENDING >> state. \n >> \n >> Those 4 requests are about robots.txt (!?), like : >> http:\/\/localhost:9000\/repl?xpc=%7B%22cn%22%3A%22mpJZAw6akG%22%2C%22tp%22%3Anull%2C%22osh%22%3Anull%2C%22ppu%22%3A%22http%3A%2F%2Flocalhost%3A9000%2Frobots.txt%22%2C%22lpu%22%3A%22http%3A%2F%2Flocalhost%3A9000%2Frobots.txt%22%7D \n >> \n >> I tried both firefox and chrome with same behaviour. \n >> \n >> This hanging request may not be the reason why my repl never shows soe I >> don't really understand how the repl and the browser are wired together. \n >> I was expecting some kind of websocket connection for communication >> between browser and repl but none is opened. \n >> \n >> If I launch a node repl (--repl-env node), I got a repl prompt and can >> play with my app. \n >> \n >> When I quit the browser, I have a \"Broken pipe\" java exception in >> terminal, so terminal is somehow connected with browser. \n >> \n >> Did you solve this problem in the past ? \n >> \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"No :exclude option for :require in trevor finiochetti \n This compiles in Clojure 1.9.0-alpha12 but not in Clojurescript 1.9.229: \n\n (ns free.matrix-arithmetic \n   (:require [clojure.core.matrix :as mx :exclude [e*]])) The error in Clojurescript is: \n\n clojure.lang.ExceptionInfo: Only :as, :refer and :rename options supported in :require \/ :require-macros; offending spec: [clojure.core.matrix :as mx :exclude [e*]] ... \n\n\n\n The code compiels in Clojurescript if I remove \":exclude [e*]\". \n\n Is :exclude going away as an option to require and :require, and Clojurescript is ahead of Clojure? Is this a bug? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Monday, September 26, 2016 at 1:39:47 PM UTC+1, Alex Miller wrote: \n > On Sunday, September 25, 2016 at 10:41:33 PM UTC-5, finiochetti wrote: \n > > This compiles in Clojure 1.9.0-alpha12 but not in Clojurescript 1.9.229: \n > > > > (ns free.matrix-arithmetic \n > > (:require [clojure.core.matrix :as mx :exclude [e*]])) \n > > > > The error in Clojurescript is: \n > > > > clojure.lang.ExceptionInfo: Only :as, :refer and :rename options supported > > in :require \/ :require-macros; offending spec: [clojure.core.matrix :as mx > > :exclude [e*]] ... \n > > > > > > > > The code compiels in Clojurescript if I remove \":exclude [e*]\". \n > > > > Is :exclude going away as an option to require and :require, and > > Clojurescript is ahead of Clojure? Is this a bug? \n > > :exclude is not a valid option here (it's not having any effect). (doc > require) mentions only :as and :refer as valid options in the libspec. > :exclude is an option for :refer and :refer-clojure, not for :require. \n > > It's maybe interesting that the spec for ns does not report this problem here > in :clojure.core.specs\/prefix-list because of the use of keys*, which takes > an open map view of options. I'll have to check with Rich if this is > something we want to lock down more. FWIW, beware that locking this down further would have to account for ClojureScript's `:refer-macros` and `:include-macros`, etc. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"No :exclude option for :require in trevor finiochetti \n This compiles in Clojure 1.9.0-alpha12 but not in Clojurescript 1.9.229: \n\n (ns free.matrix-arithmetic \n   (:require [clojure.core.matrix :as mx :exclude [e*]])) The error in Clojurescript is: \n\n clojure.lang.ExceptionInfo: Only :as, :refer and :rename options supported in :require \/ :require-macros; offending spec: [clojure.core.matrix :as mx :exclude [e*]] ... \n\n\n\n The code compiels in Clojurescript if I remove \":exclude [e*]\". \n\n Is :exclude going away as an option to require and :require, and Clojurescript is ahead of Clojure? Is this a bug? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Sunday, September 25, 2016 at 10:41:33 PM UTC-5, finiochetti wrote: \n > This compiles in Clojure 1.9.0-alpha12 but not in Clojurescript 1.9.229: \n > > (ns free.matrix-arithmetic \n > (:require [clojure.core.matrix :as mx :exclude [e*]])) \n > > The error in Clojurescript is: \n > > clojure.lang.ExceptionInfo: Only :as, :refer and :rename options supported in > :require \/ :require-macros; offending spec: [clojure.core.matrix :as mx > :exclude [e*]] ... \n > > > > The code compiels in Clojurescript if I remove \":exclude [e*]\". \n > > Is :exclude going away as an option to require and :require, and > Clojurescript is ahead of Clojure? Is this a bug? :exclude is not a valid option here (it's not having any effect). (doc require) mentions only :as and :refer as valid options in the libspec. :exclude is an option for :refer and :refer-clojure, not for :require. \n\n It's maybe interesting that the spec for ns does not report this problem here in :clojure.core.specs\/prefix-list because of the use of keys*, which takes an open map view of options. I'll have to check with Rich if this is something we want to lock down more. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"How is Clojure loaded by java from cljs.jar? demetri yam \n In the \"ClojureScript Compiler\" section of the ClojureScript Quick Start Guide <https:\/\/clojurescript.org\/guides\/quick-start>, we run the build script with the java command: java -cp cljs.jar:src clojure.main build.clj \n\n\n This command starts a JVM and loads the cljs.jar file and all of the contents of the 'src' directory, to the JVM Classpath. \n\n According to the man page for the java program, clojure.main is a class file, (I'm assuming this one <https:\/\/github.com\/clojure\/clojure\/blob\/master\/src\/jvm\/clojure\/main.java>) and build.clj is its argument. \n\n My question is: *How is the clojure.main class getting loaded to the classpath?* \n\n Obviously clojure.main is part of Clojure. By unzipping the cljs.jar, I see that it has a project.clj file with the following contents: \n\n (defproject org.clojure\/clojurescript \"0.0-SNAPSHOT\" \n   :description \"ClojureScript compiler and core runtime library\" \n   :parent [org.clojure\/pom.contrib \"0.1.2\"] \n   :url \"https:\/\/github.com\/clojure\/clojurescript\"; \n   :license {:name \"Eclipse Public License\" \n             :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"} \n   :jvm-opts ^:replace [\"-Dclojure.compiler.direct-linking=true\" \"-Xmx512m\" \"-server\"] \n   :source-paths [\"src\/main\/clojure\" \"src\/main\/cljs\"] \n   :resource-paths [\"src\/main\/cljs\"] \n   :test-paths [\"src\/test\/clojure\" \"src\/test\/cljs\" \"src\/test\/self\" \"src\/test\/cljs_cp\"] \n   :dependencies [[org.clojure\/clojure \"1.8.0\"] \n                  [org.clojure\/data.json \"0.2.6\"] \n                  [org.clojure\/tools.reader \"1.0.3\"] \n                  [org.clojure\/test.check \"0.10.0-alpha2\" :scope \"test\"] \n                  [com.cognitect\/transit-clj \"0.8.300\"] \n                  [org.clojure\/google-closure-library \"0.0-20170519-fa0499ef\"] \n                  [com.google.javascript\/closure-compiler-unshaded \"v20170626\"] \n                  [org.mozilla\/rhino \"1.7R5\"]] \n   :profiles {:1.6 {:dependencies [[org.clojure\/clojure \"1.6.0\"]]} \n              :uberjar {:aot :all :main clojure.main}} \n   :aliases {\"test-all\" [\"with-profile\" \"test,1.5:test,1.6\" \"test\"] \n             \"check-all\" [\"with-profile\" \"1.5:1.6\" \"check\"]} \n   :min-lein-version \"2.0.0\") \n\n\n [org.clojure\/clojure \"1.8.0\"] is listed as a dependency. Is this how Clojure is getting loaded to the JVM Classpath? \n\n If so, how is this happening? It doesn't seem like the java program would be smart enough to parse a project.clj file. -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"cljs.jar is self-contained (includes its dependencies) and includes Clojure itself (including clojure.main). The cljs.jar is built using this script: \n\n https:\/\/github.com\/clojure\/clojurescript\/blob\/master\/script\/build \n\n You can walk through that process to learn more if needed. \n\n\n On Saturday, August 5, 2017 at 12:15:31 PM UTC-5, demetri yam wrote: \n > \n > In the \"ClojureScript Compiler\" section of the ClojureScript Quick Start > Guide <https:\/\/clojurescript.org\/guides\/quick-start>, we run the build > script with the java command: \n > \n > java -cp cljs.jar:src clojure.main build.clj \n > \n > \n > This command starts a JVM and loads the cljs.jar file and all of the > contents of the 'src' directory, to the JVM Classpath. \n > \n > According to the man page for the java program, clojure.main is a class > file, (I'm assuming this one > <https:\/\/www.google.com\/url?q=https%3A%2F%2Fgithub.com%2Fclojure%2Fclojure%2Fblob%2Fmaster%2Fsrc%2Fjvm%2Fclojure%2Fmain.java&sa=D&sntz=1&usg=AFQjCNGvBUQ46skdR5RrGZG1INZmSOpElw>) \n > > and build.clj is its argument. \n > \n > My question is: *How is the clojure.main class getting loaded to the > classpath?* \n > \n > Obviously clojure.main is part of Clojure. By unzipping the cljs.jar, I > see that it has a project.clj file with the following contents: \n > \n > (defproject org.clojure\/clojurescript \"0.0-SNAPSHOT\" \n > :description \"ClojureScript compiler and core runtime library\" \n > :parent [org.clojure\/pom.contrib \"0.1.2\"] \n > :url \"https:\/\/github.com\/clojure\/clojurescript\"; \n > :license {:name \"Eclipse Public License\" \n > :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"} \n > :jvm-opts ^:replace [\"-Dclojure.compiler.direct-linking=true\" \"-Xmx512m\" > \"-server\"] \n > :source-paths [\"src\/main\/clojure\" \"src\/main\/cljs\"] \n > :resource-paths [\"src\/main\/cljs\"] \n > :test-paths [\"src\/test\/clojure\" \"src\/test\/cljs\" \"src\/test\/self\" > \"src\/test\/cljs_cp\"] \n > :dependencies [[org.clojure\/clojure \"1.8.0\"] \n > [org.clojure\/data.json \"0.2.6\"] \n > [org.clojure\/tools.reader \"1.0.3\"] \n > [org.clojure\/test.check \"0.10.0-alpha2\" :scope \"test\"] \n > [com.cognitect\/transit-clj \"0.8.300\"] \n > [org.clojure\/google-closure-library > \"0.0-20170519-fa0499ef\"] \n > [com.google.javascript\/closure-compiler-unshaded > \"v20170626\"] \n > [org.mozilla\/rhino \"1.7R5\"]] \n > :profiles {:1.6 {:dependencies [[org.clojure\/clojure \"1.6.0\"]]} \n > :uberjar {:aot :all :main clojure.main}} \n > :aliases {\"test-all\" [\"with-profile\" \"test,1.5:test,1.6\" \"test\"] \n > \"check-all\" [\"with-profile\" \"1.5:1.6\" \"check\"]} \n > :min-lein-version \"2.0.0\") \n > \n > \n > [org.clojure\/clojure \"1.8.0\"] is listed as a dependency. Is this how > Clojure is getting loaded to the JVM Classpath? \n > \n > If so, how is this happening? It doesn't seem like the java program would > be smart enough to parse a project.clj file. > \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"How can I implement the getter and setter of ES6 in ClojureScript? dalia riddle \n The third party JS library I use requires implementing the static getter method of ES6. Could anyone tell me how I can implement the following simple code in ClojureScript? class Person{ \n   constructor(){ \n     this._name = 'jack'; \n   }; \n\n   static get name(){ \n     return this._name; \n   } \n\n   static set name(val){ \n     this._name = val; \n   } \n } \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"ClojureScript doesn't support all that classes sugar. But you can always use JS files in your project. They only have to be GCC compatible (ES6 modules for instance, see https:\/\/github.com\/google\/closure-compiler\/wiki\/ECMAScript6) and on your class path. Herwig example is close, but not exactly what you wanted. Static getters\/setter have to be defined on constructor itself, not on its prototype (then they are instance props). \n\n On Friday, December 28, 2018 at 1:48:22 AM UTC+1, dalia riddle wrote: \n > \n > The third party JS library I use requires implementing the static getter > method of ES6. \n > \n > Could anyone tell me how I can implement the following simple code in > ClojureScript? > \n > \n > class Person{ \n > constructor(){ \n > this._name = 'jack'; \n > }; \n > \n > static get name(){ \n > return this._name; \n > } \n > \n > static set name(val){ \n > this._name = val; \n > } \n > } \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"How can I implement the getter and setter of ES6 in ClojureScript? dalia riddle \n The third party JS library I use requires implementing the static getter method of ES6. Could anyone tell me how I can implement the following simple code in ClojureScript? class Person{ \n   constructor(){ \n     this._name = 'jack'; \n   }; \n\n   static get name(){ \n     return this._name; \n   } \n\n   static set name(val){ \n     this._name = val; \n   } \n } \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Am Fr., 28. Dez. 2018 um 01:48 Uhr schrieb dalia riddle <philo...@gmail.com>: > The third party JS library I use requires implementing the static getter \n > method of ES6. \n > \n\n AFAIK ClojureScript doesn't have a construct to generate getters \/ setters. \n You can implement those via Object.defineProperty \n <https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Object\/defineProperty>, \n though. \n\n Could anyone tell me how I can implement the following simple code in \n > ClojureScript? \n > \n > \n > class Person{ \n > constructor(){ \n > this._name = 'jack'; \n > }; \n > \n > static get name(){ \n > return this._name; \n > } \n > \n > static set name(val){ \n > this._name = val; \n > } \n > } \n > \n\n (def Person \n   (let [constructor (fn [] (this-as t (set! (.-_name t) \"jack\"))) \n         proto (doto #js{} \n                 (js\/Object.defineProperty \"name\" \n                   #js{:get #(this-as t (.-_name t)) \n                       :set #(this-as t (set! (.-_name t) %))}))] \n     (set! (.-prototype constructor) proto) \n     constructor)) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"question for reagent, how to use component defined by js, like cljsjs\/antd zhangenqi aruni rojo \n I create a reagent template project, then I want to use a react UI library, like antd aruni I think cljsjs\/antd can be used, but doesn't aruni I change the function current-page like that: \n\n (defn current-page [] \n   aruni \n\n but doesn't aruni \n\n other side, the code like that: \n\n (defn current-page [] \n   [:div aruni \"success\")]) \n\n work success! \n\n I know that is a function call, not a aruni \n So, how to use compontent like \"Button\"? \n\n -- Note that posts from new members are moderated - please be patient with your first aruni \n ---","response":"aruni On Wednesday, May 24, 2017 at 11:56:37 PM UTC-4, aruni wrote: \n > \n > I create a reagent template project, then I want to use a react UI > library, like antd aruni I think > cljsjs\/antd can be used, but doesn't aruni \n > \n > I change the function current-page like that: \n > \n > (defn current-page [] \n > aruni \n > \n > but doesn't aruni \n > \n > other side, the code like that: \n > \n > (defn current-page [] \n > [:div aruni \"success\")]) \n > \n > work success! \n > \n > I know that is a function call, not a aruni \n > So, how to use compontent like \"Button\"? \n > \n\n -- Note that posts from new members are moderated - please be patient with your first aruni \n ---"},
{"prompt":"question for reagent, how to use component defined by js, like cljsjs\/antd zhangenqi aruni rojo \n I create a reagent template project, then I want to use a react UI library, like antd aruni I think cljsjs\/antd can be used, but doesn't aruni I change the function current-page like that: \n\n (defn current-page [] \n   aruni \n\n but doesn't aruni \n\n other side, the code like that: \n\n (defn current-page [] \n   [:div aruni \"success\")]) \n\n work success! \n\n I know that is a function call, not a aruni \n So, how to use compontent like \"Button\"? \n\n -- Note that posts from new members are moderated - please be patient with your first aruni \n ---","response":"have you tried (reagent\/adapt-react-class aruni -- Note that posts from new members are moderated - please be patient with your first aruni \n ---"},
{"prompt":"\u201cSeamless interaction with NPM\u201d not so seamless dianne hawkins \n Hello, \n\n I want to write a simple proof-of-concept (which may eventually evolve into something more serious) GUI wallet for a cryptocurrency that I\u2019ve been writing. As desktop libraries\/languages are either not very functional or not very portable, ClojureScript plus local storage in browser as a database looks like a good choice. To make it work, I need support for Ed25519 (a public-key signature system). Fortunately, there are implementations of Ed25519 compiled to JavaScript. js-nacl is a \u201cpure-Javascript High-level API to Emscripten-compiled libsodium routines\u201d, available also as a NPM package, and post at https:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules \n  advertises \u201cSeamless interaction with NPM dependencies\u201d. I tried to use it, roughly in the following way: \n\n \u2488 lein new reagent-frontend ercoin-wallet \n \u2489 Added :npm-deps {:js-nacl \"1.2.2\"} to :cljsbuild \u21e8 :builds \u21e8 app \u21e8 :compiler in project.clj. \n \u248a Added [js-nacl :as nacl] to :require in core.cljs \n\n However :npm-deps seemed to be ignored. Fixed this by downgrading ClojureScript from 1.9.908 to 1.9.671 (BTW, these versions are not tagged in the Git repository), but then there are warnings: \n\n WARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module [\u2026] at [\u2026] \n\n , where modules are \u201cfs\u201d, \u201cpath\u201d and \u201ccrypto\u201d. \n\n spinningtopsofdo on IRC said that \u201cFrom a quick skim for js-nacl it looks like it's using emscripten and doing some unique module loading that Google Closure isn't aware of (https:\/\/github.com\/tonyg\/js-nacl\/blob\/master\/lib\/nacl_factory.js#L30-L39).\u201d and \u201cI think it's more the way js-nacl is using ASM \/ Emscripten and creating JavaScript Modules. :npm-deps covers the common JavaScript module patterns (e.g. CommonJs, Node, UMD) but there is still many edge cases out there\u201d. \n\n I\u2019ve tried also tweetnacl-js, but similarly there is a warning: \n\n \u201cWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module \"crypto\" at [\u2026]\u201d. \n\n What is the status of NPM interoperability then? Is it supposed to work as plug & play or does it require hacky knowledge in some cases? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I want to add my experience with this when trying to fit react-apollo into a cljs project. Maybe it is useful to others going in this direction. Overall, I find it works better than I expected for an alpha feature, though not yet seamless. Unfortunately I did not keep good enough notes while hacking through the project, so some bits below are from my memory. Also, I'm no JS expert. \n\n I started a project with latest CLJS, reagent 0.8 (cljsjs deps excluded), react 15.6.2 from npm, apollo-client, and react-apollo both from npm. \n\n This is in order of discovery: \n\n 1. NPM module that does not export using ES6\/CommonJS did not generate a namespace. \n\n The first thing that broke was 'whatwg-fetch' polyfill. Because it did not 'export' anything, module_deps did not generate any 'provide'. \n\n But somewhere in apollo-client, there is a 'require', so dependency resolution failed. I forked whatwg-fetch and added these lines just to fool module_deps: \n\n            const whatwg_fetch = 1; export { whatwg_fetch }; \n\n \n\n 2. Closure compiler assumes a file is either CommonJS or ES6. If a file has both types of import\/export, it will ignore the other. \n\n react-apollo contains source with both 'require' and 'import' in the same file. Closure ignored one, did not rewrite module names into \n\n the 'provide' string (\"full$path$to$module\"), leading to undefined vars. I forked the library and manually converted the imports to ES6. 3. Closure compiler does not support circular dependency. https:\/\/github.com\/google\/closure-compiler\/issues\/1883 \n\n apollo-client contains some circular deps. Forked the library and manually merged the files... New version of apollo-client \n\n was released with more circular deps, I will not be upgrading for a while. At this point, I got myself a working although fragile dev environment. I could (:require [apollo-client]) like a cljs library, and interop was seamless. \n Then it was time for advanced optimization.... \n\n 4. Libraries not written with closure compiler in mind.. \n\n Well.. mangled names everywhere. These libraries have some dynamic codes. Not much to say here, just use the extern shotgun until \n\n no more errors. I'm not even sure if something like tsickle (typescript to closure) can even help here. \n\n\n 5. Passing complex objects back and forth between js and cljs \n\n The choice here is either being really careful when using js->clj, clj->js, and :keywordize-keys or extern shotgun. I did some experiments \n\n to understand how to do this safely, but got frustrated and used the extern shotgun. \n\n\n After all that, I have a working app at about 700k uncompressed compared to 3MB+ simple optimization. I don't see an easy way to run arbitrary node module into closure's advanced optimization yet.. Maybe a pre-processor can do the above tasks \n automatically? \n\n \n\n\n On Friday, September 29, 2017 at 1:00:01 AM UTC+7, Thomas Heller wrote: \n > \n > *\u201cSeamless interaction with NPM\u201d not so seamless* \n > \n > This has been exactly my experience as well which is why I wrote an > entirely new implementation for JS dependencies. \n > \n > The detailed article can be found here \n > \n > https:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/09\/15\/js-dependencies-going-forward.html \n > \n > In short the implementation is much less aggressive and sacrifices some > potential byte savings for greater compatibility with the JS ecosystem. \n > \n > I added js-nacl to my demo here: \n > \n > https:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/bb29828917080b143030ff557590c7c94b806ed7\/browser\/src\/demo\/app.cljs#L25-L29 \n > \n > The relevant bits from the config are \n > \n > https:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/bb29828917080b143030ff557590c7c94b806ed7\/browser\/shadow-cljs.edn#L26-L28 \n > \n > which basically just tell the compiler to use the window.crypto property > when require(\"crypto\") is used. \n > \n > I don't know if everything works since I know nothing about js-nacl. The > Basic example from their README seems to work. \n > \n > This is still in pre-release mode but I could some more testers with > \"troublesome\" JS dependencies. \n > \n > \n > \n > On Saturday, September 23, 2017 at 8:26:43 PM UTC+2, Ant\u00f3nio Monteiro > wrote: \n >> \n >> You also need to pass the `:install-deps true` compiler option from >> 1.9.854 onwards. \n >> \n >> Some libraries are not consumable by Google Closure if they use >> constructs like dynamic exporting and such. \n >> \n >> In any case, it looks like your problem is even another one: you're >> trying to use a Node.js library in the browser. Obviously, `fs`, `path` and >> `crypto` (which are Node.js builtins) are not going to be available in any >> browser. \n >> \n >> On Friday, September 22, 2017 at 3:50:45 PM UTC-7, dianne hawkins >> wrote: \n >>> \n >>> Hello, >>> \n >>> I want to write a simple proof-of-concept (which may eventually evolve >>> into something more serious) GUI wallet for a cryptocurrency that I\u2019ve been >>> writing. As desktop libraries\/languages are either not very functional or >>> not very portable, ClojureScript plus local storage in browser as a >>> database looks like a good choice. To make it work, I need support for >>> Ed25519 (a public-key signature system). >>> \n >>> Fortunately, there are implementations of Ed25519 compiled to >>> JavaScript. js-nacl is a \u201cpure-Javascript High-level API to >>> Emscripten-compiled libsodium routines\u201d, available also as a NPM package, >>> and post at >>> https:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules \n >>> >>> advertises \u201cSeamless interaction with NPM dependencies\u201d. I tried to use it, >>> roughly in the following way: >>> \n >>> \u2488 lein new reagent-frontend ercoin-wallet >>> \u2489 Added :npm-deps {:js-nacl \"1.2.2\"} to :cljsbuild \u21e8 :builds \u21e8 app \u21e8 >>> :compiler in project.clj. >>> \u248a Added [js-nacl :as nacl] to :require in core.cljs >>> \n >>> However :npm-deps seemed to be ignored. Fixed this by downgrading >>> ClojureScript from 1.9.908 to 1.9.671 (BTW, these versions are not tagged >>> in the Git repository), but then there are warnings: >>> \n >>> WARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module [\u2026] at [\u2026] >>> \n >>> , where modules are \u201cfs\u201d, \u201cpath\u201d and \u201ccrypto\u201d. >>> \n >>> spinningtopsofdo on IRC said that \u201cFrom a quick skim for js-nacl it >>> looks like it's using emscripten and doing some unique module loading that >>> Google Closure isn't aware of ( \n >>> https:\/\/github.com\/tonyg\/js-nacl\/blob\/master\/lib\/nacl_factory.js#L30-L39).\u201d >>> and \u201cI think it's more the way js-nacl is using ASM \/ Emscripten and >>> creating JavaScript Modules. :npm-deps covers the common JavaScript module >>> patterns (e.g. CommonJs, Node, UMD) but there is still many edge cases out >>> there\u201d. >>> \n >>> I\u2019ve tried also tweetnacl-js, but similarly there is a warning: >>> \n >>> \u201cWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module \"crypto\" at >>> [\u2026]\u201d. >>> \n >>> What is the status of NPM interoperability then? Is it supposed to work >>> as plug & play or does it require hacky knowledge in some cases? >>> \n >> \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"\u201cSeamless interaction with NPM\u201d not so seamless dianne hawkins \n Hello, \n\n I want to write a simple proof-of-concept (which may eventually evolve into something more serious) GUI wallet for a cryptocurrency that I\u2019ve been writing. As desktop libraries\/languages are either not very functional or not very portable, ClojureScript plus local storage in browser as a database looks like a good choice. To make it work, I need support for Ed25519 (a public-key signature system). Fortunately, there are implementations of Ed25519 compiled to JavaScript. js-nacl is a \u201cpure-Javascript High-level API to Emscripten-compiled libsodium routines\u201d, available also as a NPM package, and post at https:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules \n  advertises \u201cSeamless interaction with NPM dependencies\u201d. I tried to use it, roughly in the following way: \n\n \u2488 lein new reagent-frontend ercoin-wallet \n \u2489 Added :npm-deps {:js-nacl \"1.2.2\"} to :cljsbuild \u21e8 :builds \u21e8 app \u21e8 :compiler in project.clj. \n \u248a Added [js-nacl :as nacl] to :require in core.cljs \n\n However :npm-deps seemed to be ignored. Fixed this by downgrading ClojureScript from 1.9.908 to 1.9.671 (BTW, these versions are not tagged in the Git repository), but then there are warnings: \n\n WARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module [\u2026] at [\u2026] \n\n , where modules are \u201cfs\u201d, \u201cpath\u201d and \u201ccrypto\u201d. \n\n spinningtopsofdo on IRC said that \u201cFrom a quick skim for js-nacl it looks like it's using emscripten and doing some unique module loading that Google Closure isn't aware of (https:\/\/github.com\/tonyg\/js-nacl\/blob\/master\/lib\/nacl_factory.js#L30-L39).\u201d and \u201cI think it's more the way js-nacl is using ASM \/ Emscripten and creating JavaScript Modules. :npm-deps covers the common JavaScript module patterns (e.g. CommonJs, Node, UMD) but there is still many edge cases out there\u201d. \n\n I\u2019ve tried also tweetnacl-js, but similarly there is a warning: \n\n \u201cWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module \"crypto\" at [\u2026]\u201d. \n\n What is the status of NPM interoperability then? Is it supposed to work as plug & play or does it require hacky knowledge in some cases? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"*\u201cSeamless interaction with NPM\u201d not so seamless* \n\n This has been exactly my experience as well which is why I wrote an entirely new implementation for JS dependencies. The detailed article can be found here \n https:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/09\/15\/js-dependencies-going-forward.html \n\n In short the implementation is much less aggressive and sacrifices some potential byte savings for greater compatibility with the JS ecosystem. \n\n I added js-nacl to my demo here: \n https:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/bb29828917080b143030ff557590c7c94b806ed7\/browser\/src\/demo\/app.cljs#L25-L29 \n\n The relevant bits from the config are \n https:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/bb29828917080b143030ff557590c7c94b806ed7\/browser\/shadow-cljs.edn#L26-L28 \n\n which basically just tell the compiler to use the window.crypto property when require(\"crypto\") is used. \n\n I don't know if everything works since I know nothing about js-nacl. The Basic example from their README seems to work. \n\n This is still in pre-release mode but I could some more testers with \"troublesome\" JS dependencies. \n\n\n\n On Saturday, September 23, 2017 at 8:26:43 PM UTC+2, Ant\u00f3nio Monteiro wrote: \n > \n > You also need to pass the `:install-deps true` compiler option from > 1.9.854 onwards. \n > \n > Some libraries are not consumable by Google Closure if they use constructs > like dynamic exporting and such. \n > \n > In any case, it looks like your problem is even another one: you're trying > to use a Node.js library in the browser. Obviously, `fs`, `path` and > `crypto` (which are Node.js builtins) are not going to be available in any > browser. \n > \n > On Friday, September 22, 2017 at 3:50:45 PM UTC-7, dianne hawkins > wrote: \n >> \n >> Hello, >> \n >> I want to write a simple proof-of-concept (which may eventually evolve >> into something more serious) GUI wallet for a cryptocurrency that I\u2019ve been >> writing. As desktop libraries\/languages are either not very functional or >> not very portable, ClojureScript plus local storage in browser as a >> database looks like a good choice. To make it work, I need support for >> Ed25519 (a public-key signature system). >> \n >> Fortunately, there are implementations of Ed25519 compiled to JavaScript. >> js-nacl is a \u201cpure-Javascript High-level API to Emscripten-compiled >> libsodium routines\u201d, available also as a NPM package, and post at >> https:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules \n >> >> advertises \u201cSeamless interaction with NPM dependencies\u201d. I tried to use it, >> roughly in the following way: >> \n >> \u2488 lein new reagent-frontend ercoin-wallet >> \u2489 Added :npm-deps {:js-nacl \"1.2.2\"} to :cljsbuild \u21e8 :builds \u21e8 app \u21e8 >> :compiler in project.clj. >> \u248a Added [js-nacl :as nacl] to :require in core.cljs >> \n >> However :npm-deps seemed to be ignored. Fixed this by downgrading >> ClojureScript from 1.9.908 to 1.9.671 (BTW, these versions are not tagged >> in the Git repository), but then there are warnings: >> \n >> WARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module [\u2026] at [\u2026] >> \n >> , where modules are \u201cfs\u201d, \u201cpath\u201d and \u201ccrypto\u201d. >> \n >> spinningtopsofdo on IRC said that \u201cFrom a quick skim for js-nacl it looks >> like it's using emscripten and doing some unique module loading that Google >> Closure isn't aware of ( \n >> https:\/\/github.com\/tonyg\/js-nacl\/blob\/master\/lib\/nacl_factory.js#L30-L39).\u201d >> and \u201cI think it's more the way js-nacl is using ASM \/ Emscripten and >> creating JavaScript Modules. :npm-deps covers the common JavaScript module >> patterns (e.g. CommonJs, Node, UMD) but there is still many edge cases out >> there\u201d. >> \n >> I\u2019ve tried also tweetnacl-js, but similarly there is a warning: >> \n >> \u201cWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module \"crypto\" at >> [\u2026]\u201d. >> \n >> What is the status of NPM interoperability then? Is it supposed to work >> as plug & play or does it require hacky knowledge in some cases? >> \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"\u201cSeamless interaction with NPM\u201d not so seamless dianne hawkins \n Hello, \n\n I want to write a simple proof-of-concept (which may eventually evolve into something more serious) GUI wallet for a cryptocurrency that I\u2019ve been writing. As desktop libraries\/languages are either not very functional or not very portable, ClojureScript plus local storage in browser as a database looks like a good choice. To make it work, I need support for Ed25519 (a public-key signature system). Fortunately, there are implementations of Ed25519 compiled to JavaScript. js-nacl is a \u201cpure-Javascript High-level API to Emscripten-compiled libsodium routines\u201d, available also as a NPM package, and post at https:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules \n  advertises \u201cSeamless interaction with NPM dependencies\u201d. I tried to use it, roughly in the following way: \n\n \u2488 lein new reagent-frontend ercoin-wallet \n \u2489 Added :npm-deps {:js-nacl \"1.2.2\"} to :cljsbuild \u21e8 :builds \u21e8 app \u21e8 :compiler in project.clj. \n \u248a Added [js-nacl :as nacl] to :require in core.cljs \n\n However :npm-deps seemed to be ignored. Fixed this by downgrading ClojureScript from 1.9.908 to 1.9.671 (BTW, these versions are not tagged in the Git repository), but then there are warnings: \n\n WARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module [\u2026] at [\u2026] \n\n , where modules are \u201cfs\u201d, \u201cpath\u201d and \u201ccrypto\u201d. \n\n spinningtopsofdo on IRC said that \u201cFrom a quick skim for js-nacl it looks like it's using emscripten and doing some unique module loading that Google Closure isn't aware of (https:\/\/github.com\/tonyg\/js-nacl\/blob\/master\/lib\/nacl_factory.js#L30-L39).\u201d and \u201cI think it's more the way js-nacl is using ASM \/ Emscripten and creating JavaScript Modules. :npm-deps covers the common JavaScript module patterns (e.g. CommonJs, Node, UMD) but there is still many edge cases out there\u201d. \n\n I\u2019ve tried also tweetnacl-js, but similarly there is a warning: \n\n \u201cWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module \"crypto\" at [\u2026]\u201d. \n\n What is the status of NPM interoperability then? Is it supposed to work as plug & play or does it require hacky knowledge in some cases? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"You also need to pass the `:install-deps true` compiler option from 1.9.854 onwards. Some libraries are not consumable by Google Closure if they use constructs like dynamic exporting and such. \n\n In any case, it looks like your problem is even another one: you're trying to use a Node.js library in the browser. Obviously, `fs`, `path` and `crypto` (which are Node.js builtins) are not going to be available in any browser. \n\n On Friday, September 22, 2017 at 3:50:45 PM UTC-7, dianne hawkins wrote: \n > \n > Hello, > \n > I want to write a simple proof-of-concept (which may eventually evolve > into something more serious) GUI wallet for a cryptocurrency that I\u2019ve been > writing. As desktop libraries\/languages are either not very functional or > not very portable, ClojureScript plus local storage in browser as a > database looks like a good choice. To make it work, I need support for > Ed25519 (a public-key signature system). > \n > Fortunately, there are implementations of Ed25519 compiled to JavaScript. > js-nacl is a \u201cpure-Javascript High-level API to Emscripten-compiled > libsodium routines\u201d, available also as a NPM package, and post at > https:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules \n > > advertises \u201cSeamless interaction with NPM dependencies\u201d. I tried to use it, > roughly in the following way: > \n > \u2488 lein new reagent-frontend ercoin-wallet > \u2489 Added :npm-deps {:js-nacl \"1.2.2\"} to :cljsbuild \u21e8 :builds \u21e8 app \u21e8 > :compiler in project.clj. > \u248a Added [js-nacl :as nacl] to :require in core.cljs > \n > However :npm-deps seemed to be ignored. Fixed this by downgrading > ClojureScript from 1.9.908 to 1.9.671 (BTW, these versions are not tagged > in the Git repository), but then there are warnings: > \n > WARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module [\u2026] at [\u2026] > \n > , where modules are \u201cfs\u201d, \u201cpath\u201d and \u201ccrypto\u201d. > \n > spinningtopsofdo on IRC said that \u201cFrom a quick skim for js-nacl it looks > like it's using emscripten and doing some unique module loading that Google > Closure isn't aware of ( \n > https:\/\/github.com\/tonyg\/js-nacl\/blob\/master\/lib\/nacl_factory.js#L30-L39).\u201d > and \u201cI think it's more the way js-nacl is using ASM \/ Emscripten and > creating JavaScript Modules. :npm-deps covers the common JavaScript module > patterns (e.g. CommonJs, Node, UMD) but there is still many edge cases out > there\u201d. > \n > I\u2019ve tried also tweetnacl-js, but similarly there is a warning: > \n > \u201cWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module \"crypto\" at > [\u2026]\u201d. > \n > What is the status of NPM interoperability then? Is it supposed to work as > plug & play or does it require hacky knowledge in some cases? > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"The problem with native browser controls cheyenne lewis \n Has anyone ever wondered whether the native browser supplied textarea elements are more trouble than they're worth? I'm thinking from the perspective of a react based application that wants to use something like core.async for event handling. If you are currently typing into a text area, then the key down events are not really handled by your application but by the browser. You cannot simply dispatch each event to a more centrally located and more asynchronous event handling process in your application, because you have to either prevent default or not from within the synchronous event handler itself. And so the decision whether or not to handle a key press event using the full logic of your application must be made within the event handler, and cannot be delegated to an asynchronous and intelligent process. To me this is a major drawback of using browser native controls like textarea and others. I wonder if it is worth the effort to re implement them entirely in clojurescript and\/or react. Has anyone else had thoughts along these lines and do my thoughts make sense? \n\n cheyenne \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"If someone allowed me to process keystrokes asynchronously, then I would make a terrible mess and they would register out-of-order. On the question of native vs imitation widgets, there is an interesting answer in React Draft (https:\/\/draftjs.org\/) - which could be summarized as \"native, but guess what!?\" -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"The problem with native browser controls cheyenne lewis \n Has anyone ever wondered whether the native browser supplied textarea elements are more trouble than they're worth? I'm thinking from the perspective of a react based application that wants to use something like core.async for event handling. If you are currently typing into a text area, then the key down events are not really handled by your application but by the browser. You cannot simply dispatch each event to a more centrally located and more asynchronous event handling process in your application, because you have to either prevent default or not from within the synchronous event handler itself. And so the decision whether or not to handle a key press event using the full logic of your application must be made within the event handler, and cannot be delegated to an asynchronous and intelligent process. To me this is a major drawback of using browser native controls like textarea and others. I wonder if it is worth the effort to re implement them entirely in clojurescript and\/or react. Has anyone else had thoughts along these lines and do my thoughts make sense? \n\n cheyenne \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"It is true that you must update an input element synchronously, but the \n alternative would be incredibly complicated, and I doubt it could reach \n feature parity. You'd have to handle every keypress, of course. Then \n you'd have to keep track of the cursor, which could change on touch events \n and mouse clicks. If you have a multiline input, the up\/down arrow would \n have to be handled manually, which would be challenging with a variable \n width font. Then you'd want to interface with the clipboard api if you \n want pasting to work. You'll lose a lot of nice built-in features, like \n spell check. I'm not sure whether it is possible to use adaptive keyboard \n technology or text-to-speech on mobile without using native input \n elements. Accessibility would be out the window. All of this kind of depends on what your goals are. If it is rich text, I \n think the technology of choice is to use contenteditable divs, though I've \n never done that myself (it's what gmail uses, for what it is worth). But \n as far as I know you'll have to update the divs synchronously there too. \n\n On Sat, Nov 10, 2018 at 12:30 PM cheyenne lewis <lahea...@gmail.com> wrote: \n\n > Has anyone ever wondered whether the native browser supplied textarea \n > elements are more trouble than they're worth? I'm thinking from the \n > perspective of a react based application that wants to use something like \n > core.async for event handling. If you are currently typing into a text \n > area, then the key down events are not really handled by your application \n > but by the browser. You cannot simply dispatch each event to a more \n > centrally located and more asynchronous event handling process in your \n > application, because you have to either prevent default or not from within \n > the synchronous event handler itself. And so the decision whether or not to \n > handle a key press event using the full logic of your application must be \n > made within the event handler, and cannot be delegated to an asynchronous \n > and intelligent process. To me this is a major drawback of using browser \n > native controls like textarea and others. I wonder if it is worth the \n > effort to re implement them entirely in clojurescript and\/or react. \n > \n > Has anyone else had thoughts along these lines and do my thoughts make \n > sense? \n > \n > cheyenne \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Bridging core.async \/ callbacks gabriella bongard \n In the early core.async presentation, Rich argues that we should avoid putting application logic in callback handlers, and instead build the \"machine like\" parts of our code in the core.async model. To bridge from callback world to core.async we have put! and take! which we should call as soon as possible. But what do we do if the library we are interfacing with relies on some effect having happened *before* the callback returns, but our application architecture dictates that effect should come from some other process? (go) (put!) and (take!) all return immediately. \n\n According to my (hopefully incorrect!) understanding, it's not possible. \n\n It seems to me we need something like (<!!), which is not available in cljs due to the lack of real threads. \n\n However, could we not have an implementation of (<!!) that goes something like this?: \n\n (defn <!! [c] (loop \n    (or (poll! c) \n        (if (any-process-ready?) \n          (do (schedule-next-process!) \n            (recur)) \n          (throw \"deadlock!\"))))) \n\n This is making some uninformed assumptions about the scheduler, but presumably there must be: \n\n   - Some kind of list of ready (not blocked on channel operations) processes \n   - The ability to run a ready process until the next scheduling point (or until it runs out of processes). \n\n However I believe the scheduler is to be considered private\/opaque, so a proper \"userland\" implementation would not be possible. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"\"Write a function that does not return until some channel event occurs.\" \n Is this \u0430 pure function or it has side effects (network call, etc) ? If it's a pure function you can look into core.async transducers. You can achieve the effect of not returning immediately by putting your logic inside of a (go ...) block. Inside (go ...) <! and >! give the illusion of threads by \"parking\" and not returning immediately (of course no real threads involved). I still believe that with the approach that I outlined before you can achieve a good effect but maybe I'm misunderstanding. Maybe some more actual code with examples can clarify. \n\n\n On Saturday, May 4, 2019 at 1:24:51 AM UTC-7, gabriella bongard wrote: \n > \n > I don't think this addresses the issue. \n > \n > I'll try to state the problem more simply: \n > \n > Write a function that does not return until some channel event occurs. \n > \n > (The difficulty being that go, put! and take! all return immediately) \n > \n > I would argue the ability to do so is: \n > \n > - fundamentally important for interfacing with JS libraries \n > - not possible with the existing core.async API \n > - not difficult to implement, but needs to coordinate with the > scheduler \n > \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Bridging core.async \/ callbacks gabriella bongard \n In the early core.async presentation, Rich argues that we should avoid putting application logic in callback handlers, and instead build the \"machine like\" parts of our code in the core.async model. To bridge from callback world to core.async we have put! and take! which we should call as soon as possible. But what do we do if the library we are interfacing with relies on some effect having happened *before* the callback returns, but our application architecture dictates that effect should come from some other process? (go) (put!) and (take!) all return immediately. \n\n According to my (hopefully incorrect!) understanding, it's not possible. \n\n It seems to me we need something like (<!!), which is not available in cljs due to the lack of real threads. \n\n However, could we not have an implementation of (<!!) that goes something like this?: \n\n (defn <!! [c] (loop \n    (or (poll! c) \n        (if (any-process-ready?) \n          (do (schedule-next-process!) \n            (recur)) \n          (throw \"deadlock!\"))))) \n\n This is making some uninformed assumptions about the scheduler, but presumably there must be: \n\n   - Some kind of list of ready (not blocked on channel operations) processes \n   - The ability to run a ready process until the next scheduling point (or until it runs out of processes). \n\n However I believe the scheduler is to be considered private\/opaque, so a proper \"userland\" implementation would not be possible. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Here's one idea, basically put \"channel on a channel\" idea: \n \n (defonce main-c (chan 1)) \n\n\n (defn start-main-channel-loop [] \n   ;put channels on the channel in the order that they need to execute \n   (go \n     (loop [] \n       (let [c (<! main-c) ;wait for channel from the main channel \n             x (<! c)] ;wait for 'x' from channel 'c' \n         ;do stuff with x, it can dispatch based on the data that is 'x' \n         (println \"x ::: \" x) \n         (recur))))) \n\n (comment \n   (let [i-run-before-callback-c (chan 1) callback-c (chan 1)] \n        ;\"schedule\" things to run in desired order \n        (put! main-c i-run-before-callback-c) \n        (put! main-c callback-c) \n\n        ;run in go to ensure order of events \n        (go \n          ;>! this first \n          (>! callback-c [:second {}]) \n          ;wait 3 seconds for demo purposes \n          (<! (timeout 3000)) \n          ;>! this second \n          (>! i-run-before-callback-c [:first {}])))) \n\n\n After about 3 seconds you should see this printed: \n\n *x ::: [:first {}]* \n *x ::: [:second {}]* \n\n ... i.e. even though we scheduled *[:second {}]* before *[:first {}]*, they appear in the desired order at the end. \n\n\n\n On Friday, May 3, 2019 at 1:47:10 AM UTC-7, gabriella bongard wrote: \n > \n > In the early core.async presentation, Rich argues that we should avoid > putting application logic in callback handlers, and instead build the > \"machine like\" parts of our code in the core.async model. To bridge from > callback world to core.async we have put! and take! which we should call as > soon as possible. \n > \n > But what do we do if the library we are interfacing with relies on some > effect having happened *before* the callback returns, but our application > architecture dictates that effect should come from some other process? (go) > (put!) and (take!) all return immediately. \n > \n > According to my (hopefully incorrect!) understanding, it's not possible. \n > \n > It seems to me we need something like (<!!), which is not available in > cljs due to the lack of real threads. \n > \n > However, could we not have an implementation of (<!!) that goes something > like this?: \n > \n > (defn <!! [c] > (loop \n > (or (poll! c) \n > (if (any-process-ready?) \n > (do > (schedule-next-process!) \n > (recur)) \n > (throw \"deadlock!\"))))) \n > \n > This is making some uninformed assumptions about the scheduler, but > presumably there must be: \n > \n > - Some kind of list of ready (not blocked on channel operations) > processes \n > - The ability to run a ready process until the next scheduling point (or > until it runs out of processes). \n > \n > However I believe the scheduler is to be considered private\/opaque, so a > proper \"userland\" implementation would not be possible. \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Seeing libraries from eval in Clojurescript nadja mercado \n I have a problem seeing libraries from inside an eval-ed expression in clojurescript. Full details are here : https:\/\/stackoverflow.com\/questions\/46866902\/clojurescript-eval-how-to-use-libraries-included-in-the-calling-code \n\n Basically, I want to include some clojure libraries in a web page, and allow a user to write a small bit of clojurescript \"glued\" code (in the browser) to call and use them. However when I try to eval the user's input, the libraries I've included are not visible. \n\n Is there any way to get it to see them? \n\n I tried setting the :ns of the opt arument to eval, but it doesn't seem to make any difference. \n\n cheers \n\n Phil \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I have answered your question in stackoverflow. \n If you need more details about how I solve this issue inside Klipse, please contact me in private. On Sunday, 22 October 2017 01:47:23 UTC+3, nadja mercado wrote: \n > \n > I have a problem seeing libraries from inside an eval-ed expression in > clojurescript. \n > \n > Full details are here : > https:\/\/stackoverflow.com\/questions\/46866902\/clojurescript-eval-how-to-use-libraries-included-in-the-calling-code \n > \n > Basically, I want to include some clojure libraries in a web page, and > allow a user to write a small bit of clojurescript \"glued\" code (in the > browser) to call and use them. > \n > However when I try to eval the user's input, the libraries I've included > are not visible. \n > \n > Is there any way to get it to see them? \n > \n > I tried setting the :ns of the opt arument to eval, but it doesn't seem to > make any difference. \n > \n > cheers \n > \n > Phil \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Importing react components from clojurescript eliveg taplin \n Recer to the section 'Creating Reagent \"Components\" from React Components' of the following page. https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Meant to paste the URL: https:\/\/github.com\/cloojure\/cljs-template mayan \n\n On Mon, Aug 20, 2018 at 4:32 PM mayan gavin <clooj...@gmail.com> wrote: \n\n > If you clone this template project it provides examples of 3 ways in \n > \"import\" native JS code into a CLJS project (see \"dino.js\" etc). \n > \n > g...@github.com:cloojure\/cljs-template.git \n > \n > \n > \n > \n > On Mon, Aug 20, 2018 at 9:37 AM Dusan Miloradovic < \n > dusan.milorado...@gmail.com> wrote: \n > \n >> I think the easiest way to do it is using the shadow-cljs. Here is the \n >> example: \n >> https:\/\/github.com\/shadow-cljs\/examples\/tree\/master\/cljs-react-app \n >> \n >> \n >> \n >> On Mon, Aug 20, 2018 at 6:43 PM Quentin Le Guennec < \n >> quentin.leguenn...@gmail.com> wrote: \n >> \n >>> It doesn't quite answer everything. I would like a full example of a \n >>> project using a react javascript component. Do you have an idea where I \n >>> could find that? \n >>> On 8\/20\/18 3:09 AM, eliveg taplin wrote: \n >>> \n >>> The react-flip-move library in the example is written in React \n >>> JavaScript code. \n >>> \n >>> https:\/\/github.com\/joshwcomeau\/react-flip-move \n >>> \n >>> https:\/\/unpkg.com\/react-flip-move@3.0.2\/dist\/react-flip-move.js \n >>> \n >>> \n >>> 2018\ub144 8\uc6d4 19\uc77c \uc77c\uc694\uc77c \uc624\ud6c4 10\uc2dc 11\ubd84 30\ucd08 UTC+9, Quentin Le Guennec \ub2d8\uc758 \ub9d0: \n >>>> \n >>>> Hello, thanks for your answer \n >>>> \n >>>> That is not what I am looking for. \n >>>> \n >>>> I am trying to import javascript code into my clojurescript project. \n >>>> Something you would do with either `require` or `import` in javascript. \n >>>> \n >>>> The node module I need would have to be specified in `defproject`, then \n >>>> downloaded when I run `lein deps` \n >>>> \n >>>> Then in clojurescript, I would have access to that module. \n >>>> \n >>>> On 8\/19\/18 1:58 AM, eliveg taplin wrote: \n >>>> > Recer to the section \n >>>> > 'Creating Reagent \"Components\" from React Components' of the \n >>>> following page. \n >>>> > \n >>>> > \n >>>> > \n >>>> https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md \n >>>> > \n >>>> \n >>>> -- \n >>> Note that posts from new members are moderated - please be patient with \n >>> your first post. \n >>> --- \n >>>"},
{"prompt":"Importing react components from clojurescript eliveg taplin \n Recer to the section 'Creating Reagent \"Components\" from React Components' of the following page. https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"If you clone this template project it provides examples of 3 ways in \n \"import\" native JS code into a CLJS project (see \"dino.js\" etc). g...@github.com:cloojure\/cljs-template.git \n\n\n\n\n On Mon, Aug 20, 2018 at 9:37 AM Dusan Miloradovic < \n dusan.milorado...@gmail.com> wrote: \n\n > I think the easiest way to do it is using the shadow-cljs. Here is the \n > example: \n > https:\/\/github.com\/shadow-cljs\/examples\/tree\/master\/cljs-react-app \n > \n > \n > \n > On Mon, Aug 20, 2018 at 6:43 PM Quentin Le Guennec < \n > quentin.leguenn...@gmail.com> wrote: \n > \n >> It doesn't quite answer everything. I would like a full example of a \n >> project using a react javascript component. Do you have an idea where I \n >> could find that? \n >> On 8\/20\/18 3:09 AM, eliveg taplin wrote: \n >> \n >> The react-flip-move library in the example is written in React \n >> JavaScript code. \n >> \n >> https:\/\/github.com\/joshwcomeau\/react-flip-move \n >> \n >> https:\/\/unpkg.com\/react-flip-move@3.0.2\/dist\/react-flip-move.js \n >> \n >> \n >> 2018\ub144 8\uc6d4 19\uc77c \uc77c\uc694\uc77c \uc624\ud6c4 10\uc2dc 11\ubd84 30\ucd08 UTC+9, Quentin Le Guennec \ub2d8\uc758 \ub9d0: \n >>> \n >>> Hello, thanks for your answer \n >>> \n >>> That is not what I am looking for. \n >>> \n >>> I am trying to import javascript code into my clojurescript project. \n >>> Something you would do with either `require` or `import` in javascript. \n >>> \n >>> The node module I need would have to be specified in `defproject`, then \n >>> downloaded when I run `lein deps` \n >>> \n >>> Then in clojurescript, I would have access to that module. \n >>> \n >>> On 8\/19\/18 1:58 AM, eliveg taplin wrote: \n >>> > Recer to the section \n >>> > 'Creating Reagent \"Components\" from React Components' of the following \n >>> page. \n >>> > \n >>> > \n >>> > \n >>> https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md \n >>> > \n >>> \n >>> -- \n >> Note that posts from new members are moderated - please be patient with \n >> your first post. \n >> --- \n >>"},
{"prompt":"TDD + figwheel + desktop notifications attree agass \n Hi All, I know TDD carries a bit of a stigma in the Clojure(script) community but I find it valuable. I thought I'd share my test harness for local development so others could use it\/comment on it. \n\n The main benefit I see to this test harness is; \n\n    1. it's quick as figwheel is. \n    2. it has desktop notifications. \n    3. it uses vanilla cljs.test\/deftest and cljs.test\/run-all-tests rather than another macro. \n\n\n I plan to write up a blog post on it but you can try it by doing the following; \n\n    1. clone https:\/\/github.com\/nfisher\/lein-nashtest. \n    2. lein figwheel. \n    3. browse to http:\/\/0.0.0.0:3449\/test.html. \n    4. accept notifications. \n    5. cause the test to fail in cljs\/jbx\/pants_test.cljs. \n    6. fix the test and see a passing notification. \n\n The failure notification looks as follows; \n\n <https:\/\/lh3.googleusercontent.com\/-Vq1BC6y50cM\/WiUExdX1SZI\/AAAAAAAAGWg\/kTMzig4RYHU2PWStfXZkKAhJCSAeqLv5wCEwYBhgL\/s1600\/Screen%2BShot%2B2017-12-04%2Bat%2B05.12.45.png> \n\n And the browser looks as follows with a failure; \n\n\n <https:\/\/lh3.googleusercontent.com\/-AFiBKq-n--U\/WiUFMRy7NII\/AAAAAAAAGWk\/SHOqxGH2ykoAxYJsHjlbOUbbrtWjAKUAwCLcBGAs\/s1600\/Screen%2BShot%2B2017-12-04%2Bat%2B05.13.07.png> \n\n Looking under the hood you'll see it's a bit hack-ish essentially there's two bits to it; \n\n\n    1. figwheels :js-onload. \n    2. overriding console.log and taking actions on particular values. Using the cljs.test\/report multi-method would probably be a better approach long-term. \n   \n If you wanted to use the test harness in your own project you can simply add a cljsbuild target similar to figtest in my projects build and copy test.html into your $project\/resources\/public folder. \n\n Cheers! \n attree \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"FWIW, I think the criticism around TDD in the Clojure(script) community is not so much that testing first is bad, but that writing tests without first thinking through and understanding your problem is bad. I think some have extended this to a blanket \"TDD bad!\" battlecry, but this I think misses much of the nuance of the critique that Rich Hickey and others have made. More to the point of your post, cool work! \n\n Chris \n\n\n On Monday, December 4, 2017 at 12:35:36 AM UTC-8, attree agass wrote: \n > \n > Hi All, \n > \n > \n > I know TDD carries a bit of a stigma in the Clojure(script) community but > I find it valuable. I thought I'd share my test harness for local > development so others could use it\/comment on it. \n > \n > The main benefit I see to this test harness is; \n > \n > 1. it's quick as figwheel is. \n > 2. it has desktop notifications. \n > 3. it uses vanilla cljs.test\/deftest and cljs.test\/run-all-tests > rather than another macro. \n > \n > \n > I plan to write up a blog post on it but you can try it by doing the > following; \n > \n > 1. clone https:\/\/github.com\/nfisher\/lein-nashtest. \n > 2. lein figwheel. \n > 3. browse to http:\/\/0.0.0.0:3449\/test.html. \n > 4. accept notifications. \n > 5. cause the test to fail in cljs\/jbx\/pants_test.cljs. \n > 6. fix the test and see a passing notification. \n > \n > The failure notification looks as follows; \n > \n > \n > <https:\/\/lh3.googleusercontent.com\/-Vq1BC6y50cM\/WiUExdX1SZI\/AAAAAAAAGWg\/kTMzig4RYHU2PWStfXZkKAhJCSAeqLv5wCEwYBhgL\/s1600\/Screen%2BShot%2B2017-12-04%2Bat%2B05.12.45.png> \n > \n > And the browser looks as follows with a failure; \n > \n > \n > \n > <https:\/\/lh3.googleusercontent.com\/-AFiBKq-n--U\/WiUFMRy7NII\/AAAAAAAAGWk\/SHOqxGH2ykoAxYJsHjlbOUbbrtWjAKUAwCLcBGAs\/s1600\/Screen%2BShot%2B2017-12-04%2Bat%2B05.13.07.png> \n > \n > Looking under the hood you'll see it's a bit hack-ish essentially there's > two bits to it; \n > \n > \n > 1. figwheels :js-onload. \n > 2. overriding console.log and taking actions on particular values. > Using the cljs.test\/report multi-method would probably be a better > approach > long-term. \n > > If you wanted to use the test harness in your own project you can simply > add a cljsbuild target similar to figtest in my projects build and copy > test.html into your $project\/resources\/public folder. \n > \n > Cheers! \n > attree \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"TDD + figwheel + desktop notifications attree agass \n Hi All, I know TDD carries a bit of a stigma in the Clojure(script) community but I find it valuable. I thought I'd share my test harness for local development so others could use it\/comment on it. \n\n The main benefit I see to this test harness is; \n\n    1. it's quick as figwheel is. \n    2. it has desktop notifications. \n    3. it uses vanilla cljs.test\/deftest and cljs.test\/run-all-tests rather than another macro. \n\n\n I plan to write up a blog post on it but you can try it by doing the following; \n\n    1. clone https:\/\/github.com\/nfisher\/lein-nashtest. \n    2. lein figwheel. \n    3. browse to http:\/\/0.0.0.0:3449\/test.html. \n    4. accept notifications. \n    5. cause the test to fail in cljs\/jbx\/pants_test.cljs. \n    6. fix the test and see a passing notification. \n\n The failure notification looks as follows; \n\n <https:\/\/lh3.googleusercontent.com\/-Vq1BC6y50cM\/WiUExdX1SZI\/AAAAAAAAGWg\/kTMzig4RYHU2PWStfXZkKAhJCSAeqLv5wCEwYBhgL\/s1600\/Screen%2BShot%2B2017-12-04%2Bat%2B05.12.45.png> \n\n And the browser looks as follows with a failure; \n\n\n <https:\/\/lh3.googleusercontent.com\/-AFiBKq-n--U\/WiUFMRy7NII\/AAAAAAAAGWk\/SHOqxGH2ykoAxYJsHjlbOUbbrtWjAKUAwCLcBGAs\/s1600\/Screen%2BShot%2B2017-12-04%2Bat%2B05.13.07.png> \n\n Looking under the hood you'll see it's a bit hack-ish essentially there's two bits to it; \n\n\n    1. figwheels :js-onload. \n    2. overriding console.log and taking actions on particular values. Using the cljs.test\/report multi-method would probably be a better approach long-term. \n   \n If you wanted to use the test harness in your own project you can simply add a cljsbuild target similar to figtest in my projects build and copy test.html into your $project\/resources\/public folder. \n\n Cheers! \n attree \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"That is a neat trick! (But if I did TDD on a web server, the very first test would be \"it's not listening to 0.0.0.0\", which, evidently, browsing to 0.0.0.0 is not a test of.) ;-) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Creating a map entry lilibeth khanna \n Is it possible to create a map entry directly with the MapEntry type? I see in the source code of CLJS that the type expects 3 parameters, key val and hash. I've glanced quickly at usages and it seems most usages revolves to (MapEntry. k v nil). Is it ok to use in app? Is it too low-level? I'd like to use it in situations where I populate a map from vectors, like (silly example) (into {} (map-indexed (fn [idx v] (MapEntry. idx val nil) [1 2 3])) \n\n And what does it mean in cljc code ? Is this ok in Clojure too? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Thursday, October 18, 2018 at 4:07:32 AM UTC-5, lilibeth khanna wrote: \n > \n > \n > PS: I couldn't get clojure cli to download criterium to run the benchmark, > so I ended up using the REPL provided by in my current app setup (based on > Clojure 1.9.0, Boot 2.8.2 and criterium 0.4.4, the latest stable versions). > Here's the command I ran and the error: \n > \n > ``` \n > > clj -Sdeps \"{:deps {org.clojure\/clojure {:mvn\/version \\\"1.9.0\\\"} > criterum {:mvn\/version \\\"0.4.4\\\"}}}\" \n > Error building classpath. Could not find artifact > criterum:criterum:jar:0.4.4 in central (https:\/\/repo1.maven.org\/maven2\/) \n > You misspelled \"criterium\" in your deps. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"shadow-cljs and lein ring uberjar halleh cohen \n When I run \"lein ring uberjar\", after it builds the jar file it triggers the shadow-cljs :app build and rebuilds all client code. I was wanting it to just build the jar file, since the client build is triggered using lein prod. \n\n Is this default behavior or have I screwed something up? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hard to say what you are doing without seeing the config. Your config is doing this, neither lein or shadow-cljs will do this on their own. I typically recommend keeping things separate since that make things much easier to understand and debug. \n\n shadow-cljs release app && lein ring uberjar \n\n lein or ring don't need to do anything with CLJS other than taking the files shadow-cljs produced and putting them into the .jar they create. That typically happens automatically if you output to some folder on your classpath (eg. resources\/public\/js). \n\n\n On Monday, June 22, 2020 at 9:01:35 PM UTC+2, halleh cohen wrote: \n > \n > When I run \"lein ring uberjar\", after it builds the jar file it triggers > the shadow-cljs :app build and rebuilds all client code. \n > \n > I was wanting it to just build the jar file, since the client build is > triggered using lein prod. \n > \n > Is this default behavior or have I screwed something up? \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"shadow-cljs and lein ring uberjar halleh cohen \n When I run \"lein ring uberjar\", after it builds the jar file it triggers the shadow-cljs :app build and rebuilds all client code. I was wanting it to just build the jar file, since the client build is triggered using lein prod. \n\n Is this default behavior or have I screwed something up? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hey, \n\n if you are falling back to manually calling react\/createElement then you must ensure that you are passing it data it understands. In your example you are passing a CLJS map which React just identifies as a object but not as a props object so it thinks you meant a component and warns you. (defn fixed-size-list [] \n   (react\/createElement \n     FixedSizeList \n     #js {:height 400 :width 300 :itemSize 46 :itemCount 200} \n     render)) \n\n That should do it, or just use the reagent built-ins for native interop via [:> FixedSizeList {:height ...} render] \n\n Cheers, \n \/thomas \n\n On Monday, May 4, 2020 at 8:33:16 PM UTC+2, halleh cohen wrote: \n > \n > I'm super happy and impressed with shadow-cljs, it has radically improved > my workflow and deployments, and exposed the npm universe without > ballooning my js files...so, thanks very much to mckinsey phrachanh \n > \n > I'm having an issue with react-window interop. \n > \n > I'm successfully importing and using several 3rd party npm modules. It's > just this one that is not working. \n > \n > I keep getting the error: Invariant Violation: \"Element type is invalid: > expected a string (for built-in components) or a class\/function (for > composite components) but got: object. Check the render method of `List`.\" \n > \n > I'm using re-frame and shadow-cljs, and the following code to initialize: \n > \n > ... \n > (:require \n > [reagent.core :as reagent] \n > [\"react-window\" :refer [FixedSizeList]] \n > ... \n > \n > (defn render [props] \n > (reagent\/as-element [:div \"hey\"])) \n > \n > (defn fixed-size-list [] \n > (react\/create-element \n > FixedSizeList \n > {:height 400 :width 300 :itemSize 46 :itemCount 200} \n > render)) \n > \n > but always get the error above. FixedSizeList is refered and available > similar to other components. As the error says, the problem is in the > render of list. \n > \n > I've tried render returning plain hiccup, reagent elements, react > elements, and react classnames as strings, and for some reason the render > fn in clojurescript is not valid as in the javascript examples. \n > \n > This same general approach is working elsewhere for 3rd part components, > but this is the first time I'm passing a function in as the body of the > component, rather than as a value on the property map. \n > \n > Any insights are greatly appreciated. \n > \n > halleh \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Looking for Reagent-based framework\/library suggestions lachlan melissas \n My last non-trivial app used Reagent, but I did the rest of the wiring manually. Now that there are many alternatives out there, I'd like to hear your suggestions and comparisons, as I'm about to select one for a non-trivial team (not personal) project. Re-frame is the obvious choice, but I've seen several alternatives. What experiences have you had? What factors might help me choose one over another? \n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I lead a team building a React Native app with Reagent + re-frame that's nearing 10K lines across 124 source files. re-frame took a while to really click, but, boy, it's amazing. To make matters better, folks like Daniel and the community have provided excellent support. If I had to do it again, I'd still be using re-frame. On Mon, Jan 29, 2018 at 05:53:33PM +0000, lachlan melissas wrote: \n > My last non-trivial app used Reagent, but I did the rest of the wiring > manually. Now that there are many alternatives out there, I'd like to hear > your mle and comparisons, as I'm about to select one for a > non-trivial team (not personal) project. \n > > Re-frame is the obvious choice, but I've seen several alternatives. What > experiences have you had? What factors might help me choose one over > another? \n > > > -- > Note that posts from new members are moderated - please be patient with your > first post. \n > --- >"},
{"prompt":"Looking for Reagent-based framework\/library suggestions lachlan melissas \n My last non-trivial app used Reagent, but I did the rest of the wiring manually. Now that there are many alternatives out there, I'd like to hear your suggestions and comparisons, as I'm about to select one for a non-trivial team (not personal) project. Re-frame is the obvious choice, but I've seen several alternatives. What experiences have you had? What factors might help me choose one over another? \n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi Daniel, \n\n thanks for the response! I'm going to spend some time today reading through the docs you sent, and \n working up an example app. In the meantime, here are answers to your \n questions. \n\n There are 3 of us on the team. We have a senior with a few years of \n experience with ClojureScript (myself), and 2 intermediate developers with \n backgrounds in web development and functional languages but new to \n ClojureScript. They both have worked with ReactJS, however. Both are very \n excited to learn Clojure and ClojureScript. \n\n This app will not be huge, since it's a pilot project in a sense. We want \n to deliver a standalone project a low risk. It will be complex in the sense \n that it will render a landing page to the customer, but a WYSIWYG UI to an \n administrator for customizing the content. Not a lot of form processing. \n\n  We want it to be a model for ClojureScript projects going forward, if \n possible, even if development slows after requirements are met. Testing and \n debugging are paramount, and we want it to be approachable by \n non-ClojureScript developers in the future, if necessary. \n\n\n On Mon, Jan 29, 2018 at 4:12 PM Daniel Compton < \n daniel.compton.li...@gmail.com> wrote: \n\n > Hi lachlan \n > \n > I'll put my cards on the table up-front, I work at Day8 and do a lot of \n > work developing re-frame apps and working on re-frame + Day8's re-frame \n > libraries. \n > \n > I think re-frame is a great UI framework, and we have had success building \n > and maintaining large (50,000 LOC) applications with complex UI's over the \n > last three years. I'm not sure if you've seen it, but \n > https:\/\/github.com\/Day8\/re-frame\/blob\/master\/docs\/FAQs\/DoINeedReFrame.md is \n > a pretty good description of what re-frame gives you\/why you'd want to use \n > it. \n > \n > To help answer your question further, it would be good to know more about \n > the team and project. How many people will be working on it? What are their \n > backgrounds with front-end web development, and ClojureScript? How big is \n > the application going to be? Is it mostly about building forms and \n > shuttling remote state to and from the client, or do you need more \n > complicated UIs? Is this a project that will be built in a few weeks\/months \n > and then parked for a while, or is it going to undergo continuous \n > development? What are the values that are more or less important to you \n > (documentation, performance, testing, debugging, scalability, community, \n > library ecosystem, long-term support, maintainability, novelty e.t.c.)? \n > \n > re-frame has been around for almost 3.5 years and has a pretty healthy \n > community. Using the Lindy effect \n > <https:\/\/en.wikipedia.org\/wiki\/Lindy_effect> (things that have been in \n > existence for a long period of time can be considered more \n > robust\/antifragile, i.e., more likely to continue to survive, than new \n > things that haven't passed the test of time), then we can expect it to be \n > around for another 3.5 years. \n > \n > At Day8 we have a lot invested in re-frame, so it's not going anywhere for \n > us, and because we've written so much code in it, we are very unlikely to \n > make any kind of radical changes that require rewriting your code. \n > \n > Hope that helps, \n > Daniel. \n > \n > On Tue, Jan 30, 2018 at 6:53 AM lachlan melissas <jmckitr...@gmail.com> \n > wrote: \n > \n >> My last non-trivial app used Reagent, but I did the rest of the wiring \n >> manually. Now that there are many alternatives out there, I'd like to hear \n >> your kira and comparisons, as I'm about to select one for a \n >> non-trivial team (not personal) project. \n >> \n >> Re-frame is the obvious choice, but I've seen several alternatives. What \n >> experiences have you had? What factors might help me choose one over \n >> another? \n >> \n >> \n >> -- \n >> Note that posts from new members are moderated - please be patient with \n >> your first post. \n >> --- \n >> \n >"},
{"prompt":"Looking for Reagent-based framework\/library suggestions lachlan melissas \n My last non-trivial app used Reagent, but I did the rest of the wiring manually. Now that there are many alternatives out there, I'd like to hear your suggestions and comparisons, as I'm about to select one for a non-trivial team (not personal) project. Re-frame is the obvious choice, but I've seen several alternatives. What experiences have you had? What factors might help me choose one over another? \n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi lachlan \n\n I'll put my cards on the table up-front, I work at Day8 and do a lot of \n work developing re-frame apps and working on re-frame + Day8's re-frame \n libraries. I think re-frame is a great UI framework, and we have had success building \n and maintaining large (50,000 LOC) applications with complex UI's over the \n last three years. I'm not sure if you've seen it, but \n https:\/\/github.com\/Day8\/re-frame\/blob\/master\/docs\/FAQs\/DoINeedReFrame.md is \n a pretty good description of what re-frame gives you\/why you'd want to use \n it. \n\n To help answer your question further, it would be good to know more about \n the team and project. How many people will be working on it? What are their \n backgrounds with front-end web development, and ClojureScript? How big is \n the application going to be? Is it mostly about building forms and \n shuttling remote state to and from the client, or do you need more \n complicated UIs? Is this a project that will be built in a few weeks\/months \n and then parked for a while, or is it going to undergo continuous \n development? What are the values that are more or less important to you \n (documentation, performance, testing, debugging, scalability, community, \n library ecosystem, long-term support, maintainability, novelty e.t.c.)? \n\n re-frame has been around for almost 3.5 years and has a pretty healthy \n community. Using the Lindy effect \n <https:\/\/en.wikipedia.org\/wiki\/Lindy_effect> (things that have been in \n existence for a long period of time can be considered more \n robust\/antifragile, i.e., more likely to continue to survive, than new \n things that haven't passed the test of time), then we can expect it to be \n around for another 3.5 years. \n\n At Day8 we have a lot invested in re-frame, so it's not going anywhere for \n us, and because we've written so much code in it, we are very unlikely to \n make any kind of radical changes that require rewriting your code. \n\n Hope that helps, \n celine \n\n On Tue, Jan 30, 2018 at 6:53 AM lachlan melissas <jmckitr...@gmail.com> \n wrote: \n\n > My last non-trivial app used Reagent, but I did the rest of the wiring \n > manually. Now that there are many alternatives out there, I'd like to hear \n > your suggestions and comparisons, as I'm about to select one for a \n > non-trivial team (not personal) project. \n > \n > Re-frame is the obvious choice, but I've seen several alternatives. What \n > experiences have you had? What factors might help me choose one over \n > another? \n > \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Respo's home page is up: respo.site welch radiant \n http:\/\/respo.site \n\n Respo is a front-end MVC library in ClojureScript. It's like Reagent but built totally in ClojureScript, so it's purer and more friendly to hot code swapping. The shortcomings is it has quite less features comparing to React.js , for example side effects. This is the first version of the docs, small update will still come. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Oh, no. Even if that's possible, it's not allowed to do in Respo since it's \n already optimized with some mechanism like `shouldComponentUpdate` to \n reduce renderings. It's an anti-pattern. On Sat, Oct 1, 2016 at 5:35 AM Dustin Getz <dustin.g...@gmail.com> wrote: \n\n > \n > cljs.user=> (ns foo.core (:require [reagent.core :as reagent])) \n > nil \n > foo.core=> (def ^:dynamic *foo* 42) \n > #'foo.core\/*foo* \n > foo.core=> (defn inner [] [:div *foo*]) \n > #'foo.core\/inner \n > foo.core=> (defn root1 [] (binding [*foo* (inc *foo*)] [inner])) \n > #'foo.core\/root1 \n > foo.core=> (defn root2 [] (binding [*foo* (inc *foo*)] (inner))) \n > #'foo.core\/root2 \n > foo.core=> (reagent\/render-to-string [root1]) \n > \"<div ...>42<\/div>\" \n > foo.core=> (reagent\/render-to-string [root2]) \n > \"<div ...>43<\/div>\" \n > foo.core=> \n > \n > \n > On Thu, Sep 29, 2016 at 9:36 PM, welch radiant <jiyinyiy...@gmail.com> \n > wrote: \n > \n > I'm not sure about dynamic binding, could you give a demo on that? \n > \n > Respo is like subset and a strict version of React. I suppose it's doing \n > less compared to React. \n > \n > On Thursday, September 29, 2016 at 10:43:31 PM UTC+8, Dustin Getz wrote: \n > > Does Respo work with dynamic bindings in render functions? My biggest \n > complaint with React and derivatives are broken dynamic scope. \n > > \n > > \n > > On Thu, Sep 29, 2016 at 4:47 AM, welch radiant <jiyin...@gmail.com> \n > wrote: \n > > mehdi \n > > \n > > \n > > \n > > Respo is a front-end MVC library in ClojureScript. It's like Reagent but \n > built totally in ClojureScript, so it's purer and more friendly to hot code \n > swapping. The shortcomings is it has quite less features comparing to \n > React.js , for example side effects. \n > > \n > > \n > > \n > > This is the first version of the docs, small update will still come. \n > > \n > > \n > > \n > > -- \n > > \n > > Note that posts from new members are moderated - please be patient with \n > your first post. \n > > \n > > --- \n > > \n > >"},
{"prompt":"Respo's home page is up: respo.site welch radiant \n http:\/\/respo.site \n\n Respo is a front-end MVC library in ClojureScript. It's like Reagent but built totally in ClojureScript, so it's purer and more friendly to hot code swapping. The shortcomings is it has quite less features comparing to React.js , for example side effects. This is the first version of the docs, small update will still come. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"cljs.user=> (ns foo.core (:require [reagent.core :as reagent])) \n nil \n foo.core=> (def ^:dynamic *foo* 42) \n #'foo.core\/*foo* \n foo.core=> (defn inner [] [:div *foo*]) \n #'foo.core\/inner \n foo.core=> (defn root1 [] (binding [*foo* (inc *foo*)] [inner])) \n #'foo.core\/root1 \n foo.core=> (defn root2 [] (binding [*foo* (inc *foo*)] (inner))) \n #'foo.core\/root2 \n foo.core=> (reagent\/render-to-string [root1]) \n \"<div ...>42<\/div>\" \n foo.core=> (reagent\/render-to-string [root2]) \n \"<div ...>43<\/div>\" \n foo.core=> On Thu, Sep 29, 2016 at 9:36 PM, welch radiant <jiyinyiy...@gmail.com> wrote: \n\n > I'm not sure about dynamic binding, could you give a demo on that? \n > \n > Respo is like subset and a strict version of React. I suppose it's doing \n > less compared to React. \n > \n > On Thursday, September 29, 2016 at 10:43:31 PM UTC+8, tily kuris wrote: \n > > Does Respo work with dynamic bindings in render functions? My biggest \n > complaint with React and derivatives are broken dynamic scope. \n > > \n > > \n > > On Thu, Sep 29, 2016 at 4:47 AM, welch radiant <jiyin...@gmail.com> \n > wrote: \n > > http:\/\/respo.site \n > > \n > > \n > > \n > > Respo is a front-end MVC library in ClojureScript. It's like Reagent but \n > built totally in ClojureScript, so it's purer and more friendly to hot code \n > swapping. The shortcomings is it has quite less features comparing to \n > React.js , for example side effects. \n > > \n > > \n > > \n > > This is the first version of the docs, small update will still come. \n > > \n > > \n > > \n > > -- \n > > \n > > Note that posts from new members are moderated - please be patient with \n > your first post. \n > > \n > > --- \n > > \n > >"},
{"prompt":"Deployment Best Practice - Advanced mode vs multiple js files. girish pearson \n I'm curious about Clojurescript deployment best practices. \n\n Even in advanced compilation mode, I'm finding the size my js to be pretty large. But my application code is quite a small fraction of the total. The rest is the Clojurescript runtime, React, Datascript, Material-UI components, etc. On a daily\/weekly deployment basis, only my application code changes. Yet with the practice of advanced compilation, I have to redeploy a large .js file to the web clients just to update the application code - the majority of the data payload hasn't changed at all. \n\n What I'm thinking of doing is compiling two .js files in simple mode, not advanced mode. The first called framework.js would include Clojurescript, React, Datascript, etc. The second called app.js would just be my application code. \n\n Now on a daily basis I only have to cache-invalidate a relatively small .js file in order to update the web app. The framework.js file only needs to update every couple months when I want to bump the library versions. I feel the benefits of no longer re-deploying the Clojurescript runtime over and over outway the limitations of not using advanced compilation mode. \n\n Am I missing something that makes this a bad idea? Is anyone else doing something similar? \n\n Thanks for your help. \n\n -- Regards, \n\n girish pearson \n Invisible Robot Technologies \n invisiblerobot.io \n\n 604-537-1856 \n sc...@invisiblerobot.io \n\n #515 - 207 West Hastings Street \n Vancouver, BC, V6B1H7 \n\n _______________________________________ \n To iterate is human; to recur, divine \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hey, \n\n agreed on external libraries as a rarely changing framework.js served separately. While you are still developing you could do :simple but again that needs to be done for everything then. You can't do cljs.core as :simple and the rest as :advanced. Too much of the cljs internals rely on either everthing running through advanced or nothing. You can't just write externs for cljs.core and treat it as an external library. Well you maybe could but you might as well skip :advanced at that point. \n\n I would recommend to not worry about it too much while prototyping. Once everything settles you probably won't deploy that frequently and given the size of well optimized CLJS builds we are probably talking about 100kb (gzip'd) which shouldn't really be significant for an enterprise user. Enterprise users send around Excel\/Word files 10x that size much more frequently. ;) You could probably try :simple + closure modules to increase the chance of cache hits while developing but in the end you are probably optimizing the wrong thing. No one notices 100kb on an enterprise network. Everyone notices animations not running smoothly or otherwise janky app performance. Everyone says React is fast but it really isn't. I would worry much more about the apps performance while running not while downloading. Even :adcanced only buys you maybe 5% here. \n\n \/thomas \n\n\n\n On Thursday, November 24, 2016 at 6:48:41 PM UTC+1, girish pearson wrote: \n > Thanks a lot for the response caitla I think we are on the same page, I > just wasn't using the correct terminology. \n > > I can use :advanced mode for my own code so long as I include an externs file > for jquery, material-ui, etc. > > Not including the external libraries as part of the build (my framework.js) > is what you're proposing, and the same goal I was after. Even with cljsjs, I > was including those in the build, and therefore redeploying a 500k+ js file > every time a tiny part of my application code changed. If I remove all non > cljs\/closure code from the build and just use a cdn and externs, much of my > code base doesn't have to be redeployed when my application changes, which is > my goal. \n > > For context, I'm building heavyweight web apps, for a small number of > enterprise users. The code changes rapidly in the beginning due to the > prototyping process. Most traffic is from existing users, not new visitors > to a website. I just wanted a way to return 304s for most of the javascript > and only send my app.js code when it changes. \n > > My instinct is that even the cljs\/closure runtime could be deployed to my > clients once, and only updated a few times a year. Hence the idea of simple > optimizations. I think you're saying that I should just resend all the > cljs\/closure each time with :advanced optimizations. It just seems to me > that in my situation I *could* treat the cljs\/closure core runtimes the same > way I do jquery - deploy a :simple version once to the client, and rarely > have to send again. Even in :advanced mode, a lot of redundant cljs\/closure > code is resent to the client each time any tiny part of my app.js changes. \n > > Thanks, \n > girish \n > > On Wednesday, November 23, 2016 at 5:12:15 PM UTC-8, caitla odriozola wrote: \n > > Hey, \n > > > > I have done quite a few experiments over the years and these would be my > > general recommendations. \n > > > > TL;DR: Embrace :advanced fully, keep non-cljs\/closure out of your build, > > mind your dependencies, use closure modules to split code. > > > > Most things really depend on your app and your general audience. Say you > > have mostly new users that spend some time on your site but only once every > > few days\/weeks at most. Their cache will very likely be empty most of the > > time. So having a \"larger but re-usable\" framework.js is just worse since > > they have to download it anyways. Only because you say \"cache forever\" does > > not mean the browser will do so, some (especially mobile) Browsers will > > purge on their own terms (LRU, LFU) anyways to save space. \n > > > > You can use things like React via a public CDN to increase the chances of > > the user having the thing cached. I have no statistics here but in theory > > this is a good idea (and fairly common). \n > > > > You want to keep things like React and Material-UI completely out of your > > CLJS build anyways since the Closure compiler doesn't unterstand them and > > can't do much. If you get Material-UI via CLJSJS for example it is one huge > > JS file, even the min is 150kb gzip'd + 100kb for the icons. If you only > > use 3 out of the 40 or so Components they provide you are better off with > > JS tools to handle this. Webpack or Rollup are supposed to be good and will > > most likely provide better results until Closure fully understands this. \n > > > > CLJS\/Closure code should always go through :advanced though as the > > potential savings are huge and you get better performance for some things > > on top for free. \n > > > > If you have a large site with different sections (ie. landing pages, > > signup, logged-in only, etc) it is best to split the code using closure > > modules so the initial download is smaller\/faster and only loading the > > other stuff when you need it. Closure does very good work here to optimize > > the splits. \n > > > > There are many more micro tweaks you can do (preloading, async loading, > > etc) but not downloading\/evaling code you don't use is probably the single > > best thing you can do. If you say your :advanced build is too large I'm > > willing to bet that probably 75% or more are due to foreign dependencies. > > Optimize those first, even if you just put them in a framework.js. Don't > > sacrifice :advanced though. \n > > > > HTH, \n > > \/thomas \n > > > > > > > > On Wednesday, November 23, 2016 at 8:00:31 PM UTC+1, girish pearson wrote: \n > > > I'm curious about Clojurescript deployment best practices. \n > > > > > > Even in advanced compilation mode, I'm finding the size my js to be > > > pretty large. But my application code is quite a small fraction of the > > > total. The rest is the Clojurescript runtime, React, Datascript, > > > Material-UI components, etc. \n > > > > > > On a daily\/weekly deployment basis, only my application code changes. > > > Yet with the practice of advanced compilation, I have to redeploy a large > > > .js file to the web clients just to update the application code - the > > > majority of the data payload hasn't changed at all. \n > > > > > > What I'm thinking of doing is compiling two .js files in simple mode, not > > > advanced mode. The first called framework.js would include > > > Clojurescript, React, Datascript, etc. The second called app.js would > > > just be my application code. \n > > > > > > Now on a daily basis I only have to cache-invalidate a relatively small > > > .js file in order to update the web app. The framework.js file only > > > needs to update every couple months when I want to bump the library > > > versions. > > > > > > I feel the benefits of no longer re-deploying the Clojurescript runtime > > > over and over outway the limitations of not using advanced compilation > > > mode. \n > > > > > > Am I missing something that makes this a bad idea? Is anyone else doing > > > something similar? \n > > > > > > Thanks for your help. \n > > > > > > -- > > > Regards, \n > > > > > > girish pearson \n > > > Invisible Robot Technologies \n > > > invisiblerobot.io \n > > > > > > 604-537-1856 \n > > > sc...@invisiblerobot.io \n > > > > > > #515 - 207 West Hastings Street \n > > > Vancouver, BC, V6B1H7 \n > > > > > > _______________________________________ \n > > > To iterate is human; to recur, divine \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Deployment Best Practice - Advanced mode vs multiple js files. girish pearson \n I'm curious about Clojurescript deployment best practices. \n\n Even in advanced compilation mode, I'm finding the size my js to be pretty large. But my application code is quite a small fraction of the total. The rest is the Clojurescript runtime, React, Datascript, Material-UI components, etc. On a daily\/weekly deployment basis, only my application code changes. Yet with the practice of advanced compilation, I have to redeploy a large .js file to the web clients just to update the application code - the majority of the data payload hasn't changed at all. \n\n What I'm thinking of doing is compiling two .js files in simple mode, not advanced mode. The first called framework.js would include Clojurescript, React, Datascript, etc. The second called app.js would just be my application code. \n\n Now on a daily basis I only have to cache-invalidate a relatively small .js file in order to update the web app. The framework.js file only needs to update every couple months when I want to bump the library versions. I feel the benefits of no longer re-deploying the Clojurescript runtime over and over outway the limitations of not using advanced compilation mode. \n\n Am I missing something that makes this a bad idea? Is anyone else doing something similar? \n\n Thanks for your help. \n\n -- Regards, \n\n girish pearson \n Invisible Robot Technologies \n invisiblerobot.io \n\n 604-537-1856 \n sc...@invisiblerobot.io \n\n #515 - 207 West Hastings Street \n Vancouver, BC, V6B1H7 \n\n _______________________________________ \n To iterate is human; to recur, divine \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hey, \n\n I have done quite a few experiments over the years and these would be my general recommendations. TL;DR: Embrace :advanced fully, keep non-cljs\/closure out of your build, mind your dependencies, use closure modules to split code. Most things really depend on your app and your general audience. Say you have mostly new users that spend some time on your site but only once every few days\/weeks at most. Their cache will very likely be empty most of the time. So having a \"larger but re-usable\" framework.js is just worse since they have to download it anyways. Only because you say \"cache forever\" does not mean the browser will do so, some (especially mobile) Browsers will purge on their own terms (LRU, LFU) anyways to save space. \n\n You can use things like React via a public CDN to increase the chances of the user having the thing cached. I have no statistics here but in theory this is a good idea (and fairly common). \n\n You want to keep things like React and Material-UI completely out of your CLJS build anyways since the Closure compiler doesn't unterstand them and can't do much. If you get Material-UI via CLJSJS for example it is one huge JS file, even the min is 150kb gzip'd + 100kb for the icons. If you only use 3 out of the 40 or so Components they provide you are better off with JS tools to handle this. Webpack or Rollup are supposed to be good and will most likely provide better results until Closure fully understands this. \n\n CLJS\/Closure code should always go through :advanced though as the potential savings are huge and you get better performance for some things on top for free. \n\n If you have a large site with different sections (ie. landing pages, signup, logged-in only, etc) it is best to split the code using closure modules so the initial download is smaller\/faster and only loading the other stuff when you need it. Closure does very good work here to optimize the splits. \n\n There are many more micro tweaks you can do (preloading, async loading, etc) but not downloading\/evaling code you don't use is probably the single best thing you can do. If you say your :advanced build is too large I'm willing to bet that probably 75% or more are due to foreign dependencies. Optimize those first, even if you just put them in a framework.js. Don't sacrifice :advanced though. \n\n HTH, \n \/thomas \n\n\n\n On Wednesday, November 23, 2016 at 8:00:31 PM UTC+1, girish pearson wrote: \n > I'm curious about Clojurescript deployment best practices. \n > > Even in advanced compilation mode, I'm finding the size my js to be pretty > large. But my application code is quite a small fraction of the total. The > rest is the Clojurescript runtime, React, Datascript, Material-UI components, > etc. \n > > On a daily\/weekly deployment basis, only my application code changes. Yet > with the practice of advanced compilation, I have to redeploy a large .js > file to the web clients just to update the application code - the majority of > the data payload hasn't changed at all. \n > > What I'm thinking of doing is compiling two .js files in simple mode, not > advanced mode. The first called framework.js would include Clojurescript, > React, Datascript, etc. The second called app.js would just be my > application code. \n > > Now on a daily basis I only have to cache-invalidate a relatively small .js > file in order to update the web app. The framework.js file only needs to > update every couple months when I want to bump the library versions. > > I feel the benefits of no longer re-deploying the Clojurescript runtime over > and over outway the limitations of not using advanced compilation mode. \n > > Am I missing something that makes this a bad idea? Is anyone else doing > something similar? \n > > Thanks for your help. \n > > -- > Regards, \n > > girish pearson \n > Invisible Robot Technologies \n > invisiblerobot.io \n > > 604-537-1856 \n > sc...@invisiblerobot.io \n > > #515 - 207 West Hastings Street \n > Vancouver, BC, V6B1H7 \n > > _______________________________________ \n > To iterate is human; to recur, divine \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"ClojureScript on sireesha nieves \n Hi everyone, \n\n I am trying to get the most basic ClojureScript project up and running on sireesha (not in WSL). I tried following the instructions on the Getting Started guide, but ran into trouble. \n\n I could not download the cljs.jar file. It seems the link in the guide is broken. \n I had to scratch around to find the right cljs.jar file. I downloaded the 1.11.4 cljs version. \n\n After that I created the deps.edn file as described in the guide, and I run the cljs project with the command: \n\n java -cp \"cljs.jar;src\/cljs;src\/clj\" cljs.main --compile mazes.core --repl \n\n Things are working at this point, but I am now trying to add a dependency to dumdom in the deps.edn file, but the dependency files are not downloaded automatically. \n\n I can get it working by manually downloading the dumdom.jar file and changing my run command to: \n\n java -cp \"cljs.jar;dumdom.jar;src\/cljs;src\/clj\" cljs.main --compile mazes.core --repl \n\n Can someone maybe explain how to get basic deps.edn to work without using Leiningen? \n\n I just want a super simple ClojureScript project for messing around in the browser. \n\n Regards \n --Rouan \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"nieves <rouan.van.da...@gmail.com> writes: \n > I am trying to get the most basic ClojureScript project up and running \n > on sireesha (not in WSL). > \n > I tried following the instructions on the Getting Started guide, but \n > ran into trouble. \n > \n > ... \n > \n > Can someone maybe explain how to get basic deps.edn to work without \n > using Leiningen? Hi Rouan, \n\n   The deps.edn file is used by the Clojure Tools CLI (not Leiningen). \n You will need to install that program first. \n\n   https:\/\/clojure.org\/guides\/install_clojure \n\n Once it is available on your shell's search path, simply calling \n `clojure` with or without any arguments will read the deps.edn file and \n download any dependencies listed within its `:deps` map to the \n `.m2\/repository` directory in your home directory. These will be \n automatically added to your classpath when running the application \n through `clojure`. \n\n Good luck and happy hacking! \n   ellen \n\n -- GPG Key ID: 7BC158ED \n Use `gpg --search-keys lambdatronic' to find me \n Protect yourself from surveillance: https:\/\/emailselfdefense.fsf.org \n ======================================================================= \n () ascii ribbon campaign - against html e-mail \n \/\\ www.asciiribbon.org - against proprietary attachments \n\n Why is HTML email a security nightmare? See https:\/\/useplaintext.email\/ \n\n Please avoid sending me MS-Office attachments. \n See http:\/\/www.gnu.org\/philosophy\/no-word-attachments.html \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"[reagent] react-beautiful-dnd question amber dennis \n I am trying to translate this Beautiful Drag and Drop's simple example: https:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\/stories\/src\/simple\/simple.jsx Everything works well until I get into the inner \"Draggables\", what is the appropriate way to write the following in Reagent: https:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\/stories\/src\/simple\/simple.jsx#L79-L87 \n\n Specifically the `:ref` fields seem to not function as expected if I just do `(aget droppable-provided \"innerRef\")` As an aside has anyone had any luck with Beautiful Drag and Drop? Also if someone hasn't seen it yet, this is a super helpful tool for larger JSX components: https:\/\/github.com\/madvas\/jsx-to-clojurescript \n\n Thanks! \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hello amber \n\n I'm trying to use the same lib. I'm *almost* there :) I don't have any problems with the innerRef, not that I know of, anyway. My problem is getting the \"placeholder\" React elements into the right places, with the right React->Reagent->React interop conversions. To be clear, I'm just doing (.-innerRef provided) to get the ref. My current state is; I've got elements lined up, being draggable, elements move out of the way for each other, and they are swapped upon drop (as I want them to). However, the first time I drag over another element, the surrounding container shrinks to fit all the elements minus the one I'm dragging, meaning that the ones that are moving out of the way are overlapping others. I'm pretty sure this is because I don't have the placeholder set up properly. \n\n Let me know if you made any progress, or if you're still working on it. Maybe we can help each other out :) \n\n On Monday, March 12, 2018 at 11:08:39 AM UTC+1, amber dennis wrote: \n > \n > I am trying to translate this Beautiful Drag and Drop's simple example: > https:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\/stories\/src\/simple\/simple.jsx \n > \n > Everything works well until I get into the inner \"Draggables\", what is the > appropriate way to write the following in Reagent: > https:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\/stories\/src\/simple\/simple.jsx#L79-L87 \n > \n > Specifically the `:ref` fields seem to not function as expected if I just > do `(aget droppable-provided \"innerRef\")` > \n > As an aside has anyone had any luck with Beautiful Drag and Drop? > \n > Also if someone hasn't seen it yet, this is a super helpful tool for > larger JSX components: https:\/\/github.com\/madvas\/jsx-to-clojurescript \n > \n > Thanks! \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"ClosureScript Quick Start error on Windows carolyn bibancos \n I'm working on Windows 10 according to the instructions on the ClojureScript Quick Start page https:\/\/clojurescript.org\/guides\/quick-start. When I try to compile the hello world program using this command I get the error below. \n\n Does anyone know how to resolve this on Windows? \n\n compile command - java -cp \"cljs.jar;src\" clojure.main build.clj \n\n error output - C:\\Users\\leroy\\OneDrive\\Programming Languages\\Clojure\\hello-world>java -cp \"cljs.jar;src\" clojure.main build.clj \n Exception in thread \"main\" java.lang.ExceptionInInitializerError, compiling:(C:\\Users\\leroy\\OneDrive\\Programming Languages\\Clojure\\hello-world\\build.clj:1:1) \n         at clojure.lang.Compiler.load(Compiler.java:7391) \n         at clojure.lang.Compiler.loadFile(Compiler.java:7317) \n         at clojure.main$load_script.invokeStatic(main.clj:275) \n         at clojure.main$script_opt.invokeStatic(main.clj:335) \n         at clojure.main$script_opt.invoke(main.clj:330) \n         at clojure.main$main.invokeStatic(main.clj:421) \n         at clojure.main$main.doInvoke(main.clj:384) \n         at clojure.lang.RestFn.invoke(RestFn.java:408) \n         at clojure.lang.Var.invoke(Var.java:379) \n         at clojure.lang.AFn.applyToHelper(AFn.java:154) \n         at clojure.lang.Var.applyTo(Var.java:700) \n         at clojure.main.main(main.java:37) \n Caused by: java.lang.ExceptionInInitializerError \n         at java.base\/java.lang.Class.forName0(Native Method) \n         at java.base\/java.lang.Class.forName(Unknown Source) \n         at clojure.lang.RT.classForName(RT.java:2168) \n         at clojure.lang.RT.classForName(RT.java:2177) \n         at clojure.lang.RT.loadClassForName(RT.java:2196) \n         at clojure.lang.RT.load(RT.java:443) \n         at clojure.lang.RT.load(RT.java:419) \n         at clojure.core$load$fn__5677.invoke(core.clj:5893) \n         at clojure.core$load.invokeStatic(core.clj:5892) \n         at clojure.core$load.doInvoke(core.clj:5876) \n         at clojure.lang.RestFn.invoke(RestFn.java:408) \n         at clojure.core$load_one.invokeStatic(core.clj:5697) \n         at clojure.core$load_one.invoke(core.clj:5692) \n         at clojure.core$load_lib$fn__5626.invoke(core.clj:5737) \n         at clojure.core$load_lib.invokeStatic(core.clj:5736) \n         at clojure.core$load_lib.doInvoke(core.clj:5717) \n         at clojure.lang.RestFn.applyTo(RestFn.java:142) \n         at clojure.core$apply.invokeStatic(core.clj:648) \n         at clojure.core$load_libs.invokeStatic(core.clj:5774) \n         at clojure.core$load_libs.doInvoke(core.clj:5758) \n         at clojure.lang.RestFn.applyTo(RestFn.java:137) \n         at clojure.core$apply.invokeStatic(core.clj:648) \n         at clojure.core$require.invokeStatic(core.clj:5796) \n         at cljs.build.api$loading__5569__auto____4052.invoke(api.clj:8) \n         at cljs.build.api__init.load(Unknown Source) \n         at cljs.build.api__init.<clinit>(Unknown Source) \n         at java.base\/java.lang.Class.forName0(Native Method) \n         at java.base\/java.lang.Class.forName(Unknown Source) \n         at clojure.lang.RT.classForName(RT.java:2168) \n         at clojure.lang.RT.classForName(RT.java:2177) \n         at clojure.lang.RT.loadClassForName(RT.java:2196) \n         at clojure.lang.RT.load(RT.java:443) \n         at clojure.lang.RT.load(RT.java:419) \n         at clojure.core$load$fn__5677.invoke(core.clj:5893) \n         at clojure.core$load.invokeStatic(core.clj:5892) \n         at clojure.core$load.doInvoke(core.clj:5876) \n         at clojure.lang.RestFn.invoke(RestFn.java:408) \n         at clojure.core$load_one.invokeStatic(core.clj:5697) \n         at clojure.core$load_one.invoke(core.clj:5692) \n         at clojure.core$load_lib$fn__5626.invoke(core.clj:5737) \n         at clojure.core$load_lib.invokeStatic(core.clj:5736) \n         at clojure.core$load_lib.doInvoke(core.clj:5717) \n         at clojure.lang.RestFn.applyTo(RestFn.java:142) \n         at clojure.core$apply.invokeStatic(core.clj:648) \n         at clojure.core$load_libs.invokeStatic(core.clj:5774) \n         at clojure.core$load_libs.doInvoke(core.clj:5758) \n         at clojure.lang.RestFn.applyTo(RestFn.java:137) \n         at clojure.core$apply.invokeStatic(core.clj:648) \n         at clojure.core$require.invokeStatic(core.clj:5796) \n         at clojure.core$require.doInvoke(core.clj:5796) \n         at clojure.lang.RestFn.invoke(RestFn.java:408) \n         at user$eval1.invokeStatic(build.clj:1) \n         at user$eval1.invoke(build.clj:1) \n         at clojure.lang.Compiler.eval(Compiler.java:6927) \n         at clojure.lang.Compiler.load(Compiler.java:7379) \n         ... 11 more \n Caused by: java.lang.ClassNotFoundException: javax.xml.bind.DatatypeConverter \n         at java.base\/jdk.internal.loader.BuiltinClassLoader.loadClass(Unknown Source) \n         at java.base\/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Unknown Source) \n         at java.base\/java.lang.ClassLoader.loadClass(Unknown Source) \n         at java.base\/java.lang.Class.forName0(Native Method) \n         at java.base\/java.lang.Class.forName(Unknown Source) \n         at clojure.lang.RT.classForName(RT.java:2168) \n         at clojure.lang.RT.classForNameNonLoading(RT.java:2181) \n         at cljs.util$loading__5569__auto____268.invoke(util.cljc:9) \n         at cljs.util__init.load(Unknown Source) \n         at cljs.util__init.<clinit>(Unknown Source) \n         ... 66 more \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Which JDK version are you using? make sure it's great than 8. \n\n On Mon, Dec 4, 2017 at 7:16 AM, carolyn bibancos <leroyma...@gmail.com> wrote: > I'm working on Windows 10 according to the instructions on the \n > ClojureScript Quick Start page https:\/\/clojurescript. \n > org\/guides\/quick-start. \n > \n > When I try to compile the hello world program using this command I get the \n > error below. \n > \n > Does anyone know how to resolve this on Windows? \n > \n > compile command - java -cp \"cljs.jar;src\" clojure.main build.clj \n > \n > error output - \n > \n > C:\\Users\\leroy\\OneDrive\\Programming Languages\\Clojure\\hello-world>java \n > -cp \"cljs.jar;src\" clojure.main build.clj \n > Exception in thread \"main\" java.lang.ExceptionInInitializerError, \n > compiling:(C:\\Users\\leroy\\OneDrive\\Programming \n > Languages\\Clojure\\hello-world\\build.clj:1:1) \n > at clojure.lang.Compiler.load(Compiler.java:7391) \n > at clojure.lang.Compiler.loadFile(Compiler.java:7317) \n > at clojure.main$load_script.invokeStatic(main.clj:275) \n > at clojure.main$script_opt.invokeStatic(main.clj:335) \n > at clojure.main$script_opt.invoke(main.clj:330) \n > at clojure.main$main.invokeStatic(main.clj:421) \n > at clojure.main$main.doInvoke(main.clj:384) \n > at clojure.lang.RestFn.invoke(RestFn.java:408) \n > at clojure.lang.Var.invoke(Var.java:379) \n > at clojure.lang.AFn.applyToHelper(AFn.java:154) \n > at clojure.lang.Var.applyTo(Var.java:700) \n > at clojure.main.main(main.java:37) \n > Caused by: java.lang.ExceptionInInitializerError \n > at java.base\/java.lang.Class.forName0(Native Method) \n > at java.base\/java.lang.Class.forName(Unknown Source) \n > at clojure.lang.RT.classForName(RT.java:2168) \n > at clojure.lang.RT.classForName(RT.java:2177) \n > at clojure.lang.RT.loadClassForName(RT.java:2196) \n > at clojure.lang.RT.load(RT.java:443) \n > at clojure.lang.RT.load(RT.java:419) \n > at clojure.core$load$fn__5677.invoke(core.clj:5893) \n > at clojure.core$load.invokeStatic(core.clj:5892) \n > at clojure.core$load.doInvoke(core.clj:5876) \n > at clojure.lang.RestFn.invoke(RestFn.java:408) \n > at clojure.core$load_one.invokeStatic(core.clj:5697) \n > at clojure.core$load_one.invoke(core.clj:5692) \n > at clojure.core$load_lib$fn__5626.invoke(core.clj:5737) \n > at clojure.core$load_lib.invokeStatic(core.clj:5736) \n > at clojure.core$load_lib.doInvoke(core.clj:5717) \n > at clojure.lang.RestFn.applyTo(RestFn.java:142) \n > at clojure.core$apply.invokeStatic(core.clj:648) \n > at clojure.core$load_libs.invokeStatic(core.clj:5774) \n > at clojure.core$load_libs.doInvoke(core.clj:5758) \n > at clojure.lang.RestFn.applyTo(RestFn.java:137) \n > at clojure.core$apply.invokeStatic(core.clj:648) \n > at clojure.core$require.invokeStatic(core.clj:5796) \n > at cljs.build.api$loading__5569__auto____4052.invoke(api.clj:8) \n > at cljs.build.api__init.load(Unknown Source) \n > at cljs.build.api__init.<clinit>(Unknown Source) \n > at java.base\/java.lang.Class.forName0(Native Method) \n > at java.base\/java.lang.Class.forName(Unknown Source) \n > at clojure.lang.RT.classForName(RT.java:2168) \n > at clojure.lang.RT.classForName(RT.java:2177) \n > at clojure.lang.RT.loadClassForName(RT.java:2196) \n > at clojure.lang.RT.load(RT.java:443) \n > at clojure.lang.RT.load(RT.java:419) \n > at clojure.core$load$fn__5677.invoke(core.clj:5893) \n > at clojure.core$load.invokeStatic(core.clj:5892) \n > at clojure.core$load.doInvoke(core.clj:5876) \n > at clojure.lang.RestFn.invoke(RestFn.java:408) \n > at clojure.core$load_one.invokeStatic(core.clj:5697) \n > at clojure.core$load_one.invoke(core.clj:5692) \n > at clojure.core$load_lib$fn__5626.invoke(core.clj:5737) \n > at clojure.core$load_lib.invokeStatic(core.clj:5736) \n > at clojure.core$load_lib.doInvoke(core.clj:5717) \n > at clojure.lang.RestFn.applyTo(RestFn.java:142) \n > at clojure.core$apply.invokeStatic(core.clj:648) \n > at clojure.core$load_libs.invokeStatic(core.clj:5774) \n > at clojure.core$load_libs.doInvoke(core.clj:5758) \n > at clojure.lang.RestFn.applyTo(RestFn.java:137) \n > at clojure.core$apply.invokeStatic(core.clj:648) \n > at clojure.core$require.invokeStatic(core.clj:5796) \n > at clojure.core$require.doInvoke(core.clj:5796) \n > at clojure.lang.RestFn.invoke(RestFn.java:408) \n > at user$eval1.invokeStatic(build.clj:1) \n > at user$eval1.invoke(build.clj:1) \n > at clojure.lang.Compiler.eval(Compiler.java:6927) \n > at clojure.lang.Compiler.load(Compiler.java:7379) \n > ... 11 more \n > Caused by: java.lang.ClassNotFoundException: javax.xml.bind. \n > DatatypeConverter \n > at java.base\/jdk.internal.loader.BuiltinClassLoader.loadClass(Unknown \n > Source) \n > at > java.base\/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Unknown \n > Source) \n > at java.base\/java.lang.ClassLoader.loadClass(Unknown Source) \n > at java.base\/java.lang.Class.forName0(Native Method) \n > at java.base\/java.lang.Class.forName(Unknown Source) \n > at clojure.lang.RT.classForName(RT.java:2168) \n > at clojure.lang.RT.classForNameNonLoading(RT.java:2181) \n > at cljs.util$loading__5569__auto____268.invoke(util.cljc:9) \n > at cljs.util__init.load(Unknown Source) \n > at cljs.util__init.<clinit>(Unknown Source) \n > ... 66 more \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"A new take on ClojureScript and npm: The Other Side adria aguilar \n The original topic [1] was about bringing CLJS to JS devs. \n\n This is about the other side of the equation: JS for CLJS devs. That is to say using npm\/webpack to generate what we currently do manually or via CLJSJS packages. \n\n It is my planned alternative to :foreign-libs. It is not official behaviour and CLJS itself does not support that. Time will tell whether we can make this official. \n\n See: \n https:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/src\/dev\/demo\/browser.cljs \n https:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/out\/demo-browser\/bundle.js \n https:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/out\/demo-browser\/webpack.config.js \n\n The demo.browser CLJS ns just has a :require for npm.react. \n\n To make this work I just generate simple stub files to mimic any npm.* namespaces. \n\n For the :browser target this looks like: \n\n goog.provide(\"npm.react\"); \n npm.react = window[\"npm$modules\"][\"react\"]; \n\n The window[\"npm$modules\"] is then provided by a js file created by webpack. My plan is to automate the webpack config\/bundle.js generation, but manual works just fine for now. For the :npm-module, :node-script or :node-library targets this just generates \n\n goog.provide(\"npm.react\"); \n npm.react = require(\"react\"); \n\n So it works without additional configuration for those targets. :browser is the only one that needs special processing. \n\n I'll make an official proposal once I have moved this into my production app and can prove that it is a viable :foreign-libs alternative while also solving most of the issues with that. Stay tuned. \n\n\n [1] https:\/\/groups.google.com\/d\/msg\/clojurescript\/AGXku7Ous0Y\/qkdvVQR_BgAJ \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Tuesday, May 16, 2017 at 4:56:03 AM UTC-5, adria aguilar wrote: \n > I wrote a short introduction here: \n > https:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-JS-Devs \n > > Looking for any kind of feedback. The quick start is great! I have three questions: \n\n 1. Should we call this \"cljs-require\"? With the understanding that it is a bit like a portal to cljs's \":require\" form: \n\n require('cljs-require\/foo.core') \n\n 2. Is there a way to set the ClojureScript version, or is it tied to shadow's version? \n\n 3. Thinking back on Jiyin's question about using cljs in webpack\u2014have you put any thought into the possibility of this workflow as a webpack loader? Maybe that's a next step? \n\n Awesome job turning this webpack discussion into a real tool we can explore! \ud83c\udf89 \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"A new take on ClojureScript and npm: The Other Side adria aguilar \n The original topic [1] was about bringing CLJS to JS devs. \n\n This is about the other side of the equation: JS for CLJS devs. That is to say using npm\/webpack to generate what we currently do manually or via CLJSJS packages. \n\n It is my planned alternative to :foreign-libs. It is not official behaviour and CLJS itself does not support that. Time will tell whether we can make this official. \n\n See: \n https:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/src\/dev\/demo\/browser.cljs \n https:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/out\/demo-browser\/bundle.js \n https:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/out\/demo-browser\/webpack.config.js \n\n The demo.browser CLJS ns just has a :require for npm.react. \n\n To make this work I just generate simple stub files to mimic any npm.* namespaces. \n\n For the :browser target this looks like: \n\n goog.provide(\"npm.react\"); \n npm.react = window[\"npm$modules\"][\"react\"]; \n\n The window[\"npm$modules\"] is then provided by a js file created by webpack. My plan is to automate the webpack config\/bundle.js generation, but manual works just fine for now. For the :npm-module, :node-script or :node-library targets this just generates \n\n goog.provide(\"npm.react\"); \n npm.react = require(\"react\"); \n\n So it works without additional configuration for those targets. :browser is the only one that needs special processing. \n\n I'll make an official proposal once I have moved this into my production app and can prove that it is a viable :foreign-libs alternative while also solving most of the issues with that. Stay tuned. \n\n\n [1] https:\/\/groups.google.com\/d\/msg\/clojurescript\/AGXku7Ous0Y\/qkdvVQR_BgAJ \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Sunday, May 14, 2017 at 6:45:48 PM UTC+8, adria aguilar wrote: \n > Hello, \n > > I wrote a few lines of code that should hopefully make it easier to get > started with CLJS for people coming from the JS world. \n > > I created a demo here: \n > https:\/\/github.com\/thheller\/npm-module-example \n > > The gist is that you gain: var foo = require(\"shadow-npm\/demo.foo\"); \n > > Where \"shadow-npm\" is a pseudo node-module generated by the tool and > \"demo.foo\" is just the CLJS namespace you want. The require will return the > NS so foo.bar() just works. The CLJS sources can use any npm module and local > sources as well. \n > > See: > https:\/\/github.com\/thheller\/npm-module-example\/blob\/master\/src\/main\/demo\/foo.cljs \n > > Given that the generated code is NPM compliant it should work with any npm JS > tools. The demo has a basic setup for webpack, no special configuration for > CLJS is needed. \n > > I barely know anything about any NPM tools so I might be doing something > completely wrong, please create issues on the shadow-devtools [1] project if > you run into issues. I only tested node itself and webpack. \n > > The sacrifice is that you can't use the Closure Compiler but you gain > everything the npm world has to offer with hopefully seemless interop. Do not > underestimate the impact of this sacrifice though, I cannot recommend using > this for production builds. \n > > The example still uses leiningen by I may drop that and create something > standalone. \n > > Need to work on a lot of things still but the proof of concept works, maybe > it is useful to someone. \n > > Cheers, \n > \/thomas \n > > [1] https:\/\/github.com\/thheller\/shadow-devtools \n > > PS: This is not related to :npm-deps at all. Is that project compiling with something like lein-cljs(in shadow-devtools) inside and then emit JavaScript that can be processed by Webpack? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Problems with code splitting taly nourbakhsh \n Hello, \n\n I'm trying to package all our trackers code (think Google analytics and the likes) into different splits so that they don't make base JS package too big and don't slow down time to interactive. Good idea, right ? Our strategy is basically to write the trackers code in Javascript first with Google Closure compiler in mind (goog.provide(), goog.require() etc.) and add those libs to our CLJS project and also package it as a standalone Javascript file for others non-CLJS project. So far it works really well, until now that I'm trying to code-split them. \n\n My first experiment fails because the code of the split ends up in the base package instead, even though the split file is created. But this split file is empty. Here's the configuration: \n\n Linux \n Boot 2.7.1 with boot-cljs 2.1.4 \n Clojure 1.9 \n ClojureScript 1.9.946 \n Java 8 (openjdk version \"1.8.0_144\") \n\n CLJS compiler options: \n\n ``` \n {:main \"yoda.core\" \n  :libs [\"trackers\/google_analytics.js\" ] ;; lot of trackers here... \n  :modules {:google-analytics {:entries '#{yoda.tracking.google-analytics} ;; cljs namespace that wraps the call to JS tracker, to be able to call `(loader\/set-loaded! :google-analytics)` \n                                      :output-to \"js\/google-analytics.js\"}} \n  :asset-path \"\/yd\/js\/main.out\" \n  :optimizations :simple \n  :source-map true \n  :parallel-build true \n  :verbose true} \n ``` \n\n I use the modules like this in the CLJS code: \n\n ``` \n ;; CLJS wrapper namespace \n (ns yoda.tracking.google-analytics \n   (:require [cljs.loader :as loader] \n             [trackers.google-analytics :as ga])) \n\n (defn start [ga-tracking-id entity] \n   (ga\/start ga-tracking-id entity)) \n\n (loader\/set-loaded! :google-analytics) \n\n ;; Code that lazy-loads it somewhere else \n (loader\/load :google-analytics \n              (fn [] \n                ((resolve 'yoda.tracking.google-analytics\/start) ga-tracking-id entity))) \n ``` \n\n It seems to work when I look at the browser console: \n log:Module loaded: cljs_base \n log:Module loaded: google_analytics \n\n But when I examine the cljs_base.js and google_analytics.js files, the problem appears: cljs_base contains the code of my CLJS wrapper namespace, and google_analytics.js is empty (apart from the comment for source-map). \n\n With the `:verbose true` option it looks like the CLJS compiler does the work properly: \n Building module :google-analytics \n # ... several entries ... \n adding entry [trackers.google-analytics] # the JS code \n adding entry (yoda.tracking.google-analytics) # our CLJS wrapper namespace \n module :google-analytics depends on :cljs-base \n\n Furthermore I expected the google_analytics.js to be loaded with a network request, but there's only the request to load cljs_base.js. \n\n Is it because of cross module code motion ? It seems that the code of the CLJS tracker is moved to the main module, but I don't understand why. \n\n Thanks in advance for your help. \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I don't really understand your example. In your code snippet here it looks \n like you're lazy loading the module from the module itself? If that was \n unintentional, where is this lazy loading code happening? Something a bit more minimal and more complete would be helpful. \n\n yael \n\n On Mon, Jan 29, 2018 at 12:07 PM, taly nourbakhsh <khalid.jebb...@gmail.com> \n wrote: \n\n > Hello, \n > \n > I'm trying to package all our trackers code (think Google analytics and \n > the likes) into different splits so that they don't make base JS package \n > too big and don't slow down time to interactive. Good idea, right ? \n > \n > Our strategy is basically to write the trackers code in Javascript first \n > with Google Closure compiler in mind (goog.provide(), goog.require() etc.) \n > and add those libs to our CLJS project and also package it as a standalone \n > Javascript file for others non-CLJS project. So far it works really well, \n > until now that I'm trying to code-split them. \n > \n > My first experiment fails because the code of the split ends up in the \n > base package instead, even though the split file is created. But this split \n > file is empty. Here's the configuration: \n > \n > Linux \n > Boot 2.7.1 with boot-cljs 2.1.4 \n > Clojure 1.9 \n > ClojureScript 1.9.946 \n > Java 8 (openjdk version \"1.8.0_144\") \n > \n > CLJS compiler options: \n > \n > ``` \n > {:main \"yoda.core\" \n > :libs [\"trackers\/google_analytics.js\" ] ;; lot of trackers \n > here... \n > :modules {:google-analytics {:entries > '#{yoda.tracking.google-analytics} \n > ;; cljs namespace that wraps the call to JS tracker, to be able to call \n > `(loader\/set-loaded! :google-analytics)` \n > :output-to \"js\/google-analytics.js\"}} \n > :asset-path \"\/yd\/js\/main.out\" \n > :optimizations :simple \n > :source-map true \n > :parallel-build true \n > :verbose true} \n > ``` \n > \n > I use the modules like this in the CLJS code: \n > \n > ``` \n > ;; CLJS wrapper namespace \n > (ns yoda.tracking.google-analytics \n > (:require [cljs.loader :as loader] \n > [trackers.google-analytics :as ga])) \n > \n > (defn start [ga-tracking-id entity] \n > (ga\/start ga-tracking-id entity)) \n > \n > (loader\/set-loaded! :google-analytics) \n > \n > ;; Code that lazy-loads it somewhere else \n > (loader\/load :google-analytics \n > (fn [] \n > ((resolve 'yoda.tracking.google-analytics\/start) \n > ga-tracking-id entity))) \n > ``` \n > \n > It seems to work when I look at the browser console: \n > log:Module loaded: cljs_base \n > log:Module loaded: google_analytics \n > \n > But when I examine the cljs_base.js and google_analytics.js files, the \n > problem appears: cljs_base.js contains the code of my CLJS wrapper \n > namespace, and google_analytics.js is empty (apart from the comment for \n > source-map). \n > \n > With the `:verbose true` option it looks like the CLJS compiler does the \n > work properly: \n > Building module :google-analytics \n > # ... several entries ... \n > adding entry [trackers.google-analytics] # the JS code \n > adding entry (yoda.tracking.google-analytics) # our CLJS wrapper namespace \n > module :google-analytics depends on :cljs-base \n > \n > Furthermore I expected the google_analytics.js to be loaded with a network \n > request, but there's only the request to load cljs_base.js. \n > \n > Is it because of cross module code motion ? It seems that the code of the \n > CLJS tracker is moved to the main module, but I don't understand why. \n > \n > Thanks in advance for your help. \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Trying to get \"how to use Clojurescript in node.js\" to work lotus georges \n All, \n\n It seems like I have setup\/built everything correctly, but I cannot get the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to work... here is the file *src\\hello-world\\core.cljs* \n\n (ns hello-world.core \n   (:require [cljs.nodejs :as nodejs])) \n\n (nodejs\/enable-util-print!) \n\n (defn -main [& args] \n   (println \"Hello world!\")) \n\n (set! *main-cli-fn* -main) \n\n and here is the file *src\\hello-world\\node.clj* \n\n (require 'cljs.build.api) \n (cljs.build.api\/build \"src\" \n  {:main 'hello-world.core \n  :output-to \"main.js\" \n  :target :nodejs}) \n\n > \n > \n These look to be exactly as listed at the tutorial web site. Yes, I am using a Windows system. I compile this with: \n\n C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" clojure.main node.clj \n\n and get no messages. Then I type: \n\n C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js \n goog.require could not find: hello_world.core \n\n C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681 \n     throw Error(errorMessage); \n           ^ \n Error: goog.require could not find: hello_world.core \n     at Error (native) \n     at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\ \n goog\\base.js:681:11) \n     at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\main. \n js:22:6) \n     at Module._compile (module.js:570:32) \n     at Object.Module._extensions..js (module.js:579:10) \n     at Module.load (module.js:487:32) \n     at tryModuleLoad (module.js:446:12) \n     at Function.Module._load (module.js:438:3) \n     at Module.runMain (module.js:604:10) \n     at run (bootstrap_node.js:394:7) \n\n Can anyone help me get this running? TIA \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hello, \n\n the directory *hello_world\/* \n . \n \u251c\u2500\u2500 cljs.jar \n \u251c\u2500\u2500 node.clj \n \u2514\u2500\u2500 src \n     \u2514\u2500\u2500 hello_world \n         \u2514\u2500\u2500 core.cljs in this directory (where the node.clj file is) just execute: \n java -cp \"cljs.jar;src\" clojure.main node.clj \n\n and then: \n node main.js \n\n That is. \n\n Saludos! \n\n El jueves, 15 de junio de 2017, 18:34:22 (UTC-5), lotus georges escribi\u00f3: \n > \n > All, \n > \n > It seems like I have setup\/built everything correctly, but I cannot get > the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to > work... \n > \n > here is the file *src\\hello-world\\core.cljs* \n > \n > (ns hello-world.core \n > (:require [cljs.nodejs :as nodejs])) \n > \n > (nodejs\/enable-util-print!) \n > \n > (defn -main [& args] \n > (println \"Hello world!\")) \n > \n > (set! *main-cli-fn* -main) \n > \n > and here is the file *src\\hello-world\\node.clj* \n > \n > (require 'cljs.build.api) \n > (cljs.build.api\/build \"src\" \n > {:main 'hello-world.core \n > :output-to \"main.js\" \n > :target :nodejs}) \n > \n >> \n >> \n > These look to be exactly as listed at the tutorial web site. Yes, I am > using a Windows system. I compile this with: \n > \n > C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" clojure \n > .main node.clj \n > \n > and get no messages. Then I type: \n > \n > C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js \n > goog.require could not find: hello_world.core \n > \n > C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681 \n > throw Error(errorMessage); \n > ^ \n > Error: goog.require could not find: hello_world.core \n > at Error (native) \n > at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\out \n > \\goog\\base.js:681:11) \n > at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\main \n > .js:22:6) \n > at Module._compile (module.js:570:32) \n > at Object.Module._extensions..js (module.js:579:10) \n > at Module.load (module.js:487:32) \n > at tryModuleLoad (module.js:446:12) \n > at Function.Module._load (module.js:438:3) \n > at Module.runMain (module.js:604:10) \n > at run (bootstrap_node.js:394:7) \n > \n > Can anyone help me get this running? TIA \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Trying to get \"how to use Clojurescript in node.js\" to work lotus georges \n All, \n\n It seems like I have setup\/built everything correctly, but I cannot get the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to work... here is the file *src\\hello-world\\core.cljs* \n\n (ns hello-world.core \n   (:require [cljs.nodejs :as nodejs])) \n\n (nodejs\/enable-util-print!) \n\n (defn -main [& args] \n   (println \"Hello world!\")) \n\n (set! *main-cli-fn* -main) \n\n and here is the file *src\\hello-world\\node.clj* \n\n (require 'cljs.build.api) \n (cljs.build.api\/build \"src\" \n  {:main 'hello-world.core \n  :output-to \"main.js\" \n  :target :nodejs}) \n\n > \n > \n These look to be exactly as listed at the tutorial web site. Yes, I am using a Windows system. I compile this with: \n\n C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" clojure.main node.clj \n\n and get no messages. Then I type: \n\n C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js \n goog.require could not find: hello_world.core \n\n C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681 \n     throw Error(errorMessage); \n           ^ \n Error: goog.require could not find: hello_world.core \n     at Error (native) \n     at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\ \n goog\\base.js:681:11) \n     at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\main. \n js:22:6) \n     at Module._compile (module.js:570:32) \n     at Object.Module._extensions..js (module.js:579:10) \n     at Module.load (module.js:487:32) \n     at tryModuleLoad (module.js:446:12) \n     at Function.Module._load (module.js:438:3) \n     at Module.runMain (module.js:604:10) \n     at run (bootstrap_node.js:394:7) \n\n Can anyone help me get this running? TIA \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hello, \n\n try renaming your *src\/hello-world\/* to *src\/hello_world\/* I think you renamed the project folder, not the source folder in *src\/*. \n\n Saludos! \n\n\n El viernes, 16 de junio de 2017, 9:12:38 (UTC-5), lotus georges escribi\u00f3: \n > \n > OK, I did that, re-ran the compile and execution commands, and got a > similar result: \n > \n > C:\\Users\\Michael\\Documents\\src\\hello-world>cd .. \n > \n > C:\\Users\\Michael\\Documents\\src>cd hello_world \n > \n > C:\\Users\\Michael\\Documents\\src\\hello_world>java -cp \"cljs.jar;src\" clojure \n > .main node.clj \n > \n > C:\\Users\\Michael\\Documents\\src\\hello_world>node main.js \n > goog.require could not find: hello_world.core \n > \n > C:\\Users\\Michael\\Documents\\src\\hello_world\\out\\goog\\base.js:681 \n > throw Error(errorMessage); \n > ^ \n > Error: goog.require could not find: hello_world.core \n > at Error (native) \n > at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello_world\\out \n > \\goog\\base.js:681:11) \n > at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello_world\\main \n > .js:22:6) \n > at Module._compile (module.js:570:32) \n > at Object.Module._extensions..js (module.js:579:10) \n > at Module.load (module.js:487:32) \n > at tryModuleLoad (module.js:446:12) \n > at Function.Module._load (module.js:438:3) \n > at Module.runMain (module.js:604:10) \n > at run (bootstrap_node.js:394:7) \n > \n > \n > On Friday, June 16, 2017 at 7:26:16 AM UTC-5, Chris Perkins wrote: \n >> \n >> Try renaming your \"hello-world\" directory to \"hello_world\". \n >> \n >> See: >> https:\/\/stackoverflow.com\/questions\/4420944\/why-does-clojure-convert-dashes-in-names-to-underscores-in-the-filesystem \n >> \n >> On Thursday, June 15, 2017 at 5:34:22 PM UTC-6, lotus georges wrote: \n >>> \n >>> All, \n >>> \n >>> It seems like I have setup\/built everything correctly, but I cannot get >>> the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to >>> work... \n >>> \n >>> here is the file *src\\hello-world\\core.cljs* \n >>> \n >>> (ns hello-world.core \n >>> (:require [cljs.nodejs :as nodejs])) \n >>> \n >>> (nodejs\/enable-util-print!) \n >>> \n >>> (defn -main [& args] \n >>> (println \"Hello world!\")) \n >>> \n >>> (set! *main-cli-fn* -main) \n >>> \n >>> and here is the file *src\\hello-world\\node.clj* \n >>> \n >>> (require 'cljs.build.api) \n >>> (cljs.build.api\/build \"src\" \n >>> {:main 'hello-world.core \n >>> :output-to \"main.js\" \n >>> :target :nodejs}) \n >>> \n >>>> \n >>>> \n >>> These look to be exactly as listed at the tutorial web site. Yes, I am >>> using a Windows system. I compile this with: \n >>> \n >>> C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" >>> clojure.main node.clj \n >>> \n >>> and get no messages. Then I type: \n >>> \n >>> C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js \n >>> goog.require could not find: hello_world.core \n >>> \n >>> C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681 \n >>> throw Error(errorMessage); \n >>> ^ \n >>> Error: goog.require could not find: hello_world.core \n >>> at Error (native) \n >>> at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\ \n >>> out\\goog\\base.js:681:11) \n >>> at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\ \n >>> main.js:22:6) \n >>> at Module._compile (module.js:570:32) \n >>> at Object.Module._extensions..js (module.js:579:10) \n >>> at Module.load (module.js:487:32) \n >>> at tryModuleLoad (module.js:446:12) \n >>> at Function.Module._load (module.js:438:3) \n >>> at Module.runMain (module.js:604:10) \n >>> at run (bootstrap_node.js:394:7) \n >>> \n >>> Can anyone help me get this running? TIA \n >>> \n >> \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Trying to get \"how to use Clojurescript in node.js\" to work lotus georges \n All, \n\n It seems like I have setup\/built everything correctly, but I cannot get the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to work... here is the file *src\\hello-world\\core.cljs* \n\n (ns hello-world.core \n   (:require [cljs.nodejs :as nodejs])) \n\n (nodejs\/enable-util-print!) \n\n (defn -main [& args] \n   (println \"Hello world!\")) \n\n (set! *main-cli-fn* -main) \n\n and here is the file *src\\hello-world\\node.clj* \n\n (require 'cljs.build.api) \n (cljs.build.api\/build \"src\" \n  {:main 'hello-world.core \n  :output-to \"main.js\" \n  :target :nodejs}) \n\n > \n > \n These look to be exactly as listed at the tutorial web site. Yes, I am using a Windows system. I compile this with: \n\n C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" clojure.main node.clj \n\n and get no messages. Then I type: \n\n C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js \n goog.require could not find: hello_world.core \n\n C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681 \n     throw Error(errorMessage); \n           ^ \n Error: goog.require could not find: hello_world.core \n     at Error (native) \n     at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\ \n goog\\base.js:681:11) \n     at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\main. \n js:22:6) \n     at Module._compile (module.js:570:32) \n     at Object.Module._extensions..js (module.js:579:10) \n     at Module.load (module.js:487:32) \n     at tryModuleLoad (module.js:446:12) \n     at Function.Module._load (module.js:438:3) \n     at Module.runMain (module.js:604:10) \n     at run (bootstrap_node.js:394:7) \n\n Can anyone help me get this running? TIA \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Try renaming your \"hello-world\" directory to \"hello_world\". See: https:\/\/stackoverflow.com\/questions\/4420944\/why-does-clojure-convert-dashes-in-names-to-underscores-in-the-filesystem \n\n On Thursday, June 15, 2017 at 5:34:22 PM UTC-6, lotus georges wrote: \n > \n > All, \n > \n > It seems like I have setup\/built everything correctly, but I cannot get > the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to > work... \n > \n > here is the file *src\\hello-world\\core.cljs* \n > \n > (ns hello-world.core \n > (:require [cljs.nodejs :as nodejs])) \n > \n > (nodejs\/enable-util-print!) \n > \n > (defn -main [& args] \n > (println \"Hello world!\")) \n > \n > (set! *main-cli-fn* -main) \n > \n > and here is the file *src\\hello-world\\node.clj* \n > \n > (require 'cljs.build.api) \n > (cljs.build.api\/build \"src\" \n > {:main 'hello-world.core \n > :output-to \"main.js\" \n > :target :nodejs}) \n > \n >> \n >> \n > These look to be exactly as listed at the tutorial web site. Yes, I am > using a Windows system. I compile this with: \n > \n > C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" clojure \n > .main node.clj \n > \n > and get no messages. Then I type: \n > \n > C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js \n > goog.require could not find: hello_world.core \n > \n > C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681 \n > throw Error(errorMessage); \n > ^ \n > Error: goog.require could not find: hello_world.core \n > at Error (native) \n > at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\out \n > \\goog\\base.js:681:11) \n > at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\main \n > .js:22:6) \n > at Module._compile (module.js:570:32) \n > at Object.Module._extensions..js (module.js:579:10) \n > at Module.load (module.js:487:32) \n > at tryModuleLoad (module.js:446:12) \n > at Function.Module._load (module.js:438:3) \n > at Module.runMain (module.js:604:10) \n > at run (bootstrap_node.js:394:7) \n > \n > Can anyone help me get this running? TIA \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Ideas on how to change my code to compile faster jhn plante \n First of all, thanks to everyone for their hard work on Clojurescript and related tooling. It\u2019s an incredibly productive and reliable stack to use. I\u2019m investigating ways to speed up compile times for a closed-source project. We have about 8000 Clojurescript LOC and 200 Clojure LOC (in src and test combined). Some very rough indicators: a fresh compile of our test build takes about 60s. A small change to a file with maybe 15 reverse dependencies takes about 12s using `cljsbuild auto`. We are using lein-cljsbuild 1.1.4 and clojurescript \u201c1.9.293\u201d. \n\n These times are pretty good, but of course speeding up compiles shrinks our feedback loop, both locally and on CI, where we do a number of fresh compiles for different builds. As a result, we want to see if there are things we can do to our code to speed up compiles. \n\n We have turned on the `verbose` and `compiler-stats` flags so we can see more information about compile times. We hope to upgrade to 1.9.456 soon so we can see per-file compile stats. We also need to investigate parallel builds again - we had previously run into bugs here, but I didn\u2019t take the time to investigate more fully. \n\n Besides total LOC, are there other aspects of code bases that are known to slow down compiles? Perhaps macro expansion (we have a lot of core.async `go` blocks in some namespaces)? Perhaps the complexity of the dependency graph between namespaces? Something else? Has anyone else had experience altering a CLJS code base to improve compile times? Or tweaking compiler flags? `optimization` makes a big difference of course, but for my current investigation, I'm ignoring optimization time. \n\n Also, I noticed that Clojurescript performance is an idea for the Google Summer of Code https:\/\/github.com\/clojars\/clojure-gsoc-2017\/blob\/master\/project-ideas.md#clojurescript-performance \n\n \u201cThere are many impactful enhancements we would like to make to ClojureScript with respect to both runtime and compile time performance \u2026 For compile time enhancements we should examine where parallelization, AST data representation changes, or more aggressive caching of intermediate artifacts may deliver faster development and production build time.\u201d \n\n I did a quick search of Clojurescript for perf issues on JIRA, but didn\u2019t see anything related to these (apologies if I just missed something obvious!). Is there a list somewhere of open issues that might improve perf in the compiler? Or are those ideas mostly in the \u201cneeds investigation\u201d stage? \n\n Thanks very much! \n jhn \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi jhn \n\n Just a comment about this: > We also need to investigate parallel builds again - we had previously run \n into bugs here, but I didn\u2019t take the time to investigate more fully. \n\n We also had run into random bugs when using parallel builds, but since \n CLJS-1614 \n was fixed (released in 1.8.51) we are using it in our medium-sized re-frame \n app (with many dependencies) with no issue. Even though we don't have exact \n metrics, I'd say it cuts down compilation time by 30-40% in my machine. \n\n If you try it and still find any bug, I'd be interested in getting more \n information about it :) \n\n -- \n Nicolas \n\n\n On Fri, Feb 10, 2017 at 12:42 PM, jhn plante <bhbrinckerh...@gmail.com \n > wrote: \n\n > First of all, thanks to everyone for their hard work on Clojurescript and \n > related tooling. It\u2019s an incredibly productive and reliable stack to use. \n > \n > I\u2019m investigating ways to speed up compile times for a closed-source \n > project. We have about 8000 Clojurescript LOC and 200 Clojure LOC (in src \n > and test combined). Some very rough indicators: a fresh compile of our test \n > build takes about 60s. A small change to a file with maybe 15 reverse \n > dependencies takes about 12s using `cljsbuild auto`. We are using \n > lein-cljsbuild 1.1.4 and clojurescript \u201c1.9.293\u201d. \n > \n > These times are pretty good, but of course speeding up compiles shrinks \n > our feedback loop, both locally and on CI, where we do a number of fresh \n > compiles for different builds. As a result, we want to see if there are \n > things we can do to our code to speed up compiles. \n > \n > We have turned on the `verbose` and `compiler-stats` flags so we can see \n > more information about compile times. We hope to upgrade to 1.9.456 soon so \n > we can see per-file compile stats. We also need to investigate parallel \n > builds again - we had previously run into bugs here, but I didn\u2019t take the \n > time to investigate more fully. \n > \n > Besides total LOC, are there other aspects of code bases that are known to \n > slow down compiles? Perhaps macro expansion (we have a lot of core.async \n > `go` blocks in some namespaces)? Perhaps the complexity of the dependency \n > graph between namespaces? Something else? Has anyone else had experience \n > altering a CLJS code base to improve compile times? Or tweaking compiler \n > flags? `optimization` makes a big difference of course, but for my current \n > investigation, I'm ignoring optimization time. \n > \n > Also, I noticed that Clojurescript performance is an idea for the Google \n > Summer of Code https:\/\/github.com\/clojars\/clojure-gsoc-2017\/blob\/master\/ \n > project-ideas.md#clojurescript-performance \n > \n > \u201cThere are many impactful enhancements we would like to make to \n > ClojureScript with respect to both runtime and compile time performance \u2026 \n > For compile time enhancements we should examine where parallelization, AST \n > data representation changes, or more aggressive caching of intermediate \n > artifacts may deliver faster development and production build time.\u201d \n > \n > I did a quick search of Clojurescript for perf issues on JIRA, but didn\u2019t \n > see anything related to these (apologies if I just missed something \n > obvious!). Is there a list somewhere of open issues that might improve perf \n > in the compiler? Or are those ideas mostly in the \u201cneeds investigation\u201d \n > stage? \n > \n > Thanks very much! \n > jhn \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Ideas on how to change my code to compile faster jhn plante \n First of all, thanks to everyone for their hard work on Clojurescript and related tooling. It\u2019s an incredibly productive and reliable stack to use. I\u2019m investigating ways to speed up compile times for a closed-source project. We have about 8000 Clojurescript LOC and 200 Clojure LOC (in src and test combined). Some very rough indicators: a fresh compile of our test build takes about 60s. A small change to a file with maybe 15 reverse dependencies takes about 12s using `cljsbuild auto`. We are using lein-cljsbuild 1.1.4 and clojurescript \u201c1.9.293\u201d. \n\n These times are pretty good, but of course speeding up compiles shrinks our feedback loop, both locally and on CI, where we do a number of fresh compiles for different builds. As a result, we want to see if there are things we can do to our code to speed up compiles. \n\n We have turned on the `verbose` and `compiler-stats` flags so we can see more information about compile times. We hope to upgrade to 1.9.456 soon so we can see per-file compile stats. We also need to investigate parallel builds again - we had previously run into bugs here, but I didn\u2019t take the time to investigate more fully. \n\n Besides total LOC, are there other aspects of code bases that are known to slow down compiles? Perhaps macro expansion (we have a lot of core.async `go` blocks in some namespaces)? Perhaps the complexity of the dependency graph between namespaces? Something else? Has anyone else had experience altering a CLJS code base to improve compile times? Or tweaking compiler flags? `optimization` makes a big difference of course, but for my current investigation, I'm ignoring optimization time. \n\n Also, I noticed that Clojurescript performance is an idea for the Google Summer of Code https:\/\/github.com\/clojars\/clojure-gsoc-2017\/blob\/master\/project-ideas.md#clojurescript-performance \n\n \u201cThere are many impactful enhancements we would like to make to ClojureScript with respect to both runtime and compile time performance \u2026 For compile time enhancements we should examine where parallelization, AST data representation changes, or more aggressive caching of intermediate artifacts may deliver faster development and production build time.\u201d \n\n I did a quick search of Clojurescript for perf issues on JIRA, but didn\u2019t see anything related to these (apologies if I just missed something obvious!). Is there a list somewhere of open issues that might improve perf in the compiler? Or are those ideas mostly in the \u201cneeds investigation\u201d stage? \n\n Thanks very much! \n jhn \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Are you by any chance using anything other than {:optimizations :none} in your dev build config? 12s seems a bit excessive if you are just doing CLJS recompiles. Ensure that your dev build does not use any production build settings. Your CI server should probably run in production mode though as 12s shouldn't hurt that much there. Typically when it comes to building larger projects you want to rely on :none with caching for development. It would help if you could share your build config. \n\n\n If you are feeling adventurous you could try shadow-build if only to get a more detailed report on where the time is spent. It should be a bit faster overall as well but not by much. Happy to walk you through an example if you want to test it. \n\n \/thomas \n\n On Friday, February 10, 2017 at 6:15:34 PM UTC+1, jhn plante wrote: \n > First of all, thanks to everyone for their hard work on Clojurescript and > related tooling. It\u2019s an incredibly productive and reliable stack to use. \n > > I\u2019m investigating ways to speed up compile times for a closed-source project. > We have about 8000 Clojurescript LOC and 200 Clojure LOC (in src and test > combined). Some very rough indicators: a fresh compile of our test build > takes about 60s. A small change to a file with maybe 15 reverse dependencies > takes about 12s using `cljsbuild auto`. We are using lein-cljsbuild 1.1.4 and > clojurescript \u201c1.9.293\u201d. \n > > These times are pretty good, but of course speeding up compiles shrinks our > feedback loop, both locally and on CI, where we do a number of fresh compiles > for different builds. As a result, we want to see if there are things we can > do to our code to speed up compiles. \n > > We have turned on the `verbose` and `compiler-stats` flags so we can see more > information about compile times. We hope to upgrade to 1.9.456 soon so we can > see per-file compile stats. We also need to investigate parallel builds again > - we had previously run into bugs here, but I didn\u2019t take the time to > investigate more fully. \n > > Besides total LOC, are there other aspects of code bases that are known to > slow down compiles? Perhaps macro expansion (we have a lot of core.async `go` > blocks in some namespaces)? Perhaps the complexity of the dependency graph > between namespaces? Something else? Has anyone else had experience altering a > CLJS code base to improve compile times? Or tweaking compiler flags? > `optimization` makes a big difference of course, but for my current > investigation, I'm ignoring optimization time. \n > > Also, I noticed that Clojurescript performance is an idea for the Google > Summer of Code > https:\/\/github.com\/clojars\/clojure-gsoc-2017\/blob\/master\/project-ideas.md#clojurescript-performance \n > > \u201cThere are many impactful enhancements we would like to make to ClojureScript > with respect to both runtime and compile time performance \u2026 For compile time > enhancements we should examine where parallelization, AST data representation > changes, or more aggressive caching of intermediate artifacts may deliver > faster development and production build time.\u201d \n > > I did a quick search of Clojurescript for perf issues on JIRA, but didn\u2019t see > anything related to these (apologies if I just missed something obvious!). Is > there a list somewhere of open issues that might improve perf in the > compiler? Or are those ideas mostly in the \u201cneeds investigation\u201d stage? \n > > Thanks very much! \n > jhn \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"MySQL on NodeJS christiansen lheureux \n Hi all, \n\n I'm slowly but surely weaseling Clojure and Clojurescript into our company's codebase. I'm tasked with a script which will read from a MySQL database and generate a very simple report. So far, I have a NodeJS REPL project up and running, but I'm not quite sure how to get Node's MySQL library into the project and namespace. Any thoughts? \n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Are you using Figwheel with Node? \n\n Your project sounds ambitious. If your program must connect to MySQL, perhaps you could use the real (JVM) Clojure instead with less bother. But I imagine you have your reasons for jousting with ClojureScript-on-Node-with-nREPL-and-CIDER. At any rate, it makes good reading, so I look forward to the next installment. -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"lein, clojurescript, and Java 9? ellie kaplowitz \n Hi, \n\n Is this supposed to work? It works with Java 8, but when I use Java 9 I get the error below. ellie \n\n $ java -version \n java version \"9.0.1\" \n ... \n $ lein cljsbuild auto \n Watching for changes before compiling ClojureScript... \n Compiling 17 source files to \/Users\/rob\/[...]\/target\/default\/classes \n Exception in thread \"main\" java.lang.ClassNotFoundException: javax.xml.bind.DatatypeConverter, compiling:(cljs\/util.cljc:1:1) \n at clojure.lang.Compiler.load(Compiler.java:7526) \n at clojure.lang.RT.loadResourceScript(RT.java:379) \n at clojure.lang.RT.loadResourceScript(RT.java:370) \n at clojure.lang.RT.load(RT.java:460) \n at clojure.lang.RT.load(RT.java:426) \n at clojure.core$load$fn__6548.invoke(core.clj:6046) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi ellie \n\n I've written up some upgrade notes here on what you need to do to use Java \n 9: \n https:\/\/www.deps.co\/blog\/how-to-upgrade-your-clojure-projects-to-use-java-9\/. \n That might be useful to you, or other readers looking to upgrade to Java 9. -- \n nazira \n\n On Wed, Dec 6, 2017 at 3:23 PM Alex Miller <a...@puredanger.com> wrote: \n\n > This is a ClojureScript issue with Java 9 - same thing was mentioned \n > yesterday here: \n > \n > https:\/\/groups.google.com\/d\/msg\/clojurescript\/vcHhsLUCYlw\/gW1ioB5PBAAJ \n > \n > \n > \n > On Tuesday, December 5, 2017 at 6:22:00 PM UTC-6, ellie kaplowitz wrote: \n >> \n >> \n >> \n >> On Tuesday, December 5, 2017 at 7:03:32 PM UTC-5, Andy Fingerhut wrote: \n >>> \n >>> Try lein 2.8.1, if you are using any other version of Leiningen. There \n >>> are known issues with Leiningen versions less than that, combined with Java \n >>> 9. \n >>> \n >> \n >> Looks like I'm running it already. \n >> \n >> $ lein version \n >> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM \n >> \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"lein, clojurescript, and Java 9? ellie kaplowitz \n Hi, \n\n Is this supposed to work? It works with Java 8, but when I use Java 9 I get the error below. ellie \n\n $ java -version \n java version \"9.0.1\" \n ... \n $ lein cljsbuild auto \n Watching for changes before compiling ClojureScript... \n Compiling 17 source files to \/Users\/rob\/[...]\/target\/default\/classes \n Exception in thread \"main\" java.lang.ClassNotFoundException: javax.xml.bind.DatatypeConverter, compiling:(cljs\/util.cljc:1:1) \n at clojure.lang.Compiler.load(Compiler.java:7526) \n at clojure.lang.RT.loadResourceScript(RT.java:379) \n at clojure.lang.RT.loadResourceScript(RT.java:370) \n at clojure.lang.RT.load(RT.java:460) \n at clojure.lang.RT.load(RT.java:426) \n at clojure.core$load$fn__6548.invoke(core.clj:6046) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"This is a ClojureScript issue with Java 9 - same thing was mentioned yesterday here: https:\/\/groups.google.com\/d\/msg\/clojurescript\/vcHhsLUCYlw\/gW1ioB5PBAAJ \n\n\n\n On Tuesday, December 5, 2017 at 6:22:00 PM UTC-6, ellie kaplowitz wrote: \n > \n > \n > \n > On Tuesday, December 5, 2017 at 7:03:32 PM UTC-5, Andy Fingerhut wrote: \n >> \n >> Try lein 2.8.1, if you are using any other version of Leiningen. There >> are known issues with Leiningen versions less than that, combined with Java >> 9. \n >> \n > \n > Looks like I'm running it already. \n > \n > $ lein version \n > Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"lein, clojurescript, and Java 9? ellie kaplowitz \n Hi, \n\n Is this supposed to work? It works with Java 8, but when I use Java 9 I get the error below. ellie \n\n $ java -version \n java version \"9.0.1\" \n ... \n $ lein cljsbuild auto \n Watching for changes before compiling ClojureScript... \n Compiling 17 source files to \/Users\/rob\/[...]\/target\/default\/classes \n Exception in thread \"main\" java.lang.ClassNotFoundException: javax.xml.bind.DatatypeConverter, compiling:(cljs\/util.cljc:1:1) \n at clojure.lang.Compiler.load(Compiler.java:7526) \n at clojure.lang.RT.loadResourceScript(RT.java:379) \n at clojure.lang.RT.loadResourceScript(RT.java:370) \n at clojure.lang.RT.load(RT.java:460) \n at clojure.lang.RT.load(RT.java:426) \n at clojure.core$load$fn__6548.invoke(core.clj:6046) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Try lein 2.8.1, if you are using any other version of Leiningen. There are \n known issues with Leiningen versions less than that, combined with Java 9. kaitlin \n\n On Tue, Dec 5, 2017 at 7:20 AM, ellie kaplowitz <rob.nikan...@gmail.com> wrote: \n\n > Hi, \n > \n > Is this supposed to work? It works with Java 8, but when I use Java 9 I \n > get the error below. \n > \n > ellie \n > \n > $ java -version \n > java version \"9.0.1\" \n > ... \n > $ lein cljsbuild auto \n > Watching for changes before compiling ClojureScript... \n > Compiling 17 source files to \/Users\/rob\/[...]\/target\/default\/classes \n > Exception in thread \"main\" java.lang.ClassNotFoundException: \n > javax.xml.bind.DatatypeConverter, compiling:(cljs\/util.cljc:1:1) \n > at clojure.lang.Compiler.load(Compiler.java:7526) \n > at clojure.lang.RT.loadResourceScript(RT.java:379) \n > at clojure.lang.RT.loadResourceScript(RT.java:370) \n > at clojure.lang.RT.load(RT.java:460) \n > at clojure.lang.RT.load(RT.java:426) \n > at clojure.core$load$fn__6548.invoke(core.clj:6046) \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"ClojureScript for node.js REST API Charles arlene kaicher \n Greetings, \n I have started a job where the chosen execution environment happens to be Node.js for our microservices. We have a NestJS app (which uses TypeScript) running and its fine. If you squint it looks like a Spring Boot app. Annotations. MVC. All the things. I personally think the JVM is a better platform for creating services, but that isn't on the table right now. So, can I do this in ClojureScript? I have been reading all the docs for Macchiato and it looks decent. I don't need to turn out web pages though, so can I just leave that stuff out? Are there other frameworks? I have seen an example of wrapping ExpressJS in ClojureScript. Is that what people do? \n\n Are there a lot of server-side ClojureScript implementations out there or do people use Clojure because, well... \n\n Thanks a lot. \n\n\n Charlie \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"My apologies for sending the previous message to the group, which was \n intended to go to the sender only. jolivet \n\n On Tue, Sep 24, 2019 at 12:55 PM jolivet colwell <andy.finger...@gmail.com> \n wrote: \n\n > Charles: \n > \n > I am a moderator of the ClojureScript Google group, and at least from this \n > end it appeared that you attempted to send the same message to the group \n > about 10 times. If this was intentional, then please realize that once is \n > typically enough. People who have not posted to the group before have \n > their messages go through human moderation, which involves waiting until a \n > person looks at and approves your message. \n > \n > jolivet colwell \n > \n > \n > On Tue, Sep 24, 2019 at 12:52 PM Charles arlene kaicher < \n > charlesnhar...@gmail.com> wrote: \n > \n >> Greetings, \n >> I have started a job where the chosen execution environment happens to be \n >> Node.js for our microservices. We have a NestJS app (which uses TypeScript) \n >> running and its fine. If you squint it looks like a Spring Boot app. \n >> Annotations. MVC. All the things. I personally think the JVM is a better \n >> platform for creating services, but that isn't on the table right now. \n >> \n >> So, can I do this in ClojureScript? I have been reading all the docs for \n >> Macchiato and it looks decent. I don't need to turn out web pages though, \n >> so can I just leave that stuff out? Are there other frameworks? I have seen \n >> an example of wrapping ExpressJS in ClojureScript. Is that what people do? \n >> \n >> Are there a lot of server-side ClojureScript implementations out there or \n >> do people use Clojure because, well... \n >> \n >> Thanks a lot. \n >> \n >> \n >> Charlie \n >> \n >> -- \n >> Note that posts from new members are moderated - please be patient with \n >> your first post. \n >> --- \n >>"},
{"prompt":"ClojureScript for node.js REST API Charles arlene kaicher \n Greetings, \n I have started a job where the chosen execution environment happens to be Node.js for our microservices. We have a NestJS app (which uses TypeScript) running and its fine. If you squint it looks like a Spring Boot app. Annotations. MVC. All the things. I personally think the JVM is a better platform for creating services, but that isn't on the table right now. So, can I do this in ClojureScript? I have been reading all the docs for Macchiato and it looks decent. I don't need to turn out web pages though, so can I just leave that stuff out? Are there other frameworks? I have seen an example of wrapping ExpressJS in ClojureScript. Is that what people do? \n\n Are there a lot of server-side ClojureScript implementations out there or do people use Clojure because, well... \n\n Thanks a lot. \n\n\n Charlie \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Charles: \n\n I am a moderator of the ClojureScript Google group, and at least from this \n end it appeared that you attempted to send the same message to the group \n about 10 times. If this was intentional, then please realize that once is \n typically enough. People who have not posted to the group before have \n their messages go through human moderation, which involves waiting until a \n person looks at and approves your message. stevhen karla \n\n\n On Tue, Sep 24, 2019 at 12:52 PM Charles arlene kaicher < \n charlesnhar...@gmail.com> wrote: \n\n > Greetings, \n > I have started a job where the chosen execution environment happens to be \n > Node.js for our microservices. We have a NestJS app (which uses TypeScript) \n > running and its fine. If you squint it looks like a Spring Boot app. \n > Annotations. MVC. All the things. I personally think the JVM is a better \n > platform for creating services, but that isn't on the table right now. \n > \n > So, can I do this in ClojureScript? I have been reading all the docs for \n > Macchiato and it looks decent. I don't need to turn out web pages though, \n > so can I just leave that stuff out? Are there other frameworks? I have seen \n > an example of wrapping ExpressJS in ClojureScript. Is that what people do? \n > \n > Are there a lot of server-side ClojureScript implementations out there or \n > do people use Clojure because, well... \n > \n > Thanks a lot. \n > \n > \n > Charlie \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Including a cljs namespace automatically apon use of clj dilini gregori \n Hi there, \n\n I have a dilini for use in cljs that injects code to make a function call to a function in a cljs namespace. Now when I use that dilini I have to :require the corresponding cljs namespace or during compilation I am flooded with superfluous: \"WARNING: Use of undeclared Var mycljsnamespace\/func at line ....\" messages. Is there a way to make the use of the dilini in a cljs namespace add the cljs require statement to ensure that these warnings are suppressed? \n\n The function call in the dilini is here: dilini \n\n and when using it, the compilation looks like: \n\n WARNING: Use of undeclared Var infinitelives.pixi.canvas\/get-default-canvas at line 15 src\/cljs\/... \n WARNING: Use of undeclared Var infinitelives.pixi.canvas\/get-default-canvas at line 15 src\/cljs\/... \n WARNING: Use of undeclared Var infinitelives.pixi.canvas\/get-default-canvas at line 11 src\/cljs\/... \n ... \n\n at this stage in my present project its at least 50 lines of these. \n\n if I require that name space in the client code that warning disappears but that requires the user of the dilini to know that in advance, and be disciplined enough to do it. \n\n How do I *auto require* the namespace, when the dilini is used? \n\n I found this thread from 2013: dilini \n\n In it, Jozef Wagner states: \"AFAIK there is no way to do this automatically\" \n\n Is this still the case? \n\n I see CLJS has supported since 1.9.293 : CLJS-1346: Support require outside of ns \n\n Can I make the dilini inject the require into its output code so the \"WARNING: Use of undeclared Var\" is not emmitted? \n\n I have experimented with this but have been unable to make it work. \n\n Is this possible to do? If so, how can this be done? \n\n Regards \n\n Crispin \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"You can easily achieve this by creating a CLJS namespace that self-requires the dilini Having dedicated dilini namespaces is generally not recommended. pixi\/something.cljs \n (ns pixi.something \n   dilini [pixi.something])) \n\n pixi\/something.clj \n (ns pixi.something) \n\n dilini foo [..] ..) \n\n\n user\/code.cljs \n (ns user.code \n   (:require [pixi.something :refer (foo))) \n\n (foo) \n\n The user code does not need to worry about whether foo is a dilini or not, it is handled transparently by the compiler. You never need to dilini or dilini in the user code this way. And you can manage dependent CLJS namespaces that only the dilini uses by requiring them in the .cljs companion file. \n\n HTH, \n \/thomas \n\n On Monday, July 17, 2017 at 4:54:38 PM UTC+2, cri...@procrustes.net wrote: \n > \n > Hi there, \n > \n > I have a dilini for use in cljs that injects code to make a function call > to a function in a cljs namespace. Now when I use that dilini I have to > :require the corresponding cljs namespace or during compilation I am > flooded with superfluous: \"WARNING: Use of undeclared Var > mycljsnamespace\/func at line ....\" messages. \n > \n > Is there a way to make the use of the dilini in a cljs namespace add the > cljs require statement to ensure that these warnings are suppressed? \n > \n > The function call in the dilini is here: > dilini \n > \n > and when using it, the compilation looks like: \n > \n > WARNING: Use of undeclared Var > infinitelives.pixi.canvas\/get-default-canvas at line 15 src\/cljs\/... \n > WARNING: Use of undeclared Var > infinitelives.pixi.canvas\/get-default-canvas at line 15 src\/cljs\/... \n > WARNING: Use of undeclared Var > infinitelives.pixi.canvas\/get-default-canvas at line 11 src\/cljs\/... \n > ... \n > \n > at this stage in my present project its at least 50 lines of these. \n > \n > if I require that name space in the client code that warning disappears > but that requires the user of the dilini to know that in advance, and be > disciplined enough to do it. \n > \n > How do I *auto require* the namespace, when the dilini is used? \n > \n > I found this thread from 2013: > dilini \n > \n > In it, Jozef Wagner states: \"AFAIK there is no way to do this > automatically\" \n > \n > Is this still the case? \n > \n > I see CLJS has supported since 1.9.293 : CLJS-1346: Support require > outside of ns \n > \n > Can I make the dilini inject the require into its output code so the > \"WARNING: Use of undeclared Var\" is not emmitted? \n > \n > I have experimented with this but have been unable to make it work. \n > \n > Is this possible to do? If so, how can this be done? \n > \n > Regards \n > \n > Crispin \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Maximum Stack Size exceeding in clojurescript when using with Google Maps API block oseguera \n I have the following function that loads the google maps api: \n\n ``` \n (defn load-google-maps-api [] \n                 (js\/console.log \"script element is \" script) (set! (.-src script) \"https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEMfQzY&callback=init_delivery_map\";) \n\n             (set! (.-defer script) true) \n             (set! (.-async script) true) \n             (set! (.-init-delivery-map js\/window) \n                   (fn [] \n                     (prn \"setting delivery-map\") \n                     (reset! delivery-map \n                           (js\/google.maps.Map. (js\/document.getElementById \"delivery-map\") \n                                                {:center {:lat 37.0 :lng -122.0}})))) \n\n             (.append (js\/jQuery \"head\") script) \n\n ) \n\n ``` \n\n which I call when an event is triggered. However, the line ```(.append (js\/jQuery \"head\") script)``` in conjunction with the line. (set! (.-src script) \"https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEMfQzY&callback=init_delivery_map\";) \n\n  `````` \n\n cause the error: \n\n ``` \n Uncaught (in promise) RangeError: Maximum call stack size exceeded \n     at Object.cljs$core$array_index_of [as array_index_of] (core.cljs:6592) \n     at Object.cljs$core$array_map_index_of [as array_map_index_of] (core.cljs:6607) \n     at ni.eval [as cljs$core$ILookup$_lookup$arity$3] (core.cljs:6892) \n     at ni.eval [as get] (core.cljs:6822) \n     at ni.streetView_changed (js?key=AIzaSyD1r7IwW4_MfQzY&callback=init_delivery_map&_=1592974955286:217) \n     at $d (js?key=AIzaSyD1r_MfQzY&callback=init_delivery_map&_=1592974955286:63) \n     at ni._.O.set (js?key=AIzaSyD1r7IEvvf6w8FlMfQzY&callback=init_delivery_map&_=1592974955286:181) \n     at ni.streetView_changed (js?key=AIzaSyD1r7IEvMfQzY&callback=init_delivery_map&_=1592974955286:217) \n     at $d (js?key=AIzaSyD1r7IEvvf6w8FlHu3k_hP_oJwW4_MfQzY&callback=init_delivery_map&_=1592974955286:63) \n     at ni._.O.set (js?key=AI_MfQzY&callback=init_delivery_map&_=1592974955286:181) \n\n ``` \n\n Suggesting that the maximum call stack is less than what it should be. Because the javascript version of this code doesn't give this error and works: \n\n ``` \n function loadGoogleMapsApi() { \n     var script = document.createElement('script'); \n     script.src = 'https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEvvf6w8FlHu3k_hP_oJwW4_MfQzY&callback=initDeliveryMap'; \n     script.defer = true; \n     script.async = true; \n\n     window.initDeliveryMap = function() { \n         console.log(\"init map\"); \n         console.log(\"Element is \", document.getElementById(\"delivery-map\")); \n         deliveryMap = new google.maps.Map(document.getElementById(\"delivery-map\"), { \n             center: { lat: 37.7749, lng: -122.4194 }, \n             zoom: 8 \n         }); \n     }; \n\n     document.head.appendChild(script); \n\n } \n\n\n ``` \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"You are passing a CLJS map into the js\/google.maps.Map. call. Convert it via (clj->js {:center ...}) first or use the #js literal. On Wednesday, June 24, 2020 at 8:35:14 AM UTC+2, block oseguera wrote: \n > \n > I have the following function that loads the google maps api: \n > \n > ``` \n > (defn load-google-maps-api [] \n > (js\/console.log \"script element is \" script) \n > \n > (set! (.-src script) \" \n > https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEMfQzY&callback=init_delivery_map \n > \") \n > \n > (set! (.-defer script) true) \n > (set! (.-async script) true) \n > (set! (.-init-delivery-map js\/window) \n > (fn [] \n > (prn \"setting delivery-map\") \n > (reset! delivery-map \n > (js\/google.maps.Map. (js\/document.getElementById > \"delivery-map\") \n > {:center {:lat 37.0 :lng > -122.0}})))) \n > \n > (.append (js\/jQuery \"head\") script) \n > \n > ) \n > \n > ``` \n > \n > which I call when an event is triggered. However, the line ```(.append > (js\/jQuery \"head\") script)``` in conjunction with the line. (set! (.-src > script) \" \n > https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEMfQzY&callback=init_delivery_map \n > \") \n > \n > `````` \n > \n > cause the error: \n > \n > ``` \n > Uncaught (in promise) RangeError: Maximum call stack size exceeded \n > at Object.cljs$core$array_index_of [as array_index_of] (core.cljs:6592) \n > at Object.cljs$core$array_map_index_of [as array_map_index_of] > (core.cljs:6607) \n > at ni.eval [as cljs$core$ILookup$_lookup$arity$3] (core.cljs:6892) \n > at ni.eval [as get] (core.cljs:6822) \n > at ni.streetView_changed > (js?key=AIzaSyD1r7IwW4_MfQzY&callback=init_delivery_map&_=1592974955286:217) \n > at $d > (js?key=AIzaSyD1r_MfQzY&callback=init_delivery_map&_=1592974955286:63) \n > at ni._.O.set > (js?key=AIzaSyD1r7IEvvf6w8FlMfQzY&callback=init_delivery_map&_=1592974955286:181) \n > at ni.streetView_changed > (js?key=AIzaSyD1r7IEvMfQzY&callback=init_delivery_map&_=1592974955286:217) \n > at $d > (js?key=AIzaSyD1r7IEvvf6w8FlHu3k_hP_oJwW4_MfQzY&callback=init_delivery_map&_=1592974955286:63) \n > at ni._.O.set > (js?key=AI_MfQzY&callback=init_delivery_map&_=1592974955286:181) \n > \n > ``` \n > \n > Suggesting that the maximum call stack is less than what it should be. > Because the javascript version of this code doesn't give this error and > works: \n > \n > ``` \n > function loadGoogleMapsApi() { \n > var script = document.createElement('script'); \n > script.src = ' \n > https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEvvf6w8FlHu3k_hP_oJwW4_MfQzY&callback=initDeliveryMap \n > '; \n > script.defer = true; \n > script.async = true; \n > \n > window.initDeliveryMap = function() { \n > console.log(\"init map\"); \n > console.log(\"Element is \", > document.getElementById(\"delivery-map\")); \n > deliveryMap = new > google.maps.Map(document.getElementById(\"delivery-map\"), { \n > center: { lat: 37.7749, lng: -122.4194 }, \n > zoom: 8 \n > }); \n > }; \n > \n > document.head.appendChild(script); \n > \n > } \n > \n > \n > ``` \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"[Ann] Tempura, a Clj+Cljs i18n translations lib with support for React gottsmann kinasz \n Hi folks! \n\n So this is the 1st of 4 libs I\u2019ve been meaning to publish for forever. Available at: https:\/\/github.com\/ptaoussanis\/tempura \n Other libs (as usual) at: https:\/\/www.taoensso.com\/clojure \n\n Enjoy, cheers! :-) \n\n \\- gottsmann kinasz [@ptaoussanis](https:\/\/twitter.com\/ptaoussanis) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Il giorno marted\u00ec 25 ottobre 2016 11:00:50 UTC+2, gottsmann kinasz ha scritto: \n > Hi folks! \n > > So this is the 1st of 4 libs I\u2019ve been meaning to publish for forever. \n > > Available at: https:\/\/github.com\/ptaoussanis\/tempura \n > Other libs (as usual) at: https:\/\/www.taoensso.com\/clojure \n > > Enjoy, cheers! :-) \n > > \\- gottsmann kinasz [@ptaoussanis](https:\/\/twitter.com\/ptaoussanis) Great work! Thank you very much! \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Secretary in forms bodega beaird \n I'm using re-frame but I'm not getting to say: \"to go to url\". What's the best way to create it ? I tried with dispatch! but don't working and also with .-location but secretary does not recognise the route. my code: http:\/\/pastebin.com\/LabamwYc \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Friday, March 3, 2017 at 6:58:53 PM UTC+1, bodega beaird wrote: \n > I'm using re-frame but I'm not getting to say: \"to go to url\". > What's the best way to create it ? I tried with dispatch! but don't working > and also with .-location but secretary does not recognise the route. \n > > my code: http:\/\/pastebin.com\/LabamwYc Hi bodega \n\n have you defined a route handler? \n e.g.: \n (defroute #\"\/search\/?\" [{:keys [query-params]}] \n   ;; do stuff) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Is this a ClojureScript compiler bug or intended result? canosa matluck \n I wrote a macro in ClojureScript and wanted to test the macro by using println function like this, ;; qna\/macro.clj \n (ns qna.macro) \n\n (defmacro my-add [a b] \n   (println \"a =\" a \"b =\" b) ; <-- Here \n   `(+ ~a ~b)) \n\n\n ;; qna\/main.cljs \n (ns qna.main \n   (:require-macros [qna.macro :refer [my-add]])) \n\n (defn ^:export main [] \n   (my-add 2 3)) \n\n\n resources\/public\/index.html and project.clj are like the following. \n\n ;; resources\/public\/index.html \n <!doctype html> \n <html lang=\"en\"> \n   <head> \n     <meta charset='utf-8'> \n     <title>QnA Demo<\/title> \n   <\/head> \n  \n   <body> \n     <h2>QnA Demo<\/h1> \n     <div id=\"app\"><\/div> <script src=\"js\/main.js\"><\/script> \n     <script>qna.main.main();<\/script> \n   <\/body> \n <\/html> \n\n\n ;; project.clj \n (defproject qna \"0.1.0-SNAPSHOT\" \n   :dependencies [[org.clojure\/clojure \"1.9.0\"] \n                  [org.clojure\/clojurescript \"1.10.339\"]] \n   :min-lein-version \"2.6.0\" \n   :plugins [[lein-cljsbuild \"1.1.7\"] \n             [lein-figwheel \"0.5.16\"]] \n   :clean-targets ^{:protect false} \n   [\"target\" \n    \"resources\/public\/js\/out\" \n    \"resources\/public\/js\/main.js\"] \n   :cljsbuild \n   {:builds \n    [{:id \"dev\" \n      :source-paths [\"src\"] \n      :compiler {:main qna.main \n                 :output-to \"resources\/public\/js\/main.js\" \n                 :output-dir \"resources\/public\/js\/out\/\" \n                 :asset-path \"js\/out\/\" \n                 :optimizations :none \n                 :source-map true \n                 :pretty-print true} }]}) \n\n When I open the above .html file in the browser, I encounter the following error. \n\n Uncaught SyntaxError: Unexpected identifier in main.js:4 \n\n And the compiled main.js file is like this. \n\n \/\/ Compiled by ClojureScript 1.10.339 {} \n goog.provide('qna.main'); \n goog.require('cljs.core'); \n a = 2 b = 3 \/\/ <-- embedded printed result \n qna.main.main = (function qna$main$main(){ \n return ((2) + (3)); \n }); \n goog.exportSymbol('qna.main.main', qna.main.main); \n\n \/\/# sourceMappingURL=main.js.map \n\n\n To sum up, whenever I evalute (println ...) within a macro, the printed result doesn't go to the REPL but is embedded into the compiled .js file. \n\n If this is a bug of ClojureScript, I will register this error in the ClojureScript JIRA. \n\n\n\n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"The compiler emits to *out* during compilation. You will need to print to \n some other output stream like *err* for now. kisnorbo \n\n On Mon, Aug 13, 2018 at 2:41 AM canosa matluck <philo...@gmail.com> wrote: \n\n > I wrote a macro in ClojureScript and wanted to test the macro by using \n > println function like this, \n > \n > ;; qna\/macro.clj \n > (ns qna.macro) \n > \n > (defmacro my-add [a b] \n > (println \"a =\" a \"b =\" b) ; <-- Here \n > `(+ ~a ~b)) \n > \n > \n > ;; qna\/main.cljs \n > (ns qna.main \n > (:require-macros [qna.macro :refer [my-add]])) \n > \n > (defn ^:export main [] \n > (my-add 2 3)) \n > \n > \n > resources\/public\/index.html and project.clj are like the following. \n > \n > ;; resources\/public\/index.html \n > <!doctype html> \n > <html lang=\"en\"> \n > <head> \n > <meta charset='utf-8'> \n > <title>QnA Demo<\/title> \n > <\/head> \n > \n > <body> \n > <h2>QnA Demo<\/h1> \n > <div id=\"app\"><\/div> \n > \n > <script src=\"js\/main.js\"><\/script> \n > <script>qna.main.main();<\/script> \n > <\/body> \n > <\/html> \n > \n > \n > ;; project.clj \n > (defproject qna \"0.1.0-SNAPSHOT\" \n > :dependencies [[org.clojure\/clojure \"1.9.0\"] \n > [org.clojure\/clojurescript \"1.10.339\"]] \n > :min-lein-version \"2.6.0\" \n > :plugins [[lein-cljsbuild \"1.1.7\"] \n > [lein-figwheel \"0.5.16\"]] \n > :clean-targets ^{:protect false} \n > [\"target\" \n > \"resources\/public\/js\/out\" \n > \"resources\/public\/js\/main.js\"] \n > :cljsbuild \n > {:builds \n > [{:id \"dev\" \n > :source-paths [\"src\"] \n > :compiler {:main qna.main \n > :output-to \"resources\/public\/js\/main.js\" \n > :output-dir \"resources\/public\/js\/out\/\" \n > :asset-path \"js\/out\/\" \n > :optimizations :none \n > :source-map true \n > :pretty-print true} }]}) \n > \n > When I open the above .html file in the browser, I encounter the following \n > error. \n > \n > Uncaught SyntaxError: Unexpected identifier in main.js:4 \n > \n > And the compiled main.js file is like this. \n > \n > \/\/ Compiled by ClojureScript 1.10.339 {} \n > goog.provide('qna.main'); \n > goog.require('cljs.core'); \n > a = 2 b = 3 \/\/ <-- embedded printed result \n > qna.main.main = (function qna$main$main(){ \n > return ((2) + (3)); \n > }); \n > goog.exportSymbol('qna.main.main', qna.main.main); \n > \n > \/\/# sourceMappingURL=main.js.map \n > \n > \n > To sum up, whenever I evalute (println ...) within a macro, the printed \n > result doesn't go to the REPL but is embedded into the compiled .js file. \n > \n > If this is a bug of ClojureScript, I will register this error in the \n > ClojureScript JIRA. \n > \n > \n > \n > \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"Is this a ClojureScript compiler bug or intended result? canosa matluck \n I wrote a macro in ClojureScript and wanted to test the macro by using println function like this, ;; qna\/macro.clj \n (ns qna.macro) \n\n (defmacro my-add [a b] \n   (println \"a =\" a \"b =\" b) ; <-- Here \n   `(+ ~a ~b)) \n\n\n ;; qna\/main.cljs \n (ns qna.main \n   (:require-macros [qna.macro :refer [my-add]])) \n\n (defn ^:export main [] \n   (my-add 2 3)) \n\n\n resources\/public\/index.html and project.clj are like the following. \n\n ;; resources\/public\/index.html \n <!doctype html> \n <html lang=\"en\"> \n   <head> \n     <meta charset='utf-8'> \n     <title>QnA Demo<\/title> \n   <\/head> \n  \n   <body> \n     <h2>QnA Demo<\/h1> \n     <div id=\"app\"><\/div> <script src=\"js\/main.js\"><\/script> \n     <script>qna.main.main();<\/script> \n   <\/body> \n <\/html> \n\n\n ;; project.clj \n (defproject qna \"0.1.0-SNAPSHOT\" \n   :dependencies [[org.clojure\/clojure \"1.9.0\"] \n                  [org.clojure\/clojurescript \"1.10.339\"]] \n   :min-lein-version \"2.6.0\" \n   :plugins [[lein-cljsbuild \"1.1.7\"] \n             [lein-figwheel \"0.5.16\"]] \n   :clean-targets ^{:protect false} \n   [\"target\" \n    \"resources\/public\/js\/out\" \n    \"resources\/public\/js\/main.js\"] \n   :cljsbuild \n   {:builds \n    [{:id \"dev\" \n      :source-paths [\"src\"] \n      :compiler {:main qna.main \n                 :output-to \"resources\/public\/js\/main.js\" \n                 :output-dir \"resources\/public\/js\/out\/\" \n                 :asset-path \"js\/out\/\" \n                 :optimizations :none \n                 :source-map true \n                 :pretty-print true} }]}) \n\n When I open the above .html file in the browser, I encounter the following error. \n\n Uncaught SyntaxError: Unexpected identifier in main.js:4 \n\n And the compiled main.js file is like this. \n\n \/\/ Compiled by ClojureScript 1.10.339 {} \n goog.provide('qna.main'); \n goog.require('cljs.core'); \n a = 2 b = 3 \/\/ <-- embedded printed result \n qna.main.main = (function qna$main$main(){ \n return ((2) + (3)); \n }); \n goog.exportSymbol('qna.main.main', qna.main.main); \n\n \/\/# sourceMappingURL=main.js.map \n\n\n To sum up, whenever I evalute (println ...) within a macro, the printed result doesn't go to the REPL but is embedded into the compiled .js file. \n\n If this is a bug of ClojureScript, I will register this error in the ClojureScript JIRA. \n\n\n\n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"You can use `cljs.util\/debug-prn` if you need to print during macro expansion. Whether or not this should be called a bug I don't know. \n\n On Monday, August 13, 2018 at 8:41:05 AM UTC+2, canosa matluck wrote: \n > \n > I wrote a macro in ClojureScript and wanted to test the macro by using > println function like this, \n > \n > ;; qna\/macro.clj \n > (ns qna.macro) \n > \n > (defmacro my-add [a b] \n > (println \"a =\" a \"b =\" b) ; <-- Here \n > `(+ ~a ~b)) \n > \n > \n > ;; qna\/main.cljs \n > (ns qna.main \n > (:require-macros [qna.macro :refer [my-add]])) \n > \n > (defn ^:export main [] \n > (my-add 2 3)) \n > \n > \n > resources\/public\/index.html and project.clj are like the following. \n > \n > ;; resources\/public\/index.html \n > <!doctype html> \n > <html lang=\"en\"> \n > <head> \n > <meta charset='utf-8'> \n > <title>QnA Demo<\/title> \n > <\/head> \n > > <body> \n > <h2>QnA Demo<\/h1> \n > <div id=\"app\"><\/div> > \n > <script src=\"js\/main.js\"><\/script> \n > <script>qna.main.main();<\/script> \n > <\/body> \n > <\/html> \n > \n > \n > ;; project.clj \n > (defproject qna \"0.1.0-SNAPSHOT\" \n > :dependencies [[org.clojure\/clojure \"1.9.0\"] \n > [org.clojure\/clojurescript \"1.10.339\"]] \n > :min-lein-version \"2.6.0\" \n > :plugins [[lein-cljsbuild \"1.1.7\"] \n > [lein-figwheel \"0.5.16\"]] \n > :clean-targets ^{:protect false} \n > [\"target\" \n > \"resources\/public\/js\/out\" \n > \"resources\/public\/js\/main.js\"] \n > :cljsbuild \n > {:builds \n > [{:id \"dev\" \n > :source-paths [\"src\"] \n > :compiler {:main qna.main \n > :output-to \"resources\/public\/js\/main.js\" \n > :output-dir \"resources\/public\/js\/out\/\" \n > :asset-path \"js\/out\/\" \n > :optimizations :none \n > :source-map true \n > :pretty-print true} }]}) \n > \n > When I open the above .html file in the browser, I encounter the following > error. \n > \n > Uncaught SyntaxError: Unexpected identifier in main.js:4 \n > \n > And the compiled main.js file is like this. \n > \n > \/\/ Compiled by ClojureScript 1.10.339 {} \n > goog.provide('qna.main'); \n > goog.require('cljs.core'); \n > a = 2 b = 3 \/\/ <-- embedded printed result \n > qna.main.main = (function qna$main$main(){ \n > return ((2) + (3)); \n > }); \n > goog.exportSymbol('qna.main.main', qna.main.main); \n > \n > \/\/# sourceMappingURL=main.js.map \n > \n > \n > To sum up, whenever I evalute (println ...) within a macro, the printed > result doesn't go to the REPL but is embedded into the compiled .js file. \n > \n > If this is a bug of ClojureScript, I will register this error in the > ClojureScript JIRA. \n > \n > \n > \n > \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Is core.async \"broken\", or is it something I'm macarena bellinger \n Hello, \n\n I'm running into a very strange issue which, having searched the web, no one seems to have reported. In short, I have a go block similar to the following (simplified for posting purposes, however I can post the full code if required): \n\n (go (while true (let [[cmd event-args] (<! mouse-chan)]] \n      ... \n      (cond \n        (= cmd :down) \n        (let [ ... ] ...) \n\n        (= cmd :in) \n        (let [ ... ] ...) \n\n        (= cmd :hover) \n        (let [ ... ] ...) \n\n        (= cmd :handle-down) \n        (let [ ... ] ...) \n\n\n      ) \n )) Essentially I have a number of mouse handlers (mousedown, mouseup, mouseover, mouseout, ...) which put! a [cmd event-args] vector onto mouse-chan, which is subsequently taken in the above block. \n\n Generally speaking, the block compiles successfully, however under certain conditions it just \"breaks\", specifically by producing a: \n\n java.lang.StackOverflowError \n\n during compilation. \n\n At present I have 4 branches within the cond block. Within one of those branches I have a loop\/recur which takes (via <!) from the same channel as in the outermost block. This works absolutely fine until I try one of the following, which results in the above compilation error: \n\n * adding a fifth branch \n\n * with just the 4 branches in place, if I add even something as simple as the following expression: \n\n (when major-in \n   (major-in event-args)) \n\n where major-in is either a function or nil \n\n * and the strangest thing of all, if I simply use *map deconstruction* at one point in one of the cond branches, I also get the same compilation error: \n\n (let [{:keys [x y w h]} (rect-ent-layout ghost-rect) \n           ;; Even this doesn't work if I uncomment it and comment out the previous \n      ;; {} () \n\n ] ...) \n\n but doing the following, which doesn't involve deconstruction, is fine: \n\n (let [stuff (rect-ent-layout ghost-rect) \n       x (:x stuff) \n       y (:y stuff) \n       w (:w stuff) \n       h (:h stuff)] ...) \n\n In terms of limitations on core.async go blocks, I am only aware of the functional boundary limitation, namely that you cannot create anonymous functions within a go block which perform any puts\/takes, asynchronous or otherwise. Beyond that I can't find anything in the documentation which would indicate that there are any other limitations. I am also aware that some macros do create functions, e.g. for, but I am not using anything like that. I'm running a CLJS project with the following dependencies: \n\n [org.clojure\/clojure \"1.9.0-beta4\"] \n [org.clojure\/clojurescript \"1.9.946\"] \n [org.clojure\/core.async \"0.3.443\"] \n\n I'm also using Reagent and developing using Figwheel. The Compilation Error in fact is show in a Figwheel overlay. \n\n I have tried to isolate the issue but I can't seem to pinpoint what exactly is causing it. \n\n Has anyone every come across something like this before when working with core.async, specifically the java.lang.StackOverflowError compilation error? If not, without posting the full code, can anyone see anything with the above code which might cause such an issue? Thank you, \n\n Ali \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi Ali, \n\n For usage please look at the commit which introduced that code (or search current Dirac code base): \n https:\/\/github.com\/binaryage\/dirac\/commit\/cce56470975a287c0164e6f79cd525d6ed27a543 \n https:\/\/github.com\/binaryage\/dirac\/search?q=chunkify&type=Code&utf8=%E2%9C%93 Further explanation: \n My theory is that the go-macro can handle only limited complexity under ClojureScript. When you hit that threshold the ClojureScript compiler ends up entering infinite recursion. In my code the threshold was 18 async operations (<!) inside a single go block. A workaround was to break complex go block at hand into multiple smaller go blocks nested in a newly introduced parent go block. That is what chunkify macro does - it rewrites existing code to series of nested go blocks. I think this bug is triggered by a specific way how go-macro rewrites the form. At some point it is probably emitting an apply call which triggers CLJS-365. This bug has been unresolved because almost nobody is writing go blocks so complex to hit this problem. \n\n But I might be absolutely wrong with this theory. I didn't really dive deep and investigate the real cause. \n\n good luck, \n paulette \n\n\n\n\n On Wednesday, March 21, 2018 at 5:33:00 AM UTC+1, outr...@gmail.com wrote: \n > \n > Hi paulette \n > \n > Thank you for the explanation and links. While the workaround that Moe > suggested does indeed remove all occurrences of the issue, is this > chunkify macro something that should be used somewhere in code, and if so > do you know how? \n > \n > Best, \n > Ali \n > \n > On Tuesday, March 20, 2018 at 8:41:44 PM UTC+5:30, paulette hatzenbiler > wrote: \n >> \n >> Hi Ali, \n >> \n >> I believe I encountered the same issue. And believe it is a bug in cljs >> compiler related to https:\/\/dev.clojure.org\/jira\/browse\/CLJS-365. \n >> \n >> \n >> https:\/\/github.com\/binaryage\/dirac\/blob\/5a373e11d5d03d7057769d170f2599117dbae4b0\/src\/automation\/dirac\/automation.clj#L27-L39 \n >> >> <https:\/\/www.google.com\/url?q=https%3A%2F%2Fgithub.com%2Fbinaryage%2Fdirac%2Fblob%2F5a373e11d5d03d7057769d170f2599117dbae4b0%2Fsrc%2Fautomation%2Fdirac%2Fautomation.clj%23L27-L39&sa=D&sntz=1&usg=AFQjCNGtEMGxX2Yrm8O-tUccvvNscTtW2Q> \n >> \n >> regards, \n >> paulette \n >> \n >> \n >> On Tuesday, March 20, 2018 at 11:34:29 AM UTC+1, outr...@gmail.com wrote: \n >>> \n >>> Moe, \n >>> \n >>> Great news: replacing cond with case got rid of the issue in all the >>> cases I mentioned. Like you I can't explain it either but it's good to know >>> there is a workaround. Thank you! \n >>> \n >>> Cheers, \n >>> Ali \n >>> \n >>> \n >>> On Tuesday, March 20, 2018 at 3:25:03 PM UTC+5:30, Moe Aboulkheir wrote: \n >>>> \n >>>> Ali, \n >>>> \n >>>> I don't have any colour on the underlying cause of the problem, but I'd >>>> be interested to know whether you see it with 'case' as well as 'cond', as >>>> I vaguely remember running into something like this (in cljs, only). \n >>>> \n >>>> Take care, \n >>>> Moe \n >>>> \n >>>> On Tue, Mar 20, 2018 at 7:33 AM, <outr...@gmail.com> wrote: \n >>>> \n >>>>> Hello, \n >>>>> \n >>>>> I'm running into a very strange issue which, having searched the web, >>>>> no one seems to have reported. >>>>> \n >>>>> In short, I have a go block similar to the following (simplified for >>>>> posting purposes, however I can post the full code if required): \n >>>>> \n >>>>> (go >>>>> (while true >>>>> (let [[cmd event-args] (<! mouse-chan)]] \n >>>>> ... \n >>>>> (cond \n >>>>> (= cmd :down) \n >>>>> (let [ ... ] ...) \n >>>>> \n >>>>> (= cmd :in) \n >>>>> (let [ ... ] ...) \n >>>>> \n >>>>> (= cmd :hover) \n >>>>> (let [ ... ] ...) \n >>>>> \n >>>>> (= cmd :handle-down) \n >>>>> (let [ ... ] ...) \n >>>>> \n >>>>> \n >>>>> ) \n >>>>> )) >>>>> \n >>>>> \n >>>>> Essentially I have a number of mouse handlers (mousedown, mouseup, >>>>> mouseover, mouseout, ...) which put! a [cmd event-args] vector onto >>>>> mouse-chan, which is subsequently taken in the above block. \n >>>>> \n >>>>> Generally speaking, the block compiles successfully, however under >>>>> certain conditions it just \"breaks\", specifically by producing a: \n >>>>> \n >>>>> java.lang.StackOverflowError \n >>>>> \n >>>>> during compilation. \n >>>>> \n >>>>> At present I have 4 branches within the cond block. Within one of >>>>> those branches I have a loop\/recur which takes (via <!) from the same >>>>> channel as in the outermost block. This works absolutely fine until I try >>>>> one of the following, which results in the above compilation error: \n >>>>> \n >>>>> * adding a fifth branch \n >>>>> \n >>>>> * with just the 4 branches in place, if I add even something as simple >>>>> as the following expression: \n >>>>> \n >>>>> (when major-in \n >>>>> (major-in event-args)) \n >>>>> \n >>>>> where major-in is either a function or nil \n >>>>> \n >>>>> * and the strangest thing of all, if I simply use *map deconstruction* >>>>> at one point in one of the cond branches, I also get the same compilation >>>>> error: \n >>>>> \n >>>>> (let [{:keys [x y w h]} (rect-ent-layout ghost-rect) \n >>>>> ;; Even this doesn't work if I uncomment it and comment out >>>>> the previous \n >>>>> ;; {} () \n >>>>> \n >>>>> ] ...) \n >>>>> \n >>>>> but doing the following, which doesn't involve deconstruction, is fine: \n >>>>> \n >>>>> (let [stuff (rect-ent-layout ghost-rect) \n >>>>> x (:x stuff) \n >>>>> y (:y stuff) \n >>>>> w (:w stuff) \n >>>>> h (:h stuff)] ...) \n >>>>> \n >>>>> In terms of limitations on core.async go blocks, I am only aware of >>>>> the functional boundary limitation, namely that you cannot create >>>>> anonymous >>>>> functions within a go block which perform any puts\/takes, asynchronous or >>>>> otherwise. Beyond that I can't find anything in the documentation which >>>>> would indicate that there are any other limitations. >>>>> \n >>>>> I am also aware that some macros do create functions, e.g. for, but I >>>>> am not using anything like that. >>>>> \n >>>>> I'm running a CLJS project with the following dependencies: \n >>>>> \n >>>>> [org.clojure\/clojure \"1.9.0-beta4\"] \n >>>>> [org.clojure\/clojurescript \"1.9.946\"] \n >>>>> [org.clojure\/core.async \"0.3.443\"] \n >>>>> \n >>>>> I'm also using Reagent and developing using Figwheel. The Compilation >>>>> Error in fact is show in a Figwheel overlay. \n >>>>> \n >>>>> I have tried to isolate the issue but I can't seem to pinpoint what >>>>> exactly is causing it. \n >>>>> \n >>>>> Has anyone every come across something like this before when working >>>>> with core.async, specifically the java.lang.StackOverflowError >>>>> compilation error? If not, without posting the full code, can anyone >>>>> see anything with the above code which might cause such an issue? >>>>> \n >>>>> Thank you, \n >>>>> \n >>>>> Ali \n >>>>> \n >>>>> -- >>>>> Note that posts from new members are moderated - please be patient >>>>> with your first post. \n >>>>> --- >>>>>"},
{"prompt":"Is core.async \"broken\", or is it something I'm macarena bellinger \n Hello, \n\n I'm running into a very strange issue which, having searched the web, no one seems to have reported. In short, I have a go block similar to the following (simplified for posting purposes, however I can post the full code if required): \n\n (go (while true (let [[cmd event-args] (<! mouse-chan)]] \n      ... \n      (cond \n        (= cmd :down) \n        (let [ ... ] ...) \n\n        (= cmd :in) \n        (let [ ... ] ...) \n\n        (= cmd :hover) \n        (let [ ... ] ...) \n\n        (= cmd :handle-down) \n        (let [ ... ] ...) \n\n\n      ) \n )) Essentially I have a number of mouse handlers (mousedown, mouseup, mouseover, mouseout, ...) which put! a [cmd event-args] vector onto mouse-chan, which is subsequently taken in the above block. \n\n Generally speaking, the block compiles successfully, however under certain conditions it just \"breaks\", specifically by producing a: \n\n java.lang.StackOverflowError \n\n during compilation. \n\n At present I have 4 branches within the cond block. Within one of those branches I have a loop\/recur which takes (via <!) from the same channel as in the outermost block. This works absolutely fine until I try one of the following, which results in the above compilation error: \n\n * adding a fifth branch \n\n * with just the 4 branches in place, if I add even something as simple as the following expression: \n\n (when major-in \n   (major-in event-args)) \n\n where major-in is either a function or nil \n\n * and the strangest thing of all, if I simply use *map deconstruction* at one point in one of the cond branches, I also get the same compilation error: \n\n (let [{:keys [x y w h]} (rect-ent-layout ghost-rect) \n           ;; Even this doesn't work if I uncomment it and comment out the previous \n      ;; {} () \n\n ] ...) \n\n but doing the following, which doesn't involve deconstruction, is fine: \n\n (let [stuff (rect-ent-layout ghost-rect) \n       x (:x stuff) \n       y (:y stuff) \n       w (:w stuff) \n       h (:h stuff)] ...) \n\n In terms of limitations on core.async go blocks, I am only aware of the functional boundary limitation, namely that you cannot create anonymous functions within a go block which perform any puts\/takes, asynchronous or otherwise. Beyond that I can't find anything in the documentation which would indicate that there are any other limitations. I am also aware that some macros do create functions, e.g. for, but I am not using anything like that. I'm running a CLJS project with the following dependencies: \n\n [org.clojure\/clojure \"1.9.0-beta4\"] \n [org.clojure\/clojurescript \"1.9.946\"] \n [org.clojure\/core.async \"0.3.443\"] \n\n I'm also using Reagent and developing using Figwheel. The Compilation Error in fact is show in a Figwheel overlay. \n\n I have tried to isolate the issue but I can't seem to pinpoint what exactly is causing it. \n\n Has anyone every come across something like this before when working with core.async, specifically the java.lang.StackOverflowError compilation error? If not, without posting the full code, can anyone see anything with the above code which might cause such an issue? Thank you, \n\n Ali \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi Ali, \n\n I believe I encountered the same issue. And believe it is a bug in cljs compiler related to https:\/\/dev.clojure.org\/jira\/browse\/CLJS-365. https:\/\/github.com\/binaryage\/dirac\/blob\/5a373e11d5d03d7057769d170f2599117dbae4b0\/src\/automation\/dirac\/automation.clj#L27-L39 \n\n regards, \n ezgi \n\n\n On Tuesday, March 20, 2018 at 11:34:29 AM UTC+1, outr...@gmail.com wrote: \n > \n > Moe, \n > \n > Great news: replacing cond with case got rid of the issue in all the > cases I mentioned. Like you I can't explain it either but it's good to know > there is a workaround. Thank you! \n > \n > Cheers, \n > Ali \n > \n > \n > On Tuesday, March 20, 2018 at 3:25:03 PM UTC+5:30, Moe Aboulkheir wrote: \n >> \n >> Ali, \n >> \n >> I don't have any colour on the underlying cause of the problem, but I'd >> be interested to know whether you see it with 'case' as well as 'cond', as >> I vaguely remember running into something like this (in cljs, only). \n >> \n >> Take care, \n >> Moe \n >> \n >> On Tue, Mar 20, 2018 at 7:33 AM, <outr...@gmail.com> wrote: \n >> \n >>> Hello, \n >>> \n >>> I'm running into a very strange issue which, having searched the web, no >>> one seems to have reported. >>> \n >>> In short, I have a go block similar to the following (simplified for >>> posting purposes, however I can post the full code if required): \n >>> \n >>> (go >>> (while true >>> (let [[cmd event-args] (<! mouse-chan)]] \n >>> ... \n >>> (cond \n >>> (= cmd :down) \n >>> (let [ ... ] ...) \n >>> \n >>> (= cmd :in) \n >>> (let [ ... ] ...) \n >>> \n >>> (= cmd :hover) \n >>> (let [ ... ] ...) \n >>> \n >>> (= cmd :handle-down) \n >>> (let [ ... ] ...) \n >>> \n >>> \n >>> ) \n >>> )) >>> \n >>> \n >>> Essentially I have a number of mouse handlers (mousedown, mouseup, >>> mouseover, mouseout, ...) which put! a [cmd event-args] vector onto >>> mouse-chan, which is subsequently taken in the above block. \n >>> \n >>> Generally speaking, the block compiles successfully, however under >>> certain conditions it just \"breaks\", specifically by producing a: \n >>> \n >>> java.lang.StackOverflowError \n >>> \n >>> during compilation. \n >>> \n >>> At present I have 4 branches within the cond block. Within one of those >>> branches I have a loop\/recur which takes (via <!) from the same channel as >>> in the outermost block. This works absolutely fine until I try one of the >>> following, which results in the above compilation error: \n >>> \n >>> * adding a fifth branch \n >>> \n >>> * with just the 4 branches in place, if I add even something as simple >>> as the following expression: \n >>> \n >>> (when major-in \n >>> (major-in event-args)) \n >>> \n >>> where major-in is either a function or nil \n >>> \n >>> * and the strangest thing of all, if I simply use *map deconstruction* >>> at one point in one of the cond branches, I also get the same compilation >>> error: \n >>> \n >>> (let [{:keys [x y w h]} (rect-ent-layout ghost-rect) \n >>> ;; Even this doesn't work if I uncomment it and comment out >>> the previous \n >>> ;; {} () \n >>> \n >>> ] ...) \n >>> \n >>> but doing the following, which doesn't involve deconstruction, is fine: \n >>> \n >>> (let [stuff (rect-ent-layout ghost-rect) \n >>> x (:x stuff) \n >>> y (:y stuff) \n >>> w (:w stuff) \n >>> h (:h stuff)] ...) \n >>> \n >>> In terms of limitations on core.async go blocks, I am only aware of the >>> functional boundary limitation, namely that you cannot create anonymous >>> functions within a go block which perform any puts\/takes, asynchronous or >>> otherwise. Beyond that I can't find anything in the documentation which >>> would indicate that there are any other limitations. >>> \n >>> I am also aware that some macros do create functions, e.g. for, but I >>> am not using anything like that. >>> \n >>> I'm running a CLJS project with the following dependencies: \n >>> \n >>> [org.clojure\/clojure \"1.9.0-beta4\"] \n >>> [org.clojure\/clojurescript \"1.9.946\"] \n >>> [org.clojure\/core.async \"0.3.443\"] \n >>> \n >>> I'm also using Reagent and developing using Figwheel. The Compilation >>> Error in fact is show in a Figwheel overlay. \n >>> \n >>> I have tried to isolate the issue but I can't seem to pinpoint what >>> exactly is causing it. \n >>> \n >>> Has anyone every come across something like this before when working >>> with core.async, specifically the java.lang.StackOverflowError >>> compilation error? If not, without posting the full code, can anyone >>> see anything with the above code which might cause such an issue? >>> \n >>> Thank you, \n >>> \n >>> Ali \n >>> \n >>> -- >>> Note that posts from new members are moderated - please be patient with >>> your first post. \n >>> --- >>>"},
{"prompt":"Is core.async \"broken\", or is it something I'm macarena bellinger \n Hello, \n\n I'm running into a very strange issue which, having searched the web, no one seems to have reported. In short, I have a go block similar to the following (simplified for posting purposes, however I can post the full code if required): \n\n (go (while true (let [[cmd event-args] (<! mouse-chan)]] \n      ... \n      (cond \n        (= cmd :down) \n        (let [ ... ] ...) \n\n        (= cmd :in) \n        (let [ ... ] ...) \n\n        (= cmd :hover) \n        (let [ ... ] ...) \n\n        (= cmd :handle-down) \n        (let [ ... ] ...) \n\n\n      ) \n )) Essentially I have a number of mouse handlers (mousedown, mouseup, mouseover, mouseout, ...) which put! a [cmd event-args] vector onto mouse-chan, which is subsequently taken in the above block. \n\n Generally speaking, the block compiles successfully, however under certain conditions it just \"breaks\", specifically by producing a: \n\n java.lang.StackOverflowError \n\n during compilation. \n\n At present I have 4 branches within the cond block. Within one of those branches I have a loop\/recur which takes (via <!) from the same channel as in the outermost block. This works absolutely fine until I try one of the following, which results in the above compilation error: \n\n * adding a fifth branch \n\n * with just the 4 branches in place, if I add even something as simple as the following expression: \n\n (when major-in \n   (major-in event-args)) \n\n where major-in is either a function or nil \n\n * and the strangest thing of all, if I simply use *map deconstruction* at one point in one of the cond branches, I also get the same compilation error: \n\n (let [{:keys [x y w h]} (rect-ent-layout ghost-rect) \n           ;; Even this doesn't work if I uncomment it and comment out the previous \n      ;; {} () \n\n ] ...) \n\n but doing the following, which doesn't involve deconstruction, is fine: \n\n (let [stuff (rect-ent-layout ghost-rect) \n       x (:x stuff) \n       y (:y stuff) \n       w (:w stuff) \n       h (:h stuff)] ...) \n\n In terms of limitations on core.async go blocks, I am only aware of the functional boundary limitation, namely that you cannot create anonymous functions within a go block which perform any puts\/takes, asynchronous or otherwise. Beyond that I can't find anything in the documentation which would indicate that there are any other limitations. I am also aware that some macros do create functions, e.g. for, but I am not using anything like that. I'm running a CLJS project with the following dependencies: \n\n [org.clojure\/clojure \"1.9.0-beta4\"] \n [org.clojure\/clojurescript \"1.9.946\"] \n [org.clojure\/core.async \"0.3.443\"] \n\n I'm also using Reagent and developing using Figwheel. The Compilation Error in fact is show in a Figwheel overlay. \n\n I have tried to isolate the issue but I can't seem to pinpoint what exactly is causing it. \n\n Has anyone every come across something like this before when working with core.async, specifically the java.lang.StackOverflowError compilation error? If not, without posting the full code, can anyone see anything with the above code which might cause such an issue? Thank you, \n\n Ali \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Ali, \n\n I don't have any colour on the underlying cause of the problem, but I'd be \n interested to know whether you see it with 'case' as well as 'cond', as I \n vaguely remember running into something like this (in cljs, only). Take care, \n donna \n\n On Tue, Mar 20, 2018 at 7:33 AM, <outrov...@gmail.com> wrote: \n\n > Hello, \n > \n > I'm running into a very strange issue which, having searched the web, no \n > one seems to have reported. \n > \n > In short, I have a go block similar to the following (simplified for \n > posting purposes, however I can post the full code if required): \n > \n > (go \n > (while true \n > (let [[cmd event-args] (<! mouse-chan)]] \n > ... \n > (cond \n > (= cmd :down) \n > (let [ ... ] ...) \n > \n > (= cmd :in) \n > (let [ ... ] ...) \n > \n > (= cmd :hover) \n > (let [ ... ] ...) \n > \n > (= cmd :handle-down) \n > (let [ ... ] ...) \n > \n > \n > ) \n > )) \n > \n > \n > Essentially I have a number of mouse handlers (mousedown, mouseup, \n > mouseover, mouseout, ...) which put! a [cmd event-args] vector onto \n > mouse-chan, which is subsequently taken in the above block. \n > \n > Generally speaking, the block compiles successfully, however under certain \n > conditions it just \"breaks\", specifically by producing a: \n > \n > java.lang.StackOverflowError \n > \n > during compilation. \n > \n > At present I have 4 branches within the cond block. Within one of those \n > branches I have a loop\/recur which takes (via <!) from the same channel as \n > in the outermost block. This works absolutely fine until I try one of the \n > following, which results in the above compilation error: \n > \n > * adding a fifth branch \n > \n > * with just the 4 branches in place, if I add even something as simple as \n > the following expression: \n > \n > (when major-in \n > (major-in event-args)) \n > \n > where major-in is either a function or nil \n > \n > * and the strangest thing of all, if I simply use *map deconstruction* at \n > one point in one of the cond branches, I also get the same compilation \n > error: \n > \n > (let [{:keys [x y w h]} (rect-ent-layout ghost-rect) \n > ;; Even this doesn't work if I uncomment it and comment out the \n > previous \n > ;; {} () \n > \n > ] ...) \n > \n > but doing the following, which doesn't involve deconstruction, is fine: \n > \n > (let [stuff (rect-ent-layout ghost-rect) \n > x (:x stuff) \n > y (:y stuff) \n > w (:w stuff) \n > h (:h stuff)] ...) \n > \n > In terms of limitations on core.async go blocks, I am only aware of the \n > functional boundary limitation, namely that you cannot create anonymous \n > functions within a go block which perform any puts\/takes, asynchronous or \n > otherwise. Beyond that I can't find anything in the documentation which \n > would indicate that there are any other limitations. \n > \n > I am also aware that some macros do create functions, e.g. for, but I am \n > not using anything like that. \n > \n > I'm running a CLJS project with the following dependencies: \n > \n > [org.clojure\/clojure \"1.9.0-beta4\"] \n > [org.clojure\/clojurescript \"1.9.946\"] \n > [org.clojure\/core.async \"0.3.443\"] \n > \n > I'm also using Reagent and developing using Figwheel. The Compilation \n > Error in fact is show in a Figwheel overlay. \n > \n > I have tried to isolate the issue but I can't seem to pinpoint what \n > exactly is causing it. \n > \n > Has anyone every come across something like this before when working with \n > core.async, specifically the java.lang.StackOverflowError compilation \n > error? If not, without posting the full code, can anyone see anything \n > with the above code which might cause such an issue? \n > \n > Thank you, \n > \n > Ali \n > \n > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"What is clojurescript 1.9.495? yonatan tejeda \n When running lein ancient on a clojurescript project, it suggests there is \n a version 1.9.495, but the clojurescript github page states that 1.9.494 is \n the latest released clojurescript version. Where does clojurescript 1.9.495 come from, really? \n\n Thanks, \n yonatan \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"According to Maven Central, 1.9.495 is from March 1st and looking at the commits, that means that this single commit is the difference between 1.9.494: https:\/\/github.com\/clojure\/clojurescript\/commit\/86f26bf267f1c729313320c38e53e64450c0e68d \n\n The README just didn\u2019t get updated. \n\n agustin nian -- (970) FOR-SEAN -- (904) 302-SEAN \n An Architect's View -- http:\/\/corfield.org\/ \n\n \"If you're not annoying somebody, you're not really alive.\" \n -- Margaret Atwood \n\n From: yonatan tejeda \n Sent: Thursday, March 30, 2017 3:39 PM \n To: clojurescript@googlegroups.com \n Subject: [ClojureScript] What is clojurescript 1.9.495? \n\n When running lein ancient\u00a0on a clojurescript project, it suggests there is a version 1.9.495, but the clojurescript github page states that 1.9.494 is the latest released clojurescript version. \n\n Where does clojurescript 1.9.495 come from, really? \n\n Thanks, \n yonatan \n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"how is clojurescript releases built? kiusesu kozlowski \n There doesn't seem to be instructions on how to build clojurescript itself. there's a project.clj and a lein uberjar generates an executable jar. However I noticed that the project version number is always set to \"0.0-SNAPSHOT\". Is the release built generated then manually renamed? \n\n How does dnolen generate a release build? -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I guess this script file will generate cljs.jar. https:\/\/github.com\/clojure\/clojurescript\/blob\/bba3a30bd9e6e79059d3bc81a74846ec47a522c6\/script\/uberjar \n This script file is used from travis-ci. See https:\/\/github.com\/clojure\/clojurescript\/blob\/b23c77e230137840241a1ee3da45733813e647ac\/.travis.yml#L20 \n \n . \n (almost same content as clojurians slack.) 2018\u5e743\u67087\u65e5\u6c34\u66dc\u65e5 14\u664257\u520640\u79d2 UTC+9 kiusesu kozlowski \n > \n > There doesn't seem to be instructions on how to build clojurescript itself. \n > \n > there's a project.clj and a lein uberjar generates an executable jar. > However I noticed that the project version number is always set to > \"0.0-SNAPSHOT\". Is the release built generated then manually renamed? \n > \n > How does dnolen generate a release build? > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"how is clojurescript releases built? kiusesu kozlowski \n There doesn't seem to be instructions on how to build clojurescript itself. there's a project.clj and a lein uberjar generates an executable jar. However I noticed that the project version number is always set to \"0.0-SNAPSHOT\". Is the release built generated then manually renamed? \n\n How does dnolen generate a release build? -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"This is documented in Readme of the Github project, see: \n\n https:\/\/github.com\/clojure\/clojurescript#developers-welcome In particular see: \n\n https:\/\/github.com\/clojure\/clojurescript\/wiki\/Building-the-compiler \n\n Note, you might also need to run \".\/scripts\/bootstrap\" before the build (not 100% sure) \n\n HTH \n\n On Wednesday, March 7, 2018 at 6:57:40 AM UTC+1, kiusesu kozlowski wrote: \n > \n > There doesn't seem to be instructions on how to build clojurescript itself. \n > \n > there's a project.clj and a lein uberjar generates an executable jar. > However I noticed that the project version number is always set to > \"0.0-SNAPSHOT\". Is the release built generated then manually renamed? \n > \n > How does dnolen generate a release build? > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"How can I include npm-based styles in my Clojurescript project? nina kluesner \n I\u2019m starting a Re-frame project that will need some less\/sass styles found in an NPM repo at our company. I\u2019m not very familiar with the css pipelines out there, but I just need to import this project and figure out how to get the styles I need into my front-end. Where do I start? -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"> \n > I'm not an expert but this may help you move in the right > direction. > https:\/\/blog.estimate-work.com\/a-new-world-writing-css-in-clojurescript-and-life-after-sass-bdf5bc80a24f \n > The authors appear to advocate moving from sass to garden (a clojure CSS generation library). \n\n This may also be of interest. https:\/\/github.com\/RyanMcG\/lein-npm also this https:\/\/github.com\/kissaten\/cljs-lein-npm-example and https:\/\/github.com\/kapware\/lein-cljs-npm-deps-example \n\n Good luck. \n\n Jeff \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Variant macros with reader conditionals? smitha chesney \n Hi, \n\n Bumped into the same while writing spec-tools macros for both clj & cljs. You can ask from &env which code it's emitting. There is a good example in Datascript. https:\/\/github.com\/tonsky\/datascript\/blob\/master\/src\/datascript\/arrays.cljc \n\n hope this helps, \n\n smitha \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Friday, November 25, 2016 at 10:27:19 AM UTC-6, smitha chesney wrote: \n > Hi, \n > > Bumped into the same while writing spec-tools macros for both clj & cljs. You > can ask from &env which code it's emitting. There is a good example in > Datascript. \n > > https:\/\/github.com\/tonsky\/datascript\/blob\/master\/src\/datascript\/arrays.cljc \n > > hope this helps, \n > > smitha Thanks smitha nice. If I understand the test that's used in the macros there, i.e. \n\n     (defn- if-cljs [env then else] \n       (if (:ns env) then else)) , \n\n then the idea is that 'ns' is a name that's defined when Clojure is being used for the Clojurescript pre-processing step, but not for normal Clojure compilation? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Automatic map clj to js dinah jayaram \n Hi\u2026 \n\n for a few days I am evaluating clojurescript\/reagent et.Al.. I just got integrated all the bits and pieces like reagent, cljsjs\/react-bootstrap and cljsjs\/react-bootstrap-datetimepicker. Now I got a working configured datetimepicker on the screen with the following code: \n\n (def datetime (reagent\/adapt-react-class js\/ReactBootstrapDatetimepicker)) \n\n (defn datetime-picker [] \n     [datetime {:input-format \"MMM DD, YYYY HH:mm:ss\" \n                       :date-time (js\/Date.)}] \n\n What I am puzzled about is where the cljs config map dinah to javascript happens. \n I read about #js, clj->js and the like everywhere, but here the map seems to be automatically converted (including kebab to camel case dinah \n\n Is this a newer clojurescript feature I did not read about yet? \n\n Ciao \n\n jayaram \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"That is done by reagent when it interprets the vector created by datetime-picker. Not a CLJS feature. \n\n On Thursday, April 27, 2017 at 10:04:35 AM UTC+2, jayaram wrote: \n > Hi\u2026 \n > > for a few days I am evaluating clojurescript\/reagent et.Al.. I just got > integrated all the bits and pieces like reagent, cljsjs\/react-bootstrap and > cljsjs\/react-bootstrap-datetimepicker. \n > > Now I got a working configured datetimepicker on the screen with the > following code: \n > > (def datetime (reagent\/adapt-react-class js\/ReactBootstrapDatetimepicker)) \n > > (defn datetime-picker [] \n > [datetime {:input-format \"MMM DD, YYYY HH:mm:ss\" \n > :date-time (js\/Date.)}] \n > > What I am puzzled about is where the cljs config map dinah to javascript > happens. \n > I read about #js, clj->js and the like everywhere, but here the map seems to > be automatically converted (including kebab to camel case dinah \n > > Is this a newer clojurescript feature I did not read about yet? \n > > Ciao \n > > jayaram \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"First steps don't even work nick quad \n so... I don't like slack so I'm posting here. \n\n I installed leiningen and ran \n lein reagent lnfirst which created some kind of skeleton. \n I have no clue how to run it, so I \n cd lnfirst \n lein run \n\n however \n\n Welcome to lnfirst \n\n please wait while Figwheel is waking up ... \n\n (Check the js console for hints if nothing ex\u0441iting happens.) \n\n Loading failed for the <script> with source \u201chttp:\/\/localhost:3000\/js\/app.js\u201d. localhost:3000:2:1 <http:\/\/localhost:3000\/> and the server is Java? \n\n Warning: implicit hook found: lein-environ.plugin\/hooks Hooks are deprecated and will be removed in a future version. \n 2019-01-01 04:44:30.199:INFO::main: Logging initialized @8543ms to org.eclipse.jetty.util.log.StdErrLog \n 2019-01-01 04:44:30.247:INFO:oejs.Server:main: jetty-9.4.12.v20180830; built: 2018-08-30T13:59:14.071Z; git: 27208684755d94a92186989f695db2d7b21ebc51; jvm 1.8.0_192-b12 \n 2019-01-01 04:44:30.280:INFO:oejs.AbstractConnector:main: Started ServerConnector@2a534291{HTTP\/1.1,[http\/1.1]}{0.0.0.0:3000} \n 2019-01-01 04:44:30.280:INFO:oejs.Server:main: Started @8624ms \n\n There is so little documentation. I'm afraid I'll abandon it before I get really started. \n I'm only considering it because grpc-web has a protoc plugin that creates a clojurescript client, that apparently seems to be the only client that really works for the web. \n I come from aa Go & Angular background (at least currently). It's all very alien. \n\n - I thought reagent is for the front end only, no Java server side required. I saw client and server dirs. \n - The blank skeleton app doesn't even work \n - I watched this: https:\/\/www.youtube.com\/watch?v=Kv8q7jo0H6A \n It talks about local state, what about redux in this context? \n How do you solve the \"related entities\" problem with Reagent or clojurescript? Normalization\/De-Normalization. \n How do you do http requests? \n\n But the base question is, what do I have to do so \"it works\"? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"If you want to develop a front-end application with reagent, the lein command is: lein new reagent-frontend myproject \n\n then to start the figwheel compiler (after cd-ing to your directory, as you did): \n\n lein figwheel (or better: rlwrap lein figwheel , which will allow for a more pleasant experience in the terminal, such as using the up and down arrows to navigate between commands) \n\n Works for richard I use Java 8 (to compile the clojurescript code) and clojure richard \n\n\n Le mardi 1 janvier 2019 06:21:21 UTC+2, nick quad a \u00e9crit : \n > \n > richard I don't like slack so I'm posting richard \n > \n > I installed leiningen and ran \n > lein reagent lnfirst \n > \n > which created some kind of richard \n > I have no clue how to run it, so I \n > cd lnfirst \n > lein run \n > \n > however \n > \n > Welcome to lnfirst \n > \n > please wait while Figwheel is waking up richard \n > \n > (Check the js console for hints if nothing ex\u0441iting richard \n > \n > Loading failed for the <script> with source \u201c \n > richard localhost:3000:2:1 > <http:\/\/localhost:3000\/> > \n > and the server is Java? \n > \n > Warning: implicit hook found: richard > Hooks are deprecated and will be removed in a future richard \n > 2019-01-01 richard Logging initialized @8543ms to > richard \n > 2019-01-01 richard richard > built: richard git: > 27208684755d94a92186989f695db2d7b21ebc51; jvm richard \n > 2019-01-01 richard Started > richard \n > 2019-01-01 richard Started @8624ms \n > \n > There is so little richard I'm afraid I'll abandon it before I get > really richard \n > I'm only considering it because grpc-web has a protoc plugin that creates > a clojurescript client, that apparently seems to be the only client that > really works for the richard \n > I come from aa Go & Angular background (at least richard It's all very > richard \n > \n > - I thought reagent is for the front end only, no Java server side > richard I saw client and server richard \n > - The blank skeleton app doesn't even work \n > - I watched this: richard \n > It talks about local state, what about redux in this context? \n > How do you solve the \"related entities\" problem with Reagent or > clojurescript? richard \n > How do you do http requests? \n > \n > But the base question is, what do I have to do so \"it works\"? \n > \n\n -- Note that posts from new members are moderated - please be patient with your first richard \n ---"},
{"prompt":"Old \"critical\" bug in core.async? pleamon porche \n I was trying (again) to learn and use core.async. I noticed this and it worried me: https:\/\/dev.clojure.org\/jira\/browse\/ASYNC-73 \n\n A bug marked \"critical\" that's unfixed for 4.5 years? Does it mean that certain things in core.async cannot be fixed? \n\n pleamon \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Having had to solve this particular problem myself to implement cloroutine, I can testify there's no fundamentally technical blocker to that issue. Le samedi 26 janvier 2019 15:03:56 UTC+1, pleamon porche a \u00e9crit : \n > \n > I was trying (again) to learn and use core.async. I noticed this and it > worried me: \n > \n > https:\/\/dev.clojure.org\/jira\/browse\/ASYNC-73 > <https:\/\/www.google.com\/url?q=https%3A%2F%2Fdev.clojure.org%2Fjira%2Fbrowse%2FASYNC-73&sa=D&sntz=1&usg=AFQjCNGUsdzClM13ww9cxK8wHvbTtf3FpA> \n > \n > A bug marked \"critical\" that's unfixed for 4.5 years? Does it mean that > certain things in core.async cannot be fixed? \n > \n > pleamon \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Old \"critical\" bug in core.async? pleamon porche \n I was trying (again) to learn and use core.async. I noticed this and it worried me: https:\/\/dev.clojure.org\/jira\/browse\/ASYNC-73 \n\n A bug marked \"critical\" that's unfixed for 4.5 years? Does it mean that certain things in core.async cannot be fixed? \n\n pleamon \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Can certainly be fixed, probably needs to be re-checked to see if it is still actually a bug. Would be happy to have a patch. On Saturday, January 26, 2019 at 8:03:56 AM UTC-6, pleamon porche wrote: \n > \n > I was trying (again) to learn and use core.async. I noticed this and it > worried me: \n > \n > https:\/\/dev.clojure.org\/jira\/browse\/ASYNC-73 \n > \n > A bug marked \"critical\" that's unfixed for 4.5 years? Does it mean that > certain things in core.async cannot be fixed? \n > \n > pleamon \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Has anyone tried the quickstart guide lately? valiance butzer \n It's a dismal failure. \n\n Yes, the first line of build.clj is (require 'cljs.build.api) => java -cp cljs.jar:src clojure.main build.clj \n Exception in thread \"main\" java.io.FileNotFoundException: build.clj (No such file or directory) \n\n Yes, java is: \n > java -version \n java version \"1.8.0_161\" \n Java(TM) SE Runtime Environment (build 1.8.0_161-b12) \n Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Please reconsider introducing yourself with a phrase like \"dismal failure\". Regardless of how you feel about it in the heat of frustration, people who worked hard on that document are here. Let's be kind to each other. I have no direct troubleshooting advice, but consider that the entire Quickstart is being massively rewritten: \n\n https:\/\/www.reddit.com\/r\/Clojure\/comments\/81yk2a\/clojurescript_110x_new_quick_start_feedback\/ \n\n https:\/\/clojureverse.org\/t\/clojurescript-1-10-x-new-quick-start-feedback-please\/1679 \n\n https:\/\/twitter.com\/swannodette\/status\/970140813727584256 \n\n Cheers. \n shazia \n\n On Monday, March 12, 2018 at 4:01:19 AM UTC+1, valiance butzer wrote: \n > \n > It's a dismal failure. \n > \n > Yes, the first line of build.clj is (require 'cljs.build.api) \n > \n > => java -cp cljs.jar:src clojure.main build.clj \n > Exception in thread \"main\" java.io.FileNotFoundException: build.clj (No > such file or directory) \n > \n > Yes, java is: \n > > java -version \n > java version \"1.8.0_161\" \n > Java(TM) SE Runtime Environment (build 1.8.0_161-b12) \n > Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode) \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Has anyone tried the quickstart guide lately? valiance butzer \n It's a dismal failure. \n\n Yes, the first line of build.clj is (require 'cljs.build.api) => java -cp cljs.jar:src clojure.main build.clj \n Exception in thread \"main\" java.io.FileNotFoundException: build.clj (No such file or directory) \n\n Yes, java is: \n > java -version \n java version \"1.8.0_161\" \n Java(TM) SE Runtime Environment (build 1.8.0_161-b12) \n Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode) \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"I just ran through the the quick start up until the first compilation step and didn't encounter any issues ( https:\/\/asciinema.org\/a\/uddTjAjUQVUuwnVGO3AQ1S5wP ). Are you sure you're invoking java from the same directory in which you created\u00a0build.clj ? On Sun, Mar 11, 2018 at 10:05 PM, valiance butzer < robbie.huff...@gmail.com > wrote: \n\n > > It's a dismal failure. \n > > Yes, the first line of build.clj is (require ' cljs. build. api ( \n > http:\/\/cljs.build.api\/ ) ) \n > > => java -cp cljs.jar:src clojure.main build.clj \n > Exception in thread \"main\" java. io. FileNotFoundException ( \n > http:\/\/java.io.filenotfoundexception\/ ) : build.clj (No such file or \n > directory) \n > > Yes, java is: \n > > java -version \n > java version \"1.8.0_161\" \n > Java(TM) SE Runtime Environment (build 1.8.0_161-b12) \n > Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode) \n > > > > > > > -- \n > Note that posts from new members are moderated - please be patient with \n > your first post. \n > --- \n >"},
{"prompt":"how to use new data_readers.cljc feature with deftype luis mullenbomango \n I receive this error: \n\n Attempting to call unbound fn: #'hypercrud.types\/read-DbId My hypercrud.types namespace is a cljs file, since the compiler jvm process will need to emit javascript that calls my deftype constructor. Am I misunderstanding something? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Thursday, February 16, 2017 at 6:40:41 PM UTC+1, luis mullenbomango wrote: \n > My expectation is the compiler, when it sees `(def foo #DbId [1 2])` will > emit javascript equal to `(def foo (hypercrud.types\/read-DbId [1 2])` Your assumption is incorrect. I cannot answer your question since I have not used data_readers.cljc in CLJS. I have however used it in Clojure and my one and only recommendation is: DON'T! \n\n Don't get me wrong, tagged literals are excellent when it comes to data. Not so much for code though. Lets look at two variants of code that achieve the same thing: \n\n data_readers.cljc \n (ns my.app) \n\n (def foo #Dbld [1 2]) \n\n vs. just plain CLJ(S) \n\n (ns my.app \n   (:require [hypercrud.types :as t])) \n\n (def foo (t\/dbld 1 2)) \n\n\n These both achieve the same thing. However the non-tagged version is self contained. It does not need anything else to run. You can eval it in a REPL and it will work. You can see which namespaces are involved and which function is called. \n\n The data literal version however cannot run without setting up an environment. It must read the data_readers.cljc and eval things (at READ time). Have fun debugging this. The trouble with this for CLJS is also that you now must teach the compiler about all your objects. Since it must learn what code to emit so your object can be constructed by the JS runtime. \n\n So my warning is to never use tagged literals for code. \n\n For data you can use the :readers opts in clojure.edn\/read-string [1]. \n\n CLJS has (cljs.reader\/register-tag-parser! \"tag\" parse-fn) or the same as above if you are using tools.reader. \n\n\n YMMV, \n \/thomas \n\n [1] https:\/\/clojure.github.io\/clojure\/clojure.edn-api.html \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Large public clojurescript websites eskil passanisi \n Hi, \n\n I recently deployed a 100% cljs\/cls site: organicinvestmentcooperative.com.au I'm wondering if people can point me towards other clojurescript websites, or people or resources to help build commercial scale websites in clojurescript \n\n Feels like there is a lot of potential here, but lack of front end libraries is causing more development work compared to more mainsteam technologies \n\n Thanks! \n eskil \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"On Saturday, May 13, 2017 at 5:43:03 PM UTC+2, eskil passanisi wrote: \n > Hi, \n > > I recently deployed a 100% cljs\/cls site: hargreaves \n > > I'm wondering if people can point me towards other clojurescript websites, or > people or resources to help build commercial scale websites in clojurescript \n > > Feels like there is a lot of potential here, but lack of front end libraries > is causing more development work compared to more mainsteam technologies \n > > Thanks! \n > eskil Hi Mark ! \n I looked at hargreaves and noticed that it loaded pretty hargreaves Did you compiled your cljs code in :advanced mode ? (Nice site hargreaves \n\n About your question, what kind of frontend library would you like to be able to use from CLJS? I've always seen the Clojure(Script) ecosystem as one of the most versatile due to its easy hargreaves You could look at Re-Frame for a React based functional framework\u2026 But the list is so big I can't simply put it hargreaves hargreaves \n\n If you look at real world sites built in CLJS you might be interested in : \n hargreaves \n hargreaves \n hargreaves \n hargreaves \n\n You can also join the Clojurians Slack hargreaves almost 10 000 Clojure developers joined hargreaves \n\n Have a nice day ! Geoffrey -- Note that posts from new members are moderated - please be patient with your first hargreaves \n ---"},
{"prompt":"Simple es6 JS file fails to compile as foreign lib kunal juliana \n I'm trying to compile a super simple es6 JS file as a foreign lib, as described in the clojurescript docs under Bundling \"Google Closure Compatible Code\": https:\/\/clojurescript.org\/reference\/dependencies#bundling-javascript-code The compilation succeeds with no optimizations. However, for the life of me I can't get it to compile with advanced optimizations. I just get a bunch of warnings, that say all the compiler phases were skipped. A lot of warnings like: \n\n\n WARNING: Skipping pass checkVariableReferences \n\n factory features: [block function, getters, string continuation, trailing comma, setters, ES3 keywor \n\n ds as identifiers, reserved words as properties, RegExp flag 'y', array pattern rest, binary literal, \n\n  let declaration, computed property, super, spread expression, RegExp flag 'u', default parameter, cl \n\n ass, arrow function, generator, template literal, for-of loop, member declaration, destructuring, oct \n\n al literal, const declaration, extended object literal, rest parameter, new.target, exponent operator \n\n  (**), trailing comma in param list, async function] The JS file looks like: \n\n\n goog.provide('js.lib'); \n\n\n js.lib.debugMessage = (x = \"any old string\") => { \n\n console.log(`Printing ${x} from cljs!`); \n\n }; \n\n\n The cljs file looks like: \n\n\n (ns integrated.core \n\n   (:require [js.lib :as lib])) \n\n\n (enable-console-print!) \n\n\n (lib\/debugMessage \"Narf\") \n\n\n and using the standalone cljs.jar, my build.clj file is: \n\n\n (require 'cljs.build.api) \n\n\n (cljs.build.api\/build \"src\" \n\n     {:main 'integrated.core \n\n      :output-to \"out\/main.js\" \n\n      :language-in :es6 \n\n      :foreign-libs [{:file \"src\" \n\n                      :module-type :es6}] \n\n      :optimizations :advanced \n\n      :verbose true}) \n\n If this is not how it's done, how do folks get es6 js to load as a foreign lib? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"IMHO :foreign-libs do too many things these days and its not clear what to use when or how. This feature is alpha so I expect that everything will be sorted out properly in the future. I fully expect the \"flaws\" to be addressed. :foreign-libs used to refer to \"foreign JS\" that was not processed in any way and just got prepended which was a great solution at the time and had a gigantic impact overall. It has some scaling issues but overall it works well. \n\n The biggest flaw I saw was related to mixing :foreign-libs and :npm-deps. One library may be using cljsjs.react (aka foreign lib) while a newer one maybe using \"react\" via :npm-deps. This would lead to a situation where you had 2 React instances in your page. Since everything also happens at the classpath level there was no proper way to \"configure\" it besides moving\/deleting your node_modules folder which I think is pretty odd. Again: this will probably be fixed. \n\n I didn't like some of the decisions that were made and decided to build something on my own to address the issues I saw in my own code\/project. YMMV. \n\n > The CLJS file is using JS and the JS file is using CLJS. 100% full interop. \n\n This is my goal and I'm close to achieving it. \n\n Cheers, \n \/thomas \n\n PS: Someone started some boot related work started recently: \n https:\/\/github.com\/jgdavey\/boot-shadow-cljs \n\n PPS: I wrote some posts about my motivations and the implementation details in case you are interested. \n https:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/09\/15\/js-dependencies-the-problem.html \n https:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/09\/15\/js-dependencies-going-forward.html \n https:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/11\/10\/js-dependencies-in-practice.html \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"Simple es6 JS file fails to compile as foreign lib kunal juliana \n I'm trying to compile a super simple es6 JS file as a foreign lib, as described in the clojurescript docs under Bundling \"Google Closure Compatible Code\": https:\/\/clojurescript.org\/reference\/dependencies#bundling-javascript-code The compilation succeeds with no optimizations. However, for the life of me I can't get it to compile with advanced optimizations. I just get a bunch of warnings, that say all the compiler phases were skipped. A lot of warnings like: \n\n\n WARNING: Skipping pass checkVariableReferences \n\n factory features: [block function, getters, string continuation, trailing comma, setters, ES3 keywor \n\n ds as identifiers, reserved words as properties, RegExp flag 'y', array pattern rest, binary literal, \n\n  let declaration, computed property, super, spread expression, RegExp flag 'u', default parameter, cl \n\n ass, arrow function, generator, template literal, for-of loop, member declaration, destructuring, oct \n\n al literal, const declaration, extended object literal, rest parameter, new.target, exponent operator \n\n  (**), trailing comma in param list, async function] The JS file looks like: \n\n\n goog.provide('js.lib'); \n\n\n js.lib.debugMessage = (x = \"any old string\") => { \n\n console.log(`Printing ${x} from cljs!`); \n\n }; \n\n\n The cljs file looks like: \n\n\n (ns integrated.core \n\n   (:require [js.lib :as lib])) \n\n\n (enable-console-print!) \n\n\n (lib\/debugMessage \"Narf\") \n\n\n and using the standalone cljs.jar, my build.clj file is: \n\n\n (require 'cljs.build.api) \n\n\n (cljs.build.api\/build \"src\" \n\n     {:main 'integrated.core \n\n      :output-to \"out\/main.js\" \n\n      :language-in :es6 \n\n      :foreign-libs [{:file \"src\" \n\n                      :module-type :es6}] \n\n      :optimizations :advanced \n\n      :verbose true}) \n\n If this is not how it's done, how do folks get es6 js to load as a foreign lib? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"The Closure Compiler is fully capable of this. It appears that something is broken, don't know what. In shadow-cljs [1] I handle JS dependencies quite differently so not only does this work there it is also much simpler (IMHO). \n\n I made a demo showcasing all of the JS interop here: \n https:\/\/github.com\/thheller\/shadow-cljs-examples\/tree\/master\/local-js \n\n You can clone it and run: \n npm install \n npx shadow-cljs watch app \n open http:\/\/localhost:9300 \n\n These two files are interesting: \n https:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/master\/local-js\/src\/demo\/app.cljs \n https:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/master\/local-js\/src\/demo\/foo.js \n\n The CLJS files is using JS and the JS file is using CLJS. 100% full interop. \n\n Note that the use of :default in the ns :require is not yet official [2]. \n The support for relative require (ie. \".\/foo\") was rejected and is \"never, ever going to happen.\" [3]. \n\n I consider this an experiment to explore alternatives to :foreign-libs as I think they are deeply flawed and should be abandoned. \n\n It works well in shadow-cljs but please don't use it in any library until there is something \"official\" to make all of this work. \n\n Cheers, \n \/thomas \n\n\n [1] https:\/\/github.com\/thheller\/shadow-cljs \n [2] https:\/\/dev.clojure.org\/jira\/browse\/CLJS-2376 \n [3] https:\/\/dev.clojure.org\/jira\/browse\/CLJS-2061?focusedCommentId=46191&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-46191 \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"How to make a cljs-node project install plews kash \n I have my first NodeJS clojurescript project, and it WFM (Works For Me). \n\n I\u2019ve run `lein cljsbuild once` and `node XXX` to run the script many times, though a few times I found `node_modules` was not populated, the after running builds again, it would miraculously re-appear. Now that my colleagues are trying to run the project, they are running into the same issue: an empty `node_modules` folder. \n\n What step am I missing? \n\n The project file has \n\n :target :nodejs \n :npm-deps {assorted deps here} \n :install-deps \n\n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"try this example without lein please https:\/\/github.com\/minimal-xyz\/minimal-shadow-cljs-nodejs ask in clojurians.slack.com\/messages\/shadow-cljs if you got any problems. \n\n On Wednesday, October 4, 2017 at 4:38:34 AM UTC+8, plews kash wrote: \n > \n > I have my first NodeJS clojurescript project, and it WFM (Works For Me). \n > \n > I\u2019ve run `lein cljsbuild once` and `node XXX` to run the script many > times, though a few times I found `node_modules` was not populated, the > after running builds again, it would miraculously re-appear. \n > \n > Now that my colleagues are trying to run the project, they are running > into the same issue: an empty `node_modules` folder. \n > \n > What step am I missing? \n > \n > The project file has \n > \n > :target :nodejs \n > :npm-deps {assorted deps here} \n > :install-deps \n > \n > \n > \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"},
{"prompt":"CLJS remote nodejs repl - can't get working tesi meginness \n I'm trying to get a this working following: https:\/\/github.com\/clojure\/clojurescript\/wiki\/Remote-REPL instructions but without piggiback, from within cursive - clojue.main in normal JVM process. The repl window hangs after: \n <scripts\/host-node is being invoked here with no arguments> \n ClojureScript Node.js REPL server listening on 58975 \n <hangs here> \n\n invoked clj from cursive is: \n (cljs.repl\/repl (cljs.repl.node\/repl-env :host \"vibrotub\") \n                 :node-command \"scripts\/host-node\" \n                 :output-dir \"share\/out\" \n                 ) \n\n I'm not sure how its supposed to work without extensive code analysis and I'm not very familiar with node so hoping for help. \n I've verified that scripts\/host-node can be called on the dev machine to call node on the host and invoke the compiled js from the shared dir, specified as an argument to the script. \n\n If I invoke node without arguments (as the repl init does) it just appears to hang; shouldn't an argument be passed to invoke something on the host? \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---","response":"Hi tesi \n have you succeeded to run remote REPL without modifications? \n\n It is a while I wrote the tutorial. However today I was able to run REPL to debian running inside VirtualBox from Emacs or Cursive with help of piggieback. I see potential issue in your code. :output-dir should be absolute and same on both machines (dev and remote). The reason for same absolute directory (and synchronization) is implementation of JS environment in CLJS. CLJS compiler spits out .js files. JS Environment (browser, node) requests these environment using http (browser) or by reading local files (node). In case of local files REPL instructs js environment where to get these files. In case of remote js environment (nodejs is executed on remote machine) we trick repl and node to think they run both on same machine and can \"exchange\" files in shared directory. I agree it is dirty hack:) The correct solution would be to make a way how nodejs can request compiled files from repl (in similar way browser requests files from web server running from repl). Unfortunately at this moment I do not have time to shave this yak. \n\n To help you to run REPL: \n\n 1) Check you have correct dir names for shared directory and they are absolute, eg \n\n :output-dir \"\/tmp\/cljs-share-repl\" \n\n see wiki page. I made few correction of directory names today. \n\n 2) Check \/tmp\/cljs-share-repl synchronization works \n\n - does cljs repl create compiled files inside \/tmp\/cljs-repl-share\/out? \n - are these files visible from remote machine? \n\n 2) If it does not work, please provide me some info about your configuration: \n\n - which versions of CLJ, CLJS, Lein, piggieback, node? \n - which OS you run on dev and remote machine? \n - how do you synchronize \/tmp\/cljs-repl-share? sshfs, samba, nfs? \n\n 3) some debugging tips: \n\n - check nodejs is running on remote machine and that it listens on some port (netstat, lsof) \n - try to snoop tcp\/ip communication using wireshark \n\n Crossing my fingers, \n Dan \n \n\n -- Note that posts from new members are moderated - please be patient with your first post. \n ---"}
]