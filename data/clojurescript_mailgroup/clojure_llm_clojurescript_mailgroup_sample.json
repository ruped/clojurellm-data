[
{"body":"rvdalen <rouan.van.da...@gmail.com> writes:\n> I am trying to get the most basic ClojureScript project up and running\n> on Windows (not in WSL).  \n>\n> I tried following the instructions on the Getting Started guide, but\n> ran into trouble.\n>\n> ...\n>\n> Can someone maybe explain how to get basic deps.edn to work without\n> using Leiningen? \nHi Rouan,\n\n  The deps.edn file is used by the Clojure Tools CLI (not Leiningen).\nYou will need to install that program first.\n\n  https:\/\/clojure.org\/guides\/install_clojure\n\nOnce it is available on your shell's search path, simply calling\n`clojure` with or without any arguments will read the deps.edn file and\ndownload any dependencies listed within its `:deps` map to the\n`.m2\/repository` directory in your home directory. These will be\nautomatically added to your classpath when running the application\nthrough `clojure`.\n\nGood luck and happy hacking!\n  Gary\n\n-- \nGPG Key ID: 7BC158ED\nUse `gpg --search-keys lambdatronic' to find me\nProtect yourself from surveillance: https:\/\/emailselfdefense.fsf.org\n=======================================================================\n()  ascii ribbon campaign - against html e-mail\n\/\\  www.asciiribbon.org   - against proprietary attachments\n\nWhy is HTML email a security nightmare? See https:\/\/useplaintext.email\/\n\nPlease avoid sending me MS-Office attachments.\nSee http:\/\/www.gnu.org\/philosophy\/no-word-attachments.html\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/87k06xk60x.fsf%40gmail.com.","subject":"Re: [ClojureScript] ClojureScript on Windows Gary Johnson Wed, 24 Aug 2022 08:36:43 -0700"},
{"body":"Hi everyone,\n\nI am trying to get the most basic ClojureScript project up and running on \nWindows (not in WSL).  \nI tried following the instructions on the Getting Started guide, but ran \ninto trouble.\n\nI could not download the cljs.jar file.  It seems the link in the guide is \nbroken.\nI had to scratch around to find the right cljs.jar file.  I downloaded the \n1.11.4 cljs version.\n\nAfter that I created the deps.edn file as described in the guide, and I run \nthe cljs project with the command:\n\njava -cp \"cljs.jar;src\/cljs;src\/clj\" cljs.main --compile mazes.core --repl\n\nThings are working at this point, but I am now trying to add a dependency \nto dumdom in the deps.edn file, but the dependency files are not downloaded \nautomatically.\n\nI can get it working by manually downloading the dumdom.jar file and \nchanging my run command to:\n\njava -cp \"cljs.jar;dumdom.jar;src\/cljs;src\/clj\" cljs.main --compile \nmazes.core --repl\n\nCan someone maybe explain how to get basic deps.edn to work without using \nLeiningen?\n\nI just want a super simple ClojureScript project for messing around in the \nbrowser.\n\nRegards\n--Rouan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/99c0f5f1-b1d9-47d8-9457-c1fb32e1920an%40googlegroups.com.","subject":"[ClojureScript] ClojureScript on Windows rvdalen Wed, 24 Aug 2022 07:40:39 -0700"},
{"body":"Hello everyone,\n\nI'm trying to implement a rudimentary feature-flagging system in CLJS, and \nas you might expect, I want to emit different code when a particular \nfeature is enabled VS disabled. So this is how I started:\n```\n(ns app.features\n(:require [clojure.string :as str])) \n(goog-define features \"\")\n\n(def CURRENT (into #{} (map keyword) (str\/split features #\",\"))) \n```\nI now want to define a simple macro like the following:\n```\n(defmacro with-feature  \n   [id enabled disabled]\n   (if (contains? app.features\/CURRENT id)\n     (when (some? enabled) `~enabled)\n     (when (some? disabled) `~disabled)))\n``` \nWhere do I put this macro so that the compiler doesn't complain that `\napp.features\/CURRENT` cannot be resolved? I know it has to be a .clj file, \nbut I am unable to require cljs namespaces from clj. I can make the whole \nthing work, if I emit the entire `if` expression from the macro (i.e. \nbacktick the `if` expression), but if possible I'd like to avoid doing that \ncheck at runtime, simply because everything I need to make the decision is \na compile-time constant. Here are two examples of how i want to call it \n(from various namespaces):\n```\n;; in this case enabling the feature adds code, so there is no `disabled` \nexpression\n(features\/with-feature :keycloak\n   (rf\/dispatch-sync [::keycloak.events\/connect  app.config\/keycloak])\n   nil)\n\n;; in this case disabling the feature adds code so there is no `enabled` \nexpression\n(features\/with-feature :keycloak\n   nil\n   (rf\/reg-event-fx ::sign-out-button-clicked\n      (fn [{:keys [db]} _]\n         (-> (auth-db\/get-session db)\n               (auth-api\/sign-out)))))\n\n```\nIs that at all possible? Any help whatsoever is greatly appreciated - many \nthanks in advance...\n\nDimitrios\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/a70f23dd-1447-4082-8c8b-e90929e3e98cn%40googlegroups.com.","subject":"[ClojureScript] macro woes Dimitrios Jim Piliouras Thu, 24 Feb 2022 08:28:39 -0800"},
{"body":"Hello,\n\nCurrently have a open position for Clojure script Engineer to work together \non a project. Any Interested candidates? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/5e6659e3-bbf4-4c96-8ae4-b8cd09fd6ae3n%40googlegroups.com.","subject":"[ClojureScript] Opening for a Clojurescript Position Abioye Boluwatife mary Thu, 24 Feb 2022 08:28:39 -0800"},
{"body":">  to me that implies that you can feed a javascript function with one \nparameter two parameters instead, and it doesn't complain at all. \nYup:\n\n$ node\nWelcome to Node.js v16.14.0.\nType \".help\" for more information.\n> function identity(x) { return x; }\nundefined\n> identity(123);\n123\n> identity(123, \"abc\");\n123\n> identity();\nundefined\n>\n\n\n--\nHenrik\n\n\n\nonsdag 19 januari 2022 kl. 21:50:09 UTC+1 skrev kovas....@gmail.com:\n\n> Hmm that makes sense.  I'm still surprised that this works without an \n> error though; to me that implies that you can feed a javascript function \n> with one parameter two parameters instead, and it doesn't complain at all.  \n> Otherwise there must be something weird going on in the CLJS logic?  If \n> this is true than IMO it is a bug.\n>\n> On Wed, Jan 19, 2022 at 10:25 AM Lauri Pesonen <lauri....@iki.fi> wrote:\n>\n>> Yes, you're right. I suspect it's because JS isn't strict about arity, so \n>> it would be difficult \/ affect perf to do arity checks in CLJS.\n>>\n>> Cheers,\n>> Lauri \n>>\n>> On Wed, 19 Jan 2022 at 17:32, Kovas Palunas <kovas....@gmail.com> wrote:\n>>\n>>> That's not true in cljs; the maps are just output unsorted without \n>>> errors.\n>>>\n>>> On Wed, Jan 19, 2022, 9:01 AM Lauri Pesonen <lauri....@iki.fi> wrote:\n>>>\n>>>> Kovas,\n>>>>\n>>>> I'm just an end-user like yourself so I can't say anything about adding \n>>>> a bug for this. But I don't really see what the language \/ core library \n>>>> could do differently: the exception already says \"wrong number of args (2) \n>>>> passed\".\n>>>>\n>>>> Cheers,\n>>>> Lauri \n>>>>\n>>>> On Wed, 19 Jan 2022 at 16:35, Kovas Palunas <kovas....@gmail.com> \n>>>> wrote:\n>>>>\n>>>>> Ohhhh, I was under the impression that the function was a key function \n>>>>> returning a value that would be sorted on place of the real value. \n>>>>> sorted-map-by(-key) is how I read it.\n>>>>>\n>>>>> Any chance we could make a bug to add this exception?  It would have \n>>>>> saved me a lot of time.\n>>>>>\n>>>>> On Wed, Jan 19, 2022, 8:27 AM Lauri Pesonen <lauri....@iki.fi> wrote:\n>>>>>\n>>>>>> Hi Kovas,\n>>>>>>\n>>>>>> When I run your code in a Clojure repl (as opposed to CLJS), I get an \n>>>>>> exception:\n>>>>>>\n>>>>>> clojure.lang.ArityException: Wrong number of args (2) passed to: \n>>>>>> app.core-test\/sort-map\/fn--24334\n>>>>>>\n>>>>>> And this is because you're the comparator that you pass to \n>>>>>> sorted-map-by is a 1-arity function: #(if (= % :input) \"aaaaa\" (name %)))\n>>>>>>\n>>>>>> The comparator will be called with two map entries as arguments so \n>>>>>> that the comparator can decide which one of them should be first, so \n>>>>>> your \n>>>>>> comparator function should do something with %1 and %2. But I can't \n>>>>>> really \n>>>>>> tell from the code what you're trying to do, so I'm not sure what the \n>>>>>> comparator should look like.\n>>>>>>\n>>>>>> Cheers,\n>>>>>> Lauri\n>>>>>>\n>>>>>> On Tue, 18 Jan 2022 at 14:15, Kovas Palunas <kovas....@gmail.com> \n>>>>>> wrote:\n>>>>>>\n>>>>>>> Hey all,\n>>>>>>>\n>>>>>>> I think I've found a bug in `sorted-map-by`, as shown by the below \n>>>>>>> code:\n>>>>>>>\n>>>>>>> ```\n>>>>>>> (ns app.core-test\n>>>>>>>   (:require\n>>>>>>>    [cljs.test :refer (deftest is)]\n>>>>>>>    [clojure.string :as st]))\n>>>>>>>\n>>>>>>> (prn *clojurescript-version*)  ;; \"1.10.914\"\n>>>>>>>\n>>>>>>> (defn single-row [result-row]\n>>>>>>>   {:input (:input result-row)\n>>>>>>>    (keyword (st\/join [(name (:biomarker result-row)) \n>>>>>>> \"-datapoints\"])) (:datapoints result-row)})\n>>>>>>>\n>>>>>>> (defn sort-map [m]\n>>>>>>>   ; Sort row so that :input is first, then put this rest in \n>>>>>>> alphabetical order\n>>>>>>>   (into (sorted-map-by #(if (= % :input) \"aaaaa\" (name %))) m))\n>>>>>>>\n>>>>>>> (defn get-per-input-row [same-input-results]\n>>>>>>>   ; Calling sort-map twice here resolves the problem.\n>>>>>>>   (sort-map (reduce merge (map single-row same-input-results))))\n>>>>>>>\n>>>>>>> (defn make-per-input-results\n>>>>>>>   [results]\n>>>>>>>   (let [rows-by-input (group-by :input results)]\n>>>>>>>     (map get-per-input-row (vals rows-by-input))))\n>>>>>>>\n>>>>>>> (deftest test-bad-map-sorting\n>>>>>>>   (is (= '({:input 1 :a-datapoints 5}\n>>>>>>>            {:input 2 :a-datapoints 5}\n>>>>>>>            {:input 3 :b-datapoints 5}\n>>>>>>>            {:input 4 :b-datapoints 5})\n>>>>>>>          (make-per-input-results\n>>>>>>>           [{:input 1 :biomarker :a :datapoints 5}\n>>>>>>>            {:input 2 :biomarker :a :datapoints 5}\n>>>>>>>            {:input 3 :biomarker :b :datapoints 5}\n>>>>>>>            {:input 4 :biomarker :b :datapoints 5}]))))\n>>>>>>> ```\n>>>>>>>\n>>>>>>> The testcase fails, when I would expect it to succeed.  I tried \n>>>>>>> posting this on the cljs JIRA as a bug, but I don't have permission, so \n>>>>>>> I \n>>>>>>> thought I'd post it here instead.  Anyone want to try reproducing this \n>>>>>>> and \n>>>>>>> posting on the JIRA if you can reproduce it?\n>>>>>>>\n>>>>>>>  - Kovas\n>>>>>>>\n>>>>>>> -- \n>>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>>> with your first post.\n>>>>>>> --- \n>>>>>>> You received this message because you are subscribed to the Google \n>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>> To view this discussion on the web visit \n>>>>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com\n>>>>>>>  \n>>>>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com?utm_medium=email&utm_source=footer>\n>>>>>>> .\n>>>>>>>\n>>>>>> -- \n>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>> with your first post.\n>>>>>> --- \n>>>>>> You received this message because you are subscribed to a topic in \n>>>>>> the Google Groups \"ClojureScript\" group.\n>>>>>> To unsubscribe from this topic, visit \n>>>>>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe\n>>>>>> .\n>>>>>> To unsubscribe from this group and all its topics, send an email to \n>>>>>> clojurescrip...@googlegroups.com.\n>>>>>> To view this discussion on the web visit \n>>>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com\n>>>>>>  \n>>>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>>>>>> .\n>>>>>>\n>>>>> -- \n>>>>> Note that posts from new members are moderated - please be patient \n>>>>> with your first post.\n>>>>> --- \n>>>>> You received this message because you are subscribed to the Google \n>>>>> Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this group and stop receiving emails from it, send \n>>>>> an email to clojurescrip...@googlegroups.com.\n>>>>> To view this discussion on the web visit \n>>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com\n>>>>>  \n>>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>>>>> .\n>>>>>\n>>>> -- \n>>>> Note that posts from new members are moderated - please be patient with \n>>>> your first post.\n>>>> --- \n>>>> You received this message because you are subscribed to a topic in the \n>>>> Google Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this topic, visit \n>>>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe\n>>>> .\n>>>> To unsubscribe from this group and all its topics, send an email to \n>>>> clojurescrip...@googlegroups.com.\n>>>> To view this discussion on the web visit \n>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0v1dRNfOKnndPSfGGM%2Bs6kcz509_HO%2B8eiU9yqfYbCL4A%40mail.gmail.com\n>>>>  \n>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0v1dRNfOKnndPSfGGM%2Bs6kcz509_HO%2B8eiU9yqfYbCL4A%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>>>> .\n>>>>\n>>> -- \n>>> Note that posts from new members are moderated - please be patient with \n>>> your first post.\n>>> --- \n>>> You received this message because you are subscribed to the Google \n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send \n>>> an email to clojurescrip...@googlegroups.com.\n>>> To view this discussion on the web visit \n>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DcE7nd3KFq7zr3L3Trjud0Cyts%2BgK4M_cVW-YRTRhqMaA%40mail.gmail.com\n>>>  \n>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DcE7nd3KFq7zr3L3Trjud0Cyts%2BgK4M_cVW-YRTRhqMaA%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>>> .\n>>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to a topic in the \n>> Google Groups \"ClojureScript\" group.\n>> To unsubscribe from this topic, visit \n>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe.\n>> To unsubscribe from this group and all its topics, send an email to \n>> clojurescrip...@googlegroups.com.\n>>\n> To view this discussion on the web visit \n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0udiw4g8pkVkvQEVcDFhwJtt7yG5hQaA6486d2SFZDJ%3DQ%40mail.gmail.com\n>>  \n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0udiw4g8pkVkvQEVcDFhwJtt7yG5hQaA6486d2SFZDJ%3DQ%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/9a58cff5-6548-4641-be5a-dd9e2d9d97f5n%40googlegroups.com.","subject":"Re: [ClojureScript] sorted-map-by bug Henrik Lundahl Thu, 17 Feb 2022 00:23:36 -0800"},
{"body":"Hmm that makes sense.  I'm still surprised that this works without an error\nthough; to me that implies that you can feed a javascript function with one\nparameter two parameters instead, and it doesn't complain at all.\nOtherwise there must be something weird going on in the CLJS logic?  If\nthis is true than IMO it is a bug. \nOn Wed, Jan 19, 2022 at 10:25 AM Lauri Pesonen <lauri.peso...@iki.fi> wrote:\n\n> Yes, you're right. I suspect it's because JS isn't strict about arity, so\n> it would be difficult \/ affect perf to do arity checks in CLJS.\n>\n> Cheers,\n> Lauri\n>\n> On Wed, 19 Jan 2022 at 17:32, Kovas Palunas <kovas.palu...@gmail.com>\n> wrote:\n>\n>> That's not true in cljs; the maps are just output unsorted without errors.\n>>\n>> On Wed, Jan 19, 2022, 9:01 AM Lauri Pesonen <lauri.peso...@iki.fi> wrote:\n>>\n>>> Kovas,\n>>>\n>>> I'm just an end-user like yourself so I can't say anything about adding\n>>> a bug for this. But I don't really see what the language \/ core library\n>>> could do differently: the exception already says \"wrong number of args (2)\n>>> passed\".\n>>>\n>>> Cheers,\n>>> Lauri\n>>>\n>>> On Wed, 19 Jan 2022 at 16:35, Kovas Palunas <kovas.palu...@gmail.com>\n>>> wrote:\n>>>\n>>>> Ohhhh, I was under the impression that the function was a key function\n>>>> returning a value that would be sorted on place of the real value.\n>>>> sorted-map-by(-key) is how I read it.\n>>>>\n>>>> Any chance we could make a bug to add this exception?  It would have\n>>>> saved me a lot of time.\n>>>>\n>>>> On Wed, Jan 19, 2022, 8:27 AM Lauri Pesonen <lauri.peso...@iki.fi>\n>>>> wrote:\n>>>>\n>>>>> Hi Kovas,\n>>>>>\n>>>>> When I run your code in a Clojure repl (as opposed to CLJS), I get an\n>>>>> exception:\n>>>>>\n>>>>> clojure.lang.ArityException: Wrong number of args (2) passed to:\n>>>>> app.core-test\/sort-map\/fn--24334\n>>>>>\n>>>>> And this is because you're the comparator that you pass to\n>>>>> sorted-map-by is a 1-arity function: #(if (= % :input) \"aaaaa\" (name %)))\n>>>>>\n>>>>> The comparator will be called with two map entries as arguments so\n>>>>> that the comparator can decide which one of them should be first, so your\n>>>>> comparator function should do something with %1 and %2. But I can't really\n>>>>> tell from the code what you're trying to do, so I'm not sure what the\n>>>>> comparator should look like.\n>>>>>\n>>>>> Cheers,\n>>>>> Lauri\n>>>>>\n>>>>> On Tue, 18 Jan 2022 at 14:15, Kovas Palunas <kovas.palu...@gmail.com>\n>>>>> wrote:\n>>>>>\n>>>>>> Hey all,\n>>>>>>\n>>>>>> I think I've found a bug in `sorted-map-by`, as shown by the below\n>>>>>> code:\n>>>>>>\n>>>>>> ```\n>>>>>> (ns app.core-test\n>>>>>>   (:require\n>>>>>>    [cljs.test :refer (deftest is)]\n>>>>>>    [clojure.string :as st]))\n>>>>>>\n>>>>>> (prn *clojurescript-version*)  ;; \"1.10.914\"\n>>>>>>\n>>>>>> (defn single-row [result-row]\n>>>>>>   {:input (:input result-row)\n>>>>>>    (keyword (st\/join [(name (:biomarker result-row)) \"-datapoints\"]))\n>>>>>> (:datapoints result-row)})\n>>>>>>\n>>>>>> (defn sort-map [m]\n>>>>>>   ; Sort row so that :input is first, then put this rest in\n>>>>>> alphabetical order\n>>>>>>   (into (sorted-map-by #(if (= % :input) \"aaaaa\" (name %))) m))\n>>>>>>\n>>>>>> (defn get-per-input-row [same-input-results]\n>>>>>>   ; Calling sort-map twice here resolves the problem.\n>>>>>>   (sort-map (reduce merge (map single-row same-input-results))))\n>>>>>>\n>>>>>> (defn make-per-input-results\n>>>>>>   [results]\n>>>>>>   (let [rows-by-input (group-by :input results)]\n>>>>>>     (map get-per-input-row (vals rows-by-input))))\n>>>>>>\n>>>>>> (deftest test-bad-map-sorting\n>>>>>>   (is (= '({:input 1 :a-datapoints 5}\n>>>>>>            {:input 2 :a-datapoints 5}\n>>>>>>            {:input 3 :b-datapoints 5}\n>>>>>>            {:input 4 :b-datapoints 5})\n>>>>>>          (make-per-input-results\n>>>>>>           [{:input 1 :biomarker :a :datapoints 5}\n>>>>>>            {:input 2 :biomarker :a :datapoints 5}\n>>>>>>            {:input 3 :biomarker :b :datapoints 5}\n>>>>>>            {:input 4 :biomarker :b :datapoints 5}]))))\n>>>>>> ```\n>>>>>>\n>>>>>> The testcase fails, when I would expect it to succeed.  I tried\n>>>>>> posting this on the cljs JIRA as a bug, but I don't have permission, so I\n>>>>>> thought I'd post it here instead.  Anyone want to try reproducing this \n>>>>>> and\n>>>>>> posting on the JIRA if you can reproduce it?\n>>>>>>\n>>>>>>  - Kovas\n>>>>>>\n>>>>>> --\n>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>> with your first post.\n>>>>>> ---\n>>>>>> You received this message because you are subscribed to the Google\n>>>>>> Groups \"ClojureScript\" group.\n>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>> send an email to clojurescript+unsubscr...@googlegroups.com.\n>>>>>> To view this discussion on the web visit\n>>>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com\n>>>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com?utm_medium=email&utm_source=footer>\n>>>>>> .\n>>>>>>\n>>>>> --\n>>>>> Note that posts from new members are moderated - please be patient\n>>>>> with your first post.\n>>>>> ---\n>>>>> You received this message because you are subscribed to a topic in the\n>>>>> Google Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this topic, visit\n>>>>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe\n>>>>> .\n>>>>> To unsubscribe from this group and all its topics, send an email to\n>>>>> clojurescript+unsubscr...@googlegroups.com.\n>>>>> To view this discussion on the web visit\n>>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com\n>>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>>>>> .\n>>>>>\n>>>> --\n>>>> Note that posts from new members are moderated - please be patient with\n>>>> your first post.\n>>>> ---\n>>>> You received this message because you are subscribed to the Google\n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>>> To view this discussion on the web visit\n>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com\n>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>>>> .\n>>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to a topic in the\n>>> Google Groups \"ClojureScript\" group.\n>>> To unsubscribe from this topic, visit\n>>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe.\n>>> To unsubscribe from this group and all its topics, send an email to\n>>> clojurescript+unsubscr...@googlegroups.com.\n>>> To view this discussion on the web visit\n>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0v1dRNfOKnndPSfGGM%2Bs6kcz509_HO%2B8eiU9yqfYbCL4A%40mail.gmail.com\n>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0v1dRNfOKnndPSfGGM%2Bs6kcz509_HO%2B8eiU9yqfYbCL4A%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>>> .\n>>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To view this discussion on the web visit\n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DcE7nd3KFq7zr3L3Trjud0Cyts%2BgK4M_cVW-YRTRhqMaA%40mail.gmail.com\n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DcE7nd3KFq7zr3L3Trjud0Cyts%2BgK4M_cVW-YRTRhqMaA%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0udiw4g8pkVkvQEVcDFhwJtt7yG5hQaA6486d2SFZDJ%3DQ%40mail.gmail.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0udiw4g8pkVkvQEVcDFhwJtt7yG5hQaA6486d2SFZDJ%3DQ%40mail.gmail.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdeBgc3uqWRajqJ9HiFpNExi98oFHuZ%3DOnOb6DGqujA7Q%40mail.gmail.com.","subject":"Re: [ClojureScript] sorted-map-by bug Kovas Palunas Wed, 19 Jan 2022 12:50:12 -0800"},
{"body":"Yes, you're right. I suspect it's because JS isn't strict about arity, so\nit would be difficult \/ affect perf to do arity checks in CLJS. \nCheers,\nLauri\n\nOn Wed, 19 Jan 2022 at 17:32, Kovas Palunas <kovas.palu...@gmail.com> wrote:\n\n> That's not true in cljs; the maps are just output unsorted without errors.\n>\n> On Wed, Jan 19, 2022, 9:01 AM Lauri Pesonen <lauri.peso...@iki.fi> wrote:\n>\n>> Kovas,\n>>\n>> I'm just an end-user like yourself so I can't say anything about adding a\n>> bug for this. But I don't really see what the language \/ core library could\n>> do differently: the exception already says \"wrong number of args (2)\n>> passed\".\n>>\n>> Cheers,\n>> Lauri\n>>\n>> On Wed, 19 Jan 2022 at 16:35, Kovas Palunas <kovas.palu...@gmail.com>\n>> wrote:\n>>\n>>> Ohhhh, I was under the impression that the function was a key function\n>>> returning a value that would be sorted on place of the real value.\n>>> sorted-map-by(-key) is how I read it.\n>>>\n>>> Any chance we could make a bug to add this exception?  It would have\n>>> saved me a lot of time.\n>>>\n>>> On Wed, Jan 19, 2022, 8:27 AM Lauri Pesonen <lauri.peso...@iki.fi>\n>>> wrote:\n>>>\n>>>> Hi Kovas,\n>>>>\n>>>> When I run your code in a Clojure repl (as opposed to CLJS), I get an\n>>>> exception:\n>>>>\n>>>> clojure.lang.ArityException: Wrong number of args (2) passed to:\n>>>> app.core-test\/sort-map\/fn--24334\n>>>>\n>>>> And this is because you're the comparator that you pass to\n>>>> sorted-map-by is a 1-arity function: #(if (= % :input) \"aaaaa\" (name %)))\n>>>>\n>>>> The comparator will be called with two map entries as arguments so that\n>>>> the comparator can decide which one of them should be first, so your\n>>>> comparator function should do something with %1 and %2. But I can't really\n>>>> tell from the code what you're trying to do, so I'm not sure what the\n>>>> comparator should look like.\n>>>>\n>>>> Cheers,\n>>>> Lauri\n>>>>\n>>>> On Tue, 18 Jan 2022 at 14:15, Kovas Palunas <kovas.palu...@gmail.com>\n>>>> wrote:\n>>>>\n>>>>> Hey all,\n>>>>>\n>>>>> I think I've found a bug in `sorted-map-by`, as shown by the below\n>>>>> code:\n>>>>>\n>>>>> ```\n>>>>> (ns app.core-test\n>>>>>   (:require\n>>>>>    [cljs.test :refer (deftest is)]\n>>>>>    [clojure.string :as st]))\n>>>>>\n>>>>> (prn *clojurescript-version*)  ;; \"1.10.914\"\n>>>>>\n>>>>> (defn single-row [result-row]\n>>>>>   {:input (:input result-row)\n>>>>>    (keyword (st\/join [(name (:biomarker result-row)) \"-datapoints\"]))\n>>>>> (:datapoints result-row)})\n>>>>>\n>>>>> (defn sort-map [m]\n>>>>>   ; Sort row so that :input is first, then put this rest in\n>>>>> alphabetical order\n>>>>>   (into (sorted-map-by #(if (= % :input) \"aaaaa\" (name %))) m))\n>>>>>\n>>>>> (defn get-per-input-row [same-input-results]\n>>>>>   ; Calling sort-map twice here resolves the problem.\n>>>>>   (sort-map (reduce merge (map single-row same-input-results))))\n>>>>>\n>>>>> (defn make-per-input-results\n>>>>>   [results]\n>>>>>   (let [rows-by-input (group-by :input results)]\n>>>>>     (map get-per-input-row (vals rows-by-input))))\n>>>>>\n>>>>> (deftest test-bad-map-sorting\n>>>>>   (is (= '({:input 1 :a-datapoints 5}\n>>>>>            {:input 2 :a-datapoints 5}\n>>>>>            {:input 3 :b-datapoints 5}\n>>>>>            {:input 4 :b-datapoints 5})\n>>>>>          (make-per-input-results\n>>>>>           [{:input 1 :biomarker :a :datapoints 5}\n>>>>>            {:input 2 :biomarker :a :datapoints 5}\n>>>>>            {:input 3 :biomarker :b :datapoints 5}\n>>>>>            {:input 4 :biomarker :b :datapoints 5}]))))\n>>>>> ```\n>>>>>\n>>>>> The testcase fails, when I would expect it to succeed.  I tried\n>>>>> posting this on the cljs JIRA as a bug, but I don't have permission, so I\n>>>>> thought I'd post it here instead.  Anyone want to try reproducing this and\n>>>>> posting on the JIRA if you can reproduce it?\n>>>>>\n>>>>>  - Kovas\n>>>>>\n>>>>> --\n>>>>> Note that posts from new members are moderated - please be patient\n>>>>> with your first post.\n>>>>> ---\n>>>>> You received this message because you are subscribed to the Google\n>>>>> Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>>>> To view this discussion on the web visit\n>>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com\n>>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com?utm_medium=email&utm_source=footer>\n>>>>> .\n>>>>>\n>>>> --\n>>>> Note that posts from new members are moderated - please be patient with\n>>>> your first post.\n>>>> ---\n>>>> You received this message because you are subscribed to a topic in the\n>>>> Google Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this topic, visit\n>>>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe\n>>>> .\n>>>> To unsubscribe from this group and all its topics, send an email to\n>>>> clojurescript+unsubscr...@googlegroups.com.\n>>>> To view this discussion on the web visit\n>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com\n>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>>>> .\n>>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>> To view this discussion on the web visit\n>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com\n>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>>> .\n>>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to a topic in the\n>> Google Groups \"ClojureScript\" group.\n>> To unsubscribe from this topic, visit\n>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe.\n>> To unsubscribe from this group and all its topics, send an email to\n>> clojurescript+unsubscr...@googlegroups.com.\n>> To view this discussion on the web visit\n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0v1dRNfOKnndPSfGGM%2Bs6kcz509_HO%2B8eiU9yqfYbCL4A%40mail.gmail.com\n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0v1dRNfOKnndPSfGGM%2Bs6kcz509_HO%2B8eiU9yqfYbCL4A%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DcE7nd3KFq7zr3L3Trjud0Cyts%2BgK4M_cVW-YRTRhqMaA%40mail.gmail.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DcE7nd3KFq7zr3L3Trjud0Cyts%2BgK4M_cVW-YRTRhqMaA%40mail.gmail.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0udiw4g8pkVkvQEVcDFhwJtt7yG5hQaA6486d2SFZDJ%3DQ%40mail.gmail.com.","subject":"Re: [ClojureScript] sorted-map-by bug Lauri Pesonen Wed, 19 Jan 2022 10:25:35 -0800"},
{"body":"That's not true in cljs; the maps are just output unsorted without errors.\n\nOn Wed, Jan 19, 2022, 9:01 AM Lauri Pesonen <lauri.peso...@iki.fi> wrote: \n> Kovas,\n>\n> I'm just an end-user like yourself so I can't say anything about adding a\n> bug for this. But I don't really see what the language \/ core library could\n> do differently: the exception already says \"wrong number of args (2)\n> passed\".\n>\n> Cheers,\n> Lauri\n>\n> On Wed, 19 Jan 2022 at 16:35, Kovas Palunas <kovas.palu...@gmail.com>\n> wrote:\n>\n>> Ohhhh, I was under the impression that the function was a key function\n>> returning a value that would be sorted on place of the real value.\n>> sorted-map-by(-key) is how I read it.\n>>\n>> Any chance we could make a bug to add this exception?  It would have\n>> saved me a lot of time.\n>>\n>> On Wed, Jan 19, 2022, 8:27 AM Lauri Pesonen <lauri.peso...@iki.fi> wrote:\n>>\n>>> Hi Kovas,\n>>>\n>>> When I run your code in a Clojure repl (as opposed to CLJS), I get an\n>>> exception:\n>>>\n>>> clojure.lang.ArityException: Wrong number of args (2) passed to:\n>>> app.core-test\/sort-map\/fn--24334\n>>>\n>>> And this is because you're the comparator that you pass to sorted-map-by\n>>> is a 1-arity function: #(if (= % :input) \"aaaaa\" (name %)))\n>>>\n>>> The comparator will be called with two map entries as arguments so that\n>>> the comparator can decide which one of them should be first, so your\n>>> comparator function should do something with %1 and %2. But I can't really\n>>> tell from the code what you're trying to do, so I'm not sure what the\n>>> comparator should look like.\n>>>\n>>> Cheers,\n>>> Lauri\n>>>\n>>> On Tue, 18 Jan 2022 at 14:15, Kovas Palunas <kovas.palu...@gmail.com>\n>>> wrote:\n>>>\n>>>> Hey all,\n>>>>\n>>>> I think I've found a bug in `sorted-map-by`, as shown by the below code:\n>>>>\n>>>> ```\n>>>> (ns app.core-test\n>>>>   (:require\n>>>>    [cljs.test :refer (deftest is)]\n>>>>    [clojure.string :as st]))\n>>>>\n>>>> (prn *clojurescript-version*)  ;; \"1.10.914\"\n>>>>\n>>>> (defn single-row [result-row]\n>>>>   {:input (:input result-row)\n>>>>    (keyword (st\/join [(name (:biomarker result-row)) \"-datapoints\"]))\n>>>> (:datapoints result-row)})\n>>>>\n>>>> (defn sort-map [m]\n>>>>   ; Sort row so that :input is first, then put this rest in\n>>>> alphabetical order\n>>>>   (into (sorted-map-by #(if (= % :input) \"aaaaa\" (name %))) m))\n>>>>\n>>>> (defn get-per-input-row [same-input-results]\n>>>>   ; Calling sort-map twice here resolves the problem.\n>>>>   (sort-map (reduce merge (map single-row same-input-results))))\n>>>>\n>>>> (defn make-per-input-results\n>>>>   [results]\n>>>>   (let [rows-by-input (group-by :input results)]\n>>>>     (map get-per-input-row (vals rows-by-input))))\n>>>>\n>>>> (deftest test-bad-map-sorting\n>>>>   (is (= '({:input 1 :a-datapoints 5}\n>>>>            {:input 2 :a-datapoints 5}\n>>>>            {:input 3 :b-datapoints 5}\n>>>>            {:input 4 :b-datapoints 5})\n>>>>          (make-per-input-results\n>>>>           [{:input 1 :biomarker :a :datapoints 5}\n>>>>            {:input 2 :biomarker :a :datapoints 5}\n>>>>            {:input 3 :biomarker :b :datapoints 5}\n>>>>            {:input 4 :biomarker :b :datapoints 5}]))))\n>>>> ```\n>>>>\n>>>> The testcase fails, when I would expect it to succeed.  I tried posting\n>>>> this on the cljs JIRA as a bug, but I don't have permission, so I thought\n>>>> I'd post it here instead.  Anyone want to try reproducing this and posting\n>>>> on the JIRA if you can reproduce it?\n>>>>\n>>>>  - Kovas\n>>>>\n>>>> --\n>>>> Note that posts from new members are moderated - please be patient with\n>>>> your first post.\n>>>> ---\n>>>> You received this message because you are subscribed to the Google\n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>>> To view this discussion on the web visit\n>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com\n>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com?utm_medium=email&utm_source=footer>\n>>>> .\n>>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to a topic in the\n>>> Google Groups \"ClojureScript\" group.\n>>> To unsubscribe from this topic, visit\n>>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe.\n>>> To unsubscribe from this group and all its topics, send an email to\n>>> clojurescript+unsubscr...@googlegroups.com.\n>>> To view this discussion on the web visit\n>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com\n>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>>> .\n>>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To view this discussion on the web visit\n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com\n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0v1dRNfOKnndPSfGGM%2Bs6kcz509_HO%2B8eiU9yqfYbCL4A%40mail.gmail.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0v1dRNfOKnndPSfGGM%2Bs6kcz509_HO%2B8eiU9yqfYbCL4A%40mail.gmail.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DcE7nd3KFq7zr3L3Trjud0Cyts%2BgK4M_cVW-YRTRhqMaA%40mail.gmail.com.","subject":"Re: [ClojureScript] sorted-map-by bug Kovas Palunas Wed, 19 Jan 2022 09:32:07 -0800"},
{"body":"Kovas,\n\nI'm just an end-user like yourself so I can't say anything about adding a\nbug for this. But I don't really see what the language \/ core library could\ndo differently: the exception already says \"wrong number of args (2)\npassed\". \nCheers,\nLauri\n\nOn Wed, 19 Jan 2022 at 16:35, Kovas Palunas <kovas.palu...@gmail.com> wrote:\n\n> Ohhhh, I was under the impression that the function was a key function\n> returning a value that would be sorted on place of the real value.\n> sorted-map-by(-key) is how I read it.\n>\n> Any chance we could make a bug to add this exception?  It would have saved\n> me a lot of time.\n>\n> On Wed, Jan 19, 2022, 8:27 AM Lauri Pesonen <lauri.peso...@iki.fi> wrote:\n>\n>> Hi Kovas,\n>>\n>> When I run your code in a Clojure repl (as opposed to CLJS), I get an\n>> exception:\n>>\n>> clojure.lang.ArityException: Wrong number of args (2) passed to:\n>> app.core-test\/sort-map\/fn--24334\n>>\n>> And this is because you're the comparator that you pass to sorted-map-by\n>> is a 1-arity function: #(if (= % :input) \"aaaaa\" (name %)))\n>>\n>> The comparator will be called with two map entries as arguments so that\n>> the comparator can decide which one of them should be first, so your\n>> comparator function should do something with %1 and %2. But I can't really\n>> tell from the code what you're trying to do, so I'm not sure what the\n>> comparator should look like.\n>>\n>> Cheers,\n>> Lauri\n>>\n>> On Tue, 18 Jan 2022 at 14:15, Kovas Palunas <kovas.palu...@gmail.com>\n>> wrote:\n>>\n>>> Hey all,\n>>>\n>>> I think I've found a bug in `sorted-map-by`, as shown by the below code:\n>>>\n>>> ```\n>>> (ns app.core-test\n>>>   (:require\n>>>    [cljs.test :refer (deftest is)]\n>>>    [clojure.string :as st]))\n>>>\n>>> (prn *clojurescript-version*)  ;; \"1.10.914\"\n>>>\n>>> (defn single-row [result-row]\n>>>   {:input (:input result-row)\n>>>    (keyword (st\/join [(name (:biomarker result-row)) \"-datapoints\"]))\n>>> (:datapoints result-row)})\n>>>\n>>> (defn sort-map [m]\n>>>   ; Sort row so that :input is first, then put this rest in alphabetical\n>>> order\n>>>   (into (sorted-map-by #(if (= % :input) \"aaaaa\" (name %))) m))\n>>>\n>>> (defn get-per-input-row [same-input-results]\n>>>   ; Calling sort-map twice here resolves the problem.\n>>>   (sort-map (reduce merge (map single-row same-input-results))))\n>>>\n>>> (defn make-per-input-results\n>>>   [results]\n>>>   (let [rows-by-input (group-by :input results)]\n>>>     (map get-per-input-row (vals rows-by-input))))\n>>>\n>>> (deftest test-bad-map-sorting\n>>>   (is (= '({:input 1 :a-datapoints 5}\n>>>            {:input 2 :a-datapoints 5}\n>>>            {:input 3 :b-datapoints 5}\n>>>            {:input 4 :b-datapoints 5})\n>>>          (make-per-input-results\n>>>           [{:input 1 :biomarker :a :datapoints 5}\n>>>            {:input 2 :biomarker :a :datapoints 5}\n>>>            {:input 3 :biomarker :b :datapoints 5}\n>>>            {:input 4 :biomarker :b :datapoints 5}]))))\n>>> ```\n>>>\n>>> The testcase fails, when I would expect it to succeed.  I tried posting\n>>> this on the cljs JIRA as a bug, but I don't have permission, so I thought\n>>> I'd post it here instead.  Anyone want to try reproducing this and posting\n>>> on the JIRA if you can reproduce it?\n>>>\n>>>  - Kovas\n>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>> To view this discussion on the web visit\n>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com\n>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com?utm_medium=email&utm_source=footer>\n>>> .\n>>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to a topic in the\n>> Google Groups \"ClojureScript\" group.\n>> To unsubscribe from this topic, visit\n>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe.\n>> To unsubscribe from this group and all its topics, send an email to\n>> clojurescript+unsubscr...@googlegroups.com.\n>> To view this discussion on the web visit\n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com\n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0v1dRNfOKnndPSfGGM%2Bs6kcz509_HO%2B8eiU9yqfYbCL4A%40mail.gmail.com.","subject":"Re: [ClojureScript] sorted-map-by bug Lauri Pesonen Wed, 19 Jan 2022 09:01:13 -0800"},
{"body":"Ohhhh, I was under the impression that the function was a key function\nreturning a value that would be sorted on place of the real value.\nsorted-map-by(-key) is how I read it. \nAny chance we could make a bug to add this exception?  It would have saved\nme a lot of time.\n\nOn Wed, Jan 19, 2022, 8:27 AM Lauri Pesonen <lauri.peso...@iki.fi> wrote:\n\n> Hi Kovas,\n>\n> When I run your code in a Clojure repl (as opposed to CLJS), I get an\n> exception:\n>\n> clojure.lang.ArityException: Wrong number of args (2) passed to:\n> app.core-test\/sort-map\/fn--24334\n>\n> And this is because you're the comparator that you pass to sorted-map-by\n> is a 1-arity function: #(if (= % :input) \"aaaaa\" (name %)))\n>\n> The comparator will be called with two map entries as arguments so that\n> the comparator can decide which one of them should be first, so your\n> comparator function should do something with %1 and %2. But I can't really\n> tell from the code what you're trying to do, so I'm not sure what the\n> comparator should look like.\n>\n> Cheers,\n> Lauri\n>\n> On Tue, 18 Jan 2022 at 14:15, Kovas Palunas <kovas.palu...@gmail.com>\n> wrote:\n>\n>> Hey all,\n>>\n>> I think I've found a bug in `sorted-map-by`, as shown by the below code:\n>>\n>> ```\n>> (ns app.core-test\n>>   (:require\n>>    [cljs.test :refer (deftest is)]\n>>    [clojure.string :as st]))\n>>\n>> (prn *clojurescript-version*)  ;; \"1.10.914\"\n>>\n>> (defn single-row [result-row]\n>>   {:input (:input result-row)\n>>    (keyword (st\/join [(name (:biomarker result-row)) \"-datapoints\"]))\n>> (:datapoints result-row)})\n>>\n>> (defn sort-map [m]\n>>   ; Sort row so that :input is first, then put this rest in alphabetical\n>> order\n>>   (into (sorted-map-by #(if (= % :input) \"aaaaa\" (name %))) m))\n>>\n>> (defn get-per-input-row [same-input-results]\n>>   ; Calling sort-map twice here resolves the problem.\n>>   (sort-map (reduce merge (map single-row same-input-results))))\n>>\n>> (defn make-per-input-results\n>>   [results]\n>>   (let [rows-by-input (group-by :input results)]\n>>     (map get-per-input-row (vals rows-by-input))))\n>>\n>> (deftest test-bad-map-sorting\n>>   (is (= '({:input 1 :a-datapoints 5}\n>>            {:input 2 :a-datapoints 5}\n>>            {:input 3 :b-datapoints 5}\n>>            {:input 4 :b-datapoints 5})\n>>          (make-per-input-results\n>>           [{:input 1 :biomarker :a :datapoints 5}\n>>            {:input 2 :biomarker :a :datapoints 5}\n>>            {:input 3 :biomarker :b :datapoints 5}\n>>            {:input 4 :biomarker :b :datapoints 5}]))))\n>> ```\n>>\n>> The testcase fails, when I would expect it to succeed.  I tried posting\n>> this on the cljs JIRA as a bug, but I don't have permission, so I thought\n>> I'd post it here instead.  Anyone want to try reproducing this and posting\n>> on the JIRA if you can reproduce it?\n>>\n>>  - Kovas\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To view this discussion on the web visit\n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com\n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/0-SJ0zmVX6c\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPzck%3DdBhpRrkTT65myd4vh8_X4jkoKXWeoXMt%3DKq4hMdPg0oQ%40mail.gmail.com.","subject":"Re: [ClojureScript] sorted-map-by bug Kovas Palunas Wed, 19 Jan 2022 08:35:23 -0800"},
{"body":"Hi Kovas,\n\nWhen I run your code in a Clojure repl (as opposed to CLJS), I get an\nexception: \nclojure.lang.ArityException: Wrong number of args (2) passed to:\napp.core-test\/sort-map\/fn--24334\n\nAnd this is because you're the comparator that you pass to sorted-map-by is\na 1-arity function: #(if (= % :input) \"aaaaa\" (name %)))\n\nThe comparator will be called with two map entries as arguments so that the\ncomparator can decide which one of them should be first, so your comparator\nfunction should do something with %1 and %2. But I can't really tell from\nthe code what you're trying to do, so I'm not sure what the comparator\nshould look like.\n\nCheers,\nLauri\n\nOn Tue, 18 Jan 2022 at 14:15, Kovas Palunas <kovas.palu...@gmail.com> wrote:\n\n> Hey all,\n>\n> I think I've found a bug in `sorted-map-by`, as shown by the below code:\n>\n> ```\n> (ns app.core-test\n>   (:require\n>    [cljs.test :refer (deftest is)]\n>    [clojure.string :as st]))\n>\n> (prn *clojurescript-version*)  ;; \"1.10.914\"\n>\n> (defn single-row [result-row]\n>   {:input (:input result-row)\n>    (keyword (st\/join [(name (:biomarker result-row)) \"-datapoints\"]))\n> (:datapoints result-row)})\n>\n> (defn sort-map [m]\n>   ; Sort row so that :input is first, then put this rest in alphabetical\n> order\n>   (into (sorted-map-by #(if (= % :input) \"aaaaa\" (name %))) m))\n>\n> (defn get-per-input-row [same-input-results]\n>   ; Calling sort-map twice here resolves the problem.\n>   (sort-map (reduce merge (map single-row same-input-results))))\n>\n> (defn make-per-input-results\n>   [results]\n>   (let [rows-by-input (group-by :input results)]\n>     (map get-per-input-row (vals rows-by-input))))\n>\n> (deftest test-bad-map-sorting\n>   (is (= '({:input 1 :a-datapoints 5}\n>            {:input 2 :a-datapoints 5}\n>            {:input 3 :b-datapoints 5}\n>            {:input 4 :b-datapoints 5})\n>          (make-per-input-results\n>           [{:input 1 :biomarker :a :datapoints 5}\n>            {:input 2 :biomarker :a :datapoints 5}\n>            {:input 3 :biomarker :b :datapoints 5}\n>            {:input 4 :biomarker :b :datapoints 5}]))))\n> ```\n>\n> The testcase fails, when I would expect it to succeed.  I tried posting\n> this on the cljs JIRA as a bug, but I don't have permission, so I thought\n> I'd post it here instead.  Anyone want to try reproducing this and posting\n> on the JIRA if you can reproduce it?\n>\n>  - Kovas\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CABgZr0s7iwQe8r%3DWXSDpx42bh7B_T8CURo61U7gonokrw9OJQw%40mail.gmail.com.","subject":"Re: [ClojureScript] sorted-map-by bug Lauri Pesonen Wed, 19 Jan 2022 08:27:42 -0800"},
{"body":"Hey all,\n\nI think I've found a bug in `sorted-map-by`, as shown by the below code: \n```\n(ns app.core-test\n  (:require\n   [cljs.test :refer (deftest is)]\n   [clojure.string :as st]))\n\n(prn *clojurescript-version*)  ;; \"1.10.914\"\n\n(defn single-row [result-row]\n  {:input (:input result-row)\n   (keyword (st\/join [(name (:biomarker result-row)) \"-datapoints\"])) \n(:datapoints result-row)})\n\n(defn sort-map [m]\n  ; Sort row so that :input is first, then put this rest in alphabetical \norder\n  (into (sorted-map-by #(if (= % :input) \"aaaaa\" (name %))) m))\n\n(defn get-per-input-row [same-input-results]\n  ; Calling sort-map twice here resolves the problem.\n  (sort-map (reduce merge (map single-row same-input-results))))\n\n(defn make-per-input-results\n  [results]\n  (let [rows-by-input (group-by :input results)]\n    (map get-per-input-row (vals rows-by-input))))\n\n(deftest test-bad-map-sorting\n  (is (= '({:input 1 :a-datapoints 5}\n           {:input 2 :a-datapoints 5}\n           {:input 3 :b-datapoints 5}\n           {:input 4 :b-datapoints 5})\n         (make-per-input-results\n          [{:input 1 :biomarker :a :datapoints 5}\n           {:input 2 :biomarker :a :datapoints 5}\n           {:input 3 :biomarker :b :datapoints 5}\n           {:input 4 :biomarker :b :datapoints 5}]))))\n```\n\nThe testcase fails, when I would expect it to succeed.  I tried posting \nthis on the cljs JIRA as a bug, but I don't have permission, so I thought \nI'd post it here instead.  Anyone want to try reproducing this and posting \non the JIRA if you can reproduce it?\n\n - Kovas\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/7eedfcb0-acff-496c-b332-11589f7e9582n%40googlegroups.com.","subject":"[ClojureScript] sorted-map-by bug Kovas Palunas Tue, 18 Jan 2022 06:15:29 -0800"},
{"body":"Please see https:\/\/clojurescript.org\/news\/2021-12-20-release for details. \nThanks!\nDavid\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPC9OadEKdDSpjNCyXt3QEcBcndxbu3hzSbEtB9fyvKvk-SiNg%40mail.gmail.com.","subject":"[ClojureScript] ANN: ClojureScript 1.10.914 David Nolen Mon, 20 Dec 2021 10:05:43 -0800"},
{"body":"As the subject says, I recently tried to create a function called `load` \nwhich for some reason wasn't executing properly. The body isn't relevant, \nsince it turned out that whatever I put in the body wasn't executing at \nall. I eventually discovered, when I renamed the function, that the body \nworked fine, it was just the name `load` that was causing it to be ignored. \nI created a fresh environment, with ClojureScript version 1.10.879, running \nfigwheel 0.2.14, and tried just calling `(load) as soon as the prompt came \nup.\n\n```\n(load)\n;; nil\n```\n\n```\n(load 1)\n;; Compile Exception: Don't know how to create ISeq from: java.lang.Long  \n```\n\nI even tried:\n\n```\n#'load\n;; Could not Analyze: Unable to resolve var: load in this context in file \n<cljs repl>  \n```\n\nand\n\n```\n`load\n;; cljs.user\/load\n```\n\nI even tried to do this:\n\n```\n(refer-clojure :exclude '[load])\n```\n\nbut it made no difference.\n\nThis is no big deal as I managed to rename the original function, but the \nthing is I can't find any trace of there being a `load` function anywhere \nin the docs, it doesn't seem to be a special form function or anything like \nthat, and there is no macro with that name.\n\nSo the big question: what is `load` and why can't I create a function with \nthat name? Further, are there any other \"hidden\" keywords which are \notherwise valid but which I can't use to create functions?\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/49737189-e554-4c30-b4ff-dd20b0658904n%40googlegroups.com.","subject":"[ClojureScript] Can't create a function called `load` outr...@gmail.com Sun, 28 Nov 2021 22:06:00 -0800"},
{"body":"Please see https:\/\/clojurescript.org\/news\/2021-11-04-release for details \nThanks!\nDavid\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPC9OafQ4BAiGHQC6GxKbroby6s-OJEvazyB3j%2BOPX1QAE6%2BgQ%40mail.gmail.com.","subject":"[ClojureScript] ANN: ClojureScript 1.10.891 David Nolen Thu, 04 Nov 2021 11:09:31 -0700"},
{"body":"(quot 286.3 21.2) returns 12 instead of 13.\n\nI know it is inherently hard problem due to limited precision. \nHowever, the implementation of CLJS-1164 \n(https:\/\/clojure.atlassian.net\/browse\/CLJS-1164) seems less prune to bug. \nAt least only one division operation is involved there.\n\nI wonder why that patch has been dropped.\n\nIt would be better that official `quot` API document mentions about this \nproblem.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/49cf0512-69fe-4192-9aa8-2598a0e6d0acn%40googlegroups.com.","subject":"[ClojureScript] quot does not work well with real numbers jb...@bgpworks.com Thu, 30 Sep 2021 00:22:01 -0700"},
{"body":"Good to know, Gary\n\nThe problems I have on the the Linux machine might be just proxy related - but I didn\u2019t see any proxy settings in `clj`\u2019s help\u2026 \nCan I tell clj somehow to use a proxy for downloading its stuff?\n\nMany thanks,\nLeo\n\n\nOn 4 Jul 2021, at 21:08, Gary Verhaegen wrote:\n\n In the vast majority of cases, yes, the dependencies are platform-independent and copying over the .m2 directory should work. Also note that you only need to do that once per version of your deps.edn file, i.e. as long as you don't change your deps.edn file you should be able to work completely offline. \nSometimes there are native dependencies, which are platform dependent. If you do hit that, you can still use something like Vagrant and Virtualbox to easily get a Linux VM on your Mac and get the Linux-specific .m2 that way. \n On 3 Jul 2021, at 15:01, oliver <n...@halloleo.hailmail.net> wrote:\n\n\ufeff\nHi Gary\n\nThank you very much for this incredibly detailed answer!\n\nMakes totally sense and particularly the tip with the \u2014output-to option is very helpful and exactly what I will need. \nA follow-up question to the download part:\nOn the machine on which I will do the development I don\u2019t have an internet connection, but I could run a mock compile on a personal machine with internet access and then copy everything in the .m2 directory via USB key or similar to the development computer. \nThe .m2 dependencies are machine-independent, right? I am asking because the personal machine would be a Macbook and the development machine is a Linux box. \nAnyway, thanks again for all the information!\n\nOllie\n\nOn 3 Jul 2021, at 3:02, Gary Johnson wrote:\n\nHi Oliver,\n\nclj is a shell script that provides an interface to several functions within the clojure JAR file. The first time you run it, clj has to download the clojure JAR and store it in your $HOME\/.m2\/repository directory tree for later use. \nEvery time you run clj, it will check the current directory to see if there is a deps.edn file present. If so, it will read the :deps map from it to determine which dependency libraries need to be made available on your JVM classpath. Any which have not already been downloaded to $HOME\/.m2\/repository will be downloaded at this point and save for later use. \nNote, in particular, that to compile clojurescript to javascript, you must include the clojurescript JAR in your deps.edn file. This will ensure that it is downloaded to $HOME\/.m2\/repository and added to your classpath, so that the `--main cljs.main --compile hello-world.core --repl` command can be evaluated successfully. \nAt a minimum, you will need to add this to your project's deps.edn file in order to run the clj command you provided: \n```clojure\n{:paths [\"src\/cljs\"]\n :deps  {org.clojure\/clojure       {:mvn\/version \"1.10.3\"}\n         org.clojure\/clojurescript {:mvn\/version \"1.10.866\"}}}\n```\nNext, create the file src\/cljs\/hello_world\/core.cljs, containing this code: \n```clojure\n(ns hello-world.core)\n\n(defn say-hello []\n  (js\/alert \"Hello from CLJS!\"))\n\n(say-hello)\n```\n\nAt this point, your directory tree should look like this:\n\n.\n\u251c\u2500\u2500 deps.edn\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 cljs\n        \u2514\u2500\u2500 hello_world\n            \u2514\u2500\u2500 core.cljs\n\nNow you are ready to compile core.cljs into Javascript. Let's run the command you provided in your original post: \nclj -M --main cljs.main --compile hello-world.core --repl\n\nThis will read deps.edn, make sure you have the clojure and clojurescript JARs in $HOME\/.m2\/repository (or download them if not), spin up a JVM with src\/cljs and both JARs on its classpath, load the cljs.main namespace (from the clojurescript JAR), and run its -main method with [\"--compile\" \"hello-world.core\" \"--repl\"] as its arguments. This -main method is the entrypoint function for the clojurescript compiler, which then loads the hello-world.core namespace (found under src\/cljs\/hello_world\/core.cljs <-- note that - in namespaces becomes _ in filenames). The clojurescript compiler then compiles your code into javascript under the out\/ directory by default. Finally, since you passed the \"--repl\" argument, a web browser window will be opened and pointed to http:\/\/localhost:9000, which loads up a default webpage provided the clojurescript JAR file, that contains javascript code to connect back to your clj REPL, so that the browser can act as the runtime environment for your javascript code as well as any forms that you type at the REPL. \nSince your code included a call to (say-hello) at the toplevel, this function will be run as soon as the page loads, which will display a javascript alert box in your browser window with the text \"Hello from CLJS!\" in it. \nTo verify that everything is working correctly, you'll want to use require and in-ns to load and navigate to your hello-world.core namespace in the REPL. Then you can run the (say-hello) function again interactively. Here's the command sequence you want to type: \nClojureScript 1.10.866\ncljs.user=> (require 'hello-world.core)\nnil\ncljs.user=> (in-ns 'hello-world.core)\nnil\nhello-world.core=> (say-hello)\nnil\n\nIf everything works correctly, you'll see the familiar javascript alert box pop up in your browser window with the text \"Hello from CLJS!\" in it. \nNow, although this shows that your clojurescript to javascript compilation is working correctly, it doesn't provide a straightforward path to simply copy your javascript into a separate web application and load it. That's because in order for your say-hello function to work, you need to include not only your generated javascript (from hello-world.core) but also all the javascript for the clojurescript and google closure systems that are the necessary dependencies here. If you look at out\/main.js, you'll see the javascript code that your browser window loads when it starts up the browser REPL page. This code injects script tags into the page to loads the clojurescript and google closure dependencies, then the browser repl code, and finally loads your hello_world.core javascript file (note again that javascript module names use _ rather than - as in clojurescript). \nIf you look in out\/hello_world\/core.js, you'll see just the javascript that your clojurescript file generated: \n```javascript\ngoog.provide('hello_world.core');\ngoog.require('cljs.core');\nhello_world.core.say_hello = (function hello_world$core$say_hello(){\nreturn alert(\"Hello from CLJS!\");\n});\n```\n\nWhat you'll need to do for your simple practice example is to tell the clojurescript compiler to combine all of the javascript that was generated from your hello_world\/core.cljs file together with all of its dependencies into a single file, prune all of it to remove everything that you don't absolutely need to make your code work, minify all the variable and function names, and remove the whitespace, so it loads quickly. That, my friend, is what we call \"advanced mode compilation\". You can enable it with this command: \nclj -M --main cljs.main --optimizations advanced --output-to app.js --compile hello-world.core \nWhen this command finishes, you'll find a file called app.js in the current directory. Make a file called index.html in the current directory containing this code: \n```html\n<html>\n    <head>\n        <title>CLJS Test Page<\/title>\n        <script type=\"text\/javascript\" src=\"app.js\"><\/script>\n    <\/head>\n    <body>\n        Did you see an alert box?\n    <\/body>\n<\/html>\n```\n\nNow simply open index.html in your web browser, and you'll see the same alert box as before pop up with the text \"Hello from CLJS!\" in it. \nHopefully, that will give you the tools you need to get your feet wet with clojurescript programming. You can see all the command line options for the clojurescript compiler by running this command: \nclj -M --main cljs.main -h\n\nAlso, please keep in mind that clojurescript developers don't usually work directly at the command line like this. Instead, they would usually use a tool like figwheel-main or shadow-cljs to automate the compilation process and hot-load live code changes to your browser during development. \nWelcome again to the wonderful world of clojure and clojurescript programming. Have fun and happy hacking! \n~Gary\n\nOn Thursday, July 1, 2021 at 9:52:07 AM UTC-4 Oliver Baumann wrote:\n \nTotal newbie tries out ClojureScript...\n\nGot Clojure installed, chcekd that clj works. Then I walked through the Getting Started tutorial, but get stuck on the compile (i.e. transpile?) step: \nI execute on the command line\n\nclj -M --main cljs.main --compile hello-world.core --repl\n\nand get\n\nError building classpath. Failed to read artifact descriptor for org.clojure:clojure:jar:1.10.3 ...\nCaused by: java.io.EOFException: SSL peer shut down incorrectly\n...\n\nLooks like I need an internet connection to transpile the hello_world file? Or do I something else totally wrong? \nHow can I transpile a simple dependency-less file to JavaScript without internet connection? \n--\nNote that posts from new members are moderated - please be patient with your first post. ---\nYou received this message because you are subscribed to a topic in the Google Groups \"ClojureScript\" group. To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/topic\/clojurescript\/hTBTxE8POYc\/unsubscribe. To unsubscribe from this group and all its topics, send an email to clojurescript+unsubscr...@googlegroups.com. To view this discussion on the web visit https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0bd7a41a-d874-40c4-bdaa-cb8d2d7a92d6n%40googlegroups.com. --\nNote that posts from new members are moderated - please be patient with your first post. ---\nYou received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email to clojurescript+unsubscr...@googlegroups.com. To view this discussion on the web visit https:\/\/groups.google.com\/d\/msgid\/clojurescript\/C37F1522-3DF6-4FD2-86B8-FA6CF36EEA63%40halloleo.hailmail.net. \n--\nNote that posts from new members are moderated - please be patient with your first post. ---\nYou received this message because you are subscribed to a topic in the Google Groups \"ClojureScript\" group. To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/topic\/clojurescript\/hTBTxE8POYc\/unsubscribe. To unsubscribe from this group and all its topics, send an email to clojurescript+unsubscr...@googlegroups.com. To view this discussion on the web visit https:\/\/groups.google.com\/d\/msgid\/clojurescript\/3A41ED2B-30FC-4DB5-AF91-AC15697C403D%40gmail.com. \n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- You received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/1DB295A4-8B77-4A95-923A-39841764F7D8%40halloleo.hailmail.net.","subject":"Re: [ClojureScript] Trying hello-world tutorial and get \"Error building classpath\" - Internet needed? oliver Mon, 05 Jul 2021 01:45:00 -0700"},
{"body":"Thanks Gary. Sounds very promising! I certainly will dive into it! \nOn 4 Jul 2021, at 20:59, Gary Verhaegen wrote:\n\n Yes; transpiling to plain JavaScript is really what ClojureScript was designed to do. You can also very easily call existing JavaScript from ClojureScript code, so you may be able to start using ClojureScript without having to rewrite all of your existing code. \n On 1 Jul 2021, at 15:52, Oliver Baumann <n...@halloleo.hailmail.net> wrote: \n\ufeff\nJust figuring, it might be good to check whether I can achieve with ClojureScript what I want to do: \nWe have a website with some JavaScript functionality (some reading of JSON data, some calculations, etc). \nI'm planning to (re)write and extend the JavaScript parts with ClojureScript (to learn Clojure and to keep the site better maintainable). For this I would like to write ClojureScript, transpile it with clj, copy the JavaScript output to the web server and then view our HTML page which includes\/loads the JavaScript. \nFeasible?\n\nMany thanks for any pointers!\n\n--\nNote that posts from new members are moderated - please be patient with your first post. ---\nYou received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email to clojurescript+unsubscr...@googlegroups.com. To view this discussion on the web visit https:\/\/groups.google.com\/d\/msgid\/clojurescript\/dcdad66e-a8c5-4cbd-ac56-2fb7e1ce6de1n%40googlegroups.com. \n--\nNote that posts from new members are moderated - please be patient with your first post. ---\nYou received this message because you are subscribed to a topic in the Google Groups \"ClojureScript\" group. To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/topic\/clojurescript\/cipOdXtLwCc\/unsubscribe. To unsubscribe from this group and all its topics, send an email to clojurescript+unsubscr...@googlegroups.com. To view this discussion on the web visit https:\/\/groups.google.com\/d\/msgid\/clojurescript\/C9911D56-64CE-4F72-890D-2FC6C9D730F0%40gmail.com. \n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- You received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/7A470CA2-02D5-42D1-8376-260293564538%40halloleo.hailmail.net.","subject":"Re: [ClojureScript] Can ClojureScript transpile to plain JavaScript? oliver Sun, 04 Jul 2021 20:46:38 -0700"},
{"body":"In the vast majority of cases, yes, the dependencies are platform-independent \nand copying over the .m2 directory should work. Also note that you only need to \ndo that once per version of your deps.edn file, i.e. as long as you don't \nchange your deps.edn file you should be able to work completely offline. \nSometimes there are native dependencies, which are platform dependent. If you \ndo hit that, you can still use something like Vagrant and Virtualbox to easily \nget a Linux VM on your Mac and get the Linux-specific .m2 that way.\n\n> On 3 Jul 2021, at 15:01, oliver <n...@halloleo.hailmail.net> wrote:\n> \n> \ufeff\n> Hi Gary\n> \n> Thank you very much for this incredibly detailed answer!\n> \n> Makes totally sense and particularly the tip with the \u2014output-to option is \n> very helpful and exactly what I will need.\n> \n> A follow-up question to the download part:\n> On the machine on which I will do the development I don\u2019t have an internet \n> connection, but I could run a mock compile on a personal machine with \n> internet access and then copy everything in the .m2 directory via USB key or \n> similar to the development computer.\n> \n> The .m2 dependencies are machine-independent, right? I am asking because the \n> personal machine would be a Macbook and the development machine is a Linux \n> box.\n> \n> Anyway, thanks again for all the information!\n> \n> Ollie\n> \n> On 3 Jul 2021, at 3:02, Gary Johnson wrote:\n> \n> Hi Oliver,\n> \n> clj is a shell script that provides an interface to several functions within \n> the clojure JAR file. The first time you run it, clj has to download the \n> clojure JAR and store it in your $HOME\/.m2\/repository directory tree for \n> later use.\n> \n> Every time you run clj, it will check the current directory to see if there \n> is a deps.edn file present. If so, it will read the :deps map from it to \n> determine which dependency libraries need to be made available on your JVM \n> classpath. Any which have not already been downloaded to $HOME\/.m2\/repository \n> will be downloaded at this point and save for later use.\n> \n> Note, in particular, that to compile clojurescript to javascript, you must \n> include the clojurescript JAR in your deps.edn file. This will ensure that it \n> is downloaded to $HOME\/.m2\/repository and added to your classpath, so that \n> the `--main cljs.main --compile hello-world.core --repl` command can be \n> evaluated successfully.\n> \n> At a minimum, you will need to add this to your project's deps.edn file in \n> order to run the clj command you provided:\n> \n> ```clojure\n> {:paths [\"src\/cljs\"]\n>  :deps  {org.clojure\/clojure       {:mvn\/version \"1.10.3\"}\n>          org.clojure\/clojurescript {:mvn\/version \"1.10.866\"}}}\n> ```\n> Next, create the file src\/cljs\/hello_world\/core.cljs, containing this code:\n> \n> ```clojure\n> (ns hello-world.core)\n> \n> (defn say-hello []\n>   (js\/alert \"Hello from CLJS!\"))\n> \n> (say-hello)\n> ```\n> \n> At this point, your directory tree should look like this:\n> \n> .\n> \u251c\u2500\u2500 deps.edn\n> \u2514\u2500\u2500 src\n>     \u2514\u2500\u2500 cljs\n>         \u2514\u2500\u2500 hello_world\n>             \u2514\u2500\u2500 core.cljs\n> \n> Now you are ready to compile core.cljs into Javascript. Let's run the command \n> you provided in your original post:\n> \n> clj -M --main cljs.main --compile hello-world.core --repl\n> \n> This will read deps.edn, make sure you have the clojure and clojurescript \n> JARs in $HOME\/.m2\/repository (or download them if not), spin up a JVM with \n> src\/cljs and both JARs on its classpath, load the cljs.main namespace (from \n> the clojurescript JAR), and run its -main method with [\"--compile\" \n> \"hello-world.core\" \"--repl\"] as its arguments. This -main method is the \n> entrypoint function for the clojurescript compiler, which then loads the \n> hello-world.core namespace (found under src\/cljs\/hello_world\/core.cljs <-- \n> note that - in namespaces becomes _ in filenames). The clojurescript compiler \n> then compiles your code into javascript under the out\/ directory by default. \n> Finally, since you passed the \"--repl\" argument, a web browser window will be \n> opened and pointed to http:\/\/localhost:9000, which loads up a default webpage \n> provided the clojurescript JAR file, that contains javascript code to connect \n> back to your clj REPL, so that the browser can act as the runtime environment \n> for your javascript code as well as any forms that you type at the REPL.\n> \n> Since your code included a call to (say-hello) at the toplevel, this function \n> will be run as soon as the page loads, which will display a javascript alert \n> box in your browser window with the text \"Hello from CLJS!\" in it.\n> \n> To verify that everything is working correctly, you'll want to use require \n> and in-ns to load and navigate to your hello-world.core namespace in the \n> REPL. Then you can run the (say-hello) function again interactively. Here's \n> the command sequence you want to type:\n> \n> ClojureScript 1.10.866\n> cljs.user=> (require 'hello-world.core)\n> nil\n> cljs.user=> (in-ns 'hello-world.core)\n> nil\n> hello-world.core=> (say-hello)\n> nil\n> \n> If everything works correctly, you'll see the familiar javascript alert box \n> pop up in your browser window with the text \"Hello from CLJS!\" in it.\n> \n> Now,  although this shows that your clojurescript to javascript compilation \n> is working correctly, it doesn't provide a straightforward path to simply \n> copy your javascript into a separate web application and load it. That's \n> because in order for your say-hello function to work, you need to include not \n> only your generated javascript (from hello-world.core) but also all the \n> javascript for the clojurescript and google closure systems that are the \n> necessary dependencies here. If you look at out\/main.js, you'll see the \n> javascript code that your browser window loads when it starts up the browser \n> REPL page. This code injects script tags into the page to loads the \n> clojurescript and google closure dependencies, then the browser repl code, \n> and finally loads your hello_world.core javascript file (note again that \n> javascript module names use _ rather than - as in clojurescript).\n> \n> If you look in out\/hello_world\/core.js, you'll see just the javascript that \n> your clojurescript file generated:\n> \n> ```javascript\n> goog.provide('hello_world.core');\n> goog.require('cljs.core');\n> hello_world.core.say_hello = (function hello_world$core$say_hello(){\n> return alert(\"Hello from CLJS!\");\n> });\n> ```\n> \n> What you'll need to do for your simple practice example is to tell the \n> clojurescript compiler to combine all of the javascript that was generated \n> from your hello_world\/core.cljs file together with all of its dependencies \n> into a single file, prune all of it to remove everything that you don't \n> absolutely need to make your code work, minify all the variable and function \n> names, and remove the whitespace, so it loads quickly. That, my friend, is \n> what we call \"advanced mode compilation\". You can enable it with this command:\n> \n> clj -M --main cljs.main --optimizations advanced --output-to app.js --compile \n> hello-world.core\n> \n> When this command finishes, you'll find a file called app.js in the current \n> directory. Make a file called index.html in the current directory containing \n> this code:\n> \n> ```html\n> <html>\n>     <head>\n>         <title>CLJS Test Page<\/title>\n>         <script type=\"text\/javascript\" src=\"app.js\"><\/script>\n>     <\/head>\n>     <body>\n>         Did you see an alert box?\n>     <\/body>\n> <\/html>\n> ```\n> \n> Now simply open index.html in your web browser, and you'll see the same alert \n> box as before pop up with the text \"Hello from CLJS!\" in it.\n> \n> Hopefully, that will give you the tools you need to get your feet wet with \n> clojurescript programming. You can see all the command line options for the \n> clojurescript compiler by running this command:\n> \n> clj -M --main cljs.main -h\n> \n> Also, please keep in mind that clojurescript developers don't usually work \n> directly at the command line like this. Instead, they would usually use a \n> tool like figwheel-main or shadow-cljs to automate the compilation process \n> and hot-load live code changes to your browser during development.\n> \n> Welcome again to the wonderful world of clojure and clojurescript \n> programming. Have fun and happy hacking!\n> \n> ~Gary\n> \n> On Thursday, July 1, 2021 at 9:52:07 AM UTC-4 Oliver Baumann wrote:\n>> \n>> Total newbie tries out ClojureScript...\n>> \n>> Got Clojure installed, chcekd that clj works. Then I walked through the \n>> Getting Started tutorial, but get stuck on the compile (i.e. transpile?) \n>> step: \n>> \n>> I execute on the command line\n>> \n>> clj -M --main cljs.main --compile hello-world.core --repl\n>> \n>> and get \n>> \n>> Error building classpath. Failed to read artifact descriptor for \n>> org.clojure:clojure:jar:1.10.3\n>> ...\n>> Caused by: java.io.EOFException: SSL peer shut down incorrectly\n>> ...\n>> \n>> Looks like I need an internet connection to transpile the hello_world file? \n>> Or do I something else totally wrong?\n>> \n>> How can I transpile a simple dependency-less file to JavaScript without \n>> internet connection?\n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to a topic in the Google \n> Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit \n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/hTBTxE8POYc\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to \n> clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit \n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0bd7a41a-d874-40c4-bdaa-cb8d2d7a92d6n%40googlegroups.com.\n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit \n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/C37F1522-3DF6-4FD2-86B8-FA6CF36EEA63%40halloleo.hailmail.net.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/3A41ED2B-30FC-4DB5-AF91-AC15697C403D%40gmail.com.","subject":"Re: [ClojureScript] Trying hello-world tutorial and get \"Error building classpath\" - Internet needed? Gary Verhaegen Sun, 04 Jul 2021 04:08:49 -0700"},
{"body":"Yes; transpiling to plain JavaScript is really what ClojureScript was designed \nto do. You can also very easily call existing JavaScript from ClojureScript \ncode, so you may be able to start using ClojureScript without having to rewrite \nall of your existing code. \n> On 1 Jul 2021, at 15:52, Oliver Baumann <n...@halloleo.hailmail.net> wrote:\n> \n> \ufeff\n> Just figuring, it might be good to check whether I can achieve with \n> ClojureScript what I want to do:\n> \n> We have a website with some JavaScript functionality (some reading of JSON \n> data, some calculations, etc).\n> \n> I'm planning to (re)write and extend the JavaScript parts with ClojureScript \n> (to learn Clojure and to keep the site better maintainable). For this I would \n> like to write ClojureScript, transpile it with clj, copy the JavaScript \n> output to the web server and then view our HTML page which includes\/loads the \n> JavaScript.\n> \n> Feasible?\n> \n> Many thanks for any pointers!\n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit \n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/dcdad66e-a8c5-4cbd-ac56-2fb7e1ce6de1n%40googlegroups.com.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/C9911D56-64CE-4F72-890D-2FC6C9D730F0%40gmail.com.","subject":"Re: [ClojureScript] Can ClojureScript transpile to plain JavaScript? Gary Verhaegen Sun, 04 Jul 2021 04:00:03 -0700"},
{"body":"Hi Gary\n\nThank you very much for this incredibly detailed answer! \nMakes totally sense and particularly the tip with the `\u2014output-to` option is very helpful and exactly what I will need. \nA follow-up question to the download part:\nOn the machine on which I will do the development I don\u2019t have an internet connection, but I could run a mock compile on a personal machine with internet access and then copy everything in the .m2 directory via USB key or similar to the development computer. \nThe .m2 dependencies are machine-independent, right? I am asking because the personal machine would be a Macbook and the development machine is a Linux box. \nAnyway, thanks again for all the information!\n\nOllie\n\nOn 3 Jul 2021, at 3:02, Gary Johnson wrote:\n\n Hi Oliver,\n\nclj is a shell script that provides an interface to several functions\nwithin the clojure JAR file. The first time you run it, clj has to download the clojure JAR and store it in your $HOME\/.m2\/repository directory tree for later use.\n\nEvery time you run clj, it will check the current directory to see if there is a deps.edn file present. If so, it will read the :deps map from it to determine which dependency libraries need to be made available on your JVM classpath. Any which have not already been downloaded to\n$HOME\/.m2\/repository will be downloaded at this point and save for later use.\n\nNote, in particular, that to compile clojurescript to javascript, you must include the clojurescript JAR in your deps.edn file. This will ensure that it is downloaded to $HOME\/.m2\/repository and added to your classpath, so that the `--main cljs.main --compile hello-world.core --repl` command can be evaluated successfully.\n\nAt a minimum, you will need to add this to your project's deps.edn file in order to run the clj command you provided:\n\n```clojure\n{:paths [\"src\/cljs\"]\n :deps  {org.clojure\/clojure       {:mvn\/version \"1.10.3\"}\n         org.clojure\/clojurescript {:mvn\/version \"1.10.866\"}}}\n```\nNext, create the file src\/cljs\/hello_world\/core.cljs, containing this code: \n```clojure\n(ns hello-world.core)\n\n(defn say-hello []\n  (js\/alert \"Hello from CLJS!\"))\n\n(say-hello)\n```\n\nAt this point, your directory tree should look like this:\n\n.\n\u251c\u2500\u2500 deps.edn\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 cljs\n        \u2514\u2500\u2500 hello_world\n            \u2514\u2500\u2500 core.cljs\n\nNow you are ready to compile core.cljs into Javascript. Let's run the\ncommand you provided in your original post:\n\nclj -M --main cljs.main --compile hello-world.core --repl\n\nThis will read deps.edn, make sure you have the clojure and clojurescript JARs in $HOME\/.m2\/repository (or download them if not), spin up a JVM with src\/cljs and both JARs on its classpath, load the cljs.main namespace (from the clojurescript JAR), and run its -main method with [\"--compile\"\n\"hello-world.core\" \"--repl\"] as its arguments. This -main method is the entrypoint function for the clojurescript compiler, which then loads the hello-world.core namespace (found under src\/cljs\/hello_world\/core.cljs <-- note that - in namespaces becomes _ in filenames). The clojurescript\ncompiler then compiles your code into javascript under the out\/ directory by default. Finally, since you passed the \"--repl\" argument, a web browser window will be opened and pointed to http:\/\/localhost:9000, which loads up a default webpage provided the clojurescript JAR file, that contains\njavascript code to connect back to your clj REPL, so that the browser can act as the runtime environment for your javascript code as well as any\nforms that you type at the REPL.\n\nSince your code included a call to (say-hello) at the toplevel, this\nfunction will be run as soon as the page loads, which will display a\njavascript alert box in your browser window with the text \"Hello from\nCLJS!\" in it.\n\nTo verify that everything is working correctly, you'll want to use require and in-ns to load and navigate to your hello-world.core namespace in the REPL. Then you can run the (say-hello) function again interactively. Here's the command sequence you want to type:\n\nClojureScript 1.10.866\ncljs.user=> (require 'hello-world.core)\nnil\ncljs.user=> (in-ns 'hello-world.core)\nnil\nhello-world.core=> (say-hello)\nnil\n\nIf everything works correctly, you'll see the familiar javascript alert box pop up in your browser window with the text \"Hello from CLJS!\" in it.\n\nNow, although this shows that your clojurescript to javascript compilation is working correctly, it doesn't provide a straightforward path to simply copy your javascript into a separate web application and load it. That's because in order for your say-hello function to work, you need to include not only your generated javascript (from hello-world.core) but also all the javascript for the clojurescript and google closure systems that are the necessary dependencies here. If you look at out\/main.js, you'll see the javascript code that your browser window loads when it starts up the\nbrowser REPL page. This code injects script tags into the page to loads the clojurescript and google closure dependencies, then the browser repl code, and finally loads your hello_world.core javascript file (note again that javascript module names use _ rather than - as in clojurescript).\n\nIf you look in out\/hello_world\/core.js, you'll see just the javascript that your clojurescript file generated:\n\n```javascript\ngoog.provide('hello_world.core');\ngoog.require('cljs.core');\nhello_world.core.say_hello = (function hello_world$core$say_hello(){\nreturn alert(\"Hello from CLJS!\");\n});\n```\n\nWhat you'll need to do for your simple practice example is to tell the\nclojurescript compiler to combine all of the javascript that was generated from your hello_world\/core.cljs file together with all of its dependencies into a single file, prune all of it to remove everything that you don't absolutely need to make your code work, minify all the variable and\nfunction names, and remove the whitespace, so it loads quickly. That, my friend, is what we call \"advanced mode compilation\". You can enable it with this command:\n\nclj -M --main cljs.main --optimizations advanced --output-to app.js\n--compile hello-world.core\n\nWhen this command finishes, you'll find a file called app.js in the current directory. Make a file called index.html in the current directory\ncontaining this code:\n\n```html\n<html>\n    <head>\n        <title>CLJS Test Page<\/title>\n        <script type=\"text\/javascript\" src=\"app.js\"><\/script>\n    <\/head>\n    <body>\n        Did you see an alert box?\n    <\/body>\n<\/html>\n```\n\nNow simply open index.html in your web browser, and you'll see the same alert box as before pop up with the text \"Hello from CLJS!\" in it.\n\nHopefully, that will give you the tools you need to get your feet wet with clojurescript programming. You can see all the command line options for the clojurescript compiler by running this command:\n\nclj -M --main cljs.main -h\n\nAlso, please keep in mind that clojurescript developers don't usually work directly at the command line like this. Instead, they would usually use a tool like figwheel-main or shadow-cljs to automate the compilation process and hot-load live code changes to your browser during development.\n\nWelcome again to the wonderful world of clojure and clojurescript\nprogramming. Have fun and happy hacking!\n\n~Gary\n\nOn Thursday, July 1, 2021 at 9:52:07 AM UTC-4 Oliver Baumann wrote:\n\n \nTotal newbie tries out ClojureScript...\n\nGot Clojure installed, chcekd that clj works. Then I walked through the Getting Started tutorial, but get stuck on the compile (i.e. transpile?) step:\n\nI execute on the command line\n\nclj -M --main cljs.main --compile hello-world.core --repl\n\nand get\n\nError building classpath. Failed to read artifact descriptor for\norg.clojure:clojure:jar:1.10.3\n...\nCaused by: java.io.EOFException: SSL peer shut down incorrectly\n...\n\nLooks like I need an internet connection to transpile the hello_world\nfile? Or do I something else totally wrong?\n\nHow can I transpile a simple dependency-less file to JavaScript without internet connection?\n\n \n--\nNote that posts from new members are moderated - please be patient with your first post. ---\nYou received this message because you are subscribed to a topic in the Google Groups \"ClojureScript\" group. To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/topic\/clojurescript\/hTBTxE8POYc\/unsubscribe. To unsubscribe from this group and all its topics, send an email to clojurescript+unsubscr...@googlegroups.com. To view this discussion on the web visit https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0bd7a41a-d874-40c4-bdaa-cb8d2d7a92d6n%40googlegroups.com. \n\n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- You received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/C37F1522-3DF6-4FD2-86B8-FA6CF36EEA63%40halloleo.hailmail.net.","subject":"Re: [ClojureScript] Trying hello-world tutorial and get \"Error building classpath\" - Internet needed? oliver Sat, 03 Jul 2021 06:01:05 -0700"},
{"body":"Hi Oliver,\n\nclj is a shell script that provides an interface to several functions \nwithin the clojure JAR file. The first time you run it, clj has to download \nthe clojure JAR and store it in your $HOME\/.m2\/repository directory tree \nfor later use. \nEvery time you run clj, it will check the current directory to see if there \nis a deps.edn file present. If so, it will read the :deps map from it to \ndetermine which dependency libraries need to be made available on your JVM \nclasspath. Any which have not already been downloaded to \n$HOME\/.m2\/repository will be downloaded at this point and save for later \nuse.\n\nNote, in particular, that to compile clojurescript to javascript, you must \ninclude the clojurescript JAR in your deps.edn file. This will ensure that \nit is downloaded to $HOME\/.m2\/repository and added to your classpath, so \nthat the `--main cljs.main --compile hello-world.core --repl` command can \nbe evaluated successfully.\n\nAt a minimum, you will need to add this to your project's deps.edn file in \norder to run the clj command you provided:\n\n```clojure\n{:paths [\"src\/cljs\"]\n :deps  {org.clojure\/clojure       {:mvn\/version \"1.10.3\"}\n         org.clojure\/clojurescript {:mvn\/version \"1.10.866\"}}}\n```\nNext, create the file src\/cljs\/hello_world\/core.cljs, containing this code:\n\n```clojure\n(ns hello-world.core)\n\n(defn say-hello []\n  (js\/alert \"Hello from CLJS!\"))\n\n(say-hello)\n```\n\nAt this point, your directory tree should look like this:\n\n.\n\u251c\u2500\u2500 deps.edn\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 cljs\n        \u2514\u2500\u2500 hello_world\n            \u2514\u2500\u2500 core.cljs\n\nNow you are ready to compile core.cljs into Javascript. Let's run the \ncommand you provided in your original post:\n\nclj -M --main cljs.main --compile hello-world.core --repl\n\nThis will read deps.edn, make sure you have the clojure and clojurescript \nJARs in $HOME\/.m2\/repository (or download them if not), spin up a JVM with \nsrc\/cljs and both JARs on its classpath, load the cljs.main namespace (from \nthe clojurescript JAR), and run its -main method with [\"--compile\" \n\"hello-world.core\" \"--repl\"] as its arguments. This -main method is the \nentrypoint function for the clojurescript compiler, which then loads the \nhello-world.core namespace (found under src\/cljs\/hello_world\/core.cljs <-- \nnote that - in namespaces becomes _ in filenames). The clojurescript \ncompiler then compiles your code into javascript under the out\/ directory \nby default. Finally, since you passed the \"--repl\" argument, a web browser \nwindow will be opened and pointed to http:\/\/localhost:9000, which loads up \na default webpage provided the clojurescript JAR file, that contains \njavascript code to connect back to your clj REPL, so that the browser can \nact as the runtime environment for your javascript code as well as any \nforms that you type at the REPL.\n\nSince your code included a call to (say-hello) at the toplevel, this \nfunction will be run as soon as the page loads, which will display a \njavascript alert box in your browser window with the text \"Hello from \nCLJS!\" in it.\n\nTo verify that everything is working correctly, you'll want to use require \nand in-ns to load and navigate to your hello-world.core namespace in the \nREPL. Then you can run the (say-hello) function again interactively. Here's \nthe command sequence you want to type:\n\nClojureScript 1.10.866\ncljs.user=> (require 'hello-world.core)\nnil\ncljs.user=> (in-ns 'hello-world.core)\nnil\nhello-world.core=> (say-hello)\nnil\n\nIf everything works correctly, you'll see the familiar javascript alert box \npop up in your browser window with the text \"Hello from CLJS!\" in it.\n\nNow,  although this shows that your clojurescript to javascript compilation \nis working correctly, it doesn't provide a straightforward path to simply \ncopy your javascript into a separate web application and load it. That's \nbecause in order for your say-hello function to work, you need to include \nnot only your generated javascript (from hello-world.core) but also all the \njavascript for the clojurescript and google closure systems that are the \nnecessary dependencies here. If you look at out\/main.js, you'll see the \njavascript code that your browser window loads when it starts up the \nbrowser REPL page. This code injects script tags into the page to loads the \nclojurescript and google closure dependencies, then the browser repl code, \nand finally loads your hello_world.core javascript file (note again that \njavascript module names use _ rather than - as in clojurescript).\n\nIf you look in out\/hello_world\/core.js, you'll see just the javascript that \nyour clojurescript file generated:\n\n```javascript\ngoog.provide('hello_world.core');\ngoog.require('cljs.core');\nhello_world.core.say_hello = (function hello_world$core$say_hello(){\nreturn alert(\"Hello from CLJS!\");\n});\n```\n\nWhat you'll need to do for your simple practice example is to tell the \nclojurescript compiler to combine all of the javascript that was generated \nfrom your hello_world\/core.cljs file together with all of its dependencies \ninto a single file, prune all of it to remove everything that you don't \nabsolutely need to make your code work, minify all the variable and \nfunction names, and remove the whitespace, so it loads quickly. That, my \nfriend, is what we call \"advanced mode compilation\". You can enable it with \nthis command:\n\nclj -M --main cljs.main --optimizations advanced --output-to app.js \n--compile hello-world.core\n\nWhen this command finishes, you'll find a file called app.js in the current \ndirectory. Make a file called index.html in the current directory \ncontaining this code:\n\n```html\n<html>\n    <head>\n        <title>CLJS Test Page<\/title>\n        <script type=\"text\/javascript\" src=\"app.js\"><\/script>\n    <\/head>\n    <body>\n        Did you see an alert box?\n    <\/body>\n<\/html>\n```\n\nNow simply open index.html in your web browser, and you'll see the same \nalert box as before pop up with the text \"Hello from CLJS!\" in it.\n\nHopefully, that will give you the tools you need to get your feet wet with \nclojurescript programming. You can see all the command line options for the \nclojurescript compiler by running this command:\n\nclj -M --main cljs.main -h\n\nAlso, please keep in mind that clojurescript developers don't usually work \ndirectly at the command line like this. Instead, they would usually use a \ntool like figwheel-main or shadow-cljs to automate the compilation process \nand hot-load live code changes to your browser during development.\n\nWelcome again to the wonderful world of clojure and clojurescript \nprogramming. Have fun and happy hacking!\n\n~Gary\n\nOn Thursday, July 1, 2021 at 9:52:07 AM UTC-4 Oliver Baumann wrote:\n\n>\n> Total newbie tries out ClojureScript...\n>\n> Got Clojure installed, chcekd that clj works. Then I walked through the \n> Getting Started tutorial, but get stuck on the compile (i.e. transpile?) \n> step: \n>\n> I execute on the command line\n>\n> clj -M --main cljs.main --compile hello-world.core --repl\n>\n> and get \n>\n> Error building classpath. Failed to read artifact descriptor for \n> org.clojure:clojure:jar:1.10.3\n> ...\n> Caused by: java.io.EOFException: SSL peer shut down incorrectly\n> ...\n>\n> Looks like I need an internet connection to transpile the hello_world \n> file? Or do I something else totally wrong?\n>\n> How can I transpile a simple dependency-less file to JavaScript without \n> internet connection?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/0bd7a41a-d874-40c4-bdaa-cb8d2d7a92d6n%40googlegroups.com.","subject":"[ClojureScript] Re: Trying hello-world tutorial and get \"Error building classpath\" - Internet needed? Gary Johnson Fri, 02 Jul 2021 10:02:37 -0700"},
{"body":"Just figuring, it might be good to check whether I can achieve with \nClojureScript what I want to do: \nWe have a website with some JavaScript functionality (some reading of JSON \ndata, some calculations, etc).\n\nI'm planning to (re)write and extend the JavaScript parts with \nClojureScript (to learn Clojure and to keep the site better maintainable). \nFor this I would like to write ClojureScript, transpile it with clj, copy \nthe JavaScript output to the web server and then view our HTML page which \nincludes\/loads the JavaScript.\n\nFeasible?\n\nMany thanks for any pointers!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/dcdad66e-a8c5-4cbd-ac56-2fb7e1ce6de1n%40googlegroups.com.","subject":"[ClojureScript] Can ClojureScript transpile to plain JavaScript? Oliver Baumann Thu, 01 Jul 2021 06:52:10 -0700"},
{"body":"Total newbie tries out ClojureScript...\n\nGot Clojure installed, chcekd that clj works. Then I walked through the \nGetting Started tutorial, but get stuck on the compile (i.e. transpile?) \nstep: \nI execute on the command line\n\nclj -M --main cljs.main --compile hello-world.core --repl\n\nand get \n\nError building classpath. Failed to read artifact descriptor for \norg.clojure:clojure:jar:1.10.3\n...\nCaused by: java.io.EOFException: SSL peer shut down incorrectly\n...\n\nLooks like I need an internet connection to transpile the hello_world file? \nOr do I something else totally wrong?\n\nHow can I transpile a simple dependency-less file to JavaScript without \ninternet connection?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/0ee9f087-66d6-47bc-8737-378ec33589edn%40googlegroups.com.","subject":"[ClojureScript] Trying hello-world tutorial and get \"Error building classpath\" - Internet needed? Oliver Baumann Thu, 01 Jul 2021 06:52:10 -0700"},
{"body":"Please see https:\/\/clojurescript.org\/news\/2021-05-24-release for details. \nThanks!\nDavid\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPC9Oac1zVxxYYbq7Zwd0c5mfh2xTHoog9eWnZey2EZfO48SnA%40mail.gmail.com.","subject":"[ClojureScript] ANN: ClojureScript 1.10.866 David Nolen Tue, 25 May 2021 06:36:21 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nPlease refer to the announce post for the details:\nhttps:\/\/clojurescript.org\/news\/2021-04-06-release\n\nAs always, feedback welcome!\n\nDavid\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPC9Oaf115PcQr3ZqGV42oXoPYJxgibt6mEj3PPUsU%2B17z_TNw%40mail.gmail.com.","subject":"[ClojureScript] ANN: ClojureScript 1.10.844 David Nolen Wed, 07 Apr 2021 05:19:22 -0700"},
{"body":"I have a ClojureScript application using Reagent and it has some state \nusing the reagent\/atom. \nWhat I'm seeing is that every single item from the atom is getting added as \nan attribute to the DOM.  This, of course, causes all sorts of React \nwarnings which I'd like to resolve.\n\nI'm not entirely clear on what causes any attribute to be attached to the \nDOM in Reagent and therefore I don't understand what is causing all of my \natom keys to be added to it.\n\nCan anyone comment on how this process work and possibly point me to some \ndocs?\n\nThanks!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/bd1325b4-49a0-4dc8-8590-9e272987cb45n%40googlegroups.com.","subject":"[ClojureScript] Attributes in Reagent?? Joseph Hance Thu, 11 Feb 2021 15:23:23 -0800"},
{"body":"Shameless self-promotion: here is a thing I did some years ago - \nhttp:\/\/langintro.com\/cljsbook\/ \n\nOn Thursday, January 21, 2021 at 1:39:50 AM UTC-8 vie...@gmail.com wrote:\n\n> Hello!\n>\n> I totally agree that allowing beginners to learn ClojureScript and \n> experimenting with code in the browser bring a huge benefit and  will \n> increase ClojureScript usage.\n>\n> Klipse addresses this challenge by providing:\n> - An online ClojureScript repl: http:\/\/app.klipse.tech\/\n> - A way to embed ClojureScript running snippet in a web page (blog posts, \n> documentation etc..)\n>\n> Several online ClojureScript tutorials leverage Klipse. Here are some \n> examples:\n>\n>    1. Reagent deep dive \n>    http:\/\/timothypratley.blogspot.com\/2017\/01\/reagent-deep-dive-part-1.html\n>    2. How to write macros \n>    https:\/\/blog.klipse.tech\/clojure\/2016\/05\/05\/macro-tutorial-3.html\n>\n> On Friday, 9 October 2020 at 17:24:12 UTC+3 hexagonr...@gmail.com wrote:\n>\n>> Hi. I am new to ClojureScript. Here is my story so far. It highlights the \n>> unnecessary hurdles a new ClojureScript programmer has to overcome. I hope \n>> this helps make the ClojureScript better for everyone.\n>>\n>> After reading SICP \n>> <https:\/\/en.wikipedia.org\/wiki\/Structure_and_Interpretation_of_Computer_Programs>\n>>  \n>> and \"On Lisp <https:\/\/en.wikipedia.org\/wiki\/On_Lisp>\" I am quite excited \n>> about lisp especially about lisp macros. The web is a very attractive \n>> platform to develop for. One day I set out to find an intersection of the \n>> two. A quick search returned a number of options and ClojureScript was one \n>> of them.\n>>\n>> # Finding a tutorial\n>> Every Lisp dialect is somewhat different from the rest and I had no prior \n>> experience with Clojure. How does one pick up a new programming language? I \n>> needed to find some kind of tutorial or introductory book. Something that \n>> would at the very least teach me the syntax and semantics of the language, \n>> the builtins and essential parts of the standard library. Ideally it would \n>> also teach me some common idioms. I tried to find a link to such a \n>> book\/tutorial on the https:\/\/clojurescript.org website, but failed. \n>> There is a prominently displayed \"Get Started!\" button, but it currently \n>> points to a page that teaches you how to install ClojureScript and, for \n>> some reason, how to do \"Production Builds\", but does not even cover the \n>> entire syntax of ClojureScript. Nor does it contain links to more complete \n>> introductory materials. I did eventually discover the amazing ClojureScript \n>> Unraveled <https:\/\/funcool.github.io\/clojurescript-unraveled\/>. Only \n>> later did I find out that the link was there all along, but it was buried \n>> where I would have never guessed to look: the \"community\" tab of the \n>> https:\/\/clojurescript.org website. When I think \"tutorial\" I don't think \n>> \"community\", when I read \"community\" I don't expect to find a tutorial \n>> there.\n>>\n>> Some examples for comparison:\n>> - https:\/\/elm-lang.org has a big and obvious \"Tutorial\" button on its \n>> homepage\n>> - https:\/\/www.haskell.org has an interactive tutorial built into its \n>> homepage. After you chew through it, the tutorial suggests you look in the \n>> \"Documentation\" section of the website that contains links to books, \n>> courses, tutorials etc.\n>>\n>> # Finding an online REPL\n>> OK I found a tutorial. To follow it I want to be able to actually type \n>> some code and see it print some output. I personally find it more \n>> convenient at this stage of learning a new language to use an online REPL \n>> rather than trying to figure out how to install the interpreter or the \n>> compiler locally. Even if installing is as simple as downloading and \n>> unpacking a tar or executing a bash script I still prefer an online REPL. I \n>> again struggled to find a link to an online REPL from the \n>> https:\/\/clojurescript.org website because it was also hidden on the \n>> \"Community\" tab. Also: out of the 3 REPLs advertised there only one (\n>> https:\/\/clojurescript.io) has an HTTPS version.\n>>\n>> Some examples for comparison:\n>> - https:\/\/www.python.org has a REPL built into its homepage\n>> - https:\/\/elm-lang.org has a big and obvious \"Try\" button\n>>\n>> # Installing the compiler\n>> OK I learned a bit of Clojure, I experimented a bit now I want to start \n>> developing in it. To do that I need to install the compiler on my machine. \n>> At this point I'm looking for links that say \"install\" or \"download\". Where \n>> do I find the installation instructions? \"Get Started!\", obviously.\n>>\n>> # The REPL hangs on Linux\n>> A little bit about my system: Linux+Firefox. It turns out that there is a \n>> known bug that causes the REPL to hang under this configuration. I was \n>> following the \"Get Started!\" tutorial. When I executed \"clj --main \n>> cljs.main --compile hello-world.core --repl\" I expected to see \"Hello \n>> world!\" printed in my terminal, but instead I saw something that looked \n>> like a REPL prompt but was completely unresponsive. The bug is even \n>> documented in the tutorial, but in a manner that took me an embarrassingly \n>> long time to find. Usually when a step in a tutorial fails the steps that \n>> follow it are irrelevant until you can figure out what went wrong so I did \n>> not continue to read the tutorial. The workaround for this bug is \n>> documented almost an entire page *below* the failing step. The \n>> workaround is also not visually highlighted - easily overlooked when \n>> skimming.\n>>\n>> # It is hard to figure out the REPL and compiler options\n>> For some reason instead of following the common convention of \n>> --option=value the compiler (clj --main cljs.main) invents its own command \n>> line syntax based on the EDN <https:\/\/github.com\/edn-format\/edn>. On top \n>> of that neither https:\/\/clojurescript.org\/reference\/repl-options nor \n>> https:\/\/clojurescript.org\/reference\/compiler-options nor \n>> https:\/\/clojurescript.org\/reference\/repl-and-main actually provides an \n>> example of specifying EDN on the command line. It currently just so happens \n>> that https:\/\/clojurescript.org\/guides\/quick-start does provide such an \n>> example, but only because it needed to document the workaround for the \n>> above mentioned bug. Also: in many places the extensible data notation is \n>> referred to by a cryptic 3-letter acronym EDN that probably has 300 \n>> different meanings. The acronym not being a link pointing to \n>> https:\/\/github.com\/edn-format\/edn does not help either. Also: \n>> edn-format.org is missing an HTTPS version.\n>>\n>> # Specifying :watch-fn on the command line results in a confusing error\n>> I specified --compile-opts '{:watch \"src\" :watch-fn (fn [] (println \n>> \"built!\"))}' on the command line and expected to see it print \"built!\" \n>> every time my source is rebuilt. Someone more savvy in how EDN works would \n>> know that this won't work, but to me this wasn't obvious until I tried it. \n>> Nothing was printed on the command line. It did not print \"built!\". It did \n>> not print any error messages. Luckily it did say: \"compilation log \n>> available at: out\/watch.log\". Opening this file gave me a hint as to what \n>> went wrong: \"java.lang.ClassCastException: clojure.lang.PersistentList \n>> cannot be cast to clojure.lang.IFn\" but the error message could certainly \n>> be much more newbie-friendly. Out of the two \n>> <https:\/\/clojurescript.org\/reference\/repl-options#watch-fn> places \n>> <https:\/\/clojurescript.org\/reference\/compiler-options#watch-fn> where \n>> watch-fn is documented only one mentions \"cljs.build.api\/watch\", but even \n>> then it does not actually link to https:\/\/cljs.github.io\/api\/\n>> compiler\/cljs.build.api\/#watch leaving me to wander what \n>> \"cljs.build.api\/watch\" means. Is it a file? Is it a command line tool? \n>> Apparently it is an API. How was I supposed to figure that out?\n>>\n>> # Hot reload\n>> \"Why was I messing with compiler options and :watch-fn?\" you might ask. \n>> What I actually wanted was hot reload. When I looked at the documentation \n>> for :watch-fn it looked to me as if the compiler already provides the hot \n>> reload functionality and no 3rd-party tools are necessary. Someone who \n>> knows a little bit about the compiler internals would know that :watch-fn \n>> is executed in the compiler instead of being executed in the context of my \n>> code, but this is not obvious from the documentation provided on \n>> https:\/\/clojurescript.org. I did eventually figure out that I do have to \n>> install an additional 3rd-party tool to get hot reload and went with \n>> https:\/\/figwheel.org.\n>>\n>> # Reference\/Guides split\n>> A number of miscellaneous documentation topics on \n>> https:\/\/clojurescript.org are split into two sections \"Reference\" and \n>> \"Guides\". Perhaps there is some deep wisdom to which documentation pages \n>> belong where but so far it eludes me and when I have a question I have to \n>> look in both sections. Perhaps merging them into one and naming it \n>> \"Documentation\" would be better.\n>>\n>> # Miscellaneous nitpicks\n>> - When I first saw your documentation I saw a list of links on the left \n>> and a list of links on the right. It did not take me long to figure out \n>> that one is the table of contents for the current document and another is a \n>> list of links to other documents in the same section but it wasn't \n>> immediately obvious to me either. A https:\/\/readthedocs.org like format \n>> would be less confusing. Example: https:\/\/docs.readthedocs.io\/\n>> en\/stable\/intro\/getting-started-with-sphinx.html\n>>\n>> - When I scroll the page the table of contents and links to other \n>> documentation topics scroll out of view instead of staying on the screen.\n>>\n>> - The landing pages for \"Reference\" and for \"Tools\" duplicate the list of \n>> documentation topics in that section, but not one-to-one. \n>> https:\/\/clojurescript.org\/reference\/documentation has a heading labeled \n>> \"API Documentation\" but this heading is not duplicated in the links on the \n>> left of the page. The \"Tools\" section of your website has pages for \n>> lein-cljsbuild and lein-figwheel, but there are no corresponding links on \n>> https:\/\/clojurescript.org\/tools\/tools\n>>\n>> -- Andrey Bienkowski\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/5ade4964-4962-4ebf-a208-e0e5b30aa86en%40googlegroups.com.","subject":"[ClojureScript] Re: Let's make ClojureScript more approachable for beginners jdavid.e...@gmail.com Sat, 23 Jan 2021 21:23:56 -0800"},
{"body":"I'm using the latest re-frame template:\n\n*lein new re-frame test-app +cider +handler +routes* \nI run\n\n*lein watch*\n\nand then I can connect through cider.\n\nBut once I run\n\n*lein release*\n\nto compile production javascript, I can no longer connect to the browser \nrepl unless I blow away everything shadow related in the project folder and \ndo a new \n\n*lein watch*\n\nAny insights are appreciated.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/392762a8-df81-4599-8f70-99791fd56aabn%40googlegroups.com.","subject":"[ClojureScript] Shadow CLJS won't connect to js runtime after lein release doyouun...@gmail.com Thu, 21 Jan 2021 13:31:59 -0800"},
{"body":"Hello!\n\nI totally agree that allowing beginners to learn ClojureScript and \nexperimenting with code in the browser bring a huge benefit and  will \nincrease ClojureScript usage. \nKlipse addresses this challenge by providing:\n- An online ClojureScript repl: http:\/\/app.klipse.tech\/\n- A way to embed ClojureScript running snippet in a web page (blog posts, \ndocumentation etc..)\n\nSeveral online ClojureScript tutorials leverage Klipse. Here are some \nexamples:\n\n   1. Reagent deep \n   dive http:\/\/timothypratley.blogspot.com\/2017\/01\/reagent-deep-dive-part-1.html\n   2. How to write \n   macros https:\/\/blog.klipse.tech\/clojure\/2016\/05\/05\/macro-tutorial-3.html\n\nOn Friday, 9 October 2020 at 17:24:12 UTC+3 hexagonr...@gmail.com wrote:\n\n> Hi. I am new to ClojureScript. Here is my story so far. It highlights the \n> unnecessary hurdles a new ClojureScript programmer has to overcome. I hope \n> this helps make the ClojureScript better for everyone.\n>\n> After reading SICP \n> <https:\/\/en.wikipedia.org\/wiki\/Structure_and_Interpretation_of_Computer_Programs>\n>  \n> and \"On Lisp <https:\/\/en.wikipedia.org\/wiki\/On_Lisp>\" I am quite excited \n> about lisp especially about lisp macros. The web is a very attractive \n> platform to develop for. One day I set out to find an intersection of the \n> two. A quick search returned a number of options and ClojureScript was one \n> of them.\n>\n> # Finding a tutorial\n> Every Lisp dialect is somewhat different from the rest and I had no prior \n> experience with Clojure. How does one pick up a new programming language? I \n> needed to find some kind of tutorial or introductory book. Something that \n> would at the very least teach me the syntax and semantics of the language, \n> the builtins and essential parts of the standard library. Ideally it would \n> also teach me some common idioms. I tried to find a link to such a \n> book\/tutorial on the https:\/\/clojurescript.org website, but failed. There \n> is a prominently displayed \"Get Started!\" button, but it currently points \n> to a page that teaches you how to install ClojureScript and, for some \n> reason, how to do \"Production Builds\", but does not even cover the entire \n> syntax of ClojureScript. Nor does it contain links to more complete \n> introductory materials. I did eventually discover the amazing ClojureScript \n> Unraveled <https:\/\/funcool.github.io\/clojurescript-unraveled\/>. Only \n> later did I find out that the link was there all along, but it was buried \n> where I would have never guessed to look: the \"community\" tab of the \n> https:\/\/clojurescript.org website. When I think \"tutorial\" I don't think \n> \"community\", when I read \"community\" I don't expect to find a tutorial \n> there.\n>\n> Some examples for comparison:\n> - https:\/\/elm-lang.org has a big and obvious \"Tutorial\" button on its \n> homepage\n> - https:\/\/www.haskell.org has an interactive tutorial built into its \n> homepage. After you chew through it, the tutorial suggests you look in the \n> \"Documentation\" section of the website that contains links to books, \n> courses, tutorials etc.\n>\n> # Finding an online REPL\n> OK I found a tutorial. To follow it I want to be able to actually type \n> some code and see it print some output. I personally find it more \n> convenient at this stage of learning a new language to use an online REPL \n> rather than trying to figure out how to install the interpreter or the \n> compiler locally. Even if installing is as simple as downloading and \n> unpacking a tar or executing a bash script I still prefer an online REPL. I \n> again struggled to find a link to an online REPL from the \n> https:\/\/clojurescript.org website because it was also hidden on the \n> \"Community\" tab. Also: out of the 3 REPLs advertised there only one (\n> https:\/\/clojurescript.io) has an HTTPS version.\n>\n> Some examples for comparison:\n> - https:\/\/www.python.org has a REPL built into its homepage\n> - https:\/\/elm-lang.org has a big and obvious \"Try\" button\n>\n> # Installing the compiler\n> OK I learned a bit of Clojure, I experimented a bit now I want to start \n> developing in it. To do that I need to install the compiler on my machine. \n> At this point I'm looking for links that say \"install\" or \"download\". Where \n> do I find the installation instructions? \"Get Started!\", obviously.\n>\n> # The REPL hangs on Linux\n> A little bit about my system: Linux+Firefox. It turns out that there is a \n> known bug that causes the REPL to hang under this configuration. I was \n> following the \"Get Started!\" tutorial. When I executed \"clj --main \n> cljs.main --compile hello-world.core --repl\" I expected to see \"Hello \n> world!\" printed in my terminal, but instead I saw something that looked \n> like a REPL prompt but was completely unresponsive. The bug is even \n> documented in the tutorial, but in a manner that took me an embarrassingly \n> long time to find. Usually when a step in a tutorial fails the steps that \n> follow it are irrelevant until you can figure out what went wrong so I did \n> not continue to read the tutorial. The workaround for this bug is \n> documented almost an entire page *below* the failing step. The workaround \n> is also not visually highlighted - easily overlooked when skimming.\n>\n> # It is hard to figure out the REPL and compiler options\n> For some reason instead of following the common convention of \n> --option=value the compiler (clj --main cljs.main) invents its own command \n> line syntax based on the EDN <https:\/\/github.com\/edn-format\/edn>. On top \n> of that neither https:\/\/clojurescript.org\/reference\/repl-options nor \n> https:\/\/clojurescript.org\/reference\/compiler-options nor \n> https:\/\/clojurescript.org\/reference\/repl-and-main actually provides an \n> example of specifying EDN on the command line. It currently just so happens \n> that https:\/\/clojurescript.org\/guides\/quick-start does provide such an \n> example, but only because it needed to document the workaround for the \n> above mentioned bug. Also: in many places the extensible data notation is \n> referred to by a cryptic 3-letter acronym EDN that probably has 300 \n> different meanings. The acronym not being a link pointing to \n> https:\/\/github.com\/edn-format\/edn does not help either. Also: \n> edn-format.org is missing an HTTPS version.\n>\n> # Specifying :watch-fn on the command line results in a confusing error\n> I specified --compile-opts '{:watch \"src\" :watch-fn (fn [] (println \n> \"built!\"))}' on the command line and expected to see it print \"built!\" \n> every time my source is rebuilt. Someone more savvy in how EDN works would \n> know that this won't work, but to me this wasn't obvious until I tried it. \n> Nothing was printed on the command line. It did not print \"built!\". It did \n> not print any error messages. Luckily it did say: \"compilation log \n> available at: out\/watch.log\". Opening this file gave me a hint as to what \n> went wrong: \"java.lang.ClassCastException: clojure.lang.PersistentList \n> cannot be cast to clojure.lang.IFn\" but the error message could certainly \n> be much more newbie-friendly. Out of the two \n> <https:\/\/clojurescript.org\/reference\/repl-options#watch-fn> places \n> <https:\/\/clojurescript.org\/reference\/compiler-options#watch-fn> where \n> watch-fn is documented only one mentions \"cljs.build.api\/watch\", but even \n> then it does not actually link to https:\/\/cljs.github.io\/api\/\n> compiler\/cljs.build.api\/#watch leaving me to wander what \n> \"cljs.build.api\/watch\" means. Is it a file? Is it a command line tool? \n> Apparently it is an API. How was I supposed to figure that out?\n>\n> # Hot reload\n> \"Why was I messing with compiler options and :watch-fn?\" you might ask. \n> What I actually wanted was hot reload. When I looked at the documentation \n> for :watch-fn it looked to me as if the compiler already provides the hot \n> reload functionality and no 3rd-party tools are necessary. Someone who \n> knows a little bit about the compiler internals would know that :watch-fn \n> is executed in the compiler instead of being executed in the context of my \n> code, but this is not obvious from the documentation provided on \n> https:\/\/clojurescript.org. I did eventually figure out that I do have to \n> install an additional 3rd-party tool to get hot reload and went with \n> https:\/\/figwheel.org.\n>\n> # Reference\/Guides split\n> A number of miscellaneous documentation topics on \n> https:\/\/clojurescript.org are split into two sections \"Reference\" and \n> \"Guides\". Perhaps there is some deep wisdom to which documentation pages \n> belong where but so far it eludes me and when I have a question I have to \n> look in both sections. Perhaps merging them into one and naming it \n> \"Documentation\" would be better.\n>\n> # Miscellaneous nitpicks\n> - When I first saw your documentation I saw a list of links on the left \n> and a list of links on the right. It did not take me long to figure out \n> that one is the table of contents for the current document and another is a \n> list of links to other documents in the same section but it wasn't \n> immediately obvious to me either. A https:\/\/readthedocs.org like format \n> would be less confusing. Example: https:\/\/docs.readthedocs.io\/\n> en\/stable\/intro\/getting-started-with-sphinx.html\n>\n> - When I scroll the page the table of contents and links to other \n> documentation topics scroll out of view instead of staying on the screen.\n>\n> - The landing pages for \"Reference\" and for \"Tools\" duplicate the list of \n> documentation topics in that section, but not one-to-one. \n> https:\/\/clojurescript.org\/reference\/documentation has a heading labeled \n> \"API Documentation\" but this heading is not duplicated in the links on the \n> left of the page. The \"Tools\" section of your website has pages for \n> lein-cljsbuild and lein-figwheel, but there are no corresponding links on \n> https:\/\/clojurescript.org\/tools\/tools\n>\n> -- Andrey Bienkowski\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/14d6049d-e20e-4862-9a27-68221ac090b9n%40googlegroups.com.","subject":"[ClojureScript] Re: Let's make ClojureScript more approachable for beginners Yehonathan Sharvit Thu, 21 Jan 2021 01:39:56 -0800"},
{"body":"Hello all,\n\nIt's that time of year again! Please complete the State of Clojure 2021 \nsurvey, an important tool for tracking our community over the last decade. \nhttps:\/\/www.surveymonkey.com\/r\/clojure2021\n\nThanks!\n\nAlex\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/02e91b66-9d63-4523-ae08-db3718255d4bn%40googlegroups.com.","subject":"[ClojureScript] State of Clojure 2021 survey 'Alex Miller' via ClojureScript Mon, 18 Jan 2021 07:15:52 -0800"},
{"body":"I actually spent some time looking at this last month for whether to \ninclude in Clojure 1.10.2. While the patch does \"work\", I am somewhat \nundecided still about whether it's the best approach so I decided to wait \nuntil 1.11 to consider it more, but it is high on the list. Feel free to \nvote at \nhttps:\/\/ask.clojure.org\/index.php\/751\/clojure-java-shell-sh-hangs-calling-xdg-open. \nBTW, it's high on my list because it has votes on https:\/\/ask.clojure.org - \nplease make your priorities known there, we're looking at vote counts!  \n\nAlex\n\nOn Sunday, October 11, 2020 at 10:37:40 AM UTC-5 hexagonr...@gmail.com \nwrote:\n\n> > The REPL hangs on Linux\n>\n> The patch for this bug have been available for over a year (\n> https:\/\/clojure.atlassian.net\/browse\/CLJ-2493). I hope the maintainers \n> eventually get around to merging it.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/0bdfeeee-1c0e-496b-93f7-f918f2fe83c4n%40googlegroups.com.","subject":"[ClojureScript] Re: Let's make ClojureScript more approachable for beginners 'Alex Miller' via ClojureScript Mon, 18 Jan 2021 07:12:39 -0800"},
{"body":"Hi all,\n\npreviously I've been using the following to compile the project \nclj -m cljs.main --optimizations whitespace --compile-opts \nscripts\/scraper.edn --output-to \n~\/m\/woof\/woof-playground\/resources\/public\/scraper\/scraper.js -c woof.browser\n\nbut after clojure cli update I am getting\nWARNING: When invoking clojure.main, use -M\n \nhow should I change my script to get rid of it?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/c7bec176-8536-40ec-9982-501d5ba3d45fn%40googlegroups.com.","subject":"[ClojureScript] clojure cli tools \"WARNING: When invoking clojure.main, use -M\" Andrew Sernyak Thu, 17 Dec 2020 09:47:39 -0800"},
{"body":"Howdy Clojurians,\n\n  Spatial Informatics Group (SIG) is seeking a new Full Stack Web\nDeveloper to build Clojure\/Clojurescript web applications in the realm\nof environmental mapping and modeling. \nThe position is fully remote, but applicants with work hours that\ncorrelate well with North American time zones are preferred.\n\nSIG is an environmental think-tank, comprised of around 35 core members\nwith backgrounds in natural resource management, city and urban\nplanning, wildland fire science, hydrologic modeling, carbon credit\ntrading, forest management, remote sensing, computer science, and\nenvironmental mapping and modeling.\n\nApplicants should be comfortable building Clojure web apps built on a\nstack like Ring+Jetty+Reagent+Herb+OpenLayers+next.jdbc+Postgresql,\nbuilding projects with the Clojure CLI tools (deps.edn), collaborating\nover Github\/Gitlab with clean branch management and code reviews, and\ndeploying to remote GNU\/Linux VMs over SSH. Strong communication skills\nare a must since all of our work will be done online.\n\nExperience with GIS and geospatial analysis and data sharing with tools\nlike GDAL\/OGR, PostGIS, and GeoServer are a definite plus.\n\nApply here:\n\n  https:\/\/boards.greenhouse.io\/spatialinformaticsgroup\/jobs\/4223818003\n\nLearn more about SIG here:\n\n  https:\/\/sig-gis.com\/\n\nHappy hacking,\n  Gary\n\n-- \nGPG Key ID: 7BC158ED\nUse `gpg --search-keys lambdatronic' to find me\nProtect yourself from surveillance: https:\/\/emailselfdefense.fsf.org\n=======================================================================\n()  ascii ribbon campaign - against html e-mail\n\/\\  www.asciiribbon.org   - against proprietary attachments\n\nWhy is HTML email a security nightmare? See https:\/\/useplaintext.email\/\n\nPlease avoid sending me MS-Office attachments.\nSee http:\/\/www.gnu.org\/philosophy\/no-word-attachments.html\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/87h7p5dxak.fsf%40gmail.com.","subject":"[ClojureScript] [ANN] Job Opening for Full Stack Web Developer Gary Johnson Tue, 01 Dec 2020 13:36:05 -0800"},
{"body":"---------- Forwarded message ---------\nFrom: Sergei Udris <Unknown>\nDate: Saturday, November 21, 2020 at 12:05:59 PM UTC+3\nSubject: cljctools\/peernode: an example core.async program exposing js-ipfs \ndaemon's pubsub over rsocket (written in clojurescript, runs on nodejs)\nTo: Clojure <Unknown> \n\nhttps:\/\/github.com\/cljctools\/peernode\n\nSharing as an example\/reference of using core.async and rsocket. Runs on \nnodejs.\nDetails and links to IPFS and RSocket in readme.\n\nReddit post:\n\nhttps:\/\/www.reddit.com\/r\/Clojure\/comments\/jy7jtl\/cljctoolspeernode_an_example_coreasync_program\/\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/ef66c72f-ba73-4cdb-8689-0c4287287fb3n%40googlegroups.com.","subject":"[ClojureScript] cljctools\/peernode: an example core.async program exposing js-ipfs daemon's pubsub over rsocket (written in clojurescript, runs on nodejs) Sergei Udris Sat, 21 Nov 2020 01:08:40 -0800"},
{"body":"> The REPL hangs on Linux\n\nThe patch for this bug have been available for over a year (\nhttps:\/\/clojure.atlassian.net\/browse\/CLJ-2493). I hope the maintainers \neventually get around to merging it. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/999330ab-822f-4b60-a266-5ebe377c0238n%40googlegroups.com.","subject":"[ClojureScript] Re: Let's make ClojureScript more approachable for beginners Andrey Bienkowski Sun, 11 Oct 2020 08:38:17 -0700"},
{"body":"Did wonder about Reference\/Guides myself. But at the end of the day, it's \nsuch a tiny detail, not a problem, the search engine serves the right page \nanyway. \nAs of now, I'm not a contributor, only a mere user of the clojure \necosystem. But a happy one - given what a treat and gift this super \npowerful abstraction is.\nNot going to pile up wisdom, just want to simply say: we are gifted an \nimmutable lisp that is one language and reaches everywhere java and js do. \nAnd we are given core.async. So that outweighs any kind of learning \ncurve\/setup IMHO.\nBut yes, it's a bit less detailed. Well, I can only speak for myself - and \nI'm not complaining, because this kind of work (guides\/tutorials) is \ntedious and ungrateful. And we are always kind of free to contribute\/create \nnayhting that would make \"getting into clojure\" more cakewalk-y.\nAnd another thought\/observation: usually (and in my case) people discover \nclojure, when they are desperate, frustrated. And that happens after we - \nprogrammers -  go through some issues. Simply put, when we get to clojure, \nwe already know java\/js ecosystems\/tools and are less dependent on a smooth \nentry point. But again, it does not mean things should not improve. Just an \nobservation. \n* [Deleted previous post to remove unnecessary profanity (one word change). \nSorry, felt need to correct myself if possible. Will be more focused next \ntime]\n\nOn Friday, October 9, 2020 at 5:24:12 PM UTC+3 hexagonr...@gmail.com wrote:\n\n> Hi. I am new to ClojureScript. Here is my story so far. It highlights the \n> unnecessary hurdles a new ClojureScript programmer has to overcome. I hope \n> this helps make the ClojureScript better for everyone.\n>\n> After reading SICP \n> <https:\/\/en.wikipedia.org\/wiki\/Structure_and_Interpretation_of_Computer_Programs>\n>  \n> and \"On Lisp <https:\/\/en.wikipedia.org\/wiki\/On_Lisp>\" I am quite excited \n> about lisp especially about lisp macros. The web is a very attractive \n> platform to develop for. One day I set out to find an intersection of the \n> two. A quick search returned a number of options and ClojureScript was one \n> of them.\n>\n> # Finding a tutorial\n> Every Lisp dialect is somewhat different from the rest and I had no prior \n> experience with Clojure. How does one pick up a new programming language? I \n> needed to find some kind of tutorial or introductory book. Something that \n> would at the very least teach me the syntax and semantics of the language, \n> the builtins and essential parts of the standard library. Ideally it would \n> also teach me some common idioms. I tried to find a link to such a \n> book\/tutorial on the https:\/\/clojurescript.org website, but failed. There \n> is a prominently displayed \"Get Started!\" button, but it currently points \n> to a page that teaches you how to install ClojureScript and, for some \n> reason, how to do \"Production Builds\", but does not even cover the entire \n> syntax of ClojureScript. Nor does it contain links to more complete \n> introductory materials. I did eventually discover the amazing ClojureScript \n> Unraveled <https:\/\/funcool.github.io\/clojurescript-unraveled\/>. Only \n> later did I find out that the link was there all along, but it was buried \n> where I would have never guessed to look: the \"community\" tab of the \n> https:\/\/clojurescript.org website. When I think \"tutorial\" I don't think \n> \"community\", when I read \"community\" I don't expect to find a tutorial \n> there.\n>\n> Some examples for comparison:\n> - https:\/\/elm-lang.org has a big and obvious \"Tutorial\" button on its \n> homepage\n> - https:\/\/www.haskell.org has an interactive tutorial built into its \n> homepage. After you chew through it, the tutorial suggests you look in the \n> \"Documentation\" section of the website that contains links to books, \n> courses, tutorials etc.\n>\n> # Finding an online REPL\n> OK I found a tutorial. To follow it I want to be able to actually type \n> some code and see it print some output. I personally find it more \n> convenient at this stage of learning a new language to use an online REPL \n> rather than trying to figure out how to install the interpreter or the \n> compiler locally. Even if installing is as simple as downloading and \n> unpacking a tar or executing a bash script I still prefer an online REPL. I \n> again struggled to find a link to an online REPL from the \n> https:\/\/clojurescript.org website because it was also hidden on the \n> \"Community\" tab. Also: out of the 3 REPLs advertised there only one (\n> https:\/\/clojurescript.io) has an HTTPS version.\n>\n> Some examples for comparison:\n> - https:\/\/www.python.org has a REPL built into its homepage\n> - https:\/\/elm-lang.org has a big and obvious \"Try\" button\n>\n> # Installing the compiler\n> OK I learned a bit of Clojure, I experimented a bit now I want to start \n> developing in it. To do that I need to install the compiler on my machine. \n> At this point I'm looking for links that say \"install\" or \"download\". Where \n> do I find the installation instructions? \"Get Started!\", obviously.\n>\n> # The REPL hangs on Linux\n> A little bit about my system: Linux+Firefox. It turns out that there is a \n> known bug that causes the REPL to hang under this configuration. I was \n> following the \"Get Started!\" tutorial. When I executed \"clj --main \n> cljs.main --compile hello-world.core --repl\" I expected to see \"Hello \n> world!\" printed in my terminal, but instead I saw something that looked \n> like a REPL prompt but was completely unresponsive. The bug is even \n> documented in the tutorial, but in a manner that took me an embarrassingly \n> long time to find. Usually when a step in a tutorial fails the steps that \n> follow it are irrelevant until you can figure out what went wrong so I did \n> not continue to read the tutorial. The workaround for this bug is \n> documented almost an entire page *below* the failing step. The workaround \n> is also not visually highlighted - easily overlooked when skimming.\n>\n> # It is hard to figure out the REPL and compiler options\n> For some reason instead of following the common convention of \n> --option=value the compiler (clj --main cljs.main) invents its own command \n> line syntax based on the EDN <https:\/\/github.com\/edn-format\/edn>. On top \n> of that neither https:\/\/clojurescript.org\/reference\/repl-options nor \n> https:\/\/clojurescript.org\/reference\/compiler-options nor \n> https:\/\/clojurescript.org\/reference\/repl-and-main actually provides an \n> example of specifying EDN on the command line. It currently just so happens \n> that https:\/\/clojurescript.org\/guides\/quick-start does provide such an \n> example, but only because it needed to document the workaround for the \n> above mentioned bug. Also: in many places the extensible data notation is \n> referred to by a cryptic 3-letter acronym EDN that probably has 300 \n> different meanings. The acronym not being a link pointing to \n> https:\/\/github.com\/edn-format\/edn does not help either. Also: \n> edn-format.org is missing an HTTPS version.\n>\n> # Specifying :watch-fn on the command line results in a confusing error\n> I specified --compile-opts '{:watch \"src\" :watch-fn (fn [] (println \n> \"built!\"))}' on the command line and expected to see it print \"built!\" \n> every time my source is rebuilt. Someone more savvy in how EDN works would \n> know that this won't work, but to me this wasn't obvious until I tried it. \n> Nothing was printed on the command line. It did not print \"built!\". It did \n> not print any error messages. Luckily it did say: \"compilation log \n> available at: out\/watch.log\". Opening this file gave me a hint as to what \n> went wrong: \"java.lang.ClassCastException: clojure.lang.PersistentList \n> cannot be cast to clojure.lang.IFn\" but the error message could certainly \n> be much more newbie-friendly. Out of the two \n> <https:\/\/clojurescript.org\/reference\/repl-options#watch-fn> places \n> <https:\/\/clojurescript.org\/reference\/compiler-options#watch-fn> where \n> watch-fn is documented only one mentions \"cljs.build.api\/watch\", but even \n> then it does not actually link to https:\/\/cljs.github.io\/api\/\n> compiler\/cljs.build.api\/#watch leaving me to wander what \n> \"cljs.build.api\/watch\" means. Is it a file? Is it a command line tool? \n> Apparently it is an API. How was I supposed to figure that out?\n>\n> # Hot reload\n> \"Why was I messing with compiler options and :watch-fn?\" you might ask. \n> What I actually wanted was hot reload. When I looked at the documentation \n> for :watch-fn it looked to me as if the compiler already provides the hot \n> reload functionality and no 3rd-party tools are necessary. Someone who \n> knows a little bit about the compiler internals would know that :watch-fn \n> is executed in the compiler instead of being executed in the context of my \n> code, but this is not obvious from the documentation provided on \n> https:\/\/clojurescript.org. I did eventually figure out that I do have to \n> install an additional 3rd-party tool to get hot reload and went with \n> https:\/\/figwheel.org.\n>\n> # Reference\/Guides split\n> A number of miscellaneous documentation topics on \n> https:\/\/clojurescript.org are split into two sections \"Reference\" and \n> \"Guides\". Perhaps there is some deep wisdom to which documentation pages \n> belong where but so far it eludes me and when I have a question I have to \n> look in both sections. Perhaps merging them into one and naming it \n> \"Documentation\" would be better.\n>\n> # Miscellaneous nitpicks\n> - When I first saw your documentation I saw a list of links on the left \n> and a list of links on the right. It did not take me long to figure out \n> that one is the table of contents for the current document and another is a \n> list of links to other documents in the same section but it wasn't \n> immediately obvious to me either. A https:\/\/readthedocs.org like format \n> would be less confusing. Example: https:\/\/docs.readthedocs.io\/\n> en\/stable\/intro\/getting-started-with-sphinx.html\n>\n> - When I scroll the page the table of contents and links to other \n> documentation topics scroll out of view instead of staying on the screen.\n>\n> - The landing pages for \"Reference\" and for \"Tools\" duplicate the list of \n> documentation topics in that section, but not one-to-one. \n> https:\/\/clojurescript.org\/reference\/documentation has a heading labeled \n> \"API Documentation\" but this heading is not duplicated in the links on the \n> left of the page. The \"Tools\" section of your website has pages for \n> lein-cljsbuild and lein-figwheel, but there are no corresponding links on \n> https:\/\/clojurescript.org\/tools\/tools\n>\n> -- Andrey Bienkowski\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/e5dba5b6-4012-4a7d-ad34-3408d7a1b383n%40googlegroups.com.","subject":"[ClojureScript] Re: Let's make ClojureScript more approachable for beginners Sergei Udris Sat, 10 Oct 2020 05:34:34 -0700"},
{"body":"Did wonder about Reference\/Guides myself. But at the end of the day, it's\nsuch a tiny detail, not a problem, the search engine serves the right page\nanyway.\nAs of now, I'm not a contributor, only a mere user of the clojure\necosystem. But a happy one - given what a treat and gift this super\npowerful abstraction is.\nNot going to pile up wisdom, just want to simply say: we are gifted an\nimmutable lisp that is one language and reaches everywhere java and js do.\nAnd we are given core.async. So that outweighs any kind of learning\ncurve\/setup IMHO.\nBut yes, it's a bit less detailed. Well, I can only speak for myself - and\nI'm not complaining, because this kind of work (guides\/tutorials) is\ntedious and ungrateful. And we are always kind of free to contribute\/create\nnayhting that would make \"getting into clojure\" more cakewalk-y.\nAnd another thought\/observation: usually (and in my case) people discover\nclojure, when they are desperate, frustrated. ANd that happens after we -\nprogrammers-  go through some sh*t. Simply put, when we get to clojure, we\nalready know java\/js ecosystems\/tools and are less dependent on a smooth\nentry point. But again, it does not mean things should not improve. Just an\nobservation. \n\n\nOn Fri, Oct 9, 2020 at 5:24 PM Andrey Bienkowski <hexagonrecurs...@gmail.com>\nwrote:\n\n> Hi. I am new to ClojureScript. Here is my story so far. It highlights the\n> unnecessary hurdles a new ClojureScript programmer has to overcome. I hope\n> this helps make the ClojureScript better for everyone.\n>\n> After reading SICP\n> <https:\/\/en.wikipedia.org\/wiki\/Structure_and_Interpretation_of_Computer_Programs>\n> and \"On Lisp <https:\/\/en.wikipedia.org\/wiki\/On_Lisp>\" I am quite excited\n> about lisp especially about lisp macros. The web is a very attractive\n> platform to develop for. One day I set out to find an intersection of the\n> two. A quick search returned a number of options and ClojureScript was one\n> of them.\n>\n> # Finding a tutorial\n> Every Lisp dialect is somewhat different from the rest and I had no prior\n> experience with Clojure. How does one pick up a new programming language? I\n> needed to find some kind of tutorial or introductory book. Something that\n> would at the very least teach me the syntax and semantics of the language,\n> the builtins and essential parts of the standard library. Ideally it would\n> also teach me some common idioms. I tried to find a link to such a\n> book\/tutorial on the https:\/\/clojurescript.org website, but failed. There\n> is a prominently displayed \"Get Started!\" button, but it currently points\n> to a page that teaches you how to install ClojureScript and, for some\n> reason, how to do \"Production Builds\", but does not even cover the entire\n> syntax of ClojureScript. Nor does it contain links to more complete\n> introductory materials. I did eventually discover the amazing ClojureScript\n> Unraveled <https:\/\/funcool.github.io\/clojurescript-unraveled\/>. Only\n> later did I find out that the link was there all along, but it was buried\n> where I would have never guessed to look: the \"community\" tab of the\n> https:\/\/clojurescript.org website. When I think \"tutorial\" I don't think\n> \"community\", when I read \"community\" I don't expect to find a tutorial\n> there.\n>\n> Some examples for comparison:\n> - https:\/\/elm-lang.org has a big and obvious \"Tutorial\" button on its\n> homepage\n> - https:\/\/www.haskell.org has an interactive tutorial built into its\n> homepage. After you chew through it, the tutorial suggests you look in the\n> \"Documentation\" section of the website that contains links to books,\n> courses, tutorials etc.\n>\n> # Finding an online REPL\n> OK I found a tutorial. To follow it I want to be able to actually type\n> some code and see it print some output. I personally find it more\n> convenient at this stage of learning a new language to use an online REPL\n> rather than trying to figure out how to install the interpreter or the\n> compiler locally. Even if installing is as simple as downloading and\n> unpacking a tar or executing a bash script I still prefer an online REPL. I\n> again struggled to find a link to an online REPL from the\n> https:\/\/clojurescript.org website because it was also hidden on the\n> \"Community\" tab. Also: out of the 3 REPLs advertised there only one (\n> https:\/\/clojurescript.io) has an HTTPS version.\n>\n> Some examples for comparison:\n> - https:\/\/www.python.org has a REPL built into its homepage\n> - https:\/\/elm-lang.org has a big and obvious \"Try\" button\n>\n> # Installing the compiler\n> OK I learned a bit of Clojure, I experimented a bit now I want to start\n> developing in it. To do that I need to install the compiler on my machine.\n> At this point I'm looking for links that say \"install\" or \"download\". Where\n> do I find the installation instructions? \"Get Started!\", obviously.\n>\n> # The REPL hangs on Linux\n> A little bit about my system: Linux+Firefox. It turns out that there is a\n> known bug that causes the REPL to hang under this configuration. I was\n> following the \"Get Started!\" tutorial. When I executed \"clj --main\n> cljs.main --compile hello-world.core --repl\" I expected to see \"Hello\n> world!\" printed in my terminal, but instead I saw something that looked\n> like a REPL prompt but was completely unresponsive. The bug is even\n> documented in the tutorial, but in a manner that took me an embarrassingly\n> long time to find. Usually when a step in a tutorial fails the steps that\n> follow it are irrelevant until you can figure out what went wrong so I did\n> not continue to read the tutorial. The workaround for this bug is\n> documented almost an entire page *below* the failing step. The workaround\n> is also not visually highlighted - easily overlooked when skimming.\n>\n> # It is hard to figure out the REPL and compiler options\n> For some reason instead of following the common convention of\n> --option=value the compiler (clj --main cljs.main) invents its own command\n> line syntax based on the EDN <https:\/\/github.com\/edn-format\/edn>. On top\n> of that neither https:\/\/clojurescript.org\/reference\/repl-options nor\n> https:\/\/clojurescript.org\/reference\/compiler-options nor\n> https:\/\/clojurescript.org\/reference\/repl-and-main actually provides an\n> example of specifying EDN on the command line. It currently just so happens\n> that https:\/\/clojurescript.org\/guides\/quick-start does provide such an\n> example, but only because it needed to document the workaround for the\n> above mentioned bug. Also: in many places the extensible data notation is\n> referred to by a cryptic 3-letter acronym EDN that probably has 300\n> different meanings. The acronym not being a link pointing to\n> https:\/\/github.com\/edn-format\/edn does not help either. Also:\n> edn-format.org is missing an HTTPS version.\n>\n> # Specifying :watch-fn on the command line results in a confusing error\n> I specified --compile-opts '{:watch \"src\" :watch-fn (fn [] (println\n> \"built!\"))}' on the command line and expected to see it print \"built!\"\n> every time my source is rebuilt. Someone more savvy in how EDN works would\n> know that this won't work, but to me this wasn't obvious until I tried it.\n> Nothing was printed on the command line. It did not print \"built!\". It did\n> not print any error messages. Luckily it did say: \"compilation log\n> available at: out\/watch.log\". Opening this file gave me a hint as to what\n> went wrong: \"java.lang.ClassCastException: clojure.lang.PersistentList\n> cannot be cast to clojure.lang.IFn\" but the error message could certainly\n> be much more newbie-friendly. Out of the two\n> <https:\/\/clojurescript.org\/reference\/repl-options#watch-fn> places\n> <https:\/\/clojurescript.org\/reference\/compiler-options#watch-fn> where\n> watch-fn is documented only one mentions \"cljs.build.api\/watch\", but even\n> then it does not actually link to https:\/\/cljs.github.io\/api\/\n> compiler\/cljs.build.api\/#watch leaving me to wander what\n> \"cljs.build.api\/watch\" means. Is it a file? Is it a command line tool?\n> Apparently it is an API. How was I supposed to figure that out?\n>\n> # Hot reload\n> \"Why was I messing with compiler options and :watch-fn?\" you might ask.\n> What I actually wanted was hot reload. When I looked at the documentation\n> for :watch-fn it looked to me as if the compiler already provides the hot\n> reload functionality and no 3rd-party tools are necessary. Someone who\n> knows a little bit about the compiler internals would know that :watch-fn\n> is executed in the compiler instead of being executed in the context of my\n> code, but this is not obvious from the documentation provided on\n> https:\/\/clojurescript.org. I did eventually figure out that I do have to\n> install an additional 3rd-party tool to get hot reload and went with\n> https:\/\/figwheel.org.\n>\n> # Reference\/Guides split\n> A number of miscellaneous documentation topics on\n> https:\/\/clojurescript.org are split into two sections \"Reference\" and\n> \"Guides\". Perhaps there is some deep wisdom to which documentation pages\n> belong where but so far it eludes me and when I have a question I have to\n> look in both sections. Perhaps merging them into one and naming it\n> \"Documentation\" would be better.\n>\n> # Miscellaneous nitpicks\n> - When I first saw your documentation I saw a list of links on the left\n> and a list of links on the right. It did not take me long to figure out\n> that one is the table of contents for the current document and another is a\n> list of links to other documents in the same section but it wasn't\n> immediately obvious to me either. A https:\/\/readthedocs.org like format\n> would be less confusing. Example: https:\/\/docs.readthedocs.io\/\n> en\/stable\/intro\/getting-started-with-sphinx.html\n>\n> - When I scroll the page the table of contents and links to other\n> documentation topics scroll out of view instead of staying on the screen.\n>\n> - The landing pages for \"Reference\" and for \"Tools\" duplicate the list of\n> documentation topics in that section, but not one-to-one.\n> https:\/\/clojurescript.org\/reference\/documentation has a heading labeled\n> \"API Documentation\" but this heading is not duplicated in the links on the\n> left of the page. The \"Tools\" section of your website has pages for\n> lein-cljsbuild and lein-figwheel, but there are no corresponding links on\n> https:\/\/clojurescript.org\/tools\/tools\n>\n> -- Andrey Bienkowski\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/eb0efca6-33d4-4321-a75b-ed1c35ba45efn%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/eb0efca6-33d4-4321-a75b-ed1c35ba45efn%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CA%2Bq3MLw3L5PDi%2Bpbz7xvqLfqNGHwFt0qbMrnzu2QPcqkXY_EOw%40mail.gmail.com.","subject":"Re: [ClojureScript] Let's make ClojureScript more approachable for beginners Sergei Udris Sat, 10 Oct 2020 05:05:35 -0700"},
{"body":"Hi. I am new to ClojureScript. Here is my story so far. It highlights the \nunnecessary hurdles a new ClojureScript programmer has to overcome. I hope \nthis helps make the ClojureScript better for everyone. \nAfter reading SICP \n<https:\/\/en.wikipedia.org\/wiki\/Structure_and_Interpretation_of_Computer_Programs>\n \nand \"On Lisp <https:\/\/en.wikipedia.org\/wiki\/On_Lisp>\" I am quite excited \nabout lisp especially about lisp macros. The web is a very attractive \nplatform to develop for. One day I set out to find an intersection of the \ntwo. A quick search returned a number of options and ClojureScript was one \nof them.\n\n# Finding a tutorial\nEvery Lisp dialect is somewhat different from the rest and I had no prior \nexperience with Clojure. How does one pick up a new programming language? I \nneeded to find some kind of tutorial or introductory book. Something that \nwould at the very least teach me the syntax and semantics of the language, \nthe builtins and essential parts of the standard library. Ideally it would \nalso teach me some common idioms. I tried to find a link to such a \nbook\/tutorial on the https:\/\/clojurescript.org website, but failed. There \nis a prominently displayed \"Get Started!\" button, but it currently points \nto a page that teaches you how to install ClojureScript and, for some \nreason, how to do \"Production Builds\", but does not even cover the entire \nsyntax of ClojureScript. Nor does it contain links to more complete \nintroductory materials. I did eventually discover the amazing ClojureScript \nUnraveled <https:\/\/funcool.github.io\/clojurescript-unraveled\/>. Only later \ndid I find out that the link was there all along, but it was buried where I \nwould have never guessed to look: the \"community\" tab of the \nhttps:\/\/clojurescript.org website. When I think \"tutorial\" I don't think \n\"community\", when I read \"community\" I don't expect to find a tutorial \nthere.\n\nSome examples for comparison:\n- https:\/\/elm-lang.org has a big and obvious \"Tutorial\" button on its \nhomepage\n- https:\/\/www.haskell.org has an interactive tutorial built into its \nhomepage. After you chew through it, the tutorial suggests you look in the \n\"Documentation\" section of the website that contains links to books, \ncourses, tutorials etc.\n\n# Finding an online REPL\nOK I found a tutorial. To follow it I want to be able to actually type some \ncode and see it print some output. I personally find it more convenient at \nthis stage of learning a new language to use an online REPL rather than \ntrying to figure out how to install the interpreter or the compiler \nlocally. Even if installing is as simple as downloading and unpacking a tar \nor executing a bash script I still prefer an online REPL. I again struggled \nto find a link to an online REPL from the https:\/\/clojurescript.org website \nbecause it was also hidden on the \"Community\" tab. Also: out of the 3 REPLs \nadvertised there only one (https:\/\/clojurescript.io) has an HTTPS version.\n\nSome examples for comparison:\n- https:\/\/www.python.org has a REPL built into its homepage\n- https:\/\/elm-lang.org has a big and obvious \"Try\" button\n\n# Installing the compiler\nOK I learned a bit of Clojure, I experimented a bit now I want to start \ndeveloping in it. To do that I need to install the compiler on my machine. \nAt this point I'm looking for links that say \"install\" or \"download\". Where \ndo I find the installation instructions? \"Get Started!\", obviously.\n\n# The REPL hangs on Linux\nA little bit about my system: Linux+Firefox. It turns out that there is a \nknown bug that causes the REPL to hang under this configuration. I was \nfollowing the \"Get Started!\" tutorial. When I executed \"clj --main \ncljs.main --compile hello-world.core --repl\" I expected to see \"Hello \nworld!\" printed in my terminal, but instead I saw something that looked \nlike a REPL prompt but was completely unresponsive. The bug is even \ndocumented in the tutorial, but in a manner that took me an embarrassingly \nlong time to find. Usually when a step in a tutorial fails the steps that \nfollow it are irrelevant until you can figure out what went wrong so I did \nnot continue to read the tutorial. The workaround for this bug is \ndocumented almost an entire page *below* the failing step. The workaround \nis also not visually highlighted - easily overlooked when skimming.\n\n# It is hard to figure out the REPL and compiler options\nFor some reason instead of following the common convention of \n--option=value the compiler (clj --main cljs.main) invents its own command \nline syntax based on the EDN <https:\/\/github.com\/edn-format\/edn>. On top of \nthat neither https:\/\/clojurescript.org\/reference\/repl-options nor \nhttps:\/\/clojurescript.org\/reference\/compiler-options nor \nhttps:\/\/clojurescript.org\/reference\/repl-and-main actually provides an \nexample of specifying EDN on the command line. It currently just so happens \nthat https:\/\/clojurescript.org\/guides\/quick-start does provide such an \nexample, but only because it needed to document the workaround for the \nabove mentioned bug. Also: in many places the extensible data notation is \nreferred to by a cryptic 3-letter acronym EDN that probably has 300 \ndifferent meanings. The acronym not being a link pointing to \nhttps:\/\/github.com\/edn-format\/edn does not help either. \nAlso: edn-format.org is missing an HTTPS version.\n\n# Specifying :watch-fn on the command line results in a confusing error\nI specified --compile-opts '{:watch \"src\" :watch-fn (fn [] (println \n\"built!\"))}' on the command line and expected to see it print \"built!\" \nevery time my source is rebuilt. Someone more savvy in how EDN works would \nknow that this won't work, but to me this wasn't obvious until I tried it. \nNothing was printed on the command line. It did not print \"built!\". It did \nnot print any error messages. Luckily it did say: \"compilation log \navailable at: out\/watch.log\". Opening this file gave me a hint as to what \nwent wrong: \"java.lang.ClassCastException: clojure.lang.PersistentList \ncannot be cast to clojure.lang.IFn\" but the error message could certainly \nbe much more newbie-friendly. Out of the two \n<https:\/\/clojurescript.org\/reference\/repl-options#watch-fn> places \n<https:\/\/clojurescript.org\/reference\/compiler-options#watch-fn> where \nwatch-fn is documented only one mentions \"cljs.build.api\/watch\", but even \nthen it does not actually link to https:\/\/cljs.github.io\/api\/\ncompiler\/cljs.build.api\/#watch leaving me to wander what \n\"cljs.build.api\/watch\" means. Is it a file? Is it a command line tool? \nApparently it is an API. How was I supposed to figure that out?\n\n# Hot reload\n\"Why was I messing with compiler options and :watch-fn?\" you might ask. \nWhat I actually wanted was hot reload. When I looked at the documentation \nfor :watch-fn it looked to me as if the compiler already provides the hot \nreload functionality and no 3rd-party tools are necessary. Someone who \nknows a little bit about the compiler internals would know that :watch-fn \nis executed in the compiler instead of being executed in the context of my \ncode, but this is not obvious from the documentation provided on \nhttps:\/\/clojurescript.org. I did eventually figure out that I do have to \ninstall an additional 3rd-party tool to get hot reload and went with \nhttps:\/\/figwheel.org.\n\n# Reference\/Guides split\nA number of miscellaneous documentation topics on https:\/\/clojurescript.org \nare split into two sections \"Reference\" and \"Guides\". Perhaps there is some \ndeep wisdom to which documentation pages belong where but so far it eludes \nme and when I have a question I have to look in both sections. Perhaps \nmerging them into one and naming it \"Documentation\" would be better.\n\n# Miscellaneous nitpicks\n- When I first saw your documentation I saw a list of links on the left and \na list of links on the right. It did not take me long to figure out that \none is the table of contents for the current document and another is a list \nof links to other documents in the same section but it wasn't immediately \nobvious to me either. A https:\/\/readthedocs.org like format would be less \nconfusing. Example: https:\/\/docs.readthedocs.io\/en\/stable\/intro\/getting-\nstarted-with-sphinx.html\n\n- When I scroll the page the table of contents and links to other \ndocumentation topics scroll out of view instead of staying on the screen.\n\n- The landing pages for \"Reference\" and for \"Tools\" duplicate the list of \ndocumentation topics in that section, but not one-to-one. \nhttps:\/\/clojurescript.org\/reference\/documentation has a heading labeled \n\"API Documentation\" but this heading is not duplicated in the links on the \nleft of the page. The \"Tools\" section of your website has pages for \nlein-cljsbuild and lein-figwheel, but there are no corresponding links on \nhttps:\/\/clojurescript.org\/tools\/tools\n\n-- Andrey Bienkowski\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/eb0efca6-33d4-4321-a75b-ed1c35ba45efn%40googlegroups.com.","subject":"[ClojureScript] Let's make ClojureScript more approachable for beginners Andrey Bienkowski Fri, 09 Oct 2020 07:24:35 -0700"},
{"body":"Hello to everyone,\n\nJust wondering if somebody is using a Raspberry 4 as Platform for\nClojurescript Development.Also with Planck as I saw a file on\nhttps:\/\/planck-repl.org\/binaries\/\nDid not work for me on first try\nAlso  saw the Clojure North Video from Mike Fikes ClojureScript on\nMicrocontrollers ( https:\/\/www.youtube.com\/watch?v=u1jr4v7dhoo )\nSo question can be extended to any ARM32 or ARM64 PCB\nClojurescript\/Planck works fine for me on my Ubuntu 18.4 Ryzan system\nand also Clojure\/Leiningen works fine on my Raspberry 4 4GB for\nPostgres\/JDBC testing.But now I want to setup my Raspberry 4 8GB with Java\n8 and things are not straightforward at first glance \nThanks in advance for any feedback \/ answer\n\n\nRgds Gottfried\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAHQv6n%2BZrryN%3D0tQik9M0UdvhPVa2WYXrezqgC5PBcvhR8LyDg%40mail.gmail.com.","subject":"[ClojureScript] Raspberry 4 8GB as Clojurescript Development Platform Gottfried F. Zojer Tue, 18 Aug 2020 18:24:00 -0700"},
{"body":"P.S.  There seems to be no *`clojure --version`* flag.  Should this be\nadded to the command line tool? \n\nOn Mon, Aug 10, 2020 at 4:58 PM Alan Thompson <clooj...@gmail.com> wrote:\n\n> Hi.  Just helped a colleague debug a vexing problem on a CLJS project\n> using Figwheel.Main.\n>\n> If we do *`brew install clojure\/tools\/clojure`*, it works:\n>\n> ~\/work\/tmp810\/xanadu > clj --help\n> Version: *1.10.1.561*\n>\n> Usage: clojure [dep-opt*] [--] [init-opt*] [main-opt] [arg*]\n>        clj     [dep-opt*] [--] [init-opt*] [main-opt] [arg*]\n>\n> The clojure script is a runner for Clojure. clj is a wrapper\n> for interactive repl use. These scripts ultimately construct and\n> ....\n>\n>\n> Note that local .\/resources etc are at the beginning of the classpath\n>\n> ~\/work\/tmp810\/xanadu > clj -Spath\n> *resources:target:src\/clj:src\/cljc:src\/cljs:test\/cljs:test-figwheel-main*\n> :\/Users\/alanthompson\/.m2\/repository\/com\/cognitect\/transit-java\/0.8.332\/transit-java-0.8.332.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/elemental2\/elemental2-core\/1.0.0-RC1\/elemental2-core-1.0.0-RC1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/data.json\/0.2.6\/data.json-0.2.6.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/clojure\/1.10.1\/clojure-1.10.1.jar:\/Users\/alanthompson\/.m2\/repository\/day8\/re-frame\/test\/0.1.5\/test-0.1.5.jar:\/Users\/alanthompson\/.m2\/repository\/commons-codec\/commons-codec\/1.11\/commons-codec-1.11.jar:\/Users\/alanthompson\/.m2\/repository\/cljsjs\/material-ui-currency-textfield\/0.8.6-0\/material-ui-currency-textfield-0.8.6-0.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/tools.analyzer\/1.0.0\/tools.analyzer-1.0.0.jar:\/Users\/alanthompson\/.m2\/repository\/com\/bhauman\/cljs-test-display\/0.1.1\/cljs-test-display-0.1.1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/eclipse\/jetty\/jetty-xml\/9.4.28.v20200408\/jetty-xml-9.4.28.v20200408.jar:\/Users\/alanthompson\/.m2\/repository\/com\/bhauman\/figwheel-repl\/0.2.11\/figwheel-repl-0.2.11.jar:\/Users\/alanthompson\/.m2\/repository\/org\/eclipse\/jetty\/jetty-servlet\/9.4.28.v20200408\/jetty-servlet-9.4.28.v20200408.jar:\/Users\/alanthompson\/.m2\/repository\/ring\/ring-devel\/1.8.1\/ring-devel-1.8.1.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/errorprone\/error_prone_annotations\/2.3.1\/error_prone_annotations-2.3.1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/tools.logging\/0.3.1\/tools.logging-0.3.1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/core.specs.alpha\/0.2.44\/core.specs.alpha-0.2.44.jar:\/Users\/alanthompson\/.m2\/repository\/co\/deps\/ring-etag-middleware\/0.2.0\/ring-etag-middleware-0.2.0.jar:\/Users\/alanthompson\/.m2\/repository\/expound\/expound\/0.7.2\/expound-0.7.2.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/spec.alpha\/0.2.176\/spec.alpha-0.2.176.jar:\/Users\/alanthompson\/.m2\/repository\/com\/cemerick\/url\/0.1.1\/url-0.1.1.jar:\n>\n> .....<snip>.....\n>\n>\n> However, my colleague had accidentally typed *`brew install clojure`.  *This\n> caused a mysterious failure:\n>\n> -------------------\n> ~\/work\/tmp810\/xanadu > clojure --help\n> Version: *1.10.1.645*\n>\n> You use the Clojure tools ('clj' or 'clojure') to run Clojure programs\n> on the JVM, e.g. to start a REPL or invoke a specific function with data.\n> ....\n>\n> and the classpath\n>\n> -----------------\n> ~\/work\/tmp810\/xanadu > clj -Spath\n> DEPRECATED: Libs must be qualified, change deps-ancient =>\n> deps-ancient\/deps-ancient (deps.edn)\n> DEPRECATED: Libs must be qualified, change reagent => reagent\/reagent\n> (deps.edn)\n> DEPRECATED: Libs must be qualified, change ns-tracker =>\n> ns-tracker\/ns-tracker (deps.edn)\n> DEPRECATED: Libs must be qualified, change camel-snake-kebab =>\n> camel-snake-kebab\/camel-snake-kebab (deps.edn)\n> DEPRECATED: Libs must be qualified, change bidi => bidi\/bidi (deps.edn)\n> DEPRECATED: Libs must be qualified, change orchestra =>\n> orchestra\/orchestra (deps.edn)\n> DEPRECATED: Libs must be qualified, change cljs-ajax =>\n> cljs-ajax\/cljs-ajax (deps.edn)\n> DEPRECATED: Libs must be qualified, change expound => expound\/expound\n> (deps.edn)\n> DEPRECATED: Libs must be qualified, change re-frame => re-frame\/re-frame\n> (deps.edn)\n> DEPRECATED: Libs must be qualified, change re-frame-utils =>\n> re-frame-utils\/re-frame-utils (deps.edn)\n> DEPRECATED: Libs must be qualified, change cljs-bean =>\n> cljs-bean\/cljs-bean (deps.edn)\n>\n> \/Users\/alanthompson\/.m2\/repository\/alandipert\/storage-atom\/1.2.4\/storage-atom-1.2.4.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/errorprone\/error_prone_annotations\/2.3.1\/error_prone_annotations-2.3.1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/core.cache\/1.0.207\/core.cache-1.0.207.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/jsinterop\/jsinterop-annotations\/1.0.2\/jsinterop-annotations-1.0.2.jar:\/Users\/alanthompson\/.m2\/repository\/compliment\/compliment\/0.3.6\/compliment-0.3.6.jar:\/Users\/alanthompson\/.m2\/repository\/ring\/ring-headers\/0.3.0\/ring-headers-0.3.0.jar:\/Users\/alanthompson\/.m2\/repository\/cljs-bean\/cljs-bean\/1.4.0\/cljs-bean-1.4.0.jar:\/Users\/alanthompson\/.m2\/repository\/hawk\/hawk\/0.2.11\/hawk-0.2.11.jar:\/Users\/alanthompson\/.m2\/repository\/binaryage\/devtools\/1.0.0\/devtools-1.0.0.jar:\/Users\/alanthompson\/.m2\/repository\/org\/eclipse\/jetty\/websocket\/websocket-api\/9.4.28.v20200408\/websocket-api-9.4.28.v20200408.jar:\/Users\/alanthompson\/.m2\/repository\/org\/apache\/httpcomponents\/httpasyncclient\/4.1.3\/httpasyncclient-4.1.3.jar:\/Users\/alanthompson\/.m2\/repository\/org\/checkerframework\/checker-qual\/2.0.0\/checker-qual-2.0.0.jar:\/Users\/alanthompson\/.m2\/repository\/ns-tracker\/ns-tracker\/0.3.1\/ns-tracker-0.3.1.jar:\/Users\/alanthompson\/.m2\/repository\/cljsjs\/react-select\/2.4.4-0\/react-select-2.4.4-0.jar:\/Users\/alanthompson\/.m2\/repository\/org\/javassist\/javassist\/3.18.1-GA\/javassist-3.18.1-GA.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/protobuf\/protobuf-java\/3.11.1\/protobuf-java-3.11.1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/fusesource\/jansi\/jansi\/1.16\/jansi-1.16.jar:\/Users\/alanthompson\/.m2\/repository\/com\/cognitect\/transit-clj\/0.8.309\/transit-clj-0.8.309.jar:\/Users\/alanthompson\/.m2\/repository\/org\/codehaus\/mojo\/animal-sniffer-annotations\/1.14\/animal-sniffer-annotations-1.14.jar:\/Users\/alanthompson\/.m2\/repository\/org\/apache\/httpcomponents\/httpclient\/4.5.3\/httpclient-4.5.3.jar:test-figwheel-main:\/Users\/alanthompson\/.m2\/repository\/com\/cognitect\/transit-cljs\/0.8.256\/transit-cljs-0.8.256.jar:\n> .....<snip>.....\n> :\/Users\/alanthompson\/.m2\/repository\/zprint\/zprint\/0.5.1\/zprint-0.5.1.jar:\n> *resources*\n> :\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/tools.analyzer\/1.0.0\/tools.analyzer-1.0.0.jar:\/Users\/alanthompson\/.m2\/repository\/re-frame\/re-frame\/0.10.5\/re-frame-0.10.5.jar:\/Users\/alanthompson\/.m2\/repository\/rewrite-cljs\/rewrite-cljs\/0.4.4\/rewrite-cljs-0.4.4.jar:\/Users\/alanthompson\/.m2\/repository\/net\/cgrand\/macrovich\/0.2.0\/macrovich-0.2.0.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.764\/clojurescript-1.10.764.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/elemental2\/elemental2-core\/1.0.0-RC1\/elemental2-core-1.0.0-RC1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/eclipse\/jetty\/jetty-client\/9.4.28.v20200408\/jetty-client-9.4.28.v20200408.jar\n>\n>\n> with `resources` nearly at the end!  This breaks Figwheel.Main, which\n> cannot find `index.html` correctly and puts up a bogus webpage of 2 words:\n>\n> *Debux Test*\n>\n>\n> which I assume is due to finding some other `index.html` earlier on the\n> classpath.\n>\n> Questions:\n>\n>\n>    1. What is the difference between the brew targets `clojure` and\n>    `clojure\/tools\/clojure`?  Can these be unified somehow? It seems\n>    error-prone as-is.\n>    2. I assume the classpath change in 1.10.1.645 is a bug that needs to\n>    be corrected?\n>    3. Is it possible this is a Figwheel.Main problem instead?\n>\n>\n> Thanks,\n> Alan\n>\n>\n>\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAN67zA2Ys9pVQ%2Br1zwspM27%3Dp1C5EDtWQ73Fh6fp6RoiJPUvZg%40mail.gmail.com.","subject":"[ClojureScript] Re: Classpath bug re Clojure 1.10.1.645 when using Figwheel.Main Alan Thompson Mon, 10 Aug 2020 17:05:10 -0700"},
{"body":"Hi.  Just helped a colleague debug a vexing problem on a CLJS project using\nFigwheel.Main. \nIf we do *`brew install clojure\/tools\/clojure`*, it works:\n\n~\/work\/tmp810\/xanadu > clj --help\nVersion: *1.10.1.561*\n\nUsage: clojure [dep-opt*] [--] [init-opt*] [main-opt] [arg*]\n       clj     [dep-opt*] [--] [init-opt*] [main-opt] [arg*]\n\nThe clojure script is a runner for Clojure. clj is a wrapper\nfor interactive repl use. These scripts ultimately construct and\n....\n\n\nNote that local .\/resources etc are at the beginning of the classpath\n\n~\/work\/tmp810\/xanadu > clj -Spath\n*resources:target:src\/clj:src\/cljc:src\/cljs:test\/cljs:test-figwheel-main*\n:\/Users\/alanthompson\/.m2\/repository\/com\/cognitect\/transit-java\/0.8.332\/transit-java-0.8.332.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/elemental2\/elemental2-core\/1.0.0-RC1\/elemental2-core-1.0.0-RC1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/data.json\/0.2.6\/data.json-0.2.6.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/clojure\/1.10.1\/clojure-1.10.1.jar:\/Users\/alanthompson\/.m2\/repository\/day8\/re-frame\/test\/0.1.5\/test-0.1.5.jar:\/Users\/alanthompson\/.m2\/repository\/commons-codec\/commons-codec\/1.11\/commons-codec-1.11.jar:\/Users\/alanthompson\/.m2\/repository\/cljsjs\/material-ui-currency-textfield\/0.8.6-0\/material-ui-currency-textfield-0.8.6-0.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/tools.analyzer\/1.0.0\/tools.analyzer-1.0.0.jar:\/Users\/alanthompson\/.m2\/repository\/com\/bhauman\/cljs-test-display\/0.1.1\/cljs-test-display-0.1.1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/eclipse\/jetty\/jetty-xml\/9.4.28.v20200408\/jetty-xml-9.4.28.v20200408.jar:\/Users\/alanthompson\/.m2\/repository\/com\/bhauman\/figwheel-repl\/0.2.11\/figwheel-repl-0.2.11.jar:\/Users\/alanthompson\/.m2\/repository\/org\/eclipse\/jetty\/jetty-servlet\/9.4.28.v20200408\/jetty-servlet-9.4.28.v20200408.jar:\/Users\/alanthompson\/.m2\/repository\/ring\/ring-devel\/1.8.1\/ring-devel-1.8.1.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/errorprone\/error_prone_annotations\/2.3.1\/error_prone_annotations-2.3.1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/tools.logging\/0.3.1\/tools.logging-0.3.1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/core.specs.alpha\/0.2.44\/core.specs.alpha-0.2.44.jar:\/Users\/alanthompson\/.m2\/repository\/co\/deps\/ring-etag-middleware\/0.2.0\/ring-etag-middleware-0.2.0.jar:\/Users\/alanthompson\/.m2\/repository\/expound\/expound\/0.7.2\/expound-0.7.2.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/spec.alpha\/0.2.176\/spec.alpha-0.2.176.jar:\/Users\/alanthompson\/.m2\/repository\/com\/cemerick\/url\/0.1.1\/url-0.1.1.jar:\n\n.....<snip>.....\n\n\nHowever, my colleague had accidentally typed *`brew install clojure`.  *This\ncaused a mysterious failure:\n\n-------------------\n~\/work\/tmp810\/xanadu > clojure --help\nVersion: *1.10.1.645*\n\nYou use the Clojure tools ('clj' or 'clojure') to run Clojure programs\non the JVM, e.g. to start a REPL or invoke a specific function with data.\n....\n\nand the classpath\n\n-----------------\n~\/work\/tmp810\/xanadu > clj -Spath\nDEPRECATED: Libs must be qualified, change deps-ancient =>\ndeps-ancient\/deps-ancient (deps.edn)\nDEPRECATED: Libs must be qualified, change reagent => reagent\/reagent\n(deps.edn)\nDEPRECATED: Libs must be qualified, change ns-tracker =>\nns-tracker\/ns-tracker (deps.edn)\nDEPRECATED: Libs must be qualified, change camel-snake-kebab =>\ncamel-snake-kebab\/camel-snake-kebab (deps.edn)\nDEPRECATED: Libs must be qualified, change bidi => bidi\/bidi (deps.edn)\nDEPRECATED: Libs must be qualified, change orchestra => orchestra\/orchestra\n(deps.edn)\nDEPRECATED: Libs must be qualified, change cljs-ajax => cljs-ajax\/cljs-ajax\n(deps.edn)\nDEPRECATED: Libs must be qualified, change expound => expound\/expound\n(deps.edn)\nDEPRECATED: Libs must be qualified, change re-frame => re-frame\/re-frame\n(deps.edn)\nDEPRECATED: Libs must be qualified, change re-frame-utils =>\nre-frame-utils\/re-frame-utils (deps.edn)\nDEPRECATED: Libs must be qualified, change cljs-bean => cljs-bean\/cljs-bean\n(deps.edn)\n\/Users\/alanthompson\/.m2\/repository\/alandipert\/storage-atom\/1.2.4\/storage-atom-1.2.4.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/errorprone\/error_prone_annotations\/2.3.1\/error_prone_annotations-2.3.1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/core.cache\/1.0.207\/core.cache-1.0.207.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/jsinterop\/jsinterop-annotations\/1.0.2\/jsinterop-annotations-1.0.2.jar:\/Users\/alanthompson\/.m2\/repository\/compliment\/compliment\/0.3.6\/compliment-0.3.6.jar:\/Users\/alanthompson\/.m2\/repository\/ring\/ring-headers\/0.3.0\/ring-headers-0.3.0.jar:\/Users\/alanthompson\/.m2\/repository\/cljs-bean\/cljs-bean\/1.4.0\/cljs-bean-1.4.0.jar:\/Users\/alanthompson\/.m2\/repository\/hawk\/hawk\/0.2.11\/hawk-0.2.11.jar:\/Users\/alanthompson\/.m2\/repository\/binaryage\/devtools\/1.0.0\/devtools-1.0.0.jar:\/Users\/alanthompson\/.m2\/repository\/org\/eclipse\/jetty\/websocket\/websocket-api\/9.4.28.v20200408\/websocket-api-9.4.28.v20200408.jar:\/Users\/alanthompson\/.m2\/repository\/org\/apache\/httpcomponents\/httpasyncclient\/4.1.3\/httpasyncclient-4.1.3.jar:\/Users\/alanthompson\/.m2\/repository\/org\/checkerframework\/checker-qual\/2.0.0\/checker-qual-2.0.0.jar:\/Users\/alanthompson\/.m2\/repository\/ns-tracker\/ns-tracker\/0.3.1\/ns-tracker-0.3.1.jar:\/Users\/alanthompson\/.m2\/repository\/cljsjs\/react-select\/2.4.4-0\/react-select-2.4.4-0.jar:\/Users\/alanthompson\/.m2\/repository\/org\/javassist\/javassist\/3.18.1-GA\/javassist-3.18.1-GA.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/protobuf\/protobuf-java\/3.11.1\/protobuf-java-3.11.1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/fusesource\/jansi\/jansi\/1.16\/jansi-1.16.jar:\/Users\/alanthompson\/.m2\/repository\/com\/cognitect\/transit-clj\/0.8.309\/transit-clj-0.8.309.jar:\/Users\/alanthompson\/.m2\/repository\/org\/codehaus\/mojo\/animal-sniffer-annotations\/1.14\/animal-sniffer-annotations-1.14.jar:\/Users\/alanthompson\/.m2\/repository\/org\/apache\/httpcomponents\/httpclient\/4.5.3\/httpclient-4.5.3.jar:test-figwheel-main:\/Users\/alanthompson\/.m2\/repository\/com\/cognitect\/transit-cljs\/0.8.256\/transit-cljs-0.8.256.jar:\n.....<snip>.....\n:\/Users\/alanthompson\/.m2\/repository\/zprint\/zprint\/0.5.1\/zprint-0.5.1.jar:\n*resources*\n:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/tools.analyzer\/1.0.0\/tools.analyzer-1.0.0.jar:\/Users\/alanthompson\/.m2\/repository\/re-frame\/re-frame\/0.10.5\/re-frame-0.10.5.jar:\/Users\/alanthompson\/.m2\/repository\/rewrite-cljs\/rewrite-cljs\/0.4.4\/rewrite-cljs-0.4.4.jar:\/Users\/alanthompson\/.m2\/repository\/net\/cgrand\/macrovich\/0.2.0\/macrovich-0.2.0.jar:\/Users\/alanthompson\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.764\/clojurescript-1.10.764.jar:\/Users\/alanthompson\/.m2\/repository\/com\/google\/elemental2\/elemental2-core\/1.0.0-RC1\/elemental2-core-1.0.0-RC1.jar:\/Users\/alanthompson\/.m2\/repository\/org\/eclipse\/jetty\/jetty-client\/9.4.28.v20200408\/jetty-client-9.4.28.v20200408.jar\n\n\nwith `resources` nearly at the end!  This breaks Figwheel.Main, which\ncannot find `index.html` correctly and puts up a bogus webpage of 2 words:\n\n*Debux Test*\n\n\nwhich I assume is due to finding some other `index.html` earlier on the\nclasspath.\n\nQuestions:\n\n\n   1. What is the difference between the brew targets `clojure` and\n   `clojure\/tools\/clojure`?  Can these be unified somehow? It seems\n   error-prone as-is.\n   2. I assume the classpath change in 1.10.1.645 is a bug that needs to be\n   corrected?\n   3. Is it possible this is a Figwheel.Main problem instead?\n\n\nThanks,\nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAN67zA0P4k-PBnX%2BLf8K_%2BzOWC%2BekMDFEAxi4nwRF3OY3qZM3A%40mail.gmail.com.","subject":"[ClojureScript] Classpath bug re Clojure 1.10.1.645 when using Figwheel.Main Alan Thompson Mon, 10 Aug 2020 16:59:09 -0700"},
{"body":"Hi Everyone,\nI'm glad to release 0.2.0 of blog-backup. New blogs can be supported in edn\nconfig file, no code required. \nhttps:\/\/github.com\/jiacai2050\/blog-backup\n\nEnjoy\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAG65Qx%3DdU44YcZ88LS2MDpOhuWu1LWgpj-AYiT-Y-A_nGd586w%40mail.gmail.com.","subject":"[ClojureScript] [ANN] blog-backup 0.2.0 (Backup blogposts to PDF) Jiacai Liu Sun, 09 Aug 2020 06:11:11 -0700"},
{"body":"I'm using pathom in clojurescript to do very basic joins from a clientside \ndb (atom).  I have a a simple resolver that takes an id and outputs the \nscalar values of that entity (via a key lookup in the hashmap db). \nI then have a global resolver that returns all entity ids in the db, and \nresolves each one via the single entity resolver defined before.\n\nQuerying the list (only 500 records) takes nearly 700 ms on my laptop.  \nEach resolver is simply doing a key lookup in a hashtable in memory and \nreturning a few scalar values from one resolver.\n\nMy custom clojurescript code that was doing the lookups and joins manually \nvia hashtables returns in 11 ms fully realized.\n\nI can post the code but it's dead simple pasted from the doc examples.\n\nAm I using the library correctly?  Is pathom meant to always start from a \nspecific entity in the graph and isn't meant to query many entities like \nthis?\n\nI've tried changing to a batch resolver but it makes no difference seeing \nas this is an entirely in-memory db.\n\nAny insights are appreciated.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/9970484e-f55e-403f-ba97-449848be65ebo%40googlegroups.com.","subject":"[ClojureScript] Pathom Performance Problems Scott Klarenbach Wed, 05 Aug 2020 09:59:08 -0700"},
{"body":"Hi folks\n\nClojurists Together <https:\/\/www.clojuriststogether.org> is about to award\nanother round of funding to support open source Clojure projects. *Applications\n<https:\/\/www.clojuriststogether.org\/open-source\/> close on Tuesday 28th\nJuly.* \nClojurists Together is an organisation, dedicated to funding and supporting\nopen source software, infrastructure, and documentation that is important\nto the Clojure and ClojureScript community.\n\n*We plan to fund three projects at $3,000 USD\/month for 3 months ($9,000\nUSD total).*\n\nPreviously we have supported projects\n<https:\/\/www.clojuriststogether.org\/projects\/> like Neanderthal, Aleph,\nFireplace, cljdoc, Shadow CLJS, CIDER, Figwheel, clj-http and several more.\n\nWe encourage open source maintainers to apply\n<https:\/\/www.clojuriststogether.org\/open-source\/> for funding, especially\nif you work on one of the projects or areas that our members highlighted in\nthe survey.\n\nIf you work at a company that uses Clojure, talk to your engineering\nmanager about supporting Clojurists Together. We've been able to support\nprojects thanks to the generosity of our developer and company members\n<https:\/\/www.clojuriststogether.org\/members\/>. The more support we have,\nthe more that we can do to improve things for the entire Clojure community.\n\nThanks, Daniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAK2UX_iToiS%2BNK16L-55OzCuT2kv532z1DHRRKebXTU%3D9kci%3DA%40mail.gmail.com.","subject":"[ClojureScript] Clojurists Together wants to fund you to work on your open source Clojure project from August-October 2020 Daniel Compton Thu, 23 Jul 2020 00:47:34 -0700"},
{"body":"Pitch: Let's make a non-commercial express-in-code game, create a new \ne-sports scene. It will be a new kind of games: players use a programming \nlanguage to express\/build\/solve, with unbounded diverse scenarios, that can \nbe installed via a link. Existing e-sports games are micro heavy or stale. \nhttps:\/\/github.com\/express-in-code-game\/design\/blob\/master\/project.md\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/cb95782b-b82d-447a-ae65-bf538be4da2eo%40googlegroups.com.","subject":"[ClojureScript] Pitch: Let's make a non-commercial express-in-code game, create a new e-sports scene. Sergei Udris Mon, 20 Jul 2020 07:22:00 -0700"},
{"body":"I've created a repo that contains six different sample projects showing six \ndifferent ways of incorporating three.js in a ClojureScript project. \nI have tried to capture everything I know.\n\nhttps:\/\/github.com\/austinhaas\/clojurescript-threejs-demo\n\nIf you are curious about working with 3D graphics in the REPL, you can get \nthere with about 4 steps: \nhttps:\/\/github.com\/austinhaas\/clojurescript-threejs-demo\/tree\/master\/cdn-version\n\nFeedback welcome.\n\n-austin\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/a2a7de33-52c4-41b0-bc3e-1bc34895cbfdo%40googlegroups.com.","subject":"[ClojureScript] Re: How to use webpack with three.js examples? Austin Haas Sun, 19 Jul 2020 21:37:03 -0700"},
{"body":"I got it working. I'll put together a demo tomorrow. I'd explain now, but \nthere are a few details I need to confirm. \n-austin\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/6d2bffb0-29a6-49cb-80a1-44144d86a017o%40googlegroups.com.","subject":"[ClojureScript] Re: How to use webpack with three.js examples? Austin Haas Sat, 18 Jul 2020 21:05:02 -0700"},
{"body":"Does anyone know how to include three.js examples in a cljs project using \nwebpack? \nI think I have the core three.js library included correctly, but the \nthree.js distribution also includes additional modules in separate files \nthat I can't seem to reference. \n\nThe three.js docs say to use: import { OrbitControls } from \n'three\/examples\/jsm\/controls\/OrbitControls.js';\n\nHow is that done with clojurescript?\n\nAny help or suggestions welcome.\n\n-austin\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/eb088049-be7f-4972-9ede-523a8034edd2o%40googlegroups.com.","subject":"[ClojureScript] How to use webpack with three.js examples? Austin Haas Sat, 18 Jul 2020 11:21:01 -0700"},
{"body":"Hard to say what you are doing without seeing the config. Your config is \ndoing this, neither lein or shadow-cljs will do this on their own. \nI typically recommend keeping things separate since that make things much \neasier to understand and debug.\n\nshadow-cljs release app && lein ring uberjar\n\nlein or ring don't need to do anything with CLJS other than taking the \nfiles shadow-cljs produced and putting them into the .jar they create. That \ntypically happens automatically if you output to some folder on your \nclasspath (eg. resources\/public\/js).\n\n\nOn Monday, June 22, 2020 at 9:01:35 PM UTC+2, Scott Klarenbach wrote:\n>\n> When I run \"lein ring uberjar\", after it builds the jar file it triggers \n> the shadow-cljs :app build and rebuilds all client code.\n>\n> I was wanting it to just build the jar file, since the client build is \n> triggered using lein prod.\n>\n> Is this default behavior or have I screwed something up?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/a34d7b56-397a-47e8-8833-4edce7ef191co%40googlegroups.com.","subject":"[ClojureScript] Re: shadow-cljs and lein ring uberjar Thomas Heller Wed, 24 Jun 2020 04:02:02 -0700"},
{"body":"You are passing a CLJS map into the js\/google.maps.Map. call. Convert it \nvia (clj->js {:center ...}) first or use the #js literal. \n\nOn Wednesday, June 24, 2020 at 8:35:14 AM UTC+2, Casey Sparrow wrote:\n>\n> I have the following function that loads the google maps api:\n>\n> ```\n> (defn load-google-maps-api []\n>                 (js\/console.log \"script element is \" script)\n>\n>             (set! (.-src script) \"\n> https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEMfQzY&callback=init_delivery_map\n> \")\n>\n>             (set! (.-defer script) true)\n>             (set! (.-async script) true)\n>             (set! (.-init-delivery-map js\/window)\n>                   (fn []\n>                     (prn \"setting delivery-map\")\n>                     (reset! delivery-map\n>                           (js\/google.maps.Map. (js\/document.getElementById \n> \"delivery-map\")\n>                                                {:center {:lat 37.0 :lng \n> -122.0}}))))\n>\n>             (.append (js\/jQuery \"head\") script)\n>\n> )\n>\n> ```\n>\n> which I call when an event is triggered. However, the line ```(.append \n> (js\/jQuery \"head\") script)``` in conjunction with the line. (set! (.-src \n> script) \"\n> https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEMfQzY&callback=init_delivery_map\n> \")\n>\n>  ``````\n>\n> cause the error:\n>\n> ```\n> Uncaught (in promise) RangeError: Maximum call stack size exceeded\n>     at Object.cljs$core$array_index_of [as array_index_of] (core.cljs:6592)\n>     at Object.cljs$core$array_map_index_of [as array_map_index_of] \n> (core.cljs:6607)\n>     at ni.eval [as cljs$core$ILookup$_lookup$arity$3] (core.cljs:6892)\n>     at ni.eval [as get] (core.cljs:6822)\n>     at ni.streetView_changed \n> (js?key=AIzaSyD1r7IwW4_MfQzY&callback=init_delivery_map&_=1592974955286:217)\n>     at $d \n> (js?key=AIzaSyD1r_MfQzY&callback=init_delivery_map&_=1592974955286:63)\n>     at ni._.O.set \n> (js?key=AIzaSyD1r7IEvvf6w8FlMfQzY&callback=init_delivery_map&_=1592974955286:181)\n>     at ni.streetView_changed \n> (js?key=AIzaSyD1r7IEvMfQzY&callback=init_delivery_map&_=1592974955286:217)\n>     at $d \n> (js?key=AIzaSyD1r7IEvvf6w8FlHu3k_hP_oJwW4_MfQzY&callback=init_delivery_map&_=1592974955286:63)\n>     at ni._.O.set \n> (js?key=AI_MfQzY&callback=init_delivery_map&_=1592974955286:181)\n>\n> ```\n>\n> Suggesting that the maximum call stack is less than what it should be. \n> Because the javascript version of this code doesn't give this error and \n> works:\n>\n> ```\n> function loadGoogleMapsApi() {\n>     var script = document.createElement('script');\n>     script.src = '\n> https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEvvf6w8FlHu3k_hP_oJwW4_MfQzY&callback=initDeliveryMap\n> ';\n>     script.defer = true;\n>     script.async = true;\n>\n>     window.initDeliveryMap = function() {\n>         console.log(\"init map\");\n>         console.log(\"Element is \", \n> document.getElementById(\"delivery-map\"));\n>         deliveryMap = new \n> google.maps.Map(document.getElementById(\"delivery-map\"), {\n>             center: { lat: 37.7749, lng: -122.4194 },\n>             zoom: 8\n>         });\n>     };\n>\n>     document.head.appendChild(script);\n>\n> }\n>\n>\n> ```\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/835d8078-afac-4340-8c16-f1022d2cb7fdo%40googlegroups.com.","subject":"[ClojureScript] Re: Maximum Stack Size exceeding in clojurescript when using with Google Maps API Thomas Heller Wed, 24 Jun 2020 03:58:31 -0700"},
{"body":"I have the following function that loads the google maps api:\n\n```\n(defn load-google-maps-api []\n                (js\/console.log \"script element is \" script) \n            (set! (.-src script) \n\"https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEMfQzY&callback=init_delivery_map\";)\n\n            (set! (.-defer script) true)\n            (set! (.-async script) true)\n            (set! (.-init-delivery-map js\/window)\n                  (fn []\n                    (prn \"setting delivery-map\")\n                    (reset! delivery-map\n                          (js\/google.maps.Map. (js\/document.getElementById \n\"delivery-map\")\n                                               {:center {:lat 37.0 :lng \n-122.0}}))))\n\n            (.append (js\/jQuery \"head\") script)\n\n)\n\n```\n\nwhich I call when an event is triggered. However, the line ```(.append \n(js\/jQuery \"head\") script)``` in conjunction with the line. (set! (.-src \nscript) \n\"https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEMfQzY&callback=init_delivery_map\";)\n\n ``````\n\ncause the error:\n\n```\nUncaught (in promise) RangeError: Maximum call stack size exceeded\n    at Object.cljs$core$array_index_of [as array_index_of] (core.cljs:6592)\n    at Object.cljs$core$array_map_index_of [as array_map_index_of] \n(core.cljs:6607)\n    at ni.eval [as cljs$core$ILookup$_lookup$arity$3] (core.cljs:6892)\n    at ni.eval [as get] (core.cljs:6822)\n    at ni.streetView_changed \n(js?key=AIzaSyD1r7IwW4_MfQzY&callback=init_delivery_map&_=1592974955286:217)\n    at $d \n(js?key=AIzaSyD1r_MfQzY&callback=init_delivery_map&_=1592974955286:63)\n    at ni._.O.set \n(js?key=AIzaSyD1r7IEvvf6w8FlMfQzY&callback=init_delivery_map&_=1592974955286:181)\n    at ni.streetView_changed \n(js?key=AIzaSyD1r7IEvMfQzY&callback=init_delivery_map&_=1592974955286:217)\n    at $d \n(js?key=AIzaSyD1r7IEvvf6w8FlHu3k_hP_oJwW4_MfQzY&callback=init_delivery_map&_=1592974955286:63)\n    at ni._.O.set \n(js?key=AI_MfQzY&callback=init_delivery_map&_=1592974955286:181)\n\n```\n\nSuggesting that the maximum call stack is less than what it should be. \nBecause the javascript version of this code doesn't give this error and \nworks:\n\n```\nfunction loadGoogleMapsApi() {\n    var script = document.createElement('script');\n    script.src = \n'https:\/\/maps.googleapis.com\/maps\/api\/js?key=AIzaSyD1r7IEvvf6w8FlHu3k_hP_oJwW4_MfQzY&callback=initDeliveryMap';\n    script.defer = true;\n    script.async = true;\n\n    window.initDeliveryMap = function() {\n        console.log(\"init map\");\n        console.log(\"Element is \", document.getElementById(\"delivery-map\"));\n        deliveryMap = new \ngoogle.maps.Map(document.getElementById(\"delivery-map\"), {\n            center: { lat: 37.7749, lng: -122.4194 },\n            zoom: 8\n        });\n    };\n\n    document.head.appendChild(script);\n\n}\n\n\n```\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/e246b83c-cd2c-49b5-84ed-3c6d1e8bf3f4n%40googlegroups.com.","subject":"[ClojureScript] Maximum Stack Size exceeding in clojurescript when using with Google Maps API Casey Sparrow Tue, 23 Jun 2020 23:36:02 -0700"},
{"body":"When I run \"lein ring uberjar\", after it builds the jar file it triggers \nthe shadow-cljs :app build and rebuilds all client code. \nI was wanting it to just build the jar file, since the client build is \ntriggered using lein prod.\n\nIs this default behavior or have I screwed something up?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/7d191bc8-de5c-4553-b335-e85d02cbeb7bo%40googlegroups.com.","subject":"[ClojureScript] shadow-cljs and lein ring uberjar Scott Klarenbach Mon, 22 Jun 2020 12:02:24 -0700"},
{"body":">\n> Just to record the fix and the a bit more context.  My SPA has a home page \n> and an edit page.  I don't need the edit parts when the home is first \n> loaded so I moved them out to a split. \n> (see https:\/\/sa.demo.softwarebynumbers.com\/)\n>\n \n> I added in the load of the custom theme for each render part of the \n> split.  Without this, the material components load the default theme which \n> then overrides the custom theme, and breaks the theme for the entire \n> application.  So the above code in the split become more like this :\n>\n\n  (let [theme  @(rf\/subscribe [::subs\/theme])]\n     ...  \n    (r\/render ;slide over panels\n              [:> mui\/MuiThemeProvider {:theme theme}\n                [layers-panel]\n                [config-panel]\n                [model-info-panel]]\n              (-> js\/document\n                  (.getElementById tool-bar-drawers)))\n\nThis now seems to work and preserves the them for the app.\n\nThanks.\n \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/1ffaddd5-b523-4146-83c6-6fe8db2302bdo%40googlegroups.com.","subject":"[ClojureScript] Re: Code Splitting Impact On Material-UI Theme Provider Peter Marshall Mon, 08 Jun 2020 07:53:12 -0700"},
{"body":"Thanks, David. Unsurprisingly, you're correct! \n\nFigwheel-main v0.2.6 added additional `:bundle` support and rounded off the \nrough edges I was trying to address above. I followed that project's new \nNPM guide <https:\/\/figwheel.org\/docs\/npm.html> and everything *Just Worked*. \nThere was also additional support added in v0.2.7, which I haven't had a \nchance to dig into yet. Kudos to Bruce Hauman for pushing those releases \nout so quickly. \nPete\n\nOn Thursday, June 4, 2020 at 11:41:11 AM UTC-4, David Nolen wrote:\n>\n> I believe the latest Figwheel releases are addressing `:bundle` support.\n>\n> David\n>\n> On Wed, May 20, 2020 at 12:14 AM Pete Doherty <pdohe...@gmail.com \n> <javascript:>> wrote:\n>\n>> Hi all,\n>>\n>> I'm having trouble getting the latest versions of Figwheel-main (0.2.5) \n>> and ClojureScript (1.10.758) to (fully) work together. \n>>\n>> I've been able to rework the CLJS Webpack guide \n>> <https:\/\/clojurescript.org\/guides\/webpack> enough to get Figwheel \n>> compiling the app and serving it via a custom index.html page. The \n>> Figwheel-main changelog states that this is required in order to use the \n>> bundle feature.\n>>\n>> Unfortunately, I think I'm bypassing some of Figwheel's default REPL \n>> configuration. The Figwheel scripts all get loaded as part of my compiled \n>> Webpack bundle but the REPL script never connects to the Clojure REPL. \n>> There are some differences in the REPL script's log output between my \n>> project and the Figwheel-main Vim-Fireplace tutorial \n>> <https:\/\/github.com\/bhauman\/figwheel-main\/blob\/master\/docs\/docs\/vim.md#starting-the-repls>.\n>>  \n>> This certainly seems to be an indication that I'm doing something wrong, \n>> but I'm not sure where to begin addressing the issue.\n>>\n>> My project:\n>> [goog.net.WebSocket] Opening the WebSocket on \n>> ws:\/\/localhost:9500\/figwheel-connect?fwsid=c0e05c8b-f386-45f1-a706-874d1f3e3fe7\n>>  \n>> <empty string>\n>>\n>> The Figwheel tutorial:\n>> [goog.net.WebSocket] Opening the WebSocket on ws:\n>> \/\/localhost:9500\/figwheel-connect?fwprocess=0f3498&fwbuild=dev&fwsid=e25756c1-5784-46f5-8e82-739fed9d18dd&fwsname=Yan\n>>\n>> Does any of  the above speak to anyone who knows these tools better than \n>> me? I do have some experience with both Figwheel and ClojureScript, but \n>> it's been a *long* time.\n>>\n>> Thanks!\n>>\n>> Pete\n>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojur...@googlegroups.com <javascript:>.\n>> To view this discussion on the web visit \n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0bb75d1b-62b6-4f1c-ba6b-3b4b61aeacbd%40googlegroups.com\n>>  \n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0bb75d1b-62b6-4f1c-ba6b-3b4b61aeacbd%40googlegroups.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/a21d9080-2a66-4edb-8bde-09e84151994do%40googlegroups.com.","subject":"Re: [ClojureScript] Figwheel 0.2.5 and ClojureScript 1.10.758 Pete Doherty Thu, 04 Jun 2020 11:31:54 -0700"},
{"body":"Thanks for this, Gary!\n\nI was able to figure out a workable solution \n<https:\/\/github.com\/ethagnawl\/clojurescript-vim-fireplace-demo>, but this \nis useful information and your repository is a nice template for new \nprojects. I haven't gotten around to trying to do a production build of my \ndemo application just yet, but I'll probably refer back to your example \nwhen I do. \nPete\n\nOn Thursday, June 4, 2020 at 10:52:14 AM UTC-4, Gary Johnson wrote:\n>\n> Hi Pete,\n>\n> I haven't worked with the CLJS Webpack guide recently, but getting \n> Clojurescript and Figwheel to work together is pretty straightforward in my \n> experience.\n>\n> I use the standard *clojure* build tool from here: \n> https:\/\/clojure.org\/guides\/getting_started\n>\n> When run from the command prompt, *clojure* reads a deps.edn file in the \n> same directory. Here's an example of its contents for a basic web \n> application:\n>\n> *deps.edn*\n> {:paths [\"src\/clj\" \"src\/cljs\" \"resources\" \"target\"]\n>\n>  :deps {org.clojure\/clojure       {:mvn\/version \"1.10.1\"}\n>         org.clojure\/clojurescript {:mvn\/version \"1.10.597\"}\n>         org.clojure\/core.async    {:mvn\/version \"1.1.587\"}\n>         org.clojure\/data.json     {:mvn\/version \"1.0.0\"}\n>         org.clojure\/data.xml      {:mvn\/version \"0.0.8\"}\n>         ring\/ring                 {:mvn\/version \"1.8.0\"}\n>         ring\/ring-defaults        {:mvn\/version \"0.3.2\"}\n>         hiccup\/hiccup             {:mvn\/version \"2.0.0-alpha2\"}\n>         reagent\/reagent           {:mvn\/version \"0.10.0\"}}\n>\n>  :aliases {:compile-cljs {:main-opts [\"-m\" \"cljs.main\" \"-co\" \n> \"compile-prod.cljs.edn\" \"-c\"]}\n>            :run-server   {:main-opts [\"-m\" \"my-project.server\"]}\n>            :figwheel     {:extra-deps {com.bhauman\/figwheel-main \n> {:mvn\/version \"0.2.4\"}\n>                                        com.bhauman\/rebel-readline-cljs \n> {:mvn\/version \"0.1.4\"}}\n>                           :main-opts [\"-m\" \"figwheel.main\" \"-b\" \n> \"compile-dev\" \"-r\"]}}}\n>\n>\n> This file provides three custom aliases: compile-cljs, run-server, \n> figwheel.\n>\n> You can run any them like so:\n>\n> $ clojure -A:figwheel\n>\n> Each of these aliases references additional build files. So here they are \n> for your reference:\n>\n> *compile-dev.cljs.edn*\n> {:main          \"my-project.client\"\n>  :output-dir    \"target\/public\/cljs\/out\"\n>  :output-to     \"target\/public\/cljs\/app.js\"\n>  :asset-path    \"\/cljs\/out\"\n>  :source-map    true\n>  :optimizations :none\n>  :pretty-print  true}\n>\n> *compile-prod.cljs.edn*\n> {:main            \"my-project.client\"\n>  :output-dir      \"target\/public\/cljs\"\n>  :output-to       \"target\/public\/cljs\/app.js\"\n>  :source-map      \"target\/public\/cljs\/app.js.map\"\n>  :optimizations   :advanced\n>  :pretty-print    false\n>  :closure-defines {\"goog.DEBUG\" false}}\n>\n> *figwheel-main.edn*\n> {:watch-dirs [\"src\/cljs\"]\n>  :css-dirs [\"resources\/public\/css\"]\n>  :ring-server-options {:port 8080 :join? false}\n>  :ring-handler my-project.handler\/development-app}\n>\n> With these files in place, you should be all set to start building your \n> web application. You need to create *my-project.server\/-main* (to start \n> the web server), *my-project.handler\/development-app* (to be your ring \n> handler function), and *my-project.client* (to be the entrypoint file for \n> your CLJS code). Everything else is up to you.\n>\n> I created a repository awhile ago containing a web application template \n> with all of these files and a good deal of default code to get you going. \n> You can find it here:\n> https:\/\/gitlab.com\/lambdatronic\/clojure-webapp-template\n>\n> Have fun and happy hacking!\n> ~Gary\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/3c034e01-d8ea-44bd-91c6-e344c1c11ec1o%40googlegroups.com.","subject":"[ClojureScript] Re: Figwheel 0.2.5 and ClojureScript 1.10.758 Pete Doherty Thu, 04 Jun 2020 11:27:28 -0700"},
{"body":"I believe the latest Figwheel releases are addressing `:bundle` support.\n\nDavid \nOn Wed, May 20, 2020 at 12:14 AM Pete Doherty <pdoherty...@gmail.com> wrote:\n\n> Hi all,\n>\n> I'm having trouble getting the latest versions of Figwheel-main (0.2.5)\n> and ClojureScript (1.10.758) to (fully) work together.\n>\n> I've been able to rework the CLJS Webpack guide\n> <https:\/\/clojurescript.org\/guides\/webpack> enough to get Figwheel\n> compiling the app and serving it via a custom index.html page. The\n> Figwheel-main changelog states that this is required in order to use the\n> bundle feature.\n>\n> Unfortunately, I think I'm bypassing some of Figwheel's default REPL\n> configuration. The Figwheel scripts all get loaded as part of my compiled\n> Webpack bundle but the REPL script never connects to the Clojure REPL.\n> There are some differences in the REPL script's log output between my\n> project and the Figwheel-main Vim-Fireplace tutorial\n> <https:\/\/github.com\/bhauman\/figwheel-main\/blob\/master\/docs\/docs\/vim.md#starting-the-repls>.\n> This certainly seems to be an indication that I'm doing something wrong,\n> but I'm not sure where to begin addressing the issue.\n>\n> My project:\n> [goog.net.WebSocket] Opening the WebSocket on \n> ws:\/\/localhost:9500\/figwheel-connect?fwsid=c0e05c8b-f386-45f1-a706-874d1f3e3fe7\n> <empty string>\n>\n> The Figwheel tutorial:\n> [goog.net.WebSocket] Opening the WebSocket on ws:\n> \/\/localhost:9500\/figwheel-connect?fwprocess=0f3498&fwbuild=dev&fwsid=e25756c1-5784-46f5-8e82-739fed9d18dd&fwsname=Yan\n>\n> Does any of  the above speak to anyone who knows these tools better than\n> me? I do have some experience with both Figwheel and ClojureScript, but\n> it's been a *long* time.\n>\n> Thanks!\n>\n> Pete\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0bb75d1b-62b6-4f1c-ba6b-3b4b61aeacbd%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0bb75d1b-62b6-4f1c-ba6b-3b4b61aeacbd%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPC9OaezA8WWSv-kV0Vc0PRTqzcqcAEh2JBKRn20k5H1bpjcvA%40mail.gmail.com.","subject":"Re: [ClojureScript] Figwheel 0.2.5 and ClojureScript 1.10.758 David Nolen Thu, 04 Jun 2020 08:41:50 -0700"},
{"body":"Hi Pete,\n\nI haven't worked with the CLJS Webpack guide recently, but getting \nClojurescript and Figwheel to work together is pretty straightforward in my \nexperience. \nI use the standard *clojure* build tool from here: \nhttps:\/\/clojure.org\/guides\/getting_started\n\nWhen run from the command prompt, *clojure* reads a deps.edn file in the \nsame directory. Here's an example of its contents for a basic web \napplication:\n\n*deps.edn*\n{:paths [\"src\/clj\" \"src\/cljs\" \"resources\" \"target\"]\n\n :deps {org.clojure\/clojure       {:mvn\/version \"1.10.1\"}\n        org.clojure\/clojurescript {:mvn\/version \"1.10.597\"}\n        org.clojure\/core.async    {:mvn\/version \"1.1.587\"}\n        org.clojure\/data.json     {:mvn\/version \"1.0.0\"}\n        org.clojure\/data.xml      {:mvn\/version \"0.0.8\"}\n        ring\/ring                 {:mvn\/version \"1.8.0\"}\n        ring\/ring-defaults        {:mvn\/version \"0.3.2\"}\n        hiccup\/hiccup             {:mvn\/version \"2.0.0-alpha2\"}\n        reagent\/reagent           {:mvn\/version \"0.10.0\"}}\n\n :aliases {:compile-cljs {:main-opts [\"-m\" \"cljs.main\" \"-co\" \n\"compile-prod.cljs.edn\" \"-c\"]}\n           :run-server   {:main-opts [\"-m\" \"my-project.server\"]}\n           :figwheel     {:extra-deps {com.bhauman\/figwheel-main \n{:mvn\/version \"0.2.4\"}\n                                       com.bhauman\/rebel-readline-cljs \n{:mvn\/version \"0.1.4\"}}\n                          :main-opts [\"-m\" \"figwheel.main\" \"-b\" \n\"compile-dev\" \"-r\"]}}}\n\n\nThis file provides three custom aliases: compile-cljs, run-server, figwheel.\n\nYou can run any them like so:\n\n$ clojure -A:figwheel\n\nEach of these aliases references additional build files. So here they are \nfor your reference:\n\n*compile-dev.cljs.edn*\n{:main          \"my-project.client\"\n :output-dir    \"target\/public\/cljs\/out\"\n :output-to     \"target\/public\/cljs\/app.js\"\n :asset-path    \"\/cljs\/out\"\n :source-map    true\n :optimizations :none\n :pretty-print  true}\n\n*compile-prod.cljs.edn*\n{:main            \"my-project.client\"\n :output-dir      \"target\/public\/cljs\"\n :output-to       \"target\/public\/cljs\/app.js\"\n :source-map      \"target\/public\/cljs\/app.js.map\"\n :optimizations   :advanced\n :pretty-print    false\n :closure-defines {\"goog.DEBUG\" false}}\n\n*figwheel-main.edn*\n{:watch-dirs [\"src\/cljs\"]\n :css-dirs [\"resources\/public\/css\"]\n :ring-server-options {:port 8080 :join? false}\n :ring-handler my-project.handler\/development-app}\n\nWith these files in place, you should be all set to start building your web \napplication. You need to create *my-project.server\/-main* (to start the web \nserver), *my-project.handler\/development-app* (to be your ring handler \nfunction), and *my-project.client* (to be the entrypoint file for your CLJS \ncode). Everything else is up to you.\n\nI created a repository awhile ago containing a web application template \nwith all of these files and a good deal of default code to get you going. \nYou can find it here:\nhttps:\/\/gitlab.com\/lambdatronic\/clojure-webapp-template\n\nHave fun and happy hacking!\n~Gary\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/c2dcd440-50f8-4668-b45a-65601aeffd0c%40googlegroups.com.","subject":"[ClojureScript] Re: Figwheel 0.2.5 and ClojureScript 1.10.758 Gary Johnson Thu, 04 Jun 2020 07:52:51 -0700"},
{"body":"Hi all,\n\nI'm having trouble getting the latest versions of Figwheel-main (0.2.5) and \nClojureScript (1.10.758) to (fully) work together. \nI've been able to rework the CLJS Webpack guide \n<https:\/\/clojurescript.org\/guides\/webpack> enough to get Figwheel compiling \nthe app and serving it via a custom index.html page. The Figwheel-main \nchangelog states that this is required in order to use the bundle feature.\n\nUnfortunately, I think I'm bypassing some of Figwheel's default REPL \nconfiguration. The Figwheel scripts all get loaded as part of my compiled \nWebpack bundle but the REPL script never connects to the Clojure REPL. \nThere are some differences in the REPL script's log output between my \nproject and the Figwheel-main Vim-Fireplace tutorial \n<https:\/\/github.com\/bhauman\/figwheel-main\/blob\/master\/docs\/docs\/vim.md#starting-the-repls>.\n \nThis certainly seems to be an indication that I'm doing something wrong, \nbut I'm not sure where to begin addressing the issue.\n\nMy project:\n[goog.net.WebSocket] Opening the WebSocket on \nws:\/\/localhost:9500\/figwheel-connect?fwsid=c0e05c8b-f386-45f1-a706-874d1f3e3fe7 \n<empty string>\n\nThe Figwheel tutorial:\n[goog.net.WebSocket] Opening the WebSocket on ws:\n\/\/localhost:9500\/figwheel-connect?fwprocess=0f3498&fwbuild=dev&fwsid=e25756c1-5784-46f5-8e82-739fed9d18dd&fwsname=Yan\n\nDoes any of  the above speak to anyone who knows these tools better than \nme? I do have some experience with both Figwheel and ClojureScript, but \nit's been a *long* time.\n\nThanks!\n\nPete\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/0bb75d1b-62b6-4f1c-ba6b-3b4b61aeacbd%40googlegroups.com.","subject":"[ClojureScript] Figwheel 0.2.5 and ClojureScript 1.10.758 Pete Doherty Tue, 19 May 2020 21:15:19 -0700"},
{"body":"Thanks Thomas.\n\nActually I was doing a clj->js conversion.  For clarity I omitted some \nmacro code I had been using to initialize material ui components.  But your \nexample worked which showed me the bug must be in my macro. \nFor convenience, my mui macro accepted [& args] allowing me to add multiple \nsubcomponents in a definition without having to wrap them in a [:div ...] \nor call reagent\/as-element.  This results in a '(component) even if there \nis only one component.  This worked fine for material ui but when you pass \n'(render-fn) to react-window instead of just render-fn, you get the error I \nmentioned.  sheesh.\n\nsk\n\nOn Tuesday, May 5, 2020 at 3:40:40 AM UTC-5, Thomas Heller wrote:\n>\n> Hey,\n>\n> if you are falling back to manually calling react\/createElement then you \n> must ensure that you are passing it data it understands. In your example \n> you are passing a CLJS map which React just identifies as a object but not \n> as a props object so it thinks you meant a component and warns you.\n>\n>\n> (defn fixed-size-list []\n>   (react\/createElement\n>     FixedSizeList\n>     #js {:height 400 :width 300 :itemSize 46 :itemCount 200}\n>     render))\n>\n> That should do it, or just use the reagent built-ins for native interop \n> via [:> FixedSizeList {:height ...} render]\n>\n> Cheers,\n> \/thomas\n>\n> On Monday, May 4, 2020 at 8:33:16 PM UTC+2, Scott Klarenbach wrote:\n>>\n>> I'm super happy and impressed with shadow-cljs, it has radically improved \n>> my workflow and deployments, and exposed the npm universe without \n>> ballooning my js files...so, thanks very much to Thomas Heller,\n>>\n>> I'm having an issue with react-window interop.\n>>\n>> I'm successfully importing and using several 3rd party npm modules.  It's \n>> just this one that is not working.\n>>\n>> I keep getting the error:  Invariant Violation: \"Element type is \n>> invalid: expected a string (for built-in components) or a class\/function \n>> (for composite components) but got: object. Check the render method of \n>> `List`.\"\n>>\n>> I'm using re-frame and shadow-cljs, and the following code to initialize:\n>>\n>> ...\n>> (:require\n>>     [reagent.core :as reagent]\n>>     [\"react-window\" :refer [FixedSizeList]]\n>> ...\n>>\n>> (defn render [props]\n>>   (reagent\/as-element [:div \"hey\"]))\n>>\n>> (defn fixed-size-list []\n>>   (react\/create-element\n>>     FixedSizeList\n>>     {:height 400 :width 300 :itemSize 46 :itemCount 200}\n>>     render))\n>>\n>> but always get the error above.  FixedSizeList is refered and available \n>> similar to other components.  As the error says, the problem is in the \n>> render of list.\n>>\n>> I've tried render returning plain hiccup, reagent elements, react \n>> elements, and react classnames as strings, and for some reason the render \n>> fn in clojurescript is not valid as in the javascript examples.\n>>\n>> This same general approach is working elsewhere for 3rd part components, \n>> but this is the first time I'm passing a function in as the body of the \n>> component, rather than as a value on the property map.\n>>\n>> Any insights are greatly appreciated.\n>>\n>> Scott.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/68d6128a-b402-4f03-9873-ea91164f0828%40googlegroups.com.","subject":"[ClojureScript] Re: shadow-cljs and react-window problem Scott Klarenbach Wed, 06 May 2020 15:40:24 -0700"},
{"body":"Hey,\n\nif you are falling back to manually calling react\/createElement then you \nmust ensure that you are passing it data it understands. In your example \nyou are passing a CLJS map which React just identifies as a object but not \nas a props object so it thinks you meant a component and warns you. \n\n(defn fixed-size-list []\n  (react\/createElement\n    FixedSizeList\n    #js {:height 400 :width 300 :itemSize 46 :itemCount 200}\n    render))\n\nThat should do it, or just use the reagent built-ins for native interop via [:> \nFixedSizeList {:height ...} render]\n\nCheers,\n\/thomas\n\nOn Monday, May 4, 2020 at 8:33:16 PM UTC+2, Scott Klarenbach wrote:\n>\n> I'm super happy and impressed with shadow-cljs, it has radically improved \n> my workflow and deployments, and exposed the npm universe without \n> ballooning my js files...so, thanks very much to Thomas Heller,\n>\n> I'm having an issue with react-window interop.\n>\n> I'm successfully importing and using several 3rd party npm modules.  It's \n> just this one that is not working.\n>\n> I keep getting the error:  Invariant Violation: \"Element type is invalid: \n> expected a string (for built-in components) or a class\/function (for \n> composite components) but got: object. Check the render method of `List`.\"\n>\n> I'm using re-frame and shadow-cljs, and the following code to initialize:\n>\n> ...\n> (:require\n>     [reagent.core :as reagent]\n>     [\"react-window\" :refer [FixedSizeList]]\n> ...\n>\n> (defn render [props]\n>   (reagent\/as-element [:div \"hey\"]))\n>\n> (defn fixed-size-list []\n>   (react\/create-element\n>     FixedSizeList\n>     {:height 400 :width 300 :itemSize 46 :itemCount 200}\n>     render))\n>\n> but always get the error above.  FixedSizeList is refered and available \n> similar to other components.  As the error says, the problem is in the \n> render of list.\n>\n> I've tried render returning plain hiccup, reagent elements, react \n> elements, and react classnames as strings, and for some reason the render \n> fn in clojurescript is not valid as in the javascript examples.\n>\n> This same general approach is working elsewhere for 3rd part components, \n> but this is the first time I'm passing a function in as the body of the \n> component, rather than as a value on the property map.\n>\n> Any insights are greatly appreciated.\n>\n> Scott.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/f5ad24f7-d809-4bf1-a304-1f077b7063a7%40googlegroups.com.","subject":"[ClojureScript] Re: shadow-cljs and react-window problem Thomas Heller Tue, 05 May 2020 01:41:35 -0700"},
{"body":"I'm super happy and impressed with shadow-cljs, it has radically improved \nmy workflow and deployments, and exposed the npm universe without \nballooning my js files...so, thanks very much to Thomas Heller, \nI'm having an issue with react-window interop.\n\nI'm successfully importing and using several 3rd party npm modules.  It's \njust this one that is not working.\n\nI keep getting the error:  Invariant Violation: \"Element type is invalid: \nexpected a string (for built-in components) or a class\/function (for \ncomposite components) but got: object. Check the render method of `List`.\"\n\nI'm using re-frame and shadow-cljs, and the following code to initialize:\n\n...\n(:require\n    [reagent.core :as reagent]\n    [\"react-window\" :refer [FixedSizeList]]\n...\n\n(defn render [props]\n  (reagent\/as-element [:div \"hey\"]))\n\n(defn fixed-size-list []\n  (react\/create-element\n    FixedSizeList\n    {:height 400 :width 300 :itemSize 46 :itemCount 200}\n    render))\n\nbut always get the error above.  FixedSizeList is refered and available \nsimilar to other components.  As the error says, the problem is in the \nrender of list.\n\nI've tried render returning plain hiccup, reagent elements, react elements, \nand react classnames as strings, and for some reason the render fn in \nclojurescript is not valid as in the javascript examples.\n\nThis same general approach is working elsewhere for 3rd part components, \nbut this is the first time I'm passing a function in as the body of the \ncomponent, rather than as a value on the property map.\n\nAny insights are greatly appreciated.\n\nScott.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/1c6739d1-84e4-4a1d-8ecd-34477ef92b33%40googlegroups.com.","subject":"[ClojureScript] shadow-cljs and react-window problem Scott Klarenbach Mon, 04 May 2020 11:34:10 -0700"},
{"body":"Reagent works well with most JS react library unless a JS react library \nuses controlled input in it. \nhttps:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/ControlledInputs.md#controlled-inputs\n\nThe above page shows detailed description of this problem.\n\nI tried the similar fixes for react-select without success.\n\nreact-select also enables users customize input component: \nhttps:\/\/github.com\/JedWatson\/react-select\/blob\/master\/packages\/react-select\/src\/Select.js#L1417\n(It is same as those of material-ui, though: \nhttps:\/\/github.com\/mui-org\/material-ui\/blob\/65c18e1cfecdf491f228022b49ecaa2d67de339b\/packages\/material-ui\/src\/InputBase\/InputBase.js#L359\n)\n\n```\n(ns example.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [\"react-select\/creatable\" :default CreatableSelect]\n            [reagent.impl.template :as rtpl]))\n\n(set! *warn-on-infer* true)\n\n(defonce text-state (r\/atom \"foobar\"))\n\n(def ^:private input\n  (r\/reactify-component\n   (fn [props]\n     [:input\n      {:ref (:innerRef props)\n       :type (:type props)\n       :value (:value props)\n       :style {:height 40}\n       :on-change (:onChange props)}])))\n\n(def ^:private components\n  {:Input input})\n\n(defn creatable-select [{:keys [input-value\n                                on-input-change]}]\n  (r\/create-element\n   CreatableSelect\n   (rtpl\/convert-prop-value\n    {:components components\n     :inputValue input-value\n     :onInputChange on-input-change\n     :isMulti true\n     :options []})))\n\n(defn main []\n  [:div\n   [:div\n    [:div\n    \"text-state:\"\n     @text-state]\n    [:div\n     \"Just adapt1\"\n     [:> CreatableSelect\n      {:is-multi true\n       :options []}]]]\n   [:div\n    \"Provide input component\"\n    [creatable-select\n     {:input-value @text-state\n      :on-input-change (fn [new-input]\n                         (reset! text-state new-input))}]]])\n\n(defn start []\n  (rdom\/render [main] (js\/document.getElementById \"app\")))\n\n(start)\n```\n\nMy try works well with alphabet and numbers, but it does not work well with \nCJK languages.\n\nIs there anyone who succeeded interacting with react-select?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/1224c45f-eda3-481d-bb77-95b80f51a6ae%40googlegroups.com.","subject":"[ClojureScript] [Reagent] controlled input problem with react-select JB Seo Wed, 29 Apr 2020 10:04:20 -0700"},
{"body":"Reagent works well with most JS react library unless a JS react library \nuses controlled input in it. \nhttps:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/ControlledInputs.md#controlled-inputs\n\nThe above page shows detailed description of this problem.\n\nI tried the similar fixes for react-select without success.\n\nreact-select also enables users customize input component: \nhttps:\/\/github.com\/JedWatson\/react-select\/blob\/master\/packages\/react-select\/src\/Select.js#L1417\n(It is same as those of material-ui, though: \nhttps:\/\/github.com\/mui-org\/material-ui\/blob\/65c18e1cfecdf491f228022b49ecaa2d67de339b\/packages\/material-ui\/src\/InputBase\/InputBase.js#L359\n)\n\n```\n(ns example.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [\"react-select\/creatable\" :default CreatableSelect]\n            [reagent.impl.template :as rtpl]))\n\n(set! *warn-on-infer* true)\n\n(defonce text-state (r\/atom \"foobar\"))\n\n(def ^:private input\n  (r\/reactify-component\n   (fn [props]\n     [:input\n      {:ref (:innerRef props)\n       :type (:type props)\n       :value (:value props)\n       :style {:height 40}\n       :on-change (:onChange props)}])))\n\n(def ^:private components\n  {:Input input})\n\n(defn creatable-select [{:keys [input-value\n                                on-input-change]}]\n  (r\/create-element\n   CreatableSelect\n   (rtpl\/convert-prop-value\n    {:components components\n     :inputValue input-value\n     :onInputChange on-input-change\n     :isMulti true\n     :options []})))\n\n(defn main []\n  [:div\n   [:div\n    [:div\n    \"text-state:\"\n     @text-state]\n    [:div\n     \"Just adapt1\"\n     [:> CreatableSelect\n      {:is-multi true\n       :options []}]]]\n   [:div\n    \"Provide input component\"\n    [creatable-select\n     {:input-value @text-state\n      :on-input-change (fn [new-input]\n                         (reset! text-state new-input))}]]])\n\n(defn start []\n  (rdom\/render [main] (js\/document.getElementById \"app\")))\n\n(start)\n```\n\nMy try works well with alphabet and numbers, but it does not work well with \nCJK languages.\n\nIs there anyone who succeeded interacting with react-select?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/c310e895-154f-456d-99a4-b244a1e7d46b%40googlegroups.com.","subject":"[ClojureScript] [Reagent] Controlled input problem with react-select JB Seo Wed, 29 Apr 2020 10:04:18 -0700"},
{"body":"I think everyone can benefit from viewing this material:\n \n   - Clean Code - pt 1 <https:\/\/youtu.be\/7EmboKQH8lM>\n   - Clean Code - pt 2 <https:\/\/youtu.be\/2a_ytyt9sf8>\n   - Clean Code - pt 3 <https:\/\/youtu.be\/Qjywrq2gM8o>\n   - Clean Code - pt 4 <https:\/\/youtu.be\/58jGpV2Cg50>\n   - Clean Code - pt 5 <https:\/\/youtu.be\/sn0aFEMVTpA>\n   - Clean Code - pt 6 <https:\/\/youtu.be\/l-gF0vDhJVI>\n\n\nEnjoy!\nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAN67zA13%2BJf19Jv4%2B-Vmahkxxp0-tWhhS_mPModdy30syJ1%2B2A%40mail.gmail.com.","subject":"[ClojureScript] Excellent series of videos by Uncle Bob Martin Alan Thompson Tue, 28 Apr 2020 12:31:22 -0700"},
{"body":"There are some issues with Figwheel and the latest releases that need to be\nsorted out. Bruce Hauman is aware and on it. \nDavid\n\nOn Sat, Apr 25, 2020 at 1:45 AM Rangel Spasov <raspa...@gmail.com> wrote:\n\n> Just tried bumping up my React Native project to 1.10.741.\n>\n> The compilation seems to get stuck (doesn't finish, I waited a bunch and\n> usually only takes a few seconds) at the following warnings (which are new,\n> do not appear with ClojureScript 1.10.597).\n>\n> [Figwheel:WARNING] Compile Warning: Use of undeclared Var goog.structs\/Map\n>  target\/public\/cljs-out\/ios\/taoensso\/encore.cljs   line:2683  column:16\n> [Figwheel:WARNING] Compile Warning: Use of undeclared Var\n> goog.net.XhrIo\/send  target\/public\/cljs-out\/ios\/figwheel\/repl.cljc\n> line:313  column:8\n> [Figwheel:WARNING] Compile Warning: Use of undeclared Var\n> goog.net.XhrIo\/send  target\/public\/cljs-out\/ios\/figwheel\/repl.cljc\n> line:516  column:11\n> [Figwheel:WARNING] Compile Warning: Use of undeclared Var\n> goog.net.XhrIo\/send  target\/public\/cljs-out\/ios\/figwheel\/repl.cljc\n> line:313  column:8\n> [Figwheel:WARNING] Compile Warning: Use of undeclared Var\n> goog.net.XhrIo\/send  target\/public\/cljs-out\/ios\/figwheel\/repl.cljc\n> line:516  column:11\n>\n> It might be a Figwheel issue but I'm not sure, decided to post here in\n> case somebody has a similar problem or a solution.\n>\n> On Friday, April 24, 2020 at 10:10:56 AM UTC-7, David Nolen wrote:\n>>\n>> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>>\n>> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>>\n>> Please refer to the announce post for the details:\n>> https:\/\/clojurescript.org\/news\/2020-04-24-release\n>>\n>> This release also features a significant enhancement when building\n>> against node_modules:\n>> https:\/\/clojurescript.org\/news\/2020-04-24-bundle-target\n>>\n>> As always, feedback welcome!\n>>\n>> David\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/15f7d151-2ca2-4823-bd75-24ff86a6b608%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/15f7d151-2ca2-4823-bd75-24ff86a6b608%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPC9Oad-ZovchcpgEb_5Pmwrkvd0%3DPNc2tU8bkXuTGmzzPRRYg%40mail.gmail.com.","subject":"Re: [ClojureScript] Re: ANN: ClojureScript 1.10.741 David Nolen Mon, 27 Apr 2020 16:59:54 -0700"},
{"body":"Joy of joys, I found it completely by accident while looking for something \ncompletely different in this excellent online ClojureScript book: \nhttps:\/\/funcool.github.io\/clojurescript-unraveled\/#printing\n\nFor reference (and in case the above link doesn't work for any reason), you \nneed to implement IPrintWithWriter, like thus:\n\nIPrintWithWriter\n  (-pr-writer [p writer _]\n    (-write writer (str \"#<MyType \" ,,, \">\")))\n\n\non your type.\n\nSimply brilliant!\n\nOn Saturday, April 25, 2020 at 9:11:25 AM UTC+5:30, Outrovurt # wrote:\n>\n> If I create a type like this\n>\n> (deftype MyType [x] ...)\n>\n> is there any way I can control what is displayed at the REPL when I create \n> a new instance of MyType?\n>\n> At present all I see is:\n>\n> cljs.user=> (MyType. 1)\n> #object[cljs.user.MyType]\n>\n> It's this \"#object[cljs.user.MyType]\" which I'd like to customise. I've \n> checked so much of the documentation and can't find anything which might \n> let me display something else.\n>\n> Thanks.\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/147e222c-150b-434d-b183-05d1b96e17bf%40googlegroups.com.","subject":"[ClojureScript] Re: Controlling how a type instance appears in the REPL Outrovurt # Mon, 27 Apr 2020 03:56:41 -0700"},
{"body":"I'm assuming you are trying a .js file that has\n\n   import React from \"react\"; \nThis would try to access the default export of react. Since react only \nships CommonJS it has no default export. CommonJS and ESM interop is in a \nweird spot currently and a bit ugly.\n\n  import * as React from \"react\";\n\nThis should be fine.\n\nOn Saturday, April 25, 2020 at 7:57:59 PM UTC+2, Scott Klarenbach wrote:\n>\n> I'm following the instructions from here: \n> https:\/\/shadow-cljs.github.io\/docs\/UsersGuide.html#_javascript_dialects \n> to get jsx flies compiled through babble and required in clojurescript, but \n> I keep getting the error: react index default is undefined\n>\n> Is this an npm\/react issue?  I only have one react installed for the \n> project.\n>\n> thanks\n> scott klarenbach\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/aef80105-8a40-46a4-9de2-53aff4a99b23%40googlegroups.com.","subject":"[ClojureScript] Re: shadow cljs jsx file - react index default is undefined Thomas Heller Sun, 26 Apr 2020 03:07:39 -0700"},
{"body":"On Fri, Apr 24, 2020 at 9:04 PM Ag Ibragimov <agzam.ibragi...@gmail.com>\nwrote: \n> Some people have no idea how awesome it is to see David Nolen working on\n> Clojurescript again. That is so cool!\n>\n\n\ud83d\ude0d\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAHa53uwkyEOrwvYx%2BJfDRdDvRy4ex7g3hVgD-qCERLkxz93BMQ%40mail.gmail.com.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.10.741 Tim Visher Sat, 25 Apr 2020 13:57:43 -0700"},
{"body":"I'm following the instructions from here: \nhttps:\/\/shadow-cljs.github.io\/docs\/UsersGuide.html#_javascript_dialects to \nget jsx flies compiled through babble and required in clojurescript, but I \nkeep getting the error: react index default is undefined \nIs this an npm\/react issue?  I only have one react installed for the \nproject.\n\nthanks\nscott klarenbach\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/e6a3285d-577b-4951-bf66-3118ab424ea1%40googlegroups.com.","subject":"[ClojureScript] shadow cljs jsx file - react index default is undefined Scott Klarenbach Sat, 25 Apr 2020 10:58:43 -0700"},
{"body":"Just tried bumping up my React Native project to 1.10.741.\n\nThe compilation seems to get stuck (doesn't finish, I waited a bunch and \nusually only takes a few seconds) at the following warnings (which are new, \ndo not appear with ClojureScript 1.10.597). \n[Figwheel:WARNING] Compile Warning: Use of undeclared Var goog.structs\/Map \n target\/public\/cljs-out\/ios\/taoensso\/encore.cljs   line:2683  column:16\n[Figwheel:WARNING] Compile Warning: Use of undeclared Var \ngoog.net.XhrIo\/send  target\/public\/cljs-out\/ios\/figwheel\/repl.cljc   \nline:313  column:8\n[Figwheel:WARNING] Compile Warning: Use of undeclared Var \ngoog.net.XhrIo\/send  target\/public\/cljs-out\/ios\/figwheel\/repl.cljc   \nline:516  column:11\n[Figwheel:WARNING] Compile Warning: Use of undeclared Var \ngoog.net.XhrIo\/send  target\/public\/cljs-out\/ios\/figwheel\/repl.cljc   \nline:313  column:8\n[Figwheel:WARNING] Compile Warning: Use of undeclared Var \ngoog.net.XhrIo\/send  target\/public\/cljs-out\/ios\/figwheel\/repl.cljc   \nline:516  column:11\n\nIt might be a Figwheel issue but I'm not sure, decided to post here in case \nsomebody has a similar problem or a solution.\n\nOn Friday, April 24, 2020 at 10:10:56 AM UTC-7, David Nolen wrote:\n>\n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>\n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>\n> Please refer to the announce post for the details:\n> https:\/\/clojurescript.org\/news\/2020-04-24-release\n>\n> This release also features a significant enhancement when building against \n> node_modules:\n> https:\/\/clojurescript.org\/news\/2020-04-24-bundle-target\n>\n> As always, feedback welcome!\n>\n> David\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/15f7d151-2ca2-4823-bd75-24ff86a6b608%40googlegroups.com.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.10.741 Rangel Spasov Fri, 24 Apr 2020 22:46:39 -0700"},
{"body":"If I create a type like this\n\n(deftype MyType [x] ...) \nis there any way I can control what is displayed at the REPL when I create \na new instance of MyType?\n\nAt present all I see is:\n\ncljs.user=> (MyType. 1)\n#object[cljs.user.MyType]\n\nIt's this \"#object[cljs.user.MyType]\" which I'd like to customise. I've \nchecked so much of the documentation and can't find anything which might \nlet me display something else.\n\nThanks.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/f4e216bf-db25-4ff8-b226-03bbbe7e396a%40googlegroups.com.","subject":"[ClojureScript] Controlling how a type instance appears in the REPL Outrovurt # Fri, 24 Apr 2020 20:41:39 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nPlease refer to the announce post for the details:\nhttps:\/\/clojurescript.org\/news\/2020-04-24-release\n\nThis release also features a significant enhancement when building against\nnode_modules:\nhttps:\/\/clojurescript.org\/news\/2020-04-24-bundle-target\n\nAs always, feedback welcome!\n\nDavid\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAPC9OaecGyHHJGEjqoDqnfg0zSGJ%2BTRzVPiNBwfaPniNr54aVg%40mail.gmail.com.","subject":"[ClojureScript] ANN: ClojureScript 1.10.741 David Nolen Fri, 24 Apr 2020 10:11:41 -0700"},
{"body":"Hi folks\n\nI'm happy to announce that this quarter Clojurists Together (with the help\nof our members) are supporting re-frame with Isaac Johnston, Practicalli\nwith John Stevenson, CIDER\/nREPL\/Orchard with Bozhidar Batsov, and Figwheel\nwith Bruce Hauman. \nYou can see more details at\nhttps:\/\/www.clojuriststogether.org\/news\/q2-2020-funding-announcement\/.\n\nThanks to all of our members <https:\/\/www.clojuriststogether.org\/members\/> for\nyour support, we couldn't do it without you.\n\nDaniel and the Clojurists Together committee\n\nOn Fri, Apr 3, 2020 at 8:37 PM Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> Hi folks\n>\n> Clojurists Together <https:\/\/www.clojuriststogether.org> is about to\n> award another round of funding to support open source Clojure projects. \n> *Applications\n> <https:\/\/www.clojuriststogether.org\/open-source\/> close on Thursday, April\n> 9th at 11:59pm PST.*\n>\n> Clojurists Together is an organisation, dedicated to funding and\n> supporting open source software, infrastructure, and documentation that is\n> important to the Clojure and ClojureScript community.\n>\n> *We plan to fund four projects at $3,000 USD\/month for 3 months ($9,000\n> USD total).*\n>\n> Previously we have supported projects\n> <https:\/\/www.clojuriststogether.org\/projects\/> like Neanderthal, Aleph,\n> Fireplace, cljdoc, Shadow CLJS, CIDER, Figwheel, clj-http and several more.\n>\n> We surveyed\n> <https:\/\/www.clojuriststogether.org\/news\/q2-2020-survey-results\/> our\n> members recently and asked them what they wanted us to focus on.\n>\n> The main things our members were interested in:\n>\n>    - Error messages\n>    - Documentation\n>    - Developer experience tools\n>    - Build tooling\n>    - IDE support\n>    - Test tooling\n>    - Linters\n>    - Profilers\n>    - Data analysis\/processing frameworks\n>\n> If you work on any of these kinds of projects, please look at applying for\n> funding.\n>\n> Figwheel, clj-kondo, Kaocha, Reitit, Shadow CLJS, re-frame, Aleph,\n> Manifold, Calva, Cloverage, Chlorine, Conjure, Malli, clj-goes-fast were\n> all projects mentioned that our members were interested in supporting.\n>\n> We encourage open source maintainers to apply\n> <https:\/\/www.clojuriststogether.org\/open-source\/> for funding, especially\n> if you work on one of the projects or areas that our members highlighted.\n>\n> If you work at a company that uses Clojure, talk to your engineering\n> manager about supporting Clojurists Together. We've been able to support\n> projects thanks to the generosity of our developer and company members\n> <https:\/\/www.clojuriststogether.org\/members\/>. The more support we have,\n> the more that we can do to improve things for the entire Clojure community.\n>\n> Thanks, Daniel.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAK2UX_iYhzJQ1j6pgEcG08de1Qy%3DNk5pf7QSfY4ky_H22VU%2B3A%40mail.gmail.com.","subject":"[ClojureScript] Re: Clojurists Together wants to fund you to work on your open source Clojure project from May-July 2020 Daniel Compton Wed, 22 Apr 2020 20:34:14 -0700"},
{"body":"That's good to know, thank you. \n\nOn Thursday, April 9, 2020 at 1:02:18 AM UTC+2, Phill Wolf wrote:\n>\n> I think it won't matter.  Passing a big collection to a function takes no \n> more memory or time than passing a small collection.  If you use get-in or \n> update-in, shallow structures will be a tiny, tiny bit faster to work with \n> than deeper structures; but I wouldn't \"fix\" that \"problem\" if it would \n> bend the program out of shape. \n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/f083e4e5-b0af-4bd4-9fd8-9213d5e84b24%40googlegroups.com.","subject":"[ClojureScript] Re: Question about passing parameters Ruud Reus Thu, 09 Apr 2020 01:45:26 -0700"},
{"body":"I think it won't matter.  Passing a big collection to a function takes no \nmore memory or time than passing a small collection.  If you use get-in or \nupdate-in, shallow structures will be a tiny, tiny bit faster to work with \nthan deeper structures; but I wouldn't \"fix\" that \"problem\" if it would \nbend the program out of shape. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/8cf82a7b-cfe7-4f61-ba5a-731bc310714f%40googlegroups.com.","subject":"[ClojureScript] Re: Question about passing parameters Phill Wolf Wed, 08 Apr 2020 16:03:22 -0700"},
{"body":"I am working on a game in Clojurescript. Inside the game loop all the \ngame's state is being tracked in a hashmap.\nThe gameloop is somewhat inspired by this article: \nhttps:\/\/swannodette.github.io\/2013\/08\/02\/100000-processes \n(go (loop [refresh (timeout rate) s state]\n      (let [[v c] (alts! [refresh ui-channel])]\n        (condp = c\n          refresh (let [new-state (update-state s)]\n                    (render! new-state)\n                    (recur (timeout rate) new-state))\n          ui-channel (let [new-state (process-ui s v)]\n                       (recur refresh new-state))))))\n\n\nI'm not at all sure if this strategy is sensible performance-wise but I'm \ntrying to make a clear distinction between a functional part in which the \ngame's state is being update by the update-state function, and a user \ninterface part where a lot of side effects occur, brought together by \nchannels, as the above snippet hopefully makes clear.\n\nI have noticed that by doing this, I tend to make many function calls from \nthe update-state function with the complete game state as a parameter, \nwhether it is to update the location of a single game entity, or to decide \nwhether a mouse click hit a player, etc.\nNow my question is: is it considered bad (memory-wise and performance-wise) \nif you pass around the complete game state all the time? It is not a huge \nobject (location, speed, orientation, color of about 25 entities). Or is it \nbetter to select just these pieces of data that are needed, pass them \naround, and then update the game state? I guess in other words, does it \nmatter where and when the destructuring is being done? \nHope this question makes any sense, let me know if more specific examples \nare needed.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/b80e1c12-cf6a-4b8f-ab1f-910e6a5ef13b%40googlegroups.com.","subject":"[ClojureScript] Question about passing parameters Ruud Reus Wed, 08 Apr 2020 10:22:22 -0700"},
{"body":"Hi folks\n\nClojurists Together <https:\/\/www.clojuriststogether.org> is about to award\nanother round of funding to support open source Clojure projects. *Applications\n<https:\/\/www.clojuriststogether.org\/open-source\/> close on Thursday, April\n9th at 11:59pm PST.* \nClojurists Together is an organisation, dedicated to funding and supporting\nopen source software, infrastructure, and documentation that is important\nto the Clojure and ClojureScript community.\n\n*We plan to fund four projects at $3,000 USD\/month for 3 months ($9,000 USD\ntotal).*\n\nPreviously we have supported projects\n<https:\/\/www.clojuriststogether.org\/projects\/> like Neanderthal, Aleph,\nFireplace, cljdoc, Shadow CLJS, CIDER, Figwheel, clj-http and several more.\n\nWe surveyed\n<https:\/\/www.clojuriststogether.org\/news\/q2-2020-survey-results\/> our\nmembers recently and asked them what they wanted us to focus on.\n\nThe main things our members were interested in:\n\n   - Error messages\n   - Documentation\n   - Developer experience tools\n   - Build tooling\n   - IDE support\n   - Test tooling\n   - Linters\n   - Profilers\n   - Data analysis\/processing frameworks\n\nIf you work on any of these kinds of projects, please look at applying for\nfunding.\n\nFigwheel, clj-kondo, Kaocha, Reitit, Shadow CLJS, re-frame, Aleph,\nManifold, Calva, Cloverage, Chlorine, Conjure, Malli, clj-goes-fast were\nall projects mentioned that our members were interested in supporting.\n\nWe encourage open source maintainers to apply\n<https:\/\/www.clojuriststogether.org\/open-source\/> for funding, especially\nif you work on one of the projects or areas that our members highlighted.\n\nIf you work at a company that uses Clojure, talk to your engineering\nmanager about supporting Clojurists Together. We've been able to support\nprojects thanks to the generosity of our developer and company members\n<https:\/\/www.clojuriststogether.org\/members\/>. The more support we have,\nthe more that we can do to improve things for the entire Clojure community.\n\nThanks, Daniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAK2UX_hO5PZeucAo-MDBo47Ynt_t%2Bu-qO9X6%2B%2Bv4Rw5tQLvNOQ%40mail.gmail.com.","subject":"[ClojureScript] Clojurists Together wants to fund you to work on your open source Clojure project from May-July 2020 Daniel Compton Fri, 03 Apr 2020 00:38:16 -0700"},
{"body":"Over the last years I developed the same toy project in several languages:\nclojurescript + reagent : https:\/\/github.com\/francisstephan\/farsiscript\nscalajs + scalajsreact : https:\/\/github.com\/francisstephan\/pashtoscript\nelm : https:\/\/github.com\/francisstephan\/arabicscript\ndart : https:\/\/github.com\/francisstephan\/turkishscript \nThe clojurescript experience was, in my subjective view, the most \nrewarding, in terms of elegance, ease of development, readibility of code, \nquality of tooling.\nThanks to the clojure community.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/acb303a5-1046-47d1-b290-4098fb24da42%40googlegroups.com.","subject":"[ClojureScript] web development languages Francis Stephan Wed, 01 Apr 2020 03:49:38 -0700"},
{"body":"On Tuesday, 25 February 2020 10:48:27 UTC, Thomas Heller wrote:\n>\n> Hey,\n>\n> first of all :stable-names has nothing to do with this. It only attempts \n> to keep the names stable between compiles, meaning that it will try to \n> re-use the same shortened name on a recompile. It'll still shorten though.\n>\n> The issue you need to google is externs and externs inference.\n>\n> See https:\/\/clojurescript.org\/guides\/externs\n>\n> Your leaflet.js externs are likely just incomplete, which happens quite \n> often if they are auto-generated.\n>\n> If you enable :infer-externs you should get warnings for things that'll be \n> renamed because the compiler cannot tell who they belong to.\n> \nThank you, that was the trick!\n\nIt's working now, but I need to do a wee bit more tidy-up before I push the \nfix to github.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/c88ac2fe-d738-49e9-b51d-ac5d3a0c3a16%40googlegroups.com.","subject":"[ClojureScript] Re: Javascript library (Leaflet) not linking in production build, because of member renaming? 'Simon Brooke' via ClojureScript Tue, 25 Feb 2020 07:01:32 -0800"},
{"body":"Hey,\n\nfirst of all :stable-names has nothing to do with this. It only attempts to \nkeep the names stable between compiles, meaning that it will try to re-use \nthe same shortened name on a recompile. It'll still shorten though. \nThe issue you need to google is externs and externs inference.\n\nSee https:\/\/clojurescript.org\/guides\/externs\n\nYour leaflet.js externs are likely just incomplete, which happens quite \noften if they are auto-generated.\n\nIf you enable :infer-externs you should get warnings for things that'll be \nrenamed because the compiler cannot tell who they belong to.\n\nYou can also compile with :pseudo-names true which will make the names \nsomewhat recognizable, meaning setView becomes $setView$. So you can add \nsetView to your externs to make that error go away. That is a bit tedious \nbut an alternative to infer-externs.\n\nHTH,\n\/thomas\n\nPS: shadow-cljs fixes a lot of those issues.\n\nOn Tuesday, February 25, 2020 at 10:24:31 AM UTC+1, Simon Brooke wrote:\n>\n> Hi all, \n>\n> I've a bug which is baffling me. If you go to \n> https:\/\/simon-brooke.github.io\/geocsv-lite\/ you will see three maps that \n> all work. Excellent. But my guilty secret is that that is a dev build; the \n> production build does not work.\n>\n> If you clone the project and run\n>\n>     lein cljsbuild once min\n>\n> and load a page, you'll get\n>\n>     TypeError: L.map(...).Wf is not a function\n>\n> You'll get that even if you set the compile options to:\n>\n>                {:id \"min\"\n>                 :source-paths [\"src\"]\n>                 :compiler {:output-to \n> \"resources\/public\/js\/compiled\/geocsv_lite.js\"\n>                            :main geocsv-lite.core\n>                            :optimizations :none\n>                            :foreign-libs [{:file \n> \".\/resources\/node_modules\/leaflet\/dist\/leaflet.js\"}]\n>                            :externs [\"leaflet.js\"]\n>                            :stable-names true\n>                            :pretty-print true\n>                            :warnings true}}\n>\n> If you look at the error, it happens here:\n>\n>       switch(c = mk instanceof G ? mk.ib : null, c) {\n>         case \"mapbox\":\n>           c = L.map(a, Aj(new x(null, 1, [Xl, \"false\"], null))).Wf([55, \n> -4], 10);\n>           L.Rg(\"http:\/\/{s}.tiles.mapbox.com\/v3\/FIXME\/{z}\/{x}\/{y}.png \n> <http:\/\/tiles.mapbox.com\/v3\/FIXME\/%7Bz%7D\/%7Bx%7D\/%7By%7D.png>\", Aj(new \n> x(null, 2, [Nl, \"Map data \\x26copy; [...]\", gl, 18], null))).ef();\n>           break a;\n>         case \"osm\":\n>           c = L.map(a, Aj(new x(null, 1, [Xl, !1], null))).Wf([55, -4], \n> 10); <<<< THIS LINE HERE\n>           L.Rg(\"https:\/\/{s}.tile.openstreetmap.org\/{z}\/{x}\/{y}.png \n> <http:\/\/tile.openstreetmap.org\/%7Bz%7D\/%7Bx%7D\/%7By%7D.png>\", Aj(new \n> x(null, 2, [Nl, \"Map data \\x26copy; \\x3ca href\\x3d'\n> http:\/\/openstreetmap.org'\\x3eOpenStreetMap\\x3c\/a\\x3e contributors\", gl, \n> 18], null))).ef(c);\n>           break a;\n>         default:\n>           throw Error([\"No matching clause: \", B.a(c)].join(\"\"));\n>       }\n>\n> which is clearly compiled from:\n>\n> (defn map-did-mount-osm\n>   \"Did-mount function loading map tile data from Open Street Map.\n>   Arguments are:\n>   * `id` the element id of the HTML element to occupy (string);\n>   * `lat` the latitude of the centre of the view (real number);\n>   * `lng` the longitude of the centre of the view (real number);\n>   * `zoom` the initial zoom level of the view (real number).\"\n>   [id lat lng zoom]\n>   (let [view (.setView\n>                (.map js\/L\n>                      id\n>                      (clj->js {:zoomControl false}))\n>                #js [lat lng]\n>                zoom)]\n>     (.addTo (.tileLayer js\/L osm-url\n>                         (clj->js {:attribution osm-attrib\n>                                   :maxZoom 18}))\n>             view)\n>     view))\n>\n> (defn map-did-mount\n>   \"Select the actual map provider to use. Arguments are:\n>   * `id` the element id of the HTML element to occupy (string);\n>   * `lat` the latitude of the centre of the view (real number);\n>   * `lng` the longitude of the centre of the view (real number);\n>   * `zoom` the initial zoom level of the view (real number).\"\n>   [id lat lng zoom]\n>   (case *map-provider*\n>     :mapbox (map-did-mount-mapbox id lat lng zoom)\n>     :osm (map-did-mount-osm id lat lng zoom)\n>     ;; potentially others\n>     ))\n>\n> So what is going wrong is that *some* (not all) Leaflet method names are \n> being substituted, *despite* :stable-names being true.\n>\n> For example, above, 'L.tileLayer' is being compiled to 'L.Rg', and, where \n> it's actually breaking, 'setView' is being compiled to 'Wf'.\n>\n> Now, this cannot be a problem unique to me, and I find it hard to believe \n> that it's a problem unique to Leaflet. But I have googled and googled, and \n> I cannot find how to tell the ClojureScript compiler that it does not own \n> the 'L' global, and cannot rename its members. Anyone? Please help?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/e9e8c2c0-5e35-4d41-a063-a3bb1ec96913%40googlegroups.com.","subject":"[ClojureScript] Re: Javascript library (Leaflet) not linking in production build, because of member renaming? Thomas Heller Tue, 25 Feb 2020 02:49:31 -0800"},
{"body":"Hi all, \n\nI've a bug which is baffling me. If you go to \nhttps:\/\/simon-brooke.github.io\/geocsv-lite\/ you will see three maps that \nall work. Excellent. But my guilty secret is that that is a dev build; the \nproduction build does not work. \nIf you clone the project and run\n\n    lein cljsbuild once min\n\nand load a page, you'll get\n\n    TypeError: L.map(...).Wf is not a function\n\nYou'll get that even if you set the compile options to:\n\n               {:id \"min\"\n                :source-paths [\"src\"]\n                :compiler {:output-to \n\"resources\/public\/js\/compiled\/geocsv_lite.js\"\n                           :main geocsv-lite.core\n                           :optimizations :none\n                           :foreign-libs [{:file \n\".\/resources\/node_modules\/leaflet\/dist\/leaflet.js\"}]\n                           :externs [\"leaflet.js\"]\n                           :stable-names true\n                           :pretty-print true\n                           :warnings true}}\n\nIf you look at the error, it happens here:\n\n      switch(c = mk instanceof G ? mk.ib : null, c) {\n        case \"mapbox\":\n          c = L.map(a, Aj(new x(null, 1, [Xl, \"false\"], null))).Wf([55, \n-4], 10);\n          L.Rg(\"http:\/\/{s}.tiles.mapbox.com\/v3\/FIXME\/{z}\/{x}\/{y}.png\";, \nAj(new x(null, 2, [Nl, \"Map data \\x26copy; [...]\", gl, 18], null))).ef();\n          break a;\n        case \"osm\":\n          c = L.map(a, Aj(new x(null, 1, [Xl, !1], null))).Wf([55, -4], \n10); <<<< THIS LINE HERE\n          L.Rg(\"https:\/\/{s}.tile.openstreetmap.org\/{z}\/{x}\/{y}.png\";, Aj(new \nx(null, 2, [Nl, \"Map data \\x26copy; \\x3ca \nhref\\x3d'http:\/\/openstreetmap.org'\\x3eOpenStreetMap\\x3c\/a\\x3e \ncontributors\", gl, 18], null))).ef(c);\n          break a;\n        default:\n          throw Error([\"No matching clause: \", B.a(c)].join(\"\"));\n      }\n\nwhich is clearly compiled from:\n\n(defn map-did-mount-osm\n  \"Did-mount function loading map tile data from Open Street Map.\n  Arguments are:\n  * `id` the element id of the HTML element to occupy (string);\n  * `lat` the latitude of the centre of the view (real number);\n  * `lng` the longitude of the centre of the view (real number);\n  * `zoom` the initial zoom level of the view (real number).\"\n  [id lat lng zoom]\n  (let [view (.setView\n               (.map js\/L\n                     id\n                     (clj->js {:zoomControl false}))\n               #js [lat lng]\n               zoom)]\n    (.addTo (.tileLayer js\/L osm-url\n                        (clj->js {:attribution osm-attrib\n                                  :maxZoom 18}))\n            view)\n    view))\n\n(defn map-did-mount\n  \"Select the actual map provider to use. Arguments are:\n  * `id` the element id of the HTML element to occupy (string);\n  * `lat` the latitude of the centre of the view (real number);\n  * `lng` the longitude of the centre of the view (real number);\n  * `zoom` the initial zoom level of the view (real number).\"\n  [id lat lng zoom]\n  (case *map-provider*\n    :mapbox (map-did-mount-mapbox id lat lng zoom)\n    :osm (map-did-mount-osm id lat lng zoom)\n    ;; potentially others\n    ))\n\nSo what is going wrong is that *some* (not all) Leaflet method names are \nbeing substituted, *despite* :stable-names being true.\n\nFor example, above, 'L.tileLayer' is being compiled to 'L.Rg', and, where \nit's actually breaking, 'setView' is being compiled to 'Wf'.\n\nNow, this cannot be a problem unique to me, and I find it hard to believe \nthat it's a problem unique to Leaflet. But I have googled and googled, and \nI cannot find how to tell the ClojureScript compiler that it does not own \nthe 'L' global, and cannot rename its members. Anyone? Please help?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/b354e642-93ae-4890-a317-d58f89ed2c19%40googlegroups.com.","subject":"[ClojureScript] Javascript library (Leaflet) not linking in production build, because of member renaming? 'Simon Brooke' via ClojureScript Tue, 25 Feb 2020 01:24:59 -0800"},
{"body":"Hi folks\n\nClojurists Together is happy to announce that for Q1 of 2020\n(February-April) we are funding four projects $9,000 each: \nReagent with Juho Teperi\nfireplace.vim with Tim Pope\nRing with James Reeves\nCalva with Brandon Ringe\n\nYou can see more detail on what they'll be working on at\nhttps:\/\/www.clojuriststogether.org\/news\/q1-2020-funding-announcement\/.\n\nThanks to all the Clojurists Together members\n<https:\/\/www.clojuriststogether.org\/members\/> who helped make this\npossible. If you or your company would like to join in the work that we're\ndoing, you can sign up as a company member\n<https:\/\/www.clojuriststogether.org\/companies\/>, or a developer member\n<https:\/\/www.clojuriststogether.org\/developers\/>. You can now use a credit\ncard instead of PayPal, and we can accept bank transfers for annual\nmemberships.\n\nThanks, Daniel.\n\n\n\nOn Wed, Jan 15, 2020 at 5:39 AM Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> Hi folks\n>\n> Applications for this close tomorrow. If you work on a Clojure open source\n> project that is important to the community (or a subset of the community)\n> we'd love to fund you. We haven't had many applications for this quarter\n> yet (though we also consider projects that applied over the last 3 funding\n> rounds).\n>\n> I'm happy to review application drafts if people want some guidance or are\n> not sure if their application fits our funding structure.\n>\n> Thanks, Daniel.\n>\n> On Thu, Jan 9, 2020 at 8:26 PM Daniel Compton <\n> daniel.compton.li...@gmail.com> wrote:\n>\n>> Hi folks\n>>\n>> Clojurists Together is going to be funding 4 Clojure open source projects\n>> from February - April. If you maintain an open source project that could\n>> use some funding, please consider applying.\n>>\n>> Applications close in a week on 15th January 11:59pm PST.\n>>\n>> The main things our members were interested\n>> <https:\/\/www.clojuriststogether.org\/news\/q1-2020-survey-results\/> in:\n>>\n>>    - Error messages\n>>    - Documentation\n>>    - Developer experience tools\n>>    - Build tooling\n>>    - IDE support\n>>    - Test tooling\n>>    - Linters\n>>    - Profilers\n>>    - Data analysis\/processing frameworks\n>>\n>> If you work on any of these kinds of projects, please look at applying\n>> for funding. You can look at the survey results for more information on\n>> which projects and kinds of projects our members are interested in.\n>>\n>> You can apply at https:\/\/www.clojuriststogether.org\/open-source\/.\n>>\n>> If you have any questions about applying or your application, please get\n>> in touch. We're happy to talk about your application and answer any\n>> questions you have.\n>>\n>> Thanks to all of the company and developer members\n>> <https:\/\/www.clojuriststogether.org\/members\/> who have funded this work,\n>> we couldn't do it without you.\n>>\n>> Thanks, Daniel.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAK2UX_h2%3DWVy%3DMYWSuL1wYpbhLCNFvQqCmGJpNchxA%3DUjHE_%3Dw%40mail.gmail.com.","subject":"[ClojureScript] Re: Clojurists Together call for proposals (4 projects $9,000 each) Daniel Compton Sun, 26 Jan 2020 15:26:10 -0800"},
{"body":"I may do some testing in the a close future and report here. I will either\ndo it in our project or in a an open-source project that's \"relevant\" to\nshow real-world numbers. Do you have an idea of such project? I think I\nwill try to bench compilation time in advanced mode with a different number\nof cores activated by BIOS (I will soon have a 16C\/32T machine, I hope the\nBIOS will allow me to deactivate some of them).\nKhalid aka DjebbZ\n@Dj3bbZ \n\nOn Fri, Jan 17, 2020 at 11:58 AM Thomas Heller <th.hel...@gmail.com> wrote:\n\n> Depends on the size I'd say but in theory yes. Lots of things factor into\n> the compilation times, even tiny namespaces can take a long time to compile\n> if some macro just takes a long time to do its thing.\n>\n> On Friday, January 17, 2020 at 11:18:21 AM UTC+1, Khalid Jebbari wrote:\n>>\n>> Thanks for the detailed answer. Does it somewhat mean that splitting code\n>> into smaller namespaces can achieve faster compilation thanks to\n>> parallelization ?\n>>\n>>\n>> On Fri, Jan 17, 2020 at 10:43 AM Thomas Heller <th.h...@gmail.com> wrote:\n>>\n>>> It depends on the namespaces used. In general a CLJS namespaces can only\n>>> be compiled once all its dependencies have been compiled. So if those\n>>> dependendencies can be compiled in parallel they will use multiple threads\n>>> from a pool, which should keep all cores busy. In my experience a good\n>>> balance between core count and core speed matters. If you have big\n>>> namespaces that a lot of other namespaces depend on (eg. like cljs.core)\n>>> then its compilation will \"block\" all other threads so its important it\n>>> finishes fast (ie. fast cores). If you have lots a small namespaces that\n>>> are mostly independent then you can get maximum parallelization (ie. many\n>>> cores).\n>>>\n>>> I have a i7-8700K 6c and there are builds that aren't able to use all\n>>> cores due to the namespace setup (few very large ones). Others happily use\n>>> everything. Single core difference is gigantic to my previous CPU from a\n>>> macbook pro 2016.\n>>>\n>>> If you really really want to torture your CPU you can try\n>>> https:\/\/github.com\/mfikes\/fifth-postulate or\n>>> https:\/\/github.com\/mfikes\/coal-mine to compare.\n>>>\n>>> HTH,\n>>> Thomas\n>>>\n>>> On Friday, January 17, 2020 at 5:29:06 AM UTC+1, Khalid Jebbari wrote:\n>>>>\n>>>> Hello,\n>>>>\n>>>> We're using the parallel build option, and I noticed the difference in\n>>>> speed between my laptop and other laptops is basically proportional to the\n>>>> difference in speed of the CPUs (based on notebookcheck's benchmarks). I\n>>>> have 4C\/8T 7700HQ CPU and my colleagues have a 8565U iirc (some have the\n>>>> 6600U). Mine is almost twice as fast in benchmarks, which is reflected in\n>>>> cljs compilation times.\n>>>>\n>>>> So my question is how does the cljs compiler scale with regards to CPU?\n>>>> Core count? Single thread perf? All cores frequencies? Is it capped to some\n>>>> number of cores?\n>>>>\n>>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to a topic in the\n>>> Google Groups \"ClojureScript\" group.\n>>> To unsubscribe from this topic, visit\n>>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/PwpVJNrF0Zc\/unsubscribe.\n>>> To unsubscribe from this group and all its topics, send an email to\n>>> clojur...@googlegroups.com.\n>>> To view this discussion on the web visit\n>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7a967f70-995e-49d3-9b25-a5b327689736%40googlegroups.com\n>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7a967f70-995e-49d3-9b25-a5b327689736%40googlegroups.com?utm_medium=email&utm_source=footer>\n>>> .\n>>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/PwpVJNrF0Zc\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/fe80b84a-4c23-4789-9b27-8f84c631d93d%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/fe80b84a-4c23-4789-9b27-8f84c631d93d%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAM3R3BCE7cL9cBrPAVMKnzd6SZ65p3XeXbMM0wFMhs%2BjvqxN1A%40mail.gmail.com.","subject":"Re: [ClojureScript] Re: How does Clojurescript compilation scales with CPU? Khalid Jebbari Fri, 17 Jan 2020 04:19:59 -0800"},
{"body":"Depends on the size I'd say but in theory yes. Lots of things factor into \nthe compilation times, even tiny namespaces can take a long time to compile \nif some macro just takes a long time to do its thing. \nOn Friday, January 17, 2020 at 11:18:21 AM UTC+1, Khalid Jebbari wrote:\n>\n> Thanks for the detailed answer. Does it somewhat mean that splitting code \n> into smaller namespaces can achieve faster compilation thanks to \n> parallelization ?\n>\n>\n> On Fri, Jan 17, 2020 at 10:43 AM Thomas Heller <th.h...@gmail.com \n> <javascript:>> wrote:\n>\n>> It depends on the namespaces used. In general a CLJS namespaces can only \n>> be compiled once all its dependencies have been compiled. So if those \n>> dependendencies can be compiled in parallel they will use multiple threads \n>> from a pool, which should keep all cores busy. In my experience a good \n>> balance between core count and core speed matters. If you have big \n>> namespaces that a lot of other namespaces depend on (eg. like cljs.core) \n>> then its compilation will \"block\" all other threads so its important it \n>> finishes fast (ie. fast cores). If you have lots a small namespaces that \n>> are mostly independent then you can get maximum parallelization (ie. many \n>> cores). \n>>\n>> I have a i7-8700K 6c and there are builds that aren't able to use all \n>> cores due to the namespace setup (few very large ones). Others happily use \n>> everything. Single core difference is gigantic to my previous CPU from a \n>> macbook pro 2016.\n>>\n>> If you really really want to torture your CPU you can try \n>> https:\/\/github.com\/mfikes\/fifth-postulate or \n>> https:\/\/github.com\/mfikes\/coal-mine to compare.\n>>\n>> HTH,\n>> Thomas\n>>\n>> On Friday, January 17, 2020 at 5:29:06 AM UTC+1, Khalid Jebbari wrote:\n>>>\n>>> Hello,\n>>>\n>>> We're using the parallel build option, and I noticed the difference in \n>>> speed between my laptop and other laptops is basically proportional to the \n>>> difference in speed of the CPUs (based on notebookcheck's benchmarks). I \n>>> have 4C\/8T 7700HQ CPU and my colleagues have a 8565U iirc (some have the \n>>> 6600U). Mine is almost twice as fast in benchmarks, which is reflected in \n>>> cljs compilation times.\n>>>\n>>> So my question is how does the cljs compiler scale with regards to CPU? \n>>> Core count? Single thread perf? All cores frequencies? Is it capped to some \n>>> number of cores?\n>>>\n>>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to a topic in the \n>> Google Groups \"ClojureScript\" group.\n>> To unsubscribe from this topic, visit \n>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/PwpVJNrF0Zc\/unsubscribe.\n>> To unsubscribe from this group and all its topics, send an email to \n>> clojur...@googlegroups.com <javascript:>.\n>> To view this discussion on the web visit \n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7a967f70-995e-49d3-9b25-a5b327689736%40googlegroups.com\n>>  \n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7a967f70-995e-49d3-9b25-a5b327689736%40googlegroups.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/fe80b84a-4c23-4789-9b27-8f84c631d93d%40googlegroups.com.","subject":"Re: [ClojureScript] Re: How does Clojurescript compilation scales with CPU? Thomas Heller Fri, 17 Jan 2020 02:59:05 -0800"},
{"body":"Thanks for the detailed answer. Does it somewhat mean that splitting code\ninto smaller namespaces can achieve faster compilation thanks to\nparallelization ? \n\nOn Fri, Jan 17, 2020 at 10:43 AM Thomas Heller <th.hel...@gmail.com> wrote:\n\n> It depends on the namespaces used. In general a CLJS namespaces can only\n> be compiled once all its dependencies have been compiled. So if those\n> dependendencies can be compiled in parallel they will use multiple threads\n> from a pool, which should keep all cores busy. In my experience a good\n> balance between core count and core speed matters. If you have big\n> namespaces that a lot of other namespaces depend on (eg. like cljs.core)\n> then its compilation will \"block\" all other threads so its important it\n> finishes fast (ie. fast cores). If you have lots a small namespaces that\n> are mostly independent then you can get maximum parallelization (ie. many\n> cores).\n>\n> I have a i7-8700K 6c and there are builds that aren't able to use all\n> cores due to the namespace setup (few very large ones). Others happily use\n> everything. Single core difference is gigantic to my previous CPU from a\n> macbook pro 2016.\n>\n> If you really really want to torture your CPU you can try\n> https:\/\/github.com\/mfikes\/fifth-postulate or\n> https:\/\/github.com\/mfikes\/coal-mine to compare.\n>\n> HTH,\n> Thomas\n>\n> On Friday, January 17, 2020 at 5:29:06 AM UTC+1, Khalid Jebbari wrote:\n>>\n>> Hello,\n>>\n>> We're using the parallel build option, and I noticed the difference in\n>> speed between my laptop and other laptops is basically proportional to the\n>> difference in speed of the CPUs (based on notebookcheck's benchmarks). I\n>> have 4C\/8T 7700HQ CPU and my colleagues have a 8565U iirc (some have the\n>> 6600U). Mine is almost twice as fast in benchmarks, which is reflected in\n>> cljs compilation times.\n>>\n>> So my question is how does the cljs compiler scale with regards to CPU?\n>> Core count? Single thread perf? All cores frequencies? Is it capped to some\n>> number of cores?\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/PwpVJNrF0Zc\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7a967f70-995e-49d3-9b25-a5b327689736%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/7a967f70-995e-49d3-9b25-a5b327689736%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAM3R3BARm8m08%3DA1aSN%2B3rW9E0DUNGyuzyWgGTmf5fscGnFjpA%40mail.gmail.com.","subject":"Re: [ClojureScript] Re: How does Clojurescript compilation scales with CPU? Khalid Jebbari Fri, 17 Jan 2020 02:18:36 -0800"},
{"body":"It depends on the namespaces used. In general a CLJS namespaces can only be \ncompiled once all its dependencies have been compiled. So if those \ndependendencies can be compiled in parallel they will use multiple threads \nfrom a pool, which should keep all cores busy. In my experience a good \nbalance between core count and core speed matters. If you have big \nnamespaces that a lot of other namespaces depend on (eg. like cljs.core) \nthen its compilation will \"block\" all other threads so its important it \nfinishes fast (ie. fast cores). If you have lots a small namespaces that \nare mostly independent then you can get maximum parallelization (ie. many \ncores). \nI have a i7-8700K 6c and there are builds that aren't able to use all cores \ndue to the namespace setup (few very large ones). Others happily use \neverything. Single core difference is gigantic to my previous CPU from a \nmacbook pro 2016.\n\nIf you really really want to torture your CPU you can try \nhttps:\/\/github.com\/mfikes\/fifth-postulate or \nhttps:\/\/github.com\/mfikes\/coal-mine to compare.\n\nHTH,\nThomas\n\nOn Friday, January 17, 2020 at 5:29:06 AM UTC+1, Khalid Jebbari wrote:\n>\n> Hello,\n>\n> We're using the parallel build option, and I noticed the difference in \n> speed between my laptop and other laptops is basically proportional to the \n> difference in speed of the CPUs (based on notebookcheck's benchmarks). I \n> have 4C\/8T 7700HQ CPU and my colleagues have a 8565U iirc (some have the \n> 6600U). Mine is almost twice as fast in benchmarks, which is reflected in \n> cljs compilation times.\n>\n> So my question is how does the cljs compiler scale with regards to CPU? \n> Core count? Single thread perf? All cores frequencies? Is it capped to some \n> number of cores?\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/7a967f70-995e-49d3-9b25-a5b327689736%40googlegroups.com.","subject":"[ClojureScript] Re: How does Clojurescript compilation scales with CPU? Thomas Heller Fri, 17 Jan 2020 01:43:33 -0800"},
{"body":"Hello,\n\nWe're using the parallel build option, and I noticed the difference in speed \nbetween my laptop and other laptops is basically proportional to the difference \nin speed of the CPUs (based on notebookcheck's benchmarks). I have 4C\/8T 7700HQ \nCPU and my colleagues have a 8565U iirc (some have the 6600U). Mine is almost \ntwice as fast in benchmarks, which is reflected in cljs compilation times. \nSo my question is how does the cljs compiler scale with regards to CPU? Core \ncount? Single thread perf? All cores frequencies? Is it capped to some number \nof cores?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/6d24e681-188b-44c8-905c-afd545794e3a%40googlegroups.com.","subject":"[ClojureScript] How does Clojurescript compilation scales with CPU? Khalid Jebbari Thu, 16 Jan 2020 20:29:16 -0800"},
{"body":"Hi folks\n\nApplications for this close tomorrow. If you work on a Clojure open source\nproject that is important to the community (or a subset of the community)\nwe'd love to fund you. We haven't had many applications for this quarter\nyet (though we also consider projects that applied over the last 3 funding\nrounds). \nI'm happy to review application drafts if people want some guidance or are\nnot sure if their application fits our funding structure.\n\nThanks, Daniel.\n\nOn Thu, Jan 9, 2020 at 8:26 PM Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> Hi folks\n>\n> Clojurists Together is going to be funding 4 Clojure open source projects\n> from February - April. If you maintain an open source project that could\n> use some funding, please consider applying.\n>\n> Applications close in a week on 15th January 11:59pm PST.\n>\n> The main things our members were interested\n> <https:\/\/www.clojuriststogether.org\/news\/q1-2020-survey-results\/> in:\n>\n>    - Error messages\n>    - Documentation\n>    - Developer experience tools\n>    - Build tooling\n>    - IDE support\n>    - Test tooling\n>    - Linters\n>    - Profilers\n>    - Data analysis\/processing frameworks\n>\n> If you work on any of these kinds of projects, please look at applying for\n> funding. You can look at the survey results for more information on which\n> projects and kinds of projects our members are interested in.\n>\n> You can apply at https:\/\/www.clojuriststogether.org\/open-source\/.\n>\n> If you have any questions about applying or your application, please get\n> in touch. We're happy to talk about your application and answer any\n> questions you have.\n>\n> Thanks to all of the company and developer members\n> <https:\/\/www.clojuriststogether.org\/members\/> who have funded this work,\n> we couldn't do it without you.\n>\n> Thanks, Daniel.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAK2UX_jESh1YKzWeo%3Du%2BbvS7qaGxKaKm44uvDRwxf2%3Dg-Dqg%3DA%40mail.gmail.com.","subject":"[ClojureScript] Re: Clojurists Together call for proposals (4 projects $9,000 each) Daniel Compton Tue, 14 Jan 2020 08:40:04 -0800"},
{"body":"Hi folks\n\nClojurists Together is going to be funding 4 Clojure open source projects\nfrom February - April. If you maintain an open source project that could\nuse some funding, please consider applying. \nApplications close in a week on 15th January 11:59pm PST.\n\nThe main things our members were interested\n<https:\/\/www.clojuriststogether.org\/news\/q1-2020-survey-results\/> in:\n\n   - Error messages\n   - Documentation\n   - Developer experience tools\n   - Build tooling\n   - IDE support\n   - Test tooling\n   - Linters\n   - Profilers\n   - Data analysis\/processing frameworks\n\nIf you work on any of these kinds of projects, please look at applying for\nfunding. You can look at the survey results for more information on which\nprojects and kinds of projects our members are interested in.\n\nYou can apply at https:\/\/www.clojuriststogether.org\/open-source\/.\n\nIf you have any questions about applying or your application, please get in\ntouch. We're happy to talk about your application and answer any questions\nyou have.\n\nThanks to all of the company and developer members\n<https:\/\/www.clojuriststogether.org\/members\/> who have funded this work, we\ncouldn't do it without you.\n\nThanks, Daniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAK2UX_hZUgKtOm3Q_q_B0Yzf6XnJV2MVhTM%2Bj33jLOc2NrtW2w%40mail.gmail.com.","subject":"[ClojureScript] Clojurists Together call for proposals (4 projects $9,000 each) Daniel Compton Wed, 08 Jan 2020 23:26:47 -0800"},
{"body":"Hi there - I want to import an NPM package which has been developed using \nthe `create-react-app` and CSS modules. One of the props it takes is an \nactual image, as in `import theImg from '.\/some\/image.png` but I am \nstruggling to see how to import an image within reagent. \nIs this possible or should I fall back to using strings and\/or CSS classes?\n\nThanks!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/8baefb4d-58d0-4e19-bc9d-66cabaa0a36a%40googlegroups.com.","subject":"[ClojureScript] Ability to import images\/css modules? Colin Yates Sat, 30 Nov 2019 09:46:39 -0800"},
{"body":"Hello, allow me to announce my first public OSS ClojureScript library\n\nRe-state routes re-frame events via statechart interpreter, currently \nbacked by XState <https:\/\/xstate.js.org> library, thus allowing more fine \ngrained event handling. A re-frame component might use a statechart \ninterpreter to dispatch to and handle events related only to the component. \nThe library also implements facilities to isolate component state within \nre-frame application database, thus making it possible to write real \nindependent standalone components. \nDocumentation and examples can be found here: \nhttps:\/\/github.com\/MaximGB\/re-state\nReal life example here: https:\/\/github.com\/MaximGB\/TetrisRF\n\nGitHub: https:\/\/github.com\/MaximGB\/re-state\nClojars: https:\/\/clojars.org\/maximgb\/re-state\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/e506d772-fc3b-4ebf-a848-8d7a40905d7d%40googlegroups.com.","subject":"[ClojureScript] [ANN] maximgb.re-state 1.0.0 a re-frame supplimentary library routing dispatched events via statecharts implementing finite state atomata Maxim Bazhenov Wed, 20 Nov 2019 05:56:21 -0800"},
{"body":"Good workaround! Thank you sincerely.\n\n\u5728 2019\u5e7411\u67088\u65e5\u661f\u671f\u4e94 UTC+8\u4e0a\u53483:23:36\uff0cZane Shelby\u5199\u9053\uff1a\n>\n> The short answer is that ClojureScript is compiled to JavaScript before \n> being evaluated, and JavaScript is very permissive when it comes to the \n> number of arguments provided to functions.\n>\n> To show you there's no black magic going on here it helps to look at the \n> JavaScript the compiler produces for your program. (One easy way to do that \n> is to paste it into app.klipse.tech.) Here's what I get for your program:\n>\n> cljs.user.call_fn = (function cljs$user$call_fn(f){\n>   return f.call(null,(23),(34));\n> });\n> cljs.user.my_fn = (function cljs$user$my_fn(a){\n>   return cljs.core.println.call(null,a);\n> });cljs.user.call_fn.call(null,cljs.user.my_fn); \n>\n> my-fn only accepts one argument, but is called (via \n> Function.prototype.call \n> <https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Function\/call>)\n>  \n> with two. It turns out JavaScript functions, whether called directly, via \n> Function.prototype.call \n> <https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Function\/call>,\n>  \n> or via Function.prototype.apply \n> <https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Function\/apply>\n>  ignore \n> extra arguments. The fact that you've passed it into call-fn as an argument \n> before calling it is red herring, turns out.\n>\n> You can validate this for yourself in your browser's JavaScript console:\n>\n> (function(x) { return x + 1; })(0,7)\n> \u21d2 1\n>\n> (function(x) { return x + 1; }).call(null, 0, 7)\n> \u21d2 1\n>\n> (function(x) { return x + 1; }).apply(null, [0, 7])\n> \u21d2 1\n>\n> JavaScript functions are also permissive in the other direction; missing \n> arguments will be replaced with undefined:\n>\n> (function(x) { return console.log(x); })()\n> undefined\n> \u21d2 undefined\n>  \n> (function(x) { return console.log(x); }).call(null)\n> undefined\n> \u21d2 undefined \n>  \n> (function(x) { return console.log(x); }).apply(null, [])\n> undefined\n> \u21d2 undefined\n>\n> Hope that helps!\n>\n>\n> On Thu, Nov 07, 2019 at 1:46 PM, Alan Moore <kahun...@coopsource.org \n> <javascript:>> wrote:\n>\n>> At the risk of being redundant, the Clojure version throws an exception:\n>>\n>> user=> (call-fn my-fn)\n>>\n>> ArityException Wrong number of args (2) passed to: user\/my-fn  \n>> clojure.lang.AFn.throwArity (AFn.java:429 <http:\/\/afn.java:429\/>)\n>>\n>> Alan\n>>\n>>\n>> On Wednesday, November 6, 2019 at 9:55:47 PM UTC-8, Aklscc wrote:\n>>>\n>>> Hello, everyone. I use ClojureScript as following:\n>>>\n>>> (defn call-fn\n>>>  [f]\n>>>  (f 23 34))\n>>>\n>>> (defn my-fn\n>>>  [a]\n>>>  (println a))\n>>>\n>>> (call-fn my-fn)\n>>> ;; => 23\n>>>\n>>> Without any exception throwed. Why does this? Is it a bug?  \n>>>\n>>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojur...@googlegroups.com <javascript:>.\n>> To view this discussion on the web visit \n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0c02f6ea-3b20-4356-9320-98594faf7986%40googlegroups.com\n>>  \n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0c02f6ea-3b20-4356-9320-98594faf7986%40googlegroups.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n>\n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/3f77e1d4-969c-40cb-aeed-06cb67738d0b%40googlegroups.com.","subject":"Re: [ClojureScript] Re: Function passed as parameter, its parameters number will not be validated when called. Aklscc Thu, 07 Nov 2019 20:26:05 -0800"},
{"body":"The short answer is that ClojureScript is compiled to JavaScript before being \nevaluated, and JavaScript is very permissive when it comes to the number of \narguments provided to functions. \nTo show you there's no black magic going on here it helps to look at the \nJavaScript the compiler produces for your program. (One easy way to do that is \nto paste it into\u00a0app.klipse.tech ( http:\/\/app.klipse.tech\/ ).) Here's what I \nget for your program:\n\ncljs.user.call_fn = (function cljs$user$call_fn(f){ return f.call ( \nhttp:\/\/f.call\/ ) (null,(23),(34)); }); cljs.user.my_fn = (function \ncljs$user$my_fn(a){ return cljs.core.println.call ( \nhttp:\/\/cljs.core.println.call\/ ) (null,a); }); cljs.user.call_fn.call ( \nhttp:\/\/cljs.user.call_fn.call\/ ) (null,cljs.user.my_fn);\n\nmy-fn only accepts one argument, but is called (via Function.prototype.call ( \nhttps:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Function\/call\n ) ) with two. It turns out JavaScript functions, whether called directly, via \nFunction.prototype.call ( \nhttps:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Function\/call\n ) , or via Function.prototype.apply ( \nhttps:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Function\/apply\n )\u00a0ignore extra arguments. The fact that you've passed it into call-fn as an \nargument before calling it is red herring, turns out.\n\nYou can validate this for yourself in your browser's JavaScript console:\n\n(function(x) { return x + 1; })(0,7) \u21d2 1 (function(x) { return x + 1; \n}).call(null, 0, 7) \u21d2 1 (function(x) { return x + 1; }).apply(null, [0, 7]) \u21d2 1\nJavaScript functions are also permissive in the other direction; missing \narguments will be replaced with undefined:\n\n(function(x) { return console.log(x); })() undefined \u21d2 undefined (function(x) { \nreturn console.log(x); }).call(null) undefined \u21d2 undefined (function(x) { \nreturn console.log(x); }).apply(null, []) undefined \u21d2 undefined\nHope that helps!\n\nOn Thu, Nov 07, 2019 at 1:46 PM, Alan Moore < kahunamo...@coopsource.org > \nwrote:\n\n> \n> At the risk of being redundant, the Clojure version throws an exception:\n> \n> \n> user=> (call-fn my-fn)\n> \n> \n> ArityException Wrong number of args (2) passed to: user\/my-fn\u00a0\n> clojure.lang.AFn.throwArity ( AFn. java:429 ( http:\/\/afn.java:429\/ ) )\n> \n> \n> Alan\n> \n> \n> \n> On Wednesday, November 6, 2019 at 9:55:47 PM UTC-8, Aklscc wrote:\n>> Hello, everyone. I use ClojureScript as following:\n>> \n>> \n>> ( defn call - fn\n>> \u00a0[ f ]\n>> \u00a0( f 23 34 ))\n>> \n>> ( defn my - fn\n>> \u00a0[ a ]\n>> \u00a0( println a ))\n>> \n>> ( call - fn my - fn )\n>> ;; => 23\n>> \n>> \n>> Without any exception throwed. Why does this? Is it a bug?\u00a0\u00a0\n>> \n>> \n>> \n> \n> \n> \n> \n> \n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscribe@ googlegroups. com (\n> clojurescript+unsubscr...@googlegroups.com ).\n> To view this discussion on the web visit https:\/ \/ groups. google. com\/ d\/\n> msgid\/ clojurescript\/ 0c02f6ea-3b20-4356-9320-98594faf7986%40googlegroups.\n> com (\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0c02f6ea-3b20-4356-9320-98594faf7986%40googlegroups.com?utm_medium=email&utm_source=footer\n> ).\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/k2p2fbka.fc9c3068-0234-4eec-91af-0457ba0a00a3%40we.are.superhuman.com.","subject":"Re: [ClojureScript] Re: Function passed as parameter, its parameters number will not be validated when called. Zane Shelby Thu, 07 Nov 2019 11:24:16 -0800"},
{"body":"At the risk of being redundant, the Clojure version throws an exception:\n\nuser=> (call-fn my-fn) \nArityException Wrong number of args (2) passed to: user\/my-fn  \nclojure.lang.AFn.throwArity (AFn.java:429)\n\nAlan\n\n\nOn Wednesday, November 6, 2019 at 9:55:47 PM UTC-8, Aklscc wrote:\n>\n> Hello, everyone. I use ClojureScript as following:\n>\n> (defn call-fn\n>  [f]\n>  (f 23 34))\n>\n> (defn my-fn\n>  [a]\n>  (println a))\n>\n> (call-fn my-fn)\n> ;; => 23\n>\n> Without any exception throwed. Why does this? Is it a bug?  \n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/0c02f6ea-3b20-4356-9320-98594faf7986%40googlegroups.com.","subject":"[ClojureScript] Re: Function passed as parameter, its parameters number will not be validated when called. Alan Moore Thu, 07 Nov 2019 10:46:56 -0800"},
{"body":"Hello, everyone. I use ClojureScript as following:\n\n(defn call-fn\n [f]\n (f 23 34)) \n(defn my-fn\n [a]\n (println a))\n\n(call-fn my-fn)\n;; => 23\n\nWithout any exception throwed. Why does this? Is it a bug?  \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/d6010178-a48d-4e10-a8c3-80c0319bdd89%40googlegroups.com.","subject":"[ClojureScript] Function passed as parameter, its parameters number will not be validated when called. Aklscc Wed, 06 Nov 2019 21:56:04 -0800"},
{"body":"Hello,\n\nI'm working on a clojurescript project which uses XState javascript \nlibrary. XState is a state chart and final state machine library which I'm \ntrying to adopt to work alongside re-frame. I define state chart transition \nactions using clojurescript and pass them to javascript world. Recently \nI've stumbled over a situation that I can't pass a function from \nclojurescript to XState\/javascript if the function have metadata attached. \nJavascript code can't invoke such a function, because it's not a javascript \nfunciton anymore, but a clojurescript entity implementing IFn protocol. The \nreason is that the result of\n(with-meta (fn [x]...))\ndoesn't return a function which external javascript code can call, but an \nobject of cljs.core\/MetaFn type, which I think is against (with-meta) \ncontract. \nwith-meta documentation says:\n\n> cljs.core\/with-meta\n>  [o meta]\n>   Returns an object of the same type and value as obj, with\n>   map m as its metadata.\n>\n\nSo I expect the object of the same type, such that\n(= (type #()) (type (with-meta #() {:a :b})))\nholds, as well as\n(= true (instance? js\/Function (with-meta #() {:a :b})))\n\nSo the question is, have I found a bug?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/e653965f-0277-470e-8ea0-926681f743a6%40googlegroups.com.","subject":"[ClojureScript] Bug? Adding meta data to a function changes the function type which seems to break with-meta contract Maxim Bazhenov Mon, 28 Oct 2019 10:27:08 -0700"},
{"body":"Hello,\n\nI'm making a component using ClojureScript, however the main project is in \nJS and webpack. \nI tried webpack's dynamic import, but it doesn't work well. in particular, \nin the ClojureScript, there is a line:\n\ngoog.global = this;\n\nthis will be undefined if I import the code.\n\nI have to use a <script> tag\n\nand this is just one problem, there are a few others.\n\nIs there any instruction on how to import a ClojureScript build with \nwebpack?\n\nThanks\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/850caede-9709-4e52-b6f1-04949335062d%40googlegroups.com.","subject":"[ClojureScript] How to import a compiled ClojureScript into a JS project using webpack? Shi Yan Mon, 28 Oct 2019 07:52:15 -0700"},
{"body":"I am pleased to announce the 0.1.1 release of core.rrb-vector, a Clojure\nContrib library extending the Clojure vector API with logarithmic-time\nconcatenation and slicing: \n  https:\/\/github.com\/clojure\/core.rrb-vector\n\n  [org.clojure\/core.rrb-vector \"0.1.1\"]\n\n  <dependency>\n    <groupId>org.clojure<\/groupId>\n    <artifactId>core.rrb-vector<\/artifactId>\n    <version>0.1.1<\/version>\n  <\/dependency>\n\nThis release is nearly identical to the recent version 0.1.0 release.  The\nonly notable change is for the ClojureScript implementation, to avoid\ncausing the ClojureScript compiler to issue a warning.  I am not aware of\nany functional bugs due to that warning, but it seemed best to clean up the\ncode there anyway.\n\nIndependent of that, I have added some benchmarks and extra documentation\nrelated to the library since the 0.1.0 release, described in the change log:\n\n  https:\/\/github.com\/clojure\/core.rrb-vector\/blob\/master\/CHANGES.md\n\nCheers,\nMicha\u0142 Marczyk and Andy Fingerhut\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAKvLtDZPQ0RTFUYOmOHxJB8VuzSf9kc-5munWa5hX6Ox_y8hsQ%40mail.gmail.com.","subject":"[ClojureScript] core.rrb-vector 0.1.1 -- eliminate a warning in ClojureScript version Andy Fingerhut Fri, 25 Oct 2019 16:35:29 -0700"},
{"body":"Sorry, this should have said *Applications\n<https:\/\/www.clojuriststogether.org\/open-source\/> close on Saturday,\nOctober 26th, 2019 at 11:59pm PST.* \nOn Tue, Oct 22, 2019 at 9:02 PM Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> Hi folks\n>\n> Clojurists Together <https:\/\/www.clojuriststogether.org\/> is about to\n> award another round of funding to support open source Clojure projects. \n> *Applications\n> <https:\/\/www.clojuriststogether.org\/open-source\/> close on Saturday, July\n> 26th, 2019 at 11:59pm PST.*\n>\n> Clojurists Together is an organisation dedicated to funding and\n> supporting open source software, infrastructure, and documentation that is\n> important to the Clojure and ClojureScript community.\n>\n> *We plan to fund four projects at $3,000 USD\/month for 3 months ($9,000\n> USD total).*\n>\n> Previously we have supported projects\n> <https:\/\/www.clojuriststogether.org\/projects\/> like Neanderthal, Aleph,\n> Fireplace, cljdoc, Shadow CLJS, CIDER, Figwheel, clj-http and several more.\n>\n> We surveyed\n> <https:\/\/www.clojuriststogether.org\/news\/q4-2019-survey-results\/> our\n> members recently and asked them what they wanted us to focus on.\n>\n> Highly ranked items were:\n>\n>    - developer experience tools\n>    - IDE support\n>    - build tooling\n>    - documentation\n>    - error messages\n>    - test tooling\n>    - linters\n>\n> Our members also mentioned these projects specifically: ClojureScript,\n> Cloverage, Duct\/Integrant, Neanderthal, Reagent, clj-kondo, cljsjs,\n> expound, leiningen, orchestra, re-frame, shadow-cljs, spec,\n> test.chuck\/test.check.\n>\n> We encourage open source maintainers to apply\n> <https:\/\/www.clojuriststogether.org\/open-source\/> for funding, especially\n> if you work on one of the projects or areas that our members highlighted.\n> If you have any questions please reach out by email or Clojurians Slack.\n>\n> If you work at a company that uses Clojure, talk to your engineering\n> manager about supporting Clojurists Together. We've been able to support\n> projects thanks to the generosity of our developer and company members\n> <https:\/\/www.clojuriststogether.org\/members\/>. The more support we have,\n> the more that we can do to improve things for the entire Clojure community.\n>\n> Thanks, Daniel.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAK2UX_hFDiFxdMvBqvf%3D%3DY9uaP3%2Bu8DcORHeEJ7a%3D0Gancz9%3DQ%40mail.gmail.com.","subject":"[ClojureScript] Re: Clojurists Together funding round for Q4 2019 Daniel Compton Tue, 22 Oct 2019 01:04:25 -0700"},
{"body":"Hi folks\n\nClojurists Together <https:\/\/www.clojuriststogether.org\/> is about to award\nanother round of funding to support open source Clojure projects. *Applications\n<https:\/\/www.clojuriststogether.org\/open-source\/> close on Saturday, July\n26th, 2019 at 11:59pm PST.* \nClojurists Together is an organisation dedicated to funding and supporting\nopen source software, infrastructure, and documentation that is important\nto the Clojure and ClojureScript community.\n\n*We plan to fund four projects at $3,000 USD\/month for 3 months ($9,000 USD\ntotal).*\n\nPreviously we have supported projects\n<https:\/\/www.clojuriststogether.org\/projects\/> like Neanderthal, Aleph,\nFireplace, cljdoc, Shadow CLJS, CIDER, Figwheel, clj-http and several more.\n\nWe surveyed\n<https:\/\/www.clojuriststogether.org\/news\/q4-2019-survey-results\/> our\nmembers recently and asked them what they wanted us to focus on.\n\nHighly ranked items were:\n\n   - developer experience tools\n   - IDE support\n   - build tooling\n   - documentation\n   - error messages\n   - test tooling\n   - linters\n\nOur members also mentioned these projects specifically: ClojureScript,\nCloverage, Duct\/Integrant, Neanderthal, Reagent, clj-kondo, cljsjs,\nexpound, leiningen, orchestra, re-frame, shadow-cljs, spec,\ntest.chuck\/test.check.\n\nWe encourage open source maintainers to apply\n<https:\/\/www.clojuriststogether.org\/open-source\/> for funding, especially\nif you work on one of the projects or areas that our members highlighted.\nIf you have any questions please reach out by email or Clojurians Slack.\n\nIf you work at a company that uses Clojure, talk to your engineering\nmanager about supporting Clojurists Together. We've been able to support\nprojects thanks to the generosity of our developer and company members\n<https:\/\/www.clojuriststogether.org\/members\/>. The more support we have,\nthe more that we can do to improve things for the entire Clojure community.\n\nThanks, Daniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAK2UX_gVo0unRt0qwXa6WfqyKwDuvJBkQDfQ4cgKfiBMiX9WUQ%40mail.gmail.com.","subject":"[ClojureScript] Clojurists Together funding round for Q4 2019 Daniel Compton Tue, 22 Oct 2019 01:03:18 -0700"},
{"body":"Happy to announce Quil 3.1.0 release.\n\nQuil is a Clojure\/ClojureScript library for creating interactive drawings\nand animations. \nThe release available on clojars: https:\/\/clojars.org\/quil.\n\nList of all changes went to this release:\n\n   - New cljs functions. By @anthonygalea <http:\/\/github.com\/anthonygalea>\n      - :bolditalic support in text-style.\n      - lights, shininess, light-falloff now work on cljs as well as clj.\n   - Added print-first-n <http:\/\/quil.info\/api\/debugging#print-first-n> and\n   print-every-n-millisec\n   <http:\/\/quil.info\/api\/debugging#print-every-n-millisec> functions for\n   debugging. By @anthonygalea <http:\/\/github.com\/anthonygalea> in #315\n   <https:\/\/github.com\/quil\/quil\/issues\/315>.\n   - Fix support of :mouse-wheel in cljs. See #321\n   <https:\/\/github.com\/quil\/quil\/issues\/321>.\n   - Updated dependencies on Processing to 3.5.3 and P5.js to 0.9.0.\n\nDocumentation on http:\/\/quil.info has been updated as well.\n\nHappy hacking!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAHO9%2B4JAdVQ2fR1DpWvLSW%3DbjrWidxthqpaYG06ZQ3jQg23uxw%40mail.gmail.com.","subject":"[ClojureScript] [ANN] Quil 3.1.0 Release Mikita Belahlazau Sun, 13 Oct 2019 16:56:50 -0700"},
{"body":"Kelvin,\n\nAndy's reply is the key. You need to switch Gorilla REPL to the patched \nversion. \nYour plugins line should contain: [org.clojars.benfb\/lein-gorilla \"0.6.0\"]\n\nCheers,\nSean\n\nOn Thursday, October 10, 2019 at 2:37:41 PM UTC-4, Kelvin T wrote:\n>\n> My project.clj is as follows:\n>\n> (defproject exercises \"0.1.0-SNAPSHOT\"\n>   :description \"Source code and exercise worksheets for the PPAML summer \n> school on Anglican\"\n>   :url \"https:\/\/bitbucket.org\/probprog\/ppaml-summer-school-2016\/\";\n>   :license {:name \"Eclipse Public License\"\n>             :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n>   :plugins [[lein-gorilla \"0.3.4\"]]\n>   :dependencies [[org.clojure\/clojure \"1.8.0\"]\n>                  [anglican \"1.0.0\"]\n>                  [org.nfrac\/cljbox2d.testbed \"0.5.0\"]\n>                  [org.nfrac\/cljbox2d \"0.5.0\"]\n>                  [org.clojure\/data.priority-map \"0.0.7\"]\n>                  [net.mikera\/core.matrix \"0.52.2\"]\n>                  [net.mikera\/vectorz-clj \"0.44.1\"]\n>                  [net.polyc0l0r\/clj-hdf5 \"0.2.2-SNAPSHOT\"]]\n>   :java-source-paths [\"src\/ox_captcha\"]\n>   :main ^:skip-aot examples.core\n>   :target-path \"target\/%s\"\n>   :jvm-opts [\"-Xmx6g\" \"-Xms4g\"]\n>   :profiles {:uberjar {:aot :all}})\n>\n> I tried changing  org.clojure\/clojure \"1.8.0\" to \"1.10.0\" and \n> [lein-gorilla \"0.3.4\"] to \"0.4.0\" as seen on the gorrila repl website, but \n> I still get the same error.\n>\n> On Monday, October 7, 2019 at 6:42:38 PM UTC-4, Andy Fingerhut wrote:\n>>\n>> I do not know if you are trying the instructions on this web page or not: \n>> http:\/\/gorilla-repl.org\/start.html\n>>\n>> If so, I got the same error.\n>>\n>> It appears that the sample project.clj file there only works with some \n>> older versions of Clojure-related software, which I have not determined.\n>>\n>> With Leiningen version 2.9.1, which is the latest version as of the last \n>> several months or so, and the project.clj file below, I was able to get a \n>> successful run:\n>>\n>> (defproject trygorilla \"0.1.0-SNAPSHOT\"\n>>   :description \"A test project for Gorilla REPL.\"\n>>   :dependencies [[org.clojure\/clojure \"1.10.1\"]]\n>>   :main ^:skip-aot gorilla-test.core\n>>   :plugins [[org.clojars.benfb\/lein-gorilla \"0.6.0\"]]\n>>   :profiles {:uberjar {:aot :all}})\n>>\n>> It appears that a different person is maintaining the Gorilla REPL, and \n>> they release the Gorilla JAR files using a slightly different artifact \n>> name, as shown above in the :plugins line.\n>>\n>> When I run that command, after downloading the needed packages, \n>> eventually I see the output below, and then I can copy and paste the URL \n>> into my browser running on that same machine in order to interact with \n>> Gorilla:\n>>\n>> Regards,\n>> Andy\n>>\n>> $ lein gorilla\n>>\n>> Gorilla-REPL: 0.6.0\n>>\n>> Unable to reach update server.\n>>\n>> Started nREPL server on port 56374\n>>\n>> Running at http:\/\/127.0.0.1:56376\/worksheet.html .\n>>\n>> Ctrl+C to exit.\n>>\n>> Regards,\n>> Andy\n>>\n>> On Mon, Oct 7, 2019 at 12:42 PM Kelvin T <tag...@gmail.com> wrote:\n>>\n>>> This is my first time working with clojure, and I am struggling to run \n>>> gorilla repl. Any help would be greatly appreciated.\n>>> Below is the stack trace:\n>>>\n>>> clojure.lang.Compiler$CompilerException: Syntax error macroexpanding \n>>> clojure.core\/ns at (ring\/util\/mime_type.clj:1:1).\n>>> #:clojure.error{:phase :macro-syntax-check, :line 1, :column 1, :source \n>>> \"ring\/util\/mime_type.clj\", :symbol clojure.core\/ns}\n>>>  at clojure.lang.Compiler.checkSpecs (Compiler.java:6971)\n>>>     clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n>>>     clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7160)\n>>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>>     clojure.lang.RT.load (RT.java:463)\n>>>     clojure.lang.RT.load (RT.java:428)\n>>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>>     clojure.core$load.doInvoke (core.clj:6109)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>>     clojure.core$load_one.invoke (core.clj:5903)\n>>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>>     clojure.core$use.doInvoke (core.clj:6093)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:421)\n>>>     \n>>> ring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke \n>>> (content_type.clj:1)\n>>>     ring.middleware.content_type$eval2277.invokeStatic \n>>> (content_type.clj:1)\n>>>     ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>>     clojure.lang.RT.load (RT.java:463)\n>>>     clojure.lang.RT.load (RT.java:428)\n>>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>>     clojure.core$load.doInvoke (core.clj:6109)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>>     clojure.core$load_one.invoke (core.clj:5903)\n>>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>>     clojure.core$use.doInvoke (core.clj:6093)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:512)\n>>>     compojure.route$eval2269$loading__6706__auto____2270.invoke \n>>> (route.clj:1)\n>>>     compojure.route$eval2269.invokeStatic (route.clj:1)\n>>>     compojure.route$eval2269.invoke (route.clj:1)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>>     clojure.lang.RT.load (RT.java:463)\n>>>     clojure.lang.RT.load (RT.java:428)\n>>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>>     clojure.core$load.doInvoke (core.clj:6109)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>>     clojure.core$load_one.invoke (core.clj:5903)\n>>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>>     clojure.core$require.doInvoke (core.clj:6007)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:1789)\n>>>     gorilla_repl.core$eval668$loading__6706__auto____669.invoke \n>>> (core.clj:5)\n>>>     gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n>>>     gorilla_repl.core$eval668.invoke (core.clj:5)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>>     clojure.lang.RT.load (RT.java:463)\n>>>     clojure.lang.RT.load (RT.java:428)\n>>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>>     clojure.core$load.doInvoke (core.clj:6109)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>>     clojure.core$load_one.invoke (core.clj:5903)\n>>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>>     clojure.core$require.doInvoke (core.clj:6007)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:436)\n>>>     leiningen.gorilla$eval662$loading__6706__auto____663.invoke \n>>> (gorilla.clj:7)\n>>>     leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n>>>     leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>>     clojure.lang.RT.load (RT.java:463)\n>>>     clojure.lang.RT.load (RT.java:428)\n>>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>>     clojure.core$load.doInvoke (core.clj:6109)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>>     clojure.core$load_one.invoke (core.clj:5903)\n>>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>>     clojure.core$require.doInvoke (core.clj:6007)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n>>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n>>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>>     leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n>>>     leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n>>>     leiningen.core.main$pass_through_help_QMARK_.invokeStatic \n>>> (main.clj:79)\n>>>     leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n>>>     leiningen.core.main$task_args.invokeStatic (main.clj:82)\n>>>     leiningen.core.main$task_args.invoke (main.clj:81)\n>>>     leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n>>>     leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n>>>     leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n>>>     leiningen.core.main$_main.invokeStatic (main.clj:442)\n>>>     leiningen.core.main$_main.doInvoke (main.clj:439)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.lang.Var.applyTo (Var.java:705)\n>>>     clojure.core$apply.invokeStatic (core.clj:665)\n>>>     clojure.main$main_opt.invokeStatic (main.clj:491)\n>>>     clojure.main$main_opt.invoke (main.clj:487)\n>>>     clojure.main$main.invokeStatic (main.clj:598)\n>>>     clojure.main$main.doInvoke (main.clj:561)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.lang.Var.applyTo (Var.java:705)\n>>>     clojure.main.main (main.java:37)\n>>> Caused by: clojure.lang.ExceptionInfo: Call to clojure.core\/ns did not \n>>> conform to spec.\n>>> #:clojure.spec.alpha{:problems [{:path [], :reason \"Extra input\", :pred \n>>> (clojure.spec.alpha\/cat :attr-map (clojure.spec.alpha\/? clojure.core\/map?) \n>>> :ns-clauses :clojure.core.specs.alpha\/ns-clauses), :val ((require \n>>> [clojure.string :as str])), :via [:clojure.core.specs.alpha\/ns-form], :in \n>>> [2]}], :spec #object[clojure.spec.alpha$regex_spec_impl$reify__2509 \n>>> 0x64f981e2 \"clojure.spec.alpha$regex_spec_impl$reify__2509@64f981e2\"], \n>>> :value (ring.util.mime-type \"Utility functions for finding out the \n>>> mime-type of a file.\" (require [clojure.string :as str])), :args \n>>> (ring.util.mime-type \"Utility functions for finding out the mime-type of a \n>>> file.\" (require [clojure.string :as str]))}\n>>>  at clojure.spec.alpha$macroexpand_check.invokeStatic (alpha.clj:705)\n>>>     clojure.spec.alpha$macroexpand_check.invoke (alpha.clj:697)\n>>>     clojure.lang.AFn.applyToHelper (AFn.java:156)\n>>>     clojure.lang.AFn.applyTo (AFn.java:144)\n>>>     clojure.lang.Var.applyTo (Var.java:705)\n>>>     clojure.lang.Compiler.checkSpecs (Compiler.java:6969)\n>>>     clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n>>>     clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7160)\n>>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>>     clojure.lang.RT.load (RT.java:463)\n>>>     clojure.lang.RT.load (RT.java:428)\n>>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>>     clojure.core$load.doInvoke (core.clj:6109)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>>     clojure.core$load_one.invoke (core.clj:5903)\n>>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>>     clojure.core$use.doInvoke (core.clj:6093)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:421)\n>>>     \n>>> ring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke \n>>> (content_type.clj:1)\n>>>     ring.middleware.content_type$eval2277.invokeStatic \n>>> (content_type.clj:1)\n>>>     ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>>     clojure.lang.RT.load (RT.java:463)\n>>>     clojure.lang.RT.load (RT.java:428)\n>>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>>     clojure.core$load.doInvoke (core.clj:6109)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>>     clojure.core$load_one.invoke (core.clj:5903)\n>>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>>     clojure.core$use.doInvoke (core.clj:6093)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:512)\n>>>     compojure.route$eval2269$loading__6706__auto____2270.invoke \n>>> (route.clj:1)\n>>>     compojure.route$eval2269.invokeStatic (route.clj:1)\n>>>     compojure.route$eval2269.invoke (route.clj:1)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>>     clojure.lang.RT.load (RT.java:463)\n>>>     clojure.lang.RT.load (RT.java:428)\n>>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>>     clojure.core$load.doInvoke (core.clj:6109)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>>     clojure.core$load_one.invoke (core.clj:5903)\n>>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>>     clojure.core$require.doInvoke (core.clj:6007)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:1789)\n>>>     gorilla_repl.core$eval668$loading__6706__auto____669.invoke \n>>> (core.clj:5)\n>>>     gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n>>>     gorilla_repl.core$eval668.invoke (core.clj:5)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>>     clojure.lang.RT.load (RT.java:463)\n>>>     clojure.lang.RT.load (RT.java:428)\n>>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>>     clojure.core$load.doInvoke (core.clj:6109)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>>     clojure.core$load_one.invoke (core.clj:5903)\n>>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>>     clojure.core$require.doInvoke (core.clj:6007)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:436)\n>>>     leiningen.gorilla$eval662$loading__6706__auto____663.invoke \n>>> (gorilla.clj:7)\n>>>     leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n>>>     leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>>     clojure.lang.RT.load (RT.java:463)\n>>>     clojure.lang.RT.load (RT.java:428)\n>>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>>     clojure.core$load.doInvoke (core.clj:6109)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>>     clojure.core$load_one.invoke (core.clj:5903)\n>>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>>     clojure.core$require.doInvoke (core.clj:6007)\n>>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n>>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n>>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>>     leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n>>>     leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n>>>     leiningen.core.main$pass_through_help_QMARK_.invokeStatic \n>>> (main.clj:79)\n>>>     leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n>>>     leiningen.core.main$task_args.invokeStatic (main.clj:82)\n>>>     leiningen.core.main$task_args.invoke (main.clj:81)\n>>>     leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n>>>     leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n>>>     leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n>>>     leiningen.core.main$_main.invokeStatic (main.clj:442)\n>>>     leiningen.core.main$_main.doInvoke (main.clj:439)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.lang.Var.applyTo (Var.java:705)\n>>>     clojure.core$apply.invokeStatic (core.clj:665)\n>>>     clojure.main$main_opt.invokeStatic (main.clj:491)\n>>>     clojure.main$main_opt.invoke (main.clj:487)\n>>>     clojure.main$main.invokeStatic (main.clj:598)\n>>>     clojure.main$main.doInvoke (main.clj:561)\n>>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>>     clojure.lang.Var.applyTo (Var.java:705)\n>>>     clojure.main.main (main.java:37)\n>>>\n>>> -- \n>>> Note that posts from new members are moderated - please be patient with \n>>> your first post.\n>>> --- \n>>> You received this message because you are subscribed to the Google \n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send \n>>> an email to clojur...@googlegroups.com.\n>>> To view this discussion on the web visit \n>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com\n>>>  \n>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com?utm_medium=email&utm_source=footer>\n>>> .\n>>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/de349cd8-aa23-475e-b47f-4540bf9930d5%40googlegroups.com.","subject":"Re: [ClojureScript] lein gorilla :port 8990 fails because \"Call to clojure.core\/ns did not conform to spec\" Sean Johnson Sat, 12 Oct 2019 06:49:52 -0700"},
{"body":"Thought this would be of interest:\nhttps:\/\/itrevolution.com\/love-letter-to-clojure-part-1\/ \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAN67zA1%3D-VhpqUg_8fb1J0owRgk1qkvyNcxu1b74HvDT%3DK5SwQ%40mail.gmail.com.","subject":"[ClojureScript] Love Letter to Clojure (by Gene Kim) Alan Thompson Fri, 11 Oct 2019 11:33:06 -0700"},
{"body":"My project.clj is as follows:\n\n(defproject exercises \"0.1.0-SNAPSHOT\"\n  :description \"Source code and exercise worksheets for the PPAML summer \nschool on Anglican\"\n  :url \"https:\/\/bitbucket.org\/probprog\/ppaml-summer-school-2016\/\";\n  :license {:name \"Eclipse Public License\"\n            :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n  :plugins [[lein-gorilla \"0.3.4\"]]\n  :dependencies [[org.clojure\/clojure \"1.8.0\"]\n                 [anglican \"1.0.0\"]\n                 [org.nfrac\/cljbox2d.testbed \"0.5.0\"]\n                 [org.nfrac\/cljbox2d \"0.5.0\"]\n                 [org.clojure\/data.priority-map \"0.0.7\"]\n                 [net.mikera\/core.matrix \"0.52.2\"]\n                 [net.mikera\/vectorz-clj \"0.44.1\"]\n                 [net.polyc0l0r\/clj-hdf5 \"0.2.2-SNAPSHOT\"]]\n  :java-source-paths [\"src\/ox_captcha\"]\n  :main ^:skip-aot examples.core\n  :target-path \"target\/%s\"\n  :jvm-opts [\"-Xmx6g\" \"-Xms4g\"]\n  :profiles {:uberjar {:aot :all}}) \nI tried changing  org.clojure\/clojure \"1.8.0\" to \"1.10.0\" and [lein-gorilla \n\"0.3.4\"] to \"0.4.0\" as seen on the gorrila repl website, but I still get \nthe same error.\n\nOn Monday, October 7, 2019 at 6:42:38 PM UTC-4, Andy Fingerhut wrote:\n>\n> I do not know if you are trying the instructions on this web page or not: \n> http:\/\/gorilla-repl.org\/start.html\n>\n> If so, I got the same error.\n>\n> It appears that the sample project.clj file there only works with some \n> older versions of Clojure-related software, which I have not determined.\n>\n> With Leiningen version 2.9.1, which is the latest version as of the last \n> several months or so, and the project.clj file below, I was able to get a \n> successful run:\n>\n> (defproject trygorilla \"0.1.0-SNAPSHOT\"\n>   :description \"A test project for Gorilla REPL.\"\n>   :dependencies [[org.clojure\/clojure \"1.10.1\"]]\n>   :main ^:skip-aot gorilla-test.core\n>   :plugins [[org.clojars.benfb\/lein-gorilla \"0.6.0\"]]\n>   :profiles {:uberjar {:aot :all}})\n>\n> It appears that a different person is maintaining the Gorilla REPL, and \n> they release the Gorilla JAR files using a slightly different artifact \n> name, as shown above in the :plugins line.\n>\n> When I run that command, after downloading the needed packages, eventually \n> I see the output below, and then I can copy and paste the URL into my \n> browser running on that same machine in order to interact with Gorilla:\n>\n> Regards,\n> Andy\n>\n> $ lein gorilla\n>\n> Gorilla-REPL: 0.6.0\n>\n> Unable to reach update server.\n>\n> Started nREPL server on port 56374\n>\n> Running at http:\/\/127.0.0.1:56376\/worksheet.html .\n>\n> Ctrl+C to exit.\n>\n> Regards,\n> Andy\n>\n> On Mon, Oct 7, 2019 at 12:42 PM Kelvin T <tag...@gmail.com <javascript:>> \n> wrote:\n>\n>> This is my first time working with clojure, and I am struggling to run \n>> gorilla repl. Any help would be greatly appreciated.\n>> Below is the stack trace:\n>>\n>> clojure.lang.Compiler$CompilerException: Syntax error macroexpanding \n>> clojure.core\/ns at (ring\/util\/mime_type.clj:1:1).\n>> #:clojure.error{:phase :macro-syntax-check, :line 1, :column 1, :source \n>> \"ring\/util\/mime_type.clj\", :symbol clojure.core\/ns}\n>>  at clojure.lang.Compiler.checkSpecs (Compiler.java:6971)\n>>     clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n>>     clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n>>     clojure.lang.Compiler.eval (Compiler.java:7160)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>     clojure.core$use.doInvoke (core.clj:6093)\n>>     clojure.lang.RestFn.invoke (RestFn.java:421)\n>>     \n>> ring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke \n>> (content_type.clj:1)\n>>     ring.middleware.content_type$eval2277.invokeStatic \n>> (content_type.clj:1)\n>>     ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>     clojure.core$use.doInvoke (core.clj:6093)\n>>     clojure.lang.RestFn.invoke (RestFn.java:512)\n>>     compojure.route$eval2269$loading__6706__auto____2270.invoke \n>> (route.clj:1)\n>>     compojure.route$eval2269.invokeStatic (route.clj:1)\n>>     compojure.route$eval2269.invoke (route.clj:1)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:1789)\n>>     gorilla_repl.core$eval668$loading__6706__auto____669.invoke \n>> (core.clj:5)\n>>     gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n>>     gorilla_repl.core$eval668.invoke (core.clj:5)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:436)\n>>     leiningen.gorilla$eval662$loading__6706__auto____663.invoke \n>> (gorilla.clj:7)\n>>     leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n>>     leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>     leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n>>     leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n>>     leiningen.core.main$pass_through_help_QMARK_.invokeStatic \n>> (main.clj:79)\n>>     leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n>>     leiningen.core.main$task_args.invokeStatic (main.clj:82)\n>>     leiningen.core.main$task_args.invoke (main.clj:81)\n>>     leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n>>     leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n>>     leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n>>     leiningen.core.main$_main.invokeStatic (main.clj:442)\n>>     leiningen.core.main$_main.doInvoke (main.clj:439)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.lang.Var.applyTo (Var.java:705)\n>>     clojure.core$apply.invokeStatic (core.clj:665)\n>>     clojure.main$main_opt.invokeStatic (main.clj:491)\n>>     clojure.main$main_opt.invoke (main.clj:487)\n>>     clojure.main$main.invokeStatic (main.clj:598)\n>>     clojure.main$main.doInvoke (main.clj:561)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.lang.Var.applyTo (Var.java:705)\n>>     clojure.main.main (main.java:37)\n>> Caused by: clojure.lang.ExceptionInfo: Call to clojure.core\/ns did not \n>> conform to spec.\n>> #:clojure.spec.alpha{:problems [{:path [], :reason \"Extra input\", :pred \n>> (clojure.spec.alpha\/cat :attr-map (clojure.spec.alpha\/? clojure.core\/map?) \n>> :ns-clauses :clojure.core.specs.alpha\/ns-clauses), :val ((require \n>> [clojure.string :as str])), :via [:clojure.core.specs.alpha\/ns-form], :in \n>> [2]}], :spec #object[clojure.spec.alpha$regex_spec_impl$reify__2509 \n>> 0x64f981e2 \"clojure.spec.alpha$regex_spec_impl$reify__2509@64f981e2\"], \n>> :value (ring.util.mime-type \"Utility functions for finding out the \n>> mime-type of a file.\" (require [clojure.string :as str])), :args \n>> (ring.util.mime-type \"Utility functions for finding out the mime-type of a \n>> file.\" (require [clojure.string :as str]))}\n>>  at clojure.spec.alpha$macroexpand_check.invokeStatic (alpha.clj:705)\n>>     clojure.spec.alpha$macroexpand_check.invoke (alpha.clj:697)\n>>     clojure.lang.AFn.applyToHelper (AFn.java:156)\n>>     clojure.lang.AFn.applyTo (AFn.java:144)\n>>     clojure.lang.Var.applyTo (Var.java:705)\n>>     clojure.lang.Compiler.checkSpecs (Compiler.java:6969)\n>>     clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n>>     clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n>>     clojure.lang.Compiler.eval (Compiler.java:7160)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>     clojure.core$use.doInvoke (core.clj:6093)\n>>     clojure.lang.RestFn.invoke (RestFn.java:421)\n>>     \n>> ring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke \n>> (content_type.clj:1)\n>>     ring.middleware.content_type$eval2277.invokeStatic \n>> (content_type.clj:1)\n>>     ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>     clojure.core$use.doInvoke (core.clj:6093)\n>>     clojure.lang.RestFn.invoke (RestFn.java:512)\n>>     compojure.route$eval2269$loading__6706__auto____2270.invoke \n>> (route.clj:1)\n>>     compojure.route$eval2269.invokeStatic (route.clj:1)\n>>     compojure.route$eval2269.invoke (route.clj:1)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:1789)\n>>     gorilla_repl.core$eval668$loading__6706__auto____669.invoke \n>> (core.clj:5)\n>>     gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n>>     gorilla_repl.core$eval668.invoke (core.clj:5)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:436)\n>>     leiningen.gorilla$eval662$loading__6706__auto____663.invoke \n>> (gorilla.clj:7)\n>>     leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n>>     leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>     leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n>>     leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n>>     leiningen.core.main$pass_through_help_QMARK_.invokeStatic \n>> (main.clj:79)\n>>     leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n>>     leiningen.core.main$task_args.invokeStatic (main.clj:82)\n>>     leiningen.core.main$task_args.invoke (main.clj:81)\n>>     leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n>>     leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n>>     leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n>>     leiningen.core.main$_main.invokeStatic (main.clj:442)\n>>     leiningen.core.main$_main.doInvoke (main.clj:439)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.lang.Var.applyTo (Var.java:705)\n>>     clojure.core$apply.invokeStatic (core.clj:665)\n>>     clojure.main$main_opt.invokeStatic (main.clj:491)\n>>     clojure.main$main_opt.invoke (main.clj:487)\n>>     clojure.main$main.invokeStatic (main.clj:598)\n>>     clojure.main$main.doInvoke (main.clj:561)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.lang.Var.applyTo (Var.java:705)\n>>     clojure.main.main (main.java:37)\n>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojur...@googlegroups.com <javascript:>.\n>> To view this discussion on the web visit \n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com\n>>  \n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/753f4110-56b2-440f-af07-ecfa2ec98d4e%40googlegroups.com.","subject":"Re: [ClojureScript] lein gorilla :port 8990 fails because \"Call to clojure.core\/ns did not conform to spec\" Kelvin T Thu, 10 Oct 2019 11:37:59 -0700"},
{"body":"Well, it's not OP's file, the bad file is ring\/util\/mime_type.clj, which \nlooks like it was fixed in 2014 \n(https:\/\/github.com\/ring-clojure\/ring\/commit\/a05e026d85611cb179a1352d569d7c68713f792c#diff-ed2c15fc701c576b461d6967f0f81e91),\n \nso must need to pull in a newer version somewhere. \n\n\nOn Monday, October 7, 2019 at 5:43:16 PM UTC-5, Mark Nutter wrote:\n>\n> The important bit is the part that says \":val ((require [clojure.string \n> :as str]))\". I believe that is telling you that you have \"(require \n> [clojure.string :as str])\" inside your namespace declaration, but you need \n> \":require\" (leading colon) instead of \"require\" when you're putting it \n> inside the \"(ns ...)\" declaration.\n>\n> On Mon, Oct 7, 2019 at 3:42 PM Kelvin T <tag...@gmail.com <javascript:>> \n> wrote:\n>\n>> This is my first time working with clojure, and I am struggling to run \n>> gorilla repl. Any help would be greatly appreciated.\n>> Below is the stack trace:\n>>\n>> clojure.lang.Compiler$CompilerException: Syntax error macroexpanding \n>> clojure.core\/ns at (ring\/util\/mime_type.clj:1:1).\n>> #:clojure.error{:phase :macro-syntax-check, :line 1, :column 1, :source \n>> \"ring\/util\/mime_type.clj\", :symbol clojure.core\/ns}\n>>  at clojure.lang.Compiler.checkSpecs (Compiler.java:6971)\n>>     clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n>>     clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n>>     clojure.lang.Compiler.eval (Compiler.java:7160)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>     clojure.core$use.doInvoke (core.clj:6093)\n>>     clojure.lang.RestFn.invoke (RestFn.java:421)\n>>     \n>> ring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke \n>> (content_type.clj:1)\n>>     ring.middleware.content_type$eval2277.invokeStatic \n>> (content_type.clj:1)\n>>     ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>     clojure.core$use.doInvoke (core.clj:6093)\n>>     clojure.lang.RestFn.invoke (RestFn.java:512)\n>>     compojure.route$eval2269$loading__6706__auto____2270.invoke \n>> (route.clj:1)\n>>     compojure.route$eval2269.invokeStatic (route.clj:1)\n>>     compojure.route$eval2269.invoke (route.clj:1)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:1789)\n>>     gorilla_repl.core$eval668$loading__6706__auto____669.invoke \n>> (core.clj:5)\n>>     gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n>>     gorilla_repl.core$eval668.invoke (core.clj:5)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:436)\n>>     leiningen.gorilla$eval662$loading__6706__auto____663.invoke \n>> (gorilla.clj:7)\n>>     leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n>>     leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>     leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n>>     leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n>>     leiningen.core.main$pass_through_help_QMARK_.invokeStatic \n>> (main.clj:79)\n>>     leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n>>     leiningen.core.main$task_args.invokeStatic (main.clj:82)\n>>     leiningen.core.main$task_args.invoke (main.clj:81)\n>>     leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n>>     leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n>>     leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n>>     leiningen.core.main$_main.invokeStatic (main.clj:442)\n>>     leiningen.core.main$_main.doInvoke (main.clj:439)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.lang.Var.applyTo (Var.java:705)\n>>     clojure.core$apply.invokeStatic (core.clj:665)\n>>     clojure.main$main_opt.invokeStatic (main.clj:491)\n>>     clojure.main$main_opt.invoke (main.clj:487)\n>>     clojure.main$main.invokeStatic (main.clj:598)\n>>     clojure.main$main.doInvoke (main.clj:561)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.lang.Var.applyTo (Var.java:705)\n>>     clojure.main.main (main.java:37)\n>> Caused by: clojure.lang.ExceptionInfo: Call to clojure.core\/ns did not \n>> conform to spec.\n>> #:clojure.spec.alpha{:problems [{:path [], :reason \"Extra input\", :pred \n>> (clojure.spec.alpha\/cat :attr-map (clojure.spec.alpha\/? clojure.core\/map?) \n>> :ns-clauses :clojure.core.specs.alpha\/ns-clauses), :val ((require \n>> [clojure.string :as str])), :via [:clojure.core.specs.alpha\/ns-form], :in \n>> [2]}], :spec #object[clojure.spec.alpha$regex_spec_impl$reify__2509 \n>> 0x64f981e2 \"clojure.spec.alpha$regex_spec_impl$reify__2509@64f981e2\"], \n>> :value (ring.util.mime-type \"Utility functions for finding out the \n>> mime-type of a file.\" (require [clojure.string :as str])), :args \n>> (ring.util.mime-type \"Utility functions for finding out the mime-type of a \n>> file.\" (require [clojure.string :as str]))}\n>>  at clojure.spec.alpha$macroexpand_check.invokeStatic (alpha.clj:705)\n>>     clojure.spec.alpha$macroexpand_check.invoke (alpha.clj:697)\n>>     clojure.lang.AFn.applyToHelper (AFn.java:156)\n>>     clojure.lang.AFn.applyTo (AFn.java:144)\n>>     clojure.lang.Var.applyTo (Var.java:705)\n>>     clojure.lang.Compiler.checkSpecs (Compiler.java:6969)\n>>     clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n>>     clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n>>     clojure.lang.Compiler.eval (Compiler.java:7160)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>     clojure.core$use.doInvoke (core.clj:6093)\n>>     clojure.lang.RestFn.invoke (RestFn.java:421)\n>>     \n>> ring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke \n>> (content_type.clj:1)\n>>     ring.middleware.content_type$eval2277.invokeStatic \n>> (content_type.clj:1)\n>>     ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:669)\n>>     clojure.core$use.invokeStatic (core.clj:6093)\n>>     clojure.core$use.doInvoke (core.clj:6093)\n>>     clojure.lang.RestFn.invoke (RestFn.java:512)\n>>     compojure.route$eval2269$loading__6706__auto____2270.invoke \n>> (route.clj:1)\n>>     compojure.route$eval2269.invokeStatic (route.clj:1)\n>>     compojure.route$eval2269.invoke (route.clj:1)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:1789)\n>>     gorilla_repl.core$eval668$loading__6706__auto____669.invoke \n>> (core.clj:5)\n>>     gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n>>     gorilla_repl.core$eval668.invoke (core.clj:5)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:436)\n>>     leiningen.gorilla$eval662$loading__6706__auto____663.invoke \n>> (gorilla.clj:7)\n>>     leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n>>     leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n>>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>>     clojure.lang.Compiler.load (Compiler.java:7635)\n>>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>>     clojure.lang.RT.load (RT.java:463)\n>>     clojure.lang.RT.load (RT.java:428)\n>>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>>     clojure.core$load.invokeStatic (core.clj:6125)\n>>     clojure.core$load.doInvoke (core.clj:6109)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>>     clojure.core$load_one.invoke (core.clj:5903)\n>>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.core$apply.invokeStatic (core.clj:667)\n>>     clojure.core$require.invokeStatic (core.clj:6007)\n>>     clojure.core$require.doInvoke (core.clj:6007)\n>>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n>>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>>     leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n>>     leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n>>     leiningen.core.main$pass_through_help_QMARK_.invokeStatic \n>> (main.clj:79)\n>>     leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n>>     leiningen.core.main$task_args.invokeStatic (main.clj:82)\n>>     leiningen.core.main$task_args.invoke (main.clj:81)\n>>     leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n>>     leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n>>     leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n>>     leiningen.core.main$_main.invokeStatic (main.clj:442)\n>>     leiningen.core.main$_main.doInvoke (main.clj:439)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.lang.Var.applyTo (Var.java:705)\n>>     clojure.core$apply.invokeStatic (core.clj:665)\n>>     clojure.main$main_opt.invokeStatic (main.clj:491)\n>>     clojure.main$main_opt.invoke (main.clj:487)\n>>     clojure.main$main.invokeStatic (main.clj:598)\n>>     clojure.main$main.doInvoke (main.clj:561)\n>>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>>     clojure.lang.Var.applyTo (Var.java:705)\n>>     clojure.main.main (main.java:37)\n>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojur...@googlegroups.com <javascript:>.\n>> To view this discussion on the web visit \n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com\n>>  \n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/1048ffc3-6482-4135-b3bb-817128afea81%40googlegroups.com.","subject":"Re: [ClojureScript] lein gorilla :port 8990 fails because \"Call to clojure.core\/ns did not conform to spec\" Alex Miller Wed, 09 Oct 2019 06:54:57 -0700"},
{"body":"The important bit is the part that says \":val ((require [clojure.string :as\nstr]))\". I believe that is telling you that you have \"(require\n[clojure.string :as str])\" inside your namespace declaration, but you need\n\":require\" (leading colon) instead of \"require\" when you're putting it\ninside the \"(ns ...)\" declaration. \nOn Mon, Oct 7, 2019 at 3:42 PM Kelvin T <tago...@gmail.com> wrote:\n\n> This is my first time working with clojure, and I am struggling to run\n> gorilla repl. Any help would be greatly appreciated.\n> Below is the stack trace:\n>\n> clojure.lang.Compiler$CompilerException: Syntax error macroexpanding\n> clojure.core\/ns at (ring\/util\/mime_type.clj:1:1).\n> #:clojure.error{:phase :macro-syntax-check, :line 1, :column 1, :source\n> \"ring\/util\/mime_type.clj\", :symbol clojure.core\/ns}\n>  at clojure.lang.Compiler.checkSpecs (Compiler.java:6971)\n>     clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n>     clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n>     clojure.lang.Compiler.eval (Compiler.java:7160)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:669)\n>     clojure.core$use.invokeStatic (core.clj:6093)\n>     clojure.core$use.doInvoke (core.clj:6093)\n>     clojure.lang.RestFn.invoke (RestFn.java:421)\n>\n> ring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke\n> (content_type.clj:1)\n>     ring.middleware.content_type$eval2277.invokeStatic (content_type.clj:1)\n>     ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:669)\n>     clojure.core$use.invokeStatic (core.clj:6093)\n>     clojure.core$use.doInvoke (core.clj:6093)\n>     clojure.lang.RestFn.invoke (RestFn.java:512)\n>     compojure.route$eval2269$loading__6706__auto____2270.invoke\n> (route.clj:1)\n>     compojure.route$eval2269.invokeStatic (route.clj:1)\n>     compojure.route$eval2269.invoke (route.clj:1)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:1789)\n>     gorilla_repl.core$eval668$loading__6706__auto____669.invoke\n> (core.clj:5)\n>     gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n>     gorilla_repl.core$eval668.invoke (core.clj:5)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:436)\n>     leiningen.gorilla$eval662$loading__6706__auto____663.invoke\n> (gorilla.clj:7)\n>     leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n>     leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>     leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n>     leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n>     leiningen.core.main$pass_through_help_QMARK_.invokeStatic (main.clj:79)\n>     leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n>     leiningen.core.main$task_args.invokeStatic (main.clj:82)\n>     leiningen.core.main$task_args.invoke (main.clj:81)\n>     leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n>     leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n>     leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n>     leiningen.core.main$_main.invokeStatic (main.clj:442)\n>     leiningen.core.main$_main.doInvoke (main.clj:439)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.lang.Var.applyTo (Var.java:705)\n>     clojure.core$apply.invokeStatic (core.clj:665)\n>     clojure.main$main_opt.invokeStatic (main.clj:491)\n>     clojure.main$main_opt.invoke (main.clj:487)\n>     clojure.main$main.invokeStatic (main.clj:598)\n>     clojure.main$main.doInvoke (main.clj:561)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.lang.Var.applyTo (Var.java:705)\n>     clojure.main.main (main.java:37)\n> Caused by: clojure.lang.ExceptionInfo: Call to clojure.core\/ns did not\n> conform to spec.\n> #:clojure.spec.alpha{:problems [{:path [], :reason \"Extra input\", :pred\n> (clojure.spec.alpha\/cat :attr-map (clojure.spec.alpha\/? clojure.core\/map?)\n> :ns-clauses :clojure.core.specs.alpha\/ns-clauses), :val ((require\n> [clojure.string :as str])), :via [:clojure.core.specs.alpha\/ns-form], :in\n> [2]}], :spec #object[clojure.spec.alpha$regex_spec_impl$reify__2509\n> 0x64f981e2 \"clojure.spec.alpha$regex_spec_impl$reify__2509@64f981e2\"],\n> :value (ring.util.mime-type \"Utility functions for finding out the\n> mime-type of a file.\" (require [clojure.string :as str])), :args\n> (ring.util.mime-type \"Utility functions for finding out the mime-type of a\n> file.\" (require [clojure.string :as str]))}\n>  at clojure.spec.alpha$macroexpand_check.invokeStatic (alpha.clj:705)\n>     clojure.spec.alpha$macroexpand_check.invoke (alpha.clj:697)\n>     clojure.lang.AFn.applyToHelper (AFn.java:156)\n>     clojure.lang.AFn.applyTo (AFn.java:144)\n>     clojure.lang.Var.applyTo (Var.java:705)\n>     clojure.lang.Compiler.checkSpecs (Compiler.java:6969)\n>     clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n>     clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n>     clojure.lang.Compiler.eval (Compiler.java:7160)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:669)\n>     clojure.core$use.invokeStatic (core.clj:6093)\n>     clojure.core$use.doInvoke (core.clj:6093)\n>     clojure.lang.RestFn.invoke (RestFn.java:421)\n>\n> ring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke\n> (content_type.clj:1)\n>     ring.middleware.content_type$eval2277.invokeStatic (content_type.clj:1)\n>     ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:669)\n>     clojure.core$use.invokeStatic (core.clj:6093)\n>     clojure.core$use.doInvoke (core.clj:6093)\n>     clojure.lang.RestFn.invoke (RestFn.java:512)\n>     compojure.route$eval2269$loading__6706__auto____2270.invoke\n> (route.clj:1)\n>     compojure.route$eval2269.invokeStatic (route.clj:1)\n>     compojure.route$eval2269.invoke (route.clj:1)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:1789)\n>     gorilla_repl.core$eval668$loading__6706__auto____669.invoke\n> (core.clj:5)\n>     gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n>     gorilla_repl.core$eval668.invoke (core.clj:5)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:436)\n>     leiningen.gorilla$eval662$loading__6706__auto____663.invoke\n> (gorilla.clj:7)\n>     leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n>     leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>     leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n>     leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n>     leiningen.core.main$pass_through_help_QMARK_.invokeStatic (main.clj:79)\n>     leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n>     leiningen.core.main$task_args.invokeStatic (main.clj:82)\n>     leiningen.core.main$task_args.invoke (main.clj:81)\n>     leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n>     leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n>     leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n>     leiningen.core.main$_main.invokeStatic (main.clj:442)\n>     leiningen.core.main$_main.doInvoke (main.clj:439)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.lang.Var.applyTo (Var.java:705)\n>     clojure.core$apply.invokeStatic (core.clj:665)\n>     clojure.main$main_opt.invokeStatic (main.clj:491)\n>     clojure.main$main_opt.invoke (main.clj:487)\n>     clojure.main$main.invokeStatic (main.clj:598)\n>     clojure.main$main.doInvoke (main.clj:561)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.lang.Var.applyTo (Var.java:705)\n>     clojure.main.main (main.java:37)\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CACMqiXA5FiSjpEPn39PT6iyo4AyUWjAOqWXAYOGJmuS%3DVYKStw%40mail.gmail.com.","subject":"Re: [ClojureScript] lein gorilla :port 8990 fails because \"Call to clojure.core\/ns did not conform to spec\" Mark Nutter Mon, 07 Oct 2019 15:44:12 -0700"},
{"body":"I do not know if you are trying the instructions on this web page or not:\nhttp:\/\/gorilla-repl.org\/start.html \nIf so, I got the same error.\n\nIt appears that the sample project.clj file there only works with some\nolder versions of Clojure-related software, which I have not determined.\n\nWith Leiningen version 2.9.1, which is the latest version as of the last\nseveral months or so, and the project.clj file below, I was able to get a\nsuccessful run:\n\n(defproject trygorilla \"0.1.0-SNAPSHOT\"\n  :description \"A test project for Gorilla REPL.\"\n  :dependencies [[org.clojure\/clojure \"1.10.1\"]]\n  :main ^:skip-aot gorilla-test.core\n  :plugins [[org.clojars.benfb\/lein-gorilla \"0.6.0\"]]\n  :profiles {:uberjar {:aot :all}})\n\nIt appears that a different person is maintaining the Gorilla REPL, and\nthey release the Gorilla JAR files using a slightly different artifact\nname, as shown above in the :plugins line.\n\nWhen I run that command, after downloading the needed packages, eventually\nI see the output below, and then I can copy and paste the URL into my\nbrowser running on that same machine in order to interact with Gorilla:\n\nRegards,\nAndy\n\n$ lein gorilla\n\nGorilla-REPL: 0.6.0\n\nUnable to reach update server.\n\nStarted nREPL server on port 56374\n\nRunning at http:\/\/127.0.0.1:56376\/worksheet.html .\n\nCtrl+C to exit.\n\nRegards,\nAndy\n\nOn Mon, Oct 7, 2019 at 12:42 PM Kelvin T <tago...@gmail.com> wrote:\n\n> This is my first time working with clojure, and I am struggling to run\n> gorilla repl. Any help would be greatly appreciated.\n> Below is the stack trace:\n>\n> clojure.lang.Compiler$CompilerException: Syntax error macroexpanding\n> clojure.core\/ns at (ring\/util\/mime_type.clj:1:1).\n> #:clojure.error{:phase :macro-syntax-check, :line 1, :column 1, :source\n> \"ring\/util\/mime_type.clj\", :symbol clojure.core\/ns}\n>  at clojure.lang.Compiler.checkSpecs (Compiler.java:6971)\n>     clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n>     clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n>     clojure.lang.Compiler.eval (Compiler.java:7160)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:669)\n>     clojure.core$use.invokeStatic (core.clj:6093)\n>     clojure.core$use.doInvoke (core.clj:6093)\n>     clojure.lang.RestFn.invoke (RestFn.java:421)\n>\n> ring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke\n> (content_type.clj:1)\n>     ring.middleware.content_type$eval2277.invokeStatic (content_type.clj:1)\n>     ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:669)\n>     clojure.core$use.invokeStatic (core.clj:6093)\n>     clojure.core$use.doInvoke (core.clj:6093)\n>     clojure.lang.RestFn.invoke (RestFn.java:512)\n>     compojure.route$eval2269$loading__6706__auto____2270.invoke\n> (route.clj:1)\n>     compojure.route$eval2269.invokeStatic (route.clj:1)\n>     compojure.route$eval2269.invoke (route.clj:1)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:1789)\n>     gorilla_repl.core$eval668$loading__6706__auto____669.invoke\n> (core.clj:5)\n>     gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n>     gorilla_repl.core$eval668.invoke (core.clj:5)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:436)\n>     leiningen.gorilla$eval662$loading__6706__auto____663.invoke\n> (gorilla.clj:7)\n>     leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n>     leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>     leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n>     leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n>     leiningen.core.main$pass_through_help_QMARK_.invokeStatic (main.clj:79)\n>     leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n>     leiningen.core.main$task_args.invokeStatic (main.clj:82)\n>     leiningen.core.main$task_args.invoke (main.clj:81)\n>     leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n>     leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n>     leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n>     leiningen.core.main$_main.invokeStatic (main.clj:442)\n>     leiningen.core.main$_main.doInvoke (main.clj:439)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.lang.Var.applyTo (Var.java:705)\n>     clojure.core$apply.invokeStatic (core.clj:665)\n>     clojure.main$main_opt.invokeStatic (main.clj:491)\n>     clojure.main$main_opt.invoke (main.clj:487)\n>     clojure.main$main.invokeStatic (main.clj:598)\n>     clojure.main$main.doInvoke (main.clj:561)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.lang.Var.applyTo (Var.java:705)\n>     clojure.main.main (main.java:37)\n> Caused by: clojure.lang.ExceptionInfo: Call to clojure.core\/ns did not\n> conform to spec.\n> #:clojure.spec.alpha{:problems [{:path [], :reason \"Extra input\", :pred\n> (clojure.spec.alpha\/cat :attr-map (clojure.spec.alpha\/? clojure.core\/map?)\n> :ns-clauses :clojure.core.specs.alpha\/ns-clauses), :val ((require\n> [clojure.string :as str])), :via [:clojure.core.specs.alpha\/ns-form], :in\n> [2]}], :spec #object[clojure.spec.alpha$regex_spec_impl$reify__2509\n> 0x64f981e2 \"clojure.spec.alpha$regex_spec_impl$reify__2509@64f981e2\"],\n> :value (ring.util.mime-type \"Utility functions for finding out the\n> mime-type of a file.\" (require [clojure.string :as str])), :args\n> (ring.util.mime-type \"Utility functions for finding out the mime-type of a\n> file.\" (require [clojure.string :as str]))}\n>  at clojure.spec.alpha$macroexpand_check.invokeStatic (alpha.clj:705)\n>     clojure.spec.alpha$macroexpand_check.invoke (alpha.clj:697)\n>     clojure.lang.AFn.applyToHelper (AFn.java:156)\n>     clojure.lang.AFn.applyTo (AFn.java:144)\n>     clojure.lang.Var.applyTo (Var.java:705)\n>     clojure.lang.Compiler.checkSpecs (Compiler.java:6969)\n>     clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n>     clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n>     clojure.lang.Compiler.eval (Compiler.java:7160)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:669)\n>     clojure.core$use.invokeStatic (core.clj:6093)\n>     clojure.core$use.doInvoke (core.clj:6093)\n>     clojure.lang.RestFn.invoke (RestFn.java:421)\n>\n> ring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke\n> (content_type.clj:1)\n>     ring.middleware.content_type$eval2277.invokeStatic (content_type.clj:1)\n>     ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:669)\n>     clojure.core$use.invokeStatic (core.clj:6093)\n>     clojure.core$use.doInvoke (core.clj:6093)\n>     clojure.lang.RestFn.invoke (RestFn.java:512)\n>     compojure.route$eval2269$loading__6706__auto____2270.invoke\n> (route.clj:1)\n>     compojure.route$eval2269.invokeStatic (route.clj:1)\n>     compojure.route$eval2269.invoke (route.clj:1)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:1789)\n>     gorilla_repl.core$eval668$loading__6706__auto____669.invoke\n> (core.clj:5)\n>     gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n>     gorilla_repl.core$eval668.invoke (core.clj:5)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:436)\n>     leiningen.gorilla$eval662$loading__6706__auto____663.invoke\n> (gorilla.clj:7)\n>     leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n>     leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n>     clojure.lang.Compiler.eval (Compiler.java:7176)\n>     clojure.lang.Compiler.eval (Compiler.java:7165)\n>     clojure.lang.Compiler.load (Compiler.java:7635)\n>     clojure.lang.RT.loadResourceScript (RT.java:381)\n>     clojure.lang.RT.loadResourceScript (RT.java:372)\n>     clojure.lang.RT.load (RT.java:463)\n>     clojure.lang.RT.load (RT.java:428)\n>     clojure.core$load$fn__6824.invoke (core.clj:6126)\n>     clojure.core$load.invokeStatic (core.clj:6125)\n>     clojure.core$load.doInvoke (core.clj:6109)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.core$load_one.invokeStatic (core.clj:5908)\n>     clojure.core$load_one.invoke (core.clj:5903)\n>     clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n>     clojure.core$load_lib.invokeStatic (core.clj:5947)\n>     clojure.core$load_lib.doInvoke (core.clj:5928)\n>     clojure.lang.RestFn.applyTo (RestFn.java:142)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$load_libs.invokeStatic (core.clj:5985)\n>     clojure.core$load_libs.doInvoke (core.clj:5969)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.core$apply.invokeStatic (core.clj:667)\n>     clojure.core$require.invokeStatic (core.clj:6007)\n>     clojure.core$require.doInvoke (core.clj:6007)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>     leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n>     leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n>     leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n>     leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n>     leiningen.core.main$pass_through_help_QMARK_.invokeStatic (main.clj:79)\n>     leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n>     leiningen.core.main$task_args.invokeStatic (main.clj:82)\n>     leiningen.core.main$task_args.invoke (main.clj:81)\n>     leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n>     leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n>     leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n>     leiningen.core.main$_main.invokeStatic (main.clj:442)\n>     leiningen.core.main$_main.doInvoke (main.clj:439)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.lang.Var.applyTo (Var.java:705)\n>     clojure.core$apply.invokeStatic (core.clj:665)\n>     clojure.main$main_opt.invokeStatic (main.clj:491)\n>     clojure.main$main_opt.invoke (main.clj:487)\n>     clojure.main$main.invokeStatic (main.clj:598)\n>     clojure.main$main.doInvoke (main.clj:561)\n>     clojure.lang.RestFn.applyTo (RestFn.java:137)\n>     clojure.lang.Var.applyTo (Var.java:705)\n>     clojure.main.main (main.java:37)\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAKvLtDZKfKzdsopFxwZS2N9vuvGU8OA1A6A9h-oBsLw_joJJhw%40mail.gmail.com.","subject":"Re: [ClojureScript] lein gorilla :port 8990 fails because \"Call to clojure.core\/ns did not conform to spec\" Andy Fingerhut Mon, 07 Oct 2019 15:43:06 -0700"},
{"body":"This is my first time working with clojure, and I am struggling to run \ngorilla repl. Any help would be greatly appreciated.\nBelow is the stack trace: \nclojure.lang.Compiler$CompilerException: Syntax error macroexpanding \nclojure.core\/ns at (ring\/util\/mime_type.clj:1:1).\n#:clojure.error{:phase :macro-syntax-check, :line 1, :column 1, :source \n\"ring\/util\/mime_type.clj\", :symbol clojure.core\/ns}\n at clojure.lang.Compiler.checkSpecs (Compiler.java:6971)\n    clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n    clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n    clojure.lang.Compiler.eval (Compiler.java:7160)\n    clojure.lang.Compiler.load (Compiler.java:7635)\n    clojure.lang.RT.loadResourceScript (RT.java:381)\n    clojure.lang.RT.loadResourceScript (RT.java:372)\n    clojure.lang.RT.load (RT.java:463)\n    clojure.lang.RT.load (RT.java:428)\n    clojure.core$load$fn__6824.invoke (core.clj:6126)\n    clojure.core$load.invokeStatic (core.clj:6125)\n    clojure.core$load.doInvoke (core.clj:6109)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.core$load_one.invokeStatic (core.clj:5908)\n    clojure.core$load_one.invoke (core.clj:5903)\n    clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n    clojure.core$load_lib.invokeStatic (core.clj:5947)\n    clojure.core$load_lib.doInvoke (core.clj:5928)\n    clojure.lang.RestFn.applyTo (RestFn.java:142)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$load_libs.invokeStatic (core.clj:5985)\n    clojure.core$load_libs.doInvoke (core.clj:5969)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.core$apply.invokeStatic (core.clj:669)\n    clojure.core$use.invokeStatic (core.clj:6093)\n    clojure.core$use.doInvoke (core.clj:6093)\n    clojure.lang.RestFn.invoke (RestFn.java:421)\n    \nring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke \n(content_type.clj:1)\n    ring.middleware.content_type$eval2277.invokeStatic (content_type.clj:1)\n    ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n    clojure.lang.Compiler.eval (Compiler.java:7176)\n    clojure.lang.Compiler.eval (Compiler.java:7165)\n    clojure.lang.Compiler.load (Compiler.java:7635)\n    clojure.lang.RT.loadResourceScript (RT.java:381)\n    clojure.lang.RT.loadResourceScript (RT.java:372)\n    clojure.lang.RT.load (RT.java:463)\n    clojure.lang.RT.load (RT.java:428)\n    clojure.core$load$fn__6824.invoke (core.clj:6126)\n    clojure.core$load.invokeStatic (core.clj:6125)\n    clojure.core$load.doInvoke (core.clj:6109)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.core$load_one.invokeStatic (core.clj:5908)\n    clojure.core$load_one.invoke (core.clj:5903)\n    clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n    clojure.core$load_lib.invokeStatic (core.clj:5947)\n    clojure.core$load_lib.doInvoke (core.clj:5928)\n    clojure.lang.RestFn.applyTo (RestFn.java:142)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$load_libs.invokeStatic (core.clj:5985)\n    clojure.core$load_libs.doInvoke (core.clj:5969)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.core$apply.invokeStatic (core.clj:669)\n    clojure.core$use.invokeStatic (core.clj:6093)\n    clojure.core$use.doInvoke (core.clj:6093)\n    clojure.lang.RestFn.invoke (RestFn.java:512)\n    compojure.route$eval2269$loading__6706__auto____2270.invoke \n(route.clj:1)\n    compojure.route$eval2269.invokeStatic (route.clj:1)\n    compojure.route$eval2269.invoke (route.clj:1)\n    clojure.lang.Compiler.eval (Compiler.java:7176)\n    clojure.lang.Compiler.eval (Compiler.java:7165)\n    clojure.lang.Compiler.load (Compiler.java:7635)\n    clojure.lang.RT.loadResourceScript (RT.java:381)\n    clojure.lang.RT.loadResourceScript (RT.java:372)\n    clojure.lang.RT.load (RT.java:463)\n    clojure.lang.RT.load (RT.java:428)\n    clojure.core$load$fn__6824.invoke (core.clj:6126)\n    clojure.core$load.invokeStatic (core.clj:6125)\n    clojure.core$load.doInvoke (core.clj:6109)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.core$load_one.invokeStatic (core.clj:5908)\n    clojure.core$load_one.invoke (core.clj:5903)\n    clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n    clojure.core$load_lib.invokeStatic (core.clj:5947)\n    clojure.core$load_lib.doInvoke (core.clj:5928)\n    clojure.lang.RestFn.applyTo (RestFn.java:142)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$load_libs.invokeStatic (core.clj:5985)\n    clojure.core$load_libs.doInvoke (core.clj:5969)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$require.invokeStatic (core.clj:6007)\n    clojure.core$require.doInvoke (core.clj:6007)\n    clojure.lang.RestFn.invoke (RestFn.java:1789)\n    gorilla_repl.core$eval668$loading__6706__auto____669.invoke (core.clj:5)\n    gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n    gorilla_repl.core$eval668.invoke (core.clj:5)\n    clojure.lang.Compiler.eval (Compiler.java:7176)\n    clojure.lang.Compiler.eval (Compiler.java:7165)\n    clojure.lang.Compiler.load (Compiler.java:7635)\n    clojure.lang.RT.loadResourceScript (RT.java:381)\n    clojure.lang.RT.loadResourceScript (RT.java:372)\n    clojure.lang.RT.load (RT.java:463)\n    clojure.lang.RT.load (RT.java:428)\n    clojure.core$load$fn__6824.invoke (core.clj:6126)\n    clojure.core$load.invokeStatic (core.clj:6125)\n    clojure.core$load.doInvoke (core.clj:6109)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.core$load_one.invokeStatic (core.clj:5908)\n    clojure.core$load_one.invoke (core.clj:5903)\n    clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n    clojure.core$load_lib.invokeStatic (core.clj:5947)\n    clojure.core$load_lib.doInvoke (core.clj:5928)\n    clojure.lang.RestFn.applyTo (RestFn.java:142)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$load_libs.invokeStatic (core.clj:5985)\n    clojure.core$load_libs.doInvoke (core.clj:5969)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$require.invokeStatic (core.clj:6007)\n    clojure.core$require.doInvoke (core.clj:6007)\n    clojure.lang.RestFn.invoke (RestFn.java:436)\n    leiningen.gorilla$eval662$loading__6706__auto____663.invoke \n(gorilla.clj:7)\n    leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n    leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n    clojure.lang.Compiler.eval (Compiler.java:7176)\n    clojure.lang.Compiler.eval (Compiler.java:7165)\n    clojure.lang.Compiler.load (Compiler.java:7635)\n    clojure.lang.RT.loadResourceScript (RT.java:381)\n    clojure.lang.RT.loadResourceScript (RT.java:372)\n    clojure.lang.RT.load (RT.java:463)\n    clojure.lang.RT.load (RT.java:428)\n    clojure.core$load$fn__6824.invoke (core.clj:6126)\n    clojure.core$load.invokeStatic (core.clj:6125)\n    clojure.core$load.doInvoke (core.clj:6109)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.core$load_one.invokeStatic (core.clj:5908)\n    clojure.core$load_one.invoke (core.clj:5903)\n    clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n    clojure.core$load_lib.invokeStatic (core.clj:5947)\n    clojure.core$load_lib.doInvoke (core.clj:5928)\n    clojure.lang.RestFn.applyTo (RestFn.java:142)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$load_libs.invokeStatic (core.clj:5985)\n    clojure.core$load_libs.doInvoke (core.clj:5969)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$require.invokeStatic (core.clj:6007)\n    clojure.core$require.doInvoke (core.clj:6007)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n    leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n    leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n    leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n    leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n    leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n    leiningen.core.main$pass_through_help_QMARK_.invokeStatic (main.clj:79)\n    leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n    leiningen.core.main$task_args.invokeStatic (main.clj:82)\n    leiningen.core.main$task_args.invoke (main.clj:81)\n    leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n    leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n    leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n    leiningen.core.main$_main.invokeStatic (main.clj:442)\n    leiningen.core.main$_main.doInvoke (main.clj:439)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.lang.Var.applyTo (Var.java:705)\n    clojure.core$apply.invokeStatic (core.clj:665)\n    clojure.main$main_opt.invokeStatic (main.clj:491)\n    clojure.main$main_opt.invoke (main.clj:487)\n    clojure.main$main.invokeStatic (main.clj:598)\n    clojure.main$main.doInvoke (main.clj:561)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.lang.Var.applyTo (Var.java:705)\n    clojure.main.main (main.java:37)\nCaused by: clojure.lang.ExceptionInfo: Call to clojure.core\/ns did not \nconform to spec.\n#:clojure.spec.alpha{:problems [{:path [], :reason \"Extra input\", :pred \n(clojure.spec.alpha\/cat :attr-map (clojure.spec.alpha\/? clojure.core\/map?) \n:ns-clauses :clojure.core.specs.alpha\/ns-clauses), :val ((require \n[clojure.string :as str])), :via [:clojure.core.specs.alpha\/ns-form], :in \n[2]}], :spec #object[clojure.spec.alpha$regex_spec_impl$reify__2509 \n0x64f981e2 \"clojure.spec.alpha$regex_spec_impl$reify__2509@64f981e2\"], \n:value (ring.util.mime-type \"Utility functions for finding out the \nmime-type of a file.\" (require [clojure.string :as str])), :args \n(ring.util.mime-type \"Utility functions for finding out the mime-type of a \nfile.\" (require [clojure.string :as str]))}\n at clojure.spec.alpha$macroexpand_check.invokeStatic (alpha.clj:705)\n    clojure.spec.alpha$macroexpand_check.invoke (alpha.clj:697)\n    clojure.lang.AFn.applyToHelper (AFn.java:156)\n    clojure.lang.AFn.applyTo (AFn.java:144)\n    clojure.lang.Var.applyTo (Var.java:705)\n    clojure.lang.Compiler.checkSpecs (Compiler.java:6969)\n    clojure.lang.Compiler.macroexpand1 (Compiler.java:6987)\n    clojure.lang.Compiler.macroexpand (Compiler.java:7074)\n    clojure.lang.Compiler.eval (Compiler.java:7160)\n    clojure.lang.Compiler.load (Compiler.java:7635)\n    clojure.lang.RT.loadResourceScript (RT.java:381)\n    clojure.lang.RT.loadResourceScript (RT.java:372)\n    clojure.lang.RT.load (RT.java:463)\n    clojure.lang.RT.load (RT.java:428)\n    clojure.core$load$fn__6824.invoke (core.clj:6126)\n    clojure.core$load.invokeStatic (core.clj:6125)\n    clojure.core$load.doInvoke (core.clj:6109)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.core$load_one.invokeStatic (core.clj:5908)\n    clojure.core$load_one.invoke (core.clj:5903)\n    clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n    clojure.core$load_lib.invokeStatic (core.clj:5947)\n    clojure.core$load_lib.doInvoke (core.clj:5928)\n    clojure.lang.RestFn.applyTo (RestFn.java:142)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$load_libs.invokeStatic (core.clj:5985)\n    clojure.core$load_libs.doInvoke (core.clj:5969)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.core$apply.invokeStatic (core.clj:669)\n    clojure.core$use.invokeStatic (core.clj:6093)\n    clojure.core$use.doInvoke (core.clj:6093)\n    clojure.lang.RestFn.invoke (RestFn.java:421)\n    \nring.middleware.content_type$eval2277$loading__6706__auto____2278.invoke \n(content_type.clj:1)\n    ring.middleware.content_type$eval2277.invokeStatic (content_type.clj:1)\n    ring.middleware.content_type$eval2277.invoke (content_type.clj:1)\n    clojure.lang.Compiler.eval (Compiler.java:7176)\n    clojure.lang.Compiler.eval (Compiler.java:7165)\n    clojure.lang.Compiler.load (Compiler.java:7635)\n    clojure.lang.RT.loadResourceScript (RT.java:381)\n    clojure.lang.RT.loadResourceScript (RT.java:372)\n    clojure.lang.RT.load (RT.java:463)\n    clojure.lang.RT.load (RT.java:428)\n    clojure.core$load$fn__6824.invoke (core.clj:6126)\n    clojure.core$load.invokeStatic (core.clj:6125)\n    clojure.core$load.doInvoke (core.clj:6109)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.core$load_one.invokeStatic (core.clj:5908)\n    clojure.core$load_one.invoke (core.clj:5903)\n    clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n    clojure.core$load_lib.invokeStatic (core.clj:5947)\n    clojure.core$load_lib.doInvoke (core.clj:5928)\n    clojure.lang.RestFn.applyTo (RestFn.java:142)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$load_libs.invokeStatic (core.clj:5985)\n    clojure.core$load_libs.doInvoke (core.clj:5969)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.core$apply.invokeStatic (core.clj:669)\n    clojure.core$use.invokeStatic (core.clj:6093)\n    clojure.core$use.doInvoke (core.clj:6093)\n    clojure.lang.RestFn.invoke (RestFn.java:512)\n    compojure.route$eval2269$loading__6706__auto____2270.invoke \n(route.clj:1)\n    compojure.route$eval2269.invokeStatic (route.clj:1)\n    compojure.route$eval2269.invoke (route.clj:1)\n    clojure.lang.Compiler.eval (Compiler.java:7176)\n    clojure.lang.Compiler.eval (Compiler.java:7165)\n    clojure.lang.Compiler.load (Compiler.java:7635)\n    clojure.lang.RT.loadResourceScript (RT.java:381)\n    clojure.lang.RT.loadResourceScript (RT.java:372)\n    clojure.lang.RT.load (RT.java:463)\n    clojure.lang.RT.load (RT.java:428)\n    clojure.core$load$fn__6824.invoke (core.clj:6126)\n    clojure.core$load.invokeStatic (core.clj:6125)\n    clojure.core$load.doInvoke (core.clj:6109)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.core$load_one.invokeStatic (core.clj:5908)\n    clojure.core$load_one.invoke (core.clj:5903)\n    clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n    clojure.core$load_lib.invokeStatic (core.clj:5947)\n    clojure.core$load_lib.doInvoke (core.clj:5928)\n    clojure.lang.RestFn.applyTo (RestFn.java:142)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$load_libs.invokeStatic (core.clj:5985)\n    clojure.core$load_libs.doInvoke (core.clj:5969)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$require.invokeStatic (core.clj:6007)\n    clojure.core$require.doInvoke (core.clj:6007)\n    clojure.lang.RestFn.invoke (RestFn.java:1789)\n    gorilla_repl.core$eval668$loading__6706__auto____669.invoke (core.clj:5)\n    gorilla_repl.core$eval668.invokeStatic (core.clj:5)\n    gorilla_repl.core$eval668.invoke (core.clj:5)\n    clojure.lang.Compiler.eval (Compiler.java:7176)\n    clojure.lang.Compiler.eval (Compiler.java:7165)\n    clojure.lang.Compiler.load (Compiler.java:7635)\n    clojure.lang.RT.loadResourceScript (RT.java:381)\n    clojure.lang.RT.loadResourceScript (RT.java:372)\n    clojure.lang.RT.load (RT.java:463)\n    clojure.lang.RT.load (RT.java:428)\n    clojure.core$load$fn__6824.invoke (core.clj:6126)\n    clojure.core$load.invokeStatic (core.clj:6125)\n    clojure.core$load.doInvoke (core.clj:6109)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.core$load_one.invokeStatic (core.clj:5908)\n    clojure.core$load_one.invoke (core.clj:5903)\n    clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n    clojure.core$load_lib.invokeStatic (core.clj:5947)\n    clojure.core$load_lib.doInvoke (core.clj:5928)\n    clojure.lang.RestFn.applyTo (RestFn.java:142)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$load_libs.invokeStatic (core.clj:5985)\n    clojure.core$load_libs.doInvoke (core.clj:5969)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$require.invokeStatic (core.clj:6007)\n    clojure.core$require.doInvoke (core.clj:6007)\n    clojure.lang.RestFn.invoke (RestFn.java:436)\n    leiningen.gorilla$eval662$loading__6706__auto____663.invoke \n(gorilla.clj:7)\n    leiningen.gorilla$eval662.invokeStatic (gorilla.clj:7)\n    leiningen.gorilla$eval662.invoke (gorilla.clj:7)\n    clojure.lang.Compiler.eval (Compiler.java:7176)\n    clojure.lang.Compiler.eval (Compiler.java:7165)\n    clojure.lang.Compiler.load (Compiler.java:7635)\n    clojure.lang.RT.loadResourceScript (RT.java:381)\n    clojure.lang.RT.loadResourceScript (RT.java:372)\n    clojure.lang.RT.load (RT.java:463)\n    clojure.lang.RT.load (RT.java:428)\n    clojure.core$load$fn__6824.invoke (core.clj:6126)\n    clojure.core$load.invokeStatic (core.clj:6125)\n    clojure.core$load.doInvoke (core.clj:6109)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.core$load_one.invokeStatic (core.clj:5908)\n    clojure.core$load_one.invoke (core.clj:5903)\n    clojure.core$load_lib$fn__6765.invoke (core.clj:5948)\n    clojure.core$load_lib.invokeStatic (core.clj:5947)\n    clojure.core$load_lib.doInvoke (core.clj:5928)\n    clojure.lang.RestFn.applyTo (RestFn.java:142)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$load_libs.invokeStatic (core.clj:5985)\n    clojure.core$load_libs.doInvoke (core.clj:5969)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$require.invokeStatic (core.clj:6007)\n    clojure.core$require.doInvoke (core.clj:6007)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    leiningen.core.utils$require_resolve.invokeStatic (utils.clj:102)\n    leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n    leiningen.core.utils$require_resolve.invokeStatic (utils.clj:105)\n    leiningen.core.utils$require_resolve.invoke (utils.clj:95)\n    leiningen.core.main$lookup_task_var.invokeStatic (main.clj:69)\n    leiningen.core.main$lookup_task_var.invoke (main.clj:65)\n    leiningen.core.main$pass_through_help_QMARK_.invokeStatic (main.clj:79)\n    leiningen.core.main$pass_through_help_QMARK_.invoke (main.clj:73)\n    leiningen.core.main$task_args.invokeStatic (main.clj:82)\n    leiningen.core.main$task_args.invoke (main.clj:81)\n    leiningen.core.main$resolve_and_apply.invokeStatic (main.clj:339)\n    leiningen.core.main$resolve_and_apply.invoke (main.clj:336)\n    leiningen.core.main$_main$fn__6681.invoke (main.clj:452)\n    leiningen.core.main$_main.invokeStatic (main.clj:442)\n    leiningen.core.main$_main.doInvoke (main.clj:439)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.lang.Var.applyTo (Var.java:705)\n    clojure.core$apply.invokeStatic (core.clj:665)\n    clojure.main$main_opt.invokeStatic (main.clj:491)\n    clojure.main$main_opt.invoke (main.clj:487)\n    clojure.main$main.invokeStatic (main.clj:598)\n    clojure.main$main.doInvoke (main.clj:561)\n    clojure.lang.RestFn.applyTo (RestFn.java:137)\n    clojure.lang.Var.applyTo (Var.java:705)\n    clojure.main.main (main.java:37)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/0f57df0e-2e68-4e6c-8e78-78570fe7e6a2%40googlegroups.com.","subject":"[ClojureScript] lein gorilla :port 8990 fails because \"Call to clojure.core\/ns did not conform to spec\" Kelvin T Mon, 07 Oct 2019 12:43:22 -0700"},
{"body":"I am pleased to announce the 0.1.0 release of core.rrb-vector, a Clojure\nContrib library extending the Clojure vector API with logarithmic-time\nconcatenation and slicing: \n  https:\/\/github.com\/clojure\/core.rrb-vector\n\n  [org.clojure\/core.rrb-vector \"0.1.0\"]\n\n  <dependency>\n    <groupId>org.clojure<\/groupId>\n    <artifactId>core.rrb-vector<\/artifactId>\n    <version>0.1.0<\/version>\n  <\/dependency>\n\nThis release fixes several bugs that were found in previous releases of the\nlibrary.  More details can be found in the change log:\n\n  https:\/\/github.com\/clojure\/core.rrb-vector\/blob\/master\/CHANGES.md\n\nCheers,\nMicha\u0142 Marczyk and Andy Fingerhut\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAKvLtDYipKqbVOixZNNXtm8zyxwSJqL%2BLmHf7W8SJ7UH1tMr0g%40mail.gmail.com.","subject":"[ClojureScript] [ANN] core.rrb-vector 0.1.0 -- bug fixes Andy Fingerhut Mon, 30 Sep 2019 13:33:55 -0700"},
{"body":"I do apologize. The page kept saying it could not communicate with the \nserver - so I was never sure the post had completed. I had a feeling it \nwas, but I could not confirm. Mostly because I did not realize it was \nmoderated, so of course the post was not showing up immediately. Good times. \n\n\nOn Tuesday, September 24, 2019 at 3:55:41 PM UTC-4, Andy Fingerhut wrote:\n>\n> Charles:\n>\n> I am a moderator of the ClojureScript Google group, and at least from this \n> end it appeared that you attempted to send the same message to the group \n> about 10 times.  If this was intentional, then please realize that once is \n> typically enough.  People who have not posted to the group before have \n> their messages go through human moderation, which involves waiting until a \n> person looks at and approves your message.\n>\n> Andy Fingerhut\n>\n>\n> On Tue, Sep 24, 2019 at 12:52 PM Charles Harvey III <charles...@gmail.com \n> <javascript:>> wrote:\n>\n>> Greetings,\n>> I have started a job where the chosen execution environment happens to be \n>> Node.js for our microservices. We have a NestJS app (which uses TypeScript) \n>> running and its fine. If you squint it looks like a Spring Boot app. \n>> Annotations. MVC. All the things. I personally think the JVM is a better \n>> platform for creating services, but that isn't on the table right now.\n>>\n>> So, can I do this in ClojureScript? I have been reading all the docs for \n>> Macchiato and it looks decent. I don't need to turn out web pages though, \n>> so can I just leave that stuff out? Are there other frameworks? I have seen \n>> an example of wrapping ExpressJS in ClojureScript. Is that what people do?\n>>\n>> Are there a lot of server-side ClojureScript implementations out there or \n>> do people use Clojure because, well...\n>>\n>> Thanks a lot.\n>>\n>>\n>> Charlie\n>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojur...@googlegroups.com <javascript:>.\n>> To view this discussion on the web visit \n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/af5e8c18-1c40-45dc-8fb6-600214511c37%40googlegroups.com\n>>  \n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/af5e8c18-1c40-45dc-8fb6-600214511c37%40googlegroups.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/0495f030-f94e-4ba4-88af-129b269b82e9%40googlegroups.com.","subject":"Re: [ClojureScript] ClojureScript for node.js REST API Charles Harvey III Tue, 24 Sep 2019 13:49:17 -0700"},
{"body":"My apologies for sending the previous message to the group, which was\nintended to go to the sender only. \nAndy\n\nOn Tue, Sep 24, 2019 at 12:55 PM Andy Fingerhut <andy.finger...@gmail.com>\nwrote:\n\n> Charles:\n>\n> I am a moderator of the ClojureScript Google group, and at least from this\n> end it appeared that you attempted to send the same message to the group\n> about 10 times.  If this was intentional, then please realize that once is\n> typically enough.  People who have not posted to the group before have\n> their messages go through human moderation, which involves waiting until a\n> person looks at and approves your message.\n>\n> Andy Fingerhut\n>\n>\n> On Tue, Sep 24, 2019 at 12:52 PM Charles Harvey III <\n> charlesnhar...@gmail.com> wrote:\n>\n>> Greetings,\n>> I have started a job where the chosen execution environment happens to be\n>> Node.js for our microservices. We have a NestJS app (which uses TypeScript)\n>> running and its fine. If you squint it looks like a Spring Boot app.\n>> Annotations. MVC. All the things. I personally think the JVM is a better\n>> platform for creating services, but that isn't on the table right now.\n>>\n>> So, can I do this in ClojureScript? I have been reading all the docs for\n>> Macchiato and it looks decent. I don't need to turn out web pages though,\n>> so can I just leave that stuff out? Are there other frameworks? I have seen\n>> an example of wrapping ExpressJS in ClojureScript. Is that what people do?\n>>\n>> Are there a lot of server-side ClojureScript implementations out there or\n>> do people use Clojure because, well...\n>>\n>> Thanks a lot.\n>>\n>>\n>> Charlie\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To view this discussion on the web visit\n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/af5e8c18-1c40-45dc-8fb6-600214511c37%40googlegroups.com\n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/af5e8c18-1c40-45dc-8fb6-600214511c37%40googlegroups.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAKvLtDaVK%2BmzaJ_P7JOWD2po%3DFmkCLLEUa5T_fO51QN7O4%2B2Fw%40mail.gmail.com.","subject":"Re: [ClojureScript] ClojureScript for node.js REST API Andy Fingerhut Tue, 24 Sep 2019 12:57:34 -0700"},
{"body":"Charles:\n\nI am a moderator of the ClojureScript Google group, and at least from this\nend it appeared that you attempted to send the same message to the group\nabout 10 times.  If this was intentional, then please realize that once is\ntypically enough.  People who have not posted to the group before have\ntheir messages go through human moderation, which involves waiting until a\nperson looks at and approves your message. \nAndy Fingerhut\n\n\nOn Tue, Sep 24, 2019 at 12:52 PM Charles Harvey III <\ncharlesnhar...@gmail.com> wrote:\n\n> Greetings,\n> I have started a job where the chosen execution environment happens to be\n> Node.js for our microservices. We have a NestJS app (which uses TypeScript)\n> running and its fine. If you squint it looks like a Spring Boot app.\n> Annotations. MVC. All the things. I personally think the JVM is a better\n> platform for creating services, but that isn't on the table right now.\n>\n> So, can I do this in ClojureScript? I have been reading all the docs for\n> Macchiato and it looks decent. I don't need to turn out web pages though,\n> so can I just leave that stuff out? Are there other frameworks? I have seen\n> an example of wrapping ExpressJS in ClojureScript. Is that what people do?\n>\n> Are there a lot of server-side ClojureScript implementations out there or\n> do people use Clojure because, well...\n>\n> Thanks a lot.\n>\n>\n> Charlie\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/af5e8c18-1c40-45dc-8fb6-600214511c37%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/af5e8c18-1c40-45dc-8fb6-600214511c37%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAKvLtDZx%2BO0PqxtY7GirruEJUQEReVabxkGvsnBr0MbzKSHVhQ%40mail.gmail.com.","subject":"Re: [ClojureScript] ClojureScript for node.js REST API Andy Fingerhut Tue, 24 Sep 2019 12:55:45 -0700"},
{"body":"Greetings,\nI have started a job where the chosen execution environment happens to be \nNode.js for our microservices. We have a NestJS app (which uses TypeScript) \nrunning and its fine. If you squint it looks like a Spring Boot app. \nAnnotations. MVC. All the things. I personally think the JVM is a better \nplatform for creating services, but that isn't on the table right now. \nSo, can I do this in ClojureScript? I have been reading all the docs for \nMacchiato and it looks decent. I don't need to turn out web pages though, \nso can I just leave that stuff out? Are there other frameworks? I have seen \nan example of wrapping ExpressJS in ClojureScript. Is that what people do?\n\nAre there a lot of server-side ClojureScript implementations out there or \ndo people use Clojure because, well...\n\nThanks a lot.\n\n\nCharlie\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/af5e8c18-1c40-45dc-8fb6-600214511c37%40googlegroups.com.","subject":"[ClojureScript] ClojureScript for node.js REST API Charles Harvey III Tue, 24 Sep 2019 12:52:54 -0700"},
{"body":"Nicely sums up the advantages of Clojure:\n\nhttp:\/\/blog.cleancoder.com\/uncle-bob\/2019\/08\/22\/WhyClojure.html \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAN67zA3fJK0aEV4qb8RfFd5WPb40U1_4yNjQhBFtf86p-8TyEQ%40mail.gmail.com.","subject":"[ClojureScript] Good Clojure article by Uncle Bob Alan Thompson Fri, 23 Aug 2019 15:27:30 -0700"},
{"body":"Released version 1.0.2 of my r <https:\/\/twitter.com\/ClojureScript>e-frame \nproject generator: \nhttps:\/\/github.com\/rpofuk\/re-gen\/releases\/tag\/1.0.2\nhttps:\/\/www.npmjs.com\/package\/@rpofuk\/re-gen\n\n- added MaterialUI grid\n- navigation fixes\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/313148a8-04f4-4891-aa4c-7730b16f1590%40googlegroups.com.","subject":"[ClojureScript] [ANN] re-frame project generator 1.0.2 Robert Pofuk Mon, 19 Aug 2019 10:19:54 -0700"},
{"body":"I made a thing for that here https:\/\/www.chrepl.app\/ \nI haven't made it work with shadow-cljs yet, but that'd be an interesting \noption.\n\nV\/r\n\nJohn\n\nOn Tuesday, August 13, 2019 at 12:40:36 AM UTC-4, Sigmund Tzeng wrote:\n>\n> Hi there,\n>\n> Here are my steps to inject cljs repl into 3rd party webpage:\n>\n> 1. inject the following line via \"Custom JavaScript for websites\"\n>\n>  (function(){var d=document;var s=d.createElement('script');s.src='\n> https:\/\/localhost:8090\/js\/main.js';d.body.appendChild(s);})()\n>\n> 2. *.edn file:\n>\n> ;; shadow-cljs configuration\n> {:source-paths\n>  [\"src\/dev\"\n>   \"src\/main\"\n>   \"src\/test\"]\n>\n>  :dependencies\n>  [[reagent \"0.8.1\"] ;[etaoin \"0.3.5\"]\n>  ]\n>  :ssl {} ;for shadow-cljs server, defaults to 9630 port\n>  :http {:port 9630\n>         :ssl-port 23456\n>         :host \"localhost\"} \n>  :dev-http {8090 {:root \"public\"\n>         :push-state\/headers {\"Access-Control-Allow-Origin\" \"*\" }}\n>   }\n>  :builds\n> {:frontend\n>   {:target :browser\n>    :asset-path \"https:\/\/localhost:8090\/js\";\n>    :modules {:main {:init-fn acme.frontend.app\/init}}\n>    }}}\n>\n> 3. modify main.js with no-cors mode\n>\n>           fetch(uri, {    mode: 'no-cors'})\n>\n> 4. However, the browser endpoint (shown below) is never called \n>\n> wss:\/\/localhost:23456\/ws\/worker\/frontend\/...\/browser\n>\n> 5. what am i missing here? the emacs skewer-mode seem to work just fine.\n>   Was wondering if DOMContentLoaded ever get fired, even so I don't know \n> how to fix\/patch it.\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/97a78456-54a2-4c2b-8e9b-95004b7f801d%40googlegroups.com.","subject":"[ClojureScript] Re: (failed) Attempts to inject cljs repl into 3rd party webpage John Newman Tue, 13 Aug 2019 11:38:26 -0700"},
{"body":"I think you may have hit on what I need to run - the level 3 subscriptions. \nI am reading from a database (datascript in this case) on the device and I \nwant to minimize the number of queries I am making because I expect the \ndatabase to grow in size. I have no problem with it being re-run if it is \ndata residing in app-db, but it is this db access that I want to keep to \nthe minimum. \nThank you for this link - I think I will REREAD my re-frame subscriptions \nliterature and understand that a little better... \n\nCheers @basket!!!\n\nOn Monday, August 12, 2019 at 10:04:20 PM UTC-4, basket. wrote:\n>\n> What is the problem with the subscription being re-run? Does it have side \n> effects? The part that confuses me is the new atom you are constructing \n> from the subscription, why not use a level 3 subscription? (\n> https:\/\/github.com\/Day8\/re-frame-10x\/blob\/master\/docs\/HyperlinkedInformation\/UnchangedLayer2.md).\n>  \n> The traces section might be helpful, here is a screenshot of the traces \n> from an application I am working on:\n> [image: image.png]\n>\n> <https:\/\/about.me\/gilvictor?promo=email_sig&utm_source=product&utm_medium=email_sig&utm_campaign=gmail_api>\n>  \n> Victor Gil\n> about.me\/gilvictor \n> <https:\/\/about.me\/gilvictor?promo=email_sig&utm_source=product&utm_medium=email_sig&utm_campaign=gmail_api>\n>  \n>\n>\n> On Mon, Aug 12, 2019 at 7:50 PM Deuseks <jny...@gmail.com <javascript:>> \n> wrote:\n>\n>> I have seen re-frame-10x indeed..and it is a fantastic tool. And maybe \n>> that is where the answer lies as @danielcompton said on another issue. \n>> However, I guess what I am trying to debug is how to tell definitively, \n>> which specific de-ref of my reaction triggered a particular subscription to \n>> be rerun. \n>>\n>> If this information is not currently something immediately available, I \n>> did have other questions such as:\n>>\n>>    - Does re-frame cache the results of a subscription run ? if so, where \n>> is the documentation or even informal information about that ? \n>>    - can I identify which specific deref causes a rerun ?\n>>\n>> While I can see the effects of running subscriptions and events in 10x, I \n>> am trying to debug the specific areas in code that triggered their running\n>>\n>> DOes this help ? \n>>\n>>\n>>\n>> On Monday, August 12, 2019 at 5:46:16 PM UTC-4, basket. wrote:\n>>>\n>>> Hi there, I am not sure I understand your scenario, but have you tried \n>>> https:\/\/github.com\/Day8\/re-frame-10x ?\n>>>\n>>> <https:\/\/about.me\/gilvictor?promo=email_sig&utm_source=product&utm_medium=email_sig&utm_campaign=gmail_api>\n>>>  \n>>> Victor Gil\n>>> about.me\/gilvictor \n>>> <https:\/\/about.me\/gilvictor?promo=email_sig&utm_source=product&utm_medium=email_sig&utm_campaign=gmail_api>\n>>>  \n>>>\n>>>\n>>> On Mon, Aug 12, 2019 at 3:12 PM Deuseks <jny...@gmail.com> wrote:\n>>>\n>>>> Hi\n>>>> I am using re-frame with expo\/react native and my components are deeply \n>>>> nested .I create a pass into this nested structure a new atom I construct \n>>>> FROM the atom of a subscription. I pass that in since reactions cannot be \n>>>> edited and I want this structure to be edited. However, the nested \n>>>> structure contains a component that displays a modal. Whenever I open the \n>>>> modal and close the modal control, it forces a re-fetch of the \n>>>> subscription \n>>>> data.\n>>>>\n>>>>\n>>>> The questions:\n>>>>    \n>>>>    1. \n>>>>    \n>>>>    Why would the subscription be called again if I did not pass into \n>>>>    the nested structure the original reaction ?\n>>>>    2. \n>>>>    \n>>>>    Should I worry about this retrigger even if the data has not \n>>>>    changed ? I see it pulling the same stuff but maybe it is just passing \n>>>> back \n>>>>    results that are cached ? Are they cached ?\n>>>>    3. \n>>>>    \n>>>>    Is there a way in re-frame to definitively identify which deref of \n>>>>    the reaction\/atom causes the subscription to be re-run ?\n>>>>    \n>>>> thanks for any help on this.\n>>>>\n>>>> -- \n>>>> Note that posts from new members are moderated - please be patient with \n>>>> your first post.\n>>>> --- \n>>>> You received this message because you are subscribed to the Google \n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send \n>>>> an email to clojur...@googlegroups.com.\n>>>> To view this discussion on the web visit \n>>>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/5c3a1a6b-3cb6-4a0c-a0a8-4712d4ed60a6%40googlegroups.com\n>>>>  \n>>>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/5c3a1a6b-3cb6-4a0c-a0a8-4712d4ed60a6%40googlegroups.com?utm_medium=email&utm_source=footer>\n>>>> .\n>>>>\n>>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojur...@googlegroups.com <javascript:>.\n>> To view this discussion on the web visit \n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/67dcb6e5-dce0-4a67-92ec-d167f10d781e%40googlegroups.com\n>>  \n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/67dcb6e5-dce0-4a67-92ec-d167f10d781e%40googlegroups.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/1d5e7abf-808e-4d75-9eb0-d4c9685c2a1f%40googlegroups.com.","subject":"Re: [ClojureScript] Subscriptions tracking in Re-frame Deuseks Tue, 13 Aug 2019 06:18:07 -0700"},
{"body":"You cannot really inject a shadow-cljs dev build into any arbitrary page. \nIt is not designed for that and will potentially conflict with the page \nitself in bad ways. \nYou can set :devtools {:devtools-url \"https:\/\/your.host:23456\"} to \noverwrite where the socket is trying to connect to. The Browser console \nwill tell if you that connect fails.\n\nDOMContentLoaded is not used by the CLJS build, not sure why you are asking \nabout it. If you are trying to register an event handler for it you are \nlikely just registering it too late when it has already fired.\n\nOn Tuesday, August 13, 2019 at 6:40:36 AM UTC+2, Sigmund Tzeng wrote:\n>\n> Hi there,\n>\n> Here are my steps to inject cljs repl into 3rd party webpage:\n>\n> 1. inject the following line via \"Custom JavaScript for websites\"\n>\n>  (function(){var d=document;var s=d.createElement('script');s.src='\n> https:\/\/localhost:8090\/js\/main.js';d.body.appendChild(s);})()\n>\n> 2. *.edn file:\n>\n> ;; shadow-cljs configuration\n> {:source-paths\n>  [\"src\/dev\"\n>   \"src\/main\"\n>   \"src\/test\"]\n>\n>  :dependencies\n>  [[reagent \"0.8.1\"] ;[etaoin \"0.3.5\"]\n>  ]\n>  :ssl {} ;for shadow-cljs server, defaults to 9630 port\n>  :http {:port 9630\n>         :ssl-port 23456\n>         :host \"localhost\"} \n>  :dev-http {8090 {:root \"public\"\n>         :push-state\/headers {\"Access-Control-Allow-Origin\" \"*\" }}\n>   }\n>  :builds\n> {:frontend\n>   {:target :browser\n>    :asset-path \"https:\/\/localhost:8090\/js\";\n>    :modules {:main {:init-fn acme.frontend.app\/init}}\n>    }}}\n>\n> 3. modify main.js with no-cors mode\n>\n>           fetch(uri, {    mode: 'no-cors'})\n>\n> 4. However, the browser endpoint (shown below) is never called \n>\n> wss:\/\/localhost:23456\/ws\/worker\/frontend\/...\/browser\n>\n> 5. what am i missing here? the emacs skewer-mode seem to work just fine.\n>   Was wondering if DOMContentLoaded ever get fired, even so I don't know \n> how to fix\/patch it.\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/d1c90213-c433-42bf-a8e1-3bf5500295f4%40googlegroups.com.","subject":"[ClojureScript] Re: (failed) Attempts to inject cljs repl into 3rd party webpage Thomas Heller Tue, 13 Aug 2019 01:10:31 -0700"},
{"body":"Hi there,\n\nHere are my steps to inject cljs repl into 3rd party webpage: \n1. inject the following line via \"Custom JavaScript for websites\"\n\n (function(){var d=document;var \ns=d.createElement('script');s.src='https:\/\/localhost:8090\/js\/main.js';d.body.appendChild(s);})()\n\n2. *.edn file:\n\n;; shadow-cljs configuration\n{:source-paths\n [\"src\/dev\"\n  \"src\/main\"\n  \"src\/test\"]\n\n :dependencies\n [[reagent \"0.8.1\"] ;[etaoin \"0.3.5\"]\n ]\n :ssl {} ;for shadow-cljs server, defaults to 9630 port\n :http {:port 9630\n        :ssl-port 23456\n        :host \"localhost\"} \n :dev-http {8090 {:root \"public\"\n        :push-state\/headers {\"Access-Control-Allow-Origin\" \"*\" }}\n  }\n :builds\n{:frontend\n  {:target :browser\n   :asset-path \"https:\/\/localhost:8090\/js\";\n   :modules {:main {:init-fn acme.frontend.app\/init}}\n   }}}\n\n3. modify main.js with no-cors mode\n\n          fetch(uri, {    mode: 'no-cors'})\n\n4. However, the browser endpoint (shown below) is never called \n\nwss:\/\/localhost:23456\/ws\/worker\/frontend\/...\/browser\n\n5. what am i missing here? the emacs skewer-mode seem to work just fine.\n  Was wondering if DOMContentLoaded ever get fired, even so I don't know \nhow to fix\/patch it.\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/00c9c929-1c6a-4e83-9c56-0562179dd392%40googlegroups.com.","subject":"[ClojureScript] (failed) Attempts to inject cljs repl into 3rd party webpage Sigmund Tzeng Mon, 12 Aug 2019 21:40:48 -0700"},
{"body":"I have seen re-frame-10x indeed..and it is a fantastic tool. And maybe that \nis where the answer lies as @danielcompton said on another issue. \nHowever, I guess what I am trying to debug is how to tell definitively, \nwhich specific de-ref of my reaction triggered a particular subscription to \nbe rerun. \nIf this information is not currently something immediately available, I did \nhave other questions such as:\n\n   - Does re-frame cache the results of a subscription run ? if so, where \nis the documentation or even informal information about that ? \n   - can I identify which specific deref causes a rerun ?\n\nWhile I can see the effects of running subscriptions and events in 10x, I \nam trying to debug the specific areas in code that triggered their running\n\nDOes this help ? \n\n\n\nOn Monday, August 12, 2019 at 5:46:16 PM UTC-4, basket. wrote:\n>\n> Hi there, I am not sure I understand your scenario, but have you tried \n> https:\/\/github.com\/Day8\/re-frame-10x ?\n>\n> <https:\/\/about.me\/gilvictor?promo=email_sig&utm_source=product&utm_medium=email_sig&utm_campaign=gmail_api>\n>  \n> Victor Gil\n> about.me\/gilvictor \n> <https:\/\/about.me\/gilvictor?promo=email_sig&utm_source=product&utm_medium=email_sig&utm_campaign=gmail_api>\n>  \n>\n>\n> On Mon, Aug 12, 2019 at 3:12 PM Deuseks <jny...@gmail.com <javascript:>> \n> wrote:\n>\n>> Hi\n>> I am using re-frame with expo\/react native and my components are deeply \n>> nested .I create a pass into this nested structure a new atom I construct \n>> FROM the atom of a subscription. I pass that in since reactions cannot be \n>> edited and I want this structure to be edited. However, the nested \n>> structure contains a component that displays a modal. Whenever I open the \n>> modal and close the modal control, it forces a re-fetch of the subscription \n>> data.\n>>\n>>\n>> The questions:\n>>    \n>>    1. \n>>    \n>>    Why would the subscription be called again if I did not pass into the \n>>    nested structure the original reaction ?\n>>    2. \n>>    \n>>    Should I worry about this retrigger even if the data has not changed \n>>    ? I see it pulling the same stuff but maybe it is just passing back \n>> results \n>>    that are cached ? Are they cached ?\n>>    3. \n>>    \n>>    Is there a way in re-frame to definitively identify which deref of \n>>    the reaction\/atom causes the subscription to be re-run ?\n>>    \n>> thanks for any help on this.\n>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojur...@googlegroups.com <javascript:>.\n>> To view this discussion on the web visit \n>> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/5c3a1a6b-3cb6-4a0c-a0a8-4712d4ed60a6%40googlegroups.com\n>>  \n>> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/5c3a1a6b-3cb6-4a0c-a0a8-4712d4ed60a6%40googlegroups.com?utm_medium=email&utm_source=footer>\n>> .\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/67dcb6e5-dce0-4a67-92ec-d167f10d781e%40googlegroups.com.","subject":"Re: [ClojureScript] Subscriptions tracking in Re-frame Deuseks Mon, 12 Aug 2019 15:50:37 -0700"},
{"body":"Hi there, I am not sure I understand your scenario, but have you tried\nhttps:\/\/github.com\/Day8\/re-frame-10x ?\n<https:\/\/about.me\/gilvictor?promo=email_sig&utm_source=product&utm_medium=email_sig&utm_campaign=gmail_api>\nVictor Gil\nabout.me\/gilvictor\n<https:\/\/about.me\/gilvictor?promo=email_sig&utm_source=product&utm_medium=email_sig&utm_campaign=gmail_api> \n\nOn Mon, Aug 12, 2019 at 3:12 PM Deuseks <jny...@gmail.com> wrote:\n\n> Hi\n> I am using re-frame with expo\/react native and my components are deeply\n> nested .I create a pass into this nested structure a new atom I construct\n> FROM the atom of a subscription. I pass that in since reactions cannot be\n> edited and I want this structure to be edited. However, the nested\n> structure contains a component that displays a modal. Whenever I open the\n> modal and close the modal control, it forces a re-fetch of the subscription\n> data.\n>\n>\n> The questions:\n>\n>    1.\n>\n>    Why would the subscription be called again if I did not pass into the\n>    nested structure the original reaction ?\n>    2.\n>\n>    Should I worry about this retrigger even if the data has not changed ?\n>    I see it pulling the same stuff but maybe it is just passing back results\n>    that are cached ? Are they cached ?\n>    3.\n>\n>    Is there a way in re-frame to definitively identify which deref of the\n>    reaction\/atom causes the subscription to be re-run ?\n>\n> thanks for any help on this.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/5c3a1a6b-3cb6-4a0c-a0a8-4712d4ed60a6%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/5c3a1a6b-3cb6-4a0c-a0a8-4712d4ed60a6%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAH9Jna2AvU6WfJpdVjJN6AEpA%3D-33AxYkWv%2Bj%2BdUPeGpJQn1cw%40mail.gmail.com.","subject":"Re: [ClojureScript] Subscriptions tracking in Re-frame basket. Mon, 12 Aug 2019 14:46:56 -0700"},
{"body":"Hi\nI am using re-frame with expo\/react native and my components are deeply \nnested .I create a pass into this nested structure a new atom I construct \nFROM the atom of a subscription. I pass that in since reactions cannot be \nedited and I want this structure to be edited. However, the nested \nstructure contains a component that displays a modal. Whenever I open the \nmodal and close the modal control, it forces a re-fetch of the subscription \ndata. \n\nThe questions:\n   \n   1. \n   \n   Why would the subscription be called again if I did not pass into the \n   nested structure the original reaction ?\n   2. \n   \n   Should I worry about this retrigger even if the data has not changed ? I \n   see it pulling the same stuff but maybe it is just passing back results \n   that are cached ? Are they cached ?\n   3. \n   \n   Is there a way in re-frame to definitively identify which deref of the \n   reaction\/atom causes the subscription to be re-run ?\n   \nthanks for any help on this.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/5c3a1a6b-3cb6-4a0c-a0a8-4712d4ed60a6%40googlegroups.com.","subject":"[ClojureScript] Subscriptions tracking in Re-frame Deuseks Mon, 12 Aug 2019 11:12:38 -0700"},
{"body":"Hi folks\n\nI'm happy to announce that this quarter Clojurists Together is funding\nShadow CLJS with Thomas Heller, Meander with Joel Holdbrooks, Calva with\nPeter Str\u00f6mberg, and CIDER with Bozhidar Batsov. You can see more on the\nannouncement at\nhttps:\/\/www.clojuriststogether.org\/news\/q3-2019-funding-announcement\/.\nThanks to all of the Clojurists Together members who helped make this\nhappen. \n-- Daniel.\n\nOn Fri, Jul 12, 2019 at 9:23 AM Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> Hi folks\n>\n> Clojurists Together <https:\/\/www.clojuriststogether.org> is about to\n> award another round of funding to support open source Clojure projects. \n> *Applications\n> <https:\/\/www.clojuriststogether.org\/open-source\/> close on Wednesday, July\n> 17th, 2019 at 11:59pm PST.*\n>\n> Clojurists Together is an organisation, dedicated to funding and\n> supporting open source software, infrastructure, and documentation that is\n> important to the Clojure and ClojureScript community.\n>\n> *We plan to fund each project at $3,000 USD\/month for 3 months ($9,000 USD\n> total).* We're still working out exactly how many projects we will be\n> able to fund this quarter, but it is likely to be at least 2.\n>\n> Previously we have supported projects\n> <https:\/\/www.clojuriststogether.org\/projects\/> like Neanderthal, Aleph,\n> Fireplace, cljdoc, Shadow CLJS, CIDER, Figwheel, clj-http and several more.\n>\n> We surveyed\n> <https:\/\/www.clojuriststogether.org\/news\/news\/q3-2019-survey-results\/>\n> our members recently and asked them what they wanted us to focus on.\n>\n> Highly ranked items were:\n>\n>    - developer experience tools (49%)\n>    - build tooling (37%)\n>    - linters (34%)\n>    - error messages (33%)\n>    - IDE support (30%)\n>    - documentation (19%)\n>    - test tooling (24%)\n>\n> Our members also mentioned these projects specifically: shadow-cljs, Duct\n> Framework, Core.typed, CIDER, Clojuredocs, clj-doc, Eastwood, Cloverage,\n> buddy, clj-kondo, Reagent, re-frame, FIgwheel Main, Cursive, Leiningen,\n> Calva, Chlorine, Sente, Nippy, Rum, core.async, incanter, clj-pdf.\n>\n> We encourage open source maintainers to apply\n> <https:\/\/www.clojuriststogether.org\/open-source\/> for funding, especially\n> if you work on one of the projects or areas that our members highlighted.\n>\n> If you work at a company that uses Clojure, talk to your engineering\n> manager about supporting Clojurists Together. We've been able to support\n> projects thanks to the generosity of our developer and company members\n> <https:\/\/www.clojuriststogether.org\/members\/>. The more support we have,\n> the more that we can do to improve things for the entire Clojure community.\n>\n> Thanks, Daniel.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAK2UX_h-Siinj3EexsJgKY-Ktjy%3D3QFWxNzedhWK7BMP80%2B6kg%40mail.gmail.com.","subject":"[ClojureScript] Re: Clojurists Together wants to fund you to work on your open source Clojure project Daniel Compton Wed, 07 Aug 2019 15:21:40 -0700"},
{"body":"Updated, thanks.\n\nAlex \nOn Thursday, July 25, 2019 at 3:28:23 AM UTC-5, Sigmund Tzeng wrote:\n>\n> Hello there,\n>\n> Currently the r1.10.516 is linked to which gave me InvalidPathException \n> when compiled with --optimizations advanced on my Win10 laptop.\n>\n> Solved with r1.10.520\n>\n> Hope this helps.\n>\n> Best regards,\n>\n> Sigmund Tzeng\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/d6aaf7d3-9c70-4087-9eed-b3658a6205e0%40googlegroups.com.","subject":"[ClojureScript] Re: cljs.jar not pointing to the most updated version on https:\/\/clojurescript.org\/guides\/quick-start Alex Miller Thu, 25 Jul 2019 11:44:51 -0700"},
{"body":"Hello there,\n\nCurrently the r1.10.516 is linked to which gave me InvalidPathException \nwhen compiled with --optimizations advanced on my Win10 laptop. \nSolved with r1.10.520\n\nHope this helps.\n\nBest regards,\n\nSigmund Tzeng\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/e70a991a-28c7-4b5c-bc29-71376ad4dc2d%40googlegroups.com.","subject":"[ClojureScript] cljs.jar not pointing to the most updated version on https:\/\/clojurescript.org\/guides\/quick-start Sigmund Tzeng Thu, 25 Jul 2019 01:28:56 -0700"},
{"body":"Hi folks\n\nClojurists Together <https:\/\/www.clojuriststogether.org> is about to award\nanother round of funding to support open source Clojure projects. *Applications\n<https:\/\/www.clojuriststogether.org\/open-source\/> close on Wednesday, July\n17th, 2019 at 11:59pm PST.* \nClojurists Together is an organisation, dedicated to funding and supporting\nopen source software, infrastructure, and documentation that is important\nto the Clojure and ClojureScript community.\n\n*We plan to fund each project at $3,000 USD\/month for 3 months ($9,000 USD\ntotal).* We're still working out exactly how many projects we will be able\nto fund this quarter, but it is likely to be at least 2.\n\nPreviously we have supported projects\n<https:\/\/www.clojuriststogether.org\/projects\/> like Neanderthal, Aleph,\nFireplace, cljdoc, Shadow CLJS, CIDER, Figwheel, clj-http and several more.\n\nWe surveyed\n<https:\/\/www.clojuriststogether.org\/news\/news\/q3-2019-survey-results\/> our\nmembers recently and asked them what they wanted us to focus on.\n\nHighly ranked items were:\n\n   - developer experience tools (49%)\n   - build tooling (37%)\n   - linters (34%)\n   - error messages (33%)\n   - IDE support (30%)\n   - documentation (19%)\n   - test tooling (24%)\n\nOur members also mentioned these projects specifically: shadow-cljs, Duct\nFramework, Core.typed, CIDER, Clojuredocs, clj-doc, Eastwood, Cloverage,\nbuddy, clj-kondo, Reagent, re-frame, FIgwheel Main, Cursive, Leiningen,\nCalva, Chlorine, Sente, Nippy, Rum, core.async, incanter, clj-pdf.\n\nWe encourage open source maintainers to apply\n<https:\/\/www.clojuriststogether.org\/open-source\/> for funding, especially\nif you work on one of the projects or areas that our members highlighted.\n\nIf you work at a company that uses Clojure, talk to your engineering\nmanager about supporting Clojurists Together. We've been able to support\nprojects thanks to the generosity of our developer and company members\n<https:\/\/www.clojuriststogether.org\/members\/>. The more support we have,\nthe more that we can do to improve things for the entire Clojure community.\n\nThanks, Daniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAK2UX_j5yApwOK3XDZy%2BXy6Dni7kX_XbLcZx7nuPujNVW6yiCw%40mail.gmail.com.","subject":"[ClojureScript] Clojurists Together wants to fund you to work on your open source Clojure project Daniel Compton Thu, 11 Jul 2019 14:24:02 -0700"},
{"body":"Very cool, thanks!\n\nOn Saturday, June 15, 2019 at 8:31:52 AM UTC-7, Mike Fikes wrote:\n>\n> https:\/\/github.com\/mfikes\/cljs-bean\n>\n> Like clojure.core\/bean, but for ClojureScript.\n>\n>\n> (require '[cljs-bean.core :refer [bean]])\n>\n> (bean #js {:a 1, :b 2})\n> ;; => {:a 1, :b 2}\n>\n>\n> This lets you interoperate with JavaScript objects in an idiomatic fashion, \n> while being an order of \n> magnitude faster than equivalent constructs using js->clj:\n>\n>\n> (let [{:keys [a b]} (bean #js {:a 1, :b 2})]\n>   (+ a b))\n>\n>\n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/5cf9eb19-0346-4914-9d41-5d381c7c281c%40googlegroups.com.","subject":"[ClojureScript] Re: [ANN] CLJS Bean: Clojure's bean function for ClojureScript Rangel Spasov Wed, 26 Jun 2019 20:49:05 -0700"},
{"body":"https:\/\/github.com\/mfikes\/cljs-bean \nLike clojure.core\/bean, but for ClojureScript.\n\n\n(require '[cljs-bean.core :refer [bean]])\n\n(bean #js {:a 1, :b 2})\n;; => {:a 1, :b 2}\n\n\nThis lets you interoperate with JavaScript objects in an idiomatic fashion, \nwhile being an order of \nmagnitude faster than equivalent constructs using js->clj:\n\n\n(let [{:keys [a b]} (bean #js {:a 1, :b 2})]\n  (+ a b))\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/9125f5a8-71cd-4480-bd97-c66442222d2b%40googlegroups.com.","subject":"[ClojureScript] [ANN] CLJS Bean: Clojure's bean function for ClojureScript Mike Fikes Sat, 15 Jun 2019 08:31:59 -0700"},
{"body":"Sounds great.  I have often thought that something like this would be cool.\nAlan \nOn Tue, May 21, 2019 at 5:24 AM Henry Widd <henryw...@gmail.com> wrote:\n\n> Hey everyone,\n>\n>\n> Java.time is a platform library which was introduced in Java 8 and is a\n> refinement of Joda Time (which the popular clj-time sits on).  Now that\n> there is also a Javascript implementation of java.time, it has been\n> possible to create the following libraries:\n>\n>\n> cljc.java-time <https:\/\/github.com\/henryw374\/cljc.java-time>  - this\n> mirrors the java.time api directly (it was auto-generated via reflection on\n> java.time) but code written with it will compile to Clojure and\n> ClojureScript.\n>\n> time-literals <https:\/\/github.com\/henryw374\/time-literals>  - also a\n> Clojure(Script) library, this provides a set of tagged literals for objects\n> from the java.time domain and the relevant readers\/printers for these. For\n> it's most basic application and if you are only using java.time directly on\n> the jvm, this library will be interesting because java.time objects output\n> in the REPL can be pasted back in.\n>\n>\n> My talk at Clojure\/North <https:\/\/www.youtube.com\/watch?v=UFuL-ZDoB2U>\n> provides more background on these and other java.time related libraries.\n>\n>\n> Thanks,\n>\n> Henry\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n> To view this discussion on the web visit\n> https:\/\/groups.google.com\/d\/msgid\/clojurescript\/fc62c82d-c45c-4f06-8cdf-b50caaede6f5%40googlegroups.com\n> <https:\/\/groups.google.com\/d\/msgid\/clojurescript\/fc62c82d-c45c-4f06-8cdf-b50caaede6f5%40googlegroups.com?utm_medium=email&utm_source=footer>\n> .\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/CAN67zA0gYK1AwbiTZxj62YhCZe4eoWs1UNLBjO3X4ORXzKdk1g%40mail.gmail.com.","subject":"Re: [ClojureScript] [ANN] new Clojure(Script) Date\/Time libraries based on java.time Alan Thompson Tue, 21 May 2019 06:08:33 -0700"},
{"body":"Hey everyone, \n\nJava.time is a platform library which was introduced in Java 8 and is a \nrefinement of Joda Time (which the popular clj-time sits on).  Now that \nthere is also a Javascript implementation of java.time, it has been \npossible to create the following libraries: \n\n\ncljc.java-time <https:\/\/github.com\/henryw374\/cljc.java-time>  - this \nmirrors the java.time api directly (it was auto-generated via reflection on \njava.time) but code written with it will compile to Clojure and \nClojureScript.  \n\ntime-literals <https:\/\/github.com\/henryw374\/time-literals>  - also a \nClojure(Script) library, this provides a set of tagged literals for objects \nfrom the java.time domain and the relevant readers\/printers for these. For \nit's most basic application and if you are only using java.time directly on \nthe jvm, this library will be interesting because java.time objects output \nin the REPL can be pasted back in. \n\n\nMy talk at Clojure\/North <https:\/\/www.youtube.com\/watch?v=UFuL-ZDoB2U>  \nprovides more background on these and other java.time related libraries.\n\n\nThanks,\n\nHenry\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/fc62c82d-c45c-4f06-8cdf-b50caaede6f5%40googlegroups.com.","subject":"[ClojureScript] [ANN] new Clojure(Script) Date\/Time libraries based on java.time Henry Widd Tue, 21 May 2019 05:24:16 -0700"},
{"body":"Am 09.05.2019 um 10:24 schrieb Phill Wolf \n<phill.w...@gmail.com<mailto:phill.w...@gmail.com>>: \nAre you finding that reagent-forms is helpful overall?\nUntil now I found it quite useful. But now I get doubts about it.\n\n\"the form-template given to the bind-fields call is evaluated once\" sounds like \na problem.\n\n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n---\nYou received this message because you are subscribed to a topic in the Google \nGroups \"ClojureScript\" group.\nTo unsubscribe from this topic, visit \nhttps:\/\/groups.google.com\/d\/topic\/clojurescript\/_3Uy5UgjKh4\/unsubscribe.\nTo unsubscribe from this group and all its topics, send an email to \nclojurescript+unsubscr...@googlegroups.com<mailto:clojurescript+unsubscr...@googlegroups.com>.\nTo post to this group, send email to \nclojurescript@googlegroups.com<mailto:clojurescript@googlegroups.com>.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/e80d920e-0063-4441-a404-7e6f2de31b62%40googlegroups.com<https:\/\/groups.google.com\/d\/msgid\/clojurescript\/e80d920e-0063-4441-a404-7e6f2de31b62%40googlegroups.com?utm_medium=email&utm_source=footer>.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/3B82EFAD-9003-4F41-A568-978B6625E469%40nordakademie.de.","subject":"Re: [ClojureScript] how to build dynamic select boxes using reagent-forms Johannes Brauer Thu, 09 May 2019 03:41:06 -0700"},
{"body":"Are you finding that reagent-forms is helpful overall?  \"the form-template \ngiven to the bind-fields call is evaluated once\" sounds like a problem. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/e80d920e-0063-4441-a404-7e6f2de31b62%40googlegroups.com.","subject":"[ClojureScript] Re: how to build dynamic select boxes using reagent-forms Phill Wolf Thu, 09 May 2019 01:29:11 -0700"},
{"body":"Hi,\n\nI'm building my UI using reagent\/reagent-forms. I cannot figure out how \nbuild a dynamic select box as described in \nhttps:\/\/www.dyn-web.com\/tutorials\/forms\/select\/paired.php\nfor example.\nThe problem of reagent-forms seems to be that the form-template given to \nthe bind-fields call is evaluated once. Therefore the options of the second \nselect box are unaffected by any state changes resulting from using the \nfirst select box.\nMy problem is that I don't understand Javascript well, so I cannot follow \nthe solution given on the linked web page. \nAre there any ideas what I could do?\n\nJohannes\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\nTo view this discussion on the web visit \nhttps:\/\/groups.google.com\/d\/msgid\/clojurescript\/5f46af3c-7e45-462a-95a1-4f72f04bdd95%40googlegroups.com.","subject":"[ClojureScript] how to build dynamic select boxes using reagent-forms Johannes Wed, 08 May 2019 11:17:31 -0700"},
{"body":"\"Write a function that does not return until some channel event occurs.\"\nIs this \u0430 pure function or it has side effects (network call, etc) ? If \nit's a pure function you can look into core.async transducers. \nYou can achieve the effect of not returning immediately by putting your \nlogic inside of a (go ...) block. Inside (go ...) <! and >! give the \nillusion of threads by \"parking\" and not returning immediately (of course \nno real threads involved). \nI still believe that with the approach that I outlined before you can \nachieve a good effect but maybe I'm misunderstanding. Maybe some more \nactual code with examples can clarify.\n\n\nOn Saturday, May 4, 2019 at 1:24:51 AM UTC-7, Tom Locke wrote:\n>\n> I don't think this addresses the issue.\n>\n> I'll try to state the problem more simply:\n>\n>     Write a function that does not return until some channel event occurs.\n>\n> (The difficulty being that go, put! and take! all return immediately)\n>\n> I would argue the ability to do so is:\n>\n>     - fundamentally important for interfacing with JS libraries\n>     - not possible with the existing core.async API\n>     - not difficult to implement, but needs to coordinate with the \n> scheduler\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Bridging core.async \/ callbacks Rangel Spasov Sun, 05 May 2019 01:54:08 -0700"},
{"body":"I faced the same problem.\nIt used to work but it didn't work suddenly. \n\nIt worked with your workaround. \nI found a strange workaround :\n>\n> clj --main cljs.main --verbose --repl-opts \"{:launch-browser false}\" \n> --compile hello-world.core --repl\n>\n> Then open a brower manually.\n>\n>\n> On Sunday, November 11, 2018 at 8:48:13 AM UTC+1, Demeter Purjon wrote:\n>>\n>> Hello !\n>>\n>> I strictly followed the tutorial here : \n>> https:\/\/clojurescript.org\/guides\/quick-start\n>>\n>> Clojurescript is perfectly compiling the hello-world.core namespace. \n>> Browser shows up, on terminal I can read \"Hello World\". \n>>\n>> > clj --main cljs.main --verbose --compile hello-world.core --repl\n>>\n>> Options passed to ClojureScript compiler: {:output-dir \"out\", \n>> :closure-warnings {:check-types :off, :check-variables :off}, \n>> :closure-defines {}, :ups-libs nil, :cache-analysis true, \n>> :closure-module-roots [], :optimizations :none, :ups-foreign-libs [], \n>> :verbose true, :aot-cache true, :preloads [process.env \n>> clojure.browser.repl.preload], :ignore-js-module-exts [\".css\"], :output-to \n>> \"out\/main.js\", :preamble [\"cljs\/imul.js\"], :browser-repl true, :ups-externs \n>> nil, :opts-cache \"cljsc_opts.edn\", :source-map true, :cache-analysis-format \n>> :transit, :main hello-world.core, :emit-constants nil, :npm-deps false}\n>> REPL env options: {:output-dir \"out\"}\n>> Reading analysis cache for \n>> jar:file:\/home\/stup3fait\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.439\/clojurescript-1.10.439.jar!\/cljs\/core.cljs\n>> Hello world\n>>\n>> *But I never get the repl prompt. *\n>>\n>> No errors in chrome dev console, nor in terminal. Something seems to \n>> \"block\".\n>>\n>> I tried several version of clojurescript, same problem.\n>>\n>> From the browser perspective, when I hit F5, there are 4 XHR requests \n>> sent to localhost:9000 :\n>>\n>> Request 1 : response = \n>> {\"repl\":\"Thread-263\",\"form\":\"cljs.core._STAR_print_fn_STAR_ = \n>> clojure.browser.repl.repl_print;\\ncljs.core._STAR_print_err_fn_STAR_ = \n>> clojure.browser.repl.repl_print;\\ncljs.core._STAR_print_newline_STAR_ = \n>> true;\\nif((cljs.core.count.call(null,clojure.browser.repl.print_queue) > \n>> (0))){\\nclojure.browser.repl.flush_print_queue_BANG_(cljs.core.deref.call(null,clojure.browser.repl.xpc_connection));\\n}\n>>  \n>> else {\\n}\\n\"}\n>> Request 2 : response =  ignore__\n>> Request 3 : response = ignore__\n>> Request 4 : interstingly, this request do not responds. It's in PENDING \n>> state.\n>>\n>> Those 4 requests are about robots.txt (!?), like : \n>> http:\/\/localhost:9000\/repl?xpc=%7B%22cn%22%3A%22mpJZAw6akG%22%2C%22tp%22%3Anull%2C%22osh%22%3Anull%2C%22ppu%22%3A%22http%3A%2F%2Flocalhost%3A9000%2Frobots.txt%22%2C%22lpu%22%3A%22http%3A%2F%2Flocalhost%3A9000%2Frobots.txt%22%7D\n>>\n>> I tried both firefox and chrome with same behaviour.\n>>\n>> This hanging request may not be the reason why my repl never shows up. I \n>> don't really understand how the repl and the browser are wired together.\n>> I was expecting some kind of websocket connection for communication \n>> between browser and repl but none is opened.\n>>\n>> If I launch a node repl (--repl-env node), I got a repl prompt and can \n>> play with my app.\n>>\n>> When I quit the browser, I have a \"Broken pipe\" java exception in \n>> terminal, so terminal is somehow connected with browser.\n>>\n>> Did you solve this problem in the past ?\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: I did the Clojurescript quickstart, repl prompt never shows up tokoma Sat, 04 May 2019 20:08:40 -0700"},
{"body":"I don't think this addresses the issue.\n\nI'll try to state the problem more simply: \n    Write a function that does not return until some channel event occurs.\n\n(The difficulty being that go, put! and take! all return immediately)\n\nI would argue the ability to do so is:\n\n    - fundamentally important for interfacing with JS libraries\n    - not possible with the existing core.async API\n    - not difficult to implement, but needs to coordinate with the scheduler\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Bridging core.async \/ callbacks Tom Locke Sat, 04 May 2019 01:25:53 -0700"},
{"body":"Found it.  Someone had left an old reference to `figwheel\/watch-and-reload`\nlying around.... Doh! \n (figwheel\/watch-and-reload ; #todo #awt needed?\n  :websocket-url \"ws:\/\/localhost:3449\/figwheel-ws\"\n  :on-jsload mount-components)\n\n\nOn Fri, May 3, 2019 at 4:00 PM Alan Thompson <clooj...@gmail.com> wrote:\n\n> Also getting this error:\n>\n> repl.cljc:372 REPL eval error RangeError: Maximum call stack size exceeded\n>     at cljs$core$_EQ_ (core.cljs:1258)\n>     at Object.figwheel$repl$figwheel_require (repl.cljc:90)\n>     at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n>     at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n>     at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n>     at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n>     at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n>     at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n>     at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n>     at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n> figwheel$repl$eval_javascript_STAR__STAR_ @ repl.cljc:372\n> (anonymous) @ repl.cljc:384\n> G__12572__2 @ core.cljs:10857\n> G__12572 @ core.cljs:10843\n> (anonymous) @ repl.cljc:474\n> goog.events.EventTarget.fireListeners @ eventtarget.js:284\n> goog.events.EventTarget.dispatchEventInternal_ @ eventtarget.js:381\n> goog.events.EventTarget.dispatchEvent @ eventtarget.js:196\n> goog.net.WebSocket.onMessage_ @ websocket.js:426\n>\n>\n>\n>\n>\n> On Fri, May 3, 2019 at 3:49 PM Alan Thompson <clooj...@gmail.com> wrote:\n>\n>> Using figwheel-main, I am getting a strange error:\n>>\n>> Figwheel: trying to open cljs reload socket\n>> socket.cljs:71\n>> WebSocket connection to 'ws:\/\/localhost:3449\/figwheel-ws' failed:\n>> Error in connection establishment: net::ERR_CONNECTION_REFUSED\n>>\n>>\n>> As the error message implies, hot reloading doesn't work w\/o the socket.\n>> Any clues on what could be causing this?\n>>\n>> Alan\n>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Figwheel.Main error trying to open cljs reload socket Alan Thompson Fri, 03 May 2019 17:12:05 -0700"},
{"body":"Here's one idea, basically put \"channel on a channel\" idea:\n \n(defonce main-c (chan 1))\n\n\n(defn start-main-channel-loop []\n  ;put channels on the channel in the order that they need to execute\n  (go\n    (loop []\n      (let [c (<! main-c)                                   ;wait for channel \nfrom the main channel\n            x (<! c)]                                       ;wait for 'x' from \nchannel 'c'\n        ;do stuff with x, it can dispatch based on the data that is 'x'\n        (println \"x ::: \" x)\n        (recur)))))\n\n(comment\n  (let [i-run-before-callback-c (chan 1)                   \n        callback-c (chan 1)]\n       ;\"schedule\" things to run in desired order\n       (put! main-c i-run-before-callback-c)\n       (put! main-c callback-c)\n\n       ;run in go to ensure order of events\n       (go\n         ;>! this first\n         (>! callback-c [:second {}])\n         ;wait 3 seconds for demo purposes\n         (<! (timeout 3000))\n         ;>! this second\n         (>! i-run-before-callback-c [:first {}]))))\n\n\nAfter about 3 seconds you should see this printed:\n\n*x :::  [:first {}]*\n*x :::  [:second {}]*\n\n... i.e. even though we scheduled *[:second {}]* before *[:first {}]*, they \nappear in the desired order at the end.\n\n\n\nOn Friday, May 3, 2019 at 1:47:10 AM UTC-7, Tom Locke wrote:\n>\n> In the early core.async presentation, Rich argues that we should avoid \n> putting application logic in callback handlers, and instead build the \n> \"machine like\" parts of our code in the core.async model. To bridge from \n> callback world to core.async we have put! and take! which we should call as \n> soon as possible.\n>\n> But what do we do if the library we are interfacing with relies on some \n> effect having happened *before* the callback returns, but our application \n> architecture dictates that effect should come from some other process? (go) \n> (put!) and (take!) all return immediately.\n>\n> According to my (hopefully incorrect!) understanding, it's not possible.\n>\n> It seems to me we need something like (<!!), which is not available in \n> cljs due to the lack of real threads.\n>\n> However, could we not have an implementation of (<!!) that goes something \n> like this?:\n>\n> (defn <!! [c] \n>   (loop\n>    (or (poll! c)\n>        (if (any-process-ready?)\n>          (do \n>            (schedule-next-process!)\n>            (recur))\n>          (throw \"deadlock!\")))))\n>\n> This is making some uninformed assumptions about the scheduler, but \n> presumably there must be:\n>\n>   - Some kind of list of ready (not blocked on channel operations) \n> processes\n>   - The ability to run a ready process until the next scheduling point (or \n> until it runs out of processes).\n>\n> However I believe the scheduler is to be considered private\/opaque, so a \n> proper \"userland\" implementation would not be possible.\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Bridging core.async \/ callbacks Rangel Spasov Fri, 03 May 2019 16:47:04 -0700"},
{"body":"Also getting this error:\n\nrepl.cljc:372 REPL eval error RangeError: Maximum call stack size exceeded\n    at cljs$core$_EQ_ (core.cljs:1258)\n    at Object.figwheel$repl$figwheel_require (repl.cljc:90)\n    at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n    at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n    at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n    at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n    at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n    at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n    at Object.figwheel$repl$figwheel_require (repl.cljc:94)\n    at Object.figwheel$repl$figwheel_require (repl.cljc:94)\nfigwheel$repl$eval_javascript_STAR__STAR_ @ repl.cljc:372\n(anonymous) @ repl.cljc:384\nG__12572__2 @ core.cljs:10857\nG__12572 @ core.cljs:10843\n(anonymous) @ repl.cljc:474\ngoog.events.EventTarget.fireListeners @ eventtarget.js:284\ngoog.events.EventTarget.dispatchEventInternal_ @ eventtarget.js:381\ngoog.events.EventTarget.dispatchEvent @ eventtarget.js:196\ngoog.net.WebSocket.onMessage_ @ websocket.js:426 \n\n\n\n\nOn Fri, May 3, 2019 at 3:49 PM Alan Thompson <clooj...@gmail.com> wrote:\n\n> Using figwheel-main, I am getting a strange error:\n>\n> Figwheel: trying to open cljs reload socket\n> socket.cljs:71\n> WebSocket connection to 'ws:\/\/localhost:3449\/figwheel-ws' failed:\n> Error in connection establishment: net::ERR_CONNECTION_REFUSED\n>\n>\n> As the error message implies, hot reloading doesn't work w\/o the socket.\n> Any clues on what could be causing this?\n>\n> Alan\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Figwheel.Main error trying to open cljs reload socket Alan Thompson Fri, 03 May 2019 16:00:52 -0700"},
{"body":"Using figwheel-main, I am getting a strange error:\n\nFigwheel: trying to open cljs reload socket\nsocket.cljs:71\nWebSocket connection to 'ws:\/\/localhost:3449\/figwheel-ws' failed:\nError in connection establishment: net::ERR_CONNECTION_REFUSED \n\nAs the error message implies, hot reloading doesn't work w\/o the socket.\nAny clues on what could be causing this?\n\nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Figwheel.Main error trying to open cljs reload socket Alan Thompson Fri, 03 May 2019 15:49:19 -0700"},
{"body":"In the early core.async presentation, Rich argues that we should avoid \nputting application logic in callback handlers, and instead build the \n\"machine like\" parts of our code in the core.async model. To bridge from \ncallback world to core.async we have put! and take! which we should call as \nsoon as possible. \nBut what do we do if the library we are interfacing with relies on some \neffect having happened *before* the callback returns, but our application \narchitecture dictates that effect should come from some other process? (go) \n(put!) and (take!) all return immediately.\n\nAccording to my (hopefully incorrect!) understanding, it's not possible.\n\nIt seems to me we need something like (<!!), which is not available in cljs \ndue to the lack of real threads.\n\nHowever, could we not have an implementation of (<!!) that goes something \nlike this?:\n\n(defn <!! [c] \n  (loop\n   (or (poll! c)\n       (if (any-process-ready?)\n         (do \n           (schedule-next-process!)\n           (recur))\n         (throw \"deadlock!\")))))\n\nThis is making some uninformed assumptions about the scheduler, but \npresumably there must be:\n\n  - Some kind of list of ready (not blocked on channel operations) processes\n  - The ability to run a ready process until the next scheduling point (or \nuntil it runs out of processes).\n\nHowever I believe the scheduler is to be considered private\/opaque, so a \nproper \"userland\" implementation would not be possible.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Bridging core.async \/ callbacks Tom Locke Fri, 03 May 2019 01:56:18 -0700"},
{"body":"Hi folks\n\nClojurists Together is an organisation dedicated to funding critical open\nsource Clojure projects. We fund projects on a 3-month cycle. In the past\nwe have funded projects like Figwheel, Shadow CLJS, Kaocha, Datascript,\ncljdoc, and lots more <https:\/\/www.clojuriststogether.org\/projects\/>. Thanks\nto the growth in Clojurists Together members, we've been able to up our\npayment from $5,400 over three months ($1,800\/mo) in 2018 to $9,000 over\nthree months ($3,000\/mo). A very special thanks to all of our members\n<https:\/\/clojuriststogether.org\/members\/>, we couldn't do any of this\nwithout your support. \nWe're gearing up for our next cycle and are soliciting proposals from the\nClojure\/ClojureScript community. We recently surveyed\n<https:\/\/www.clojuriststogether.org\/news\/q2-2019-survey-results\/> our\nmembers to see what they wanted us to fund. Developer experience tools,\nbuild tooling, documentation, error messages, IDE support, test tooling,\nand linters all featured highly. *If you maintain a Clojure project that is\nimportant to some or all of the Clojure community, especially in one of\nthese areas please apply <https:\/\/clojuriststogether.org\/open-source\/> for\nfunding. Applications close 15th Apr, midnight PST (end of day).*\n\n*If you run or manage a company that relies on the Clojure open source\necosystem, we'd encourage you to consider joining as a company member\n<https:\/\/clojuriststogether.org\/news\/>. *We've had a great response from\nindividual developers, but we have many fewer company members.\n\nLet us know if you have any questions\/concerns, either here or at\nh...@clojuriststogether.org. We're also happy to review your application\nbefore you submit it to check if everything is clear and it answers the\nquestions we will have.\n\nThanks, Daniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Clojurists Together Q2 2019 funding round - $9,000 over three months to work on your Clojure project Daniel Compton Wed, 10 Apr 2019 12:12:08 -0700"},
{"body":"Happy to announce Quil 3.0.0 release.\n\nQuil is a Clojure\/ClojureScript library for creating interactive drawings\nand animations. \nThe release available on clojars: https:\/\/clojars.org\/quil.\n\nThe biggest change is migration fron Processing.js\n<http:\/\/processingjs.org\/> to p5js <https:\/\/p5js.org\/> as backend for\nClojureScript Quil version. Processing.js has been in maintenance mode for\n a while and p5js is the new, actively developed replacement. By using p5js\nwe can keep up with all latest developments and bug fixes.\n\nFor Quil users API mostly stayed the same. Important changes:\n\n   -\n\n   Sketches have to be created using <div> instead <canvas>.\n   -\n\n   A number of API functions were removed and a few added. Check spreadsheet\n   \n<https:\/\/docs.google.com\/spreadsheets\/d\/1LlXS5DuMgSZpV5LSwvmYzSr5Tpm8UUxwfsuSAsDSamE\/edit#gid=0>\n   for full information.\n\nHuge thanks to Anthony Galea <https:\/\/github.com\/anthonygalea>. He did all\nthe hard work, painstakingly verifying each function, and made this release\nhappen!\n\nList of all changes went to this release:\n\n   -\n\n   Switched from ProcessingJS to p5js as backend for ClojureScript version.\n   By @anthonygalea <http:\/\/github.com\/anthonygalea>. A lot of changes in\n   cljs API, see spreadsheet\n   \n<https:\/\/docs.google.com\/spreadsheets\/d\/1LlXS5DuMgSZpV5LSwvmYzSr5Tpm8UUxwfsuSAsDSamE\/edit?usp=sharing>\n   .\n   -\n\n   ClojureScript sketches have to be created using <div> instead of <canvas>\n   due to p5js migration.\n   -\n\n   Removed :global-key-events feature as it's global by default now.\n   -\n\n   Fix space-as-keyword functionality. Issue #232\n   <https:\/\/github.com\/quil\/quil\/issues\/262> by @tkocmathla\n   <https:\/\/github.com\/tkocmathla>.\n   -\n\n   Documentation improvements from @shrynx <https:\/\/github.com\/shrynx> and\n   @dominicfreeston <https:\/\/github.com\/dominicfreeston>.\n   -\n\n   Improved type hints to avoid reflection. Pull request #288\n   <https:\/\/github.com\/quil\/quil\/pull\/288> by @heyarne\n   <https:\/\/github.com\/heyarne>.\n\nDocumentation on http:\/\/quil.info has been updated as well.\n\nHappy hacking!\n\nMikita\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Quil 3.0.0 Release Mikita Belahlazau Mon, 01 Apr 2019 09:52:47 -0700"},
{"body":"Hi folks\n\nre-frame-10x 0.4.0 <https:\/\/github.com\/Day8\/re-frame-10x\/releases\/tag\/0.4.0>\nis out now. \nre-frame-10x is a debugging tool for re-frame applications. It lets you\ninspect the inner workings of your application, pull out data from your\napp-db, trace code execution, and travel through (your application's) time.\n\nThere are a few new features here (subscription searching, subscription\npinning thanks to Shen Tian), along with some internal changes which will\nmake maintenance and updates easier.\n\nOf particular note is that React 15 and Reagent 0.7.0 are no longer\nsupported. The last version of 10x that supports them is 0.3.7.\n\nThere is also a new example project which should make it easier for people\nto contribute to 10x as it is already set up for development.\n\nHopefully there are no issues, but if there are, please report them on\nGitHub.\n\nThanks, Daniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] re-frame-10x 0.4.0 Daniel Compton Sat, 30 Mar 2019 01:47:45 -0700"},
{"body":"Thanks!  I'll take a look.\n\nOn Tue, Mar 19, 2019 at 10:18 PM Alan Thompson <clooj...@gmail.com> wrote: \n> Looks like the URL got garbled.  Plain text:\n>\n> https:\/\/github.com\/cloojure\/cljs-template.git\n>\n>\n> On Tue, Mar 19, 2019 at 8:16 PM Alan Thompson <clooj...@gmail.com> wrote:\n>\n>> Hi - Here is a template project that I've developed to showcase CLJS\n>> testing and JS interop & testing.  Just clone this repo:\n>>\n>> https:\/\/github.com\/cloojure\/cljs-template.git\n>>\n>>\n>>\n>> and follow the README to set up cljs tests (`lein test` for CLJ will work\n>> out of the box).\n>>\n>> It is based on the original figwheel (plans to upgrade to figwheel-main\n>> are in the works).\n>>\n>> Alan\n>>\n>>\n>> On Tue, Mar 19, 2019 at 8:23 AM Paul Whittington <pwhit...@gmail.com>\n>> wrote:\n>>\n>>> I'm trying to follow the instructions here\n>>> https:\/\/figwheel.org\/docs\/testing.html#running-tests-in-a-headless-environment,\n>>> but the command line test execution never terminates.\n>>>\n>>> I've executed the following procedure:\n>>>\n>>> *Development environment*\n>>>\n>>>    - LinuxMint 19.1\n>>>    - BASH\n>>>    - openjdk version \"11.0.1\" 2018-10-16\n>>>    - OpenJDK Runtime Environment (build\n>>>    11.0.1+13-Ubuntu-3ubuntu118.04ppa1)\n>>>    - OpenJDK 64-Bit Server VM (build\n>>>    11.0.1+13-Ubuntu-3ubuntu118.04ppa1, mixed mode, sharing)\n>>>    - Clojure 1.9.0\n>>>    - ClojureScript 1.10.339\n>>>    - figwheel-main 0.1.9\n>>>\n>>> *Development Process*\n>>> *Create a figwheel-main project by executing this command:*\n>>> => clj -Sdeps '{:deps {seancorfield\/clj-new {:mvn\/version \"0.5.5\"}}}'\n>>> -m clj-new.create\n>>> figwheel-main\n>>> fsclj.core\n>>>\n>>> *Enter the fsclj.core directory*\n>>> => cd fsclj.core\n>>>\n>>> *Execute the unit tests from the command line:*\n>>> => clj -A:fig:test\n>>>\n>>> [Figwheel] Validating figwheel-main.edn\n>>> [Figwheel] figwheel-main.edn is valid (\u30c4)\/\n>>> [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\"\n>>> [Figwheel] Successfully compiled build test to\n>>> \"target\/public\/cljs-out\/test-main.js\" in 1.147 seconds.\n>>> 2019-03-15 11:13:56.627:INFO::main: Logging initialized @10504ms\n>>> Opening URL http:\/\/localhost:9500\/test.html\n>>>\n>>> Testing fsclj.core-test\n>>>\n>>> Ran 2 tests containing 2 assertions.\n>>> 0 failures, 0 errors.\n>>> :figwheel.main.testing\/success\n>>>\n>>> *Find path to google-chrome:*\n>>> => which google-chrome\n>>>\n>>> \/usr\/bin\/google-chrome\n>>>\n>>> *Modify 'test.cljs.edn' to use Chrome headless by uncommenting the\n>>> ':launch-js' line and changing it.*\n>>> => cat test.cljs.edn\n>>>\n>>> ^{\n>>> ;; use an alternative landing page for the tests so that we don't\n>>> ;; launch the application\n>>> :open-url \"http:\/\/[[server-hostname]]:[[server-port]]\/test.html\";\n>>>\n>>> ;; uncomment to launch tests in a headless environment\n>>> ;; you will have to figure out the path to chrome on your system\n>>> :launch-js [\"\/usr\/bin\/google-chrome\" \"--headless\" \"--disable-gpu\"\n>>> \"--repl\" :open-url]\n>>> }\n>>> {:main fsclj.test-runner}\n>>>\n>>> *Execute the unit tests from the command line again:*\n>>> => clj -A:fig:test\n>>>\n>>> [Figwheel] Validating figwheel-main.edn\n>>> [Figwheel] figwheel-main.edn is valid (\u30c4)\/\n>>> [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\"\n>>> [Figwheel] Successfully compiled build test to\n>>> \"target\/public\/cljs-out\/test-main.js\" in 2.06 seconds.\n>>> 2019-03-15 13:16:16.381:INFO::main: Logging initialized @11033ms\n>>> Launching Javascript environment with script: [\"\/usr\/bin\/google-chrome\"\n>>> \"--headless\" \"--disable-gpu\" \"--repl\" :open-url]\n>>> Environment output being logged to:\n>>> target\/public\/cljs-out\/test\/js-environment.log\n>>>\n>>> *The above output is generated, but the program never terminates*\n>>>\n>>> The js-environment.log file contains:\n>>>\n>>> \/131437.958265:INFO:headless_shell.cc(370)] Type a Javascript expression\n>>> to evaluate or \"quit\" to exit.\n>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>> To post to this group, send email to clojurescript@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] figwheel-main vs headless chrome testing Paul Whittington Wed, 20 Mar 2019 05:17:25 -0700"},
{"body":"Looks like the URL got garbled.  Plain text:\n\nhttps:\/\/github.com\/cloojure\/cljs-template.git \n\nOn Tue, Mar 19, 2019 at 8:16 PM Alan Thompson <clooj...@gmail.com> wrote:\n\n> Hi - Here is a template project that I've developed to showcase CLJS\n> testing and JS interop & testing.  Just clone this repo:\n>\n> https:\/\/github.com\/cloojure\/cljs-template.git\n>\n>\n>\n> and follow the README to set up cljs tests (`lein test` for CLJ will work\n> out of the box).\n>\n> It is based on the original figwheel (plans to upgrade to figwheel-main\n> are in the works).\n>\n> Alan\n>\n>\n> On Tue, Mar 19, 2019 at 8:23 AM Paul Whittington <pwhit...@gmail.com>\n> wrote:\n>\n>> I'm trying to follow the instructions here\n>> https:\/\/figwheel.org\/docs\/testing.html#running-tests-in-a-headless-environment,\n>> but the command line test execution never terminates.\n>>\n>> I've executed the following procedure:\n>>\n>> *Development environment*\n>>\n>>    - LinuxMint 19.1\n>>    - BASH\n>>    - openjdk version \"11.0.1\" 2018-10-16\n>>    - OpenJDK Runtime Environment (build\n>>    11.0.1+13-Ubuntu-3ubuntu118.04ppa1)\n>>    - OpenJDK 64-Bit Server VM (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1,\n>>    mixed mode, sharing)\n>>    - Clojure 1.9.0\n>>    - ClojureScript 1.10.339\n>>    - figwheel-main 0.1.9\n>>\n>> *Development Process*\n>> *Create a figwheel-main project by executing this command:*\n>> => clj -Sdeps '{:deps {seancorfield\/clj-new {:mvn\/version \"0.5.5\"}}}'\n>> -m clj-new.create\n>> figwheel-main\n>> fsclj.core\n>>\n>> *Enter the fsclj.core directory*\n>> => cd fsclj.core\n>>\n>> *Execute the unit tests from the command line:*\n>> => clj -A:fig:test\n>>\n>> [Figwheel] Validating figwheel-main.edn\n>> [Figwheel] figwheel-main.edn is valid (\u30c4)\/\n>> [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\"\n>> [Figwheel] Successfully compiled build test to\n>> \"target\/public\/cljs-out\/test-main.js\" in 1.147 seconds.\n>> 2019-03-15 11:13:56.627:INFO::main: Logging initialized @10504ms\n>> Opening URL http:\/\/localhost:9500\/test.html\n>>\n>> Testing fsclj.core-test\n>>\n>> Ran 2 tests containing 2 assertions.\n>> 0 failures, 0 errors.\n>> :figwheel.main.testing\/success\n>>\n>> *Find path to google-chrome:*\n>> => which google-chrome\n>>\n>> \/usr\/bin\/google-chrome\n>>\n>> *Modify 'test.cljs.edn' to use Chrome headless by uncommenting the\n>> ':launch-js' line and changing it.*\n>> => cat test.cljs.edn\n>>\n>> ^{\n>> ;; use an alternative landing page for the tests so that we don't\n>> ;; launch the application\n>> :open-url \"http:\/\/[[server-hostname]]:[[server-port]]\/test.html\";\n>>\n>> ;; uncomment to launch tests in a headless environment\n>> ;; you will have to figure out the path to chrome on your system\n>> :launch-js [\"\/usr\/bin\/google-chrome\" \"--headless\" \"--disable-gpu\"\n>> \"--repl\" :open-url]\n>> }\n>> {:main fsclj.test-runner}\n>>\n>> *Execute the unit tests from the command line again:*\n>> => clj -A:fig:test\n>>\n>> [Figwheel] Validating figwheel-main.edn\n>> [Figwheel] figwheel-main.edn is valid (\u30c4)\/\n>> [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\"\n>> [Figwheel] Successfully compiled build test to\n>> \"target\/public\/cljs-out\/test-main.js\" in 2.06 seconds.\n>> 2019-03-15 13:16:16.381:INFO::main: Logging initialized @11033ms\n>> Launching Javascript environment with script: [\"\/usr\/bin\/google-chrome\"\n>> \"--headless\" \"--disable-gpu\" \"--repl\" :open-url]\n>> Environment output being logged to:\n>> target\/public\/cljs-out\/test\/js-environment.log\n>>\n>> *The above output is generated, but the program never terminates*\n>>\n>> The js-environment.log file contains:\n>>\n>> \/131437.958265:INFO:headless_shell.cc(370)] Type a Javascript expression\n>> to evaluate or \"quit\" to exit.\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] figwheel-main vs headless chrome testing Alan Thompson Tue, 19 Mar 2019 20:19:08 -0700"},
{"body":"Hi - Here is a template project that I've developed to showcase CLJS\ntesting and JS interop & testing.  Just clone this repo: \nhttps:\/\/github.com\/cloojure\/cljs-template.git\n\n\n\nand follow the README to set up cljs tests (`lein test` for CLJ will work\nout of the box).\n\nIt is based on the original figwheel (plans to upgrade to figwheel-main are\nin the works).\n\nAlan\n\n\nOn Tue, Mar 19, 2019 at 8:23 AM Paul Whittington <pwhit...@gmail.com> wrote:\n\n> I'm trying to follow the instructions here\n> https:\/\/figwheel.org\/docs\/testing.html#running-tests-in-a-headless-environment,\n> but the command line test execution never terminates.\n>\n> I've executed the following procedure:\n>\n> *Development environment*\n>\n>    - LinuxMint 19.1\n>    - BASH\n>    - openjdk version \"11.0.1\" 2018-10-16\n>    - OpenJDK Runtime Environment (build\n>    11.0.1+13-Ubuntu-3ubuntu118.04ppa1)\n>    - OpenJDK 64-Bit Server VM (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1,\n>    mixed mode, sharing)\n>    - Clojure 1.9.0\n>    - ClojureScript 1.10.339\n>    - figwheel-main 0.1.9\n>\n> *Development Process*\n> *Create a figwheel-main project by executing this command:*\n> => clj -Sdeps '{:deps {seancorfield\/clj-new {:mvn\/version \"0.5.5\"}}}'\n> -m clj-new.create\n> figwheel-main\n> fsclj.core\n>\n> *Enter the fsclj.core directory*\n> => cd fsclj.core\n>\n> *Execute the unit tests from the command line:*\n> => clj -A:fig:test\n>\n> [Figwheel] Validating figwheel-main.edn\n> [Figwheel] figwheel-main.edn is valid (\u30c4)\/\n> [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\"\n> [Figwheel] Successfully compiled build test to\n> \"target\/public\/cljs-out\/test-main.js\" in 1.147 seconds.\n> 2019-03-15 11:13:56.627:INFO::main: Logging initialized @10504ms\n> Opening URL http:\/\/localhost:9500\/test.html\n>\n> Testing fsclj.core-test\n>\n> Ran 2 tests containing 2 assertions.\n> 0 failures, 0 errors.\n> :figwheel.main.testing\/success\n>\n> *Find path to google-chrome:*\n> => which google-chrome\n>\n> \/usr\/bin\/google-chrome\n>\n> *Modify 'test.cljs.edn' to use Chrome headless by uncommenting the\n> ':launch-js' line and changing it.*\n> => cat test.cljs.edn\n>\n> ^{\n> ;; use an alternative landing page for the tests so that we don't\n> ;; launch the application\n> :open-url \"http:\/\/[[server-hostname]]:[[server-port]]\/test.html\";\n>\n> ;; uncomment to launch tests in a headless environment\n> ;; you will have to figure out the path to chrome on your system\n> :launch-js [\"\/usr\/bin\/google-chrome\" \"--headless\" \"--disable-gpu\" \"--repl\"\n> :open-url]\n> }\n> {:main fsclj.test-runner}\n>\n> *Execute the unit tests from the command line again:*\n> => clj -A:fig:test\n>\n> [Figwheel] Validating figwheel-main.edn\n> [Figwheel] figwheel-main.edn is valid (\u30c4)\/\n> [Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\"\n> [Figwheel] Successfully compiled build test to\n> \"target\/public\/cljs-out\/test-main.js\" in 2.06 seconds.\n> 2019-03-15 13:16:16.381:INFO::main: Logging initialized @11033ms\n> Launching Javascript environment with script: [\"\/usr\/bin\/google-chrome\"\n> \"--headless\" \"--disable-gpu\" \"--repl\" :open-url]\n> Environment output being logged to:\n> target\/public\/cljs-out\/test\/js-environment.log\n>\n> *The above output is generated, but the program never terminates*\n>\n> The js-environment.log file contains:\n>\n> \/131437.958265:INFO:headless_shell.cc(370)] Type a Javascript expression\n> to evaluate or \"quit\" to exit.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] figwheel-main vs headless chrome testing Alan Thompson Tue, 19 Mar 2019 20:17:32 -0700"},
{"body":"I'm trying to follow the instructions here \nhttps:\/\/figwheel.org\/docs\/testing.html#running-tests-in-a-headless-environment, \nbut the command line test execution never terminates. \nI've executed the following procedure:\n\n*Development environment*\n\n   - LinuxMint 19.1\n   - BASH\n   - openjdk version \"11.0.1\" 2018-10-16\n   - OpenJDK Runtime Environment (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1)\n   - OpenJDK 64-Bit Server VM (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1, \n   mixed mode, sharing)\n   - Clojure 1.9.0\n   - ClojureScript 1.10.339\n   - figwheel-main 0.1.9\n\n*Development Process*\n*Create a figwheel-main project by executing this command:*\n=> clj -Sdeps '{:deps {seancorfield\/clj-new {:mvn\/version \"0.5.5\"}}}' \n-m clj-new.create \nfigwheel-main \nfsclj.core\n\n*Enter the fsclj.core directory*\n=> cd fsclj.core\n\n*Execute the unit tests from the command line:*\n=> clj -A:fig:test\n\n[Figwheel] Validating figwheel-main.edn\n[Figwheel] figwheel-main.edn is valid (\u30c4)\/\n[Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\"\n[Figwheel] Successfully compiled build test to \n\"target\/public\/cljs-out\/test-main.js\" in 1.147 seconds.\n2019-03-15 11:13:56.627:INFO::main: Logging initialized @10504ms\nOpening URL http:\/\/localhost:9500\/test.html\n\nTesting fsclj.core-test\n\nRan 2 tests containing 2 assertions.\n0 failures, 0 errors.\n:figwheel.main.testing\/success\n\n*Find path to google-chrome:*\n=> which google-chrome\n\n\/usr\/bin\/google-chrome\n\n*Modify 'test.cljs.edn' to use Chrome headless by uncommenting the \n':launch-js' line and changing it.*\n=> cat test.cljs.edn\n\n^{\n;; use an alternative landing page for the tests so that we don't\n;; launch the application\n:open-url \"http:\/\/[[server-hostname]]:[[server-port]]\/test.html\";\n\n;; uncomment to launch tests in a headless environment\n;; you will have to figure out the path to chrome on your system\n:launch-js [\"\/usr\/bin\/google-chrome\" \"--headless\" \"--disable-gpu\" \"--repl\" \n:open-url]\n}\n{:main fsclj.test-runner}\n\n*Execute the unit tests from the command line again:*\n=> clj -A:fig:test\n\n[Figwheel] Validating figwheel-main.edn\n[Figwheel] figwheel-main.edn is valid (\u30c4)\/\n[Figwheel] Compiling build test to \"target\/public\/cljs-out\/test-main.js\"\n[Figwheel] Successfully compiled build test to \n\"target\/public\/cljs-out\/test-main.js\" in 2.06 seconds.\n2019-03-15 13:16:16.381:INFO::main: Logging initialized @11033ms\nLaunching Javascript environment with script: [\"\/usr\/bin\/google-chrome\" \n\"--headless\" \"--disable-gpu\" \"--repl\" :open-url]\nEnvironment output being logged to: \ntarget\/public\/cljs-out\/test\/js-environment.log\n\n*The above output is generated, but the program never terminates*\n\nThe js-environment.log file contains:\n\n\/131437.958265:INFO:headless_shell.cc(370)] Type a Javascript expression to \nevaluate or \"quit\" to exit.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] figwheel-main vs headless chrome testing Paul Whittington Tue, 19 Mar 2019 08:23:23 -0700"},
{"body":"Hello ClojureScript users and team!\n\nUsing of 3D models examples are added to Simpro-scene project (\nhttps:\/\/github.com\/rururu\/simpro-scene): \n1. Sailing Expert: Race with 3D models of yachts (\nhttps:\/\/youtu.be\/VG87r7_gVz8)\n2. Landing on aircraft carrier (https:\/\/youtu.be\/gkRWfLXRaoo)\n\nEnjoy!\n\nSincerely,\n  Ru\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] 3D models in Simpro-scene project \u0420\u0443\u0441\u043b\u0430\u043d \u0421\u043e\u0440\u043e\u043a\u0438\u043d Mon, 18 Mar 2019 01:40:37 -0700"},
{"body":"Replete 2.0 has been released.\n\nReplete is a ClojureScript REPL for mobile devices. \nNow supports Android! (Kudos to Roman Liutikov for the work done here.)\n\nNew features include replete.core, replete.io, and replete.http namespaces.\n\nReplete 2.0 has a cool new icon. (Thanks to George Farro!)\n\nAnd a new website: http:\/\/replete-repl.org\n\n(The website has links to the App Store and Google Play.)\n\n- Mike\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: Replete 2.0 Mike Fikes Sat, 16 Mar 2019 11:47:43 -0700"},
{"body":"Wait a second, in the JS you've provided don't you have one block nested \ninside another? I would have thought that that was the equivalent of \n(let [a 123\n      func (fn [] a)]\n  (let [a 456]))\n\nDoesn't let in CLJ(S) establish a lexical scope? Also, can you explain what \nyou mean by symbol-to-value binding? I haven't found very much on the web \nabout it.\n\n\nOn Wednesday, March 13, 2019 at 10:49:12 PM UTC+5:30, Francis Avila wrote:\n>\n> Binding to a different variable name in js is how the cljs compiler \n> emulates symbol-to-value binding using javascript vars.\n>\n> It is equivalent to this es6 javascript using let:\n>\n> {let a = 123, func = function() {return a;}; { let a = 456; }}\n>\n> On Wednesday, March 13, 2019 at 12:26:15 AM UTC-5, outr...@gmail.com \n> wrote:\n>>\n>> When I run the following CLJS code:\n>>\n>> (let [a 123\n>>       func (fn [] a)\n>>       a 456]\n>>   (func))\n>>\n>> the block returns 123, which I'm absolutely fine with and have gotten \n>> used to since starting programming Clojure(Script).\n>>\n>> However, in JS if I run the following almost but not quite equivalent \n>> code:\n>>\n>> var a = 123,\n>>     func = function() {return a;}, \n>>     a = 456;\n>>\n>> I of course get 456, which is also expected.\n>>\n>> So it appears, at least on the surface, that when func is created that it \n>> evaluates the symbol a at the time of creation, such that func actually \n>> becomes (fn [] 123). However, looking at the compiled JS code, what is \n>> actually happening is:\n>>\n>> var a_32455 = (123);\n>> var func_32456 = ((function (a_32455) {\n>>    return (function () {\n>>       return a_32455;\n>>    });}) (a_32455) );\n>> var a_32457__$1 = (456);\n>> func_32456.call(null);\n>>\n>>\n>> which is fascinating, because it isn't actually what I intuitively \n>> expected was happening. Instead, it appears as if each instance of the \n>> symbol a as a binding in the let binding vector is converted to a different \n>> variable in the compiled JS code. So the first a becomes a_32455, and \n>> the second becomes a_32457__$1.\n>>\n>> This isn't actually causing me a problem at all, but I'm really \n>> interested to know what exactly is going on, if anyone can explain it. I \n>> also wonder if it is something which may trip newcomers from JavaScript and \n>> if an explanation should be provided somewhere?\n>>\n>> Thanks, \n>> Ali\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Scope and Closure in ClojureScript vs JavaScript outrovurt Thu, 14 Mar 2019 05:19:11 -0700"},
{"body":"Binding to a different variable name in js is how the cljs compiler \nemulates symbol-to-value binding using javascript vars. \nIt is equivalent to this es6 javascript using let:\n\n{let a = 123, func = function() {return a;}; { let a = 456; }}\n\nOn Wednesday, March 13, 2019 at 12:26:15 AM UTC-5, outr...@gmail.com wrote:\n>\n> When I run the following CLJS code:\n>\n> (let [a 123\n>       func (fn [] a)\n>       a 456]\n>   (func))\n>\n> the block returns 123, which I'm absolutely fine with and have gotten used \n> to since starting programming Clojure(Script).\n>\n> However, in JS if I run the following almost but not quite equivalent code:\n>\n> var a = 123,\n>     func = function() {return a;}, \n>     a = 456;\n>\n> I of course get 456, which is also expected.\n>\n> So it appears, at least on the surface, that when func is created that it \n> evaluates the symbol a at the time of creation, such that func actually \n> becomes (fn [] 123). However, looking at the compiled JS code, what is \n> actually happening is:\n>\n> var a_32455 = (123);\n> var func_32456 = ((function (a_32455) {\n>    return (function () {\n>       return a_32455;\n>    });}) (a_32455) );\n> var a_32457__$1 = (456);\n> func_32456.call(null);\n>\n>\n> which is fascinating, because it isn't actually what I intuitively \n> expected was happening. Instead, it appears as if each instance of the \n> symbol a as a binding in the let binding vector is converted to a different \n> variable in the compiled JS code. So the first a becomes a_32455, and the \n> second becomes a_32457__$1.\n>\n> This isn't actually causing me a problem at all, but I'm really interested \n> to know what exactly is going on, if anyone can explain it. I also wonder \n> if it is something which may trip newcomers from JavaScript and if an \n> explanation should be provided somewhere?\n>\n> Thanks, \n> Ali\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Scope and Closure in ClojureScript vs JavaScript Francis Avila Wed, 13 Mar 2019 10:19:36 -0700"},
{"body":"When I run the following CLJS code:\n\n(let [a 123\n      func (fn [] a)\n      a 456]\n  (func)) \nthe block returns 123, which I'm absolutely fine with and have gotten used \nto since starting programming Clojure(Script).\n\nHowever, in JS if I run the following almost but not quite equivalent code:\n\nvar a = 123,\n    func = function() {return a;}, \n    a = 456;\n\nI of course get 456, which is also expected.\n\nSo it appears, at least on the surface, that when func is created that it \nevaluates the symbol a at the time of creation, such that func actually \nbecomes (fn [] 123). However, looking at the compiled JS code, what is \nactually happening is:\n\nvar a_32455 = (123);\nvar func_32456 = ((function (a_32455) {\n   return (function () {\n      return a_32455;\n   });}) (a_32455) );\nvar a_32457__$1 = (456);\nfunc_32456.call(null);\n\n\nwhich is fascinating, because it isn't actually what I intuitively expected \nwas happening. Instead, it appears as if each instance of the symbol a as a \nbinding in the let binding vector is converted to a different variable in \nthe compiled JS code. So the first a becomes a_32455, and the second \nbecomes a_32457__$1.\n\nThis isn't actually causing me a problem at all, but I'm really interested \nto know what exactly is going on, if anyone can explain it. I also wonder \nif it is something which may trip newcomers from JavaScript and if an \nexplanation should be provided somewhere?\n\nThanks, \nAli\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Scope and Closure in ClojureScript vs JavaScript outrovurt Tue, 12 Mar 2019 22:26:34 -0700"},
{"body":"Why does eval on a lambda expression fail?  but evaluating a defn works? \nHere's the code example: \n(defn async-eval [s-expression]\n  (let [c (chan)\n        cljs-state (cljs.js\/empty-state)]\n    (cljs.js\/eval cljs-state s-expression  {:eval cljs.js\/js-eval}\n                  (fn [a-map]\n                    (go (let [value (:value a-map)]\n                          (prn (keys a-map))\n                          (prn \"value= \" value)\n                          (>! c value)))))\n    c))\n\n;;this works\n (go (let [f (<! (async-eval '(defn add [x] (+ x 1))))]\n        (prn (f 2))\n        ))\n\n;;this doesn't work\n  (go (let [f (<! (async-eval '(fn [x] (+ x 1))))]\n        (prn (f 2))\n        ))\n\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] eval a lambda expression fails Sonny To Wed, 27 Feb 2019 12:56:09 -0800"},
{"body":"I appreciate the suggestions here. Modifying the reader does need to be the\ndefault so that rules out 4. \n This setting should apply for both clojure and cljs. jvm-opt would work\nand may be the only option? hence why spec\/compile-assertions is configured\nthat way.\n\nOn Wed, 13 Feb 2019, 11:10 Yuri Govorushchenko <yuri.go...@gmail.com wrote:\n\n> After quickly trying this out it seems impossible to have a \"dangling\"\n> require after ns form, probably because (quoting the article I linked to in\n> previous comment):\n>\n> A file can have one of:\n>>\n>>    - a namespace declaration, *or*\n>>    - (possibly several) require forms,\n>> *or *\n>>\n>> So it looks like indeed there's no way to do a conditional require and\n> library A should provide some other way to allow user decide whether\n> printing should be affected. Some solutions off the top of my head:\n>\n> 1) For \"property-based\" configuration you could try using :closure-defines\n> compiler feature.\n> 2) There's also an :external-config pattern which I find easier to work\n> with (example:\n> https:\/\/gist.github.com\/metametadata\/bb00917e09463f6ce04f0e50ccc0740a).\n> But it seems to not be recommended anymore after shared AOT cache was\n> introduced (see https:\/\/clojurescript.org\/news\/2018-03-28-shared-aot-cache\n> ).\n> 3) https:\/\/github.com\/binaryage\/env-config (which I haven't tried).\n> 4) Printer could be modified only on demand instead of doing a global side\n> effect on requiring libA ns. E.g. add an explicit\n> `libA.core\/enhance-printer!` function. This is the approach I saw in libs\n> which affect Clojure test reporting (ultra and humane-test-output) where\n> they expose `activate!` function.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/cUbKSQ_bm0I\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How to require a library only if it is on the classpath? Henry Widd Thu, 14 Feb 2019 01:44:46 -0800"},
{"body":"Getting a build failure on CLJS 1.10.516   that works fine on CLJS \n1.10.416.  Please \nsee  https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/PQL4DnzSO4A  \nAny ideas?\nAlan \nOn Thursday, January 31, 2019 at 12:02:43 PM UTC-8, David Nolen wrote:\n>\n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>\n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>\n> Please refer to the announce post for the details:\n> https:\/\/clojurescript.org\/news\/2019-01-31-release\n>\n> As always, feedback welcome!\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.10.516 Alan Thompson Wed, 13 Feb 2019 09:59:17 -0800"},
{"body":"After quickly trying this out it seems impossible to have a \"dangling\" \nrequire after ns form, probably because (quoting the article I linked to in \nprevious comment): \nA file can have one of: \n>    \n>    - a namespace declaration, *or*\n>    - (possibly several) require forms, \n> *or *\n>\n> So it looks like indeed there's no way to do a conditional require and \nlibrary A should provide some other way to allow user decide whether \nprinting should be affected. Some solutions off the top of my head:\n\n1) For \"property-based\" configuration you could try using :closure-defines \ncompiler feature.\n2) There's also an :external-config pattern which I find easier to work \nwith (example: \nhttps:\/\/gist.github.com\/metametadata\/bb00917e09463f6ce04f0e50ccc0740a). But \nit seems to not be recommended anymore after shared AOT cache was \nintroduced (see https:\/\/clojurescript.org\/news\/2018-03-28-shared-aot-cache).\n3) https:\/\/github.com\/binaryage\/env-config (which I haven't tried).\n4) Printer could be modified only on demand instead of doing a global side \neffect on requiring libA ns. E.g. add an explicit \n`libA.core\/enhance-printer!` function. This is the approach I saw in libs \nwhich affect Clojure test reporting (ultra and humane-test-output) where \nthey expose `activate!` function.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How to require a library only if it is on the classpath? Yuri Govorushchenko Wed, 13 Feb 2019 03:11:16 -0800"},
{"body":"To add a bit more context about the original problem:\n\nlibrary A depends on library B. \nlibrary B in this case modifies the printer. A does not use any functions\nfrom it.\n\nThat is the default setup, but some users will not want the printer\nmodified when using library A so I was hoping that they could exlcude it\nfrom the dependencies and library A would not require it in that case.\n\nAnother approach that will work for me is having the user set a property,\nsimilar to how you do with e.g. -Dclojure.spec.compile-asserts=false, but I\nthought classpath exclusion might be good, if there was a way it could be\nmade to work.\n\nOn Tue, Feb 12, 2019 at 9:52 AM Yuri Govorushchenko <yuri.go...@gmail.com>\nwrote:\n\n> > That still does not allow you to do anything you couldn't do via the ns\n> form directly. require outside ns is a misleading topic and is still\n> completely static.\n>\n> I guess it's not a blocker for OP because the intention was to do a\n> conditional require during compilation (and not during execution in\n> browser)?\n>\n> Of course, I'm not sure what real root problem it solves, maybe there is a\n> more idiomatic solution possible.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/cUbKSQ_bm0I\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n\n-- \n@henryw374\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How to require a library only if it is on the classpath? Henry Widd Wed, 13 Feb 2019 01:57:26 -0800"},
{"body":"Hi - I have a re-frame app that works fine for CLJS 1.10.439, but fails in\ncompile for CLJS 1.10.516.  Any suggestions? \nHere is the working and failing build output for `lein figwheel`:\n\n1.10.439 - works\n---------------------------------\nFigwheel: Validating the configuration found in project.clj\nFigwheel: Configuration Valid ;)\nFigwheel: Starting server at http:\/\/0.0.0.0:3449\nFigwheel: Watching build - dev\nFigwheel: Cleaning build - dev\nCompiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\" from\n[\"src\/cljc\" \"src\/cljs\"]...\nWARNING: schema.core\/either is deprecated at line 13\nresources\/public\/js\/compiled\/flintstones-dev\/tupelo\/schema.cljc\nWARNING: schema.core\/either is deprecated at line 1676\nresources\/public\/js\/compiled\/flintstones-dev\/tupelo\/core.cljc\nWARNING: schema.core\/either is deprecated at line 1703\nresources\/public\/js\/compiled\/flintstones-dev\/tupelo\/core.cljc\nWARNING: schema.core\/either is deprecated at line 1862\nresources\/public\/js\/compiled\/flintstones-dev\/tupelo\/core.cljc\nWARNING: Namespace tupelo.char contains a reserved JavaScript keyword, the\ncorresponding Google Closure namespace will be munged to tupelo.char$ at\nline 7 resources\/public\/js\/compiled\/flintstones-dev\/tupelo\/char.cljc\nSuccessfully compiled build :dev to\n\"resources\/public\/js\/compiled\/flintstones.js\" in 15.379 seconds.\nLaunching ClojureScript REPL for build: dev\n------------------------------\n\n1.10.516 - fails\n--------------------------------\nFigwheel: Validating the configuration found in project.clj\nFigwheel: Configuration Valid ;)\nFigwheel: Starting server at http:\/\/0.0.0.0:3449\nFigwheel: Watching build - dev\nFigwheel: Cleaning build - dev\nCompiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\" from\n[\"src\/cljc\" \"src\/cljs\"]...\nmodule.js:550\n    throw err;\n    ^\n\nError: Cannot find module '@cljs-oss\/module-deps'\n    at Function.Module._resolveFilename (module.js:548:15)\n    at Function.Module._load (module.js:475:25)\n    at Module.require (module.js:597:17)\n    at require (internal\/module.js:11:18)\n    at [eval]:8:13\n    at ContextifyScript.Script.runInThisContext (vm.js:50:33)\n    at Object.runInThisContext (vm.js:139:38)\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:653:30)\n    at evalScript (bootstrap_node.js:479:27)\n\nWARNING: schema.core\/either is deprecated at line 13\nresources\/public\/js\/compiled\/flintstones-dev\/tupelo\/schema.cljc\n^C%\n\n--------------------------------\n\nAlan Thompson\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Figwheel build failure for CLJS 1.10.516: Error: Cannot find module '@cljs-oss\/module-deps' Alan Thompson Tue, 12 Feb 2019 22:20:29 -0800"},
{"body":"> That still does not allow you to do anything you couldn't do via the ns \nform directly. require outside ns is a misleading topic and is still \ncompletely static. \nI guess it's not a blocker for OP because the intention was to do a \nconditional require during compilation (and not during execution in \nbrowser)? \n\nOf course, I'm not sure what real root problem it solves, maybe there is a \nmore idiomatic solution possible.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to require a library only if it is on the classpath? Yuri Govorushchenko Tue, 12 Feb 2019 01:53:00 -0800"},
{"body":"That still does not allow you to do anything you couldn't do via the ns \nform directly. require outside ns is a misleading topic and is still \ncompletely static. It was just added to allow compiling scripts that don't \nhave a ns form. You still can't do conditionals or run any other code \ninbetween them. \nThe reason that dynamic require is not possible in CLJS is that there is no \nsync\/blocking IO in Browser JS. In Clojure you can simply do the work and \nreturn once everything is loaded properly. In JS you can't do that because \nyou have to go async\/non-blocking for the IO to load the files. So all of \nthe remainder of the program would continue running and loading only start \nonce the program yielded control back to the runtime. In addition to that \nthe Closure Compiler doesn't really support dynamic requires in :advanced \noptimizations.\n\n\nOn Monday, February 11, 2019 at 11:40:35 PM UTC+1, Yuri Govorushchenko \nwrote:\n>\n> > Now I understand that 'require' in cljs is intended as a repl-only \n> thing  which expands to an ns form: \n> https:\/\/clojurescript.org\/guides\/ns-forms#_the_require_and_require_macros_macros\n>\n> It should be OK to have several requires at the top of the file. Source: \n> https:\/\/anmonteiro.com\/2016\/10\/clojurescript-require-outside-ns\/.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to require a library only if it is on the classpath? Thomas Heller Tue, 12 Feb 2019 00:52:54 -0800"},
{"body":"> Now I understand that 'require' in cljs is intended as a repl-only thing  \nwhich expands to an ns form: \nhttps:\/\/clojurescript.org\/guides\/ns-forms#_the_require_and_require_macros_macros \nIt should be OK to have several requires at the top of the file. Source: \nhttps:\/\/anmonteiro.com\/2016\/10\/clojurescript-require-outside-ns\/.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to require a library only if it is on the classpath? Yuri Govorushchenko Mon, 11 Feb 2019 14:40:46 -0800"},
{"body":"Thanks, I appreciate the comments Chris and Thomas. I had not seen \nlazy-require \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to require a library only if it is on the classpath? Henry Widd Sun, 10 Feb 2019 00:16:50 -0800"},
{"body":"What you are trying to do in include-if-present is not possible in CLJS.\n\nrequire is completely static and you can't do dynamic require outside the \nREPL. \nOn Friday, February 8, 2019 at 9:43:03 AM UTC+1, Henry Widd wrote:\n>\n> I'm trying to write some code (to run at compilation time) that will only \n> do a require if a library is present. Initially I thought of trying \n> something like this:\n>\n> (defmacro include-if-present []\n>   (when (io\/resource \"foo\/bar.cljc\")\n>     '(require 'foo.bar)))\n>\n>\n> Now I understand that 'require' in cljs is intended as a repl-only thing  \n> which expands to an ns form: \n> https:\/\/clojurescript.org\/guides\/ns-forms#_the_require_and_require_macros_macros\n>\n> So, rather than 'cljs.core\/require', then perhaps what'd work it to be \n> able to hook in at the point the ns forms as read initially. \n>\n> Any ideas please let me know.\n>\n> Thanks,\n> Henry\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to require a library only if it is on the classpath? Thomas Heller Fri, 08 Feb 2019 14:00:13 -0800"},
{"body":"I realize this doesn't directly answer you're problem, as you're asking \nabout how you might do this in ClojureScript, but you may still be \ninterested to take a look at \nhttps:\/\/github.com\/clojure-goes-fast\/lazy-require\n\nIf you figure out a solution, it could be helpful for that library to have \na cljc implementation of the underlying idea here.\n\nGood luck\n\nChris\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to require a library only if it is on the classpath? Christopher Small Fri, 08 Feb 2019 10:10:15 -0800"},
{"body":"I'm trying to write some code (to run at compilation time) that will only \ndo a require if a library is present. Initially I thought of trying \nsomething like this: \n(defmacro include-if-present []\n  (when (io\/resource \"foo\/bar.cljc\")\n    '(require 'foo.bar)))\n\n\nNow I understand that 'require' in cljs is intended as a repl-only thing  \nwhich expands to an ns form: \nhttps:\/\/clojurescript.org\/guides\/ns-forms#_the_require_and_require_macros_macros\n\nSo, rather than 'cljs.core\/require', then perhaps what'd work it to be able \nto hook in at the point the ns forms as read initially. \n\nAny ideas please let me know.\n\nThanks,\nHenry\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How to require a library only if it is on the classpath? Henry Widd Fri, 08 Feb 2019 00:43:13 -0800"},
{"body":"Probably by setting a query parameter with the git sha or similar like\n\n\/js\/app.js?version=ad453f... \nThis avoids the caching, at least in cloudflare and similar cache services\nas well browser I think.\n\n\/Linus\n\nons 6 feb. 2019 kl. 21:45 skrev Nick Mudge <mud...@gmail.com>:\n\n> When I deploy my clojurescript application to production my users do not\n> get the newest javascript \"\/js\/app.js\" file that is generated from\n> clojurescript\/reframe.  This file is cached in my users browsers.\n>\n> What is the best way to fix this problem?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] How To Update Browser Cache of Clojurescript\/Javascript File? Linus Ericsson Wed, 06 Feb 2019 21:33:50 -0800"},
{"body":"When I deploy my clojurescript application to production my users do not \nget the newest javascript \"\/js\/app.js\" file that is generated from \nclojurescript\/reframe.  This file is cached in my users browsers. \nWhat is the best way to fix this problem?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How To Update Browser Cache of Clojurescript\/Javascript File? Nick Mudge Wed, 06 Feb 2019 12:45:53 -0800"},
{"body":"Indeed, I had forgotten to call set-loaded! for the components splits. I\nfeel stupid... Thanks for the help ! \nOn Mon, Feb 4, 2019, 2:17 PM Thomas Heller <th.hel...@gmail.com wrote:\n\n> To me that still sounds like you are missing a (cljs.loader\/set-loaded!\n> :components1) call in my-app.components.common.components1. Each module\n> must call set-loaded! at some point. In shadow-cljs this is taken care of\n> automatically but CLJS otherwise requires that you do this manually. If you\n> have the set-loaded! calls in the proper places and it should work. If it\n> doesn't I'd recommend creating a fully reproducible example and report it.\n>\n>\n> On Monday, February 4, 2019 at 12:01:23 PM UTC+1, Khalid Jebbari wrote:\n>>\n>> I realize it's much better if I give the complete configuration.\n>>\n>> latest ClojureScript stable 1.10.516\n>> deps.edn alias: {:cljs {:main-opts [\"-m\" \"cljs.main\" \"-co\" \"cljs-dev.edn\"\n>> \"--compile\"]}}\n>> cljs-dev.edn file:\n>>\n>> {:main           \"my-app.core\"\n>>  :parallel-build true\n>>  :optimizations  :simple\n>>  :output-dir     \"target\/js\"\n>>  :modules        {:cljs-base   {:output-to  \"target\/js\/main.js\"\n>>                                 :source-map true}\n>>                   :page1       {:entries    #{\"my-app.layout.page1\"}\n>>                                 :output-to  \"target\/js\/page1.js\"\n>>                                 :source-map true}\n>>                   :page2       {:entries    #{\"my-app.layout.page2\"}\n>>                                 :output-to  \"target\/js\/page2.js\"\n>>                                 :source-map true}\n>>                   :page3       {:entries    #{\"my-app.layout.page3\"}\n>>                                 :output-to  \"target\/js\/page3.js\"\n>>                                 :depends-on #{:components1}\n>>                                 :source-map true}\n>>                   :page4       {:entries    #{\"my-app.layout.page4\"}\n>>                                 :output-to  \"target\/js\/page4.js\"\n>>                                 :depends-on #{:components1 :components2}\n>>                                 :source-map true}\n>>                   :page5       {:entries    #{\"my-app.layout.page5\"}\n>>                                 :output-to  \"target\/js\/page5.js\"\n>>                                 :depends-on #{:components1 :components2}\n>>                                 :source-map true}\n>>                   :components1 {:entries\n>> #{\"my-app.components.common.components1\"}\n>>                                 :output-to  \"target\/js\/components1.js\"\n>>                                 :source-map true}\n>>                   :components2 {:entries\n>>  #{\"my-app.components.common.components2\"}\n>>                                 :output-to \"target\/js\/components2.js\"}}\n>>  }\n>>\n>> So my point here is to remove code from cljs-base that is common to some\n>> pages but not all of them and putting them into the split :components1 and\n>> :components2. The compilation works, the split are good (I verified the\n>> javascript produced for every file) but the runtime behavior is incorrect.\n>> My problem is that when I load :page3 with (loader\/load :page3\n>> my-callback), I see a requests to components1.js with response 200 OK, but\n>> no request to page3.js after, and my-callback is not executed.\n>>\n>> On Friday, February 1, 2019 at 1:01:33 PM UTC+1, Khalid Jebbari wrote:\n>>>\n>>> Hello,\n>>>\n>>> I create 3 modules in the :modules configuration, say :cljs-base, :a &\n>>> :b, and know that module :a depends on code in the module :b (and in\n>>> :cljs-base of course). If I manually load only :a with `(cljs.loader\/load\n>>> :a)`, will it automatically load :b? My local testing seems to show that it\n>>> doesn't.\n>>>\n>>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/NwRtAgr9ltc\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Question about code-splitting and loading of dependent modules. Khalid Jebbari Mon, 04 Feb 2019 09:41:13 -0800"},
{"body":"Thanks. I couldn't get `websocket_*` settings to work (I guess I need to \nrecompile nginx), but `proxy_*` settings, also mentioned on that page, \nappear to be working. \nOn Monday, February 4, 2019 at 3:00:56 AM UTC-6, Phill Wolf wrote:\n>\n> Don't know.  What about websocket_connect_timeout ######; etc? \n>\n> https:\/\/stackoverflow.com\/questions\/10550558\/nginx-tcp-websockets-timeout-keepalive-config\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: SSL Websocket REPL connection closes spontaneously Rob Nikander Mon, 04 Feb 2019 08:38:16 -0800"},
{"body":"To me that still sounds like you are missing a (cljs.loader\/set-loaded! \n:components1) call in my-app.components.common.components1. Each module \nmust call set-loaded! at some point. In shadow-cljs this is taken care of \nautomatically but CLJS otherwise requires that you do this manually. If you \nhave the set-loaded! calls in the proper places and it should work. If it \ndoesn't I'd recommend creating a fully reproducible example and report it. \n\nOn Monday, February 4, 2019 at 12:01:23 PM UTC+1, Khalid Jebbari wrote:\n>\n> I realize it's much better if I give the complete configuration.\n>\n> latest ClojureScript stable 1.10.516\n> deps.edn alias: {:cljs {:main-opts [\"-m\" \"cljs.main\" \"-co\" \"cljs-dev.edn\" \n> \"--compile\"]}}\n> cljs-dev.edn file:\n>\n> {:main           \"my-app.core\"\n>  :parallel-build true\n>  :optimizations  :simple\n>  :output-dir     \"target\/js\"\n>  :modules        {:cljs-base   {:output-to  \"target\/js\/main.js\"\n>                                 :source-map true}\n>                   :page1       {:entries    #{\"my-app.layout.page1\"}\n>                                 :output-to  \"target\/js\/page1.js\"\n>                                 :source-map true}\n>                   :page2       {:entries    #{\"my-app.layout.page2\"}\n>                                 :output-to  \"target\/js\/page2.js\"\n>                                 :source-map true}\n>                   :page3       {:entries    #{\"my-app.layout.page3\"}\n>                                 :output-to  \"target\/js\/page3.js\"\n>                                 :depends-on #{:components1}\n>                                 :source-map true}\n>                   :page4       {:entries    #{\"my-app.layout.page4\"}\n>                                 :output-to  \"target\/js\/page4.js\"\n>                                 :depends-on #{:components1 :components2}\n>                                 :source-map true}\n>                   :page5       {:entries    #{\"my-app.layout.page5\"}\n>                                 :output-to  \"target\/js\/page5.js\"\n>                                 :depends-on #{:components1 :components2}\n>                                 :source-map true}\n>                   :components1 {:entries    \n> #{\"my-app.components.common.components1\"}\n>                                 :output-to  \"target\/js\/components1.js\"\n>                                 :source-map true}\n>                   :components2 {:entries  \n>  #{\"my-app.components.common.components2\"}\n>                                 :output-to \"target\/js\/components2.js\"}}\n>  }\n>\n> So my point here is to remove code from cljs-base that is common to some \n> pages but not all of them and putting them into the split :components1 and \n> :components2. The compilation works, the split are good (I verified the \n> javascript produced for every file) but the runtime behavior is incorrect. \n> My problem is that when I load :page3 with (loader\/load :page3 \n> my-callback), I see a requests to components1.js with response 200 OK, but \n> no request to page3.js after, and my-callback is not executed.\n>\n> On Friday, February 1, 2019 at 1:01:33 PM UTC+1, Khalid Jebbari wrote:\n>>\n>> Hello,\n>>\n>> I create 3 modules in the :modules configuration, say :cljs-base, :a & \n>> :b, and know that module :a depends on code in the module :b (and in \n>> :cljs-base of course). If I manually load only :a with `(cljs.loader\/load \n>> :a)`, will it automatically load :b? My local testing seems to show that it \n>> doesn't.\n>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Question about code-splitting and loading of dependent modules. Thomas Heller Mon, 04 Feb 2019 05:17:26 -0800"},
{"body":"I realize it's much better if I give the complete configuration.\n\nlatest ClojureScript stable 1.10.516\ndeps.edn alias: {:cljs {:main-opts [\"-m\" \"cljs.main\" \"-co\" \"cljs-dev.edn\" \n\"--compile\"]}}\ncljs-dev.edn file: \n{:main           \"my-app.core\"\n :parallel-build true\n :optimizations  :simple\n :output-dir     \"target\/js\"\n :modules        {:cljs-base   {:output-to  \"target\/js\/main.js\"\n                                :source-map true}\n                  :page1       {:entries    #{\"my-app.layout.page1\"}\n                                :output-to  \"target\/js\/page1.js\"\n                                :source-map true}\n                  :page2       {:entries    #{\"my-app.layout.page2\"}\n                                :output-to  \"target\/js\/page2.js\"\n                                :source-map true}\n                  :page3       {:entries    #{\"my-app.layout.page3\"}\n                                :output-to  \"target\/js\/page3.js\"\n                                :depends-on #{:components1}\n                                :source-map true}\n                  :page4       {:entries    #{\"my-app.layout.page4\"}\n                                :output-to  \"target\/js\/page4.js\"\n                                :depends-on #{:components1 :components2}\n                                :source-map true}\n                  :page5       {:entries    #{\"my-app.layout.page5\"}\n                                :output-to  \"target\/js\/page5.js\"\n                                :depends-on #{:components1 :components2}\n                                :source-map true}\n                  :components1 {:entries    \n#{\"my-app.components.common.components1\"}\n                                :output-to  \"target\/js\/components1.js\"\n                                :source-map true}\n                  :components2 {:entries  \n #{\"my-app.components.common.components2\"}\n                                :output-to \"target\/js\/components2.js\"}}\n }\n\nSo my point here is to remove code from cljs-base that is common to some \npages but not all of them and putting them into the split :components1 and \n:components2. The compilation works, the split are good (I verified the \njavascript produced for every file) but the runtime behavior is incorrect. \nMy problem is that when I load :page3 with (loader\/load :page3 \nmy-callback), I see a requests to components1.js with response 200 OK, but \nno request to page3.js after, and my-callback is not executed.\n\nOn Friday, February 1, 2019 at 1:01:33 PM UTC+1, Khalid Jebbari wrote:\n>\n> Hello,\n>\n> I create 3 modules in the :modules configuration, say :cljs-base, :a & :b, \n> and know that module :a depends on code in the module :b (and in :cljs-base \n> of course). If I manually load only :a with `(cljs.loader\/load :a)`, will \n> it automatically load :b? My local testing seems to show that it doesn't.\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Question about code-splitting and loading of dependent modules. Khalid Jebbari Mon, 04 Feb 2019 03:11:53 -0800"},
{"body":"Don't know.  What about websocket_connect_timeout ######; etc? \nhttps:\/\/stackoverflow.com\/questions\/10550558\/nginx-tcp-websockets-timeout-keepalive-config \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: SSL Websocket REPL connection closes spontaneously Phill Wolf Mon, 04 Feb 2019 01:01:08 -0800"},
{"body":"Hi,\n\nDoes anyone use a websocket REPL over SSL, or do you all develop over plain \nHTTP and then use HTTPS only in production where you don't have the \nclojurescript REPL? \nIn my development environment, my web page is served over HTTPS. So if I \ntried the following line, the browser blocks the \"insecure content\":\n\n    (weasel.repl\/connect \"ws:\/\/www.myserver.com:9001\")\n\nBut if I set up nginx to do the SSL and proxy from 9011 \u2192 9001, then I can \nrun this in my CLJS code:\n\n    (weasel.repl\/connect \"wss:\/\/www.myserver.com:9011\")\n\nAt first it works. I see this in the browser's JS console:\n\n    (i) Opened websocket REPL connection\n\nAnd I can evaluate code in Emacs\/CIDER REPL. But about a minute later...\n\n    (i) Closed websocket REPL connection\n\nAnd the REPL in Emacs stops working. Maybe the problem is with the nginx \nconfig. \n\n    listen       9011;\n    [... ssl config ...]\n    location \/ {\n        proxy_pass http:\/\/localhost:9001;\nproxy_redirect   off;\nproxy_http_version 1.1;\n        proxy_set_header   Upgrade $http_upgrade;\n        proxy_set_header   Connection \"Upgrade\"; \n        proxy_set_header   Host $http_host;\nproxy_buffering   off;\n\nAnyone know how to do this?\n\nMaybe this never works, and I have to use a non-SSL dev environment.  \n\nthanks,\nRob\n\n\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] SSL Websocket REPL connection closes spontaneously Rob Nikander Sun, 03 Feb 2019 22:16:47 -0800"},
{"body":"I did this already in all modules. I noticed I had to add to the :main\nnamespace (loader\/set-loaded! :cljs-base) \nOn Sat, Feb 2, 2019, 10:49 AM Thomas Heller <th.hel...@gmail.com wrote:\n\n> In standard CLJS you must add a manual call to let the runtime know that\n> your module finished loading.\n>\n> (cljs.loader\/set-loaded! :a)\n>\n> Somewhere near the \"end\" of your modules. Only with this call will the\n> runtime continue loading the code.\n>\n> https:\/\/clojurescript.org\/guides\/code-splitting\n>\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/NwRtAgr9ltc\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Question about code-splitting and loading of dependent modules. Khalid Jebbari Sat, 02 Feb 2019 03:02:32 -0800"},
{"body":"In standard CLJS you must add a manual call to let the runtime know that \nyour module finished loading. \n(cljs.loader\/set-loaded! :a) \n\nSomewhere near the \"end\" of your modules. Only with this call will the \nruntime continue loading the code.\n\nhttps:\/\/clojurescript.org\/guides\/code-splitting\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Question about code-splitting and loading of dependent modules. Thomas Heller Sat, 02 Feb 2019 01:49:29 -0800"},
{"body":"Yes I did. Calling load :a loads :b in XHR then nothing, doesn't load :a\nafterwards. \nOn Fri, Feb 1, 2019, 10:44 PM Thomas Heller <th.hel...@gmail.com wrote:\n\n> You didn't show your config but did you correctly configure that :a\n> depends on :b? eg. :depends-on #{:b}? That can't be inferred so you must\n> manually configure it.\n>\n> On Friday, February 1, 2019 at 1:11:20 PM UTC+1, Khalid Jebbari wrote:\n>>\n>> In case it wasn't clear, the javascript file for :cljs-base is included\n>> as a script tag in the html, and it loads :a.\n>>\n>> On Friday, February 1, 2019 at 1:01:33 PM UTC+1, Khalid Jebbari wrote:\n>>>\n>>> Hello,\n>>>\n>>> I create 3 modules in the :modules configuration, say :cljs-base, :a &\n>>> :b, and know that module :a depends on code in the module :b (and in\n>>> :cljs-base of course). If I manually load only :a with `(cljs.loader\/load\n>>> :a)`, will it automatically load :b? My local testing seems to show that it\n>>> doesn't.\n>>>\n>>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/NwRtAgr9ltc\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Question about code-splitting and loading of dependent modules. Khalid Jebbari Fri, 01 Feb 2019 20:09:30 -0800"},
{"body":"You didn't show your config but did you correctly configure that :a depends \non :b? eg. :depends-on #{:b}? That can't be inferred so you must manually \nconfigure it. \nOn Friday, February 1, 2019 at 1:11:20 PM UTC+1, Khalid Jebbari wrote:\n>\n> In case it wasn't clear, the javascript file for :cljs-base is included as \n> a script tag in the html, and it loads :a.\n>\n> On Friday, February 1, 2019 at 1:01:33 PM UTC+1, Khalid Jebbari wrote:\n>>\n>> Hello,\n>>\n>> I create 3 modules in the :modules configuration, say :cljs-base, :a & \n>> :b, and know that module :a depends on code in the module :b (and in \n>> :cljs-base of course). If I manually load only :a with `(cljs.loader\/load \n>> :a)`, will it automatically load :b? My local testing seems to show that it \n>> doesn't.\n>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Question about code-splitting and loading of dependent modules. Thomas Heller Fri, 01 Feb 2019 13:44:05 -0800"},
{"body":"In case it wasn't clear, the javascript file for :cljs-base is included as \na script tag in the html, and it loads :a. \nOn Friday, February 1, 2019 at 1:01:33 PM UTC+1, Khalid Jebbari wrote:\n>\n> Hello,\n>\n> I create 3 modules in the :modules configuration, say :cljs-base, :a & :b, \n> and know that module :a depends on code in the module :b (and in :cljs-base \n> of course). If I manually load only :a with `(cljs.loader\/load :a)`, will \n> it automatically load :b? My local testing seems to show that it doesn't.\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Question about code-splitting and loading of dependent modules. Khalid Jebbari Fri, 01 Feb 2019 04:11:24 -0800"},
{"body":"Hello,\n\nI create 3 modules in the :modules configuration, say :cljs-base, :a & :b, \nand know that module :a depends on code in the module :b (and in :cljs-base \nof course). If I manually load only :a with `(cljs.loader\/load :a)`, will \nit automatically load :b? My local testing seems to show that it doesn't. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Question about code-splitting and loading of dependent modules. Khalid Jebbari Fri, 01 Feb 2019 04:02:22 -0800"},
{"body":"I get it. Maybe in the future the type inference could inform the Closure \nCompiler of the types, so that it could emit smaller code ? Really curious \nabout it. \nOn Friday, February 1, 2019 at 11:06:49 AM UTC+1, Thomas Heller wrote:\n>\n>\n>\n> On Friday, February 1, 2019 at 5:54:13 AM UTC+1, Khalid Jebbari wrote:\n>>\n>> Can it make bundles smaller ?\n>>\n>\n> Yes in theory, but only by a very small fraction. The cljs.core\/str macro \n> may emit less code in certain situations for example but after :advanced \n> optimizations the difference will be very small. So I wouldn't expect any \n> substantial reductions overall, it is mostly about the compile time \n> warnings.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.10.516 Khalid Jebbari Fri, 01 Feb 2019 03:58:38 -0800"},
{"body":"On Friday, February 1, 2019 at 5:54:13 AM UTC+1, Khalid Jebbari wrote:\n>\n> Can it make bundles smaller ?\n> \nYes in theory, but only by a very small fraction. The cljs.core\/str macro \nmay emit less code in certain situations for example but after :advanced \noptimizations the difference will be very small. So I wouldn't expect any \nsubstantial reductions overall, it is mostly about the compile time \nwarnings.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.10.516 Thomas Heller Fri, 01 Feb 2019 02:07:38 -0800"},
{"body":"Congrats David and all contributors!\n\nNot a feedback but a question: does the new type inference have an influence on \nthe generated JS code ? Can it make bundles smaller ? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.10.516 Khalid Jebbari Thu, 31 Jan 2019 20:55:31 -0800"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nPlease refer to the announce post for the details:\nhttps:\/\/clojurescript.org\/news\/2019-01-31-release\n\nAs always, feedback welcome!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.10.516 David Nolen Thu, 31 Jan 2019 12:02:59 -0800"},
{"body":"Having had to solve this particular problem myself to implement cloroutine, \nI can testify there's no fundamentally technical blocker to that issue. \nLe samedi 26 janvier 2019 15:03:56 UTC+1, Rob Nikander a \u00e9crit :\n>\n> I was trying (again) to learn and use core.async. I noticed this and it \n> worried me:\n>\n> https:\/\/dev.clojure.org\/jira\/browse\/ASYNC-73 \n> <https:\/\/www.google.com\/url?q=https%3A%2F%2Fdev.clojure.org%2Fjira%2Fbrowse%2FASYNC-73&sa=D&sntz=1&usg=AFQjCNGUsdzClM13ww9cxK8wHvbTtf3FpA>\n>\n> A bug marked \"critical\" that's unfixed for 4.5 years? Does it mean that \n> certain things in core.async cannot be fixed?\n>\n> Rob\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Old \"critical\" bug in core.async? L\u00e9o NOEL Mon, 28 Jan 2019 10:51:56 -0800"},
{"body":"Can certainly be fixed, probably needs to be re-checked to see if it is \nstill actually a bug. Would be happy to have a patch. \nOn Saturday, January 26, 2019 at 8:03:56 AM UTC-6, Rob Nikander wrote:\n>\n> I was trying (again) to learn and use core.async. I noticed this and it \n> worried me:\n>\n> https:\/\/dev.clojure.org\/jira\/browse\/ASYNC-73\n>\n> A bug marked \"critical\" that's unfixed for 4.5 years? Does it mean that \n> certain things in core.async cannot be fixed?\n>\n> Rob\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Old \"critical\" bug in core.async? Alex Miller Mon, 28 Jan 2019 05:54:43 -0800"},
{"body":"I was trying (again) to learn and use core.async. I noticed this and it \nworried me: \nhttps:\/\/dev.clojure.org\/jira\/browse\/ASYNC-73\n\nA bug marked \"critical\" that's unfixed for 4.5 years? Does it mean that \ncertain things in core.async cannot be fixed?\n\nRob\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Old \"critical\" bug in core.async? Rob Nikander Sat, 26 Jan 2019 06:04:32 -0800"},
{"body":"Help beta test Replete 2.0, which now supports Android!\n\nWe also have a spiffy new icon! \nReplete is a ClojureScript REPL for mobile devices.\n\nJoin the open beta:\n\nAndroid: https:\/\/play.google.com\/apps\/testing\/com.fikesfarm.Replete\n\niOS: https:\/\/testflight.apple.com\/join\/yfsQO4yx\n\n- Mike\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Replete 2.0 open beta (with Android support) Mike Fikes Sat, 19 Jan 2019 14:01:21 -0800"},
{"body":"I have code that compiles in Clojurescript as well as Clojure, and have \nnoticed a new warning since moving to Clojurescript 1.10.439 from \n1.10.339.  I expect that this is due to this \n<https:\/\/clojurescript.org\/news\/news#_function_return_type_inference> \nenhancement to Clojurescript regarding \"Function Return Type Inference\". \nThis warning shows up when using figwheel and shadow-cljs.  Here is the \nshadow-cljs output since it shows the code nicely:\n\n\n------ WARNING #1 \n> --------------------------------------------------------------\n>  File: zprint\/focus.cljc:100:47\n>\n> --------------------------------------------------------------------------------\n>   97 |         #_(println \"range-ssv: start:\" start \"nwpath:\" nwpath)\n>   98 |         start (skip-whitespace-ssv ssv start)\n>   99 |         ssv-next (next-ssv ssv start)\n>  100 |         end (if (and ssv-next (not= start 0)) (dec ssv-next) (dec \n> (count \n> ssv)))]\n>\n> -----------------------------------------------------^--------------------------\n>  cljs.core\/-, all arguments must be numbers, got [#{nil clj-nil} number] \n> instead\n>\n> --------------------------------------------------------------------------------\n>  101 |     #_(println \"range-ssv:\" [start end])\n>  102 |     [start end]))\n>\n> --------------------------------------------------------------------------------\n>\n>\nIt is true that the return from next-ssv can be nil, and so the value of of \nssv-next can be nil.  It is also true that it would be an error to call dec \nwith a nil value. But unless I'm really confused, that can never happen \nsince the call to dec is protected by the if with ssv-next in the and \nfunction.\n\nI can (and have) changed this code to make the warning go away, but are we \nexpecting that Clojurescript should emit a warning in this situation?  \n\nThanks!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] unexpected type inference warning in Clojurescript 1.10.439 Kim Kinnear Sat, 05 Jan 2019 11:02:16 -0800"},
{"body":"On Tuesday, January 1, 2019 at 1:00:07 PM UTC-6, Victor Gil wrote:\n>\n> Rob: Have you tried shadow-cljs? It has greatly simplified project setup \n> and compilation for me.\n> \nNo I haven't. I may try it later, if I can get the basics working first. \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: problem with cljs, local dependencies, and src path Rob Nikander Fri, 04 Jan 2019 09:42:39 -0800"},
{"body":"If you want to develop a front-end application with reagent, the lein \ncommand is: \nlein new reagent-frontend myproject\n\nthen to start the figwheel compiler (after cd-ing to your directory, as you \ndid):\n\nlein figwheel (or better: rlwrap lein figwheel , which will allow for a \nmore pleasant experience in the terminal, such as using the up and down \narrows to navigate between commands)\n\nWorks for me. I use Java 8 (to compile the clojurescript code) and clojure \n1.8.\n\n\nLe mardi 1 janvier 2019 06:21:21 UTC+2, Darko Luketic a \u00e9crit :\n>\n> so... I don't like slack so I'm posting here.\n>\n> I installed leiningen and ran\n> lein reagent lnfirst\n>\n> which created some kind of skeleton.\n> I have no clue how to run it, so I\n> cd lnfirst\n> lein run\n>\n> however\n>\n> Welcome to lnfirst\n>\n> please wait while Figwheel is waking up ...\n>\n> (Check the js console for hints if nothing ex\u0441iting happens.)\n>\n> Loading failed for the <script> with source \u201c\n> http:\/\/localhost:3000\/js\/app.js\u201d. localhost:3000:2:1 \n> <http:\/\/localhost:3000\/> \n>\n> and the server is Java?\n>\n> Warning: implicit hook found: lein-environ.plugin\/hooks \n> Hooks are deprecated and will be removed in a future version.\n> 2019-01-01 04:44:30.199:INFO::main: Logging initialized @8543ms to \n> org.eclipse.jetty.util.log.StdErrLog\n> 2019-01-01 04:44:30.247:INFO:oejs.Server:main: jetty-9.4.12.v20180830; \n> built: 2018-08-30T13:59:14.071Z; git: \n> 27208684755d94a92186989f695db2d7b21ebc51; jvm 1.8.0_192-b12\n> 2019-01-01 04:44:30.280:INFO:oejs.AbstractConnector:main: Started \n> ServerConnector@2a534291{HTTP\/1.1,[http\/1.1]}{0.0.0.0:3000}\n> 2019-01-01 04:44:30.280:INFO:oejs.Server:main: Started @8624ms\n>\n> There is so little documentation. I'm afraid I'll abandon it before I get \n> really started.\n> I'm only considering it because grpc-web has a protoc plugin that creates \n> a clojurescript client, that apparently seems to be the only client that \n> really works for the web.\n> I come from aa Go & Angular background (at least currently). It's all very \n> alien.\n>\n> - I thought reagent is for the front end only, no Java server side \n> required. I saw client and server dirs.\n> - The blank skeleton app doesn't even work\n> - I watched this: https:\/\/www.youtube.com\/watch?v=Kv8q7jo0H6A\n> It talks about local state, what about redux in this context?\n> How do you solve the \"related entities\" problem with Reagent or \n> clojurescript? Normalization\/De-Normalization.\n> How do you do http requests?\n>\n> But the base question is, what do I have to do so \"it works\"?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: First steps don't even work francis . stephan09 Tue, 01 Jan 2019 12:11:07 -0800"},
{"body":"Rob: Have you tried shadow-cljs? It has greatly simplified project setup and \ncompilation for me. \nRegards, victor.\n\nEl dic. 31, 2018, a la(s) 2:06 p. m., Alex Miller <a...@puredanger.com> \nescribi\u00f3:\n\n> \n> \n>> On Sunday, December 30, 2018 at 3:51:29 PM UTC-6, Rob Nikander wrote:\n>> \n>> \n>>> On Sunday, December 30, 2018 at 3:27:21 PM UTC-6, Phill Wolf wrote:\n>>> By the way, is there a deps.edn in the hello2 directory?\n>> \n>> Yes, there is. I was just working on this again I think I figured it out. \n>> Two things confused me. Maybe it's working as intended, but it seems these \n>> could be bugs.\n>> \n>> 1. If I update a deps.edn file in the dependency (hello2) to change the \n>> :paths there, the classpath is not updated in my project (hello1). I need to \n>> run `rm -rf .cpcache` in my project's directory so that it picks up the \n>> change. \n> \n> This is a known issue with local deps and I have a (somewhat complicated) \n> plan to address it but it's down the stack a bit.\n> \n> It's better to use -Sforce when you make a change like this than to rm the \n> entire cpcache. force will force the classpath to be recomputed (but doesn't \n> delete all of the other, potentially still valid, parts of the cache).\n>  \n>> \n>> 2. If I don't specify :paths in the dependency's (hello2) deps.edn file, \n>> then it will use the :paths is in the main project (hello1). That seems odd \n>> to me that the inheritance flows that way.  I imagined that by leaving \n>> deps.edn black in hello2, hello2 was specifying it's src path to be the \n>> default (\"src\").\n> \n> This is another known issue which has to do with how the deps.edn files are \n> read, which ties into a rework of how the \"current directory\" is interpreted \n> throughout the resolution of local relative paths.\n>  \n>> \n>> Rob\n>> \n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: problem with cljs, local dependencies, and src path Victor Gil Tue, 01 Jan 2019 11:01:02 -0800"},
{"body":"so... I don't like slack so I'm posting here.\n\nI installed leiningen and ran\nlein reagent lnfirst \nwhich created some kind of skeleton.\nI have no clue how to run it, so I\ncd lnfirst\nlein run\n\nhowever\n\nWelcome to lnfirst\n\nplease wait while Figwheel is waking up ...\n\n(Check the js console for hints if nothing ex\u0441iting happens.)\n\nLoading failed for the <script> with source \n\u201chttp:\/\/localhost:3000\/js\/app.js\u201d. localhost:3000:2:1 \n<http:\/\/localhost:3000\/> \n\nand the server is Java?\n\nWarning: implicit hook found: lein-environ.plugin\/hooks \nHooks are deprecated and will be removed in a future version.\n2019-01-01 04:44:30.199:INFO::main: Logging initialized @8543ms to \norg.eclipse.jetty.util.log.StdErrLog\n2019-01-01 04:44:30.247:INFO:oejs.Server:main: jetty-9.4.12.v20180830; \nbuilt: 2018-08-30T13:59:14.071Z; git: \n27208684755d94a92186989f695db2d7b21ebc51; jvm 1.8.0_192-b12\n2019-01-01 04:44:30.280:INFO:oejs.AbstractConnector:main: Started \nServerConnector@2a534291{HTTP\/1.1,[http\/1.1]}{0.0.0.0:3000}\n2019-01-01 04:44:30.280:INFO:oejs.Server:main: Started @8624ms\n\nThere is so little documentation. I'm afraid I'll abandon it before I get \nreally started.\nI'm only considering it because grpc-web has a protoc plugin that creates a \nclojurescript client, that apparently seems to be the only client that \nreally works for the web.\nI come from aa Go & Angular background (at least currently). It's all very \nalien.\n\n- I thought reagent is for the front end only, no Java server side \nrequired. I saw client and server dirs.\n- The blank skeleton app doesn't even work\n- I watched this: https:\/\/www.youtube.com\/watch?v=Kv8q7jo0H6A\nIt talks about local state, what about redux in this context?\nHow do you solve the \"related entities\" problem with Reagent or \nclojurescript? Normalization\/De-Normalization.\nHow do you do http requests?\n\nBut the base question is, what do I have to do so \"it works\"?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] First steps don't even work Darko Luketic Mon, 31 Dec 2018 20:21:56 -0800"},
{"body":"On Sunday, December 30, 2018 at 3:51:29 PM UTC-6, Rob Nikander wrote:\n>\n>\n>\n> On Sunday, December 30, 2018 at 3:27:21 PM UTC-6, Phill Wolf wrote:\n>>\n>> By the way, is there a deps.edn in the hello2 directory?\n>>\n>\n> Yes, there is. I was just working on this again I think I figured it out. \n> Two things confused me. Maybe it's working as intended, but it seems these \n> could be bugs.\n>\n> 1. If I update a deps.edn file in the dependency (hello2) to change the \n> :paths there, the classpath is not updated in my project (hello1). I need \n> to run `rm -rf .cpcache` in my project's directory so that it picks up the \n> change. \n> \nThis is a known issue with local deps and I have a (somewhat complicated) \nplan to address it but it's down the stack a bit.\n\nIt's better to use -Sforce when you make a change like this than to rm the \nentire cpcache. force will force the classpath to be recomputed (but \ndoesn't delete all of the other, potentially still valid, parts of the \ncache).\n \n\n>\n> 2. If I don't specify :paths in the dependency's (hello2) deps.edn file, \n> then it will use the :paths is in the main project (hello1). That seems odd \n> to me that the inheritance flows that way.  I imagined that by leaving \n> deps.edn black in hello2, hello2 was specifying it's src path to be the \n> default (\"src\").\n>\n\nThis is another known issue which has to do with how the deps.edn files are \nread, which ties into a rework of how the \"current directory\" is \ninterpreted throughout the resolution of local relative paths.\n \n\n>\n> Rob\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: problem with cljs, local dependencies, and src path Alex Miller Mon, 31 Dec 2018 09:06:58 -0800"},
{"body":"On Sunday, December 30, 2018 at 3:27:21 PM UTC-6, Phill Wolf wrote:\n>\n> By the way, is there a deps.edn in the hello2 directory?\n> \nYes, there is. I was just working on this again I think I figured it out. \nTwo things confused me. Maybe it's working as intended, but it seems these \ncould be bugs.\n\n1. If I update a deps.edn file in the dependency (hello2) to change the \n:paths there, the classpath is not updated in my project (hello1). I need \nto run `rm -rf .cpcache` in my project's directory so that it picks up the \nchange. \n\n2. If I don't specify :paths in the dependency's (hello2) deps.edn file, \nthen it will use the :paths is in the main project (hello1). That seems odd \nto me that the inheritance flows that way.  I imagined that by leaving \ndeps.edn black in hello2, hello2 was specifying it's src path to be the \ndefault (\"src\").\n\nRob\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: problem with cljs, local dependencies, and src path Rob Nikander Sun, 30 Dec 2018 13:51:45 -0800"},
{"body":"By the way, is there a deps.edn in the hello2 directory? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: problem with cljs, local dependencies, and src path Phill Wolf Sun, 30 Dec 2018 13:27:34 -0800"},
{"body":"Hi,\n\nI'm seeing some strange behavior trying to start a cljs project. I'm using \na deps.edn file, and if set the path to something like `:paths \n[\"src\/clj\"]`, then the cljs compiler can't find local dependencies. For \nexample, a project with this in deps.edn this will fail to compile: \n   {:paths [\"src\/clj\"]\n     :deps {\n      org.clojure\/clojurescript {:mvn\/version \"1.10.439\"}\n      hello2 {:local\/root \"\/Workspace\/hello2\"}  \n     }}\n \nBut if I change the path to \"src\", and of course move the source code of \ncourse, it works.\n\nThe error in the first case is:\n\n  $ clj --main cljs.main --compile hello1.core\n  [...]\n  Caused by: clojure.lang.ExceptionInfo: No such namespace: \nhello2-lib.core, could not locate hello2_lib\/core.cljs, \nhello2_lib\/core.cljc, or JavaScript source providing \"hello2-lib.core\" \n(Please check that namespaces with dashes use underscores in the \nClojureScript file name) in file \/Workspace\/hello1\/src\/clj\/hello1\/core.cljs \n{:tag :cljs\/analysis-error}\n\nIt can't find the namespace define in the hello2 library.\n\nRob\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] problem with cljs, local dependencies, and src path Rob Nikander Sat, 29 Dec 2018 15:41:59 -0800"},
{"body":"ClojureScript doesn't support all that classes sugar. But you can always \nuse JS files in your project. They only have to be GCC compatible (ES6 \nmodules for instance, see \nhttps:\/\/github.com\/google\/closure-compiler\/wiki\/ECMAScript6) and on your \nclass path. \nHerwig example is close, but not exactly what you wanted. Static \ngetters\/setter have to be defined on constructor itself, not on its \nprototype (then they are instance props).\n\nOn Friday, December 28, 2018 at 1:48:22 AM UTC+1, Philos Kim wrote:\n>\n> The third party JS library I use requires implementing the static getter \n> method of ES6.\n>\n> Could anyone tell me how I can implement the following simple code in \n> ClojureScript? \n>\n>\n> class Person{\n>   constructor(){\n>     this._name = 'jack';\n>   };\n>\n>   static get name(){\n>     return this._name;\n>   }\n>\n>   static set name(val){\n>     this._name = val;\n>   }\n> }\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How can I implement the getter and setter of ES6 in ClojureScript? Ale\u0161 Roub\u00ed\u010dek Sat, 29 Dec 2018 10:52:25 -0800"},
{"body":"There's no vdom diffing so its not as efficient as reagent with react.js. \nWhenever state changes, the state of a component is synchronized with the \nreal dom. Ideally, any reagent project that doesn't use react.js components \nshould just work. by changing the namespace but most likely unless things \nwill break. \nI am thinking of rendering a subset of HTML\/CSS in a webGL context.  I am \nalso thinking of switching to Gambit Scheme instead of using \nClojure\/ClojureScript because Gambit Scheme can generate C code that can \nrun as a webassembly module. Gambit Scheme can also target iOS and Android \nvia http:\/\/www.lambdanative.org\/\n\nI want to develop something like https:\/\/en.wikipedia.org\/wiki\/NeWS that \nruns across platforms (android, ios, desktop) and in a web context and it \nseems like Gambit Scheme might be a better route\n\nOn Friday, December 28, 2018 at 7:15:19 PM UTC+2, outr...@gmail.com wrote:\n>\n> Fascinating! So how exactly does it work? As an example, can I take any \n> Reagent project I have, and swap Reagent for Mr Clean? In that case will \n> everything pretty much work as-is? Also, what do I lose as a result of \n> doing this, i.e. of not having React.js? Dropping that dependency while \n> having most things still working could be invaluable to most people.\n>\n> By the way, I recommend you post it to the Reagent group as well:\n>\n> https:\/\/groups.google.com\/forum\/#!forum\/reagent-project\n>\n> Cheers,\n> Ali\n>\n> On Sunday, December 16, 2018 at 11:53:02 AM UTC+5:30, Sonny To wrote:\n>>\n>> forgot the link\n>>\n>>  https:\/\/bitbucket.org\/sonwh98\/mr-clean\/src\/master\/\n>>\n>> On Sunday, December 16, 2018 at 8:17:30 AM UTC+2, Sonny To wrote:\n>>>\n>>> Mr Clean is a Reagent compatible ClojureScript library without \n>>> dependency on React.js. \n>>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] Mr Clean: Reagent without React.js Sonny To Sat, 29 Dec 2018 07:26:58 -0800"},
{"body":"Fascinating! So how exactly does it work? As an example, can I take any \nReagent project I have, and swap Reagent for Mr Clean? In that case will \neverything pretty much work as-is? Also, what do I lose as a result of \ndoing this, i.e. of not having React.js? Dropping that dependency while \nhaving most things still working could be invaluable to most people. \nBy the way, I recommend you post it to the Reagent group as well:\n\nhttps:\/\/groups.google.com\/forum\/#!forum\/reagent-project\n\nCheers,\nAli\n\nOn Sunday, December 16, 2018 at 11:53:02 AM UTC+5:30, Sonny To wrote:\n>\n> forgot the link\n>\n>  https:\/\/bitbucket.org\/sonwh98\/mr-clean\/src\/master\/\n>\n> On Sunday, December 16, 2018 at 8:17:30 AM UTC+2, Sonny To wrote:\n>>\n>> Mr Clean is a Reagent compatible ClojureScript library without dependency \n>> on React.js. \n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] Mr Clean: Reagent without React.js outrovurt Fri, 28 Dec 2018 09:15:46 -0800"},
{"body":"Am Fr., 28. Dez. 2018 um 01:48 Uhr schrieb Philos Kim <philo...@gmail.com>: \n> The third party JS library I use requires implementing the static getter\n> method of ES6.\n>\n\nAFAIK ClojureScript doesn't have a construct to generate getters \/ setters.\nYou can implement those via Object.defineProperty\n<https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Object\/defineProperty>,\nthough.\n\nCould anyone tell me how I can implement the following simple code in\n> ClojureScript?\n>\n>\n> class Person{\n>   constructor(){\n>     this._name = 'jack';\n>   };\n>\n>   static get name(){\n>     return this._name;\n>   }\n>\n>   static set name(val){\n>     this._name = val;\n>   }\n> }\n>\n\n(def Person\n  (let [constructor (fn [] (this-as t (set! (.-_name t) \"jack\")))\n        proto (doto #js{}\n                (js\/Object.defineProperty \"name\"\n                  #js{:get #(this-as t (.-_name t))\n                      :set #(this-as t (set! (.-_name t) %))}))]\n    (set! (.-prototype constructor) proto)\n    constructor))\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] How can I implement the getter and setter of ES6 in ClojureScript? Herwig Hochleitner Fri, 28 Dec 2018 08:43:18 -0800"},
{"body":"The third party JS library I use requires implementing the static getter \nmethod of ES6. \nCould anyone tell me how I can implement the following simple code in \nClojureScript? \n\n\nclass Person{\n  constructor(){\n    this._name = 'jack';\n  };\n\n  static get name(){\n    return this._name;\n  }\n\n  static set name(val){\n    this._name = val;\n  }\n}\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How can I implement the getter and setter of ES6 in ClojureScript? Philos Kim Thu, 27 Dec 2018 16:48:29 -0800"},
{"body":"I wasn't aware of that :rename-prefix-namespace compiler option. That's \nawesome, I'll look into it. Thanks \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeking advice for a reducing the size of compiled scripts Tom Connors Fri, 21 Dec 2018 13:59:39 -0800"},
{"body":">\n> Thomas, my concern with using :modules is polluting the global scope. We \n> deliver code for other companies to run on their websites and putting \n> multiple variables on the global scope is too risky. That being said, maybe \n> I can wrap each module's code in a function that aliases `window` - I \n> haven't explored that avenue much.\n> \nIt is possible to isolate the globals and only create one, that however \ncomes at the cost of a few extra bytes for each variable that would \notherwise become a global (eg. var foo; becomes $CLJS.foo). See \n:rename-prefix-namespace compiler option.\n\n \n\n> When I last looked at where the KBs come from using \n> https:\/\/github.com\/danvk\/source-map-explorer there were not many \n> surprises - a lot of the size came from closure's libs, clojurescript.core, \n> and my application code. The only third party libs I'm still using are \n> preact and reagent.\n>\n\nSince CLJS is missing all source maps of foreign-libs they will not show in \nsource-map-explorer, so make sure your \"bytes\" are fully accounted for and \nnot accidentally including something that shouldn't be (usually indicated \nby a big blank area). shadow-cljs generates far more accurate build reports \n[1][2] for JS stuff but CLJS is mostly the same so if thats where all the \nbytes are coming from it won't show anything more.\n\n \n\n> I agree about cljs being competitive and providing something much better \n> than what we get with plain js. Sadly, telling customers that our script is \n> bigger because we use a better programming language doesn't always satisfy \n> them. \u00af\\_(\u30c4)_\/\u00af\n>\n\nThey might care about better code quality which CLJS tends to have (IMHO). \n;) \n\n[1] https:\/\/shadow-cljs.github.io\/docs\/UsersGuide.html#_build_report\n[2] https:\/\/code.thheller.com\/demos\/build-report\/huge.html \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeking advice for a reducing the size of compiled scripts Thomas Heller Fri, 21 Dec 2018 09:43:38 -0800"},
{"body":"Thanks Antonin, I wasn't aware that top-level data defs are universally bad \nfor DCE. \nYuri, I think you're right in general, but my application can be compiled \nwith particular features excluded so multimethods are problematic even in \nmy application code. And I've found that with re-frame applications unless \nI'm very disciplined about removing dead code I end up with unused event \nhandlers - I'm sure some people experience the same with multimethods. \nThat's an easy problem to solve, but in closed systems like applications \nI've always found that static dispatch with a big `case` or something \nsimilar works fine.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeking advice for a reducing the size of compiled scripts Tom Connors Fri, 21 Dec 2018 09:03:38 -0800"},
{"body":"> Avoid multimethods and other global registries like re-frame. These \nthwart DCE because there\u2019s no way to know at compile time that a specific \nmethod\/handler is never used. \nIsn't this advice only applicable to libraries which have a lot of \nmultimethods in the implementation? If the project codebase itself (not the \nlibraries) contains multimethods then I suppose they are all needed in \nproduction potentially and thus should never be eliminated.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeking advice for a reducing the size of compiled scripts Yuri Govorushchenko Fri, 21 Dec 2018 08:54:34 -0800"},
{"body":"Here are some of my findings when trying to make cljs-devtools library more \nDCE friendly:\nhttps:\/\/github.com\/binaryage\/cljs-devtools\/issues\/37#issuecomment-293575471 \nNot sure if they still apply today, the post is from Apr 2017.\n\ngood luck,\nAntonin \n\nOn Thursday, December 20, 2018 at 5:18:34 PM UTC+1, Tom Connors wrote:\n>\n> At work we use clojurescript to implement a front-end with minified and \n> gzipped assets coming in at around 170KB. If I can\u2019t reduce that \n> substantially I\u2019ll probably have to rewrite in javascript. I\u2019m posting to \n> share some ideas I have for reducing the size of the script and to ask for \n> any additional techniques others have used to get smaller scripts.\n>\n> Things I can do right now:\n>\n>    - Measure the impact of every library: I\u2019ve found that transit adds \n>    about 12KB gzipped and core.async adds even more (probably variable due to \n>    the transformations performed by the go macro). Reagent is \n>    surprisingly light - about 4KB. I\u2019m using preact instead of react, so that \n>    lib is an almost negligible 3KB. Importantly, I\u2019ve found that some APIs \n>    provided by google closure can have surprising impacts on script size. \n>    Don\u2019t use goog.xhr - do direct interop for http requests. \n>    - Avoid multimethods and other global registries like re-frame. These \n>    thwart DCE because there\u2019s no way to know at compile time that a specific \n>    method\/handler is never used. \n>    - Remove unnecessary parts of data structures. If you have a literal \n>    vector of maps where each map has a key or two that isn\u2019t used by code \n>    (perhaps it\u2019s just information for developers), those unused keys won\u2019t be \n>    DCE\u2019d \n>    - Make use of goog defines to get rid of code paths that you can \n>    determine to be unnecessary at compile time. \n>    - Avoid using apply for functions that implement a lot of different \n>    arities. The clourescript compiler tends to be really smart about this - \n> if \n>    you implement 1, 2, and 3 arity versions of a function and only call the \n>    two arity one, the 1 and 3 arity versions can get DCE\u2019d. If you use \n>    apply, however, all the arities end up in the script. \n>    - Do a second round of minification with uglify or some other \n>    minifier. I haven\u2019t tested this in a while, but when I did last time it \n>    saved a KB or two. At least it compresses the Math.imul definition at the \n>    top of the script. \n>\n> Aside from dropping heavy libraries, those are all incremental changes. In \n> order to get really substantial size savings, I think changes would need to \n> be made to clojurescript. I have no idea about the feasibility of these \n> things.\n>\n>    - (ideally) automatically (but probably based on configuration) remove \n>    unused methods of type definitions. For example, cljs.core.UUID implements \n>    the equiv method of Object. Suppose we know at compile time that we \n>    will construct UUIDs but not compare them with anything. It would be great \n>    to be able to remove that method\u2019s definition. I doubt this is possible \n>    without a static type system, but I wonder whether there is some way to \n>    make this configurable that wouldn\u2019t lead to an explosion of configuration \n>    options and inscrutable errors. \n>    - Some functions implement multiple arities for dispatch performance. \n>    I would like to be able to say \u201cI accept the performance hit in exchange \n>    for only implementing one arity of this function\u201d. For instance, \n>    partial implements multiple arities of its own args and of the \n>    function it returns. This could be reduced down to (defn partial [f & \n> more] \n>    (fn [& args] (apply f (concat more args)))) if we cared more about script \n>    size than runtime performance. \n>\n> Any other ideas?\n> \u200b\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeking advice for a reducing the size of compiled scripts Antonin Hildebrand Fri, 21 Dec 2018 08:25:29 -0800"},
{"body":"Nathan, yes, I'm using advanced compilation, thanks.\n\nThomas, my concern with using :modules is polluting the global scope. We \ndeliver code for other companies to run on their websites and putting \nmultiple variables on the global scope is too risky. That being said, maybe \nI can wrap each module's code in a function that aliases `window` - I \nhaven't explored that avenue much.\nWhen I last looked at where the KBs come from \nusing https:\/\/github.com\/danvk\/source-map-explorer there were not many \nsurprises - a lot of the size came from closure's libs, clojurescript.core, \nand my application code. The only third party libs I'm still using are \npreact and reagent.\nI agree about cljs being competitive and providing something much better \nthan what we get with plain js. Sadly, telling customers that our script is \nbigger because we use a better programming language doesn't always satisfy \nthem. \u00af\\_(\u30c4)_\/\u00af\nThanks for the suggestions. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeking advice for a reducing the size of compiled scripts Tom Connors Fri, 21 Dec 2018 08:23:18 -0800"},
{"body":"Did you look into using Code Splitting aka :modules to reduce the size of \nthe initial download? \nDid you check where your 170KB actually come from? Including things like \ncljs.pprint can add quite a bit and isn't commonly used in production \nbuilds but can't be DCE'd (yet), similarly other namespaces can bloat the \nfinal output just by being required. Modifying the compiler to remove \ncertain signatures or other tweaks is likely asking for trouble and there \nis currently no option to do this.\n\nWith that being said CLJS output is generally very competitive or even \nsmaller than comparable JS builds if you account for what you are actually \nusing. The Closure Library is also built for maximum compatibility which is \nless relevant these days but can still save hours of debugging if you care \nabout supporting older systems, at the cost of a few extra bytes. Don't \njust compare with vanilla JS without immutable datastructures, sane \nequality semantics and so on.\n\nCheers,\nThomas\n\n\nOn Thursday, December 20, 2018 at 5:18:34 PM UTC+1, Tom Connors wrote:\n>\n> At work we use clojurescript to implement a front-end with minified and \n> gzipped assets coming in at around 170KB. If I can\u2019t reduce that \n> substantially I\u2019ll probably have to rewrite in javascript. I\u2019m posting to \n> share some ideas I have for reducing the size of the script and to ask for \n> any additional techniques others have used to get smaller scripts.\n>\n> Things I can do right now:\n>\n>    - Measure the impact of every library: I\u2019ve found that transit adds \n>    about 12KB gzipped and core.async adds even more (probably variable due to \n>    the transformations performed by the go macro). Reagent is \n>    surprisingly light - about 4KB. I\u2019m using preact instead of react, so that \n>    lib is an almost negligible 3KB. Importantly, I\u2019ve found that some APIs \n>    provided by google closure can have surprising impacts on script size. \n>    Don\u2019t use goog.xhr - do direct interop for http requests. \n>    - Avoid multimethods and other global registries like re-frame. These \n>    thwart DCE because there\u2019s no way to know at compile time that a specific \n>    method\/handler is never used. \n>    - Remove unnecessary parts of data structures. If you have a literal \n>    vector of maps where each map has a key or two that isn\u2019t used by code \n>    (perhaps it\u2019s just information for developers), those unused keys won\u2019t be \n>    DCE\u2019d \n>    - Make use of goog defines to get rid of code paths that you can \n>    determine to be unnecessary at compile time. \n>    - Avoid using apply for functions that implement a lot of different \n>    arities. The clourescript compiler tends to be really smart about this - \n> if \n>    you implement 1, 2, and 3 arity versions of a function and only call the \n>    two arity one, the 1 and 3 arity versions can get DCE\u2019d. If you use \n>    apply, however, all the arities end up in the script. \n>    - Do a second round of minification with uglify or some other \n>    minifier. I haven\u2019t tested this in a while, but when I did last time it \n>    saved a KB or two. At least it compresses the Math.imul definition at the \n>    top of the script. \n>\n> Aside from dropping heavy libraries, those are all incremental changes. In \n> order to get really substantial size savings, I think changes would need to \n> be made to clojurescript. I have no idea about the feasibility of these \n> things.\n>\n>    - (ideally) automatically (but probably based on configuration) remove \n>    unused methods of type definitions. For example, cljs.core.UUID implements \n>    the equiv method of Object. Suppose we know at compile time that we \n>    will construct UUIDs but not compare them with anything. It would be great \n>    to be able to remove that method\u2019s definition. I doubt this is possible \n>    without a static type system, but I wonder whether there is some way to \n>    make this configurable that wouldn\u2019t lead to an explosion of configuration \n>    options and inscrutable errors. \n>    - Some functions implement multiple arities for dispatch performance. \n>    I would like to be able to say \u201cI accept the performance hit in exchange \n>    for only implementing one arity of this function\u201d. For instance, \n>    partial implements multiple arities of its own args and of the \n>    function it returns. This could be reduced down to (defn partial [f & \n> more] \n>    (fn [& args] (apply f (concat more args)))) if we cared more about script \n>    size than runtime performance. \n>\n> Any other ideas?\n> \u200b\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeking advice for a reducing the size of compiled scripts Thomas Heller Fri, 21 Dec 2018 01:14:51 -0800"},
{"body":"We\u2019re you able to use Advanced compilation?\n\nOn Thu, Dec 20, 2018 at 11:18, Tom Connors <t.v.conn...@gmail.com> wrote: \n> At work we use clojurescript to implement a front-end with minified and\n> gzipped assets coming in at around 170KB. If I can\u2019t reduce that\n> substantially I\u2019ll probably have to rewrite in javascript. I\u2019m posting to\n> share some ideas I have for reducing the size of the script and to ask for\n> any additional techniques others have used to get smaller scripts.\n>\n> Things I can do right now:\n>\n>    - Measure the impact of every library: I\u2019ve found that transit adds\n>    about 12KB gzipped and core.async adds even more (probably variable due to\n>    the transformations performed by the go macro). Reagent is\n>    surprisingly light - about 4KB. I\u2019m using preact instead of react, so that\n>    lib is an almost negligible 3KB. Importantly, I\u2019ve found that some APIs\n>    provided by google closure can have surprising impacts on script size.\n>    Don\u2019t use goog.xhr - do direct interop for http requests.\n>    - Avoid multimethods and other global registries like re-frame. These\n>    thwart DCE because there\u2019s no way to know at compile time that a specific\n>    method\/handler is never used.\n>    - Remove unnecessary parts of data structures. If you have a literal\n>    vector of maps where each map has a key or two that isn\u2019t used by code\n>    (perhaps it\u2019s just information for developers), those unused keys won\u2019t be\n>    DCE\u2019d\n>    - Make use of goog defines to get rid of code paths that you can\n>    determine to be unnecessary at compile time.\n>    - Avoid using apply for functions that implement a lot of different\n>    arities. The clourescript compiler tends to be really smart about this - if\n>    you implement 1, 2, and 3 arity versions of a function and only call the\n>    two arity one, the 1 and 3 arity versions can get DCE\u2019d. If you use\n>    apply, however, all the arities end up in the script.\n>    - Do a second round of minification with uglify or some other\n>    minifier. I haven\u2019t tested this in a while, but when I did last time it\n>    saved a KB or two. At least it compresses the Math.imul definition at the\n>    top of the script.\n>\n> Aside from dropping heavy libraries, those are all incremental changes. In\n> order to get really substantial size savings, I think changes would need to\n> be made to clojurescript. I have no idea about the feasibility of these\n> things.\n>\n>    - (ideally) automatically (but probably based on configuration) remove\n>    unused methods of type definitions. For example, cljs.core.UUID implements\n>    the equiv method of Object. Suppose we know at compile time that we\n>    will construct UUIDs but not compare them with anything. It would be great\n>    to be able to remove that method\u2019s definition. I doubt this is possible\n>    without a static type system, but I wonder whether there is some way to\n>    make this configurable that wouldn\u2019t lead to an explosion of configuration\n>    options and inscrutable errors.\n>    - Some functions implement multiple arities for dispatch performance.\n>    I would like to be able to say \u201cI accept the performance hit in exchange\n>    for only implementing one arity of this function\u201d. For instance,\n>    partial implements multiple arities of its own args and of the\n>    function it returns. This could be reduced down to (defn partial [f & more]\n>    (fn [& args] (apply f (concat more args)))) if we cared more about script\n>    size than runtime performance.\n>\n> Any other ideas?\n> \u200b\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \n- sent from my mobile\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Seeking advice for a reducing the size of compiled scripts Nathan Fisher Thu, 20 Dec 2018 23:17:26 -0800"},
{"body":"At work we use clojurescript to implement a front-end with minified and \ngzipped assets coming in at around 170KB. If I can\u2019t reduce that \nsubstantially I\u2019ll probably have to rewrite in javascript. I\u2019m posting to \nshare some ideas I have for reducing the size of the script and to ask for \nany additional techniques others have used to get smaller scripts. \nThings I can do right now:\n\n   - Measure the impact of every library: I\u2019ve found that transit adds \n   about 12KB gzipped and core.async adds even more (probably variable due to \n   the transformations performed by the go macro). Reagent is surprisingly \n   light - about 4KB. I\u2019m using preact instead of react, so that lib is an \n   almost negligible 3KB. Importantly, I\u2019ve found that some APIs provided by \n   google closure can have surprising impacts on script size. Don\u2019t use \n   goog.xhr - do direct interop for http requests. \n   - Avoid multimethods and other global registries like re-frame. These \n   thwart DCE because there\u2019s no way to know at compile time that a specific \n   method\/handler is never used. \n   - Remove unnecessary parts of data structures. If you have a literal \n   vector of maps where each map has a key or two that isn\u2019t used by code \n   (perhaps it\u2019s just information for developers), those unused keys won\u2019t be \n   DCE\u2019d \n   - Make use of goog defines to get rid of code paths that you can \n   determine to be unnecessary at compile time. \n   - Avoid using apply for functions that implement a lot of different \n   arities. The clourescript compiler tends to be really smart about this - if \n   you implement 1, 2, and 3 arity versions of a function and only call the \n   two arity one, the 1 and 3 arity versions can get DCE\u2019d. If you use apply, \n   however, all the arities end up in the script. \n   - Do a second round of minification with uglify or some other minifier. \n   I haven\u2019t tested this in a while, but when I did last time it saved a KB or \n   two. At least it compresses the Math.imul definition at the top of the \n   script. \n\nAside from dropping heavy libraries, those are all incremental changes. In \norder to get really substantial size savings, I think changes would need to \nbe made to clojurescript. I have no idea about the feasibility of these \nthings.\n\n   - (ideally) automatically (but probably based on configuration) remove \n   unused methods of type definitions. For example, cljs.core.UUID implements \n   the equiv method of Object. Suppose we know at compile time that we will \n   construct UUIDs but not compare them with anything. It would be great to be \n   able to remove that method\u2019s definition. I doubt this is possible without a \n   static type system, but I wonder whether there is some way to make this \n   configurable that wouldn\u2019t lead to an explosion of configuration options \n   and inscrutable errors. \n   - Some functions implement multiple arities for dispatch performance. I \n   would like to be able to say \u201cI accept the performance hit in exchange for \n   only implementing one arity of this function\u201d. For instance, partial \n   implements multiple arities of its own args and of the function it returns. \n   This could be reduced down to (defn partial [f & more] (fn [& args] (apply \n   f (concat more args)))) if we cared more about script size than runtime \n   performance. \n\nAny other ideas?\n\u200b\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Seeking advice for a reducing the size of compiled scripts Tom Connors Thu, 20 Dec 2018 08:18:52 -0800"},
{"body":"Hi folks\n\nIn the last ten years or so, source code formatters with limited\/no\nconfiguration have become popular. Go is the most well-known example,\nshipping with gofmt, but there are similar tools in Rust, JavaScript,\nPython, and Elixir. \nClojure and Lisps, in general, have historically allowed very flexible\nformatting of s-expressions. This can aid readability but adds a cognitive\noverhead for readers used to different styles. It can also be challenging\nto match existing source code formatting if you are using a different\neditor to the original author.\n\n*I believe it would be useful for the Clojure community to be able to\ndevelop (or adopt) a single source-code formatter which is able to format\nClojure source code to a canonical format.* It seems unlikely that 100%\n(maybe not even 50%) of the community would want such a tool, but I feel\nlike there is enough desire for a common formatting tool that this could\nstill be valuable.\n\nI've created a discussion thread\n<https:\/\/clojureverse.org\/t\/clj-commons-building-a-formatter-like-gofmt-for-clojure\/3240>\non ClojureVerse about building a Clojure\/ClojureScript source code\nformatter as part of CLJ Commons <https:\/\/clj-commons.org\/>. There are a\nfew differences in goals between this tool and the existing ones that\nexist. I go into more detail in the thread, but I'm proposing the creation\nof\n\n* A fairly canonical format for Clojure code, e.g. reindenting code,\nreformatting namespace declarations. A format that has idiomatic opinions.\n* A formatting spec and test suite that multiple different tools and\neditors can implement, not a spec defined by the implementation of a single\ntool.\n* The creation of a reference implementation formatter.\n* A formatter with few (maybe zero?) options\n\nIt's possible that 10 years after Clojure's creation, it's going to be too\ndifficult for the community to coalesce around a canonical format, and it\nwill be necessary to add some configuration options. I'm not really sure,\nwhich is why I'm asking for community members to join in the discussion.\n\nI realise that I'm touching the third rail\n<https:\/\/en.wikipedia.org\/wiki\/Third_rail_of_politics> here, and lots of\npeople have strong opinions about formatting. I don't expect that everyone\nwould like or want to adopt such a strict formatting tool, and that's\ntotally ok! For those of you that *do* like the idea of building\/having\nsuch a tool, please jump in on the discussion on ClojureVerse, and on a\nGitHub repo discussing the different aspects of formatting at\nhttps:\/\/github.com\/clj-commons\/formatter.\n\nThanks, Daniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Building a formatter like gofmt for Clojure Daniel Compton Tue, 18 Dec 2018 12:42:43 -0800"},
{"body":"Greetings!\n\nI'm happy to announce today the release of Oz 1.4.0. \nhttps:\/\/github.com\/metasoarous\/oz\n\nIf you're on the Slack #datascience channel, you may have already caught \nwind of some earlier versions. But in the interest of introducing it more \nbroadly, I'm posting an overview here for those of you who aren't familiar. \nIf you *are* familiar, you may still wish to scroll down to the bottom as \nthere are some new features available in the latest release.\n\n\n*Vega & Vega-Lite*\n\nOz is based on the fantastic Vega & Vega-Lite data visualization JS \nlibraries, and so to really understand what Oz has to offer, it's best to \nstart here. Vega & Vega-Lite are based on the seminal Grammar of Graphics, \nan approach to data visualization which emphasizes writing declarative \ndescriptions of how properties of data should translate to aesthetic \nattributes of a visualization. This approach guided the design of the R's \npopular ggplot2 library, and has since influenced numerous libraries in \nother languages.\n\nVega & Vega-Lite take this vision further in two important ways:\n\n   1. In Vega & Vega-Lite, data visualizations are described using *pure \n   data*. This makes it more declarative, and confers all the benefits we \n   know and love about data-driven programming in Clojure. For instance, you \n   can send a chunk of Vega or Vega-Lite data over the wire from one program \n   to another effortlessly (as Oz does), and load it up in another process \n   without having to worry about the security concerns of executing someone \n   else's code. The bottom line is that Vega & Vega-Lite are philosophically \n   and technically compatible with \"the Clojure way\" (IT'S. JUST. DATA.).\n   2. Vega & Vega-Lite take the Grammar of Graphics one step further by \n   introducing a Grammar of Interaction. You can declaratively describe the \n   addition of controls (dropdowns, checkboxes, etc) and interactive \n   properties of the visualization itself (click, hover, etc), and use the \n   data from these interactions to inform other parts of a visualization. For \n   example, you might highlight a set of points in one part of a \n   visualization, and display summary statistics about that selection in \n   another. This is facilitated in part by a general purpose dataflow language \n   as part of the greater spec.\n\nVega itself is highly customizable and flexible, but somewhat verbose and \nnot suitable for day to day visualization tasks. Vega-Lite steps in as a \nsomewhat higher level and more automated flavor which itself compiles down \nto Vega. I have been using them together for a better part of a year now, \nand can say without reservation that they are amazing. For years I've \nlonged for a ggplot2 from Clojure, and at long last I've found something \nthat to my surprise has not only matched, but truly surpassed the standard \nbearer. In short, I'm sold.\n\nIf you want to get a better sense of Vega, and Vega-Lite in particular, I'd \nrecommend this great talk from the creators at the Interactive Data Lab at \nthe University of Washington in Seattle: \nhttps:\/\/www.youtube.com\/watch?v=9uaHRWj04D4\n\nIf you're interested in a (mostly) more philosophical look at Vega & \nVega-Lite, and their connections to Clojure philosophy, I did a little talk \nat a local Clojure meetup which you may find interesting: \nhttps:\/\/www.youtube.com\/watch?v=hXq5Bb40zZY&t=815s\n\n\n*Oz*\n\nOz itself is a very small and focused library, as most of the work falls on \nVega & Vega-Lite. It offers the following features:\n\n   - A REPL API for for pushing vega and vega-lite data to a browser window \n   over websockets, for REPL-based data science workflows\n   - Client side vega and vega-lite Reagent components, for more dynamic \n   usage from ClojureScript apps\n   - A grammar for composing Vega & Vega-Lite together in the context of \n   html as hiccup, for document and dashboard generation\n   - Plot\/document publishing\/sharing features via GitHub gists, the IDL's \n   live vega editor <http:\/\/vega.github.io\/editor>, and the new \n   http:\/\/ozviz.io\n\nThe last two features in particular are where Oz really brings some \ninteresting value to the table beyond the role of a minimal wrapper. I have \nfound the ability to create and quickly share visualizations and scientific \ndocuments from the comfort of my favorite text editor and REPL a godsend. \nWhile the first several years of my programming experience were in notebook \nenvironments (Mathematica, MATLAB, Sage, etc), I now find the experience of \nwriting and executing code from a web application a burden. Part of my goal \nwith Oz was to create a viable alternative to this workflow, and so far \nI've been very pleased. The last piece to this now in place (the ability to \nshare hiccup+vega documents via http:\/\/ozviz.io), I'm excited to put this \nwork out more broadly and hear what the community thinks about this \napproach to the creation and sharing of scientific documents.\n\nThere are some other updates and improvements which those of you familiar \nwith Oz may wish to take a look at in the changelog, included updated Vega* \nlibs, and some smoothing out of the API and UI (\nhttps:\/\/github.com\/metasoarous\/oz\/blob\/master\/CHANGELOG.md). Otherwise, \nplease see the project README for up to date information on how to use the \nlibrary: https:\/\/github.com\/metasoarous\/oz.\n\n\nThanks for your time!\n\nChris\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Oz 1.4.0 - Interactive data visualizations and scientific documents with Vega\/Vega-Lite Christopher Small Mon, 17 Dec 2018 12:42:46 -0800"},
{"body":"forgot the link\n\n https:\/\/bitbucket.org\/sonwh98\/mr-clean\/src\/master\/ \nOn Sunday, December 16, 2018 at 8:17:30 AM UTC+2, Sonny To wrote:\n>\n> Mr Clean is a Reagent compatible ClojureScript library without dependency \n> on React.js. \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] Mr Clean: Reagent without React.js Sonny To Sat, 15 Dec 2018 22:23:27 -0800"},
{"body":"Mr Clean is a Reagent compatible ClojureScript library without dependency \non React.js. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Mr Clean: Reagent without React.js Sonny To Sat, 15 Dec 2018 22:18:05 -0800"},
{"body":"We are happy to announce a new release of the probabilistic programming\nlanguage Anglican. This release brings improvements and changes that\nhave accumulated over the last two years: \n  - ClojureScript support for all of Anglican's language and most of its\n    inference algorithms\n  - Clojure 1.9 support\n  - EPL relicencing (from GPL)\n  - Student's-T, Laplace distribution\n  - IPMCMC fixes and more\n\nYou can reach us in the #anglican channel on the Clojurians slack and\nlearn more on http:\/\/anglican.ml .\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"[ClojureScript] ANN: Anglican 1.1.0 Christian Weilbach Fri, 07 Dec 2018 14:38:29 -0800"},
{"body":"You are most welcome!\n\nOn Tue, Dec 4, 2018 at 11:41 AM Alan Moore <kahunamo...@coopsource.org>\nwrote: \n> This looks very useful, will give it a try. Thanks!\n>\n> Alan\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/hv70GwmTpW4\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] [ANN] Serene - generate clojure.spec with GraphQL and extend GraphQL with clojure.spec Dom Kiva-Meyer Tue, 04 Dec 2018 10:33:54 -0800"},
{"body":"This looks very useful, will give it a try. Thanks!\n\nAlan \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Serene - generate clojure.spec with GraphQL and extend GraphQL with clojure.spec Alan Moore Tue, 04 Dec 2018 08:42:02 -0800"},
{"body":"https:\/\/github.com\/paren-com\/serene \n\nSerene ingests GraphQL schemas and outputs Clojure specs. Serene is the \neasiest way to spec an entire API, whether internal or external.\n\n\nThese specs can be used for:\n\n   - validating API input \n   - validating API output \n   - speccing resolvers \n   - speccing functions that receive or return API data \n   - generating mock data that conforms \n   - and anything else where you might use specs \n\n\nWe announced Serene at Clojure\/conj. Here is the video: \nhttps:\/\/www.youtube.com\/watch?v=mgSSVTDZvkI\n\n\nIf you're using GraphQL, please give Serene a try.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Serene - generate clojure.spec with GraphQL and extend GraphQL with clojure.spec Dom Kiva-Meyer Mon, 03 Dec 2018 09:00:31 -0800"},
{"body":"This looks great!\n\nI immediately added the RSS feed to my podcast software, thanks! \nOn Wednesday, November 28, 2018 at 3:06:58 PM UTC-5, Daniel Compton wrote:\n>\n> Hi folks\n>\n> I've started a podcast \"The REPL\" about Clojure and ClojureScript to \n> accompany the weekly newsletter. I've written a little bit about the \n> background of starting it on my personal site \n> <https:\/\/danielcompton.net\/2018\/11\/20\/announcing-the-repl>, and you can \n> subscribe to the podcast or listen online at https:\/\/www.therepl.net.\n>\n> The REPL focuses on diving into Clojure programs and libraries in a \n> discussion with their creators. I've talked with a bunch \n> <https:\/\/www.therepl.net\/episodes\/> of awesome people already, and have \n> some great episodes in the pipeline too.\n>\n> If you like podcasts, then give it a try, perhaps on your way \n> <https:\/\/twitter.com\/ShaunMahood\/status\/1067662774996615173> to The Conj \n> this week?\n>\n> Thanks!\n> Daniel.\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Announcing The REPL podcast Christian Fortin Thu, 29 Nov 2018 13:16:36 -0800"},
{"body":"Hi folks\n\nI've started a podcast \"The REPL\" about Clojure and ClojureScript to\naccompany the weekly newsletter. I've written a little bit about the\nbackground of starting it on my personal site\n<https:\/\/danielcompton.net\/2018\/11\/20\/announcing-the-repl>, and you can\nsubscribe to the podcast or listen online at https:\/\/www.therepl.net. \nThe REPL focuses on diving into Clojure programs and libraries in a\ndiscussion with their creators. I've talked with a bunch\n<https:\/\/www.therepl.net\/episodes\/> of awesome people already, and have\nsome great episodes in the pipeline too.\n\nIf you like podcasts, then give it a try, perhaps on your way\n<https:\/\/twitter.com\/ShaunMahood\/status\/1067662774996615173> to The Conj\nthis week?\n\nThanks!\nDaniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Announcing The REPL podcast Daniel Compton Wed, 28 Nov 2018 12:07:09 -0800"},
{"body":"Hi Gareth,\n\nI've used a variety of CLJS-specific frameworks which I'll detail here, \ntogether with some links to help you get up and running. \nTo get you started, here is a good tutorial on using cljs.test together \nwith the doo framework which Alan has mentioned:\n\nhttps:\/\/hub.packtpub.com\/testing-your-application-cljstest\/\n\nThis is great for running tests from the command line, and you can try \nusing phantomjs for so-called headless browsing, but I found both of these \napproaches a little awkward, not to mention.\n\nI then found the following article which pointed me in the direction of \ndevcards by Bruce Hauman, the author of figwheel (which I hope you are \nusing as it makes everything a lot easier):\n\nTutorial: \nhttps:\/\/8thlight.com\/blog\/eric-smith\/2016\/10\/05\/a-testable-clojurescript-setup.html\n(starts with a tutorial of setting up doo as above, but you can skim \nthrough most of this.)\n\nDevcards homepage: https:\/\/github.com\/bhauman\/devcards\n\nDevcards is generally useful for testing individual React components, and \nprobably UI components in general, but can also be used to run unit tests \nas explained in the article. The drawbacks are also explained in the \narticle, and somewhere Bruce Hauman had responded to one of the issues \n(specifically the lack of fixtures) by encouraging the submitter to use his \nlatest framework, cljs-test-display. I only saw that a couple of weeks ago \nmyself and have just installed it. Effectively it lets you run tests in the \nbrowser without any of the limitations of Devcards. So far so good I am \nvery happy with it. You can in fact have both (that is Devcards and \ncljs-test-display) running alongside each other no problem should you \nrequire general browser testing (in Devcards) and all other unit tests (in \ncljs-test-display.)\n\ncljs-test-display homepage: https:\/\/github.com\/bhauman\/cljs-test-display\n\nThe biggest challenge to getting a lot of these running involves fiddling \naround with your project.clj file, so I'm hoping you're quite proficient \nwith that. If not, let us know and I'm sure someone can help.\n\nHappy testing.\nAli\n\n\nOn Friday, November 9, 2018 at 11:44:57 PM UTC+5:30, Gareth James wrote:\n>\n> I'm currently researching different methods for testing clojurescipt code, \n> specifically unit testing, automated browser testing and code coverage. I'm \n> specifically trying to find more information about the use of cljs.test and \n> cljs.spec either individually or together. Could anyone share any \n> experience they have of using either of these or any other information \n> about how they are testing their code.\n>\n> Thanks\n> Gareth\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Clojurescript testing outrovurt Tue, 20 Nov 2018 06:53:04 -0800"},
{"body":"In the meantime I figured out that creating a file figwheel-main.edn with\n{:watch-dirs [\"src\"]}\nmakes auto-reload working.\nBut the tutorial creates the impression that auto-reload is the default and \nspecifying the :watch-dirs key is not necessary \nAm Sonntag, 18. November 2018 22:12:06 UTC+1 schrieb Johannes Brauer:\n>\n> Hi,\n>\n> following the tutorial <https:\/\/figwheel.org\/tutorial> I am encountering \n> the following problem:\n>\n> Under the headline Starting the REPL already intialized with your code \n> <https:\/\/figwheel.org\/tutorial#starting-the-repl-already-intialized-with-your-code>\n>  it \n> is described how changed code is compiled and reloaded automatically.\n> But I don' see the line\n> [image: watching line in output] \n> and after changing and saving the cruel_world.cljs file nothing happens.\n> I am using the deps.edn file as described in the tutorial.\n>\n> Johannes\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Problem with fig wheel.main tutorial (automatic reload doesn't work?) 'Johannes Brauer' via ClojureScript Tue, 20 Nov 2018 04:47:22 -0800"},
{"body":"Happy to announce Quil 2.8.0 release.\nQuil is a Clojure\/ClojureScript library for creating interactive drawings\nand animations. \nThe release available on clojars: https:\/\/clojars.org\/quil. List of changes:\n\n   - New looping? function. Contributed by @NightMachinary\n   <https:\/\/github.com\/NightMachinary> in #244\n   <https:\/\/github.com\/quil\/quil\/pull\/244>.\n   - Improved fullscreen support. #240\n   <https:\/\/github.com\/quil\/quil\/issues\/240>.\n   - Improved with-sketch and with-stroke macros. Contributed by @zck\n   <https:\/\/github.com\/zck>. Not it works both in Clojure and ClojureScript\n   versions.\n   - Removed the following functions: abs-int, abs-float, ambient-float,\n   ambient-int, background-float, baackground-int, constrain-float,\n   constrain-int, emissive-float, emissive-int, fill-float, fill-int,\n   stroke-float, stroke-int, tint-float, tint-int. Only their counterpart\n   without int\/float left and work both in Clojure and ClojureScript.\n   - Documentation improvements by @Alex-Keyes\n   <https:\/\/github.com\/Alex-Keyes>.\n   - Refactoring of snippets to use them in API docs. See #246\n   <https:\/\/github.com\/quil\/quil\/issues\/246>.\n\nAnother change is improvements in API documentation on http:\/\/quil.info.\nFor each API function you can now see one or more examples of how to use\nit. Examples are taken from the Quil tests and guaranteed to work. You can\nalso try and play with them online using \"try example\" button.\n\nExample: http:\/\/quil.info\/api\/color\/creating-and-reading#alpha\n\nIf you find confusing or puzzling examples - please report them using\n\"report example\" button or file a bug on Quil repo or just send email to\nclj-process...@googlegroups.com.\n\nHappy hacking!\n\nMikita\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Quil 2.8.0 Release Mikita Belahlazau Mon, 19 Nov 2018 08:33:39 -0800"},
{"body":"See https:\/\/dev.clojure.org\/jira\/browse\/CLJS-2722 \nYou can give eval-str a callback which is called with the result of the \nevaluation, see http:\/\/cljs.github.io\/api\/cljs.js\/eval-str\n\nOn Wednesday, 14 November 2018 18:38:13 UTC+1, Kashyap CK wrote:\n>\n> I was trying to dabble with eval and found the same thing - is there a \n> newer way to do eval in cljs?\n>\n> On Friday, March 30, 2018 at 10:30:54 PM UTC-7, Richard Davies wrote:\n>>\n>> Ok so I've deleted my project's out and .cpcache directories and my ~\/.m2 \n>> directory just in case there was something being cached between the two \n>> versions and this still isn't working as expected. There's nothing in the \n>> release notes at https:\/\/clojurescript.org\/news\/2018-03-26-release about \n>> changes to compiler options in eval-str\/eval but before I log a bug, could \n>> someone else who has changed to 1.10.238 try this snippet to see if it \n>> works?\n>>\n>> (ns my.sample\n>>   (:require [cljs.js :as cjs]))\n>>\n>> (enable-console-print!)\n>>\n>> (println (cjs\/eval-str (cjs\/empty-state) \"(+ 1 1)\" \"\" {:context :expr \n>> :eval cjs\/js-eval} identity))\n>>\n>> In 1.9.946 it returns {:ns cljs.user, :value 2} and it's returning nil in \n>> 1.10.238\n>>\n>> I'm testing in Chrome 65.0.3325.181\n>>\n>> Thanks,\n>> Richard\n>>\n>> On Wednesday, 28 March 2018 01:39:45 UTC+11, Richard Davies wrote:\n>>>\n>>> Hi,\n>>>\n>>> This code\n>>>   (cjs\/eval-str (cjs\/empty-state) \"(+ 1 1)\" \"some.name\" {:context :expr \n>>> :eval cjs\/js-eval} identity)\n>>>\n>>> executes as expected under 1.9.946, but in 1.10.238 returns nil. Do I \n>>> need to set different compiler options now, or is this a bug?\n>>>\n>>> I have tried eval under both versions and it behaves the same way; it's \n>>> only eval-str that seems to show a difference between versions.\n>>>\n>>> Regards,\n>>> Richard\n>>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Differences in eval-str between ClojureScript 1.9.946 and 1.10.238 ? dieter . komendera Mon, 19 Nov 2018 07:10:50 -0800"},
{"body":"Hi,\n\nfollowing the tutorial <https:\/\/figwheel.org\/tutorial> I am encountering \nthe following problem: \nUnder the headline Starting the REPL already intialized with your code \n<https:\/\/figwheel.org\/tutorial#starting-the-repl-already-intialized-with-your-code>\n it \nis described how changed code is compiled and reloaded automatically.\nBut I don' see the line\n[image: watching line in output] \nand after changing and saving the cruel_world.cljs file nothing happens.\nI am using the deps.edn file as described in the tutorial.\n\nJohannes\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Problem with fig wheel.main tutorial (automatic reload doesn't work?) 'Johannes Brauer' via ClojureScript Sun, 18 Nov 2018 13:12:16 -0800"},
{"body":"Hi,\n\nI'm no core.async expert but I wrote some core-async-heavy code in the \npast[1]. \nAsync code is contagious. It is better to extract all code which does not \nneed to be async into separate functions and introduce async at the edges \nof the system. To keep track of my async\/non-async code split I adopted \npretty useful naming convention. All (async) functions returning channels \nas a promise (typically using go block internally) should have `go-` \nprefix. This way it is clear at all call sites that a channel yielding a \nresult is expected. And also this promotes writing functions which are \n\"purely async\" - they must always return a channel from all possible \nbranches, as the `go-` prefix suggests.\n\nI went as far as writing my own macros to wrap subset of core.async to use \nthis naming convention[2].\n\njust my $.02\nAntonin\n\n[1] \nhttps:\/\/github.com\/binaryage\/dirac\/tree\/master\/src\/background\/dirac\/background\n[2] \nhttps:\/\/github.com\/binaryage\/dirac\/blob\/master\/src\/shared\/dirac\/shared\/async.clj\n\n\nOn Tuesday, November 13, 2018 at 4:10:48 PM UTC+1, Kashyap CK wrote:\n>\n> [Apologies for cross-posting - but I realize that Clojurescript group may \n> be a better place for this query than the Clojure group :) ]\n>\n> Hi all,\n>\n>\n> I am attempting to use core.async to poll a service - \n> https:\/\/gist.github.com\/ckkashyap\/c8423dcfc3a3f28b67e18ae76cc13f53\n>\n> Broadly, I need to hit the service endpoint with a secret to get a token \n> and subsequently use the token to poll for messages.\n>\n>\n> I'd appreciate any feedback on the approach - particularly around\n>\n> 1. Error handling\n>\n> 2. Use of channels\n>\n>\n> Is there some project out there I could take a look at to learn the \n> right\/good way to do this?\n>\n>\n> Regards,\n>\n> Kashyap\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Request to review my CLJS using core.async Antonin Hildebrand Wed, 14 Nov 2018 11:39:01 -0800"},
{"body":"I was trying to dabble with eval and found the same thing - is there a \nnewer way to do eval in cljs? \nOn Friday, March 30, 2018 at 10:30:54 PM UTC-7, Richard Davies wrote:\n>\n> Ok so I've deleted my project's out and .cpcache directories and my ~\/.m2 \n> directory just in case there was something being cached between the two \n> versions and this still isn't working as expected. There's nothing in the \n> release notes at https:\/\/clojurescript.org\/news\/2018-03-26-release about \n> changes to compiler options in eval-str\/eval but before I log a bug, could \n> someone else who has changed to 1.10.238 try this snippet to see if it \n> works?\n>\n> (ns my.sample\n>   (:require [cljs.js :as cjs]))\n>\n> (enable-console-print!)\n>\n> (println (cjs\/eval-str (cjs\/empty-state) \"(+ 1 1)\" \"\" {:context :expr \n> :eval cjs\/js-eval} identity))\n>\n> In 1.9.946 it returns {:ns cljs.user, :value 2} and it's returning nil in \n> 1.10.238\n>\n> I'm testing in Chrome 65.0.3325.181\n>\n> Thanks,\n> Richard\n>\n> On Wednesday, 28 March 2018 01:39:45 UTC+11, Richard Davies wrote:\n>>\n>> Hi,\n>>\n>> This code\n>>   (cjs\/eval-str (cjs\/empty-state) \"(+ 1 1)\" \"some.name\" {:context :expr \n>> :eval cjs\/js-eval} identity)\n>>\n>> executes as expected under 1.9.946, but in 1.10.238 returns nil. Do I \n>> need to set different compiler options now, or is this a bug?\n>>\n>> I have tried eval under both versions and it behaves the same way; it's \n>> only eval-str that seems to show a difference between versions.\n>>\n>> Regards,\n>> Richard\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Differences in eval-str between ClojureScript 1.9.946 and 1.10.238 ? Kashyap CK Wed, 14 Nov 2018 09:38:29 -0800"},
{"body":"Thank you Moe ... just what I was looking for.\n\nOn Tuesday, November 13, 2018 at 9:25:42 AM UTC-8, Moe Aboulkheir wrote:\n>\n> On Tue, Nov 13, 2018 at 5:23 PM Moe Aboulkheir <m...@nervous.io \n> <javascript:>> wrote:\n>\n>>\n>>  - Contrast https:\/\/clojure.github.io\/core.async\/#clojure.core.async\/put! \n>> w\/ your use of (go (>! x))\n>>\n>\n> w\/ your use of (go (>! ch response)), rather.\n>\n> Take care,\n> Moe \n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Request to review my CLJS using core.async Kashyap CK Tue, 13 Nov 2018 15:57:01 -0800"},
{"body":"On Tue, Nov 13, 2018 at 5:23 PM Moe Aboulkheir <m...@nervous.io> wrote: \n>\n>  - Contrast https:\/\/clojure.github.io\/core.async\/#clojure.core.async\/put!\n> w\/ your use of (go (>! x))\n>\n\nw\/ your use of (go (>! ch response)), rather.\n\nTake care,\nMoe\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Request to review my CLJS using core.async Moe Aboulkheir Tue, 13 Nov 2018 09:25:55 -0800"},
{"body":"Kayshap,\n\nJust a couple of notes, which presume you've a good reason for inventing\nanother bridge between browser-native apis and core.async:\n - Contrast https:\/\/clojure.github.io\/core.async\/#clojure.core.async\/put!\nw\/ your use of (go (>! x))\n - In general, functions which place values onto channels may benefit from\noptionally accepting channels (`[& {:keys [chan] :or {chan (async\/chan}]`),\n- or whatever - doing the defaulting in a let binding is probably more\nreadable.  In the case of get-token, it could e.g. pass in a channel w\/ an\nmap xform (see async\/chan's docs). \nThere's a lot of redundancy in this function:\n\n(defn get-message [endpoint token]\n  (let [input-chan (do-request endpoint \"GET\" \"\" {\"Authorization\" (str\n\"Bearer: \" token)})\n        output-chan (chan)\n        _ (go (let [input-result (<! input-chan)]\n                (>! output-chan input-result)))]\n       output-chan))\n\nNote that 'go' creates a channel, containing the value the body of the\nvalue the go block evaluates to.  Let's try shrinking the function a little:\n\n(defn get-message [endpoint token]\n  (let [input-chan (do-request endpoint \"GET\" \"\" {\"Authorization\" (str\n\"Bearer: \" token)})]\n    (go\n     (let [input-result (<! input-chan)]\n       input-result)))\n\nAs 'do-request' already returns a channel, and we don't want to transform\nits value\/s, we can shrink the function further:\n\n(defn get-message [endpoint token]\n  (do-request endpoint \"GET\" \"\" {\"Authorization\" (str \"Bearer: \" token)}))\n\nThis generalizes to many of the other functions, in which there is apparent\nconfusion about what 'go' does, and why and when channels ought to be\ncreated.  The core.async API docs & writeup are pretty good, and I think\nit's likely there's some relevant content on YouTube.\n\n- 'f' isn't accomplishing anything in do-poll, and async\/go-loop and\nasync\/timeout may be more readable ways of expressing do-poll's dynamics.\n- There's a few weird things that don't relate to core.async, like binding\nexpressions to \"_\" within (let), which - while helpful for print statements\nduring debugging - is difficult to justify in other context.\n\nTake care,\nMoe\n\n\nOn Tue, Nov 13, 2018 at 3:10 PM Kashyap CK <ckkash...@gmail.com> wrote:\n\n> [Apologies for cross-posting - but I realize that Clojurescript group may\n> be a better place for this query than the Clojure group :) ]\n>\n> Hi all,\n>\n>\n> I am attempting to use core.async to poll a service -\n> https:\/\/gist.github.com\/ckkashyap\/c8423dcfc3a3f28b67e18ae76cc13f53\n>\n> Broadly, I need to hit the service endpoint with a secret to get a token\n> and subsequently use the token to poll for messages.\n>\n>\n> I'd appreciate any feedback on the approach - particularly around\n>\n> 1. Error handling\n>\n> 2. Use of channels\n>\n>\n> Is there some project out there I could take a look at to learn the\n> right\/good way to do this?\n>\n>\n> Regards,\n>\n> Kashyap\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Request to review my CLJS using core.async Moe Aboulkheir Tue, 13 Nov 2018 09:24:09 -0800"},
{"body":"[Apologies for cross-posting - but I realize that Clojurescript group may \nbe a better place for this query than the Clojure group :) ] \nHi all,\n\n\nI am attempting to use core.async to poll a service - \nhttps:\/\/gist.github.com\/ckkashyap\/c8423dcfc3a3f28b67e18ae76cc13f53\n\nBroadly, I need to hit the service endpoint with a secret to get a token \nand subsequently use the token to poll for messages.\n\n\nI'd appreciate any feedback on the approach - particularly around\n\n1. Error handling\n\n2. Use of channels\n\n\nIs there some project out there I could take a look at to learn the \nright\/good way to do this?\n\n\nRegards,\n\nKashyap\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Request to review my CLJS using core.async Kashyap CK Tue, 13 Nov 2018 07:11:06 -0800"},
{"body":"I found a strange workaround :\n\nclj --main cljs.main --verbose --repl-opts \"{:launch-browser false}\" \n--compile hello-world.core --repl \nThen open a brower manually.\n\n\nOn Sunday, November 11, 2018 at 8:48:13 AM UTC+1, Demeter Purjon wrote:\n>\n> Hello !\n>\n> I strictly followed the tutorial here : \n> https:\/\/clojurescript.org\/guides\/quick-start\n>\n> Clojurescript is perfectly compiling the hello-world.core namespace. \n> Browser shows up, on terminal I can read \"Hello World\". \n>\n> > clj --main cljs.main --verbose --compile hello-world.core --repl\n>\n> Options passed to ClojureScript compiler: {:output-dir \"out\", \n> :closure-warnings {:check-types :off, :check-variables :off}, \n> :closure-defines {}, :ups-libs nil, :cache-analysis true, \n> :closure-module-roots [], :optimizations :none, :ups-foreign-libs [], \n> :verbose true, :aot-cache true, :preloads [process.env \n> clojure.browser.repl.preload], :ignore-js-module-exts [\".css\"], :output-to \n> \"out\/main.js\", :preamble [\"cljs\/imul.js\"], :browser-repl true, :ups-externs \n> nil, :opts-cache \"cljsc_opts.edn\", :source-map true, :cache-analysis-format \n> :transit, :main hello-world.core, :emit-constants nil, :npm-deps false}\n> REPL env options: {:output-dir \"out\"}\n> Reading analysis cache for \n> jar:file:\/home\/stup3fait\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.439\/clojurescript-1.10.439.jar!\/cljs\/core.cljs\n> Hello world\n>\n> *But I never get the repl prompt. *\n>\n> No errors in chrome dev console, nor in terminal. Something seems to \n> \"block\".\n>\n> I tried several version of clojurescript, same problem.\n>\n> From the browser perspective, when I hit F5, there are 4 XHR requests sent \n> to localhost:9000 :\n>\n> Request 1 : response = \n> {\"repl\":\"Thread-263\",\"form\":\"cljs.core._STAR_print_fn_STAR_ = \n> clojure.browser.repl.repl_print;\\ncljs.core._STAR_print_err_fn_STAR_ = \n> clojure.browser.repl.repl_print;\\ncljs.core._STAR_print_newline_STAR_ = \n> true;\\nif((cljs.core.count.call(null,clojure.browser.repl.print_queue) > \n> (0))){\\nclojure.browser.repl.flush_print_queue_BANG_(cljs.core.deref.call(null,clojure.browser.repl.xpc_connection));\\n}\n>  \n> else {\\n}\\n\"}\n> Request 2 : response =  ignore__\n> Request 3 : response = ignore__\n> Request 4 : interstingly, this request do not responds. It's in PENDING \n> state.\n>\n> Those 4 requests are about robots.txt (!?), like : \n> http:\/\/localhost:9000\/repl?xpc=%7B%22cn%22%3A%22mpJZAw6akG%22%2C%22tp%22%3Anull%2C%22osh%22%3Anull%2C%22ppu%22%3A%22http%3A%2F%2Flocalhost%3A9000%2Frobots.txt%22%2C%22lpu%22%3A%22http%3A%2F%2Flocalhost%3A9000%2Frobots.txt%22%7D\n>\n> I tried both firefox and chrome with same behaviour.\n>\n> This hanging request may not be the reason why my repl never shows up. I \n> don't really understand how the repl and the browser are wired together.\n> I was expecting some kind of websocket connection for communication \n> between browser and repl but none is opened.\n>\n> If I launch a node repl (--repl-env node), I got a repl prompt and can \n> play with my app.\n>\n> When I quit the browser, I have a \"Broken pipe\" java exception in \n> terminal, so terminal is somehow connected with browser.\n>\n> Did you solve this problem in the past ?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: I did the Clojurescript quickstart, repl prompt never shows up Demeter Purjon Sun, 11 Nov 2018 00:02:46 -0800"},
{"body":"Hello !\n\nI strictly followed the tutorial here : \nhttps:\/\/clojurescript.org\/guides\/quick-start \nClojurescript is perfectly compiling the hello-world.core namespace. \nBrowser shows up, on terminal I can read \"Hello World\". \n\n> clj --main cljs.main --verbose --compile hello-world.core --repl\n\nOptions passed to ClojureScript compiler: {:output-dir \"out\", \n:closure-warnings {:check-types :off, :check-variables :off}, \n:closure-defines {}, :ups-libs nil, :cache-analysis true, \n:closure-module-roots [], :optimizations :none, :ups-foreign-libs [], \n:verbose true, :aot-cache true, :preloads [process.env \nclojure.browser.repl.preload], :ignore-js-module-exts [\".css\"], :output-to \n\"out\/main.js\", :preamble [\"cljs\/imul.js\"], :browser-repl true, :ups-externs \nnil, :opts-cache \"cljsc_opts.edn\", :source-map true, :cache-analysis-format \n:transit, :main hello-world.core, :emit-constants nil, :npm-deps false}\nREPL env options: {:output-dir \"out\"}\nReading analysis cache for \njar:file:\/home\/stup3fait\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.439\/clojurescript-1.10.439.jar!\/cljs\/core.cljs\nHello world\n\n*But I never get the repl prompt. *\n\nNo errors in chrome dev console, nor in terminal. Something seems to \n\"block\".\n\nI tried several version of clojurescript, same problem.\n\n>From the browser perspective, when I hit F5, there are 4 XHR requests sent \nto localhost:9000 :\n\nRequest 1 : response = \n{\"repl\":\"Thread-263\",\"form\":\"cljs.core._STAR_print_fn_STAR_ = \nclojure.browser.repl.repl_print;\\ncljs.core._STAR_print_err_fn_STAR_ = \nclojure.browser.repl.repl_print;\\ncljs.core._STAR_print_newline_STAR_ = \ntrue;\\nif((cljs.core.count.call(null,clojure.browser.repl.print_queue) > \n(0))){\\nclojure.browser.repl.flush_print_queue_BANG_(cljs.core.deref.call(null,clojure.browser.repl.xpc_connection));\\n}\n \nelse {\\n}\\n\"}\nRequest 2 : response =  ignore__\nRequest 3 : response = ignore__\nRequest 4 : interstingly, this request do not responds. It's in PENDING \nstate.\n\nThose 4 requests are about robots.txt (!?), like : \nhttp:\/\/localhost:9000\/repl?xpc=%7B%22cn%22%3A%22mpJZAw6akG%22%2C%22tp%22%3Anull%2C%22osh%22%3Anull%2C%22ppu%22%3A%22http%3A%2F%2Flocalhost%3A9000%2Frobots.txt%22%2C%22lpu%22%3A%22http%3A%2F%2Flocalhost%3A9000%2Frobots.txt%22%7D\n\nI tried both firefox and chrome with same behaviour.\n\nThis hanging request may not be the reason why my repl never shows up. I \ndon't really understand how the repl and the browser are wired together.\nI was expecting some kind of websocket connection for communication between \nbrowser and repl but none is opened.\n\nIf I launch a node repl (--repl-env node), I got a repl prompt and can play \nwith my app.\n\nWhen I quit the browser, I have a \"Broken pipe\" java exception in terminal, \nso terminal is somehow connected with browser.\n\nDid you solve this problem in the past ?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] I did the Clojurescript quickstart, repl prompt never shows up Demeter Purjon Sat, 10 Nov 2018 23:48:31 -0800"},
{"body":"If someone allowed me to process keystrokes asynchronously, then I would \nmake a terrible mess and they would register out-of-order.  On the question \nof native vs imitation widgets, there is an interesting answer in React \nDraft (https:\/\/draftjs.org\/) - which could be summarized as \"native, but \nguess what!?\" \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: The problem with native browser controls Phill Wolf Sat, 10 Nov 2018 17:09:01 -0800"},
{"body":"It is true that you must update an input element synchronously, but the\nalternative would be incredibly complicated, and I doubt it could reach\nfeature parity.  You'd have to handle every keypress, of course.  Then\nyou'd have to keep track of the cursor, which could change on touch events\nand mouse clicks.  If you have a multiline input, the up\/down arrow would\nhave to be handled manually, which would be challenging with a variable\nwidth font.  Then you'd want to interface with the clipboard api if you\nwant pasting to work.  You'll lose a lot of nice built-in features, like\nspell check.  I'm not sure whether it is possible to use adaptive keyboard\ntechnology or text-to-speech on mobile without using native input\nelements.  Accessibility would be out the window. \nAll of this kind of depends on what your goals are.  If it is rich text, I\nthink the technology of choice is to use contenteditable divs, though I've\nnever done that myself (it's what gmail uses, for what it is worth).  But\nas far as I know you'll have to update the divs synchronously there too.\n\nOn Sat, Nov 10, 2018 at 12:30 PM Lyn Headley <lahea...@gmail.com> wrote:\n\n> Has anyone ever wondered whether the native browser supplied textarea\n> elements are more trouble than they're worth? I'm thinking from the\n> perspective of a react based application that wants to use something like\n> core.async for event handling. If you are currently typing into a text\n> area, then the key down events are not really handled by your application\n> but by the browser. You cannot simply dispatch each event to a more\n> centrally located and more asynchronous event handling process in your\n> application, because you have to either prevent default or not from within\n> the synchronous event handler itself. And so the decision whether or not to\n> handle a key press event using the full logic of your application must be\n> made within the event handler, and cannot be delegated to an asynchronous\n> and intelligent process. To me this is a major drawback of using browser\n> native controls like textarea and others. I wonder if it is worth the\n> effort to re implement them entirely in clojurescript and\/or react.\n>\n> Has anyone else had thoughts along these lines and do my thoughts make\n> sense?\n>\n> Lyn\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] The problem with native browser controls Justin Lee Sat, 10 Nov 2018 13:27:01 -0800"},
{"body":"Has anyone ever wondered whether the native browser supplied textarea \nelements are more trouble than they're worth? I'm thinking from the \nperspective of a react based application that wants to use something like \ncore.async for event handling. If you are currently typing into a text \narea, then the key down events are not really handled by your application \nbut by the browser. You cannot simply dispatch each event to a more \ncentrally located and more asynchronous event handling process in your \napplication, because you have to either prevent default or not from within \nthe synchronous event handler itself. And so the decision whether or not to \nhandle a key press event using the full logic of your application must be \nmade within the event handler, and cannot be delegated to an asynchronous \nand intelligent process. To me this is a major drawback of using browser \nnative controls like textarea and others. I wonder if it is worth the \neffort to re implement them entirely in clojurescript and\/or react. \nHas anyone else had thoughts along these lines and do my thoughts make \nsense?\n\nLyn\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] The problem with native browser controls Lyn Headley Sat, 10 Nov 2018 12:30:20 -0800"},
{"body":"This setup includes the ability to use\/test native JS libs in 3 different\nways, which required a bit of a struggle (i.e. trial & error) to get the\nsyntax right.  Here are the native JavaScript files in ~\/resources: \n~\/expr\/cljs-template > tree resources\nresources\n\u2514\u2500\u2500 public\n    \u251c\u2500\u2500 css\n    \u2502   \u2514\u2500\u2500 style.css\n    \u251c\u2500\u2500 dino-externs.js\n    \u251c\u2500\u2500 dino.js\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 js\n    \u251c\u2500\u2500 libs\n    \u2502   \u2514\u2500\u2500 wilma.js\n    \u2514\u2500\u2500 pebbles.js\n\n\n\nOn Fri, Nov 9, 2018 at 2:18 PM Alan Thompson <clooj...@gmail.com> wrote:\n\n> You can see the source layout as follows:\n>\n> ~\/expr\/cljs-template > tree src test\n> src\n> \u251c\u2500\u2500 clj\n> \u2502   \u2514\u2500\u2500 flintstones\n> \u2502       \u2514\u2500\u2500 test_clj.clj\n> \u251c\u2500\u2500 cljc\n> \u2502   \u2514\u2500\u2500 flintstones\n> \u2502       \u251c\u2500\u2500 bambam.cljc\n> \u2502       \u251c\u2500\u2500 core.cljc\n> \u2502       \u251c\u2500\u2500 slate.cljc\n> \u2502       \u2514\u2500\u2500 test_cljs.cljc\n> \u2514\u2500\u2500 cljs\n>     \u2514\u2500\u2500 flintstones\n>         \u2514\u2500\u2500 test_cljs.cljs\n> test\n> \u251c\u2500\u2500 clj\n> \u251c\u2500\u2500 cljc\n> \u2502   \u2514\u2500\u2500 tst\n> \u2502       \u2514\u2500\u2500 flintstones\n> \u2502           \u251c\u2500\u2500 bambam.cljc\n> \u2502           \u2514\u2500\u2500 slate.cljc\n> \u2514\u2500\u2500 cljs\n>     \u2514\u2500\u2500 tst\n>         \u2514\u2500\u2500 flintstones\n>             \u251c\u2500\u2500 dino.cljs\n>             \u251c\u2500\u2500 doorunner.cljs\n>             \u251c\u2500\u2500 pebbles.cljs\n>             \u2514\u2500\u2500 wilma.cljs\n>\n> 13 directories, 12 files\n>\n>\n>\n>\n>\n> On Fri, Nov 9, 2018 at 2:17 PM Alan Thompson <clooj...@gmail.com> wrote:\n>\n>> I have a nice setup for CLJS testing using the `doo` test framework.  It\n>> can run tests either at the command line using `phantomjs` or in the\n>> browser (eg Chrome).  It has source and test dirs segregrated into `clj`,\n>> `cljc`, and `cljs` subdirs so you can get macros and dual-use code working\n>> correctly.  You can see it here:\n>>\n>>     https:\/\/github.com\/cloojure\/cljs-template\n>>\n>> A sample run:\n>>\n>>\n>> ~\/expr\/cljs-template > lein clean ; time lein doo phantom test once\n>>\n>> ;; ======================================================================\n>> ;; Testing with Phantom:\n>>\n>> doorunner - beginning\n>> doorunner - end\n>>\n>> Testing tst.flintstones.dino\n>> test once - enter\n>> globalObject:   #js {:a 1, :b 2, :c 3}\n>> (-> % .-b (+ 5) => 7\n>> (js\/makeDino) => #js {:desc blue dino-dog, :says #object[Function]}\n>> dino.desc =>  blue dino-dog\n>> dino.says(5) =>  Ruff-Ruff-Ruff-Ruff-Ruff!\n>> :keep-words (\"am\" \"having\" \"today\")\n>> :re-seq (\"am\" \"having\" \"today\")\n>> test once - leave\n>>\n>> Testing tst.flintstones.wilma\n>> test each - enter\n>> test each - leave\n>> test each - enter\n>> wilmaPhony\/stats:    #js {:lipstick red, :height 5.5}\n>> wilma => #js {:desc patient housewife, :says #object[Function]}\n>> test each - leave\n>>\n>> Testing tst.flintstones.pebbles\n>> test once - enter\n>> test once - leave\n>>\n>> Testing tst.flintstones.slate\n>> logr-slate-enter\n>> logr-slate-leave 3\n>>\n>> Testing tst.flintstones.bambam\n>> test each - enter\n>> test each - leave\n>> test each - enter\n>> logr-bambam-enter\n>> logr-bambam-leave 3\n>> test each - leave\n>>\n>> Ran 9 tests containing 22 assertions.\n>> 0 failures, 0 errors.\n>> lein doo phantom test once  38.52s user 0.84s system 333% cpu 11.813 total\n>>\n>>\n>>\n>> On Fri, Nov 9, 2018 at 10:14 AM Gareth James <garet...@gmail.com> wrote:\n>>\n>>> I'm currently researching different methods for testing clojurescipt\n>>> code, specifically unit testing, automated browser testing and code\n>>> coverage. I'm specifically trying to find more information about the use of\n>>> cljs.test and cljs.spec either individually or together. Could anyone share\n>>> any experience they have of using either of these or any other information\n>>> about how they are testing their code.\n>>>\n>>> Thanks\n>>> Gareth\n>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>> To post to this group, send email to clojurescript@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Clojurescript testing Alan Thompson Fri, 09 Nov 2018 14:21:03 -0800"},
{"body":"You can see the source layout as follows:\n\n~\/expr\/cljs-template > tree src test\nsrc\n\u251c\u2500\u2500 clj\n\u2502   \u2514\u2500\u2500 flintstones\n\u2502       \u2514\u2500\u2500 test_clj.clj\n\u251c\u2500\u2500 cljc\n\u2502   \u2514\u2500\u2500 flintstones\n\u2502       \u251c\u2500\u2500 bambam.cljc\n\u2502       \u251c\u2500\u2500 core.cljc\n\u2502       \u251c\u2500\u2500 slate.cljc\n\u2502       \u2514\u2500\u2500 test_cljs.cljc\n\u2514\u2500\u2500 cljs\n    \u2514\u2500\u2500 flintstones\n        \u2514\u2500\u2500 test_cljs.cljs\ntest\n\u251c\u2500\u2500 clj\n\u251c\u2500\u2500 cljc\n\u2502   \u2514\u2500\u2500 tst\n\u2502       \u2514\u2500\u2500 flintstones\n\u2502           \u251c\u2500\u2500 bambam.cljc\n\u2502           \u2514\u2500\u2500 slate.cljc\n\u2514\u2500\u2500 cljs\n    \u2514\u2500\u2500 tst\n        \u2514\u2500\u2500 flintstones\n            \u251c\u2500\u2500 dino.cljs\n            \u251c\u2500\u2500 doorunner.cljs\n            \u251c\u2500\u2500 pebbles.cljs\n            \u2514\u2500\u2500 wilma.cljs \n13 directories, 12 files\n\n\n\n\n\nOn Fri, Nov 9, 2018 at 2:17 PM Alan Thompson <clooj...@gmail.com> wrote:\n\n> I have a nice setup for CLJS testing using the `doo` test framework.  It\n> can run tests either at the command line using `phantomjs` or in the\n> browser (eg Chrome).  It has source and test dirs segregrated into `clj`,\n> `cljc`, and `cljs` subdirs so you can get macros and dual-use code working\n> correctly.  You can see it here:\n>\n>     https:\/\/github.com\/cloojure\/cljs-template\n>\n> A sample run:\n>\n>\n> ~\/expr\/cljs-template > lein clean ; time lein doo phantom test once\n>\n> ;; ======================================================================\n> ;; Testing with Phantom:\n>\n> doorunner - beginning\n> doorunner - end\n>\n> Testing tst.flintstones.dino\n> test once - enter\n> globalObject:   #js {:a 1, :b 2, :c 3}\n> (-> % .-b (+ 5) => 7\n> (js\/makeDino) => #js {:desc blue dino-dog, :says #object[Function]}\n> dino.desc =>  blue dino-dog\n> dino.says(5) =>  Ruff-Ruff-Ruff-Ruff-Ruff!\n> :keep-words (\"am\" \"having\" \"today\")\n> :re-seq (\"am\" \"having\" \"today\")\n> test once - leave\n>\n> Testing tst.flintstones.wilma\n> test each - enter\n> test each - leave\n> test each - enter\n> wilmaPhony\/stats:    #js {:lipstick red, :height 5.5}\n> wilma => #js {:desc patient housewife, :says #object[Function]}\n> test each - leave\n>\n> Testing tst.flintstones.pebbles\n> test once - enter\n> test once - leave\n>\n> Testing tst.flintstones.slate\n> logr-slate-enter\n> logr-slate-leave 3\n>\n> Testing tst.flintstones.bambam\n> test each - enter\n> test each - leave\n> test each - enter\n> logr-bambam-enter\n> logr-bambam-leave 3\n> test each - leave\n>\n> Ran 9 tests containing 22 assertions.\n> 0 failures, 0 errors.\n> lein doo phantom test once  38.52s user 0.84s system 333% cpu 11.813 total\n>\n>\n>\n> On Fri, Nov 9, 2018 at 10:14 AM Gareth James <garet...@gmail.com> wrote:\n>\n>> I'm currently researching different methods for testing clojurescipt\n>> code, specifically unit testing, automated browser testing and code\n>> coverage. I'm specifically trying to find more information about the use of\n>> cljs.test and cljs.spec either individually or together. Could anyone share\n>> any experience they have of using either of these or any other information\n>> about how they are testing their code.\n>>\n>> Thanks\n>> Gareth\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Clojurescript testing Alan Thompson Fri, 09 Nov 2018 14:18:40 -0800"},
{"body":"I have a nice setup for CLJS testing using the `doo` test framework.  It\ncan run tests either at the command line using `phantomjs` or in the\nbrowser (eg Chrome).  It has source and test dirs segregrated into `clj`,\n`cljc`, and `cljs` subdirs so you can get macros and dual-use code working\ncorrectly.  You can see it here: \n    https:\/\/github.com\/cloojure\/cljs-template\n\nA sample run:\n\n\n~\/expr\/cljs-template > lein clean ; time lein doo phantom test once\n\n;; ======================================================================\n;; Testing with Phantom:\n\ndoorunner - beginning\ndoorunner - end\n\nTesting tst.flintstones.dino\ntest once - enter\nglobalObject:   #js {:a 1, :b 2, :c 3}\n(-> % .-b (+ 5) => 7\n(js\/makeDino) => #js {:desc blue dino-dog, :says #object[Function]}\ndino.desc =>  blue dino-dog\ndino.says(5) =>  Ruff-Ruff-Ruff-Ruff-Ruff!\n:keep-words (\"am\" \"having\" \"today\")\n:re-seq (\"am\" \"having\" \"today\")\ntest once - leave\n\nTesting tst.flintstones.wilma\ntest each - enter\ntest each - leave\ntest each - enter\nwilmaPhony\/stats:    #js {:lipstick red, :height 5.5}\nwilma => #js {:desc patient housewife, :says #object[Function]}\ntest each - leave\n\nTesting tst.flintstones.pebbles\ntest once - enter\ntest once - leave\n\nTesting tst.flintstones.slate\nlogr-slate-enter\nlogr-slate-leave 3\n\nTesting tst.flintstones.bambam\ntest each - enter\ntest each - leave\ntest each - enter\nlogr-bambam-enter\nlogr-bambam-leave 3\ntest each - leave\n\nRan 9 tests containing 22 assertions.\n0 failures, 0 errors.\nlein doo phantom test once  38.52s user 0.84s system 333% cpu 11.813 total\n\n\n\nOn Fri, Nov 9, 2018 at 10:14 AM Gareth James <garet...@gmail.com> wrote:\n\n> I'm currently researching different methods for testing clojurescipt code,\n> specifically unit testing, automated browser testing and code coverage. I'm\n> specifically trying to find more information about the use of cljs.test and\n> cljs.spec either individually or together. Could anyone share any\n> experience they have of using either of these or any other information\n> about how they are testing their code.\n>\n> Thanks\n> Gareth\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Clojurescript testing Alan Thompson Fri, 09 Nov 2018 14:17:36 -0800"},
{"body":"I'm currently researching different methods for testing clojurescipt code, \nspecifically unit testing, automated browser testing and code coverage. I'm \nspecifically trying to find more information about the use of cljs.test and \ncljs.spec either individually or together. Could anyone share any \nexperience they have of using either of these or any other information \nabout how they are testing their code. \nThanks\nGareth\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojurescript testing Gareth James Fri, 09 Nov 2018 10:15:01 -0800"},
{"body":"Reporting build-times changes, in a ~15loc CLJ\/CLJS\/CLC project, on a \n8-cores CPU machine, with :parallel-build always true and timings as \nreported by :compiler-stats true, using boot-cljs. I've run each build at \nleast twice to check for variations. \nWith CLJS 1.10.339\n- :optimizations :none \nCompile sources, elapsed time: 11628.251228 msecs\nCompile sources, elapsed time: 1865.551867 msecs\n=> Total: ~13.5 secs (13493.803095 msecs)\n- :optimizations :advanced\nCompile sources, elapsed time: 13882.684487 msecs\nCompile sources, elapsed time: 22.481435 msecs\nOptimizing with Google Closure Compiler, elapsed time: 15468.294224 msecs\nOptimizing 265 sources, elapsed time: 15892.028818 msecs\n=> Total: ~45 secs (45265.488964 msecs)\n\nWith CLJS 1.10.439\n- :optimizations :none\nCompile sources, elapsed time: 11551.295873 msecs\nCompile sources, elapsed time: 1337.826701 msecs\n=> Total: ~12.8 secs (12889.122573999999 msecs)\n- :optimizations :advanced\nCompile sources, elapsed time: 12874.073566 msecs\nCompile sources, elapsed time: 23.319803 msecs\nOptimizing with Google Closure Compiler, elapsed time: 16746.485323 msecs\nOptimizing 265 sources, elapsed time: 17214.70572 msecs\n=> Total: ~46.8 secs (46858.584412 msecs)\n\nNo significant changes in compilation times, but it may be due to \nboot\/boot-cljs overhead, no idea. This is completely unscientific, as it \nmay not make use of the some things enabled only when using cljs.main.\n\nI've also received a warning for a :private-var-access in one of my \ndependencies, will open an issue there.\n\nEnd of report. And big thanks to all contributors!\n\nOn Monday, November 5, 2018 at 7:34:18 PM UTC+1, David Nolen wrote:\n>\n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>\n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>\n> Leiningen dependency information:\n>\n> [org.clojure\/clojurescript \"1.10.439\"]\n>\n> Please refer the announce post for the details:\n> https:\/\/clojurescript.org\/news\/2018-11-02-release\n>\n> As always, feedback welcome!\n>\n> ## 1.10.439\n>\n> ### Changes\n> * CLJS-2904: Default :npm-deps to false\n> * CLJS-2878: Update Closure Compiler to v20180805\n> * CLJS-2827: Avoid var special in core macros for private var access\n> * CLJS-2819: Warn on non-dynamic earmuffed vars\n> * CLJS-2806: Bump test.check to 0.10.0-alpha3\n> * CLJS-2815: Support string keys in :global-exports\n> * CLJS-2812: Support for overriding object printing\n> * CLJS-2805: Bump tools.reader to 1.3.0\n> * CLJS-1702: Warning when using private vars\n> * Align ClojureScript AST to tools.analyzer\n>\n> ### Enhancements\n> * CLJS-2903: Support fingerprinting\n> * CLJS-2897: cljs.main: Display initial REPL prompt sooner\n> * CLJS-2884: Support for GraalJS RC6\n> * CLJS-2859: Graal.JS: Enable high-res timers by default, allow \n> user-configuration\n> * CLJS-2831: Add a graaljs REPL environment\n> * CLJS-1997: Outward function type hint propagation\n> * CLJS-844: Optimize js->clj by switching to transients\n> * CLJS-2442: `set` and `vec` performance enhancements\n>\n> ### Fixes\n> * CLJS-2953: stest\/with-instrument-disabled prints warning of private use\n> * CLJS-2728: Ability to disable macro spec checks\n> * CLJS-2843: s\/explain of evaluated predicate yields :s\/unknown\n> * CLJS-2951: Add a spec generator for some?\n> * CLJS-2940: Can't define nilable spec on undefined pred\n> * CLJS-2948: Stack overflow calling instrumented variadic fn with zero args\n> * CLJS-2793: Instrumenting breaks function with varargs\n> * CLJS-2934: Enhanced delay printing\n> * CLJS-2864: Optimize str macro for single arity case\n> * CLJS-1297: defrecord does not emit IKVReduce protocol\n> * CLJS-2937: docstring for to-array\n> * CLJS-2943: Update merge-with to use key \/ val\n> * CLJS-2941: seqable? should return true for nil\n> * CLJS-2915: Tests fail if directory has a period (.) in the path\n> * CLJS-2782: lein test fails if directory has hyphens\n> * CLJS-2911: Avoid infinite loop on infinite partitions\n> * CLJS-2906: cljs.main: Crash when with default REPL\n> * CLJS-2883: Instrumentation fails compilation with a large number of \n> spec'd functions\n> * CLJS-2896: Allow parallel analysis and compilation\n> * CLJS-2893: seq: use .-length instead of alength for strings\n> * CLJS-2890: fspec role in problem path is not useful\n> * CLJS-2887: Improve names in core macro specs\n> * CLJS-2891: stop including data in ex-info message\n> * CLJS-2888: Printing of spec problems buries the failing predicate which \n> should be more prominent\n> * CLJS-2861: Self-host: :checked-arrays not working\n> * CLJS-2852: Clojure imparity: ns-publics returns different arglists for \n> macros\n> * CLJS-2725: Doc on spec keywords\n> * CLJS-2665: Port clojure.spec.test.alpha\/enumerate-namespace\n> * CLJS-2848: Default explain printer prints root val and spec\n> * CLJS-2846: [spec] s\/tuple explain-data :pred problem\n> * CLJS-2847: s\/coll-of and s\/every gen is very slow if :kind specified \n> without :into\n> * CLJS-2841: [spec] instrument exception doesn't contain function name in \n> ex-data\n> * CLJS-2842: [spec] Clarify s\/every docstring for :kind\n> * CLJS-2845: [spec] generate random subsets of or'd required keys in map \n> specs\n> * CLJS-2844: [spec] Add support for undefining a spec\n> * CLJS-2840: [spec] s\/keys explain-data :pred problem\n> * CLJS-2839: [spec] s\/& explain-data :pred problem\n> * CLJS-2838: [spec] s\/& does not check preds if regex matches empty \n> collection\n> * CLJS-2837: [spec] `cat` specs should verify value is sequential\n> * CLJS-2541: binding not made in parallel\n> * CLJS-2832: Bad code gen for `((not empty?) \"foo\")` when compiled with no \n> optimizations\n> * CLJS-2855: Browser REPL prints empty string after require\n> * CLJS-2821: Update doto docstring to not use Java example\n> * CLJS-2817: Suppress private var warnings for specs on private vars\n> * CLJS-2822: cljs.core.specs.alpha: Map bindings should be `:kind map?`\n> * CLJS-2829: Fix deep object property access for :global-exports\n> * CLJS-2816: Skip non-string package.json browser entry values\n> * CLJS-2814: Fix munge-node-lib\/global-export on self-host\n> * CLJS-2811: cljs-1537-circular-deps fail on Windows\n> * CLJS-2807: Macroexpand failure with set literal\n> * CLJS-2799: Handle nth on seqables with negative indexes\n> * CLJS-2798: ChunkCons -next doesn't handle nil more\n> * CLJS-2589: allow \/ as a protocol method name in cljs\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.10.439 Khalid Jebbari Wed, 07 Nov 2018 00:43:15 -0800"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.10.439\"]\n\nPlease refer the announce post for the details:\nhttps:\/\/clojurescript.org\/news\/2018-11-02-release\n\nAs always, feedback welcome!\n\n## 1.10.439\n\n### Changes\n* CLJS-2904: Default :npm-deps to false\n* CLJS-2878: Update Closure Compiler to v20180805\n* CLJS-2827: Avoid var special in core macros for private var access\n* CLJS-2819: Warn on non-dynamic earmuffed vars\n* CLJS-2806: Bump test.check to 0.10.0-alpha3\n* CLJS-2815: Support string keys in :global-exports\n* CLJS-2812: Support for overriding object printing\n* CLJS-2805: Bump tools.reader to 1.3.0\n* CLJS-1702: Warning when using private vars\n* Align ClojureScript AST to tools.analyzer\n\n### Enhancements\n* CLJS-2903: Support fingerprinting\n* CLJS-2897: cljs.main: Display initial REPL prompt sooner\n* CLJS-2884: Support for GraalJS RC6\n* CLJS-2859: Graal.JS: Enable high-res timers by default, allow\nuser-configuration\n* CLJS-2831: Add a graaljs REPL environment\n* CLJS-1997: Outward function type hint propagation\n* CLJS-844: Optimize js->clj by switching to transients\n* CLJS-2442: `set` and `vec` performance enhancements\n\n### Fixes\n* CLJS-2953: stest\/with-instrument-disabled prints warning of private use\n* CLJS-2728: Ability to disable macro spec checks\n* CLJS-2843: s\/explain of evaluated predicate yields :s\/unknown\n* CLJS-2951: Add a spec generator for some?\n* CLJS-2940: Can't define nilable spec on undefined pred\n* CLJS-2948: Stack overflow calling instrumented variadic fn with zero args\n* CLJS-2793: Instrumenting breaks function with varargs\n* CLJS-2934: Enhanced delay printing\n* CLJS-2864: Optimize str macro for single arity case\n* CLJS-1297: defrecord does not emit IKVReduce protocol\n* CLJS-2937: docstring for to-array\n* CLJS-2943: Update merge-with to use key \/ val\n* CLJS-2941: seqable? should return true for nil\n* CLJS-2915: Tests fail if directory has a period (.) in the path\n* CLJS-2782: lein test fails if directory has hyphens\n* CLJS-2911: Avoid infinite loop on infinite partitions\n* CLJS-2906: cljs.main: Crash when with default REPL\n* CLJS-2883: Instrumentation fails compilation with a large number of\nspec'd functions\n* CLJS-2896: Allow parallel analysis and compilation\n* CLJS-2893: seq: use .-length instead of alength for strings\n* CLJS-2890: fspec role in problem path is not useful\n* CLJS-2887: Improve names in core macro specs\n* CLJS-2891: stop including data in ex-info message\n* CLJS-2888: Printing of spec problems buries the failing predicate which\nshould be more prominent\n* CLJS-2861: Self-host: :checked-arrays not working\n* CLJS-2852: Clojure imparity: ns-publics returns different arglists for\nmacros\n* CLJS-2725: Doc on spec keywords\n* CLJS-2665: Port clojure.spec.test.alpha\/enumerate-namespace\n* CLJS-2848: Default explain printer prints root val and spec\n* CLJS-2846: [spec] s\/tuple explain-data :pred problem\n* CLJS-2847: s\/coll-of and s\/every gen is very slow if :kind specified\nwithout :into\n* CLJS-2841: [spec] instrument exception doesn't contain function name in\nex-data\n* CLJS-2842: [spec] Clarify s\/every docstring for :kind\n* CLJS-2845: [spec] generate random subsets of or'd required keys in map\nspecs\n* CLJS-2844: [spec] Add support for undefining a spec\n* CLJS-2840: [spec] s\/keys explain-data :pred problem\n* CLJS-2839: [spec] s\/& explain-data :pred problem\n* CLJS-2838: [spec] s\/& does not check preds if regex matches empty\ncollection\n* CLJS-2837: [spec] `cat` specs should verify value is sequential\n* CLJS-2541: binding not made in parallel\n* CLJS-2832: Bad code gen for `((not empty?) \"foo\")` when compiled with no\noptimizations\n* CLJS-2855: Browser REPL prints empty string after require\n* CLJS-2821: Update doto docstring to not use Java example\n* CLJS-2817: Suppress private var warnings for specs on private vars\n* CLJS-2822: cljs.core.specs.alpha: Map bindings should be `:kind map?`\n* CLJS-2829: Fix deep object property access for :global-exports\n* CLJS-2816: Skip non-string package.json browser entry values\n* CLJS-2814: Fix munge-node-lib\/global-export on self-host\n* CLJS-2811: cljs-1537-circular-deps fail on Windows\n* CLJS-2807: Macroexpand failure with set literal\n* CLJS-2799: Handle nth on seqables with negative indexes\n* CLJS-2798: ChunkCons -next doesn't handle nil more\n* CLJS-2589: allow \/ as a protocol method name in cljs\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.10.439 David Nolen Mon, 05 Nov 2018 10:34:20 -0800"},
{"body":"I wrote up more details of this error on StackOverflow:\n\nhttps:\/\/stackoverflow.com\/questions\/53149344\/what-causes-error-no-protocol-method-xxx-yyy-defined-for-type-undefined-in-clo \n\nThese errors are particularly insidious since the error message is so\nvague, and there was no reference to the offending file & line. In face, in\nthis case it was caused by a chain of references across 4 files:\n\ntst.tupelo.core -> tupelo.core -> tupelo.impl -> tupelo.schema\n\n\nOn Mon, Nov 5, 2018 at 7:15 AM Alan Thompson <clooj...@gmail.com> wrote:\n\n> OK, I found the cause of the error.  In a dependent namespace, I had\n> defined some schemas:\n>\n> (ns tupelo.schema\n>   \"Prismatic Schema type definitions\"\n>   (:require [schema.core :as s])\n>   #?(:clj (:import [java.util HashSet] ))\n>   #?(:clj (:gen-class)))\n>\n> (def Set\n>   \"Either a Clojure hash-set or a java.util.HashSet\"\n>   (s\/either #{s\/Any}\n>     *#?(:clj* java.util.HashSet*)*))      ; <= *This was missing the\n> #?(:clj ...)*   and caused the error\n>\n>\n>\n>\n> On Mon, Nov 5, 2018 at 7:15 AM Alan Thompson <clooj...@gmail.com> wrote:\n>\n>> Copied from the Clojure mailing list\n>> ----------------------------------------------------\n>>\n>> I am seeing the following errors in CLJS, but not in CLJ:\n>>\n>> ERROR in (dotest-line-695) (schema\/core.js:33:64)\n>> expected: (clojure.core\/= (t\/thru 9) (t\/glue-rows data))\n>>   actual: #object[Error Error: No protocol method Schema.spec defined for\n>> type undefined: ]\n>>\n>>\n>> The errors disappear if I remove Plumatic Schema elements of the function\n>> definition:\n>>\n>> ; this one produces the error in clojurescript (clojure runs fine)\n>> (s\/defn glue-rows  :- tsk\/List\n>>   [coll-2d :- tsk\/List]\n>> ...\n>>\n>> ; this one works fine in both clojure and clojurescript\n>> (s\/defn glue-rows  :- tsk\/List\n>>   [coll-2d :- tsk\/List]\n>> ...\n>>\n>>\n>> Any clues as to the cause of this behavior?\n>> Alan\n>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Plumatic Schema error in CLJS Alan Thompson Mon, 05 Nov 2018 07:17:49 -0800"},
{"body":"OK, I found the cause of the error.  In a dependent namespace, I had\ndefined some schemas: \n(ns tupelo.schema\n  \"Prismatic Schema type definitions\"\n  (:require [schema.core :as s])\n  #?(:clj (:import [java.util HashSet] ))\n  #?(:clj (:gen-class)))\n\n(def Set\n  \"Either a Clojure hash-set or a java.util.HashSet\"\n  (s\/either #{s\/Any}\n    *#?(:clj* java.util.HashSet*)*))      ; <= *This was missing the\n#?(:clj ...)*   and caused the error\n\n\n\n\nOn Mon, Nov 5, 2018 at 7:15 AM Alan Thompson <clooj...@gmail.com> wrote:\n\n> Copied from the Clojure mailing list\n> ----------------------------------------------------\n>\n> I am seeing the following errors in CLJS, but not in CLJ:\n>\n> ERROR in (dotest-line-695) (schema\/core.js:33:64)\n> expected: (clojure.core\/= (t\/thru 9) (t\/glue-rows data))\n>   actual: #object[Error Error: No protocol method Schema.spec defined for\n> type undefined: ]\n>\n>\n> The errors disappear if I remove Plumatic Schema elements of the function\n> definition:\n>\n> ; this one produces the error in clojurescript (clojure runs fine)\n> (s\/defn glue-rows  :- tsk\/List\n>   [coll-2d :- tsk\/List]\n> ...\n>\n> ; this one works fine in both clojure and clojurescript\n> (s\/defn glue-rows  :- tsk\/List\n>   [coll-2d :- tsk\/List]\n> ...\n>\n>\n> Any clues as to the cause of this behavior?\n> Alan\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Plumatic Schema error in CLJS Alan Thompson Mon, 05 Nov 2018 07:15:52 -0800"},
{"body":"Copied from the Clojure mailing list\n---------------------------------------------------- \nI am seeing the following errors in CLJS, but not in CLJ:\n\nERROR in (dotest-line-695) (schema\/core.js:33:64)\nexpected: (clojure.core\/= (t\/thru 9) (t\/glue-rows data))\n  actual: #object[Error Error: No protocol method Schema.spec defined for\ntype undefined: ]\n\n\nThe errors disappear if I remove Plumatic Schema elements of the function\ndefinition:\n\n; this one produces the error in clojurescript (clojure runs fine)\n(s\/defn glue-rows  :- tsk\/List\n  [coll-2d :- tsk\/List]\n...\n\n; this one works fine in both clojure and clojurescript\n(s\/defn glue-rows  :- tsk\/List\n  [coll-2d :- tsk\/List]\n...\n\n\nAny clues as to the cause of this behavior?\nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Plumatic Schema error in CLJS Alan Thompson Mon, 05 Nov 2018 07:15:50 -0800"},
{"body":"Thanks for the links Alan. \n\nOn Friday, October 26, 2018 at 9:21:40 AM UTC-7, Alan Thompson wrote:\n>\n> Hi - Just learned about the Martian project this week.  It sounds exactly \n> like what you need.  I'm looking forward to using it in future projects.  \n> Watch the video first.\n>\n>    - Video:  https:\/\/skillsmatter.com\/skillscasts\/8843-clojure-bytes#video\n>    - Blog post:  https:\/\/juxt.pro\/blog\/posts\/advanced-martian.html\n>    - Github:  https:\/\/github.com\/oliyh\/martian\n>\n>\n>\n>\n> On Fri, Oct 26, 2018 at 8:13 AM Kashyap CK <ckka...@gmail.com \n> <javascript:>> wrote:\n>\n>> Hi,\n>>\n>> I am trying to build a javascript library to deal with the protocol \n>> details of a server. The goal is to create a library that does all the \n>> dirty work of handshake and reconnect logic and exposes a \"stream\" to the \n>> user of the library that can be read from and written to.\n>>\n>> In the past I have used CLJS for my personal projects and have tried \n>> cljs-http and also the xhr module in goog. However, I want to confirm if \n>> there is a recommended CLJS way for doing this? My target is the browser \n>> for now but it would not hurt if I use something that works on node as well \n>> :)\n>>\n>> Regards,\n>> Kashyap\n>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Seeking advice on making HTTP requests from CLJS Kashyap CK Fri, 26 Oct 2018 21:53:18 -0700"},
{"body":"Hi - Just learned about the Martian project this week.  It sounds exactly\nlike what you need.  I'm looking forward to using it in future projects.\nWatch the video first. \n   - Video:  https:\/\/skillsmatter.com\/skillscasts\/8843-clojure-bytes#video\n   - Blog post:  https:\/\/juxt.pro\/blog\/posts\/advanced-martian.html\n   - Github:  https:\/\/github.com\/oliyh\/martian\n\n\n\n\nOn Fri, Oct 26, 2018 at 8:13 AM Kashyap CK <ckkash...@gmail.com> wrote:\n\n> Hi,\n>\n> I am trying to build a javascript library to deal with the protocol\n> details of a server. The goal is to create a library that does all the\n> dirty work of handshake and reconnect logic and exposes a \"stream\" to the\n> user of the library that can be read from and written to.\n>\n> In the past I have used CLJS for my personal projects and have tried\n> cljs-http and also the xhr module in goog. However, I want to confirm if\n> there is a recommended CLJS way for doing this? My target is the browser\n> for now but it would not hurt if I use something that works on node as well\n> :)\n>\n> Regards,\n> Kashyap\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Seeking advice on making HTTP requests from CLJS Alan Thompson Fri, 26 Oct 2018 09:21:51 -0700"},
{"body":"Hi,\n\nI am trying to build a javascript library to deal with the protocol details \nof a server. The goal is to create a library that does all the dirty work \nof handshake and reconnect logic and exposes a \"stream\" to the user of the \nlibrary that can be read from and written to. \nIn the past I have used CLJS for my personal projects and have tried \ncljs-http and also the xhr module in goog. However, I want to confirm if \nthere is a recommended CLJS way for doing this? My target is the browser \nfor now but it would not hurt if I use something that works on node as well \n:)\n\nRegards,\nKashyap\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Seeking advice on making HTTP requests from CLJS Kashyap CK Fri, 26 Oct 2018 08:13:45 -0700"},
{"body":"Ooops, silly me... Thanks for catch.\n\nOn Thu, Oct 18, 2018, 4:55 PM Alex Miller <a...@puredanger.com> wrote: \n>\n>\n> On Thursday, October 18, 2018 at 4:07:32 AM UTC-5, Khalid Jebbari wrote:\n>>\n>>\n>> PS: I couldn't get clojure cli to download criterium to run the\n>> benchmark, so I ended up using the REPL provided by in my current app setup\n>> (based on Clojure 1.9.0, Boot 2.8.2 and criterium 0.4.4, the latest stable\n>> versions).\n>> Here's the command I ran and the error:\n>>\n>> ```\n>> > clj -Sdeps \"{:deps {org.clojure\/clojure {:mvn\/version \\\"1.9.0\\\"}\n>> criterum {:mvn\/version \\\"0.4.4\\\"}}}\"\n>> Error building classpath. Could not find artifact\n>> criterum:criterum:jar:0.4.4 in central (https:\/\/repo1.maven.org\/maven2\/)\n>>\n>\n> You misspelled \"criterium\" in your deps.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/doSapNEhLjc\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Creating a map entry Khalid Jebbari Thu, 18 Oct 2018 10:20:48 -0700"},
{"body":"On Thursday, October 18, 2018 at 4:07:32 AM UTC-5, Khalid Jebbari wrote:\n>\n>\n> PS: I couldn't get clojure cli to download criterium to run the benchmark, \n> so I ended up using the REPL provided by in my current app setup (based on \n> Clojure 1.9.0, Boot 2.8.2 and criterium 0.4.4, the latest stable versions). \n> Here's the command I ran and the error:\n>\n> ```\n> > clj -Sdeps \"{:deps {org.clojure\/clojure {:mvn\/version \\\"1.9.0\\\"} \n> criterum {:mvn\/version \\\"0.4.4\\\"}}}\"\n> Error building classpath. Could not find artifact \n> criterum:criterum:jar:0.4.4 in central (https:\/\/repo1.maven.org\/maven2\/)\n> \nYou misspelled \"criterium\" in your deps.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Creating a map entry Alex Miller Thu, 18 Oct 2018 07:55:11 -0700"},
{"body":"I've found the time to experiment myself and report my findings below.\n\nIn CLJS, MapEntry seems to work fine, and is slightly faster than using a \nvector to represent it. Below are dumb micro benchmarks, executed in fresh \nrepls void of any other dependencies: \n```\n> clj -Sdeps \"{:deps {org.clojure\/clojurescript {:mvn\/version \n\\\"1.10.339\\\"}}}\" -m cljs.main\nClojureScript 1.10.339\n(simple-benchmark [rng (range 1000)]\n                  (into {} (map (fn [n] [n n]) rng))\n                  1000)\n[rng (range 1000)], (into {} (map (fn [n] [n n]) rng)), 1000 runs, 923 msecs\nnil\n(simple-benchmark [rng (range 1000)]\n                  (into {} (map (fn [n] (MapEntry. n n nil)) rng))\n                  1000)\n[rng (range 1000)], (into {} (map (fn [n] (MapEntry. n n nil)) rng)), 1000 \nruns, 840 msecs\nnil\n```\n\nIn this example, using MapEntry yields a 9% improvements.\n\nIn the Clojure side, there are 2 important differences. #1 MapEntry is not \npart of clojure.core in clojure.lang, so using it requires a JVM-specific \nimport. #2 The MapEntry constructor doesn't need the third \"hash\" parameter \nlike CLJS, only the key and value. So using MapEntry in cljc code will \nrequire reader conditional in `ns` and in each call-site.\n\n```\n(import clojure.lang.MapEntry)\n(criterium\/bench (let [rng (range 1000)]\n                   (into {} (map (fn [n] [n n]) rng))))\nEvaluation count : 317760 in 60 samples of 5296 calls.\n             Execution time mean : 189.335048 \u00b5s\n    Execution time std-deviation : 613.930267 ns\n   Execution time lower quantile : 188.569507 \u00b5s ( 2.5%)\n   Execution time upper quantile : 191.256133 \u00b5s (97.5%)\n                   Overhead used : 1.867366 ns\n\nFound 6 outliers in 60 samples (10.0000 %)\nlow-severe 3 (5.0000 %)\nlow-mild 3 (5.0000 %)\n Variance from outliers : 1.6389 % Variance is slightly inflated by outliers\n=> nil\n\n(criterium\/bench (let [rng (range 1000)]\n                   (into {} (map (fn [n] (MapEntry. n n)) rng))))\nEvaluation count : 401880 in 60 samples of 6698 calls.\n             Execution time mean : 149.182354 \u00b5s\n    Execution time std-deviation : 255.340674 ns\n   Execution time lower quantile : 148.692324 \u00b5s ( 2.5%)\n   Execution time upper quantile : 149.779548 \u00b5s (97.5%)\n                   Overhead used : 1.867366 ns\n\nFound 3 outliers in 60 samples (5.0000 %)\nlow-severe 3 (5.0000 %)\n Variance from outliers : 1.6389 % Variance is slightly inflated by outliers\n=> nil\n```\n\nThis other dumb benchmarks shows a 26% speed improvements.\n\nIn my case, since I'm coding in cljc file I'm not totally confortable with \nthe reader conditional. Furthermore I don't understand yet all the \nimplications, apart from making the code that produce the map entries less \nflexible (a sequence of vectors is less generic than a sequence of map \nentries).\n\nI'd love to hear from you specialists.\n\nPS: I couldn't get clojure cli to download criterium to run the benchmark, \nso I ended up using the REPL provided by in my current app setup (based on \nClojure 1.9.0, Boot 2.8.2 and criterium 0.4.4, the latest stable versions). \nHere's the command I ran and the error:\n\n```\n> clj -Sdeps \"{:deps {org.clojure\/clojure {:mvn\/version \\\"1.9.0\\\"} criterum \n{:mvn\/version \\\"0.4.4\\\"}}}\"\nError building classpath. Could not find artifact \ncriterum:criterum:jar:0.4.4 in central (https:\/\/repo1.maven.org\/maven2\/)\norg.eclipse.aether.resolution.ArtifactResolutionException: Could not find \nartifact criterum:criterum:jar:0.4.4 in central \n(https:\/\/repo1.maven.org\/maven2\/)\nat \norg.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:422)\nat \norg.eclipse.aether.internal.impl.DefaultArtifactResolver.resolveArtifacts(DefaultArtifactResolver.java:224)\nat \norg.eclipse.aether.internal.impl.DefaultArtifactResolver.resolveArtifact(DefaultArtifactResolver.java:201)\nat \norg.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveArtifact(DefaultRepositorySystem.java:260)\nat \nclojure.tools.deps.alpha.extensions.maven$get_artifact.invokeStatic(maven.clj:95)\nat \nclojure.tools.deps.alpha.extensions.maven$get_artifact.invoke(maven.clj:91)\nat \nclojure.tools.deps.alpha.extensions.maven$eval698$fn__700.invoke(maven.clj:112)\nat clojure.lang.MultiFn.invoke(MultiFn.java:243)\nat clojure.tools.deps.alpha$lib_paths$fn__1068.invoke(alpha.clj:203)\nat clojure.core.protocols$iter_reduce.invokeStatic(protocols.clj:49)\nat clojure.core.protocols$fn__7839.invokeStatic(protocols.clj:75)\nat clojure.core.protocols$fn__7839.invoke(protocols.clj:75)\nat clojure.core.protocols$fn__7781$G__7776__7794.invoke(protocols.clj:13)\nat clojure.core$reduce.invokeStatic(core.clj:6748)\nat clojure.core$reduce.invoke(core.clj:6730)\nat clojure.tools.deps.alpha$lib_paths.invokeStatic(alpha.clj:199)\nat clojure.tools.deps.alpha$lib_paths.invoke(alpha.clj:197)\nat clojure.tools.deps.alpha$resolve_deps.invokeStatic(alpha.clj:229)\nat clojure.tools.deps.alpha$resolve_deps.invoke(alpha.clj:210)\nat \nclojure.tools.deps.alpha.script.make_classpath$create_classpath.invokeStatic(make_classpath.clj:59)\nat \nclojure.tools.deps.alpha.script.make_classpath$create_classpath.invoke(make_classpath.clj:52)\nat \nclojure.tools.deps.alpha.script.make_classpath$run.invokeStatic(make_classpath.clj:70)\nat \nclojure.tools.deps.alpha.script.make_classpath$run.invoke(make_classpath.clj:64)\nat \nclojure.tools.deps.alpha.script.make_classpath$_main.invokeStatic(make_classpath.clj:109)\nat \nclojure.tools.deps.alpha.script.make_classpath$_main.doInvoke(make_classpath.clj:84)\nat clojure.lang.RestFn.applyTo(RestFn.java:137)\nat clojure.lang.Var.applyTo(Var.java:702)\nat clojure.core$apply.invokeStatic(core.clj:657)\nat clojure.main$main_opt.invokeStatic(main.clj:317)\nat clojure.main$main_opt.invoke(main.clj:313)\nat clojure.main$main.invokeStatic(main.clj:424)\nat clojure.main$main.doInvoke(main.clj:387)\nat clojure.lang.RestFn.applyTo(RestFn.java:137)\nat clojure.lang.Var.applyTo(Var.java:702)\nat clojure.main.main(main.java:37)\nCaused by: org.eclipse.aether.transfer.ArtifactNotFoundException: Could not \nfind artifact criterum:criterum:jar:0.4.4 in central \n(https:\/\/repo1.maven.org\/maven2\/)\nat \norg.eclipse.aether.connector.basic.ArtifactTransportListener.transferFailed(ArtifactTransportListener.java:48)\nat \norg.eclipse.aether.connector.basic.BasicRepositoryConnector$TaskRunner.run(BasicRepositoryConnector.java:365)\nat \norg.eclipse.aether.util.concurrency.RunnableErrorForwarder$1.run(RunnableErrorForwarder.java:75)\nat \norg.eclipse.aether.connector.basic.BasicRepositoryConnector$DirectExecutor.execute(BasicRepositoryConnector.java:583)\nat \norg.eclipse.aether.connector.basic.BasicRepositoryConnector.get(BasicRepositoryConnector.java:259)\nat \norg.eclipse.aether.internal.impl.DefaultArtifactResolver.performDownloads(DefaultArtifactResolver.java:498)\nat \norg.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:399)\n... 34 more\n```\n\nOn Wednesday, October 17, 2018 at 11:35:25 PM UTC+2, Khalid Jebbari wrote:\n>\n> Is it possible to create a map entry directly with the MapEntry type? I \n> see in the source code of CLJS that the type expects 3 parameters, key val \n> and hash. I've glanced quickly at usages and it seems most usages revolves \n> to (MapEntry. k v nil). Is it ok to use in app? Is it too low-level? I'd \n> like to use it in situations where I populate a map from vectors, like \n> (silly example)\n>\n> (into {} (map-indexed (fn [idx v] (MapEntry. idx val nil) [1 2 3]))\n>\n> And what does it mean in cljc code ? Is this ok in Clojure too?\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Creating a map entry Khalid Jebbari Thu, 18 Oct 2018 02:07:48 -0700"},
{"body":"Is it possible to create a map entry directly with the MapEntry type? I see in \nthe source code of CLJS that the type expects 3 parameters, key val and hash. \nI've glanced quickly at usages and it seems most usages revolves to (MapEntry. \nk v nil). Is it ok to use in app? Is it too low-level? I'd like to use it in \nsituations where I populate a map from vectors, like (silly example) \n(into {} (map-indexed (fn [idx v] (MapEntry. idx val nil) [1 2 3]))\n\nAnd what does it mean in cljc code ? Is this ok in Clojure too?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Creating a map entry Khalid Jebbari Wed, 17 Oct 2018 14:36:02 -0700"},
{"body":">\n>\n> The three second compile time is with :compile-dependents false, \n> :optimizations :none and :parallel-build true. I would love to know if that \n> is atypical and what I might have set up wrong.\n>\n>\nIt sounds slow but it really depends on what you are doing in the code. \nTypically using a lot of macros make the code slower to compile but its not \nimpossible to reach 3 seconds with just plain code as many factors affect \nthe compile performance. You could try the latest master which has a bunch \nof performance tweaks, may those help. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Pressure towards ever larger namespace\/file Thomas Heller Thu, 11 Oct 2018 08:46:05 -0700"},
{"body":"> Dynamic load is simply not possible due to the restrictions of the \nbrowser (all IO is async). A static load could be possible but I'm not \nconvinced that it would actually change much. \nIt seems to me this is a static problem that could have a static solution. \nEven just a static in-ns (essentially a compiler directive) would, I think, \nprovide a solution.\n\nThe three second compile time is with :compile-dependents false, \n:optimizations :none and :parallel-build true. I would love to know if that \nis atypical and what I might have set up wrong.\n\n> A more Clojure-esque REPL driven approach via `load-file` can also be a \nwhole lot faster than automatic file-watch + hot-reload.\n\n`load-file` seems to be just as slow as recompiling, but one thing that is \nsuper fast is send-form-to-repl (I'm using Cursive). The only downside is I \nhave to remember to do that for every top-level form I change. If I've \njumped around a bit and made a few changes it's much easier to hit save.\n\n> Splitting the code into multiple impl namespaces and only exposing actual \npublic API selectively seems like a pretty good strategy apart from the \nkeyword issue?\n\nYes it's really just the keyword issue making me decide against that route. \nThe library in question is all about manipulating a bunch of nested maps, \nwhich are full of name spaced keyword keys. I find the pain of the large \nnamespace preferable to the pain of super long keywords.\n\nThanks very much for the advice, and also for pointing me to the jira \nissue. I've voted for that. Seems like it has a long way to go though - \nit's not much more than \"this is a problem\" right now.\n\nTom\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Pressure towards ever larger namespace\/file Tom Locke Thu, 11 Oct 2018 05:02:30 -0700"},
{"body":"Unfortunately it is not that simple to add.\n\nDynamic load is simply not possible due to the restrictions of the browser \n(all IO is async). A static load could be possible but I'm not convinced \nthat it would actually change much. 3 second recompile time seems pretty \nexcessive but it might actually be caused by the default \"recompile all \ndependents\" behavior where a change in a file triggers a recompile of all \nthe files that required that which then also trigger recompiles and so on. \nBasically in the case of an \"API\" namespace it potentially recompiles your \nentire project on every change. Splitting the API namespace up into smaller \nones but still exposed as one will still trigger this so it would not \nchange anything. You should try `:recompile-dependents false` in your \nconfig and see if that improves the recompile performance. shadow-cljs for \nexample is much faster in recompiles because it limits recompiles to direct \ndependents not all them, which is usually enough but still doesn't help if \nevery single namespace in your project directly requires that \"API\" \nnamespace. \nA more Clojure-esque REPL driven approach via `load-file` can also be a \nwhole lot faster than automatic file-watch + hot-reload.\n\nI do agree that keyword aliasing becomes a bit of an issue but \nunfortunately there is no \"fix\" for that currently. A couple more votes \nmight help push this along? [1]\n\nDo you actually have an API surface of 1700 lines of code though? Splitting \nthe code into multiple impl namespaces and only exposing actual public API \nselectively seems like a pretty good strategy apart from the keyword issue?\n\n\n\n[1] https:\/\/dev.clojure.org\/jira\/browse\/CLJ-2123\n\n\nOn Wednesday, October 10, 2018 at 11:17:07 AM UTC+2, Tom Locke wrote:\n>\n> I'm working on a library, for which I would like to expose a single \n> namespace to users. I don't want users (including myself!) to have to \n> remember this function comes from foo-lib, this one comes from \n> foo-lib.utils etc.\n>\n> Internally, however, I would very much like to split my code up into \n> separate files. This is not just for convenience (although I do find \n> smaller files much more convenient), but has a material impact on my \n> productivity. A single long file takes a few seconds to compile (usually in \n> figwheel). These pauses really add up and make the overall experience feel \n> sluggish.\n>\n> In Clojure this is a non-issue -- a namespace can be split into multiple \n> files using load and in-ns. We don't have those in ClojureScript.\n>\n> I have tried various approaches to breaking my library up into multiple \n> namespaces, while keeping the single namespace API, but none are \n> satisfactory. I can expose symbols just by def-ing them in the main \n> namespace, e.g. (def foo my-utils\/foo). This is inconvenient for editing \n> (e.g. go to definition), but the real stumbling block is namespaced \n> keywords, which I use a lot. As users of the library must use the keywords \n> also, I need them to be in the main namespace. This means my utility \n> namespaces (which cannot require the main namespace due to circular \n> dependencies) would have to use the long-hand keyword syntax (i.e. no :: ). \n> This is too high a price and I am back to everything in a single namespace.\n>\n> Is this issue affecting others? My guess is people just impose multiple \n> namespaces on the consumers of libraries, or are stuck with cumbersome, \n> large namespaces.\n>\n> I came across this old thread, which is related. It didn't get very far: \n> https:\/\/groups.google.com\/forum\/#!topic\/clojure\/MwGV6GDN9p8\n>\n> Thanks very much\n>\n> Tom\n>\n> P.S. I have seen people mentioning \"sub second compiles\" in figwheel. I am \n> seeing, e.g. more than 3 seconds to compile a 1,700 file. Does that sound \n> typical? (2012 MacBook Pro)\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Pressure towards ever larger namespace\/file Thomas Heller Thu, 11 Oct 2018 01:59:05 -0700"},
{"body":"Hmm, which maybe is not any kind of solution for your question, since it\nuses require, which you as you already mentioned cannot be used from a\nutility namespace to your main namespace, or else you would create a\ndependency cycle. \nClojure\/Java has \"alias\" that might help in such situations, but\nClojureScript does not.\n\nAndy\n\nOn Wed, Oct 10, 2018 at 5:48 PM Andy Fingerhut <andy.finger...@gmail.com>\nwrote:\n\n> There may be other techniques that give you better answers here, but\n> regarding your real stumbling block issue of namespaces keywords, not that\n> both Clojure and ClojureScript let you write namespaced keywords using\n> short alias names that you pick, without having to type out the full\n> namespace name.  For example:\n>\n> % clj -Sdeps \"{:deps {org.clojure\/clojurescript {:mvn\/version\n> \\\"1.9.946\\\"}}}\" -m cljs.repl.node\n>\n> cljs.user=> (require '[clojure.string :as str])\n> nil\n> cljs.user=> ::str\/foo\n> :clojure.string\/foo\n> cljs.user=> (= ::str\/foo :clojure.string\/foo)\n> true\n>\n>\n> Andy\n>\n> On Wed, Oct 10, 2018 at 2:17 AM Tom Locke <t...@tomlocke.com> wrote:\n>\n>> I'm working on a library, for which I would like to expose a single\n>> namespace to users. I don't want users (including myself!) to have to\n>> remember this function comes from foo-lib, this one comes from\n>> foo-lib.utils etc.\n>>\n>> Internally, however, I would very much like to split my code up into\n>> separate files. This is not just for convenience (although I do find\n>> smaller files much more convenient), but has a material impact on my\n>> productivity. A single long file takes a few seconds to compile (usually in\n>> figwheel). These pauses really add up and make the overall experience feel\n>> sluggish.\n>>\n>> In Clojure this is a non-issue -- a namespace can be split into multiple\n>> files using load and in-ns. We don't have those in ClojureScript.\n>>\n>> I have tried various approaches to breaking my library up into multiple\n>> namespaces, while keeping the single namespace API, but none are\n>> satisfactory. I can expose symbols just by def-ing them in the main\n>> namespace, e.g. (def foo my-utils\/foo). This is inconvenient for editing\n>> (e.g. go to definition), but the real stumbling block is namespaced\n>> keywords, which I use a lot. As users of the library must use the keywords\n>> also, I need them to be in the main namespace. This means my utility\n>> namespaces (which cannot require the main namespace due to circular\n>> dependencies) would have to use the long-hand keyword syntax (i.e. no :: ).\n>> This is too high a price and I am back to everything in a single namespace.\n>>\n>> Is this issue affecting others? My guess is people just impose multiple\n>> namespaces on the consumers of libraries, or are stuck with cumbersome,\n>> large namespaces.\n>>\n>> I came across this old thread, which is related. It didn't get very far:\n>> https:\/\/groups.google.com\/forum\/#!topic\/clojure\/MwGV6GDN9p8\n>>\n>> Thanks very much\n>>\n>> Tom\n>>\n>> P.S. I have seen people mentioning \"sub second compiles\" in figwheel. I\n>> am seeing, e.g. more than 3 seconds to compile a 1,700 file. Does that\n>> sound typical? (2012 MacBook Pro)\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Pressure towards ever larger namespace\/file Andy Fingerhut Wed, 10 Oct 2018 17:53:17 -0700"},
{"body":"There may be other techniques that give you better answers here, but\nregarding your real stumbling block issue of namespaces keywords, not that\nboth Clojure and ClojureScript let you write namespaced keywords using\nshort alias names that you pick, without having to type out the full\nnamespace name.  For example: \n% clj -Sdeps \"{:deps {org.clojure\/clojurescript {:mvn\/version\n\\\"1.9.946\\\"}}}\" -m cljs.repl.node\n\ncljs.user=> (require '[clojure.string :as str])\nnil\ncljs.user=> ::str\/foo\n:clojure.string\/foo\ncljs.user=> (= ::str\/foo :clojure.string\/foo)\ntrue\n\n\nAndy\n\nOn Wed, Oct 10, 2018 at 2:17 AM Tom Locke <t...@tomlocke.com> wrote:\n\n> I'm working on a library, for which I would like to expose a single\n> namespace to users. I don't want users (including myself!) to have to\n> remember this function comes from foo-lib, this one comes from\n> foo-lib.utils etc.\n>\n> Internally, however, I would very much like to split my code up into\n> separate files. This is not just for convenience (although I do find\n> smaller files much more convenient), but has a material impact on my\n> productivity. A single long file takes a few seconds to compile (usually in\n> figwheel). These pauses really add up and make the overall experience feel\n> sluggish.\n>\n> In Clojure this is a non-issue -- a namespace can be split into multiple\n> files using load and in-ns. We don't have those in ClojureScript.\n>\n> I have tried various approaches to breaking my library up into multiple\n> namespaces, while keeping the single namespace API, but none are\n> satisfactory. I can expose symbols just by def-ing them in the main\n> namespace, e.g. (def foo my-utils\/foo). This is inconvenient for editing\n> (e.g. go to definition), but the real stumbling block is namespaced\n> keywords, which I use a lot. As users of the library must use the keywords\n> also, I need them to be in the main namespace. This means my utility\n> namespaces (which cannot require the main namespace due to circular\n> dependencies) would have to use the long-hand keyword syntax (i.e. no :: ).\n> This is too high a price and I am back to everything in a single namespace.\n>\n> Is this issue affecting others? My guess is people just impose multiple\n> namespaces on the consumers of libraries, or are stuck with cumbersome,\n> large namespaces.\n>\n> I came across this old thread, which is related. It didn't get very far:\n> https:\/\/groups.google.com\/forum\/#!topic\/clojure\/MwGV6GDN9p8\n>\n> Thanks very much\n>\n> Tom\n>\n> P.S. I have seen people mentioning \"sub second compiles\" in figwheel. I am\n> seeing, e.g. more than 3 seconds to compile a 1,700 file. Does that sound\n> typical? (2012 MacBook Pro)\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Pressure towards ever larger namespace\/file Andy Fingerhut Wed, 10 Oct 2018 17:49:15 -0700"},
{"body":"I'm working on a library, for which I would like to expose a single \nnamespace to users. I don't want users (including myself!) to have to \nremember this function comes from foo-lib, this one comes from \nfoo-lib.utils etc. \nInternally, however, I would very much like to split my code up into \nseparate files. This is not just for convenience (although I do find \nsmaller files much more convenient), but has a material impact on my \nproductivity. A single long file takes a few seconds to compile (usually in \nfigwheel). These pauses really add up and make the overall experience feel \nsluggish.\n\nIn Clojure this is a non-issue -- a namespace can be split into multiple \nfiles using load and in-ns. We don't have those in ClojureScript.\n\nI have tried various approaches to breaking my library up into multiple \nnamespaces, while keeping the single namespace API, but none are \nsatisfactory. I can expose symbols just by def-ing them in the main \nnamespace, e.g. (def foo my-utils\/foo). This is inconvenient for editing \n(e.g. go to definition), but the real stumbling block is namespaced \nkeywords, which I use a lot. As users of the library must use the keywords \nalso, I need them to be in the main namespace. This means my utility \nnamespaces (which cannot require the main namespace due to circular \ndependencies) would have to use the long-hand keyword syntax (i.e. no :: ). \nThis is too high a price and I am back to everything in a single namespace.\n\nIs this issue affecting others? My guess is people just impose multiple \nnamespaces on the consumers of libraries, or are stuck with cumbersome, \nlarge namespaces.\n\nI came across this old thread, which is related. It didn't get very \nfar: https:\/\/groups.google.com\/forum\/#!topic\/clojure\/MwGV6GDN9p8\n\nThanks very much\n\nTom\n\nP.S. I have seen people mentioning \"sub second compiles\" in figwheel. I am \nseeing, e.g. more than 3 seconds to compile a 1,700 file. Does that sound \ntypical? (2012 MacBook Pro)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Pressure towards ever larger namespace\/file Tom Locke Wed, 10 Oct 2018 02:18:02 -0700"},
{"body":"Hi folks\n\nClojurists Together is soon going to be evaluating proposals for our Q4\nfunding round of November 2018 - January 2019. If you maintain a\nClojure\/Script open source project\/service\/something else, please consider\napplying <https:\/\/www.clojuriststogether.org\/open-source\/> for funding. \nWe recently surveyed\n<https:\/\/www.clojuriststogether.org\/news\/q4-2018-survey-results\/> our\nmembers and error messages, documentation, build tools, IDE support, test\ntooling, and linters were things people wanted to see supported. Tools and\ndocumentation targeting beginners to Clojure or to programming, in general,\nwere mentioned by quite a few people. Projects people specifically named\nwere: Shadow CLJS, Figwheel, CIDER, Rum, Datascript, Reagent, Protorepl,\nNeanderthal, LightTable, Leiningen, Fulcro, Expound, and Eastwood.\n\nIf you work on a project named as a focus or a specific project, then we\nwould really love to have you apply.\n\nPrevious projects we have funded include Figwheel, clj-http, CIDER,\nClojureScript, and the two current projects we are funding: cljdoc and\nShadow CLJS. Two successful projects will each be funded $1,800 USD\/mo for\nthree months ($5,400 total).\n\nApplication details are at\nhttps:\/\/www.clojuriststogether.org\/open-source\/. *Applications\nclose on October 9th* (midnight end of day Pacific Time). If you have any\nquestions or would like help with your project proposal, please contact me\nand I'll be happy to help.\n\nIf you work for a company that depends on Clojure staying viable, *please*\nencourage your management to sign up for a company membership\n<https:\/\/www.clojuriststogether.org\/companies\/>. We have had a lot of\nsupport from individual developer members (around 150), but only 18 company\nmembers. If you're in management and Clojurists Together isn't pushing your\nbuttons, let me know what kinds of things would make a membership more\nvaluable for you.\n\nLastly, thanks to all of our company and developer members\n<https:\/\/www.clojuriststogether.org\/members\/>. Without your support, none\nof this could have happened.\n\nThanks, Daniel and the rest of the team\n<https:\/\/www.clojuriststogether.org\/team\/>.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojurists Together Call For Funding Proposals: November 2018 - January 2019 Daniel Compton Wed, 03 Oct 2018 03:08:30 -0700"},
{"body":"Make all those Clojure[Script] repeating repl commands one keystroke away.\nConnect to any repl server (lein repl, fighwheel nrepl so far), define some \ncommands and run them with a keystroke. \nLots of times when developing or dev testing Clojure[Script] applications I \nfind myself at the repl firing a bunch of commands \nonly with the purpose of checking or changing the state of the app. For \nexample : querying some db tables, checking the state of the cache,\nchecking blockchain time or account balances, restaring your components, \nincrementing time, clearing your cache, checking re-frame db or \nsubscriptions etc.\n\nIf that workflow sounds familiar, magic-sheet can help you.\n\nhttps:\/\/github.com\/jpmonettas\/magic-sheet\n\nCheers!\nJuan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] magic-sheet 0.1.0 Juan Monetta Tue, 18 Sep 2018 13:59:29 -0700"},
{"body":"Hello all,\nWe're looking for talented engineers preferably in the San Francisco\/Bay \nArea.\nSomeone that is currently available to start.\nPrimarily a more heavily frontend engineer with some web design knowledge \nfor immediate hire. \nClojurescript, re-frame, re-graph, GCP, App Engine, PosgreSQL, React \nknowledge.\n\nPlease reply privately to me for more information, with your resume, \nlinkedin, github, a demo if you have one. I'll reply with the job \ndescription.\n\nKeep Coding.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Frontend\/Fullstack Engineer in San Francisco for role at startup. Juan-Manuel Clavijo Wed, 05 Sep 2018 11:48:01 -0700"},
{"body":"Cljsjs packages mostly contains external bundles that are prepended to cljs \noutput. It is not processed by GCC nor dead code eliminated. You have to \nconsume JS libraries directly as :npm-modules, then it should work. But I'm \nafraid that scoped npm modules like `@material-ui` do not work in cljs \n1.10, because GCC has open issue for scoped modules resolution. If you are \ngood to go with latest 1.9, it should work. \nOn Sunday, September 2, 2018 at 2:29:47 AM UTC+2, Scott Klarenbach wrote:\n>\n> By adding this to my deps:\n>\n> [cljsjs\/material-ui \"1.4.0-0\"]\n> [cljsjs\/material-ui-icons \"1.1.0-1\"]\n>\n> And this to my core.cljs file:\n>\n>  (:require [material-ui :as ui]\n>               [material-ui-icons :as ic]\n>\n> my file size ballons from 92KB to 1.7MB\n>\n> running lein cljsbuild once min\n>\n> I'm not using any specific material icons yet, just requiring it.  I was \n> under the impression that much of that code would be eliminated by \n> tree-shaking.\n>\n> What gives? \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Dead Code Elimination not happening Ale\u0161 Roub\u00ed\u010dek Sun, 02 Sep 2018 12:57:02 -0700"},
{"body":"I don't know, but on https:\/\/material-ui.com\/style\/icons\/ it says \nImports\n   \n   - \n   \n   If your environment doesn't support tree-shaking, the *recommended* way \n   to import the icons is the following:\n   \n   import AccessAlarmIcon from '@material-ui\/icons\/AccessAlarm';import \nThreeDRotation from '@material-ui\/icons\/ThreeDRotation';\n   \n   - \n   \n   If your environment support tree-shaking you can also import the icons \n   this way:\n   \n   import { AccessAlarm, ThreeDRotation } from '@material-ui\/icons';\n   \n   \nNote: Importing named exports in this way will result in the code for *every \nicon* being included in your project, so is not recommended unless you \nconfigure tree-shaking <https:\/\/webpack.js.org\/guides\/tree-shaking\/>. It \nmay also impact Hot Module Reload performance.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Dead Code Elimination not happening Phill Wolf Sun, 02 Sep 2018 04:08:13 -0700"},
{"body":"I guess it's because the js library wasn't written to be closure compatible. \nWould I better better off installing Material UI as an npm module and then \nincluding those into clojurescript's build?  Would this provide \ntreeshaking?  Of course I'd then have to reproduce the cljsjs integrations. \n\nOn Saturday, September 1, 2018 at 7:29:47 PM UTC-5, Scott Klarenbach wrote:\n>\n> By adding this to my deps:\n>\n> [cljsjs\/material-ui \"1.4.0-0\"]\n> [cljsjs\/material-ui-icons \"1.1.0-1\"]\n>\n> And this to my core.cljs file:\n>\n>  (:require [material-ui :as ui]\n>               [material-ui-icons :as ic]\n>\n> my file size ballons from 92KB to 1.7MB\n>\n> running lein cljsbuild once min\n>\n> I'm not using any specific material icons yet, just requiring it.  I was \n> under the impression that much of that code would be eliminated by \n> tree-shaking.\n>\n> What gives? \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Dead Code Elimination not happening Scott Klarenbach Sat, 01 Sep 2018 17:58:57 -0700"},
{"body":"By adding this to my deps:\n\n[cljsjs\/material-ui \"1.4.0-0\"]\n[cljsjs\/material-ui-icons \"1.1.0-1\"] \nAnd this to my core.cljs file:\n\n (:require [material-ui :as ui]\n              [material-ui-icons :as ic]\n\nmy file size ballons from 92KB to 1.7MB\n\nrunning lein cljsbuild once min\n\nI'm not using any specific material icons yet, just requiring it.  I was \nunder the impression that much of that code would be eliminated by \ntree-shaking.\n\nWhat gives? \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Dead Code Elimination not happening Scott Klarenbach Sat, 01 Sep 2018 17:30:02 -0700"},
{"body":"Meant to paste the URL:   https:\/\/github.com\/cloojure\/cljs-template \nAlan\n\nOn Mon, Aug 20, 2018 at 4:32 PM Alan Thompson <clooj...@gmail.com> wrote:\n\n> If you clone this template project it provides examples of 3 ways in\n> \"import\" native JS code into a CLJS project (see \"dino.js\" etc).\n>\n> g...@github.com:cloojure\/cljs-template.git\n>\n>\n>\n>\n> On Mon, Aug 20, 2018 at 9:37 AM Dusan Miloradovic <\n> dusan.milorado...@gmail.com> wrote:\n>\n>> I think the easiest way to do it is using the shadow-cljs. Here is the\n>> example:\n>> https:\/\/github.com\/shadow-cljs\/examples\/tree\/master\/cljs-react-app\n>>\n>>\n>>\n>> On Mon, Aug 20, 2018 at 6:43 PM Quentin Le Guennec <\n>> quentin.leguenn...@gmail.com> wrote:\n>>\n>>> It doesn't quite answer everything. I would like a full example of a\n>>> project using a react javascript component. Do you have an idea where I\n>>> could find that?\n>>> On 8\/20\/18 3:09 AM, Philos Kim wrote:\n>>>\n>>> The react-flip-move library in the example is written in React\n>>> JavaScript code.\n>>>\n>>> https:\/\/github.com\/joshwcomeau\/react-flip-move\n>>>\n>>> https:\/\/unpkg.com\/react-flip-move@3.0.2\/dist\/react-flip-move.js\n>>>\n>>>\n>>> 2018\ub144 8\uc6d4 19\uc77c \uc77c\uc694\uc77c \uc624\ud6c4 10\uc2dc 11\ubd84 30\ucd08 UTC+9, Quentin Le Guennec \ub2d8\uc758 \ub9d0:\n>>>>\n>>>> Hello, thanks for your answer\n>>>>\n>>>> That is not what I am looking for.\n>>>>\n>>>> I am trying to import javascript code into my clojurescript project.\n>>>> Something you would do with either `require` or `import` in javascript.\n>>>>\n>>>> The node module I need would have to be specified in `defproject`, then\n>>>> downloaded when I run `lein deps`\n>>>>\n>>>> Then in clojurescript, I would have access to that module.\n>>>>\n>>>> On 8\/19\/18 1:58 AM, Philos Kim wrote:\n>>>> > Recer to the section\n>>>> > 'Creating Reagent \"Components\" from React Components' of the\n>>>> following page.\n>>>> >\n>>>> >\n>>>> >\n>>>> https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md\n>>>> >\n>>>>\n>>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>> To post to this group, send email to clojurescript@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>> To post to this group, send email to clojurescript@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Importing react components from clojurescript Alan Thompson Mon, 20 Aug 2018 16:33:49 -0700"},
{"body":"If you clone this template project it provides examples of 3 ways in\n\"import\" native JS code into a CLJS project (see \"dino.js\" etc). \ng...@github.com:cloojure\/cljs-template.git\n\n\n\n\nOn Mon, Aug 20, 2018 at 9:37 AM Dusan Miloradovic <\ndusan.milorado...@gmail.com> wrote:\n\n> I think the easiest way to do it is using the shadow-cljs. Here is the\n> example:\n> https:\/\/github.com\/shadow-cljs\/examples\/tree\/master\/cljs-react-app\n>\n>\n>\n> On Mon, Aug 20, 2018 at 6:43 PM Quentin Le Guennec <\n> quentin.leguenn...@gmail.com> wrote:\n>\n>> It doesn't quite answer everything. I would like a full example of a\n>> project using a react javascript component. Do you have an idea where I\n>> could find that?\n>> On 8\/20\/18 3:09 AM, Philos Kim wrote:\n>>\n>> The react-flip-move library in the example is written in React\n>> JavaScript code.\n>>\n>> https:\/\/github.com\/joshwcomeau\/react-flip-move\n>>\n>> https:\/\/unpkg.com\/react-flip-move@3.0.2\/dist\/react-flip-move.js\n>>\n>>\n>> 2018\ub144 8\uc6d4 19\uc77c \uc77c\uc694\uc77c \uc624\ud6c4 10\uc2dc 11\ubd84 30\ucd08 UTC+9, Quentin Le Guennec \ub2d8\uc758 \ub9d0:\n>>>\n>>> Hello, thanks for your answer\n>>>\n>>> That is not what I am looking for.\n>>>\n>>> I am trying to import javascript code into my clojurescript project.\n>>> Something you would do with either `require` or `import` in javascript.\n>>>\n>>> The node module I need would have to be specified in `defproject`, then\n>>> downloaded when I run `lein deps`\n>>>\n>>> Then in clojurescript, I would have access to that module.\n>>>\n>>> On 8\/19\/18 1:58 AM, Philos Kim wrote:\n>>> > Recer to the section\n>>> > 'Creating Reagent \"Components\" from React Components' of the following\n>>> page.\n>>> >\n>>> >\n>>> >\n>>> https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md\n>>> >\n>>>\n>>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Importing react components from clojurescript Alan Thompson Mon, 20 Aug 2018 16:33:01 -0700"},
{"body":"I am trying to use some browser clojurescript code in Nodejs, and geting \nthe famous \"RangeError: Maximum call stack size exceeded\" error.\nDid anyone have the similar expereinces with clojurescript and core.async \nin Node, and what was the solution? \nThe strangest thing is the stack is just 600 calls deep at the time of \nfailing:\n\n<goog_780431395>\nhttps:\/\/gist.github.com\/dusanmiloradovic\/274c725cd82b0df53823bb086ab11c07\n\nThanks\n\nDusan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] using core.async in nodejs Dusan Miloradovic Mon, 20 Aug 2018 10:19:53 -0700"},
{"body":"I think the easiest way to do it is using the shadow-cljs. Here is the\nexample: https:\/\/github.com\/shadow-cljs\/examples\/tree\/master\/cljs-react-app \n\n\nOn Mon, Aug 20, 2018 at 6:43 PM Quentin Le Guennec <\nquentin.leguenn...@gmail.com> wrote:\n\n> It doesn't quite answer everything. I would like a full example of a\n> project using a react javascript component. Do you have an idea where I\n> could find that?\n> On 8\/20\/18 3:09 AM, Philos Kim wrote:\n>\n> The react-flip-move library in the example is written in React JavaScript\n> code.\n>\n> https:\/\/github.com\/joshwcomeau\/react-flip-move\n>\n> https:\/\/unpkg.com\/react-flip-move@3.0.2\/dist\/react-flip-move.js\n>\n>\n> 2018\ub144 8\uc6d4 19\uc77c \uc77c\uc694\uc77c \uc624\ud6c4 10\uc2dc 11\ubd84 30\ucd08 UTC+9, Quentin Le Guennec \ub2d8\uc758 \ub9d0:\n>>\n>> Hello, thanks for your answer\n>>\n>> That is not what I am looking for.\n>>\n>> I am trying to import javascript code into my clojurescript project.\n>> Something you would do with either `require` or `import` in javascript.\n>>\n>> The node module I need would have to be specified in `defproject`, then\n>> downloaded when I run `lein deps`\n>>\n>> Then in clojurescript, I would have access to that module.\n>>\n>> On 8\/19\/18 1:58 AM, Philos Kim wrote:\n>> > Recer to the section\n>> > 'Creating Reagent \"Components\" from React Components' of the following\n>> page.\n>> >\n>> >\n>> >\n>> https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md\n>> >\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Importing react components from clojurescript Dusan Miloradovic Mon, 20 Aug 2018 09:37:42 -0700"},
{"body":"https:\/\/github.com\/cljsjs\/packages\/tree\/master\/react-flip-move \nAdd the following to :dependencies section in project.clj \n\n[cljsjs\/react-flip-move \"3.0.1-1\"]\n\n\nYour cljs code:\n\n(ns application.core\n  (:require cljsjs.react-flip-move))\n\n(def flip-move (r\/adapt-react-class js\/FlipMove))\n\n(defn my-list [data]\n  [:div\n    [:ul\n      [flip-move {:easing \"cubic-bezier(0, 0.7, 0.8, 0.1)\"}\n        (map (fn [[k v]] (vector :li {:key k} v)) (:list @data))]]\n\n    [:button.btn.btn-primary\n      {:on-click #(swap! data update-in\n                         [:list] (fn [s]\n                                   (into {} (shuffle (seq s)))))}\n      \"Shuffle\"]])  \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Importing react components from clojurescript Philos Kim Mon, 20 Aug 2018 09:36:36 -0700"},
{"body":"It doesn't quite answer everything. I would like a full example of a\nproject using a react javascript component. Do you have an idea where I\ncould find that? \nOn 8\/20\/18 3:09 AM, Philos Kim wrote:\n> The react-flip-move\u00a0library in the example is written in React\n> JavaScript code.\n>\n> https:\/\/github.com\/joshwcomeau\/react-flip-move\n>\n> https:\/\/unpkg.com\/react-flip-move@3.0.2\/dist\/react-flip-move.js\n>\n>\n> 2018\ub144 8\uc6d4 19\uc77c \uc77c\uc694\uc77c \uc624\ud6c4 10\uc2dc 11\ubd84 30\ucd08 UTC+9, Quentin Le Guennec \ub2d8\uc758\n> \ub9d0:\n>\n>     Hello, thanks for your answer\n>\n>     That is not what I am looking for.\n>\n>     I am trying to import javascript code into my clojurescript project.\n>     Something you would do with either `require` or `import` in\n>     javascript.\n>\n>     The node module I need would have to be specified in `defproject`,\n>     then\n>     downloaded when I run `lein deps`\n>\n>     Then in clojurescript, I would have access to that module.\n>\n>     On 8\/19\/18 1:58 AM, Philos Kim wrote:\n>     > Recer to the section\n>     > 'Creating Reagent \"Components\" from React Components' of the\n>     following page.\n>     >\n>     >\n>     >\n>     \n> https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md\n>     \n> <https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md>\n>\n>     >\n>\n> -- \n> Note that posts from new members are moderated - please be patient\n> with your first post.\n> ---\n> You received this message because you are subscribed to the Google\n> Groups \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send\n> an email to clojurescript+unsubscr...@googlegroups.com\n> <mailto:clojurescript+unsubscr...@googlegroups.com>.\n> To post to this group, send email to clojurescript@googlegroups.com\n> <mailto:clojurescript@googlegroups.com>.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"Re: [ClojureScript] Importing react components from clojurescript Quentin Le Guennec Mon, 20 Aug 2018 07:44:03 -0700"},
{"body":"The react-flip-move library in the example is written in React JavaScript \ncode. \nhttps:\/\/github.com\/joshwcomeau\/react-flip-move\n\nhttps:\/\/unpkg.com\/react-flip-move@3.0.2\/dist\/react-flip-move.js\n\n\n2018\ub144 8\uc6d4 19\uc77c \uc77c\uc694\uc77c \uc624\ud6c4 10\uc2dc 11\ubd84 30\ucd08 UTC+9, Quentin Le Guennec \ub2d8\uc758 \ub9d0:\n>\n> Hello, thanks for your answer \n>\n> That is not what I am looking for. \n>\n> I am trying to import javascript code into my clojurescript project. \n> Something you would do with either `require` or `import` in javascript. \n>\n> The node module I need would have to be specified in `defproject`, then \n> downloaded when I run `lein deps` \n>\n> Then in clojurescript, I would have access to that module. \n>\n> On 8\/19\/18 1:58 AM, Philos Kim wrote: \n> > Recer to the section \n> > 'Creating Reagent \"Components\" from React Components' of the following \n> page. \n> > \n> > \n> > \n> https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md\n>  \n> > \n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Importing react components from clojurescript Philos Kim Sun, 19 Aug 2018 18:09:12 -0700"},
{"body":"Hello, thanks for your answer\n\nThat is not what I am looking for. \nI am trying to import javascript code into my clojurescript project.\nSomething you would do with either `require` or `import` in javascript.\n\nThe node module I need would have to be specified in `defproject`, then\ndownloaded when I run `lein deps`\n\nThen in clojurescript, I would have access to that module.\n\nOn 8\/19\/18 1:58 AM, Philos Kim wrote:\n> Recer to the section \n> 'Creating Reagent \"Components\" from React Components' of the following page.\n>\n>\n> https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"Re: [ClojureScript] Importing react components from clojurescript Quentin Le Guennec Sun, 19 Aug 2018 06:11:34 -0700"},
{"body":"Recer to the section \n'Creating Reagent \"Components\" from React Components' of the following page. \n\nhttps:\/\/github.com\/reagent-project\/reagent\/blob\/master\/doc\/InteropWithReact.md\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Importing react components from clojurescript Philos Kim Sat, 18 Aug 2018 16:58:57 -0700"},
{"body":"Hello,\n\nI'm using re-frame lein template with figwheel and reagant. \nI'm looking to import a react component (`react-youtube`) from my\nclojurescript project.\n\nI found several solutions but either they didn't work either they were\ntoo complex.\n\nAnyone knows an easy way too do it?\n\nThanks.\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"[ClojureScript] Importing react components from clojurescript Quentin Le Guennec Sat, 18 Aug 2018 09:15:37 -0700"},
{"body":"It seems this is different then in Clojure, where (do (ns aa) (def a 1)) \nreturns #'aa\/a from the first run. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Odd namespace behavior with `do` Didier Fri, 17 Aug 2018 01:31:58 -0700"},
{"body":"The compiler emits to *out* during compilation. You will need to print to\nsome other output stream like *err* for now. \nDavid\n\nOn Mon, Aug 13, 2018 at 2:41 AM Philos Kim <philo...@gmail.com> wrote:\n\n> I wrote a macro in ClojureScript and wanted to test the macro by using\n> println function like this,\n>\n> ;; qna\/macro.clj\n> (ns qna.macro)\n>\n> (defmacro my-add [a b]\n>   (println \"a =\" a \"b =\" b)   ; <-- Here\n>   `(+ ~a ~b))\n>\n>\n> ;; qna\/main.cljs\n> (ns qna.main\n>   (:require-macros [qna.macro :refer [my-add]]))\n>\n> (defn ^:export main []\n>   (my-add 2 3))\n>\n>\n> resources\/public\/index.html and project.clj are like the following.\n>\n> ;; resources\/public\/index.html\n> <!doctype html>\n> <html lang=\"en\">\n>   <head>\n>     <meta charset='utf-8'>\n>     <title>QnA Demo<\/title>\n>   <\/head>\n>\n>   <body>\n>     <h2>QnA Demo<\/h1>\n>     <div id=\"app\"><\/div>\n>\n>     <script src=\"js\/main.js\"><\/script>\n>     <script>qna.main.main();<\/script>\n>   <\/body>\n> <\/html>\n>\n>\n> ;; project.clj\n> (defproject qna \"0.1.0-SNAPSHOT\"\n>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>                  [org.clojure\/clojurescript \"1.10.339\"]]\n>   :min-lein-version \"2.6.0\"\n>   :plugins [[lein-cljsbuild \"1.1.7\"]\n>             [lein-figwheel \"0.5.16\"]]\n>   :clean-targets ^{:protect false}\n>   [\"target\"\n>    \"resources\/public\/js\/out\"\n>    \"resources\/public\/js\/main.js\"]\n>   :cljsbuild\n>   {:builds\n>    [{:id \"dev\"\n>      :source-paths [\"src\"]\n>      :compiler {:main      qna.main\n>                 :output-to \"resources\/public\/js\/main.js\"\n>                 :output-dir \"resources\/public\/js\/out\/\"\n>                 :asset-path \"js\/out\/\"\n>                 :optimizations :none\n>                 :source-map true\n>                 :pretty-print true} }]})\n>\n> When I open the above .html file in the browser, I encounter the following\n> error.\n>\n> Uncaught SyntaxError: Unexpected identifier in main.js:4\n>\n> And the compiled main.js file is like this.\n>\n> \/\/ Compiled by ClojureScript 1.10.339 {}\n> goog.provide('qna.main');\n> goog.require('cljs.core');\n> a = 2 b = 3  \/\/ <-- embedded printed result\n> qna.main.main = (function qna$main$main(){\n> return ((2) + (3));\n> });\n> goog.exportSymbol('qna.main.main', qna.main.main);\n>\n> \/\/# sourceMappingURL=main.js.map\n>\n>\n> To sum up, whenever I evalute (println ...) within a macro, the printed\n> result doesn't go to the REPL but is embedded into the compiled .js file.\n>\n> If this is a bug of ClojureScript, I will register this error in the\n> ClojureScript JIRA.\n>\n>\n>\n>\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Is this a ClojureScript compiler bug or intended result? David Nolen Mon, 13 Aug 2018 07:48:31 -0700"},
{"body":"You can use `cljs.util\/debug-prn` if you need to print during macro \nexpansion. \nWhether or not this should be called a bug I don't know.\n\nOn Monday, August 13, 2018 at 8:41:05 AM UTC+2, Philos Kim wrote:\n>\n> I wrote a macro in ClojureScript and wanted to test the macro by using \n> println function like this,\n>\n> ;; qna\/macro.clj\n> (ns qna.macro)\n>\n> (defmacro my-add [a b]\n>   (println \"a =\" a \"b =\" b)   ; <-- Here\n>   `(+ ~a ~b))\n>\n>\n> ;; qna\/main.cljs\n> (ns qna.main\n>   (:require-macros [qna.macro :refer [my-add]]))\n>\n> (defn ^:export main []\n>   (my-add 2 3))\n>\n>\n> resources\/public\/index.html and project.clj are like the following.\n>\n> ;; resources\/public\/index.html\n> <!doctype html>\n> <html lang=\"en\">\n>   <head>\n>     <meta charset='utf-8'>\n>     <title>QnA Demo<\/title>\n>   <\/head>\n>   \n>   <body>\n>     <h2>QnA Demo<\/h1>\n>     <div id=\"app\"><\/div> \n>\n>     <script src=\"js\/main.js\"><\/script>\n>     <script>qna.main.main();<\/script>\n>   <\/body>\n> <\/html>\n>\n>\n> ;; project.clj\n> (defproject qna \"0.1.0-SNAPSHOT\"\n>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>                  [org.clojure\/clojurescript \"1.10.339\"]]\n>   :min-lein-version \"2.6.0\"\n>   :plugins [[lein-cljsbuild \"1.1.7\"]\n>             [lein-figwheel \"0.5.16\"]]\n>   :clean-targets ^{:protect false}\n>   [\"target\"\n>    \"resources\/public\/js\/out\"\n>    \"resources\/public\/js\/main.js\"]\n>   :cljsbuild\n>   {:builds\n>    [{:id \"dev\"\n>      :source-paths [\"src\"]\n>      :compiler {:main      qna.main\n>                 :output-to \"resources\/public\/js\/main.js\"\n>                 :output-dir \"resources\/public\/js\/out\/\"\n>                 :asset-path \"js\/out\/\"\n>                 :optimizations :none\n>                 :source-map true\n>                 :pretty-print true} }]})\n>\n> When I open the above .html file in the browser, I encounter the following \n> error.\n>\n> Uncaught SyntaxError: Unexpected identifier in main.js:4\n>\n> And the compiled main.js file is like this.\n>\n> \/\/ Compiled by ClojureScript 1.10.339 {}\n> goog.provide('qna.main');\n> goog.require('cljs.core');\n> a = 2 b = 3  \/\/ <-- embedded printed result\n> qna.main.main = (function qna$main$main(){\n> return ((2) + (3));\n> });\n> goog.exportSymbol('qna.main.main', qna.main.main);\n>\n> \/\/# sourceMappingURL=main.js.map\n>\n>\n> To sum up, whenever I evalute (println ...) within a macro, the printed \n> result doesn't go to the REPL but is embedded into the compiled .js file.\n>\n> If this is a bug of ClojureScript, I will register this error in the \n> ClojureScript JIRA.\n>\n>\n>\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Is this a ClojureScript compiler bug or intended result? Thomas Heller Mon, 13 Aug 2018 02:51:52 -0700"},
{"body":"I wrote a macro in ClojureScript and wanted to test the macro by using \nprintln function like this, \n;; qna\/macro.clj\n(ns qna.macro)\n\n(defmacro my-add [a b]\n  (println \"a =\" a \"b =\" b)   ; <-- Here\n  `(+ ~a ~b))\n\n\n;; qna\/main.cljs\n(ns qna.main\n  (:require-macros [qna.macro :refer [my-add]]))\n\n(defn ^:export main []\n  (my-add 2 3))\n\n\nresources\/public\/index.html and project.clj are like the following.\n\n;; resources\/public\/index.html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset='utf-8'>\n    <title>QnA Demo<\/title>\n  <\/head>\n  \n  <body>\n    <h2>QnA Demo<\/h1>\n    <div id=\"app\"><\/div> \n\n    <script src=\"js\/main.js\"><\/script>\n    <script>qna.main.main();<\/script>\n  <\/body>\n<\/html>\n\n\n;; project.clj\n(defproject qna \"0.1.0-SNAPSHOT\"\n  :dependencies [[org.clojure\/clojure \"1.9.0\"]\n                 [org.clojure\/clojurescript \"1.10.339\"]]\n  :min-lein-version \"2.6.0\"\n  :plugins [[lein-cljsbuild \"1.1.7\"]\n            [lein-figwheel \"0.5.16\"]]\n  :clean-targets ^{:protect false}\n  [\"target\"\n   \"resources\/public\/js\/out\"\n   \"resources\/public\/js\/main.js\"]\n  :cljsbuild\n  {:builds\n   [{:id \"dev\"\n     :source-paths [\"src\"]\n     :compiler {:main      qna.main\n                :output-to \"resources\/public\/js\/main.js\"\n                :output-dir \"resources\/public\/js\/out\/\"\n                :asset-path \"js\/out\/\"\n                :optimizations :none\n                :source-map true\n                :pretty-print true} }]})\n\nWhen I open the above .html file in the browser, I encounter the following \nerror.\n\nUncaught SyntaxError: Unexpected identifier in main.js:4\n\nAnd the compiled main.js file is like this.\n\n\/\/ Compiled by ClojureScript 1.10.339 {}\ngoog.provide('qna.main');\ngoog.require('cljs.core');\na = 2 b = 3  \/\/ <-- embedded printed result\nqna.main.main = (function qna$main$main(){\nreturn ((2) + (3));\n});\ngoog.exportSymbol('qna.main.main', qna.main.main);\n\n\/\/# sourceMappingURL=main.js.map\n\n\nTo sum up, whenever I evalute (println ...) within a macro, the printed \nresult doesn't go to the REPL but is embedded into the compiled .js file.\n\nIf this is a bug of ClojureScript, I will register this error in the \nClojureScript JIRA.\n\n\n\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Is this a ClojureScript compiler bug or intended result? Philos Kim Sun, 12 Aug 2018 23:41:35 -0700"},
{"body":"Hi, \n\nI'm testing out creating a local library with an es6 foreign-lib and then \ndepending on that library using deps.edn. I have a gist outlining the \nissues I've encountered and wanted to know if someone could help me out in \ngetting it to work. \nhttps:\/\/gist.github.com\/colinkahn\/9fd01e15d09f099bc5d8391917d821f7\n\nThanks!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] deps.cljs with module-type es6 Colin Kahn Mon, 06 Aug 2018 07:16:33 -0700"},
{"body":"A few notes about the current state of the proposal:\n\ndefn is not sufficient, fn itself would need to be support too. Example \nuses defn only. \nYour generator examples only show yield in one direction. This is already \npretty much possible with seqs and you can write seq->gen + gen->seq \nfunctions pretty easily for those. No work needs to be done for that. The \npart that is currently possible via seqs is \"var x = yield;\" since \ngenerators\/yield are two-way.\n\nClosure is changing how lanuage-in\/out work. Output will be set as a \nfeature-set specifying exactly which features should be compiled down or \nkept. At least that is what a recent commit [1] suggests. Input already \npretty much detects the feature set when parsing, it is mostly used an \noptimization to skip certain work before parsing. I expect some changes \nhere as well.\n\nThere would need to be a way for processing the CLJS generated code in :none. \nSince no transpilation is done for those usually (since its ES3) that would \nbe an entirely new thing. Given that most developers will be running modern \nenvironments this might not be too critical overall though.\n\n\n\n[1] \nhttps:\/\/github.com\/google\/closure-compiler\/commit\/7d00895022cb0704edd8beeabeabdcb065c365c5\n\n\n\nOn Friday, May 25, 2018 at 10:59:10 PM UTC+2, Shaun LeBron wrote:\n>\n> agreed that core.async is not relevant to this discussion.\n>\n> I suppose the main question is\u2014how should ES6+ (ES Next) features be made \n> available to CLJS users.  Is the story going to be  \"All of ES5 is \n> accessible from CLJS\u2014but you must use an external JS file for ES Next \n> features\"?\n>\n> (I added your transpile link to macros section. Also, I'd love to see \n> emitting ES Modules in the future, though I'm not sure of implications \n> there)\n>\n> On Friday, May 25, 2018 at 11:22:26 AM UTC-5, Thomas Heller wrote:\n>>\n>> Yes, core.async is not great for this but it was also not meant for this. \n>> The big abstraction there are channels or CSP. There are \"zero\" channels \n>> involved in your example so you could probably find a better abstraction to \n>> fit here.\n>>\n>> There are several different concurrency models and all of them have \n>> drawbacks. As I said before I'm for adding support for async\/await and \n>> generators but core.async should not even be part of the argument IMHO. I'm \n>> not trying to convince anyone that core.async is the best solution ever. I \n>> remember vividly how desperately I wanted a proper Actor-like concurrency \n>> primitive when I came over from Erlang. I actually only understood the \n>> drawbacks of Actors after I learned about CSP.\n>>\n>> I made this example a while ago showing what Closure does when rewriting \n>> async\/await to ES3.\n>> https:\/\/gist.github.com\/thheller\/82ca9ef8a04b58aafa4624edbac383ac\n>>\n>> We could emit that JS code directly using a few macros. The only reason \n>> emitting the ES6+ code makes sense is due to tool support and maybe having \n>> slightly more compact code, which is probably not a factor after :advanced \n>> is done with it. We can already interop with all of it very easily, just \n>> writing equivalent code is not ideal.\n>>\n>> To be honest just adding support for async\/await and generators alone \n>> doesn't make much sense to me. At that point we should probably look into \n>> emitting ES6+ESM directly instead and make proper use of all the features \n>> that has. Given that Closure support for ES6 is getting much better that \n>> might make sense at some point.\n>>\n>>\n>> On Friday, May 25, 2018 at 4:45:22 PM UTC+2, Shaun LeBron wrote:\n>>>\n>>> Right!  The proposal mentions that go-blocks must check for a closed \n>>> channel at every step in order to exit early. So I'll revise the \n>>> title\u2014core.async cannot stop *arbitrary* go-blocks.\n>>>\n>>> For example, with this staggered animation code, it's not immediately \n>>> clear to me how to exit after any step. In JS, it pulls the plug for free.\n>>>\n>>> (go\n>>>   (dotimes [_ 3]\n>>>     (swap! game assoc :board cleared)\n>>>     (<! (timeout 170))\n>>>     (swap! game assoc :board board)\n>>>     (<! (timeout 170)))\n>>>   (swap! game assoc :board cleared)\n>>>   (<! (timeout 220))\n>>>   (swap! game assoc :board collapsed))\n>>>\n>>>\n>>> Anyone coming from the Unity game engine will recognize this feature as \n>>> the StopCoroutine function. Core.async does not have such a feature.  the \n>>> ergonomics matter!\n>>>\n>>> On Friday, May 25, 2018 at 3:28:49 AM UTC-5, Thomas Heller wrote:\n>>>>\n>>>>\n>>>>> not quite! core.async doesn't allow you to cancel a go-block (to my \n>>>>> knowledge), which JS allows.  I added a section on this:\n>>>>>\n>>>>>\n>>>>> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript#coreasync\n>>>>>\n>>>>>\n>>>> This is incorrect. Closing a channel can be used to \"end\" a loop. In \n>>>> addition it is possible to use alt! or alts! with an additional \"control\" \n>>>> channel (or more) and \"selecting\" which channel to work on.\n>>>>\n>>>>\n>>>>\n>>>> (defn foo []\n>>>>   (let [ch (async\/chan)]\n>>>>     (go (loop [i 100]\n>>>>           (when (pos? i)\n>>>>             (<! (async\/timeout 1000))\n>>>>             (when (>! ch i)\n>>>>               (recur (dec i)))))\n>>>>         (prn :loop-terminated))\n>>>>     ch))\n>>>>\n>>>> (go (let [ch (foo)]\n>>>>       (prn (<! ch))\n>>>>       (prn (<! ch))\n>>>>       (async\/close! ch)\n>>>>       (prn (<! ch))))\n>>>>\n>>>>\n>>>>  \n>>>> In addition the \"loop\" is dependent on the \"ch\" reference. If that gets \n>>>> garbage collected the loop will be as well, similar to generators or \n>>>> async\/await.\n>>>>\n>>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Thomas Heller Sun, 27 May 2018 22:32:04 -0700"},
{"body":"agreed that core.async is not relevant to this discussion.\n\nI suppose the main question is\u2014how should ES6+ (ES Next) features be made \navailable to CLJS users.  Is the story going to be  \"All of ES5 is \naccessible from CLJS\u2014but you must use an external JS file for ES Next \nfeatures\"? \n(I added your transpile link to macros section. Also, I'd love to see \nemitting ES Modules in the future, though I'm not sure of implications \nthere)\n\nOn Friday, May 25, 2018 at 11:22:26 AM UTC-5, Thomas Heller wrote:\n>\n> Yes, core.async is not great for this but it was also not meant for this. \n> The big abstraction there are channels or CSP. There are \"zero\" channels \n> involved in your example so you could probably find a better abstraction to \n> fit here.\n>\n> There are several different concurrency models and all of them have \n> drawbacks. As I said before I'm for adding support for async\/await and \n> generators but core.async should not even be part of the argument IMHO. I'm \n> not trying to convince anyone that core.async is the best solution ever. I \n> remember vividly how desperately I wanted a proper Actor-like concurrency \n> primitive when I came over from Erlang. I actually only understood the \n> drawbacks of Actors after I learned about CSP.\n>\n> I made this example a while ago showing what Closure does when rewriting \n> async\/await to ES3.\n> https:\/\/gist.github.com\/thheller\/82ca9ef8a04b58aafa4624edbac383ac\n>\n> We could emit that JS code directly using a few macros. The only reason \n> emitting the ES6+ code makes sense is due to tool support and maybe having \n> slightly more compact code, which is probably not a factor after :advanced \n> is done with it. We can already interop with all of it very easily, just \n> writing equivalent code is not ideal.\n>\n> To be honest just adding support for async\/await and generators alone \n> doesn't make much sense to me. At that point we should probably look into \n> emitting ES6+ESM directly instead and make proper use of all the features \n> that has. Given that Closure support for ES6 is getting much better that \n> might make sense at some point.\n>\n>\n> On Friday, May 25, 2018 at 4:45:22 PM UTC+2, Shaun LeBron wrote:\n>>\n>> Right!  The proposal mentions that go-blocks must check for a closed \n>> channel at every step in order to exit early. So I'll revise the \n>> title\u2014core.async cannot stop *arbitrary* go-blocks.\n>>\n>> For example, with this staggered animation code, it's not immediately \n>> clear to me how to exit after any step. In JS, it pulls the plug for free.\n>>\n>> (go\n>>   (dotimes [_ 3]\n>>     (swap! game assoc :board cleared)\n>>     (<! (timeout 170))\n>>     (swap! game assoc :board board)\n>>     (<! (timeout 170)))\n>>   (swap! game assoc :board cleared)\n>>   (<! (timeout 220))\n>>   (swap! game assoc :board collapsed))\n>>\n>>\n>> Anyone coming from the Unity game engine will recognize this feature as \n>> the StopCoroutine function. Core.async does not have such a feature.  the \n>> ergonomics matter!\n>>\n>> On Friday, May 25, 2018 at 3:28:49 AM UTC-5, Thomas Heller wrote:\n>>>\n>>>\n>>>> not quite! core.async doesn't allow you to cancel a go-block (to my \n>>>> knowledge), which JS allows.  I added a section on this:\n>>>>\n>>>>\n>>>> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript#coreasync\n>>>>\n>>>>\n>>> This is incorrect. Closing a channel can be used to \"end\" a loop. In \n>>> addition it is possible to use alt! or alts! with an additional \"control\" \n>>> channel (or more) and \"selecting\" which channel to work on.\n>>>\n>>>\n>>>\n>>> (defn foo []\n>>>   (let [ch (async\/chan)]\n>>>     (go (loop [i 100]\n>>>           (when (pos? i)\n>>>             (<! (async\/timeout 1000))\n>>>             (when (>! ch i)\n>>>               (recur (dec i)))))\n>>>         (prn :loop-terminated))\n>>>     ch))\n>>>\n>>> (go (let [ch (foo)]\n>>>       (prn (<! ch))\n>>>       (prn (<! ch))\n>>>       (async\/close! ch)\n>>>       (prn (<! ch))))\n>>>\n>>>\n>>>  \n>>> In addition the \"loop\" is dependent on the \"ch\" reference. If that gets \n>>> garbage collected the loop will be as well, similar to generators or \n>>> async\/await.\n>>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Shaun LeBron Fri, 25 May 2018 13:59:34 -0700"},
{"body":"thanks!  \nadded: \nhttps:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript#macros \nOn Friday, May 25, 2018 at 1:24:07 PM UTC-5, Didier wrote:\n>\n> For example this blog post shows compatibility: \n> https:\/\/blog.jeaye.com\/2017\/09\/30\/clojurescript-promesa\/\n>\n> And also gives a nice little macro so you can use similar syntax to async \n> and await.\n>\n> The biggest downside is that all the sugar is in a macro, and thus can't \n> rewrite across function boundaries. Though I think that's also true in JS.\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Shaun LeBron Fri, 25 May 2018 13:41:07 -0700"},
{"body":"For example this blog post shows compatibility: \nhttps:\/\/blog.jeaye.com\/2017\/09\/30\/clojurescript-promesa\/ \nAnd also gives a nice little macro so you can use similar syntax to async and \nawait.\n\nThe biggest downside is that all the sugar is in a macro, and thus can't \nrewrite across function boundaries. Though I think that's also true in JS.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Didier Fri, 25 May 2018 11:24:43 -0700"},
{"body":"Yes, core.async is not great for this but it was also not meant for this. \nThe big abstraction there are channels or CSP. There are \"zero\" channels \ninvolved in your example so you could probably find a better abstraction to \nfit here. \nThere are several different concurrency models and all of them have \ndrawbacks. As I said before I'm for adding support for async\/await and \ngenerators but core.async should not even be part of the argument IMHO. I'm \nnot trying to convince anyone that core.async is the best solution ever. I \nremember vividly how desperately I wanted a proper Actor-like concurrency \nprimitive when I came over from Erlang. I actually only understood the \ndrawbacks of Actors after I learned about CSP.\n\nI made this example a while ago showing what Closure does when rewriting \nasync\/await to ES3.\nhttps:\/\/gist.github.com\/thheller\/82ca9ef8a04b58aafa4624edbac383ac\n\nWe could emit that JS code directly using a few macros. The only reason \nemitting the ES6+ code makes sense is due to tool support and maybe having \nslightly more compact code, which is probably not a factor after :advanced \nis done with it. We can already interop with all of it very easily, just \nwriting equivalent code is not ideal.\n\nTo be honest just adding support for async\/await and generators alone \ndoesn't make much sense to me. At that point we should probably look into \nemitting ES6+ESM directly instead and make proper use of all the features \nthat has. Given that Closure support for ES6 is getting much better that \nmight make sense at some point.\n\n\nOn Friday, May 25, 2018 at 4:45:22 PM UTC+2, Shaun LeBron wrote:\n>\n> Right!  The proposal mentions that go-blocks must check for a closed \n> channel at every step in order to exit early. So I'll revise the \n> title\u2014core.async cannot stop *arbitrary* go-blocks.\n>\n> For example, with this staggered animation code, it's not immediately \n> clear to me how to exit after any step. In JS, it pulls the plug for free.\n>\n> (go\n>   (dotimes [_ 3]\n>     (swap! game assoc :board cleared)\n>     (<! (timeout 170))\n>     (swap! game assoc :board board)\n>     (<! (timeout 170)))\n>   (swap! game assoc :board cleared)\n>   (<! (timeout 220))\n>   (swap! game assoc :board collapsed))\n>\n>\n> Anyone coming from the Unity game engine will recognize this feature as \n> the StopCoroutine function. Core.async does not have such a feature.  the \n> ergonomics matter!\n>\n> On Friday, May 25, 2018 at 3:28:49 AM UTC-5, Thomas Heller wrote:\n>>\n>>\n>>> not quite! core.async doesn't allow you to cancel a go-block (to my \n>>> knowledge), which JS allows.  I added a section on this:\n>>>\n>>>\n>>> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript#coreasync\n>>>\n>>>\n>> This is incorrect. Closing a channel can be used to \"end\" a loop. In \n>> addition it is possible to use alt! or alts! with an additional \"control\" \n>> channel (or more) and \"selecting\" which channel to work on.\n>>\n>>\n>>\n>> (defn foo []\n>>   (let [ch (async\/chan)]\n>>     (go (loop [i 100]\n>>           (when (pos? i)\n>>             (<! (async\/timeout 1000))\n>>             (when (>! ch i)\n>>               (recur (dec i)))))\n>>         (prn :loop-terminated))\n>>     ch))\n>>\n>> (go (let [ch (foo)]\n>>       (prn (<! ch))\n>>       (prn (<! ch))\n>>       (async\/close! ch)\n>>       (prn (<! ch))))\n>>\n>>\n>>  \n>> In addition the \"loop\" is dependent on the \"ch\" reference. If that gets \n>> garbage collected the loop will be as well, similar to generators or \n>> async\/await.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Thomas Heller Fri, 25 May 2018 09:22:41 -0700"},
{"body":"Right!  The proposal mentions that go-blocks must check for a closed \nchannel at every step in order to exit early. So I'll revise the \ntitle\u2014core.async cannot stop *arbitrary* go-blocks. \nFor example, with this staggered animation code, it's not immediately clear \nto me how to exit after any step. In JS, it pulls the plug for free.\n\n(go\n  (dotimes [_ 3]\n    (swap! game assoc :board cleared)\n    (<! (timeout 170))\n    (swap! game assoc :board board)\n    (<! (timeout 170)))\n  (swap! game assoc :board cleared)\n  (<! (timeout 220))\n  (swap! game assoc :board collapsed))\n\n\nAnyone coming from the Unity game engine will recognize this feature as the \nStopCoroutine function. Core.async does not have such a feature.  the \nergonomics matter!\n\nOn Friday, May 25, 2018 at 3:28:49 AM UTC-5, Thomas Heller wrote:\n>\n>\n>> not quite! core.async doesn't allow you to cancel a go-block (to my \n>> knowledge), which JS allows.  I added a section on this:\n>>\n>>\n>> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript#coreasync\n>>\n>>\n> This is incorrect. Closing a channel can be used to \"end\" a loop. In \n> addition it is possible to use alt! or alts! with an additional \"control\" \n> channel (or more) and \"selecting\" which channel to work on.\n>\n>\n>\n> (defn foo []\n>   (let [ch (async\/chan)]\n>     (go (loop [i 100]\n>           (when (pos? i)\n>             (<! (async\/timeout 1000))\n>             (when (>! ch i)\n>               (recur (dec i)))))\n>         (prn :loop-terminated))\n>     ch))\n>\n> (go (let [ch (foo)]\n>       (prn (<! ch))\n>       (prn (<! ch))\n>       (async\/close! ch)\n>       (prn (<! ch))))\n>\n>\n>  \n> In addition the \"loop\" is dependent on the \"ch\" reference. If that gets \n> garbage collected the loop will be as well, similar to generators or \n> async\/await.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Shaun LeBron Fri, 25 May 2018 07:45:39 -0700"},
{"body":"I think compatibility shouldn't be an issue. Doesn't the async fn just return a \npromise? So you should be able to call an async fn from ClojureScript. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Didier Fri, 25 May 2018 07:23:41 -0700"},
{"body":">\n>\n> not quite! core.async doesn't allow you to cancel a go-block (to my \n> knowledge), which JS allows.  I added a section on this:\n>\n>\n> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript#coreasync\n>\n>\nThis is incorrect. Closing a channel can be used to \"end\" a loop. In \naddition it is possible to use alt! or alts! with an additional \"control\" \nchannel (or more) and \"selecting\" which channel to work on. \n\n\n(defn foo []\n  (let [ch (async\/chan)]\n    (go (loop [i 100]\n          (when (pos? i)\n            (<! (async\/timeout 1000))\n            (when (>! ch i)\n              (recur (dec i)))))\n        (prn :loop-terminated))\n    ch))\n\n(go (let [ch (foo)]\n      (prn (<! ch))\n      (prn (<! ch))\n      (async\/close! ch)\n      (prn (<! ch))))\n\n\n \nIn addition the \"loop\" is dependent on the \"ch\" reference. If that gets \ngarbage collected the loop will be as well, similar to generators or \nasync\/await.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Thomas Heller Fri, 25 May 2018 01:29:13 -0700"},
{"body":"I used your exact profile.clj and was able to \n`cider-jack-in-clojurescript`. CIDER offered me which type of connection to \nuse and I selected nashorn since I see no figwheel dependencies. If you \nwant to move to figwheel, you'll need some cljsbuild info. \nTry using [cider\/piggieback \"0.3.5\"] along with [lein-figwheel \"0.5.16\"] \nand [\"figwheel-sidecar \"0.5.16\"]. The update from cemerick -> \ncider\/piggieback threw a wrench into things as everything expects the \nformer. Figwheel updated to look for both in later versions.\n\nOn Tuesday, May 1, 2018 at 6:35:26 AM UTC-5, Johannes wrote:\n>\n> Hi,\n>\n> I am looking for a working configuration for Emacs\/Cider\/ClojureScript \n> Repl. Following the instructions given in the Cider manual \n> <http:\/\/cider.readthedocs.io\/en\/latest\/clojurescript\/> I built a \n> project.clj:\n>\n> (defproject piggi \"0.1.0-SNAPSHOT\"\n>   :description \"FIXME: write description\"\n>   :url \"http:\/\/example.com\/FIXME\";\n>   :license {:name \"Eclipse Public License\"\n>             :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>                  [org.clojure\/clojurescript \"1.10.238\"]]  \n>   :profiles\n>   {:dev {:dependencies [[cider\/piggieback \"0.3.1\"]\n>                         [org.clojure\/tools.nrepl \"0.2.13\"]]}         \n>    :repl-options {:nrepl-middleware [cider.piggieback\/wrap-cljs-repl]}})\n>\n> But, if I issue cider-jack-in-clojurescript I get:\n>\n> Starting nREPL server via lein update-in :dependencies conj \n> \\[org.clojure\/tools.nrepl\\ \\\"0.2.12\\\"\\] -- update-in :plugins conj \n> \\[cider\/cider-nrepl\\ \\\"0.12.0-SNAPSHOT\\\"\\] -- repl :headless... \n> <wheel-right> is undefined error in process sentinel: Could not start nREPL \n> server: WARNING: boolean? already refers to: #\u2019clojure.core\/boolean? in \n> namespace: cider.inlined-deps.fipp.v0v6v4.fipp.visit, being replaced by: \n> #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading \n> cider.nrepl.middleware.debug: java.lang.ClassNotFoundException: \n> sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading \n> cider.nrepl.middleware.test: java.lang.RuntimeException: Invalid token: \n> ::clojure.test\/once-fixtures, \n> compiling:(cider\/nrepl\/middleware\/test.clj:106:57) Exception in thread \n> \"main\" java.lang.RuntimeException: Unable to resolve var: \n> cider.nrepl.middleware.test\/wrap-test in this context, \n> compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918)\n>  \n> at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.access$300(Compiler.java:38) at \n> clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at \n> clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at \n> clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.eval(Compiler.java:7059) at \n> clojure.lang.Compiler.eval(Compiler.java:7052) at \n> clojure.lang.Compiler.load(Compiler.java:7514) at \n> clojure.lang.Compiler.loadFile(Compiler.java:7452) at \n> clojure.main$load_script.invokeStatic(main.clj:278) at \n> clojure.main$init_opt.invokeStatic(main.clj:280) at \n> clojure.main$init_opt.invoke(main.clj:280) at \n> clojure.main$initialize.invokeStatic(main.clj:311) at \n> clojure.main$null_opt.invokeStatic(main.clj:345) at \n> clojure.main$null_opt.invoke(main.clj:342) at \n> clojure.main$main.invokeStatic(main.clj:424) at \n> clojure.main$main.doInvoke(main.clj:387) at \n> clojure.lang.RestFn.applyTo(RestFn.java:137) at \n> clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) \n> Caused by: java.lang.RuntimeException: Unable to resolve var: \n> cider.nrepl.middleware.test\/wrap-test in this context at \n> clojure.lang.Util.runtimeException(Util.java:221) at \n> clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess \n> failed error in process sentinel: Could not start nREPL server: WARNING: \n> boolean? already refers to: #\u2019clojure.core\/boolean? in namespace: \n> cider.inlined-deps.fipp.v0v6v4.fipp.visit, being replaced by: \n> #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading \n> cider.nrepl.middleware.debug: java.lang.ClassNotFoundException: \n> sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading \n> cider.nrepl.middleware.test: java.lang.RuntimeException: Invalid token: \n> ::clojure.test\/once-fixtures, \n> compiling:(cider\/nrepl\/middleware\/test.clj:106:57) Exception in thread \n> \"main\" java.lang.RuntimeException: Unable to resolve var: \n> cider.nrepl.middleware.test\/wrap-test in this context, \n> compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918)\n>  \n> at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.access$300(Compiler.java:38) at \n> clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at \n> clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at \n> clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.eval(Compiler.java:7059) at \n> clojure.lang.Compiler.eval(Compiler.java:7052) at \n> clojure.lang.Compiler.load(Compiler.java:7514) at \n> clojure.lang.Compiler.loadFile(Compiler.java:7452) at \n> clojure.main$load_script.invokeStatic(main.clj:278) at \n> clojure.main$init_opt.invokeStatic(main.clj:280) at \n> clojure.main$init_opt.invoke(main.clj:280) at \n> clojure.main$initialize.invokeStatic(main.clj:311) at \n> clojure.main$null_opt.invokeStatic(main.clj:345) at \n> clojure.main$null_opt.invoke(main.clj:342) at \n> clojure.main$main.invokeStatic(main.clj:424) at \n> clojure.main$main.doInvoke(main.clj:387) at \n> clojure.lang.RestFn.applyTo(RestFn.java:137) at \n> clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) \n> Caused by: java.lang.RuntimeException: Unable to resolve var: \n> cider.nrepl.middleware.test\/wrap-test in this context at \n> clojure.lang.Util.runtimeException(Util.java:221) at \n> clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess \n> failed \n>\n> Any hints, what to do?\n> Johannes\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: cider clojurescript repl daniel sutton Thu, 24 May 2018 20:40:18 -0700"},
{"body":"FYI.\n\nI'm working on a ClojureScript library named kitchen-async \n(https:\/\/github.com\/athos\/kitchen-async) in my spare time, and if you would \nlike more syntactic support for Promises than promesa provides (ie. alet \nmacro mentioned above), you might find it useful. \nI know it's not totally an elegant solution for the issue, but it works \nenough (at least for me) in many practical cases.\n\nShogo\n\nOn Friday, May 25, 2018 at 11:01:10 AM UTC+9, Philos Kim wrote:\n>\n> I appreciate all the feedback for my question and came to know that the \n> implementation of the async\/await feature in ClojureScript is not easy as I \n> expected.\n>\n> I agree that ClojureScript doesn't need to accept every new feature in JS \n> and I know that core.async is more powerful than the newly introduced \n> async\/await feature in JS. However I would like to quote a Korean proverb: \n> \"Don't use the knife for slautering a cow, when slautering a cock.\" A \n> simple use case needs a simple solution, not a magnificent and complex one.\n>\n> In JS world, the promise comes out to overcome the callback hell and the \n> async\/await feature comes out to overcome the verbosity of the promise. Of \n> course, I know that the async\/await feature is a syntactic sugar of the \n> promise, so can be used in the promise style in ClojureScript. But What I \n> want to avoid is that verbosity as in JS.\n>\n> Furthermore the async\/await feature is now heavily used in the JS world, \n> especially in nodejs. So I want to use it in ClojureScript at least as JS \n> interop in the similiar way to the JS world, when I use the thrid-party \n> library written using the async\/await feature.\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Shogo Ohta Thu, 24 May 2018 20:40:05 -0700"},
{"body":"I appreciate all the feedback for my question and came to know that the \nimplementation of the async\/await feature in ClojureScript is not easy as I \nexpected. \nI agree that ClojureScript doesn't need to accept every new feature in JS \nand I know that core.async is more powerful than the newly introduced \nasync\/await feature in JS. However I would like to quote a Korean proverb: \n\"Don't use the knife for slautering a cow, when slautering a cock.\" A \nsimple use case needs a simple solution, not a magnificent and complex one.\n\nIn JS world, the promise comes out to overcome the callback hell and the \nasync\/await feature comes out to overcome the verbosity of the promise. Of \ncourse, I know that the async\/await feature is a syntactic sugar of the \npromise, so can be used in the promise style in ClojureScript. But What I \nwant to avoid is that verbosity as in JS.\n\nFurthermore the async\/await feature is now heavily used in the JS world, \nespecially in nodejs. So I want to use it in ClojureScript at least as JS \ninterop in the similiar way to the JS world, when I use the thrid-party \nlibrary written using the async\/await feature.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Philos Kim Thu, 24 May 2018 19:01:26 -0700"},
{"body":"One other thing: although there are some things (like the bug I cited) that\ncould be fixed, the other aspect of exception handling cannot be fixed\nwithout breaking core.async, which, by design, swallows exceptions on the\nproducer side.  David Nolen has a proposal for the <? operator, but that\nrequires the producer to cooperate (and still doesn't help when something\nlike not= or JSON.parse throws an exception you weren't expecting, unless\nyou write the code very carefully).  Promise code just doesn't have this\nproblem because there's a built in error channel that will catch any\nuncaught exception--and that makes debugging much easier. \nOn Thu, May 24, 2018 at 5:02 PM Shaun LeBron <shaunewilli...@gmail.com>\nwrote:\n\n> good point about the IIFEs, added some notes on what to fixl:\n>\n>\n> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript#blockers\n>\n> > [core.async] is a much more powerful abstraction which can do a lot of\n> things async\/await can't and anything that does can easily be achieved with\n> core.async and a few helper functions\/macros\n>\n> not quite! core.async doesn't allow you to cancel a go-block (to my\n> knowledge), which JS allows.  I added a section on this:\n>\n>\n> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript#coreasync\n>\n> On Thursday, May 24, 2018 at 4:44:29 PM UTC-5, Thomas Heller wrote:\n>>\n>> I'm generally in favor of \"embracing the host\" but both generators and\n>> async\/await would probably require substantial rewrites of core parts of\n>> the compiler. It it not just about adding a small *** or *async* keyword\n>> somewhere. The compiler will generally emit anonymous functions at various\n>> places to ensure proper scoping and this can pretty easily break\n>> async\/generator functions. Given that you'd emitting ES6+ anways however\n>> you could replace those with proper block-scoped lets though. Of course\n>> that is not a reason to not do it, just don't underestimate how much work\n>> this would be.\n>>\n>> I certainly looks like the JS world is adopting async\/await but given the\n>> rate of change in that ecosystem that might change again when the next\n>> thing comes along. Given that the React folks decided to implement a pretty\n>> substantial feature based on throwing promises I guess they are here to\n>> stay for a while though.\n>>\n>> I do not think that this compares in any way to core.async however. It is\n>> a much more powerful abstraction which can do a lot of things async\/await\n>> can't and anything that does can easily be achieved with core.async and a\n>> few helper functions\/macros. Yes, core.async is not perfect either but\n>> someone could work on fixing the kinks.\n>>\n>> I guess I agree that we should eventually support async\/await +\n>> generators for the sake of full interop but not because of \"issues\" with\n>> core.async.\n>>\n>>\n>> On Thursday, May 24, 2018 at 6:58:38 PM UTC+2, Shaun LeBron wrote:\n>>>\n>>> thanks for posting this question.  I asked about it a few months ago on\n>>> slack and apparently it has come up a few times.  There is resistance (for\n>>> good reason), but here's a proposal I put together that might get\n>>> discussion going:\n>>>\n>>>\n>>> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript\n>>>\n>>> in summary, core.async doesn't solve all the problems, can be harder to\n>>> debug, and using the promise api directly can be unwieldy.  but there are\n>>> arguments against including the extra syntax.\n>>>\n>>> feedback appreciated!\n>>>\n>>>\n>>> On Wednesday, May 23, 2018 at 11:44:06 PM UTC-5, Philos Kim wrote:\n>>>>\n>>>> I wonder when the async\/await feature in ES8 will be introduced in\n>>>> ClojureScript.\n>>>>\n>>>> Of course, I know there is core.async in ClojureScript but I hope that\n>>>> the async\/await feature in ES8 will be supported in ClojureScript as soon\n>>>> as possible.\n>>>>\n>>>> Does anyone know when it will be supported?\n>>>>\n>>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Justin Lee Thu, 24 May 2018 17:38:30 -0700"},
{"body":"good point about the IIFEs, added some notes on what to fixl:\n\nhttps:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript#blockers \n> [core.async] is a much more powerful abstraction which can do a lot of \nthings async\/await can't and anything that does can easily be achieved with \ncore.async and a few helper functions\/macros\n\nnot quite! core.async doesn't allow you to cancel a go-block (to my \nknowledge), which JS allows.  I added a section on this:\n\nhttps:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript#coreasync\n\nOn Thursday, May 24, 2018 at 4:44:29 PM UTC-5, Thomas Heller wrote:\n>\n> I'm generally in favor of \"embracing the host\" but both generators and \n> async\/await would probably require substantial rewrites of core parts of \n> the compiler. It it not just about adding a small *** or *async* keyword \n> somewhere. The compiler will generally emit anonymous functions at various \n> places to ensure proper scoping and this can pretty easily break \n> async\/generator functions. Given that you'd emitting ES6+ anways however \n> you could replace those with proper block-scoped lets though. Of course \n> that is not a reason to not do it, just don't underestimate how much work \n> this would be.\n>\n> I certainly looks like the JS world is adopting async\/await but given the \n> rate of change in that ecosystem that might change again when the next \n> thing comes along. Given that the React folks decided to implement a pretty \n> substantial feature based on throwing promises I guess they are here to \n> stay for a while though.\n>\n> I do not think that this compares in any way to core.async however. It is \n> a much more powerful abstraction which can do a lot of things async\/await \n> can't and anything that does can easily be achieved with core.async and a \n> few helper functions\/macros. Yes, core.async is not perfect either but \n> someone could work on fixing the kinks.\n>\n> I guess I agree that we should eventually support async\/await + generators \n> for the sake of full interop but not because of \"issues\" with core.async. \n>\n>\n> On Thursday, May 24, 2018 at 6:58:38 PM UTC+2, Shaun LeBron wrote:\n>>\n>> thanks for posting this question.  I asked about it a few months ago on \n>> slack and apparently it has come up a few times.  There is resistance (for \n>> good reason), but here's a proposal I put together that might get \n>> discussion going:\n>>\n>>\n>> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript\n>>\n>> in summary, core.async doesn't solve all the problems, can be harder to \n>> debug, and using the promise api directly can be unwieldy.  but there are \n>> arguments against including the extra syntax.\n>>\n>> feedback appreciated!\n>>\n>>\n>> On Wednesday, May 23, 2018 at 11:44:06 PM UTC-5, Philos Kim wrote:\n>>>\n>>> I wonder when the async\/await feature in ES8 will be introduced in \n>>> ClojureScript.\n>>>\n>>> Of course, I know there is core.async in ClojureScript but I hope that \n>>> the async\/await feature in ES8 will be supported in ClojureScript as soon \n>>> as possible.\n>>>\n>>> Does anyone know when it will be supported?\n>>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Shaun LeBron Thu, 24 May 2018 17:02:29 -0700"},
{"body":"I'm generally in favor of \"embracing the host\" but both generators and \nasync\/await would probably require substantial rewrites of core parts of \nthe compiler. It it not just about adding a small *** or *async* keyword \nsomewhere. The compiler will generally emit anonymous functions at various \nplaces to ensure proper scoping and this can pretty easily break \nasync\/generator functions. Given that you'd emitting ES6+ anways however \nyou could replace those with proper block-scoped lets though. Of course \nthat is not a reason to not do it, just don't underestimate how much work \nthis would be. \nI certainly looks like the JS world is adopting async\/await but given the \nrate of change in that ecosystem that might change again when the next \nthing comes along. Given that the React folks decided to implement a pretty \nsubstantial feature based on throwing promises I guess they are here to \nstay for a while though.\n\nI do not think that this compares in any way to core.async however. It is a \nmuch more powerful abstraction which can do a lot of things async\/await \ncan't and anything that does can easily be achieved with core.async and a \nfew helper functions\/macros. Yes, core.async is not perfect either but \nsomeone could work on fixing the kinks.\n\nI guess I agree that we should eventually support async\/await + generators \nfor the sake of full interop but not because of \"issues\" with core.async. \n\n\nOn Thursday, May 24, 2018 at 6:58:38 PM UTC+2, Shaun LeBron wrote:\n>\n> thanks for posting this question.  I asked about it a few months ago on \n> slack and apparently it has come up a few times.  There is resistance (for \n> good reason), but here's a proposal I put together that might get \n> discussion going:\n>\n>\n> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript\n>\n> in summary, core.async doesn't solve all the problems, can be harder to \n> debug, and using the promise api directly can be unwieldy.  but there are \n> arguments against including the extra syntax.\n>\n> feedback appreciated!\n>\n>\n> On Wednesday, May 23, 2018 at 11:44:06 PM UTC-5, Philos Kim wrote:\n>>\n>> I wonder when the async\/await feature in ES8 will be introduced in \n>> ClojureScript.\n>>\n>> Of course, I know there is core.async in ClojureScript but I hope that \n>> the async\/await feature in ES8 will be supported in ClojureScript as soon \n>> as possible.\n>>\n>> Does anyone know when it will be supported?\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Thomas Heller Thu, 24 May 2018 14:45:07 -0700"},
{"body":"I'm not the OP, but I'll explain why I personally avoid core.async and what\nI do to get features that are roughly equivalent to async\/await today. \nMy first issue with core.async is that you have to be very careful on the\nproducer-side to handle exceptions properly.  If you drop an exception, at\nbest you'll get a stack-trace dumped to the console that often won't have a\nsingle line that traces back to your code.  Instead, you'll get a pile of\ngenerated library code that you have no experience with.  I ran into this\nwhen JSON.parse throws an exception inside cljs-http, which in my opinion\nis just the kind of run-of-the-mill exception that should be easy to debug\n(but isn't).\n\nThe second issue is that there are still a number of bugs with core.async\nsurrounding exception handling.  As I was trying to fix the above issues, I\nran into one of them.  https:\/\/dev.clojure.org\/jira\/browse\/ASYNC-73\n\nIn short, my basic problem with core.async is that it adds a lot of\ncomplexity (and size) to your code, which I'd rather avoid if there are\nbetter alternatives.\n\nThe three non-callback ways of dealing with async code in javascript are\n(1) promises, (2) generators, (3) async\/await.  The first two are es6.  The\nlast is es-2017.  Because these are now built into the language and are\nwidely relied upon, the tooling support (e.g. browser and node) are\nexcellent and all the corner cases have been worked out.\n\nAsync\/await is sugar that you put on top of generators.  The feel of\nasync\/await is exactly like go-blocks, where \"async\" is \"go\" and \"await\" is\n\"<!\".  Both allow you to write code that looks synchronous but is actually\nevent-driven.  Neither can cross function boundaries.  And I believe the\nunderlying implementation is roughly the same idea: chop the synchronous\nbits up into chunks, turn the transitions into a state machine, and then\nkeep track of where you are.  Check out this generator transpiler:\nhttp:\/\/facebook.github.io\/regenerator\/\n\nSo far, though, I've found that async\/await is mostly useful in javascript\nbecause of the fact that you have side-effecting statements and complex\nsyntax where it is convenient to be able to throw an \"await\" without\nrefactoring your code.  In clojurescript, you tend to write code in a\nnon-side-effecting expressions, so I don't find that I need something that\ngeneral.\n\nFor simple things, I find that just relying on plain promises (using the\npromesa library) is enough.  You can do this:\n\n(-> (promise-returning-call)\n    (then (fn [response] ...))\n    (catch (fn [error] ...)))\n\nThis is simple, it is very close to the host language, and there are no\ncorner cases that I know of to surprise you.\n\nSometimes you need to thread the results of an earlier async call to later\ncalls, which can be clumsy.  I think async\/await was largely driven by\nsolving this problem, but I don't think you really need that generality in\nthis language.  I have found that as long as you write \"clojurescripty\"\ncode, the alet macro from the promesa library is all you need.\n\n(alet [a (get-a)\n       b (get-b a)\n       c (get-c a b)]\n  (do-something c))\n\nSetting all that aside, the clear advantage of being able to target\nasync\/await (or maybe just generators) is that you get the native\nimplementation and don't have to do all of this code manipulation in user\nspace.  The tooling is going to be better, the code will be smaller, and\nthe edge cases are going to be handled.  Maybe you could even write a\ncore.async fork without all of the IOC helpers (i.e. just translate\ndirectly to async\/await).\n\nBy the way, I hope I'm not coming off as being critical of the core.async\nauthors.  This stuff is very hard to get right and not everyone is going to\nhave the same design requirements.\n\n\n\nOn Thu, May 24, 2018 at 6:25 AM Nikita Dudnik <nikdud...@gmail.com> wrote:\n\n> Sorry for answering with a question but I have to second Andrew. What's\n> wrong with core.async and more importantly how'd you implement async\/await\n> in clojurescript in terms of syntax?\n>\n> -\n> Nik\n>\n>\n> On Thursday, May 24, 2018 at 6:44:06 AM UTC+2, Philos Kim wrote:\n>>\n>> I wonder when the async\/await feature in ES8 will be introduced in\n>> ClojureScript.\n>>\n>> Of course, I know there is core.async in ClojureScript but I hope that\n>> the async\/await feature in ES8 will be supported in ClojureScript as soon\n>> as possible.\n>>\n>> Does anyone know when it will be supported?\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Justin Lee Thu, 24 May 2018 11:20:51 -0700"},
{"body":"Shaun,\n\nYour email came in while I was drafting mine.  Thank you so much for\nputting together this proposal.  With the features you propose here, we'd\nbe able to do complex async code in javascript with even less code and\nfewer dependencies, and we could rely on the battle tested transpilers and\npolyfills for people who need earlier targets.  I, personally, would love\nto see something like this in the language. \nJustin\n\nOn Thu, May 24, 2018 at 9:58 AM Shaun LeBron <shaunewilli...@gmail.com>\nwrote:\n\n> thanks for posting this question.  I asked about it a few months ago on\n> slack and apparently it has come up a few times.  There is resistance (for\n> good reason), but here's a proposal I put together that might get\n> discussion going:\n>\n>\n> https:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript\n>\n> in summary, core.async doesn't solve all the problems, can be harder to\n> debug, and using the promise api directly can be unwieldy.  but there are\n> arguments against including the extra syntax.\n>\n> feedback appreciated!\n>\n>\n> On Wednesday, May 23, 2018 at 11:44:06 PM UTC-5, Philos Kim wrote:\n>>\n>> I wonder when the async\/await feature in ES8 will be introduced in\n>> ClojureScript.\n>>\n>> Of course, I know there is core.async in ClojureScript but I hope that\n>> the async\/await feature in ES8 will be supported in ClojureScript as soon\n>> as possible.\n>>\n>> Does anyone know when it will be supported?\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Justin Lee Thu, 24 May 2018 11:20:51 -0700"},
{"body":"thanks for posting this question.  I asked about it a few months ago on \nslack and apparently it has come up a few times.  There is resistance (for \ngood reason), but here's a proposal I put together that might get \ndiscussion going: \nhttps:\/\/beta.observablehq.com\/@shaunlebron\/proposal-generators-and-async-functions-in-clojurescript\n\nin summary, core.async doesn't solve all the problems, can be harder to \ndebug, and using the promise api directly can be unwieldy.  but there are \narguments against including the extra syntax.\n\nfeedback appreciated!\n\n\nOn Wednesday, May 23, 2018 at 11:44:06 PM UTC-5, Philos Kim wrote:\n>\n> I wonder when the async\/await feature in ES8 will be introduced in \n> ClojureScript.\n>\n> Of course, I know there is core.async in ClojureScript but I hope that the \n> async\/await feature in ES8 will be supported in ClojureScript as soon as \n> possible.\n>\n> Does anyone know when it will be supported?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Shaun LeBron Thu, 24 May 2018 09:59:19 -0700"},
{"body":"Sorry for answering with a question but I have to second Andrew. What's \nwrong with core.async and more importantly how'd you implement async\/await \nin clojurescript in terms of syntax? \n-\nNik \n\nOn Thursday, May 24, 2018 at 6:44:06 AM UTC+2, Philos Kim wrote:\n>\n> I wonder when the async\/await feature in ES8 will be introduced in \n> ClojureScript.\n>\n> Of course, I know there is core.async in ClojureScript but I hope that the \n> async\/await feature in ES8 will be supported in ClojureScript as soon as \n> possible.\n>\n> Does anyone know when it will be supported?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: When will the async\/await feature in ES8 be introduced in ClojureScript? Nikita Dudnik Thu, 24 May 2018 06:25:39 -0700"},
{"body":"Not familiar with async\/await myself. What would it provides that you can't\nalready do in core.async? \nAndrew Oberstar\n\nOn Wed, May 23, 2018, 11:44 PM Philos Kim <philo...@gmail.com> wrote:\n\n> I wonder when the async\/await feature in ES8 will be introduced in\n> ClojureScript.\n>\n> Of course, I know there is core.async in ClojureScript but I hope that the\n> async\/await feature in ES8 will be supported in ClojureScript as soon as\n> possible.\n>\n> Does anyone know when it will be supported?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] When will the async\/await feature in ES8 be introduced in ClojureScript? Andrew Oberstar Thu, 24 May 2018 05:15:13 -0700"},
{"body":"I wonder when the async\/await feature in ES8 will be introduced in \nClojureScript. \nOf course, I know there is core.async in ClojureScript but I hope that the \nasync\/await feature in ES8 will be supported in ClojureScript as soon as \npossible.\n\nDoes anyone know when it will be supported?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] When will the async\/await feature in ES8 be introduced in ClojureScript? Philos Kim Wed, 23 May 2018 21:44:26 -0700"},
{"body":"dito\n\nJohannes \nAm Montag, 7. Mai 2018 21:30:17 UTC+2 schrieb Alan Thompson:\n>\n> I have tested that it works on Java 10 now using Figwheel 0.5.16.    My \n> project.clj looks so plain now without the tricky\n>\n> #=(eval ...)\n>\n>\n>     :(\n>\n> On Sun, May 6, 2018 at 4:55 PM, Daniel Compton <daniel.com...@gmail.com \n> <javascript:>> wrote:\n>\n>> Working from https:\/\/github.com\/cloojure\/cljs-figwheel-stripped I could \n>> reproduce the issue Alan was seeing with Java 9. Looking at the dependency \n>> tree, I could see that http-kit 2.2.0 was being pulled in by \n>> figwheel-sidecar. http-kit 2.3.0 doesn't depend on the java.xml.bind module \n>> any more, so using that should fix the issue.\n>>\n>> To do so, you can either:\n>>\n>> * Add http-kit 2.3.0 to your dependencies to override the version that \n>> Figwheel 0.5.15 pulls in\n>> * Upgrade to Figwheel 0.5.16, which was released in the last few hours. \n>> This version uses http-kit 2.3.0.\n>>\n>> Both of these options should work for starting up a Figwheel repl using \n>> ClojureScript 1.10 and Java 9, without adding any modules. I was able to do \n>> so on my machine after removing Alan's (clever) :jvm-opts evaling.\n>>\n>> --\n>> Daniel.\n>>\n>> On Sat, May 5, 2018 at 12:16 AM Johannes <bra...@nordakademie.de \n>> <javascript:>> wrote:\n>>\n>>> I've learned from Daniel Compton (in this discussion)\n>>>\n>>> Yep this is a ClojureScript issue. I wrote more about this here \n>>>> https:\/\/www.deps.co\/blog\/how-to-upgrade-clojure-projects-to-use-java-9\/\n>>>> . \n>>>> Until ClojureScript 1.10, you need to add:\n>>>> :jvm-opts [\"--add-modules\" \"java.xml.bind\"]\n>>>> to your Leiningen config.\n>>>\n>>>\n>>> that this kind of workaround will become unnecessary with ClojureScript \n>>> 1.10. That does not seem to be the case.\n>>>\n>>> Johannes\n>>>\n>>> Am Freitag, 4. Mai 2018 08:48:10 UTC+2 schrieb Alan Thompson:\n>>>\n>>>> Cleaned it up a little:\n>>>>\n>>>>   :jvm-opts #=(eval (into [\"-Xmx1g\"]\n>>>>                       (let [version-str (System\/getProperty \n>>>> \"java.version\")]\n>>>>                         (if (or (= \"10\" version-str) (re-find #\"^9\\.\" \n>>>> version-str))\n>>>>                           [\"--add-modules\" \"java.xml.bind\"] ; needed \n>>>> for java 9 or 10\n>>>>                           [])))) ; java 8 or below\n>>>>\n>>>>\n>>>>\n>>>>\n>>>> On Thu, May 3, 2018 at 11:37 PM, Alan Thompson <cloo...@gmail.com> \n>>>> wrote:\n>>>>\n>>> I created a little lein dynamic eval code to automatically handle the \n>>>>> :jvm-opts stuff for Java 8\/9\/10:\n>>>>>\n>>>>>  :jvm-opts #=(eval (let [version-str (System\/getProperty \n>>>>> \"java.version\")]\n>>>>>                      (cond\n>>>>>                        (re-find #\"^9\\.\" version-str)  [\"-Xmx1g\" \n>>>>> \"--add-modules\" \"java.xml.bind\"]\n>>>>>                        (= \"10\" version-str)           [\"-Xmx1g\" \n>>>>> \"--add-modules\" \"java.xml.bind\"]\n>>>>>                        :else                          [\"-Xmx1g\"])))\n>>>>>\n>>>>>\n>>>>>\n>>>>>\n>>>>> On Thu, May 3, 2018 at 8:45 PM, Alan Thompson <cloo...@gmail.com> \n>>>>> wrote:\n>>>>>\n>>>> I just tried it with Java 10.  I get the same error as for Java 9, and \n>>>>>> it has the same fix:\n>>>>>>\n>>>>>>   :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"])\n>>>>>>\n>>>>>>\n>>>>>> This is with \n>>>>>>\n>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"] ]\n>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions \n>>>>>> [[org.clojure\/clojure]]]\n>>>>>>             [lein-figwheel \"0.5.15\"] ]\n>>>>>>\n>>>>>>\n>>>>>> So one of those dependencies is still not cool with java 9\/10.\n>>>>>>\n>>>>>> Clojure itself works fine on Java 10 (just tested).\n>>>>>>\n>>>>>> The stacktrace mentiones both http-kit and \n>>>>>> figwheel-sidecar\/figwheel-server.... not sure who the culprit is (or \n>>>>>> clojurescript 1.10.238 ?)\n>>>>>> Alan\n>>>>>>\n>>>>>>\n>>>>>> On Thu, May 3, 2018 at 8:22 PM, Alan Thompson <cloo...@gmail.com> \n>>>>>> wrote:\n>>>>>>\n>>>>> Hmmm, OK, I just noticed I am on JVM 1.8.   If I switch to java 9, I \n>>>>>>> get the same error as you.\n>>>>>>>\n>>>>>>\n>>>>>>> On Thu, May 3, 2018 at 4:36 PM, Johannes <bra...@nordakademie.de> \n>>>>>>> wrote:\n>>>>>>>\n>>>>>>>> I'm sorry, but I get the same stack trace as before. And again: if \n>>>>>>>> I modify the :jvm-opts\n>>>>>>>>\n>>>>>>>> :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"]\n>>>>>>>>\n>>>>>>>> all works fine.\n>>>>>>>>\n>>>>>>>> Johannes\n>>>>>>>>\n>>>>>>>> Am Freitag, 4. Mai 2018 00:08:48 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>\n>>>>>>>>> OK, I made a super-stripped down version to remove possible config \n>>>>>>>>> problems.  Try this:\n>>>>>>>>>\n>>>>>>>>> https:\/\/github.com\/cloojure\/cljs-figwheel-stripped.git\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> Alan\n>>>>>>>>>\n>>>>>>>>> On Thu, May 3, 2018 at 1:56 PM, Johannes <bra...@nordakademie.de> \n>>>>>>>>> wrote:\n>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>\n>>>>>>>>>>> And what happens if you type `lein figwheel` ?\n>>>>>>>>>>>\n>>>>>>>>>> The same problem as before:\n>>>>>>>>>>\n>>>>>>>>>> JohMBAir:cljs-template-master johannes$ lein figwheel\n>>>>>>>>>>\n>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>\n>>>>>>>>>> Exception in thread \"main\" java.lang.ExceptionInInitializerError\n>>>>>>>>>>\n>>>>>>>>>> at clojure.main.<clinit>(main.java:20)\n>>>>>>>>>>\n>>>>>>>>>> Caused by: java.lang.ClassNotFoundException: \n>>>>>>>>>> javax.xml.bind.DatatypeConverter, \n>>>>>>>>>> compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>>>>\n>>>>>>>>>> at figwheel_sidecar.components.fi\n>>>>>>>>>> gwheel_server$eval18306$loading__6434__auto____18307.invoke(figwheel_server.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at figwheel_sidecar.components.fi\n>>>>>>>>>> gwheel_server$eval18306.invokeStatic(figwheel_server.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at figwheel_sidecar.components.fi\n>>>>>>>>>> gwheel_server$eval18306.invoke(figwheel_server.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>>>>\n>>>>>>>>>> at \n>>>>>>>>>> figwheel_sidecar.repl$eval9100$loading__6434__auto____9101.invoke(repl.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>>>>\n>>>>>>>>>> at \n>>>>>>>>>> figwheel_sidecar.system$eval9094$loading__6434__auto____9095.invoke(system.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:930)\n>>>>>>>>>>\n>>>>>>>>>> at \n>>>>>>>>>> figwheel_sidecar.repl_api$eval19$loading__6434__auto____20.invoke(repl_api.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>>\n>>>>>>>>>> at user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at user$eval13.invokeStatic(user.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at user$eval13.invoke(user.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:366)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.doInit(RT.java:482)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.<clinit>(RT.java:336)\n>>>>>>>>>>\n>>>>>>>>>> ... 1 more\n>>>>>>>>>>\n>>>>>>>>>> Caused by: java.lang.ClassNotFoundException: \n>>>>>>>>>> javax.xml.bind.DatatypeConverter\n>>>>>>>>>>\n>>>>>>>>>> at java.base\/java.net\n>>>>>>>>>> .URLClassLoader.findClass(URLClassLoader.java:466)\n>>>>>>>>>>\n>>>>>>>>>> at \n>>>>>>>>>> clojure.lang.DynamicClassLoader.findClass(DynamicClassLoader.java:69)\n>>>>>>>>>>\n>>>>>>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n>>>>>>>>>>\n>>>>>>>>>> at \n>>>>>>>>>> clojure.lang.DynamicClassLoader.loadClass(DynamicClassLoader.java:77)\n>>>>>>>>>>\n>>>>>>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>>>>>>>>>>\n>>>>>>>>>> at java.base\/java.lang.Class.forName0(Native Method)\n>>>>>>>>>>\n>>>>>>>>>> at java.base\/java.lang.Class.forName(Class.java:375)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.classForName(RT.java:2204)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n>>>>>>>>>>\n>>>>>>>>>> at org.httpkit.server$eval18583$loading__6434__auto____18584.in\n>>>>>>>>>> voke(server.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at org.httpkit.server$eval18583.invoke(server.clj:1)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>>\n>>>>>>>>>> ... 146 more\n>>>>>>>>>>\n>>>>>>>>>> Johannes \n>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de\n>>>>>>>>>>> > wrote:\n>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> That looks good.  Can you verify it matches what is in \n>>>>>>>>>>>>> `project.clj`?  \n>>>>>>>>>>>>>\n>>>>>>>>>>>> Yes, I think it does. That's the downloaded project.clj:\n>>>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>>>                 ]\n>>>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions \n>>>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>>>\n>>>>>>>>>>>>   :doo {:karma {:config {\"plugins\"       \n>>>>>>>>>>>> [\"karma-junit-reporter\"]\n>>>>>>>>>>>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>>>>>>>>>>>                          \"junitReporter\" {\"outputDir\" \n>>>>>>>>>>>> \"target\/test-results\"}}}\n>>>>>>>>>>>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>>>>>>>>>>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" \n>>>>>>>>>>>> }}\n>>>>>>>>>>>>   :source-paths [\"src\"]\n>>>>>>>>>>>>   :cljsbuild {:builds\n>>>>>>>>>>>>               [{:id           \"dev\"\n>>>>>>>>>>>>                 :source-paths [\"src\"]\n>>>>>>>>>>>>                 ;; The presence of a :figwheel configuration \n>>>>>>>>>>>> here will cause figwheel to inject the\n>>>>>>>>>>>>                 ;; figwheel client into your build\n>>>>>>>>>>>>                 :figwheel     {:on-jsload \n>>>>>>>>>>>> \"flintstones.core\/on-js-reload\"\n>>>>>>>>>>>>                                ;; :open-urls will pop open your \n>>>>>>>>>>>> application in the default browser once\n>>>>>>>>>>>>                                ;; Figwheel has started and \n>>>>>>>>>>>> compiled your application.  Comment this out\n>>>>>>>>>>>>                                ;; once it no longer serves you.\n>>>>>>>>>>>>                                :open-urls [\"\n>>>>>>>>>>>> http:\/\/localhost:3449\/index.html\"]}\n>>>>>>>>>>>>                 :compiler     {:main                 \n>>>>>>>>>>>> flintstones.core\n>>>>>>>>>>>>                                :optimizations        :none\n>>>>>>>>>>>>                                :libs                 \n>>>>>>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>>>>>>\n>>>>>>>>>>>>                                :foreign-libs         [{:file   \n>>>>>>>>>>>>   \"dino.js\"\n>>>>>>>>>>>>                                                       \n>>>>>>>>>>>>  :provides [\"dinoPhony\"]}]\n>>>>>>>>>>>>                                :externs             \n>>>>>>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>>>>>>\n>>>>>>>>>>>>                                :output-to           \n>>>>>>>>>>>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>>>>>                                :output-dir           \n>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>>>>>>>>>>>                                :asset-path           \n>>>>>>>>>>>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of \n>>>>>>>>>>>> `resources\/public`\n>>>>>>>>>>>>                                                         ; ^^^ \n>>>>>>>>>>>> must match :output-dir\n>>>>>>>>>>>>                                :source-map-timestamp true\n>>>>>>>>>>>>                                ;; To console.log CLJS \n>>>>>>>>>>>> data-structures make sure you enable devtools in Chrome\n>>>>>>>>>>>>                                ;; \n>>>>>>>>>>>> https:\/\/github.com\/binaryage\/cljs-devtools\n>>>>>>>>>>>>                                :preloads             \n>>>>>>>>>>>> [devtools.preload]}}\n>>>>>>>>>>>>\n>>>>>>>>>>>>                {:id           \"test\"\n>>>>>>>>>>>>                 :source-paths [\"src\" \"test\"]\n>>>>>>>>>>>>                 :compiler     {:main                 \n>>>>>>>>>>>> tst.flintstones.doorunner\n>>>>>>>>>>>>                                :optimizations        :none ; \n>>>>>>>>>>>> :advanced\n>>>>>>>>>>>>                                :libs                 \n>>>>>>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>>>>>>\n>>>>>>>>>>>>                                :foreign-libs         [{:file   \n>>>>>>>>>>>>   \"dino.js\"\n>>>>>>>>>>>>                                                       \n>>>>>>>>>>>>  :provides [\"dinoPhony\"]}]\n>>>>>>>>>>>>                                :externs             \n>>>>>>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>>>>>>\n>>>>>>>>>>>>                                :output-to           \n>>>>>>>>>>>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>>>>>>>>>>>                                :output-dir           \n>>>>>>>>>>>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>>>>>>>>>>>                                ;:asset-path           \n>>>>>>>>>>>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of \n>>>>>>>>>>>> `resources\/public`\n>>>>>>>>>>>>\n>>>>>>>>>>>>                                :source-map-timestamp true}}]}\n>>>>>>>>>>>>\n>>>>>>>>>>>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>>>>>>>>>>>                                    [figwheel-sidecar \"0.5.15\"]\n>>>>>>>>>>>>                                    [com.cemerick\/piggieback \n>>>>>>>>>>>> \"0.2.2\"]]\n>>>>>>>>>>>>                    ;; need to add dev source path here to get \n>>>>>>>>>>>> user.clj loaded\n>>>>>>>>>>>>                    :source-paths  [\"src\" \"dev\"]\n>>>>>>>>>>>>                    ;; for CIDER\n>>>>>>>>>>>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>>>>>>>>>>>                    :repl-options  {:nrepl-middleware \n>>>>>>>>>>>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>>>>>>>>>>>                    ;; need to add the compliled assets to the \n>>>>>>>>>>>> :clean-targets\n>>>>>>>>>>>>                    :clean-targets ^{:protect false} \n>>>>>>>>>>>> [\"resources\/public\/js\/compiled\"\n>>>>>>>>>>>>                                                      \"out\"\n>>>>>>>>>>>>                                                     \n>>>>>>>>>>>>  :target-path]}}\n>>>>>>>>>>>>\n>>>>>>>>>>>>   :jvm-opts [\"-Xmx1g\"])\n>>>>>>>>>>>>\n>>>>>>>>>>>>  \n>>>>>>>>>>>>\n>>>>>>>>>>>>> Also, try `lein --version` or type `lein repl` to verify the \n>>>>>>>>>>>>> same stuff is found.\n>>>>>>>>>>>>>\n>>>>>>>>>>>> JohMBAir:piggi johannes$ lein -version\n>>>>>>>>>>>>\n>>>>>>>>>>>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>>>>>>>>>>>\n>>>>>>>>>>>> JohMBAir:piggi johannes$ lein repl\n>>>>>>>>>>>>\n>>>>>>>>>>>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>>>>>>>>>>>> 127.0.0.1:57650\n>>>>>>>>>>>>\n>>>>>>>>>>>> REPL-y 0.3.7, nREPL 0.2.13\n>>>>>>>>>>>>\n>>>>>>>>>>>> Clojure 1.9.0\n>>>>>>>>>>>>\n>>>>>>>>>>>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>>>>>>>>>>>\n>>>>>>>>>>>>     Docs: (doc function-name-here)\n>>>>>>>>>>>>\n>>>>>>>>>>>>           (find-doc \"part-of-name-here\")\n>>>>>>>>>>>>\n>>>>>>>>>>>>   Source: (source function-name-here)\n>>>>>>>>>>>>\n>>>>>>>>>>>>  Javadoc: (javadoc java-object-or-class-here)\n>>>>>>>>>>>>\n>>>>>>>>>>>>     Exit: Control+D or (exit) or (quit)\n>>>>>>>>>>>>\n>>>>>>>>>>>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>> user=> \n>>>>>>>>>>>>  \n>>>>>>>>>>>> Johannes\n>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <\n>>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>> I am not sure if this is what you want to see:\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile \n>>>>>>>>>>>>>> hello-world.core --repl\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> cljs.user=> ^D\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> JohMBAir:hello-world johannes$ clj\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Clojure 1.9.0\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> user=> ^D\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> JohMBAir:hello-world johannes$ java --version\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> java 9.0.1\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <\n>>>>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> lein figwheel\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> I get the known error:\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from \n>>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from \n>>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom \n>>>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from \n>>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom \n>>>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom\n>>>>>>>>>>>>>>>>  from central\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> org\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom\n>>>>>>>>>>>>>>>>  from \n>>>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom from \n>>>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom from \n>>>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom\n>>>>>>>>>>>>>>>>  from \n>>>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from \n>>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar\n>>>>>>>>>>>>>>>>  from \n>>>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>>>>>>>>>>>  \n>>>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>>>>>>>>>>>  \n>>>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar\n>>>>>>>>>>>>>>>>  from \n>>>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar\n>>>>>>>>>>>>>>>>  from central\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from \n>>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from \n>>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from \n>>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar \n>>>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from \n>>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar \n>>>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from \n>>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Exception in thread \"main\" \n>>>>>>>>>>>>>>>> java.lang.ClassNotFoundException: \n>>>>>>>>>>>>>>>> javax.xml.bind.DatatypeConverter, \n>>>>>>>>>>>>>>>> compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> ...\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan \n>>>>>>>>>>>>>>>> Thompson:\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> I am not including `--add-modules` in my template project \n>>>>>>>>>>>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it \n>>>>>>>>>>>>>>>>> works great:\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>>>>>>>>                 ]\n>>>>>>>>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions \n>>>>>>>>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> ---------------------------\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> ~\/expr\/cljs-template > lein figwheel            \n>>>>>>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>>>>>>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>>>>>>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>>>>>>>>>>>> Figwheel: Watching build - dev\n>>>>>>>>>>>>>>>>> Compiling build :dev to \n>>>>>>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" from [\"src\"]...\n>>>>>>>>>>>>>>>>> Successfully compiled build :dev to \n>>>>>>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 \n>>>>>>>>>>>>>>>>> seconds.\n>>>>>>>>>>>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>>>>>>>>>>>> ...\n>>>>>>>>>>>>>>>>>     Exit: :cljs\/quit\n>>>>>>>>>>>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last \n>>>>>>>>>>>>>>>>> exception object\n>>>>>>>>>>>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>>>>>>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>>>>>>>> dev:cljs.user!{:conn 2}=> \n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <\n>>>>>>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>> I've learned from several discussions (\n>>>>>>>>>>>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) \n>>>>>>>>>>>>>>>>>> that the problem was ClojureScript 1.9 and that one should \n>>>>>>>>>>>>>>>>>> use the \n>>>>>>>>>>>>>>>>>> tag :jvm-opts [\"--add-modules\" \"java.xml.bind\"] until a new \n>>>>>>>>>>>>>>>>>> ClojureScript \n>>>>>>>>>>>>>>>>>> version is out.\n>>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb \n>>>>>>>>>>>>>>>>>> Phill Wolf:\n>>>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>>> Is this it? --> \n>>>>>>>>>>>>>>>>>>> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>> -- \n>>>>>>>>>>>>>>>>>> Note that posts from new members are moderated - please \n>>>>>>>>>>>>>>>>>> be patient with your first post.\n>>>>>>>>>>>>>>>>>> --- \n>>>>>>>>>>>>>>>>>> You received this message because you are subscribed to \n>>>>>>>>>>>>>>>>>> the Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails \n>>>>>>>>>>>>>>>>>> from it, send an email to \n>>>>>>>>>>>>>>>>>> clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>>>>>>> To post to this group, send email to \n>>>>>>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>>>>>>> Visit this group at \n>>>>>>>>>>>>>>>>>> https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> -- \n>>>>>>>>>>>>>>>> Note that posts from new members are moderated - please be \n>>>>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>>>>> --- \n>>>>>>>>>>>>>>>> You received this message because you are subscribed to the \n>>>>>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails \n>>>>>>>>>>>>>>>> from it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>>>>> To post to this group, send email to \n>>>>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>>>>> Visit this group at \n>>>>>>>>>>>>>>>> https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> -- \n>>>>>>>>>>>>>> Note that posts from new members are moderated - please be \n>>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>>> --- \n>>>>>>>>>>>>>> You received this message because you are subscribed to the \n>>>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from \n>>>>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>>> To post to this group, send email to \n>>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>>> Visit this group at \n>>>>>>>>>>>>>> https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> -- \n>>>>>>>>>>>> Note that posts from new members are moderated - please be \n>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>> --- \n>>>>>>>>>>>> You received this message because you are subscribed to the \n>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from \n>>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com\n>>>>>>>>>>>> .\n>>>>>>>>>>>> Visit this group at \n>>>>>>>>>>>> https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> -- \n>>>>>>>>>> Note that posts from new members are moderated - please be \n>>>>>>>>>> patient with your first post.\n>>>>>>>>>> --- \n>>>>>>>>>> You received this message because you are subscribed to the \n>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript\n>>>>>>>>>> .\n>>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> -- \n>>>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>>>> with your first post.\n>>>>>>>> --- \n>>>>>>>> You received this message because you are subscribed to the Google \n>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>\n>>>>>>>\n>>>>>>> -- \n>>> Note that posts from new members are moderated - please be patient with \n>>> your first post.\n>>> --- \n>>> You received this message because you are subscribed to the Google \n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send \n>>> an email to clojurescrip...@googlegroups.com <javascript:>.\n>>> To post to this group, send email to clojur...@googlegroups.com \n>>> <javascript:>.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Johannes Tue, 08 May 2018 05:43:18 -0700"},
{"body":"I have tested that it works on Java 10 now using Figwheel 0.5.16.    My\nproject.clj looks so plain now without the tricky \n#=(eval ...)\n\n\n    :(\n\nOn Sun, May 6, 2018 at 4:55 PM, Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> Working from https:\/\/github.com\/cloojure\/cljs-figwheel-stripped I could\n> reproduce the issue Alan was seeing with Java 9. Looking at the dependency\n> tree, I could see that http-kit 2.2.0 was being pulled in by\n> figwheel-sidecar. http-kit 2.3.0 doesn't depend on the java.xml.bind module\n> any more, so using that should fix the issue.\n>\n> To do so, you can either:\n>\n> * Add http-kit 2.3.0 to your dependencies to override the version that\n> Figwheel 0.5.15 pulls in\n> * Upgrade to Figwheel 0.5.16, which was released in the last few hours.\n> This version uses http-kit 2.3.0.\n>\n> Both of these options should work for starting up a Figwheel repl using\n> ClojureScript 1.10 and Java 9, without adding any modules. I was able to do\n> so on my machine after removing Alan's (clever) :jvm-opts evaling.\n>\n> --\n> Daniel.\n>\n> On Sat, May 5, 2018 at 12:16 AM Johannes <bra...@nordakademie.de> wrote:\n>\n>> I've learned from Daniel Compton (in this discussion)\n>>\n>> Yep this is a ClojureScript issue. I wrote more about this here\n>>> https:\/\/www.deps.co\/blog\/how-to-upgrade-clojure-projects-to-use-java-9\/\n>>> .\n>>> Until ClojureScript 1.10, you need to add:\n>>> :jvm-opts [\"--add-modules\" \"java.xml.bind\"]\n>>> to your Leiningen config.\n>>\n>>\n>> that this kind of workaround will become unnecessary with ClojureScript\n>> 1.10. That does not seem to be the case.\n>>\n>> Johannes\n>>\n>> Am Freitag, 4. Mai 2018 08:48:10 UTC+2 schrieb Alan Thompson:\n>>\n>>> Cleaned it up a little:\n>>>\n>>>   :jvm-opts #=(eval (into [\"-Xmx1g\"]\n>>>                       (let [version-str (System\/getProperty\n>>> \"java.version\")]\n>>>                         (if (or (= \"10\" version-str) (re-find #\"^9\\.\"\n>>> version-str))\n>>>                           [\"--add-modules\" \"java.xml.bind\"] ; needed for\n>>> java 9 or 10\n>>>                           [])))) ; java 8 or below\n>>>\n>>>\n>>>\n>>>\n>>> On Thu, May 3, 2018 at 11:37 PM, Alan Thompson <cloo...@gmail.com>\n>>> wrote:\n>>>\n>> I created a little lein dynamic eval code to automatically handle the\n>>>> :jvm-opts stuff for Java 8\/9\/10:\n>>>>\n>>>>  :jvm-opts #=(eval (let [version-str (System\/getProperty\n>>>> \"java.version\")]\n>>>>                      (cond\n>>>>                        (re-find #\"^9\\.\" version-str)  [\"-Xmx1g\"\n>>>> \"--add-modules\" \"java.xml.bind\"]\n>>>>                        (= \"10\" version-str)           [\"-Xmx1g\"\n>>>> \"--add-modules\" \"java.xml.bind\"]\n>>>>                        :else                          [\"-Xmx1g\"])))\n>>>>\n>>>>\n>>>>\n>>>>\n>>>> On Thu, May 3, 2018 at 8:45 PM, Alan Thompson <cloo...@gmail.com>\n>>>> wrote:\n>>>>\n>>> I just tried it with Java 10.  I get the same error as for Java 9, and\n>>>>> it has the same fix:\n>>>>>\n>>>>>   :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"])\n>>>>>\n>>>>>\n>>>>> This is with\n>>>>>\n>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>                  [org.clojure\/clojurescript \"1.10.238\"] ]\n>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>> [[org.clojure\/clojure]]]\n>>>>>             [lein-figwheel \"0.5.15\"] ]\n>>>>>\n>>>>>\n>>>>> So one of those dependencies is still not cool with java 9\/10.\n>>>>>\n>>>>> Clojure itself works fine on Java 10 (just tested).\n>>>>>\n>>>>> The stacktrace mentiones both http-kit and \n>>>>> figwheel-sidecar\/figwheel-server....\n>>>>> not sure who the culprit is (or clojurescript 1.10.238 ?)\n>>>>> Alan\n>>>>>\n>>>>>\n>>>>> On Thu, May 3, 2018 at 8:22 PM, Alan Thompson <cloo...@gmail.com>\n>>>>> wrote:\n>>>>>\n>>>> Hmmm, OK, I just noticed I am on JVM 1.8.   If I switch to java 9, I\n>>>>>> get the same error as you.\n>>>>>>\n>>>>>\n>>>>>> On Thu, May 3, 2018 at 4:36 PM, Johannes <bra...@nordakademie.de>\n>>>>>> wrote:\n>>>>>>\n>>>>>>> I'm sorry, but I get the same stack trace as before. And again: if I\n>>>>>>> modify the :jvm-opts\n>>>>>>>\n>>>>>>> :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"]\n>>>>>>>\n>>>>>>> all works fine.\n>>>>>>>\n>>>>>>> Johannes\n>>>>>>>\n>>>>>>> Am Freitag, 4. Mai 2018 00:08:48 UTC+2 schrieb Alan Thompson:\n>>>>>>>>\n>>>>>>>> OK, I made a super-stripped down version to remove possible config\n>>>>>>>> problems.  Try this:\n>>>>>>>>\n>>>>>>>> https:\/\/github.com\/cloojure\/cljs-figwheel-stripped.git\n>>>>>>>>\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> Alan\n>>>>>>>>\n>>>>>>>> On Thu, May 3, 2018 at 1:56 PM, Johannes <bra...@nordakademie.de>\n>>>>>>>> wrote:\n>>>>>>>>\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>\n>>>>>>>>>> And what happens if you type `lein figwheel` ?\n>>>>>>>>>>\n>>>>>>>>> The same problem as before:\n>>>>>>>>>\n>>>>>>>>> JohMBAir:cljs-template-master johannes$ lein figwheel\n>>>>>>>>>\n>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>\n>>>>>>>>> Exception in thread \"main\" java.lang.ExceptionInInitializerError\n>>>>>>>>>\n>>>>>>>>> at clojure.main.<clinit>(main.java:20)\n>>>>>>>>>\n>>>>>>>>> Caused by: java.lang.ClassNotFoundException: \n>>>>>>>>> javax.xml.bind.DatatypeConverter,\n>>>>>>>>> compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.components.figwheel_server$eval18306$\n>>>>>>>>> loading__6434__auto____18307.invoke(figwheel_server.clj:1)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.components.figwheel_server$eval18306.\n>>>>>>>>> invokeStatic(figwheel_server.clj:1)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.components.figwheel_server$eval18306.\n>>>>>>>>> invoke(figwheel_server.clj:1)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.repl$eval9100$loading__6434__auto__\n>>>>>>>>> __9101.invoke(repl.clj:1)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.system$eval9094$loading__6434__auto__\n>>>>>>>>> __9095.invoke(system.clj:1)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:930)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.repl_api$eval19$loading__6434__auto____\n>>>>>>>>> 20.invoke(repl_api.clj:1)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n>>>>>>>>>\n>>>>>>>>> at figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>>\n>>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>>\n>>>>>>>>> at user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n>>>>>>>>>\n>>>>>>>>> at user$eval13.invokeStatic(user.clj:1)\n>>>>>>>>>\n>>>>>>>>> at user$eval13.invoke(user.clj:1)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:366)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.doInit(RT.java:482)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.<clinit>(RT.java:336)\n>>>>>>>>>\n>>>>>>>>> ... 1 more\n>>>>>>>>>\n>>>>>>>>> Caused by: java.lang.ClassNotFoundException: javax.xml.bind.\n>>>>>>>>> DatatypeConverter\n>>>>>>>>>\n>>>>>>>>> at java.base\/java.net.URLClassLoader.findClass(\n>>>>>>>>> URLClassLoader.java:466)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.DynamicClassLoader.findClass(\n>>>>>>>>> DynamicClassLoader.java:69)\n>>>>>>>>>\n>>>>>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.DynamicClassLoader.loadClass(\n>>>>>>>>> DynamicClassLoader.java:77)\n>>>>>>>>>\n>>>>>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>>>>>>>>>\n>>>>>>>>> at java.base\/java.lang.Class.forName0(Native Method)\n>>>>>>>>>\n>>>>>>>>> at java.base\/java.lang.Class.forName(Class.java:375)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.classForName(RT.java:2204)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n>>>>>>>>>\n>>>>>>>>> at org.httpkit.server$eval18583$loading__6434__auto____18584.in\n>>>>>>>>> voke(server.clj:1)\n>>>>>>>>>\n>>>>>>>>> at org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n>>>>>>>>>\n>>>>>>>>> at org.httpkit.server$eval18583.invoke(server.clj:1)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>>\n>>>>>>>>> ... 146 more\n>>>>>>>>>\n>>>>>>>>> Johannes\n>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de>\n>>>>>>>>>> wrote:\n>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>>\n>>>>>>>>>>>> That looks good.  Can you verify it matches what is in\n>>>>>>>>>>>> `project.clj`?\n>>>>>>>>>>>>\n>>>>>>>>>>> Yes, I think it does. That's the downloaded project.clj:\n>>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>>                 ]\n>>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>>\n>>>>>>>>>>>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>>>>>>>>>>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>>>>>>>>>>                          \"junitReporter\" {\"outputDir\"\n>>>>>>>>>>> \"target\/test-results\"}}}\n>>>>>>>>>>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>>>>>>>>>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\"\n>>>>>>>>>>> }}\n>>>>>>>>>>>   :source-paths [\"src\"]\n>>>>>>>>>>>   :cljsbuild {:builds\n>>>>>>>>>>>               [{:id           \"dev\"\n>>>>>>>>>>>                 :source-paths [\"src\"]\n>>>>>>>>>>>                 ;; The presence of a :figwheel configuration\n>>>>>>>>>>> here will cause figwheel to inject the\n>>>>>>>>>>>                 ;; figwheel client into your build\n>>>>>>>>>>>                 :figwheel     {:on-jsload\n>>>>>>>>>>> \"flintstones.core\/on-js-reload\"\n>>>>>>>>>>>                                ;; :open-urls will pop open your\n>>>>>>>>>>> application in the default browser once\n>>>>>>>>>>>                                ;; Figwheel has started and\n>>>>>>>>>>> compiled your application.  Comment this out\n>>>>>>>>>>>                                ;; once it no longer serves you.\n>>>>>>>>>>>                                :open-urls [\"\n>>>>>>>>>>> http:\/\/localhost:3449\/index.html\"]}\n>>>>>>>>>>>                 :compiler     {:main\n>>>>>>>>>>> flintstones.core\n>>>>>>>>>>>                                :optimizations        :none\n>>>>>>>>>>>                                :libs\n>>>>>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>>>>>\n>>>>>>>>>>>                                :foreign-libs         [{:file\n>>>>>>>>>>> \"dino.js\"\n>>>>>>>>>>>                                                        :provides\n>>>>>>>>>>> [\"dinoPhony\"]}]\n>>>>>>>>>>>                                :externs\n>>>>>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>>>>>\n>>>>>>>>>>>                                :output-to\n>>>>>>>>>>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>>>>                                :output-dir\n>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>>>>>>>>>>                                :asset-path\n>>>>>>>>>>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of\n>>>>>>>>>>> `resources\/public`\n>>>>>>>>>>>                                                         ; ^^^\n>>>>>>>>>>> must match :output-dir\n>>>>>>>>>>>                                :source-map-timestamp true\n>>>>>>>>>>>                                ;; To console.log CLJS\n>>>>>>>>>>> data-structures make sure you enable devtools in Chrome\n>>>>>>>>>>>                                ;; https:\/\/github.com\/binaryage\/\n>>>>>>>>>>> cljs-devtools\n>>>>>>>>>>>                                :preloads\n>>>>>>>>>>> [devtools.preload]}}\n>>>>>>>>>>>\n>>>>>>>>>>>                {:id           \"test\"\n>>>>>>>>>>>                 :source-paths [\"src\" \"test\"]\n>>>>>>>>>>>                 :compiler     {:main\n>>>>>>>>>>> tst.flintstones.doorunner\n>>>>>>>>>>>                                :optimizations        :none ;\n>>>>>>>>>>> :advanced\n>>>>>>>>>>>                                :libs\n>>>>>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>>>>>\n>>>>>>>>>>>                                :foreign-libs         [{:file\n>>>>>>>>>>> \"dino.js\"\n>>>>>>>>>>>                                                        :provides\n>>>>>>>>>>> [\"dinoPhony\"]}]\n>>>>>>>>>>>                                :externs\n>>>>>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>>>>>\n>>>>>>>>>>>                                :output-to\n>>>>>>>>>>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>>>>>>>>>>                                :output-dir\n>>>>>>>>>>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>>>>>>>>>>                                ;:asset-path\n>>>>>>>>>>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of \n>>>>>>>>>>> `resources\/public`\n>>>>>>>>>>>\n>>>>>>>>>>>                                :source-map-timestamp true}}]}\n>>>>>>>>>>>\n>>>>>>>>>>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>>>>>>>>>>                                    [figwheel-sidecar \"0.5.15\"]\n>>>>>>>>>>>                                    [com.cemerick\/piggieback\n>>>>>>>>>>> \"0.2.2\"]]\n>>>>>>>>>>>                    ;; need to add dev source path here to get\n>>>>>>>>>>> user.clj loaded\n>>>>>>>>>>>                    :source-paths  [\"src\" \"dev\"]\n>>>>>>>>>>>                    ;; for CIDER\n>>>>>>>>>>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>>>>>>>>>>                    :repl-options  {:nrepl-middleware\n>>>>>>>>>>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>>>>>>>>>>                    ;; need to add the compliled assets to the\n>>>>>>>>>>> :clean-targets\n>>>>>>>>>>>                    :clean-targets ^{:protect false}\n>>>>>>>>>>> [\"resources\/public\/js\/compiled\"\n>>>>>>>>>>>                                                      \"out\"\n>>>>>>>>>>>\n>>>>>>>>>>>  :target-path]}}\n>>>>>>>>>>>\n>>>>>>>>>>>   :jvm-opts [\"-Xmx1g\"])\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>>> Also, try `lein --version` or type `lein repl` to verify the\n>>>>>>>>>>>> same stuff is found.\n>>>>>>>>>>>>\n>>>>>>>>>>> JohMBAir:piggi johannes$ lein -version\n>>>>>>>>>>>\n>>>>>>>>>>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>>>>>>>>>>\n>>>>>>>>>>> JohMBAir:piggi johannes$ lein repl\n>>>>>>>>>>>\n>>>>>>>>>>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>>>>>>>>>>> 127.0.0.1:57650\n>>>>>>>>>>>\n>>>>>>>>>>> REPL-y 0.3.7, nREPL 0.2.13\n>>>>>>>>>>>\n>>>>>>>>>>> Clojure 1.9.0\n>>>>>>>>>>>\n>>>>>>>>>>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>>>>>>>>>>\n>>>>>>>>>>>     Docs: (doc function-name-here)\n>>>>>>>>>>>\n>>>>>>>>>>>           (find-doc \"part-of-name-here\")\n>>>>>>>>>>>\n>>>>>>>>>>>   Source: (source function-name-here)\n>>>>>>>>>>>\n>>>>>>>>>>>  Javadoc: (javadoc java-object-or-class-here)\n>>>>>>>>>>>\n>>>>>>>>>>>     Exit: Control+D or (exit) or (quit)\n>>>>>>>>>>>\n>>>>>>>>>>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> user=>\n>>>>>>>>>>>\n>>>>>>>>>>> Johannes\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <\n>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>\n>>>>>>>>>>>>> I am not sure if this is what you want to see:\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile\n>>>>>>>>>>>>> hello-world.core --repl\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> cljs.user=> ^D\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> JohMBAir:hello-world johannes$ clj\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Clojure 1.9.0\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> user=> ^D\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> JohMBAir:hello-world johannes$ java --version\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> java 9.0.1\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <\n>>>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> lein figwheel\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> I get the known error:\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from\n>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom\n>>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom\n>>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from\n>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom\n>>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-\n>>>>>>>>>>>>>>> alpha4\/core.match-0.3.0-alpha4.pom from central\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving org\/clojure\/tools.analyzer.\n>>>>>>>>>>>>>>> jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom from central\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>> org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom\n>>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>> org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom\n>>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom\n>>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from\n>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/core\/\n>>>>>>>>>>>>>>> jackson-core\/2.9.0\/jackson-core-2.9.0.jar from central\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/\n>>>>>>>>>>>>>>> dataformat\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/\n>>>>>>>>>>>>>>> dataformat\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar\n>>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-\n>>>>>>>>>>>>>>> alpha4\/core.match-0.3.0-alpha4.jar from central\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from\n>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar\n>>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from\n>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar\n>>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from\n>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar\n>>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from\n>>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException:\n>>>>>>>>>>>>>>> javax.xml.bind.DatatypeConverter,\n>>>>>>>>>>>>>>> compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> ...\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan\n>>>>>>>>>>>>>>> Thompson:\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> I am not including `--add-modules` in my template project\n>>>>>>>>>>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it\n>>>>>>>>>>>>>>>> works great:\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>>>>>>>                 ]\n>>>>>>>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> ---------------------------\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> ~\/expr\/cljs-template > lein figwheel\n>>>>>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>>>>>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>>>>>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>>>>>>>>>>> Figwheel: Watching build - dev\n>>>>>>>>>>>>>>>> Compiling build :dev to \n>>>>>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>>>>>>>>> from [\"src\"]...\n>>>>>>>>>>>>>>>> Successfully compiled build :dev to\n>>>>>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908\n>>>>>>>>>>>>>>>> seconds.\n>>>>>>>>>>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>>>>>>>>>>> ...\n>>>>>>>>>>>>>>>>     Exit: :cljs\/quit\n>>>>>>>>>>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last\n>>>>>>>>>>>>>>>> exception object\n>>>>>>>>>>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>>>>>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>>>>>>> dev:cljs.user!{:conn 2}=>\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <\n>>>>>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> I've learned from several discussions (\n>>>>>>>>>>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that\n>>>>>>>>>>>>>>>>> the problem was ClojureScript 1.9 and that one should use the \n>>>>>>>>>>>>>>>>> tag :jvm-opts\n>>>>>>>>>>>>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript \n>>>>>>>>>>>>>>>>> version is out.\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill\n>>>>>>>>>>>>>>>>> Wolf:\n>>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>>> Is this it? --> https:\/\/github.com\/http-\n>>>>>>>>>>>>>>>>>> kit\/http-kit\/issues\/356\n>>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> --\n>>>>>>>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>>>>>> ---\n>>>>>>>>>>>>>>>>> You received this message because you are subscribed to\n>>>>>>>>>>>>>>>>> the Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails\n>>>>>>>>>>>>>>>>> from it, send an email to clojurescrip...@googlegroups.com\n>>>>>>>>>>>>>>>>> .\n>>>>>>>>>>>>>>>>> To post to this group, send email to\n>>>>>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/\n>>>>>>>>>>>>>>>>> group\/clojurescript.\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> --\n>>>>>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>>>> ---\n>>>>>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails\n>>>>>>>>>>>>>>> from it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>>>> To post to this group, send email to\n>>>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/\n>>>>>>>>>>>>>>> group\/clojurescript.\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> --\n>>>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>> ---\n>>>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from\n>>>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>> To post to this group, send email to\n>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/\n>>>>>>>>>>>>> group\/clojurescript.\n>>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>> --\n>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>> ---\n>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from\n>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/\n>>>>>>>>>>> group\/clojurescript.\n>>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> --\n>>>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>>>> with your first post.\n>>>>>>>>> ---\n>>>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>\n>>>>>>>>\n>>>>>>>> --\n>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>> with your first post.\n>>>>>>> ---\n>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>\n>>>>>>\n>>>>>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Mon, 07 May 2018 12:30:50 -0700"},
{"body":"Working from https:\/\/github.com\/cloojure\/cljs-figwheel-stripped I could\nreproduce the issue Alan was seeing with Java 9. Looking at the dependency\ntree, I could see that http-kit 2.2.0 was being pulled in by\nfigwheel-sidecar. http-kit 2.3.0 doesn't depend on the java.xml.bind module\nany more, so using that should fix the issue. \nTo do so, you can either:\n\n* Add http-kit 2.3.0 to your dependencies to override the version that\nFigwheel 0.5.15 pulls in\n* Upgrade to Figwheel 0.5.16, which was released in the last few hours.\nThis version uses http-kit 2.3.0.\n\nBoth of these options should work for starting up a Figwheel repl using\nClojureScript 1.10 and Java 9, without adding any modules. I was able to do\nso on my machine after removing Alan's (clever) :jvm-opts evaling.\n\n--\nDaniel.\n\nOn Sat, May 5, 2018 at 12:16 AM Johannes <bra...@nordakademie.de> wrote:\n\n> I've learned from Daniel Compton (in this discussion)\n>\n> Yep this is a ClojureScript issue. I wrote more about this here\n>> https:\/\/www.deps.co\/blog\/how-to-upgrade-clojure-projects-to-use-java-9\/.\n>> Until ClojureScript 1.10, you need to add:\n>> :jvm-opts [\"--add-modules\" \"java.xml.bind\"]\n>> to your Leiningen config.\n>\n>\n> that this kind of workaround will become unnecessary with ClojureScript\n> 1.10. That does not seem to be the case.\n>\n> Johannes\n>\n> Am Freitag, 4. Mai 2018 08:48:10 UTC+2 schrieb Alan Thompson:\n>\n>> Cleaned it up a little:\n>>\n>>   :jvm-opts #=(eval (into [\"-Xmx1g\"]\n>>                       (let [version-str (System\/getProperty\n>> \"java.version\")]\n>>                         (if (or (= \"10\" version-str) (re-find #\"^9\\.\"\n>> version-str))\n>>                           [\"--add-modules\" \"java.xml.bind\"] ; needed for\n>> java 9 or 10\n>>                           [])))) ; java 8 or below\n>>\n>>\n>>\n>>\n>> On Thu, May 3, 2018 at 11:37 PM, Alan Thompson <cloo...@gmail.com> wrote:\n>>\n> I created a little lein dynamic eval code to automatically handle the\n>>> :jvm-opts stuff for Java 8\/9\/10:\n>>>\n>>>  :jvm-opts #=(eval (let [version-str (System\/getProperty \"java.version\")]\n>>>                      (cond\n>>>                        (re-find #\"^9\\.\" version-str)  [\"-Xmx1g\"\n>>> \"--add-modules\" \"java.xml.bind\"]\n>>>                        (= \"10\" version-str)           [\"-Xmx1g\"\n>>> \"--add-modules\" \"java.xml.bind\"]\n>>>                        :else                          [\"-Xmx1g\"])))\n>>>\n>>>\n>>>\n>>>\n>>> On Thu, May 3, 2018 at 8:45 PM, Alan Thompson <cloo...@gmail.com> wrote:\n>>>\n>> I just tried it with Java 10.  I get the same error as for Java 9, and it\n>>>> has the same fix:\n>>>>\n>>>>   :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"])\n>>>>\n>>>>\n>>>> This is with\n>>>>\n>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>                  [org.clojure\/clojurescript \"1.10.238\"] ]\n>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>>>>             [lein-figwheel \"0.5.15\"] ]\n>>>>\n>>>>\n>>>> So one of those dependencies is still not cool with java 9\/10.\n>>>>\n>>>> Clojure itself works fine on Java 10 (just tested).\n>>>>\n>>>> The stacktrace mentiones both http-kit and\n>>>> figwheel-sidecar\/figwheel-server.... not sure who the culprit is (or\n>>>> clojurescript 1.10.238 ?)\n>>>> Alan\n>>>>\n>>>>\n>>>> On Thu, May 3, 2018 at 8:22 PM, Alan Thompson <cloo...@gmail.com>\n>>>> wrote:\n>>>>\n>>> Hmmm, OK, I just noticed I am on JVM 1.8.   If I switch to java 9, I get\n>>>>> the same error as you.\n>>>>>\n>>>>\n>>>>> On Thu, May 3, 2018 at 4:36 PM, Johannes <bra...@nordakademie.de>\n>>>>> wrote:\n>>>>>\n>>>>>> I'm sorry, but I get the same stack trace as before. And again: if I\n>>>>>> modify the :jvm-opts\n>>>>>>\n>>>>>> :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"]\n>>>>>>\n>>>>>> all works fine.\n>>>>>>\n>>>>>> Johannes\n>>>>>>\n>>>>>> Am Freitag, 4. Mai 2018 00:08:48 UTC+2 schrieb Alan Thompson:\n>>>>>>>\n>>>>>>> OK, I made a super-stripped down version to remove possible config\n>>>>>>> problems.  Try this:\n>>>>>>>\n>>>>>>> https:\/\/github.com\/cloojure\/cljs-figwheel-stripped.git\n>>>>>>>\n>>>>>>>\n>>>>>>>\n>>>>>>> Alan\n>>>>>>>\n>>>>>>> On Thu, May 3, 2018 at 1:56 PM, Johannes <bra...@nordakademie.de>\n>>>>>>> wrote:\n>>>>>>>\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>\n>>>>>>>>> And what happens if you type `lein figwheel` ?\n>>>>>>>>>\n>>>>>>>> The same problem as before:\n>>>>>>>>\n>>>>>>>> JohMBAir:cljs-template-master johannes$ lein figwheel\n>>>>>>>>\n>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>\n>>>>>>>> Exception in thread \"main\" java.lang.ExceptionInInitializerError\n>>>>>>>>\n>>>>>>>> at clojure.main.<clinit>(main.java:20)\n>>>>>>>>\n>>>>>>>> Caused by: java.lang.ClassNotFoundException:\n>>>>>>>> javax.xml.bind.DatatypeConverter, \n>>>>>>>> compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>\n>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>\n>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>\n>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>\n>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>\n>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>\n>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>\n>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>>\n>>>>>>>> at figwheel_sidecar.components.fi\n>>>>>>>> gwheel_server$eval18306$loading__6434__auto____18307.invoke(figwheel_server.clj:1)\n>>>>>>>>\n>>>>>>>> at figwheel_sidecar.components.fi\n>>>>>>>> gwheel_server$eval18306.invokeStatic(figwheel_server.clj:1)\n>>>>>>>>\n>>>>>>>> at figwheel_sidecar.components.fi\n>>>>>>>> gwheel_server$eval18306.invoke(figwheel_server.clj:1)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>\n>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>\n>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>\n>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>\n>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>\n>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>\n>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>\n>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>>\n>>>>>>>> at\n>>>>>>>> figwheel_sidecar.repl$eval9100$loading__6434__auto____9101.invoke(repl.clj:1)\n>>>>>>>>\n>>>>>>>> at figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n>>>>>>>>\n>>>>>>>> at figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>\n>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>\n>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>\n>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>\n>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>\n>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>\n>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>\n>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>>\n>>>>>>>> at\n>>>>>>>> figwheel_sidecar.system$eval9094$loading__6434__auto____9095.invoke(system.clj:1)\n>>>>>>>>\n>>>>>>>> at figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n>>>>>>>>\n>>>>>>>> at figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>\n>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>\n>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>\n>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>\n>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>\n>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>\n>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>\n>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:930)\n>>>>>>>>\n>>>>>>>> at\n>>>>>>>> figwheel_sidecar.repl_api$eval19$loading__6434__auto____20.invoke(repl_api.clj:1)\n>>>>>>>>\n>>>>>>>> at figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n>>>>>>>>\n>>>>>>>> at figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>>\n>>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>>\n>>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>>\n>>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>>\n>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>>\n>>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>>\n>>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>>\n>>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>>\n>>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>>\n>>>>>>>> at user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n>>>>>>>>\n>>>>>>>> at user$eval13.invokeStatic(user.clj:1)\n>>>>>>>>\n>>>>>>>> at user$eval13.invoke(user.clj:1)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:366)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.doInit(RT.java:482)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.<clinit>(RT.java:336)\n>>>>>>>>\n>>>>>>>> ... 1 more\n>>>>>>>>\n>>>>>>>> Caused by: java.lang.ClassNotFoundException:\n>>>>>>>> javax.xml.bind.DatatypeConverter\n>>>>>>>>\n>>>>>>>> at java.base\/java.net\n>>>>>>>> .URLClassLoader.findClass(URLClassLoader.java:466)\n>>>>>>>>\n>>>>>>>> at\n>>>>>>>> clojure.lang.DynamicClassLoader.findClass(DynamicClassLoader.java:69)\n>>>>>>>>\n>>>>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n>>>>>>>>\n>>>>>>>> at\n>>>>>>>> clojure.lang.DynamicClassLoader.loadClass(DynamicClassLoader.java:77)\n>>>>>>>>\n>>>>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>>>>>>>>\n>>>>>>>> at java.base\/java.lang.Class.forName0(Native Method)\n>>>>>>>>\n>>>>>>>> at java.base\/java.lang.Class.forName(Class.java:375)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.classForName(RT.java:2204)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n>>>>>>>>\n>>>>>>>> at org.httpkit.server$eval18583$loading__6434__auto____18584.in\n>>>>>>>> voke(server.clj:1)\n>>>>>>>>\n>>>>>>>> at org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n>>>>>>>>\n>>>>>>>> at org.httpkit.server$eval18583.invoke(server.clj:1)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>>\n>>>>>>>> ... 146 more\n>>>>>>>>\n>>>>>>>> Johannes\n>>>>>>>>\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de>\n>>>>>>>>> wrote:\n>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>\n>>>>>>>>>>> That looks good.  Can you verify it matches what is in\n>>>>>>>>>>> `project.clj`?\n>>>>>>>>>>>\n>>>>>>>>>> Yes, I think it does. That's the downloaded project.clj:\n>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>                 ]\n>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>\n>>>>>>>>>>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>>>>>>>>>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>>>>>>>>>                          \"junitReporter\" {\"outputDir\"\n>>>>>>>>>> \"target\/test-results\"}}}\n>>>>>>>>>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>>>>>>>>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n>>>>>>>>>>   :source-paths [\"src\"]\n>>>>>>>>>>   :cljsbuild {:builds\n>>>>>>>>>>               [{:id           \"dev\"\n>>>>>>>>>>                 :source-paths [\"src\"]\n>>>>>>>>>>                 ;; The presence of a :figwheel configuration here\n>>>>>>>>>> will cause figwheel to inject the\n>>>>>>>>>>                 ;; figwheel client into your build\n>>>>>>>>>>                 :figwheel     {:on-jsload\n>>>>>>>>>> \"flintstones.core\/on-js-reload\"\n>>>>>>>>>>                                ;; :open-urls will pop open your\n>>>>>>>>>> application in the default browser once\n>>>>>>>>>>                                ;; Figwheel has started and\n>>>>>>>>>> compiled your application.  Comment this out\n>>>>>>>>>>                                ;; once it no longer serves you.\n>>>>>>>>>>                                :open-urls [\"\n>>>>>>>>>> http:\/\/localhost:3449\/index.html\"]}\n>>>>>>>>>>                 :compiler     {:main\n>>>>>>>>>> flintstones.core\n>>>>>>>>>>                                :optimizations        :none\n>>>>>>>>>>                                :libs\n>>>>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>>>>\n>>>>>>>>>>                                :foreign-libs         [{:file\n>>>>>>>>>> \"dino.js\"\n>>>>>>>>>>                                                        :provides\n>>>>>>>>>> [\"dinoPhony\"]}]\n>>>>>>>>>>                                :externs\n>>>>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>>>>\n>>>>>>>>>>                                :output-to\n>>>>>>>>>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>>>                                :output-dir\n>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>>>>>>>>>                                :asset-path\n>>>>>>>>>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of\n>>>>>>>>>> `resources\/public`\n>>>>>>>>>>                                                         ; ^^^\n>>>>>>>>>> must match :output-dir\n>>>>>>>>>>                                :source-map-timestamp true\n>>>>>>>>>>                                ;; To console.log CLJS\n>>>>>>>>>> data-structures make sure you enable devtools in Chrome\n>>>>>>>>>>                                ;;\n>>>>>>>>>> https:\/\/github.com\/binaryage\/cljs-devtools\n>>>>>>>>>>                                :preloads\n>>>>>>>>>> [devtools.preload]}}\n>>>>>>>>>>\n>>>>>>>>>>                {:id           \"test\"\n>>>>>>>>>>                 :source-paths [\"src\" \"test\"]\n>>>>>>>>>>                 :compiler     {:main\n>>>>>>>>>> tst.flintstones.doorunner\n>>>>>>>>>>                                :optimizations        :none ;\n>>>>>>>>>> :advanced\n>>>>>>>>>>                                :libs\n>>>>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>>>>\n>>>>>>>>>>                                :foreign-libs         [{:file\n>>>>>>>>>> \"dino.js\"\n>>>>>>>>>>                                                        :provides\n>>>>>>>>>> [\"dinoPhony\"]}]\n>>>>>>>>>>                                :externs\n>>>>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>>>>\n>>>>>>>>>>                                :output-to\n>>>>>>>>>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>>>>>>>>>                                :output-dir\n>>>>>>>>>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>>>>>>>>>                                ;:asset-path\n>>>>>>>>>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of \n>>>>>>>>>> `resources\/public`\n>>>>>>>>>>\n>>>>>>>>>>                                :source-map-timestamp true}}]}\n>>>>>>>>>>\n>>>>>>>>>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>>>>>>>>>                                    [figwheel-sidecar \"0.5.15\"]\n>>>>>>>>>>                                    [com.cemerick\/piggieback\n>>>>>>>>>> \"0.2.2\"]]\n>>>>>>>>>>                    ;; need to add dev source path here to get\n>>>>>>>>>> user.clj loaded\n>>>>>>>>>>                    :source-paths  [\"src\" \"dev\"]\n>>>>>>>>>>                    ;; for CIDER\n>>>>>>>>>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>>>>>>>>>                    :repl-options  {:nrepl-middleware\n>>>>>>>>>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>>>>>>>>>                    ;; need to add the compliled assets to the\n>>>>>>>>>> :clean-targets\n>>>>>>>>>>                    :clean-targets ^{:protect false}\n>>>>>>>>>> [\"resources\/public\/js\/compiled\"\n>>>>>>>>>>                                                      \"out\"\n>>>>>>>>>>\n>>>>>>>>>>  :target-path]}}\n>>>>>>>>>>\n>>>>>>>>>>   :jvm-opts [\"-Xmx1g\"])\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>>> Also, try `lein --version` or type `lein repl` to verify the\n>>>>>>>>>>> same stuff is found.\n>>>>>>>>>>>\n>>>>>>>>>> JohMBAir:piggi johannes$ lein -version\n>>>>>>>>>>\n>>>>>>>>>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>>>>>>>>>\n>>>>>>>>>> JohMBAir:piggi johannes$ lein repl\n>>>>>>>>>>\n>>>>>>>>>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>>>>>>>>>> 127.0.0.1:57650\n>>>>>>>>>>\n>>>>>>>>>> REPL-y 0.3.7, nREPL 0.2.13\n>>>>>>>>>>\n>>>>>>>>>> Clojure 1.9.0\n>>>>>>>>>>\n>>>>>>>>>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>>>>>>>>>\n>>>>>>>>>>     Docs: (doc function-name-here)\n>>>>>>>>>>\n>>>>>>>>>>           (find-doc \"part-of-name-here\")\n>>>>>>>>>>\n>>>>>>>>>>   Source: (source function-name-here)\n>>>>>>>>>>\n>>>>>>>>>>  Javadoc: (javadoc java-object-or-class-here)\n>>>>>>>>>>\n>>>>>>>>>>     Exit: Control+D or (exit) or (quit)\n>>>>>>>>>>\n>>>>>>>>>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> user=>\n>>>>>>>>>>\n>>>>>>>>>> Johannes\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de\n>>>>>>>>>>> > wrote:\n>>>>>>>>>>>\n>>>>>>>>>>>> I am not sure if this is what you want to see:\n>>>>>>>>>>>>\n>>>>>>>>>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile\n>>>>>>>>>>>> hello-world.core --repl\n>>>>>>>>>>>>\n>>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>>>\n>>>>>>>>>>>> cljs.user=> ^D\n>>>>>>>>>>>>\n>>>>>>>>>>>> JohMBAir:hello-world johannes$ clj\n>>>>>>>>>>>>\n>>>>>>>>>>>> Clojure 1.9.0\n>>>>>>>>>>>>\n>>>>>>>>>>>> user=> ^D\n>>>>>>>>>>>>\n>>>>>>>>>>>> JohMBAir:hello-world johannes$ java --version\n>>>>>>>>>>>>\n>>>>>>>>>>>> java 9.0.1\n>>>>>>>>>>>>\n>>>>>>>>>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>>>>>>>>>\n>>>>>>>>>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>>>>>>>>>\n>>>>>>>>>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <\n>>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> lein figwheel\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> I get the known error:\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from\n>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from\n>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom \n>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom \n>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> org\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom\n>>>>>>>>>>>>>>  from\n>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom from \n>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom from \n>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom\n>>>>>>>>>>>>>>  from\n>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from\n>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar\n>>>>>>>>>>>>>>  from\n>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar\n>>>>>>>>>>>>>>  from\n>>>>>>>>>>>>>> central\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar \n>>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from\n>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from\n>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from\n>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving\n>>>>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar \n>>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from\n>>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException:\n>>>>>>>>>>>>>> javax.xml.bind.DatatypeConverter, \n>>>>>>>>>>>>>> compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> ...\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan\n>>>>>>>>>>>>>> Thompson:\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> I am not including `--add-modules` in my template project\n>>>>>>>>>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it\n>>>>>>>>>>>>>>> works great:\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>>>>>>                 ]\n>>>>>>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> ---------------------------\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> ~\/expr\/cljs-template > lein figwheel\n>>>>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>>>>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>>>>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>>>>>>>>>> Figwheel: Watching build - dev\n>>>>>>>>>>>>>>> Compiling build :dev to\n>>>>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" from [\"src\"]...\n>>>>>>>>>>>>>>> Successfully compiled build :dev to\n>>>>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 seconds.\n>>>>>>>>>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>>>>>>>>>> ...\n>>>>>>>>>>>>>>>     Exit: :cljs\/quit\n>>>>>>>>>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception\n>>>>>>>>>>>>>>> object\n>>>>>>>>>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>>>>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>>>>>> dev:cljs.user!{:conn 2}=>\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <\n>>>>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> I've learned from several discussions (\n>>>>>>>>>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that\n>>>>>>>>>>>>>>>> the problem was ClojureScript 1.9 and that one should use the \n>>>>>>>>>>>>>>>> tag :jvm-opts\n>>>>>>>>>>>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript \n>>>>>>>>>>>>>>>> version is out.\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill\n>>>>>>>>>>>>>>>> Wolf:\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>>> Is this it? -->\n>>>>>>>>>>>>>>>>> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> --\n>>>>>>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>>>>> ---\n>>>>>>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails\n>>>>>>>>>>>>>>>> from it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>>>>> To post to this group, send email to\n>>>>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>>>>> Visit this group at\n>>>>>>>>>>>>>>>> https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> --\n>>>>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>>> ---\n>>>>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from\n>>>>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>>> To post to this group, send email to\n>>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>>> Visit this group at\n>>>>>>>>>>>>>> https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> --\n>>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>> ---\n>>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from\n>>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com\n>>>>>>>>>>>> .\n>>>>>>>>>>>> Visit this group at\n>>>>>>>>>>>> https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> --\n>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>> patient with your first post.\n>>>>>>>>>> ---\n>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript\n>>>>>>>>>> .\n>>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> --\n>>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>>> with your first post.\n>>>>>>>> ---\n>>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>\n>>>>>>>\n>>>>>>> --\n>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>> with your first post.\n>>>>>> ---\n>>>>>> You received this message because you are subscribed to the Google\n>>>>>> Groups \"ClojureScript\" group.\n>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>\n>>>>>\n>>>>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Daniel Compton Sun, 06 May 2018 16:56:13 -0700"},
{"body":"I've learned from Daniel Compton (in this discussion)\n\nYep this is a ClojureScript issue. I wrote more about this here \n> https:\/\/www.deps.co\/blog\/how-to-upgrade-clojure-projects-to-use-java-9\/. \n> Until ClojureScript 1.10, you need to add:\n> :jvm-opts [\"--add-modules\" \"java.xml.bind\"]\n> to your Leiningen config. \n\nthat this kind of workaround will become unnecessary with ClojureScript \n1.10. That does not seem to be the case.\n\nJohannes\n\nAm Freitag, 4. Mai 2018 08:48:10 UTC+2 schrieb Alan Thompson:\n>\n> Cleaned it up a little:\n>\n>   :jvm-opts #=(eval (into [\"-Xmx1g\"]\n>                       (let [version-str (System\/getProperty \n> \"java.version\")]\n>                         (if (or (= \"10\" version-str) (re-find #\"^9\\.\" \n> version-str))\n>                           [\"--add-modules\" \"java.xml.bind\"] ; needed for \n> java 9 or 10\n>                           [])))) ; java 8 or below\n>\n>\n>\n>\n>\n> On Thu, May 3, 2018 at 11:37 PM, Alan Thompson <cloo...@gmail.com \n> <javascript:>> wrote:\n>\n>> I created a little lein dynamic eval code to automatically handle the \n>> :jvm-opts stuff for Java 8\/9\/10:\n>>\n>>  :jvm-opts #=(eval (let [version-str (System\/getProperty \"java.version\")]\n>>                      (cond\n>>                        (re-find #\"^9\\.\" version-str)  [\"-Xmx1g\" \n>> \"--add-modules\" \"java.xml.bind\"]\n>>                        (= \"10\" version-str)           [\"-Xmx1g\" \n>> \"--add-modules\" \"java.xml.bind\"]\n>>                        :else                          [\"-Xmx1g\"])))\n>>\n>>\n>>\n>>\n>>\n>> On Thu, May 3, 2018 at 8:45 PM, Alan Thompson <cloo...@gmail.com \n>> <javascript:>> wrote:\n>>\n>>> I just tried it with Java 10.  I get the same error as for Java 9, and \n>>> it has the same fix:\n>>>\n>>>   :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"])\n>>>\n>>>\n>>> This is with \n>>>\n>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>                  [org.clojure\/clojurescript \"1.10.238\"] ]\n>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>>>             [lein-figwheel \"0.5.15\"] ]\n>>>\n>>>\n>>> So one of those dependencies is still not cool with java 9\/10.\n>>>\n>>> Clojure itself works fine on Java 10 (just tested).\n>>>\n>>> The stacktrace mentiones both http-kit and \n>>> figwheel-sidecar\/figwheel-server.... not sure who the culprit is (or \n>>> clojurescript 1.10.238 ?)\n>>> Alan\n>>>\n>>>\n>>>\n>>> On Thu, May 3, 2018 at 8:22 PM, Alan Thompson <cloo...@gmail.com \n>>> <javascript:>> wrote:\n>>>\n>>>> Hmmm, OK, I just noticed I am on JVM 1.8.   If I switch to java 9, I \n>>>> get the same error as you.\n>>>>\n>>>> On Thu, May 3, 2018 at 4:36 PM, Johannes <bra...@nordakademie.de \n>>>> <javascript:>> wrote:\n>>>>\n>>>>> I'm sorry, but I get the same stack trace as before. And again: if I \n>>>>> modify the :jvm-opts\n>>>>>\n>>>>> :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"]\n>>>>>\n>>>>> all works fine.\n>>>>>\n>>>>> Johannes\n>>>>>\n>>>>> Am Freitag, 4. Mai 2018 00:08:48 UTC+2 schrieb Alan Thompson:\n>>>>>>\n>>>>>> OK, I made a super-stripped down version to remove possible config \n>>>>>> problems.  Try this:\n>>>>>>\n>>>>>> https:\/\/github.com\/cloojure\/cljs-figwheel-stripped.git\n>>>>>>\n>>>>>>\n>>>>>>\n>>>>>> Alan\n>>>>>>\n>>>>>> On Thu, May 3, 2018 at 1:56 PM, Johannes <bra...@nordakademie.de> \n>>>>>> wrote:\n>>>>>>\n>>>>>>>\n>>>>>>>\n>>>>>>> Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>>>>>>>>\n>>>>>>>> And what happens if you type `lein figwheel` ?\n>>>>>>>>\n>>>>>>> The same problem as before:\n>>>>>>>\n>>>>>>> JohMBAir:cljs-template-master johannes$ lein figwheel\n>>>>>>>\n>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>\n>>>>>>> Exception in thread \"main\" java.lang.ExceptionInInitializerError\n>>>>>>>\n>>>>>>> at clojure.main.<clinit>(main.java:20)\n>>>>>>>\n>>>>>>> Caused by: java.lang.ClassNotFoundException: \n>>>>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>\n>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>\n>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>\n>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>\n>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>\n>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>\n>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>\n>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>\n>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>\n>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>\n>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>\n>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>\n>>>>>>> at figwheel_sidecar.components.fi\n>>>>>>> gwheel_server$eval18306$loading__6434__auto____18307.invoke(figwheel_server.clj:1)\n>>>>>>>\n>>>>>>> at figwheel_sidecar.components.fi\n>>>>>>> gwheel_server$eval18306.invokeStatic(figwheel_server.clj:1)\n>>>>>>>\n>>>>>>> at figwheel_sidecar.components.fi\n>>>>>>> gwheel_server$eval18306.invoke(figwheel_server.clj:1)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>\n>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>\n>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>\n>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>\n>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>\n>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>\n>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>\n>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>\n>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>\n>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>\n>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>\n>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>\n>>>>>>> at \n>>>>>>> figwheel_sidecar.repl$eval9100$loading__6434__auto____9101.invoke(repl.clj:1)\n>>>>>>>\n>>>>>>> at figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n>>>>>>>\n>>>>>>> at figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>\n>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>\n>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>\n>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>\n>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>\n>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>\n>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>\n>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>\n>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>\n>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>\n>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>\n>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>>\n>>>>>>> at \n>>>>>>> figwheel_sidecar.system$eval9094$loading__6434__auto____9095.invoke(system.clj:1)\n>>>>>>>\n>>>>>>> at figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n>>>>>>>\n>>>>>>> at figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>\n>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>\n>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>\n>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>\n>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>\n>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>\n>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>\n>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>\n>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>\n>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>\n>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>\n>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:930)\n>>>>>>>\n>>>>>>> at \n>>>>>>> figwheel_sidecar.repl_api$eval19$loading__6434__auto____20.invoke(repl_api.clj:1)\n>>>>>>>\n>>>>>>> at figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n>>>>>>>\n>>>>>>> at figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>>\n>>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>>\n>>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>>\n>>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>\n>>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>>\n>>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>>\n>>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>>\n>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>\n>>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>>\n>>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>>\n>>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>>\n>>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>>\n>>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>>\n>>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>>\n>>>>>>> at user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n>>>>>>>\n>>>>>>> at user$eval13.invokeStatic(user.clj:1)\n>>>>>>>\n>>>>>>> at user$eval13.invoke(user.clj:1)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:366)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.doInit(RT.java:482)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.<clinit>(RT.java:336)\n>>>>>>>\n>>>>>>> ... 1 more\n>>>>>>>\n>>>>>>> Caused by: java.lang.ClassNotFoundException: \n>>>>>>> javax.xml.bind.DatatypeConverter\n>>>>>>>\n>>>>>>> at java.base\/java.net\n>>>>>>> .URLClassLoader.findClass(URLClassLoader.java:466)\n>>>>>>>\n>>>>>>> at \n>>>>>>> clojure.lang.DynamicClassLoader.findClass(DynamicClassLoader.java:69)\n>>>>>>>\n>>>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n>>>>>>>\n>>>>>>> at \n>>>>>>> clojure.lang.DynamicClassLoader.loadClass(DynamicClassLoader.java:77)\n>>>>>>>\n>>>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>>>>>>>\n>>>>>>> at java.base\/java.lang.Class.forName0(Native Method)\n>>>>>>>\n>>>>>>> at java.base\/java.lang.Class.forName(Class.java:375)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.classForName(RT.java:2204)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n>>>>>>>\n>>>>>>> at org.httpkit.server$eval18583$loading__6434__auto____18584.in\n>>>>>>> voke(server.clj:1)\n>>>>>>>\n>>>>>>> at org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n>>>>>>>\n>>>>>>> at org.httpkit.server$eval18583.invoke(server.clj:1)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>>\n>>>>>>> ... 146 more\n>>>>>>>\n>>>>>>> Johannes \n>>>>>>>\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de> \n>>>>>>>> wrote:\n>>>>>>>>\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>\n>>>>>>>>>> That looks good.  Can you verify it matches what is in \n>>>>>>>>>> `project.clj`?  \n>>>>>>>>>>\n>>>>>>>>> Yes, I think it does. That's the downloaded project.clj:\n>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>                 ]\n>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions \n>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>\n>>>>>>>>>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>>>>>>>>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>>>>>>>>                          \"junitReporter\" {\"outputDir\" \n>>>>>>>>> \"target\/test-results\"}}}\n>>>>>>>>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>>>>>>>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n>>>>>>>>>   :source-paths [\"src\"]\n>>>>>>>>>   :cljsbuild {:builds\n>>>>>>>>>               [{:id           \"dev\"\n>>>>>>>>>                 :source-paths [\"src\"]\n>>>>>>>>>                 ;; The presence of a :figwheel configuration here \n>>>>>>>>> will cause figwheel to inject the\n>>>>>>>>>                 ;; figwheel client into your build\n>>>>>>>>>                 :figwheel     {:on-jsload \n>>>>>>>>> \"flintstones.core\/on-js-reload\"\n>>>>>>>>>                                ;; :open-urls will pop open your \n>>>>>>>>> application in the default browser once\n>>>>>>>>>                                ;; Figwheel has started and \n>>>>>>>>> compiled your application.  Comment this out\n>>>>>>>>>                                ;; once it no longer serves you.\n>>>>>>>>>                                :open-urls [\"\n>>>>>>>>> http:\/\/localhost:3449\/index.html\"]}\n>>>>>>>>>                 :compiler     {:main                 \n>>>>>>>>> flintstones.core\n>>>>>>>>>                                :optimizations        :none\n>>>>>>>>>                                :libs                 \n>>>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>>>\n>>>>>>>>>                                :foreign-libs         [{:file     \n>>>>>>>>> \"dino.js\"\n>>>>>>>>>                                                        :provides \n>>>>>>>>> [\"dinoPhony\"]}]\n>>>>>>>>>                                :externs             \n>>>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>>>\n>>>>>>>>>                                :output-to           \n>>>>>>>>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>>                                :output-dir           \n>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>>>>>>>>                                :asset-path           \n>>>>>>>>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of \n>>>>>>>>> `resources\/public`\n>>>>>>>>>                                                         ; ^^^ must \n>>>>>>>>> match :output-dir\n>>>>>>>>>                                :source-map-timestamp true\n>>>>>>>>>                                ;; To console.log CLJS \n>>>>>>>>> data-structures make sure you enable devtools in Chrome\n>>>>>>>>>                                ;; \n>>>>>>>>> https:\/\/github.com\/binaryage\/cljs-devtools\n>>>>>>>>>                                :preloads             \n>>>>>>>>> [devtools.preload]}}\n>>>>>>>>>\n>>>>>>>>>                {:id           \"test\"\n>>>>>>>>>                 :source-paths [\"src\" \"test\"]\n>>>>>>>>>                 :compiler     {:main                 \n>>>>>>>>> tst.flintstones.doorunner\n>>>>>>>>>                                :optimizations        :none ; \n>>>>>>>>> :advanced\n>>>>>>>>>                                :libs                 \n>>>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>>>\n>>>>>>>>>                                :foreign-libs         [{:file     \n>>>>>>>>> \"dino.js\"\n>>>>>>>>>                                                        :provides \n>>>>>>>>> [\"dinoPhony\"]}]\n>>>>>>>>>                                :externs             \n>>>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>>>\n>>>>>>>>>                                :output-to           \n>>>>>>>>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>>>>>>>>                                :output-dir           \n>>>>>>>>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>>>>>>>>                                ;:asset-path           \n>>>>>>>>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of \n>>>>>>>>> `resources\/public`\n>>>>>>>>>\n>>>>>>>>>                                :source-map-timestamp true}}]}\n>>>>>>>>>\n>>>>>>>>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>>>>>>>>                                    [figwheel-sidecar \"0.5.15\"]\n>>>>>>>>>                                    [com.cemerick\/piggieback \n>>>>>>>>> \"0.2.2\"]]\n>>>>>>>>>                    ;; need to add dev source path here to get \n>>>>>>>>> user.clj loaded\n>>>>>>>>>                    :source-paths  [\"src\" \"dev\"]\n>>>>>>>>>                    ;; for CIDER\n>>>>>>>>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>>>>>>>>                    :repl-options  {:nrepl-middleware \n>>>>>>>>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>>>>>>>>                    ;; need to add the compliled assets to the \n>>>>>>>>> :clean-targets\n>>>>>>>>>                    :clean-targets ^{:protect false} \n>>>>>>>>> [\"resources\/public\/js\/compiled\"\n>>>>>>>>>                                                      \"out\"\n>>>>>>>>>                                                     \n>>>>>>>>>  :target-path]}}\n>>>>>>>>>\n>>>>>>>>>   :jvm-opts [\"-Xmx1g\"])\n>>>>>>>>>\n>>>>>>>>>  \n>>>>>>>>>\n>>>>>>>>>> Also, try `lein --version` or type `lein repl` to verify the same \n>>>>>>>>>> stuff is found.\n>>>>>>>>>>\n>>>>>>>>> JohMBAir:piggi johannes$ lein -version\n>>>>>>>>>\n>>>>>>>>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>>>>>>>>\n>>>>>>>>> JohMBAir:piggi johannes$ lein repl\n>>>>>>>>>\n>>>>>>>>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>>>>>>>>> 127.0.0.1:57650\n>>>>>>>>>\n>>>>>>>>> REPL-y 0.3.7, nREPL 0.2.13\n>>>>>>>>>\n>>>>>>>>> Clojure 1.9.0\n>>>>>>>>>\n>>>>>>>>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>>>>>>>>\n>>>>>>>>>     Docs: (doc function-name-here)\n>>>>>>>>>\n>>>>>>>>>           (find-doc \"part-of-name-here\")\n>>>>>>>>>\n>>>>>>>>>   Source: (source function-name-here)\n>>>>>>>>>\n>>>>>>>>>  Javadoc: (javadoc java-object-or-class-here)\n>>>>>>>>>\n>>>>>>>>>     Exit: Control+D or (exit) or (quit)\n>>>>>>>>>\n>>>>>>>>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> user=> \n>>>>>>>>>  \n>>>>>>>>> Johannes\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de> \n>>>>>>>>>> wrote:\n>>>>>>>>>>\n>>>>>>>>>>> I am not sure if this is what you want to see:\n>>>>>>>>>>>\n>>>>>>>>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile \n>>>>>>>>>>> hello-world.core --repl\n>>>>>>>>>>>\n>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>>\n>>>>>>>>>>> cljs.user=> ^D\n>>>>>>>>>>>\n>>>>>>>>>>> JohMBAir:hello-world johannes$ clj\n>>>>>>>>>>>\n>>>>>>>>>>> Clojure 1.9.0\n>>>>>>>>>>>\n>>>>>>>>>>> user=> ^D\n>>>>>>>>>>>\n>>>>>>>>>>> JohMBAir:hello-world johannes$ java --version\n>>>>>>>>>>>\n>>>>>>>>>>> java 9.0.1\n>>>>>>>>>>>\n>>>>>>>>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>>>>>>>>\n>>>>>>>>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>>>>>>>>\n>>>>>>>>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>>\n>>>>>>>>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>>>>>>>>\n>>>>>>>>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <\n>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>\n>>>>>>>>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> lein figwheel\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> I get the known error:\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom \n>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from \n>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from \n>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom from \n>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom \n>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> org\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom \n>>>>>>>>>>>>> from \n>>>>>>>>>>>>> central\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom from \n>>>>>>>>>>>>> central\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom from \n>>>>>>>>>>>>> central\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom \n>>>>>>>>>>>>> from \n>>>>>>>>>>>>> central\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar\n>>>>>>>>>>>>>  from \n>>>>>>>>>>>>> central\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>>>>>>>>  \n>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>>>>>>>>  \n>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar \n>>>>>>>>>>>>> from \n>>>>>>>>>>>>> central\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar \n>>>>>>>>>>>>> from central\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from \n>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar \n>>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from \n>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from \n>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar from \n>>>>>>>>>>>>> clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException: \n>>>>>>>>>>>>> javax.xml.bind.DatatypeConverter, \n>>>>>>>>>>>>> compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> ...\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>> I am not including `--add-modules` in my template project \n>>>>>>>>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works \n>>>>>>>>>>>>>> great:\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>>>>>                 ]\n>>>>>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions \n>>>>>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> ---------------------------\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> ~\/expr\/cljs-template > lein figwheel            \n>>>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>>>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>>>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>>>>>>>>> Figwheel: Watching build - dev\n>>>>>>>>>>>>>> Compiling build :dev to \n>>>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" from [\"src\"]...\n>>>>>>>>>>>>>> Successfully compiled build :dev to \n>>>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 seconds.\n>>>>>>>>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>>>>>>>>> ...\n>>>>>>>>>>>>>>     Exit: :cljs\/quit\n>>>>>>>>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception \n>>>>>>>>>>>>>> object\n>>>>>>>>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>>>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>>>>> dev:cljs.user!{:conn 2}=> \n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <\n>>>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> I've learned from several discussions (\n>>>>>>>>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that \n>>>>>>>>>>>>>>> the problem was ClojureScript 1.9 and that one should use the \n>>>>>>>>>>>>>>> tag :jvm-opts \n>>>>>>>>>>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript \n>>>>>>>>>>>>>>> version is out.\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill \n>>>>>>>>>>>>>>> Wolf:\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>>> Is this it? --> \n>>>>>>>>>>>>>>>> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> -- \n>>>>>>>>>>>>>>> Note that posts from new members are moderated - please be \n>>>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>>>> --- \n>>>>>>>>>>>>>>> You received this message because you are subscribed to the \n>>>>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails \n>>>>>>>>>>>>>>> from it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>>>> To post to this group, send email to \n>>>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>>>> Visit this group at \n>>>>>>>>>>>>>>> https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> -- \n>>>>>>>>>>>>> Note that posts from new members are moderated - please be \n>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>> --- \n>>>>>>>>>>>>> You received this message because you are subscribed to the \n>>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from \n>>>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>> To post to this group, send email to \n>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>> Visit this group at \n>>>>>>>>>>>>> https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>> -- \n>>>>>>>>>>> Note that posts from new members are moderated - please be \n>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>> --- \n>>>>>>>>>>> You received this message because you are subscribed to the \n>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from \n>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>>>> Visit this group at \n>>>>>>>>>>> https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> -- \n>>>>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>>>>> with your first post.\n>>>>>>>>> --- \n>>>>>>>>> You received this message because you are subscribed to the Google \n>>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>\n>>>>>>>>\n>>>>>>>> -- \n>>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>>> with your first post.\n>>>>>>> --- \n>>>>>>> You received this message because you are subscribed to the Google \n>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>\n>>>>>>\n>>>>>> -- \n>>>>> Note that posts from new members are moderated - please be patient \n>>>>> with your first post.\n>>>>> --- \n>>>>> You received this message because you are subscribed to the Google \n>>>>> Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this group and stop receiving emails from it, send \n>>>>> an email to clojurescrip...@googlegroups.com <javascript:>.\n>>>>> To post to this group, send email to clojur...@googlegroups.com \n>>>>> <javascript:>.\n>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>\n>>>>\n>>>>\n>>>\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Johannes Fri, 04 May 2018 05:16:37 -0700"},
{"body":"Cleaned it up a little:\n\n  :jvm-opts #=(eval (into [\"-Xmx1g\"]\n                      (let [version-str (System\/getProperty \"java.version\")]\n                        (if (or (= \"10\" version-str) (re-find #\"^9\\.\"\nversion-str))\n                          [\"--add-modules\" \"java.xml.bind\"] ; needed for\njava 9 or 10\n                          [])))) ; java 8 or below \n\n\n\n\nOn Thu, May 3, 2018 at 11:37 PM, Alan Thompson <clooj...@gmail.com> wrote:\n\n> I created a little lein dynamic eval code to automatically handle the\n> :jvm-opts stuff for Java 8\/9\/10:\n>\n>  :jvm-opts #=(eval (let [version-str (System\/getProperty \"java.version\")]\n>                      (cond\n>                        (re-find #\"^9\\.\" version-str)  [\"-Xmx1g\"\n> \"--add-modules\" \"java.xml.bind\"]\n>                        (= \"10\" version-str)           [\"-Xmx1g\"\n> \"--add-modules\" \"java.xml.bind\"]\n>                        :else                          [\"-Xmx1g\"])))\n>\n>\n>\n>\n>\n> On Thu, May 3, 2018 at 8:45 PM, Alan Thompson <clooj...@gmail.com> wrote:\n>\n>> I just tried it with Java 10.  I get the same error as for Java 9, and it\n>> has the same fix:\n>>\n>>   :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"])\n>>\n>>\n>> This is with\n>>\n>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>                  [org.clojure\/clojurescript \"1.10.238\"] ]\n>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>>             [lein-figwheel \"0.5.15\"] ]\n>>\n>>\n>> So one of those dependencies is still not cool with java 9\/10.\n>>\n>> Clojure itself works fine on Java 10 (just tested).\n>>\n>> The stacktrace mentiones both http-kit and \n>> figwheel-sidecar\/figwheel-server....\n>> not sure who the culprit is (or clojurescript 1.10.238 ?)\n>> Alan\n>>\n>>\n>>\n>> On Thu, May 3, 2018 at 8:22 PM, Alan Thompson <clooj...@gmail.com> wrote:\n>>\n>>> Hmmm, OK, I just noticed I am on JVM 1.8.   If I switch to java 9, I get\n>>> the same error as you.\n>>>\n>>> On Thu, May 3, 2018 at 4:36 PM, Johannes <bra...@nordakademie.de> wrote:\n>>>\n>>>> I'm sorry, but I get the same stack trace as before. And again: if I\n>>>> modify the :jvm-opts\n>>>>\n>>>> :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"]\n>>>>\n>>>> all works fine.\n>>>>\n>>>> Johannes\n>>>>\n>>>> Am Freitag, 4. Mai 2018 00:08:48 UTC+2 schrieb Alan Thompson:\n>>>>>\n>>>>> OK, I made a super-stripped down version to remove possible config\n>>>>> problems.  Try this:\n>>>>>\n>>>>> https:\/\/github.com\/cloojure\/cljs-figwheel-stripped.git\n>>>>>\n>>>>>\n>>>>>\n>>>>> Alan\n>>>>>\n>>>>> On Thu, May 3, 2018 at 1:56 PM, Johannes <bra...@nordakademie.de>\n>>>>> wrote:\n>>>>>\n>>>>>>\n>>>>>>\n>>>>>> Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>>>>>>>\n>>>>>>> And what happens if you type `lein figwheel` ?\n>>>>>>>\n>>>>>> The same problem as before:\n>>>>>>\n>>>>>> JohMBAir:cljs-template-master johannes$ lein figwheel\n>>>>>>\n>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>\n>>>>>> Exception in thread \"main\" java.lang.ExceptionInInitializerError\n>>>>>>\n>>>>>> at clojure.main.<clinit>(main.java:20)\n>>>>>>\n>>>>>> Caused by: java.lang.ClassNotFoundException:\n>>>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.\n>>>>>> clj:1:1)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>\n>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>\n>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>\n>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>\n>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>\n>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>\n>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>\n>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>\n>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>\n>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>\n>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>\n>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>\n>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>\n>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>\n>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>\n>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>\n>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>\n>>>>>> at figwheel_sidecar.components.figwheel_server$eval18306$loadin\n>>>>>> g__6434__auto____18307.invoke(figwheel_server.clj:1)\n>>>>>>\n>>>>>> at figwheel_sidecar.components.figwheel_server$eval18306.invoke\n>>>>>> Static(figwheel_server.clj:1)\n>>>>>>\n>>>>>> at figwheel_sidecar.components.figwheel_server$eval18306.invoke\n>>>>>> (figwheel_server.clj:1)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>\n>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>\n>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>\n>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>\n>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>\n>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>\n>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>\n>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>\n>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>\n>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>\n>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>\n>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>\n>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>\n>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>\n>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>\n>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>\n>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>\n>>>>>> at figwheel_sidecar.repl$eval9100$loading__6434__auto____9101.i\n>>>>>> nvoke(repl.clj:1)\n>>>>>>\n>>>>>> at figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n>>>>>>\n>>>>>> at figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>\n>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>\n>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>\n>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>\n>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>\n>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>\n>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>\n>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>\n>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>\n>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>\n>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>\n>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>\n>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>\n>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>\n>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>\n>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>\n>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>>\n>>>>>> at figwheel_sidecar.system$eval9094$loading__6434__auto____9095\n>>>>>> .invoke(system.clj:1)\n>>>>>>\n>>>>>> at figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n>>>>>>\n>>>>>> at figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>\n>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>\n>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>\n>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>\n>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>\n>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>\n>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>\n>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>\n>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>\n>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>\n>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>\n>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>\n>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>\n>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>\n>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>\n>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>\n>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:930)\n>>>>>>\n>>>>>> at figwheel_sidecar.repl_api$eval19$loading__6434__auto____20.i\n>>>>>> nvoke(repl_api.clj:1)\n>>>>>>\n>>>>>> at figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n>>>>>>\n>>>>>> at figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>>\n>>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>>\n>>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>>\n>>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>>\n>>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>>\n>>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>\n>>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>>\n>>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>>\n>>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>>\n>>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>>\n>>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>>\n>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>\n>>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>>\n>>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>>\n>>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>>\n>>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>>\n>>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>>\n>>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>>\n>>>>>> at user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n>>>>>>\n>>>>>> at user$eval13.invokeStatic(user.clj:1)\n>>>>>>\n>>>>>> at user$eval13.invoke(user.clj:1)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:366)\n>>>>>>\n>>>>>> at clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n>>>>>>\n>>>>>> at clojure.lang.RT.doInit(RT.java:482)\n>>>>>>\n>>>>>> at clojure.lang.RT.<clinit>(RT.java:336)\n>>>>>>\n>>>>>> ... 1 more\n>>>>>>\n>>>>>> Caused by: java.lang.ClassNotFoundException:\n>>>>>> javax.xml.bind.DatatypeConverter\n>>>>>>\n>>>>>> at java.base\/java.net.URLClassLoader.findClass(URLClassLoader.j\n>>>>>> ava:466)\n>>>>>>\n>>>>>> at clojure.lang.DynamicClassLoader.findClass(DynamicClassLoader\n>>>>>> .java:69)\n>>>>>>\n>>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n>>>>>>\n>>>>>> at clojure.lang.DynamicClassLoader.loadClass(DynamicClassLoader\n>>>>>> .java:77)\n>>>>>>\n>>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>>>>>>\n>>>>>> at java.base\/java.lang.Class.forName0(Native Method)\n>>>>>>\n>>>>>> at java.base\/java.lang.Class.forName(Class.java:375)\n>>>>>>\n>>>>>> at clojure.lang.RT.classForName(RT.java:2204)\n>>>>>>\n>>>>>> at clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n>>>>>>\n>>>>>> at org.httpkit.server$eval18583$loading__6434__auto____18584.in\n>>>>>> voke(server.clj:1)\n>>>>>>\n>>>>>> at org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n>>>>>>\n>>>>>> at org.httpkit.server$eval18583.invoke(server.clj:1)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>>\n>>>>>> ... 146 more\n>>>>>>\n>>>>>> Johannes\n>>>>>>\n>>>>>>>\n>>>>>>>\n>>>>>>> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de>\n>>>>>>> wrote:\n>>>>>>>\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>\n>>>>>>>>> That looks good.  Can you verify it matches what is in\n>>>>>>>>> `project.clj`?\n>>>>>>>>>\n>>>>>>>> Yes, I think it does. That's the downloaded project.clj:\n>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>                 ]\n>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>\n>>>>>>>>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>>>>>>>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>>>>>>>                          \"junitReporter\" {\"outputDir\"\n>>>>>>>> \"target\/test-results\"}}}\n>>>>>>>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>>>>>>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n>>>>>>>>   :source-paths [\"src\"]\n>>>>>>>>   :cljsbuild {:builds\n>>>>>>>>               [{:id           \"dev\"\n>>>>>>>>                 :source-paths [\"src\"]\n>>>>>>>>                 ;; The presence of a :figwheel configuration here\n>>>>>>>> will cause figwheel to inject the\n>>>>>>>>                 ;; figwheel client into your build\n>>>>>>>>                 :figwheel     {:on-jsload\n>>>>>>>> \"flintstones.core\/on-js-reload\"\n>>>>>>>>                                ;; :open-urls will pop open your\n>>>>>>>> application in the default browser once\n>>>>>>>>                                ;; Figwheel has started and compiled\n>>>>>>>> your application.  Comment this out\n>>>>>>>>                                ;; once it no longer serves you.\n>>>>>>>>                                :open-urls [\"\n>>>>>>>> http:\/\/localhost:3449\/index.html\"]}\n>>>>>>>>                 :compiler     {:main\n>>>>>>>> flintstones.core\n>>>>>>>>                                :optimizations        :none\n>>>>>>>>                                :libs\n>>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>>\n>>>>>>>>                                :foreign-libs         [{:file\n>>>>>>>> \"dino.js\"\n>>>>>>>>                                                        :provides\n>>>>>>>> [\"dinoPhony\"]}]\n>>>>>>>>                                :externs\n>>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>>\n>>>>>>>>                                :output-to\n>>>>>>>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>                                :output-dir\n>>>>>>>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>>>>>>>                                :asset-path\n>>>>>>>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of\n>>>>>>>> `resources\/public`\n>>>>>>>>                                                         ; ^^^ must\n>>>>>>>> match :output-dir\n>>>>>>>>                                :source-map-timestamp true\n>>>>>>>>                                ;; To console.log CLJS\n>>>>>>>> data-structures make sure you enable devtools in Chrome\n>>>>>>>>                                ;; https:\/\/github.com\/binaryage\/c\n>>>>>>>> ljs-devtools\n>>>>>>>>                                :preloads\n>>>>>>>> [devtools.preload]}}\n>>>>>>>>\n>>>>>>>>                {:id           \"test\"\n>>>>>>>>                 :source-paths [\"src\" \"test\"]\n>>>>>>>>                 :compiler     {:main\n>>>>>>>> tst.flintstones.doorunner\n>>>>>>>>                                :optimizations        :none ;\n>>>>>>>> :advanced\n>>>>>>>>                                :libs\n>>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>>\n>>>>>>>>                                :foreign-libs         [{:file\n>>>>>>>> \"dino.js\"\n>>>>>>>>                                                        :provides\n>>>>>>>> [\"dinoPhony\"]}]\n>>>>>>>>                                :externs\n>>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>>\n>>>>>>>>                                :output-to\n>>>>>>>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>>>>>>>                                :output-dir\n>>>>>>>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>>>>>>>                                ;:asset-path\n>>>>>>>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of \n>>>>>>>> `resources\/public`\n>>>>>>>>\n>>>>>>>>                                :source-map-timestamp true}}]}\n>>>>>>>>\n>>>>>>>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>>>>>>>                                    [figwheel-sidecar \"0.5.15\"]\n>>>>>>>>                                    [com.cemerick\/piggieback\n>>>>>>>> \"0.2.2\"]]\n>>>>>>>>                    ;; need to add dev source path here to get\n>>>>>>>> user.clj loaded\n>>>>>>>>                    :source-paths  [\"src\" \"dev\"]\n>>>>>>>>                    ;; for CIDER\n>>>>>>>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>>>>>>>                    :repl-options  {:nrepl-middleware\n>>>>>>>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>>>>>>>                    ;; need to add the compliled assets to the\n>>>>>>>> :clean-targets\n>>>>>>>>                    :clean-targets ^{:protect false}\n>>>>>>>> [\"resources\/public\/js\/compiled\"\n>>>>>>>>                                                      \"out\"\n>>>>>>>>                                                      :target-path]}}\n>>>>>>>>\n>>>>>>>>   :jvm-opts [\"-Xmx1g\"])\n>>>>>>>>\n>>>>>>>>\n>>>>>>>>\n>>>>>>>>> Also, try `lein --version` or type `lein repl` to verify the same\n>>>>>>>>> stuff is found.\n>>>>>>>>>\n>>>>>>>> JohMBAir:piggi johannes$ lein -version\n>>>>>>>>\n>>>>>>>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>>>>>>>\n>>>>>>>> JohMBAir:piggi johannes$ lein repl\n>>>>>>>>\n>>>>>>>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>>>>>>>> 127.0.0.1:57650\n>>>>>>>>\n>>>>>>>> REPL-y 0.3.7, nREPL 0.2.13\n>>>>>>>>\n>>>>>>>> Clojure 1.9.0\n>>>>>>>>\n>>>>>>>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>>>>>>>\n>>>>>>>>     Docs: (doc function-name-here)\n>>>>>>>>\n>>>>>>>>           (find-doc \"part-of-name-here\")\n>>>>>>>>\n>>>>>>>>   Source: (source function-name-here)\n>>>>>>>>\n>>>>>>>>  Javadoc: (javadoc java-object-or-class-here)\n>>>>>>>>\n>>>>>>>>     Exit: Control+D or (exit) or (quit)\n>>>>>>>>\n>>>>>>>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> user=>\n>>>>>>>>\n>>>>>>>> Johannes\n>>>>>>>>\n>>>>>>>>\n>>>>>>>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de>\n>>>>>>>>> wrote:\n>>>>>>>>>\n>>>>>>>>>> I am not sure if this is what you want to see:\n>>>>>>>>>>\n>>>>>>>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile\n>>>>>>>>>> hello-world.core --repl\n>>>>>>>>>>\n>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>\n>>>>>>>>>> cljs.user=> ^D\n>>>>>>>>>>\n>>>>>>>>>> JohMBAir:hello-world johannes$ clj\n>>>>>>>>>>\n>>>>>>>>>> Clojure 1.9.0\n>>>>>>>>>>\n>>>>>>>>>> user=> ^D\n>>>>>>>>>>\n>>>>>>>>>> JohMBAir:hello-world johannes$ java --version\n>>>>>>>>>>\n>>>>>>>>>> java 9.0.1\n>>>>>>>>>>\n>>>>>>>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>>>>>>>\n>>>>>>>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>>>>>>>\n>>>>>>>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>\n>>>>>>>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>>>>>>>\n>>>>>>>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <\n>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>\n>>>>>>>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>>>>>>>\n>>>>>>>>>>>> lein figwheel\n>>>>>>>>>>>>\n>>>>>>>>>>>> I get the known error:\n>>>>>>>>>>>>\n>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom\n>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from\n>>>>>>>>>>>> clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from\n>>>>>>>>>>>> clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom\n>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>>>>>>>>> lpha4\/core.match-0.3.0-alpha4.pom from central\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving org\/clojure\/tools.analyzer.jvm\n>>>>>>>>>>>> \/0.6.5\/tools.analyzer.jvm-0.6.5.pom from central\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>> org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom\n>>>>>>>>>>>> from central\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom\n>>>>>>>>>>>> from central\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>>>>>>>>> \/0.1.4\/math.combinatorics-0.1.4.pom from central\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/core\/jac\n>>>>>>>>>>>> kson-core\/2.9.0\/jackson-core-2.9.0.jar from central\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>>>>>>>>> at\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>>>>>>> from central\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>>>>>>>>> at\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>>>>>>> from central\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>>>>>>>>> \/0.1.4\/math.combinatorics-0.1.4.jar from central\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>>>>>>>>> lpha4\/core.match-0.3.0-alpha4.jar from central\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from\n>>>>>>>>>>>> clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar\n>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from\n>>>>>>>>>>>> clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from\n>>>>>>>>>>>> clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving \n>>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar\n>>>>>>>>>>>> from clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>>>>>>>>>>\n>>>>>>>>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException:\n>>>>>>>>>>>> javax.xml.bind.DatatypeConverter,\n>>>>>>>>>>>> compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>>>>>>>\n>>>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>>>>>\n>>>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>>>\n>>>>>>>>>>>> ...\n>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>>\n>>>>>>>>>>>>> I am not including `--add-modules` in my template project\n>>>>>>>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works\n>>>>>>>>>>>>> great:\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>>>>                 ]\n>>>>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> ---------------------------\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> ~\/expr\/cljs-template > lein figwheel\n>>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>>>>>>>> Figwheel: Watching build - dev\n>>>>>>>>>>>>> Compiling build :dev to \n>>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>>>>>> from [\"src\"]...\n>>>>>>>>>>>>> Successfully compiled build :dev to\n>>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908\n>>>>>>>>>>>>> seconds.\n>>>>>>>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>>>>>>>> ...\n>>>>>>>>>>>>>     Exit: :cljs\/quit\n>>>>>>>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception\n>>>>>>>>>>>>> object\n>>>>>>>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>>>> dev:cljs.user!{:conn 2}=>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <\n>>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>> I've learned from several discussions (\n>>>>>>>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that\n>>>>>>>>>>>>>> the problem was ClojureScript 1.9 and that one should use the \n>>>>>>>>>>>>>> tag :jvm-opts\n>>>>>>>>>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript \n>>>>>>>>>>>>>> version is out.\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill\n>>>>>>>>>>>>>> Wolf:\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>> Is this it? --> https:\/\/github.com\/http-ki\n>>>>>>>>>>>>>>> t\/http-kit\/issues\/356\n>>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> --\n>>>>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>>> ---\n>>>>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from\n>>>>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>>> To post to this group, send email to\n>>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/grou\n>>>>>>>>>>>>>> p\/clojurescript.\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> --\n>>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>> ---\n>>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from\n>>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com\n>>>>>>>>>>>> .\n>>>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/grou\n>>>>>>>>>>>> p\/clojurescript.\n>>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> --\n>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>> patient with your first post.\n>>>>>>>>>> ---\n>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript\n>>>>>>>>>> .\n>>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> --\n>>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>>> with your first post.\n>>>>>>>> ---\n>>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>\n>>>>>>>\n>>>>>>> --\n>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>> with your first post.\n>>>>>> ---\n>>>>>> You received this message because you are subscribed to the Google\n>>>>>> Groups \"ClojureScript\" group.\n>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>\n>>>>>\n>>>>> --\n>>>> Note that posts from new members are moderated - please be patient with\n>>>> your first post.\n>>>> ---\n>>>> You received this message because you are subscribed to the Google\n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>>> To post to this group, send email to clojurescript@googlegroups.com.\n>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>\n>>>\n>>>\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Thu, 03 May 2018 23:48:25 -0700"},
{"body":"I created a little lein dynamic eval code to automatically handle the\n:jvm-opts stuff for Java 8\/9\/10: \n :jvm-opts #=(eval (let [version-str (System\/getProperty \"java.version\")]\n                     (cond\n                       (re-find #\"^9\\.\" version-str)  [\"-Xmx1g\"\n\"--add-modules\" \"java.xml.bind\"]\n                       (= \"10\" version-str)           [\"-Xmx1g\"\n\"--add-modules\" \"java.xml.bind\"]\n                       :else                          [\"-Xmx1g\"])))\n\n\n\n\n\nOn Thu, May 3, 2018 at 8:45 PM, Alan Thompson <clooj...@gmail.com> wrote:\n\n> I just tried it with Java 10.  I get the same error as for Java 9, and it\n> has the same fix:\n>\n>   :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"])\n>\n>\n> This is with\n>\n>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>                  [org.clojure\/clojurescript \"1.10.238\"] ]\n>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>             [lein-figwheel \"0.5.15\"] ]\n>\n>\n> So one of those dependencies is still not cool with java 9\/10.\n>\n> Clojure itself works fine on Java 10 (just tested).\n>\n> The stacktrace mentiones both http-kit and \n> figwheel-sidecar\/figwheel-server....\n> not sure who the culprit is (or clojurescript 1.10.238 ?)\n> Alan\n>\n>\n>\n> On Thu, May 3, 2018 at 8:22 PM, Alan Thompson <clooj...@gmail.com> wrote:\n>\n>> Hmmm, OK, I just noticed I am on JVM 1.8.   If I switch to java 9, I get\n>> the same error as you.\n>>\n>> On Thu, May 3, 2018 at 4:36 PM, Johannes <bra...@nordakademie.de> wrote:\n>>\n>>> I'm sorry, but I get the same stack trace as before. And again: if I\n>>> modify the :jvm-opts\n>>>\n>>> :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"]\n>>>\n>>> all works fine.\n>>>\n>>> Johannes\n>>>\n>>> Am Freitag, 4. Mai 2018 00:08:48 UTC+2 schrieb Alan Thompson:\n>>>>\n>>>> OK, I made a super-stripped down version to remove possible config\n>>>> problems.  Try this:\n>>>>\n>>>> https:\/\/github.com\/cloojure\/cljs-figwheel-stripped.git\n>>>>\n>>>>\n>>>>\n>>>> Alan\n>>>>\n>>>> On Thu, May 3, 2018 at 1:56 PM, Johannes <bra...@nordakademie.de>\n>>>> wrote:\n>>>>\n>>>>>\n>>>>>\n>>>>> Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>>>>>>\n>>>>>> And what happens if you type `lein figwheel` ?\n>>>>>>\n>>>>> The same problem as before:\n>>>>>\n>>>>> JohMBAir:cljs-template-master johannes$ lein figwheel\n>>>>>\n>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>\n>>>>> Exception in thread \"main\" java.lang.ExceptionInInitializerError\n>>>>>\n>>>>> at clojure.main.<clinit>(main.java:20)\n>>>>>\n>>>>> Caused by: java.lang.ClassNotFoundException:\n>>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.\n>>>>> clj:1:1)\n>>>>>\n>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>\n>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>\n>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>\n>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>\n>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>\n>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>\n>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>\n>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>\n>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>\n>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>\n>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>\n>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>\n>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>\n>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>\n>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>\n>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>\n>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>\n>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>\n>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>\n>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>\n>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>\n>>>>> at figwheel_sidecar.components.figwheel_server$eval18306$loadin\n>>>>> g__6434__auto____18307.invoke(figwheel_server.clj:1)\n>>>>>\n>>>>> at figwheel_sidecar.components.figwheel_server$eval18306.invoke\n>>>>> Static(figwheel_server.clj:1)\n>>>>>\n>>>>> at figwheel_sidecar.components.figwheel_server$eval18306.invoke\n>>>>> (figwheel_server.clj:1)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>\n>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>\n>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>\n>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>\n>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>\n>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>\n>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>\n>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>\n>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>\n>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>\n>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>\n>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>\n>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>\n>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>\n>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>\n>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>\n>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>\n>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>\n>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>\n>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>\n>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>\n>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>\n>>>>> at figwheel_sidecar.repl$eval9100$loading__6434__auto____9101.i\n>>>>> nvoke(repl.clj:1)\n>>>>>\n>>>>> at figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n>>>>>\n>>>>> at figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>\n>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>\n>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>\n>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>\n>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>\n>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>\n>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>\n>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>\n>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>\n>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>\n>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>\n>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>\n>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>\n>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>\n>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>\n>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>\n>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>\n>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>\n>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>\n>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>\n>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>\n>>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>>\n>>>>> at figwheel_sidecar.system$eval9094$loading__6434__auto____9095\n>>>>> .invoke(system.clj:1)\n>>>>>\n>>>>> at figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n>>>>>\n>>>>> at figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>\n>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>\n>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>\n>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>\n>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>\n>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>\n>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>\n>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>\n>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>\n>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>\n>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>\n>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>\n>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>\n>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>\n>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>\n>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>\n>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>\n>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>\n>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>\n>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>\n>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>\n>>>>> at clojure.lang.RestFn.invoke(RestFn.java:930)\n>>>>>\n>>>>> at figwheel_sidecar.repl_api$eval19$loading__6434__auto____20.i\n>>>>> nvoke(repl_api.clj:1)\n>>>>>\n>>>>> at figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n>>>>>\n>>>>> at figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>\n>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>>\n>>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>>\n>>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>>\n>>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>>\n>>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>>\n>>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>>\n>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>\n>>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>>\n>>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>>\n>>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>>\n>>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>>\n>>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>>\n>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>>\n>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>\n>>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>>\n>>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>>\n>>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>>\n>>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>>\n>>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>>\n>>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>>\n>>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>>\n>>>>> at user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n>>>>>\n>>>>> at user$eval13.invokeStatic(user.clj:1)\n>>>>>\n>>>>> at user$eval13.invoke(user.clj:1)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>\n>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:366)\n>>>>>\n>>>>> at clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n>>>>>\n>>>>> at clojure.lang.RT.doInit(RT.java:482)\n>>>>>\n>>>>> at clojure.lang.RT.<clinit>(RT.java:336)\n>>>>>\n>>>>> ... 1 more\n>>>>>\n>>>>> Caused by: java.lang.ClassNotFoundException:\n>>>>> javax.xml.bind.DatatypeConverter\n>>>>>\n>>>>> at java.base\/java.net.URLClassLoader.findClass(URLClassLoader.j\n>>>>> ava:466)\n>>>>>\n>>>>> at clojure.lang.DynamicClassLoader.findClass(DynamicClassLoader\n>>>>> .java:69)\n>>>>>\n>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n>>>>>\n>>>>> at clojure.lang.DynamicClassLoader.loadClass(DynamicClassLoader\n>>>>> .java:77)\n>>>>>\n>>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>>>>>\n>>>>> at java.base\/java.lang.Class.forName0(Native Method)\n>>>>>\n>>>>> at java.base\/java.lang.Class.forName(Class.java:375)\n>>>>>\n>>>>> at clojure.lang.RT.classForName(RT.java:2204)\n>>>>>\n>>>>> at clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n>>>>>\n>>>>> at org.httpkit.server$eval18583$loading__6434__auto____18584.in\n>>>>> voke(server.clj:1)\n>>>>>\n>>>>> at org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n>>>>>\n>>>>> at org.httpkit.server$eval18583.invoke(server.clj:1)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>>\n>>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>>\n>>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>>\n>>>>> ... 146 more\n>>>>>\n>>>>> Johannes\n>>>>>\n>>>>>>\n>>>>>>\n>>>>>> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de>\n>>>>>> wrote:\n>>>>>>\n>>>>>>>\n>>>>>>>\n>>>>>>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>>>>>>\n>>>>>>>> That looks good.  Can you verify it matches what is in\n>>>>>>>> `project.clj`?\n>>>>>>>>\n>>>>>>> Yes, I think it does. That's the downloaded project.clj:\n>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>                 ]\n>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>\n>>>>>>>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>>>>>>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>>>>>>                          \"junitReporter\" {\"outputDir\"\n>>>>>>> \"target\/test-results\"}}}\n>>>>>>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>>>>>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n>>>>>>>   :source-paths [\"src\"]\n>>>>>>>   :cljsbuild {:builds\n>>>>>>>               [{:id           \"dev\"\n>>>>>>>                 :source-paths [\"src\"]\n>>>>>>>                 ;; The presence of a :figwheel configuration here\n>>>>>>> will cause figwheel to inject the\n>>>>>>>                 ;; figwheel client into your build\n>>>>>>>                 :figwheel     {:on-jsload\n>>>>>>> \"flintstones.core\/on-js-reload\"\n>>>>>>>                                ;; :open-urls will pop open your\n>>>>>>> application in the default browser once\n>>>>>>>                                ;; Figwheel has started and compiled\n>>>>>>> your application.  Comment this out\n>>>>>>>                                ;; once it no longer serves you.\n>>>>>>>                                :open-urls [\"\n>>>>>>> http:\/\/localhost:3449\/index.html\"]}\n>>>>>>>                 :compiler     {:main                 flintstones.core\n>>>>>>>                                :optimizations        :none\n>>>>>>>                                :libs\n>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>\n>>>>>>>                                :foreign-libs         [{:file\n>>>>>>> \"dino.js\"\n>>>>>>>                                                        :provides\n>>>>>>> [\"dinoPhony\"]}]\n>>>>>>>                                :externs\n>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>\n>>>>>>>                                :output-to\n>>>>>>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>                                :output-dir\n>>>>>>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>>>>>>                                :asset-path\n>>>>>>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of\n>>>>>>> `resources\/public`\n>>>>>>>                                                         ; ^^^ must\n>>>>>>> match :output-dir\n>>>>>>>                                :source-map-timestamp true\n>>>>>>>                                ;; To console.log CLJS\n>>>>>>> data-structures make sure you enable devtools in Chrome\n>>>>>>>                                ;; https:\/\/github.com\/binaryage\/c\n>>>>>>> ljs-devtools\n>>>>>>>                                :preloads\n>>>>>>> [devtools.preload]}}\n>>>>>>>\n>>>>>>>                {:id           \"test\"\n>>>>>>>                 :source-paths [\"src\" \"test\"]\n>>>>>>>                 :compiler     {:main\n>>>>>>> tst.flintstones.doorunner\n>>>>>>>                                :optimizations        :none ;\n>>>>>>> :advanced\n>>>>>>>                                :libs\n>>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>>\n>>>>>>>                                :foreign-libs         [{:file\n>>>>>>> \"dino.js\"\n>>>>>>>                                                        :provides\n>>>>>>> [\"dinoPhony\"]}]\n>>>>>>>                                :externs\n>>>>>>>  [\"dino-externs.js\"]\n>>>>>>>\n>>>>>>>                                :output-to\n>>>>>>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>>>>>>                                :output-dir\n>>>>>>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>>>>>>                                ;:asset-path\n>>>>>>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of \n>>>>>>> `resources\/public`\n>>>>>>>\n>>>>>>>                                :source-map-timestamp true}}]}\n>>>>>>>\n>>>>>>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>>>>>>                                    [figwheel-sidecar \"0.5.15\"]\n>>>>>>>                                    [com.cemerick\/piggieback \"0.2.2\"]]\n>>>>>>>                    ;; need to add dev source path here to get\n>>>>>>> user.clj loaded\n>>>>>>>                    :source-paths  [\"src\" \"dev\"]\n>>>>>>>                    ;; for CIDER\n>>>>>>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>>>>>>                    :repl-options  {:nrepl-middleware\n>>>>>>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>>>>>>                    ;; need to add the compliled assets to the\n>>>>>>> :clean-targets\n>>>>>>>                    :clean-targets ^{:protect false}\n>>>>>>> [\"resources\/public\/js\/compiled\"\n>>>>>>>                                                      \"out\"\n>>>>>>>                                                      :target-path]}}\n>>>>>>>\n>>>>>>>   :jvm-opts [\"-Xmx1g\"])\n>>>>>>>\n>>>>>>>\n>>>>>>>\n>>>>>>>> Also, try `lein --version` or type `lein repl` to verify the same\n>>>>>>>> stuff is found.\n>>>>>>>>\n>>>>>>> JohMBAir:piggi johannes$ lein -version\n>>>>>>>\n>>>>>>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>>>>>>\n>>>>>>> JohMBAir:piggi johannes$ lein repl\n>>>>>>>\n>>>>>>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>>>>>>> 127.0.0.1:57650\n>>>>>>>\n>>>>>>> REPL-y 0.3.7, nREPL 0.2.13\n>>>>>>>\n>>>>>>> Clojure 1.9.0\n>>>>>>>\n>>>>>>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>>>>>>\n>>>>>>>     Docs: (doc function-name-here)\n>>>>>>>\n>>>>>>>           (find-doc \"part-of-name-here\")\n>>>>>>>\n>>>>>>>   Source: (source function-name-here)\n>>>>>>>\n>>>>>>>  Javadoc: (javadoc java-object-or-class-here)\n>>>>>>>\n>>>>>>>     Exit: Control+D or (exit) or (quit)\n>>>>>>>\n>>>>>>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>>>>>>\n>>>>>>>\n>>>>>>> user=>\n>>>>>>>\n>>>>>>> Johannes\n>>>>>>>\n>>>>>>>\n>>>>>>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de>\n>>>>>>>> wrote:\n>>>>>>>>\n>>>>>>>>> I am not sure if this is what you want to see:\n>>>>>>>>>\n>>>>>>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile\n>>>>>>>>> hello-world.core --repl\n>>>>>>>>>\n>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>\n>>>>>>>>> cljs.user=> ^D\n>>>>>>>>>\n>>>>>>>>> JohMBAir:hello-world johannes$ clj\n>>>>>>>>>\n>>>>>>>>> Clojure 1.9.0\n>>>>>>>>>\n>>>>>>>>> user=> ^D\n>>>>>>>>>\n>>>>>>>>> JohMBAir:hello-world johannes$ java --version\n>>>>>>>>>\n>>>>>>>>> java 9.0.1\n>>>>>>>>>\n>>>>>>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>>>>>>\n>>>>>>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>>>>>>\n>>>>>>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>\n>>>>>>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>>>>>>\n>>>>>>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de\n>>>>>>>>>> > wrote:\n>>>>>>>>>>\n>>>>>>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>>>>>>\n>>>>>>>>>>> lein figwheel\n>>>>>>>>>>>\n>>>>>>>>>>> I get the known error:\n>>>>>>>>>>>\n>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom\n>>>>>>>>>>> from clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from\n>>>>>>>>>>> clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from\n>>>>>>>>>>> clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving \n>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom\n>>>>>>>>>>> from clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>>>>>>>> lpha4\/core.match-0.3.0-alpha4.pom from central\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving org\/clojure\/tools.analyzer.jvm\n>>>>>>>>>>> \/0.6.5\/tools.analyzer.jvm-0.6.5.pom from central\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom\n>>>>>>>>>>> from central\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom\n>>>>>>>>>>> from central\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>>>>>>>> \/0.1.4\/math.combinatorics-0.1.4.pom from central\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/core\/jac\n>>>>>>>>>>> kson-core\/2.9.0\/jackson-core-2.9.0.jar from central\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>>>>>>>> at\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>>>>>> from central\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>>>>>>>> at\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>>>>>> from central\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>>>>>>>> \/0.1.4\/math.combinatorics-0.1.4.jar from central\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>>>>>>>> lpha4\/core.match-0.3.0-alpha4.jar from central\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from\n>>>>>>>>>>> clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar\n>>>>>>>>>>> from clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from\n>>>>>>>>>>> clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from\n>>>>>>>>>>> clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving \n>>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar\n>>>>>>>>>>> from clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>>>>>>>>>\n>>>>>>>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException:\n>>>>>>>>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.\n>>>>>>>>>>> clj:1:1)\n>>>>>>>>>>>\n>>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>>>>\n>>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>>\n>>>>>>>>>>> ...\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>>\n>>>>>>>>>>>> I am not including `--add-modules` in my template project\n>>>>>>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works\n>>>>>>>>>>>> great:\n>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>>>                 ]\n>>>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>> ---------------------------\n>>>>>>>>>>>>\n>>>>>>>>>>>> ~\/expr\/cljs-template > lein figwheel\n>>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>>>>>>> Figwheel: Watching build - dev\n>>>>>>>>>>>> Compiling build :dev to \n>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>>>>> from [\"src\"]...\n>>>>>>>>>>>> Successfully compiled build :dev to\n>>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 seconds.\n>>>>>>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>>>>>>> ...\n>>>>>>>>>>>>     Exit: :cljs\/quit\n>>>>>>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception\n>>>>>>>>>>>> object\n>>>>>>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>>> dev:cljs.user!{:conn 2}=>\n>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <\n>>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>>\n>>>>>>>>>>>>> I've learned from several discussions (\n>>>>>>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that the\n>>>>>>>>>>>>> problem was ClojureScript 1.9 and that one should use the tag \n>>>>>>>>>>>>> :jvm-opts\n>>>>>>>>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript \n>>>>>>>>>>>>> version is out.\n>>>>>>>>>>>>>\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill\n>>>>>>>>>>>>> Wolf:\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>> Is this it? --> https:\/\/github.com\/http-ki\n>>>>>>>>>>>>>> t\/http-kit\/issues\/356\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>> --\n>>>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>>> ---\n>>>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from\n>>>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>>> To post to this group, send email to\n>>>>>>>>>>>>> clojur...@googlegroups.com.\n>>>>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/grou\n>>>>>>>>>>>>> p\/clojurescript.\n>>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>> --\n>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>> ---\n>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from\n>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/grou\n>>>>>>>>>>> p\/clojurescript.\n>>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> --\n>>>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>>>> with your first post.\n>>>>>>>>> ---\n>>>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>\n>>>>>>>>\n>>>>>>>> --\n>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>> with your first post.\n>>>>>>> ---\n>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>\n>>>>>>\n>>>>>> --\n>>>>> Note that posts from new members are moderated - please be patient\n>>>>> with your first post.\n>>>>> ---\n>>>>> You received this message because you are subscribed to the Google\n>>>>> Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>>> an email to clojurescrip...@googlegroups.com.\n>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>\n>>>>\n>>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>> To post to this group, send email to clojurescript@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Thu, 03 May 2018 23:38:06 -0700"},
{"body":"I just tried it with Java 10.  I get the same error as for Java 9, and it\nhas the same fix: \n  :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"])\n\n\nThis is with\n\n  :dependencies [[org.clojure\/clojure \"1.9.0\"]\n                 [org.clojure\/clojurescript \"1.10.238\"] ]\n  :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n            [lein-figwheel \"0.5.15\"] ]\n\n\nSo one of those dependencies is still not cool with java 9\/10.\n\nClojure itself works fine on Java 10 (just tested).\n\nThe stacktrace mentiones both http-kit and\nfigwheel-sidecar\/figwheel-server.... not sure who the culprit is (or\nclojurescript 1.10.238 ?)\nAlan\n\n\n\nOn Thu, May 3, 2018 at 8:22 PM, Alan Thompson <clooj...@gmail.com> wrote:\n\n> Hmmm, OK, I just noticed I am on JVM 1.8.   If I switch to java 9, I get\n> the same error as you.\n>\n> On Thu, May 3, 2018 at 4:36 PM, Johannes <bra...@nordakademie.de> wrote:\n>\n>> I'm sorry, but I get the same stack trace as before. And again: if I\n>> modify the :jvm-opts\n>>\n>> :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"]\n>>\n>> all works fine.\n>>\n>> Johannes\n>>\n>> Am Freitag, 4. Mai 2018 00:08:48 UTC+2 schrieb Alan Thompson:\n>>>\n>>> OK, I made a super-stripped down version to remove possible config\n>>> problems.  Try this:\n>>>\n>>> https:\/\/github.com\/cloojure\/cljs-figwheel-stripped.git\n>>>\n>>>\n>>>\n>>> Alan\n>>>\n>>> On Thu, May 3, 2018 at 1:56 PM, Johannes <bra...@nordakademie.de> wrote:\n>>>\n>>>>\n>>>>\n>>>> Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>>>>>\n>>>>> And what happens if you type `lein figwheel` ?\n>>>>>\n>>>> The same problem as before:\n>>>>\n>>>> JohMBAir:cljs-template-master johannes$ lein figwheel\n>>>>\n>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>\n>>>> Exception in thread \"main\" java.lang.ExceptionInInitializerError\n>>>>\n>>>> at clojure.main.<clinit>(main.java:20)\n>>>>\n>>>> Caused by: java.lang.ClassNotFoundException:\n>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.\n>>>> clj:1:1)\n>>>>\n>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>\n>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>\n>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>\n>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>\n>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>\n>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>\n>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>\n>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>\n>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>\n>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>\n>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>\n>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>\n>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>\n>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>\n>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>\n>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>\n>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>\n>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>\n>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>\n>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>\n>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>\n>>>> at figwheel_sidecar.components.figwheel_server$eval18306$loadin\n>>>> g__6434__auto____18307.invoke(figwheel_server.clj:1)\n>>>>\n>>>> at figwheel_sidecar.components.figwheel_server$eval18306.invoke\n>>>> Static(figwheel_server.clj:1)\n>>>>\n>>>> at figwheel_sidecar.components.figwheel_server$eval18306.invoke\n>>>> (figwheel_server.clj:1)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>\n>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>\n>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>\n>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>\n>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>\n>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>\n>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>\n>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>\n>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>\n>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>\n>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>\n>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>\n>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>\n>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>\n>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>\n>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>\n>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>\n>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>\n>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>\n>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>\n>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>\n>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>\n>>>> at figwheel_sidecar.repl$eval9100$loading__6434__auto____9101.i\n>>>> nvoke(repl.clj:1)\n>>>>\n>>>> at figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n>>>>\n>>>> at figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>\n>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>\n>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>\n>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>\n>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>\n>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>\n>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>\n>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>\n>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>\n>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>\n>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>\n>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>\n>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>\n>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>\n>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>\n>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>\n>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>\n>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>\n>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>\n>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>\n>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>\n>>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>>\n>>>> at figwheel_sidecar.system$eval9094$loading__6434__auto____9095\n>>>> .invoke(system.clj:1)\n>>>>\n>>>> at figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n>>>>\n>>>> at figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>\n>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>\n>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>\n>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>\n>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>\n>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>\n>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>\n>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>\n>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>\n>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>\n>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>\n>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>\n>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>\n>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>\n>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>\n>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>\n>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>\n>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>\n>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>\n>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>\n>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>\n>>>> at clojure.lang.RestFn.invoke(RestFn.java:930)\n>>>>\n>>>> at figwheel_sidecar.repl_api$eval19$loading__6434__auto____20.i\n>>>> nvoke(repl_api.clj:1)\n>>>>\n>>>> at figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n>>>>\n>>>> at figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>\n>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>>\n>>>> at clojure.lang.RT.load(RT.java:460)\n>>>>\n>>>> at clojure.lang.RT.load(RT.java:426)\n>>>>\n>>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>>\n>>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>>\n>>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>>\n>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>\n>>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>>\n>>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>>\n>>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>>\n>>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>>\n>>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>>\n>>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>>\n>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>\n>>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>>\n>>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>>\n>>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>>\n>>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>>\n>>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>>\n>>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>>\n>>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>>\n>>>> at user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n>>>>\n>>>> at user$eval13.invokeStatic(user.clj:1)\n>>>>\n>>>> at user$eval13.invoke(user.clj:1)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>\n>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:366)\n>>>>\n>>>> at clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n>>>>\n>>>> at clojure.lang.RT.doInit(RT.java:482)\n>>>>\n>>>> at clojure.lang.RT.<clinit>(RT.java:336)\n>>>>\n>>>> ... 1 more\n>>>>\n>>>> Caused by: java.lang.ClassNotFoundException:\n>>>> javax.xml.bind.DatatypeConverter\n>>>>\n>>>> at java.base\/java.net.URLClassLoader.findClass(URLClassLoader.java:466)\n>>>>\n>>>> at clojure.lang.DynamicClassLoader.findClass(DynamicClassLoader\n>>>> .java:69)\n>>>>\n>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n>>>>\n>>>> at clojure.lang.DynamicClassLoader.loadClass(DynamicClassLoader\n>>>> .java:77)\n>>>>\n>>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>>>>\n>>>> at java.base\/java.lang.Class.forName0(Native Method)\n>>>>\n>>>> at java.base\/java.lang.Class.forName(Class.java:375)\n>>>>\n>>>> at clojure.lang.RT.classForName(RT.java:2204)\n>>>>\n>>>> at clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n>>>>\n>>>> at org.httpkit.server$eval18583$loading__6434__auto____18584.in\n>>>> voke(server.clj:1)\n>>>>\n>>>> at org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n>>>>\n>>>> at org.httpkit.server$eval18583.invoke(server.clj:1)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>>\n>>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>>\n>>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>>\n>>>> ... 146 more\n>>>>\n>>>> Johannes\n>>>>\n>>>>>\n>>>>>\n>>>>> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de>\n>>>>> wrote:\n>>>>>\n>>>>>>\n>>>>>>\n>>>>>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>>>>>\n>>>>>>> That looks good.  Can you verify it matches what is in\n>>>>>>> `project.clj`?\n>>>>>>>\n>>>>>> Yes, I think it does. That's the downloaded project.clj:\n>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>                 ]\n>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>> [[org.clojure\/clojure]]]\n>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>\n>>>>>>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>>>>>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>>>>>                          \"junitReporter\" {\"outputDir\"\n>>>>>> \"target\/test-results\"}}}\n>>>>>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>>>>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n>>>>>>   :source-paths [\"src\"]\n>>>>>>   :cljsbuild {:builds\n>>>>>>               [{:id           \"dev\"\n>>>>>>                 :source-paths [\"src\"]\n>>>>>>                 ;; The presence of a :figwheel configuration here\n>>>>>> will cause figwheel to inject the\n>>>>>>                 ;; figwheel client into your build\n>>>>>>                 :figwheel     {:on-jsload\n>>>>>> \"flintstones.core\/on-js-reload\"\n>>>>>>                                ;; :open-urls will pop open your\n>>>>>> application in the default browser once\n>>>>>>                                ;; Figwheel has started and compiled\n>>>>>> your application.  Comment this out\n>>>>>>                                ;; once it no longer serves you.\n>>>>>>                                :open-urls [\"\n>>>>>> http:\/\/localhost:3449\/index.html\"]}\n>>>>>>                 :compiler     {:main                 flintstones.core\n>>>>>>                                :optimizations        :none\n>>>>>>                                :libs\n>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>\n>>>>>>                                :foreign-libs         [{:file\n>>>>>> \"dino.js\"\n>>>>>>                                                        :provides\n>>>>>> [\"dinoPhony\"]}]\n>>>>>>                                :externs\n>>>>>>  [\"dino-externs.js\"]\n>>>>>>\n>>>>>>                                :output-to\n>>>>>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>                                :output-dir\n>>>>>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>>>>>                                :asset-path\n>>>>>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of\n>>>>>> `resources\/public`\n>>>>>>                                                         ; ^^^ must\n>>>>>> match :output-dir\n>>>>>>                                :source-map-timestamp true\n>>>>>>                                ;; To console.log CLJS data-structures\n>>>>>> make sure you enable devtools in Chrome\n>>>>>>                                ;; https:\/\/github.com\/binaryage\/c\n>>>>>> ljs-devtools\n>>>>>>                                :preloads\n>>>>>> [devtools.preload]}}\n>>>>>>\n>>>>>>                {:id           \"test\"\n>>>>>>                 :source-paths [\"src\" \"test\"]\n>>>>>>                 :compiler     {:main\n>>>>>> tst.flintstones.doorunner\n>>>>>>                                :optimizations        :none ; :advanced\n>>>>>>                                :libs\n>>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>>\n>>>>>>                                :foreign-libs         [{:file\n>>>>>> \"dino.js\"\n>>>>>>                                                        :provides\n>>>>>> [\"dinoPhony\"]}]\n>>>>>>                                :externs\n>>>>>>  [\"dino-externs.js\"]\n>>>>>>\n>>>>>>                                :output-to\n>>>>>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>>>>>                                :output-dir\n>>>>>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>>>>>                                ;:asset-path\n>>>>>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of `resources\/public`\n>>>>>>\n>>>>>>                                :source-map-timestamp true}}]}\n>>>>>>\n>>>>>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>>>>>                                    [figwheel-sidecar \"0.5.15\"]\n>>>>>>                                    [com.cemerick\/piggieback \"0.2.2\"]]\n>>>>>>                    ;; need to add dev source path here to get\n>>>>>> user.clj loaded\n>>>>>>                    :source-paths  [\"src\" \"dev\"]\n>>>>>>                    ;; for CIDER\n>>>>>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>>>>>                    :repl-options  {:nrepl-middleware\n>>>>>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>>>>>                    ;; need to add the compliled assets to the\n>>>>>> :clean-targets\n>>>>>>                    :clean-targets ^{:protect false}\n>>>>>> [\"resources\/public\/js\/compiled\"\n>>>>>>                                                      \"out\"\n>>>>>>                                                      :target-path]}}\n>>>>>>\n>>>>>>   :jvm-opts [\"-Xmx1g\"])\n>>>>>>\n>>>>>>\n>>>>>>\n>>>>>>> Also, try `lein --version` or type `lein repl` to verify the same\n>>>>>>> stuff is found.\n>>>>>>>\n>>>>>> JohMBAir:piggi johannes$ lein -version\n>>>>>>\n>>>>>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>>>>>\n>>>>>> JohMBAir:piggi johannes$ lein repl\n>>>>>>\n>>>>>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>>>>>> 127.0.0.1:57650\n>>>>>>\n>>>>>> REPL-y 0.3.7, nREPL 0.2.13\n>>>>>>\n>>>>>> Clojure 1.9.0\n>>>>>>\n>>>>>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>>>>>\n>>>>>>     Docs: (doc function-name-here)\n>>>>>>\n>>>>>>           (find-doc \"part-of-name-here\")\n>>>>>>\n>>>>>>   Source: (source function-name-here)\n>>>>>>\n>>>>>>  Javadoc: (javadoc java-object-or-class-here)\n>>>>>>\n>>>>>>     Exit: Control+D or (exit) or (quit)\n>>>>>>\n>>>>>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>>>>>\n>>>>>>\n>>>>>> user=>\n>>>>>>\n>>>>>> Johannes\n>>>>>>\n>>>>>>\n>>>>>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de>\n>>>>>>> wrote:\n>>>>>>>\n>>>>>>>> I am not sure if this is what you want to see:\n>>>>>>>>\n>>>>>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile\n>>>>>>>> hello-world.core --repl\n>>>>>>>>\n>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>\n>>>>>>>> cljs.user=> ^D\n>>>>>>>>\n>>>>>>>> JohMBAir:hello-world johannes$ clj\n>>>>>>>>\n>>>>>>>> Clojure 1.9.0\n>>>>>>>>\n>>>>>>>> user=> ^D\n>>>>>>>>\n>>>>>>>> JohMBAir:hello-world johannes$ java --version\n>>>>>>>>\n>>>>>>>> java 9.0.1\n>>>>>>>>\n>>>>>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>>>>>\n>>>>>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>>>>>\n>>>>>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>\n>>>>>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>>>>>\n>>>>>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de>\n>>>>>>>>> wrote:\n>>>>>>>>>\n>>>>>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>>>>>\n>>>>>>>>>> lein figwheel\n>>>>>>>>>>\n>>>>>>>>>> I get the known error:\n>>>>>>>>>>\n>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>\n>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom\n>>>>>>>>>> from clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from\n>>>>>>>>>> clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from\n>>>>>>>>>> clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving \n>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom\n>>>>>>>>>> from clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>>>>>>> lpha4\/core.match-0.3.0-alpha4.pom from central\n>>>>>>>>>>\n>>>>>>>>>> Retrieving org\/clojure\/tools.analyzer.jvm\n>>>>>>>>>> \/0.6.5\/tools.analyzer.jvm-0.6.5.pom from central\n>>>>>>>>>>\n>>>>>>>>>> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom\n>>>>>>>>>> from central\n>>>>>>>>>>\n>>>>>>>>>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom\n>>>>>>>>>> from central\n>>>>>>>>>>\n>>>>>>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>>>>>>> \/0.1.4\/math.combinatorics-0.1.4.pom from central\n>>>>>>>>>>\n>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/core\/jac\n>>>>>>>>>> kson-core\/2.9.0\/jackson-core-2.9.0.jar from central\n>>>>>>>>>>\n>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>>>>>>> at\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>>>>> from central\n>>>>>>>>>>\n>>>>>>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>>>>>>> at\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>>>>> from central\n>>>>>>>>>>\n>>>>>>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>>>>>>> \/0.1.4\/math.combinatorics-0.1.4.jar from central\n>>>>>>>>>>\n>>>>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>>>>>>> lpha4\/core.match-0.3.0-alpha4.jar from central\n>>>>>>>>>>\n>>>>>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from\n>>>>>>>>>> clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar\n>>>>>>>>>> from clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from\n>>>>>>>>>> clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from\n>>>>>>>>>> clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving \n>>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar\n>>>>>>>>>> from clojars\n>>>>>>>>>>\n>>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>>>>>>>>\n>>>>>>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException:\n>>>>>>>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.\n>>>>>>>>>> clj:1:1)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>>>\n>>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>>\n>>>>>>>>>> ...\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>>\n>>>>>>>>>>> I am not including `--add-modules` in my template project\n>>>>>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works\n>>>>>>>>>>> great:\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>>                 ]\n>>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> ---------------------------\n>>>>>>>>>>>\n>>>>>>>>>>> ~\/expr\/cljs-template > lein figwheel\n>>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>>>>>> Figwheel: Watching build - dev\n>>>>>>>>>>> Compiling build :dev to \n>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>>>> from [\"src\"]...\n>>>>>>>>>>> Successfully compiled build :dev to\n>>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 seconds.\n>>>>>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>>>>>> ...\n>>>>>>>>>>>     Exit: :cljs\/quit\n>>>>>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception\n>>>>>>>>>>> object\n>>>>>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>>> dev:cljs.user!{:conn 2}=>\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <\n>>>>>>>>>>> bra...@nordakademie.de> wrote:\n>>>>>>>>>>>\n>>>>>>>>>>>> I've learned from several discussions (\n>>>>>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that the\n>>>>>>>>>>>> problem was ClojureScript 1.9 and that one should use the tag \n>>>>>>>>>>>> :jvm-opts\n>>>>>>>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript \n>>>>>>>>>>>> version is out.\n>>>>>>>>>>>>\n>>>>>>>>>>>>\n>>>>>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>>>>>\n>>>>>>>>>>>>> Is this it? --> https:\/\/github.com\/http-ki\n>>>>>>>>>>>>> t\/http-kit\/issues\/356\n>>>>>>>>>>>>>\n>>>>>>>>>>>> --\n>>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>>> ---\n>>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from\n>>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com\n>>>>>>>>>>>> .\n>>>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/grou\n>>>>>>>>>>>> p\/clojurescript.\n>>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> --\n>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>> patient with your first post.\n>>>>>>>>>> ---\n>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript\n>>>>>>>>>> .\n>>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> --\n>>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>>> with your first post.\n>>>>>>>> ---\n>>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>\n>>>>>>>\n>>>>>>> --\n>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>> with your first post.\n>>>>>> ---\n>>>>>> You received this message because you are subscribed to the Google\n>>>>>> Groups \"ClojureScript\" group.\n>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>\n>>>>>\n>>>>> --\n>>>> Note that posts from new members are moderated - please be patient with\n>>>> your first post.\n>>>> ---\n>>>> You received this message because you are subscribed to the Google\n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>> an email to clojurescrip...@googlegroups.com.\n>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>\n>>>\n>>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Thu, 03 May 2018 20:46:18 -0700"},
{"body":"Hmmm, OK, I just noticed I am on JVM 1.8.   If I switch to java 9, I get\nthe same error as you. \nOn Thu, May 3, 2018 at 4:36 PM, Johannes <bra...@nordakademie.de> wrote:\n\n> I'm sorry, but I get the same stack trace as before. And again: if I\n> modify the :jvm-opts\n>\n> :jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"]\n>\n> all works fine.\n>\n> Johannes\n>\n> Am Freitag, 4. Mai 2018 00:08:48 UTC+2 schrieb Alan Thompson:\n>>\n>> OK, I made a super-stripped down version to remove possible config\n>> problems.  Try this:\n>>\n>> https:\/\/github.com\/cloojure\/cljs-figwheel-stripped.git\n>>\n>>\n>>\n>> Alan\n>>\n>> On Thu, May 3, 2018 at 1:56 PM, Johannes <bra...@nordakademie.de> wrote:\n>>\n>>>\n>>>\n>>> Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>>>>\n>>>> And what happens if you type `lein figwheel` ?\n>>>>\n>>> The same problem as before:\n>>>\n>>> JohMBAir:cljs-template-master johannes$ lein figwheel\n>>>\n>>> Figwheel: Cutting some fruit, just a sec ...\n>>>\n>>> Exception in thread \"main\" java.lang.ExceptionInInitializerError\n>>>\n>>> at clojure.main.<clinit>(main.java:20)\n>>>\n>>> Caused by: java.lang.ClassNotFoundException:\n>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n>>>\n>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>\n>>> at clojure.lang.RT.load(RT.java:460)\n>>>\n>>> at clojure.lang.RT.load(RT.java:426)\n>>>\n>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>\n>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>\n>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>\n>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>\n>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>\n>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>\n>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>\n>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>\n>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>\n>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>\n>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>\n>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>\n>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>\n>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>\n>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>\n>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>\n>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>\n>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>\n>>> at figwheel_sidecar.components.figwheel_server$eval18306$loadin\n>>> g__6434__auto____18307.invoke(figwheel_server.clj:1)\n>>>\n>>> at figwheel_sidecar.components.figwheel_server$eval18306.invoke\n>>> Static(figwheel_server.clj:1)\n>>>\n>>> at figwheel_sidecar.components.figwheel_server$eval18306.invoke\n>>> (figwheel_server.clj:1)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>\n>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>\n>>> at clojure.lang.RT.load(RT.java:460)\n>>>\n>>> at clojure.lang.RT.load(RT.java:426)\n>>>\n>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>\n>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>\n>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>\n>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>\n>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>\n>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>\n>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>\n>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>\n>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>\n>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>\n>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>\n>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>\n>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>\n>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>\n>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>\n>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>\n>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>\n>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>\n>>> at figwheel_sidecar.repl$eval9100$loading__6434__auto____9101.\n>>> invoke(repl.clj:1)\n>>>\n>>> at figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n>>>\n>>> at figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>\n>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>\n>>> at clojure.lang.RT.load(RT.java:460)\n>>>\n>>> at clojure.lang.RT.load(RT.java:426)\n>>>\n>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>\n>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>\n>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>\n>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>\n>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>\n>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>\n>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>\n>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>\n>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>\n>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>\n>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>\n>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>\n>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>\n>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>\n>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>\n>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>\n>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>\n>>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>>\n>>> at figwheel_sidecar.system$eval9094$loading__6434__auto____\n>>> 9095.invoke(system.clj:1)\n>>>\n>>> at figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n>>>\n>>> at figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>\n>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>\n>>> at clojure.lang.RT.load(RT.java:460)\n>>>\n>>> at clojure.lang.RT.load(RT.java:426)\n>>>\n>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>\n>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>\n>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>\n>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>\n>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>\n>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>\n>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>\n>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>\n>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>\n>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>\n>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>\n>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>\n>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>\n>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>\n>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>\n>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>\n>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>\n>>> at clojure.lang.RestFn.invoke(RestFn.java:930)\n>>>\n>>> at figwheel_sidecar.repl_api$eval19$loading__6434__auto____20.\n>>> invoke(repl_api.clj:1)\n>>>\n>>> at figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n>>>\n>>> at figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>\n>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>>\n>>> at clojure.lang.RT.load(RT.java:460)\n>>>\n>>> at clojure.lang.RT.load(RT.java:426)\n>>>\n>>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>>\n>>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>>\n>>> at clojure.core$load.doInvoke(core.clj:6029)\n>>>\n>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>\n>>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>>\n>>> at clojure.core$load_one.invoke(core.clj:5843)\n>>>\n>>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>>\n>>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>>\n>>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>>\n>>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>>\n>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>\n>>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>>\n>>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>>\n>>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>>\n>>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>>\n>>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>>\n>>> at clojure.core$require.doInvoke(core.clj:5947)\n>>>\n>>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>>\n>>> at user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n>>>\n>>> at user$eval13.invokeStatic(user.clj:1)\n>>>\n>>> at user$eval13.invoke(user.clj:1)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>\n>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:366)\n>>>\n>>> at clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n>>>\n>>> at clojure.lang.RT.doInit(RT.java:482)\n>>>\n>>> at clojure.lang.RT.<clinit>(RT.java:336)\n>>>\n>>> ... 1 more\n>>>\n>>> Caused by: java.lang.ClassNotFoundException:\n>>> javax.xml.bind.DatatypeConverter\n>>>\n>>> at java.base\/java.net.URLClassLoader.findClass(URLClassLoader.java:466)\n>>>\n>>> at clojure.lang.DynamicClassLoader.findClass(DynamicClassLoader.java:69)\n>>>\n>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n>>>\n>>> at clojure.lang.DynamicClassLoader.loadClass(DynamicClassLoader.java:77)\n>>>\n>>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>>>\n>>> at java.base\/java.lang.Class.forName0(Native Method)\n>>>\n>>> at java.base\/java.lang.Class.forName(Class.java:375)\n>>>\n>>> at clojure.lang.RT.classForName(RT.java:2204)\n>>>\n>>> at clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n>>>\n>>> at org.httpkit.server$eval18583$loading__6434__auto____18584.in\n>>> voke(server.clj:1)\n>>>\n>>> at org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n>>>\n>>> at org.httpkit.server$eval18583.invoke(server.clj:1)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>>\n>>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>>\n>>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>>\n>>> ... 146 more\n>>>\n>>> Johannes\n>>>\n>>>>\n>>>>\n>>>> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de>\n>>>> wrote:\n>>>>\n>>>>>\n>>>>>\n>>>>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>>>>\n>>>>>> That looks good.  Can you verify it matches what is in\n>>>>>> `project.clj`?\n>>>>>>\n>>>>> Yes, I think it does. That's the downloaded project.clj:\n>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>   :min-lein-version \"2.7.1\"\n>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>                  [tupelo \"0.9.76\"]\n>>>>>                 ]\n>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>> [[org.clojure\/clojure]]]\n>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>\n>>>>>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>>>>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>>>>                          \"junitReporter\" {\"outputDir\"\n>>>>> \"target\/test-results\"}}}\n>>>>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>>>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n>>>>>   :source-paths [\"src\"]\n>>>>>   :cljsbuild {:builds\n>>>>>               [{:id           \"dev\"\n>>>>>                 :source-paths [\"src\"]\n>>>>>                 ;; The presence of a :figwheel configuration here will\n>>>>> cause figwheel to inject the\n>>>>>                 ;; figwheel client into your build\n>>>>>                 :figwheel     {:on-jsload\n>>>>> \"flintstones.core\/on-js-reload\"\n>>>>>                                ;; :open-urls will pop open your\n>>>>> application in the default browser once\n>>>>>                                ;; Figwheel has started and compiled\n>>>>> your application.  Comment this out\n>>>>>                                ;; once it no longer serves you.\n>>>>>                                :open-urls [\"\n>>>>> http:\/\/localhost:3449\/index.html\"]}\n>>>>>                 :compiler     {:main                 flintstones.core\n>>>>>                                :optimizations        :none\n>>>>>                                :libs\n>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>\n>>>>>                                :foreign-libs         [{:file\n>>>>> \"dino.js\"\n>>>>>                                                        :provides\n>>>>> [\"dinoPhony\"]}]\n>>>>>                                :externs\n>>>>>  [\"dino-externs.js\"]\n>>>>>\n>>>>>                                :output-to\n>>>>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>                                :output-dir\n>>>>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>>>>                                :asset-path\n>>>>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of\n>>>>> `resources\/public`\n>>>>>                                                         ; ^^^ must\n>>>>> match :output-dir\n>>>>>                                :source-map-timestamp true\n>>>>>                                ;; To console.log CLJS data-structures\n>>>>> make sure you enable devtools in Chrome\n>>>>>                                ;; https:\/\/github.com\/binaryage\/c\n>>>>> ljs-devtools\n>>>>>                                :preloads\n>>>>> [devtools.preload]}}\n>>>>>\n>>>>>                {:id           \"test\"\n>>>>>                 :source-paths [\"src\" \"test\"]\n>>>>>                 :compiler     {:main\n>>>>> tst.flintstones.doorunner\n>>>>>                                :optimizations        :none ; :advanced\n>>>>>                                :libs\n>>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>>\n>>>>>                                :foreign-libs         [{:file\n>>>>> \"dino.js\"\n>>>>>                                                        :provides\n>>>>> [\"dinoPhony\"]}]\n>>>>>                                :externs\n>>>>>  [\"dino-externs.js\"]\n>>>>>\n>>>>>                                :output-to\n>>>>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>>>>                                :output-dir\n>>>>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>>>>                                ;:asset-path\n>>>>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of `resources\/public`\n>>>>>\n>>>>>                                :source-map-timestamp true}}]}\n>>>>>\n>>>>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>>>>                                    [figwheel-sidecar \"0.5.15\"]\n>>>>>                                    [com.cemerick\/piggieback \"0.2.2\"]]\n>>>>>                    ;; need to add dev source path here to get user.clj\n>>>>> loaded\n>>>>>                    :source-paths  [\"src\" \"dev\"]\n>>>>>                    ;; for CIDER\n>>>>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>>>>                    :repl-options  {:nrepl-middleware\n>>>>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>>>>                    ;; need to add the compliled assets to the\n>>>>> :clean-targets\n>>>>>                    :clean-targets ^{:protect false}\n>>>>> [\"resources\/public\/js\/compiled\"\n>>>>>                                                      \"out\"\n>>>>>                                                      :target-path]}}\n>>>>>\n>>>>>   :jvm-opts [\"-Xmx1g\"])\n>>>>>\n>>>>>\n>>>>>\n>>>>>> Also, try `lein --version` or type `lein repl` to verify the same\n>>>>>> stuff is found.\n>>>>>>\n>>>>> JohMBAir:piggi johannes$ lein -version\n>>>>>\n>>>>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>>>>\n>>>>> JohMBAir:piggi johannes$ lein repl\n>>>>>\n>>>>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>>>>> 127.0.0.1:57650\n>>>>>\n>>>>> REPL-y 0.3.7, nREPL 0.2.13\n>>>>>\n>>>>> Clojure 1.9.0\n>>>>>\n>>>>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>>>>\n>>>>>     Docs: (doc function-name-here)\n>>>>>\n>>>>>           (find-doc \"part-of-name-here\")\n>>>>>\n>>>>>   Source: (source function-name-here)\n>>>>>\n>>>>>  Javadoc: (javadoc java-object-or-class-here)\n>>>>>\n>>>>>     Exit: Control+D or (exit) or (quit)\n>>>>>\n>>>>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>>>>\n>>>>>\n>>>>> user=>\n>>>>>\n>>>>> Johannes\n>>>>>\n>>>>>\n>>>>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de>\n>>>>>> wrote:\n>>>>>>\n>>>>>>> I am not sure if this is what you want to see:\n>>>>>>>\n>>>>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile\n>>>>>>> hello-world.core --repl\n>>>>>>>\n>>>>>>> ClojureScript 1.10.238\n>>>>>>>\n>>>>>>> cljs.user=> ^D\n>>>>>>>\n>>>>>>> JohMBAir:hello-world johannes$ clj\n>>>>>>>\n>>>>>>> Clojure 1.9.0\n>>>>>>>\n>>>>>>> user=> ^D\n>>>>>>>\n>>>>>>> JohMBAir:hello-world johannes$ java --version\n>>>>>>>\n>>>>>>> java 9.0.1\n>>>>>>>\n>>>>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>>>>\n>>>>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>>>>\n>>>>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>>>>\n>>>>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>>>>\n>>>>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de>\n>>>>>>>> wrote:\n>>>>>>>>\n>>>>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>>>>\n>>>>>>>>> lein figwheel\n>>>>>>>>>\n>>>>>>>>> I get the known error:\n>>>>>>>>>\n>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>\n>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom\n>>>>>>>>> from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from\n>>>>>>>>> clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving \n>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom\n>>>>>>>>> from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>>>>>> lpha4\/core.match-0.3.0-alpha4.pom from central\n>>>>>>>>>\n>>>>>>>>> Retrieving org\/clojure\/tools.analyzer.jvm\n>>>>>>>>> \/0.6.5\/tools.analyzer.jvm-0.6.5.pom from central\n>>>>>>>>>\n>>>>>>>>> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom\n>>>>>>>>> from central\n>>>>>>>>>\n>>>>>>>>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom\n>>>>>>>>> from central\n>>>>>>>>>\n>>>>>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>>>>>> \/0.1.4\/math.combinatorics-0.1.4.pom from central\n>>>>>>>>>\n>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving com\/fasterxml\/jackson\/core\/jac\n>>>>>>>>> kson-core\/2.9.0\/jackson-core-2.9.0.jar from central\n>>>>>>>>>\n>>>>>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>>>>>> at\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>>>> from central\n>>>>>>>>>\n>>>>>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>>>>>> at\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>>>> from central\n>>>>>>>>>\n>>>>>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>>>>>> \/0.1.4\/math.combinatorics-0.1.4.jar from central\n>>>>>>>>>\n>>>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>>>>>> lpha4\/core.match-0.3.0-alpha4.jar from central\n>>>>>>>>>\n>>>>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar\n>>>>>>>>> from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from\n>>>>>>>>> clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving \n>>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar\n>>>>>>>>> from clojars\n>>>>>>>>>\n>>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>>>>>>>\n>>>>>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException:\n>>>>>>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.\n>>>>>>>>> clj:1:1)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>>\n>>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>>\n>>>>>>>>> ...\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>>>>>>>\n>>>>>>>>>> I am not including `--add-modules` in my template project\n>>>>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works\n>>>>>>>>>> great:\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>>                 ]\n>>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> ---------------------------\n>>>>>>>>>>\n>>>>>>>>>> ~\/expr\/cljs-template > lein figwheel\n>>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>>>>> Figwheel: Watching build - dev\n>>>>>>>>>> Compiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>>> from [\"src\"]...\n>>>>>>>>>> Successfully compiled build :dev to \n>>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>>>> in 0.908 seconds.\n>>>>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>>>>> ...\n>>>>>>>>>>     Exit: :cljs\/quit\n>>>>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception\n>>>>>>>>>> object\n>>>>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>>> dev:cljs.user!{:conn 2}=>\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de\n>>>>>>>>>> > wrote:\n>>>>>>>>>>\n>>>>>>>>>>> I've learned from several discussions (\n>>>>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that the\n>>>>>>>>>>> problem was ClojureScript 1.9 and that one should use the tag \n>>>>>>>>>>> :jvm-opts\n>>>>>>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript version \n>>>>>>>>>>> is out.\n>>>>>>>>>>>\n>>>>>>>>>>>\n>>>>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>>>>>>>>>\n>>>>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>>>>\n>>>>>>>>>>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>>>>>>>>\n>>>>>>>>>>> --\n>>>>>>>>>>> Note that posts from new members are moderated - please be\n>>>>>>>>>>> patient with your first post.\n>>>>>>>>>>> ---\n>>>>>>>>>>> You received this message because you are subscribed to the\n>>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>>> To unsubscribe from this group and stop receiving emails from\n>>>>>>>>>>> it, send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/grou\n>>>>>>>>>>> p\/clojurescript.\n>>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> --\n>>>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>>>> with your first post.\n>>>>>>>>> ---\n>>>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>\n>>>>>>>>\n>>>>>>>> --\n>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>> with your first post.\n>>>>>>> ---\n>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>\n>>>>>>\n>>>>>> --\n>>>>> Note that posts from new members are moderated - please be patient\n>>>>> with your first post.\n>>>>> ---\n>>>>> You received this message because you are subscribed to the Google\n>>>>> Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>>> an email to clojurescrip...@googlegroups.com.\n>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>\n>>>>\n>>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Thu, 03 May 2018 20:23:05 -0700"},
{"body":"I'm sorry, but I get the same stack trace as before. And again: if I modify \nthe :jvm-opts \n:jvm-opts [\"-Xmx1g\" \"--add-modules\" \"java.xml.bind\"]\n\nall works fine.\n\nJohannes\n\nAm Freitag, 4. Mai 2018 00:08:48 UTC+2 schrieb Alan Thompson:\n>\n> OK, I made a super-stripped down version to remove possible config \n> problems.  Try this:\n>\n> https:\/\/github.com\/cloojure\/cljs-figwheel-stripped.git\n>\n>\n>\n> Alan\n>\n> On Thu, May 3, 2018 at 1:56 PM, Johannes <bra...@nordakademie.de \n> <javascript:>> wrote:\n>\n>>\n>>\n>> Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>>>\n>>> And what happens if you type `lein figwheel` ?\n>>>\n>> The same problem as before:\n>>\n>> JohMBAir:cljs-template-master johannes$ lein figwheel\n>>\n>> Figwheel: Cutting some fruit, just a sec ...\n>>\n>> Exception in thread \"main\" java.lang.ExceptionInInitializerError\n>>\n>> at clojure.main.<clinit>(main.java:20)\n>>\n>> Caused by: java.lang.ClassNotFoundException: \n>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n>>\n>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>\n>> at clojure.lang.RT.load(RT.java:460)\n>>\n>> at clojure.lang.RT.load(RT.java:426)\n>>\n>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>\n>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>\n>> at clojure.core$load.doInvoke(core.clj:6029)\n>>\n>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>\n>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>\n>> at clojure.core$load_one.invoke(core.clj:5843)\n>>\n>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>\n>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>\n>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>\n>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>\n>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>\n>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>\n>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>\n>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>\n>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>\n>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>\n>> at clojure.core$require.doInvoke(core.clj:5947)\n>>\n>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>\n>> at \n>> figwheel_sidecar.components.figwheel_server$eval18306$loading__6434__auto____18307.invoke(figwheel_server.clj:1)\n>>\n>> at \n>> figwheel_sidecar.components.figwheel_server$eval18306.invokeStatic(figwheel_server.clj:1)\n>>\n>> at \n>> figwheel_sidecar.components.figwheel_server$eval18306.invoke(figwheel_server.clj:1)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>\n>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>\n>> at clojure.lang.RT.load(RT.java:460)\n>>\n>> at clojure.lang.RT.load(RT.java:426)\n>>\n>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>\n>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>\n>> at clojure.core$load.doInvoke(core.clj:6029)\n>>\n>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>\n>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>\n>> at clojure.core$load_one.invoke(core.clj:5843)\n>>\n>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>\n>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>\n>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>\n>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>\n>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>\n>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>\n>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>\n>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>\n>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>\n>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>\n>> at clojure.core$require.doInvoke(core.clj:5947)\n>>\n>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>\n>> at \n>> figwheel_sidecar.repl$eval9100$loading__6434__auto____9101.invoke(repl.clj:1)\n>>\n>> at figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n>>\n>> at figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>\n>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>\n>> at clojure.lang.RT.load(RT.java:460)\n>>\n>> at clojure.lang.RT.load(RT.java:426)\n>>\n>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>\n>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>\n>> at clojure.core$load.doInvoke(core.clj:6029)\n>>\n>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>\n>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>\n>> at clojure.core$load_one.invoke(core.clj:5843)\n>>\n>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>\n>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>\n>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>\n>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>\n>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>\n>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>\n>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>\n>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>\n>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>\n>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>\n>> at clojure.core$require.doInvoke(core.clj:5947)\n>>\n>> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>>\n>> at \n>> figwheel_sidecar.system$eval9094$loading__6434__auto____9095.invoke(system.clj:1)\n>>\n>> at figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n>>\n>> at figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>\n>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>\n>> at clojure.lang.RT.load(RT.java:460)\n>>\n>> at clojure.lang.RT.load(RT.java:426)\n>>\n>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>\n>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>\n>> at clojure.core$load.doInvoke(core.clj:6029)\n>>\n>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>\n>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>\n>> at clojure.core$load_one.invoke(core.clj:5843)\n>>\n>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>\n>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>\n>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>\n>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>\n>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>\n>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>\n>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>\n>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>\n>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>\n>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>\n>> at clojure.core$require.doInvoke(core.clj:5947)\n>>\n>> at clojure.lang.RestFn.invoke(RestFn.java:930)\n>>\n>> at \n>> figwheel_sidecar.repl_api$eval19$loading__6434__auto____20.invoke(repl_api.clj:1)\n>>\n>> at figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n>>\n>> at figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>\n>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>>\n>> at clojure.lang.RT.load(RT.java:460)\n>>\n>> at clojure.lang.RT.load(RT.java:426)\n>>\n>> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>>\n>> at clojure.core$load.invokeStatic(core.clj:6045)\n>>\n>> at clojure.core$load.doInvoke(core.clj:6029)\n>>\n>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>\n>> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>>\n>> at clojure.core$load_one.invoke(core.clj:5843)\n>>\n>> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>>\n>> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>>\n>> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>>\n>> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>>\n>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>\n>> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>>\n>> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>>\n>> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>>\n>> at clojure.core$apply.invokeStatic(core.clj:659)\n>>\n>> at clojure.core$require.invokeStatic(core.clj:5947)\n>>\n>> at clojure.core$require.doInvoke(core.clj:5947)\n>>\n>> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>>\n>> at user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n>>\n>> at user$eval13.invokeStatic(user.clj:1)\n>>\n>> at user$eval13.invoke(user.clj:1)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>\n>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:366)\n>>\n>> at clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n>>\n>> at clojure.lang.RT.doInit(RT.java:482)\n>>\n>> at clojure.lang.RT.<clinit>(RT.java:336)\n>>\n>> ... 1 more\n>>\n>> Caused by: java.lang.ClassNotFoundException: \n>> javax.xml.bind.DatatypeConverter\n>>\n>> at java.base\/java.net.URLClassLoader.findClass(URLClassLoader.java:466)\n>>\n>> at clojure.lang.DynamicClassLoader.findClass(DynamicClassLoader.java:69)\n>>\n>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n>>\n>> at clojure.lang.DynamicClassLoader.loadClass(DynamicClassLoader.java:77)\n>>\n>> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>>\n>> at java.base\/java.lang.Class.forName0(Native Method)\n>>\n>> at java.base\/java.lang.Class.forName(Class.java:375)\n>>\n>> at clojure.lang.RT.classForName(RT.java:2204)\n>>\n>> at clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n>>\n>> at \n>> org.httpkit.server$eval18583$loading__6434__auto____18584.invoke(server.clj:1)\n>>\n>> at org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n>>\n>> at org.httpkit.server$eval18583.invoke(server.clj:1)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>>\n>> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>>\n>> at clojure.lang.Compiler.load(Compiler.java:7514)\n>>\n>> ... 146 more\n>>\n>> Johannes \n>>\n>>>\n>>>\n>>> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de> wrote:\n>>>\n>>>>\n>>>>\n>>>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>>>\n>>>>> That looks good.  Can you verify it matches what is in `project.clj`?  \n>>>>>\n>>>> Yes, I think it does. That's the downloaded project.clj:\n>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>   :min-lein-version \"2.7.1\"\n>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>                  [tupelo \"0.9.76\"]\n>>>>                 ]\n>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>>>>             [lein-figwheel \"0.5.15\"]\n>>>>             [lein-doo \"0.1.10\"]]\n>>>>\n>>>>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>>>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>>>                          \"junitReporter\" {\"outputDir\" \n>>>> \"target\/test-results\"}}}\n>>>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n>>>>   :source-paths [\"src\"]\n>>>>   :cljsbuild {:builds\n>>>>               [{:id           \"dev\"\n>>>>                 :source-paths [\"src\"]\n>>>>                 ;; The presence of a :figwheel configuration here will \n>>>> cause figwheel to inject the\n>>>>                 ;; figwheel client into your build\n>>>>                 :figwheel     {:on-jsload \n>>>> \"flintstones.core\/on-js-reload\"\n>>>>                                ;; :open-urls will pop open your \n>>>> application in the default browser once\n>>>>                                ;; Figwheel has started and compiled \n>>>> your application.  Comment this out\n>>>>                                ;; once it no longer serves you.\n>>>>                                :open-urls [\"\n>>>> http:\/\/localhost:3449\/index.html\"]}\n>>>>                 :compiler     {:main                 flintstones.core\n>>>>                                :optimizations        :none\n>>>>                                :libs                 \n>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>\n>>>>                                :foreign-libs         [{:file     \n>>>> \"dino.js\"\n>>>>                                                        :provides \n>>>> [\"dinoPhony\"]}]\n>>>>                                :externs              [\"dino-externs.js\"]\n>>>>\n>>>>                                :output-to           \n>>>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>                                :output-dir           \n>>>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>>>                                :asset-path           \n>>>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of \n>>>> `resources\/public`\n>>>>                                                         ; ^^^ must \n>>>> match :output-dir\n>>>>                                :source-map-timestamp true\n>>>>                                ;; To console.log CLJS data-structures \n>>>> make sure you enable devtools in Chrome\n>>>>                                ;; \n>>>> https:\/\/github.com\/binaryage\/cljs-devtools\n>>>>                                :preloads             \n>>>> [devtools.preload]}}\n>>>>\n>>>>                {:id           \"test\"\n>>>>                 :source-paths [\"src\" \"test\"]\n>>>>                 :compiler     {:main                 \n>>>> tst.flintstones.doorunner\n>>>>                                :optimizations        :none ; :advanced\n>>>>                                :libs                 \n>>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>>\n>>>>                                :foreign-libs         [{:file     \n>>>> \"dino.js\"\n>>>>                                                        :provides \n>>>> [\"dinoPhony\"]}]\n>>>>                                :externs              [\"dino-externs.js\"]\n>>>>\n>>>>                                :output-to           \n>>>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>>>                                :output-dir           \n>>>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>>>                                ;:asset-path           \n>>>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of `resources\/public`\n>>>>\n>>>>                                :source-map-timestamp true}}]}\n>>>>\n>>>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>>>                                    [figwheel-sidecar \"0.5.15\"]\n>>>>                                    [com.cemerick\/piggieback \"0.2.2\"]]\n>>>>                    ;; need to add dev source path here to get user.clj \n>>>> loaded\n>>>>                    :source-paths  [\"src\" \"dev\"]\n>>>>                    ;; for CIDER\n>>>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>>>                    :repl-options  {:nrepl-middleware \n>>>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>>>                    ;; need to add the compliled assets to the \n>>>> :clean-targets\n>>>>                    :clean-targets ^{:protect false} \n>>>> [\"resources\/public\/js\/compiled\"\n>>>>                                                      \"out\"\n>>>>                                                      :target-path]}}\n>>>>\n>>>>   :jvm-opts [\"-Xmx1g\"])\n>>>>\n>>>>  \n>>>>\n>>>>> Also, try `lein --version` or type `lein repl` to verify the same \n>>>>> stuff is found.\n>>>>>\n>>>> JohMBAir:piggi johannes$ lein -version\n>>>>\n>>>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>>>\n>>>> JohMBAir:piggi johannes$ lein repl\n>>>>\n>>>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>>>> 127.0.0.1:57650\n>>>>\n>>>> REPL-y 0.3.7, nREPL 0.2.13\n>>>>\n>>>> Clojure 1.9.0\n>>>>\n>>>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>>>\n>>>>     Docs: (doc function-name-here)\n>>>>\n>>>>           (find-doc \"part-of-name-here\")\n>>>>\n>>>>   Source: (source function-name-here)\n>>>>\n>>>>  Javadoc: (javadoc java-object-or-class-here)\n>>>>\n>>>>     Exit: Control+D or (exit) or (quit)\n>>>>\n>>>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>>>\n>>>>\n>>>> user=> \n>>>>  \n>>>> Johannes\n>>>>\n>>>>\n>>>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de> \n>>>>> wrote:\n>>>>>\n>>>>>> I am not sure if this is what you want to see:\n>>>>>>\n>>>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile \n>>>>>> hello-world.core --repl\n>>>>>>\n>>>>>> ClojureScript 1.10.238\n>>>>>>\n>>>>>> cljs.user=> ^D\n>>>>>>\n>>>>>> JohMBAir:hello-world johannes$ clj\n>>>>>>\n>>>>>> Clojure 1.9.0\n>>>>>>\n>>>>>> user=> ^D\n>>>>>>\n>>>>>> JohMBAir:hello-world johannes$ java --version\n>>>>>>\n>>>>>> java 9.0.1\n>>>>>>\n>>>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>>>\n>>>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>>>\n>>>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>>>\n>>>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>>>\n>>>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de> \n>>>>>>> wrote:\n>>>>>>>\n>>>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>>>\n>>>>>>>> lein figwheel\n>>>>>>>>\n>>>>>>>> I get the known error:\n>>>>>>>>\n>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>\n>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>>>>>\n>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from \n>>>>>>>> clojars\n>>>>>>>>\n>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from \n>>>>>>>> clojars\n>>>>>>>>\n>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom from \n>>>>>>>> clojars\n>>>>>>>>\n>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom from \n>>>>>>>> central\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> org\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom from \n>>>>>>>> central\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom from central\n>>>>>>>>\n>>>>>>>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom \n>>>>>>>> from central\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom from \n>>>>>>>> central\n>>>>>>>>\n>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar \n>>>>>>>> from \n>>>>>>>> central\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>>>  \n>>>>>>>> from central\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>>>  \n>>>>>>>> from central\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar from \n>>>>>>>> central\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar from \n>>>>>>>> central\n>>>>>>>>\n>>>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n>>>>>>>>\n>>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from \n>>>>>>>> clojars\n>>>>>>>>\n>>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n>>>>>>>>\n>>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from \n>>>>>>>> clojars\n>>>>>>>>\n>>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>>>>>\n>>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>>>\n>>>>>>>> Retrieving \n>>>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar from \n>>>>>>>> clojars\n>>>>>>>>\n>>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>>>>>>\n>>>>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException: \n>>>>>>>> javax.xml.bind.DatatypeConverter, \n>>>>>>>> compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>>>\n>>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>>\n>>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>>\n>>>>>>>> ...\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>>>>>>\n>>>>>>>>> I am not including `--add-modules` in my template project \n>>>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works \n>>>>>>>>> great:\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>>                 ]\n>>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions \n>>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> ---------------------------\n>>>>>>>>>\n>>>>>>>>> ~\/expr\/cljs-template > lein figwheel            \n>>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>>>> Figwheel: Watching build - dev\n>>>>>>>>> Compiling build :dev to \n>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" from [\"src\"]...\n>>>>>>>>> Successfully compiled build :dev to \n>>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 seconds.\n>>>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>>>> ...\n>>>>>>>>>     Exit: :cljs\/quit\n>>>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n>>>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>>>> ClojureScript 1.10.238\n>>>>>>>>> dev:cljs.user!{:conn 2}=> \n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de> \n>>>>>>>>> wrote:\n>>>>>>>>>\n>>>>>>>>>> I've learned from several discussions (\n>>>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that the \n>>>>>>>>>> problem was ClojureScript 1.9 and that one should use the tag \n>>>>>>>>>> :jvm-opts \n>>>>>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript version \n>>>>>>>>>> is out.\n>>>>>>>>>>\n>>>>>>>>>>\n>>>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>>>>>>>>\n>>>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>>>\n>>>>>>>>>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>>>>>>>\n>>>>>>>>>> -- \n>>>>>>>>>> Note that posts from new members are moderated - please be \n>>>>>>>>>> patient with your first post.\n>>>>>>>>>> --- \n>>>>>>>>>> You received this message because you are subscribed to the \n>>>>>>>>>> Google Groups \"ClojureScript\" group.\n>>>>>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript\n>>>>>>>>>> .\n>>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> -- \n>>>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>>>> with your first post.\n>>>>>>>> --- \n>>>>>>>> You received this message because you are subscribed to the Google \n>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>\n>>>>>>>\n>>>>>>> -- \n>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>> with your first post.\n>>>>>> --- \n>>>>>> You received this message because you are subscribed to the Google \n>>>>>> Groups \"ClojureScript\" group.\n>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>\n>>>>>\n>>>>> -- \n>>>> Note that posts from new members are moderated - please be patient with \n>>>> your first post.\n>>>> --- \n>>>> You received this message because you are subscribed to the Google \n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send \n>>>> an email to clojurescrip...@googlegroups.com.\n>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>\n>>>\n>>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Johannes Thu, 03 May 2018 16:36:59 -0700"},
{"body":"OK, I made a super-stripped down version to remove possible config\nproblems.  Try this: \nhttps:\/\/github.com\/cloojure\/cljs-figwheel-stripped.git\n\n\n\nAlan\n\nOn Thu, May 3, 2018 at 1:56 PM, Johannes <bra...@nordakademie.de> wrote:\n\n>\n>\n> Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>>\n>> And what happens if you type `lein figwheel` ?\n>>\n> The same problem as before:\n>\n> JohMBAir:cljs-template-master johannes$ lein figwheel\n>\n> Figwheel: Cutting some fruit, just a sec ...\n>\n> Exception in thread \"main\" java.lang.ExceptionInInitializerError\n>\n> at clojure.main.<clinit>(main.java:20)\n>\n> Caused by: java.lang.ClassNotFoundException: javax.xml.bind.DatatypeConverter,\n> compiling:(org\/httpkit\/server.clj:1:1)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7526)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>\n> at clojure.lang.RT.load(RT.java:460)\n>\n> at clojure.lang.RT.load(RT.java:426)\n>\n> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>\n> at clojure.core$load.invokeStatic(core.clj:6045)\n>\n> at clojure.core$load.doInvoke(core.clj:6029)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>\n> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>\n> at clojure.core$load_one.invoke(core.clj:5843)\n>\n> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>\n> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>\n> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>\n> at clojure.core$apply.invokeStatic(core.clj:659)\n>\n> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>\n> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>\n> at clojure.core$apply.invokeStatic(core.clj:659)\n>\n> at clojure.core$require.invokeStatic(core.clj:5947)\n>\n> at clojure.core$require.doInvoke(core.clj:5947)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>\n> at figwheel_sidecar.components.figwheel_server$eval18306$\n> loading__6434__auto____18307.invoke(figwheel_server.clj:1)\n>\n> at figwheel_sidecar.components.figwheel_server$eval18306.\n> invokeStatic(figwheel_server.clj:1)\n>\n> at figwheel_sidecar.components.figwheel_server$eval18306.\n> invoke(figwheel_server.clj:1)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7514)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>\n> at clojure.lang.RT.load(RT.java:460)\n>\n> at clojure.lang.RT.load(RT.java:426)\n>\n> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>\n> at clojure.core$load.invokeStatic(core.clj:6045)\n>\n> at clojure.core$load.doInvoke(core.clj:6029)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>\n> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>\n> at clojure.core$load_one.invoke(core.clj:5843)\n>\n> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>\n> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>\n> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>\n> at clojure.core$apply.invokeStatic(core.clj:659)\n>\n> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>\n> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>\n> at clojure.core$apply.invokeStatic(core.clj:659)\n>\n> at clojure.core$require.invokeStatic(core.clj:5947)\n>\n> at clojure.core$require.doInvoke(core.clj:5947)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>\n> at figwheel_sidecar.repl$eval9100$loading__6434__auto__\n> __9101.invoke(repl.clj:1)\n>\n> at figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n>\n> at figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7514)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>\n> at clojure.lang.RT.load(RT.java:460)\n>\n> at clojure.lang.RT.load(RT.java:426)\n>\n> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>\n> at clojure.core$load.invokeStatic(core.clj:6045)\n>\n> at clojure.core$load.doInvoke(core.clj:6029)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>\n> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>\n> at clojure.core$load_one.invoke(core.clj:5843)\n>\n> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>\n> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>\n> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>\n> at clojure.core$apply.invokeStatic(core.clj:659)\n>\n> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>\n> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>\n> at clojure.core$apply.invokeStatic(core.clj:659)\n>\n> at clojure.core$require.invokeStatic(core.clj:5947)\n>\n> at clojure.core$require.doInvoke(core.clj:5947)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:1789)\n>\n> at figwheel_sidecar.system$eval9094$loading__6434__auto__\n> __9095.invoke(system.clj:1)\n>\n> at figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n>\n> at figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7514)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>\n> at clojure.lang.RT.load(RT.java:460)\n>\n> at clojure.lang.RT.load(RT.java:426)\n>\n> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>\n> at clojure.core$load.invokeStatic(core.clj:6045)\n>\n> at clojure.core$load.doInvoke(core.clj:6029)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>\n> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>\n> at clojure.core$load_one.invoke(core.clj:5843)\n>\n> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>\n> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>\n> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>\n> at clojure.core$apply.invokeStatic(core.clj:659)\n>\n> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>\n> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>\n> at clojure.core$apply.invokeStatic(core.clj:659)\n>\n> at clojure.core$require.invokeStatic(core.clj:5947)\n>\n> at clojure.core$require.doInvoke(core.clj:5947)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:930)\n>\n> at figwheel_sidecar.repl_api$eval19$loading__6434__auto____\n> 20.invoke(repl_api.clj:1)\n>\n> at figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n>\n> at figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7514)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:370)\n>\n> at clojure.lang.RT.load(RT.java:460)\n>\n> at clojure.lang.RT.load(RT.java:426)\n>\n> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>\n> at clojure.core$load.invokeStatic(core.clj:6045)\n>\n> at clojure.core$load.doInvoke(core.clj:6029)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>\n> at clojure.core$load_one.invokeStatic(core.clj:5848)\n>\n> at clojure.core$load_one.invoke(core.clj:5843)\n>\n> at clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n>\n> at clojure.core$load_lib.invokeStatic(core.clj:5887)\n>\n> at clojure.core$load_lib.doInvoke(core.clj:5868)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>\n> at clojure.core$apply.invokeStatic(core.clj:659)\n>\n> at clojure.core$load_libs.invokeStatic(core.clj:5925)\n>\n> at clojure.core$load_libs.doInvoke(core.clj:5909)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>\n> at clojure.core$apply.invokeStatic(core.clj:659)\n>\n> at clojure.core$require.invokeStatic(core.clj:5947)\n>\n> at clojure.core$require.doInvoke(core.clj:5947)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>\n> at user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n>\n> at user$eval13.invokeStatic(user.clj:1)\n>\n> at user$eval13.invoke(user.clj:1)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7514)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:366)\n>\n> at clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n>\n> at clojure.lang.RT.doInit(RT.java:482)\n>\n> at clojure.lang.RT.<clinit>(RT.java:336)\n>\n> ... 1 more\n>\n> Caused by: java.lang.ClassNotFoundException: javax.xml.bind.\n> DatatypeConverter\n>\n> at java.base\/java.net.URLClassLoader.findClass(URLClassLoader.java:466)\n>\n> at clojure.lang.DynamicClassLoader.findClass(DynamicClassLoader.java:69)\n>\n> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n>\n> at clojure.lang.DynamicClassLoader.loadClass(DynamicClassLoader.java:77)\n>\n> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>\n> at java.base\/java.lang.Class.forName0(Native Method)\n>\n> at java.base\/java.lang.Class.forName(Class.java:375)\n>\n> at clojure.lang.RT.classForName(RT.java:2204)\n>\n> at clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n>\n> at org.httpkit.server$eval18583$loading__6434__auto____18584.\n> invoke(server.clj:1)\n>\n> at org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n>\n> at org.httpkit.server$eval18583.invoke(server.clj:1)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7062)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:7051)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7514)\n>\n> ... 146 more\n>\n> Johannes\n>\n>>\n>>\n>> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de> wrote:\n>>\n>>>\n>>>\n>>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>>\n>>>> That looks good.  Can you verify it matches what is in `project.clj`?\n>>>>\n>>> Yes, I think it does. That's the downloaded project.clj:\n>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>   :min-lein-version \"2.7.1\"\n>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>                  [tupelo \"0.9.76\"]\n>>>                 ]\n>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>>>             [lein-figwheel \"0.5.15\"]\n>>>             [lein-doo \"0.1.10\"]]\n>>>\n>>>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>>                          \"junitReporter\" {\"outputDir\"\n>>> \"target\/test-results\"}}}\n>>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n>>>   :source-paths [\"src\"]\n>>>   :cljsbuild {:builds\n>>>               [{:id           \"dev\"\n>>>                 :source-paths [\"src\"]\n>>>                 ;; The presence of a :figwheel configuration here will\n>>> cause figwheel to inject the\n>>>                 ;; figwheel client into your build\n>>>                 :figwheel     {:on-jsload \"flintstones.core\/on-js-reload\n>>> \"\n>>>                                ;; :open-urls will pop open your\n>>> application in the default browser once\n>>>                                ;; Figwheel has started and compiled your\n>>> application.  Comment this out\n>>>                                ;; once it no longer serves you.\n>>>                                :open-urls [\"http:\/\/localhost:3449\/index.\n>>> html\"]}\n>>>                 :compiler     {:main                 flintstones.core\n>>>                                :optimizations        :none\n>>>                                :libs\n>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>\n>>>                                :foreign-libs         [{:file\n>>> \"dino.js\"\n>>>                                                        :provides\n>>> [\"dinoPhony\"]}]\n>>>                                :externs              [\"dino-externs.js\"]\n>>>\n>>>                                :output-to\n>>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>                                :output-dir\n>>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>>                                :asset-path\n>>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of\n>>> `resources\/public`\n>>>                                                         ; ^^^ must match\n>>> :output-dir\n>>>                                :source-map-timestamp true\n>>>                                ;; To console.log CLJS data-structures\n>>> make sure you enable devtools in Chrome\n>>>                                ;; https:\/\/github.com\/binaryage\/c\n>>> ljs-devtools\n>>>                                :preloads             [devtools.preload]}}\n>>>\n>>>                {:id           \"test\"\n>>>                 :source-paths [\"src\" \"test\"]\n>>>                 :compiler     {:main\n>>> tst.flintstones.doorunner\n>>>                                :optimizations        :none ; :advanced\n>>>                                :libs\n>>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>>\n>>>                                :foreign-libs         [{:file\n>>> \"dino.js\"\n>>>                                                        :provides\n>>> [\"dinoPhony\"]}]\n>>>                                :externs              [\"dino-externs.js\"]\n>>>\n>>>                                :output-to\n>>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>>                                :output-dir\n>>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>>                                ;:asset-path\n>>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of `resources\/public`\n>>>\n>>>                                :source-map-timestamp true}}]}\n>>>\n>>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>>                                    [figwheel-sidecar \"0.5.15\"]\n>>>                                    [com.cemerick\/piggieback \"0.2.2\"]]\n>>>                    ;; need to add dev source path here to get user.clj\n>>> loaded\n>>>                    :source-paths  [\"src\" \"dev\"]\n>>>                    ;; for CIDER\n>>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>>                    :repl-options  {:nrepl-middleware\n>>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>>                    ;; need to add the compliled assets to the\n>>> :clean-targets\n>>>                    :clean-targets ^{:protect false}\n>>> [\"resources\/public\/js\/compiled\"\n>>>                                                      \"out\"\n>>>                                                      :target-path]}}\n>>>\n>>>   :jvm-opts [\"-Xmx1g\"])\n>>>\n>>>\n>>>\n>>>> Also, try `lein --version` or type `lein repl` to verify the same stuff\n>>>> is found.\n>>>>\n>>> JohMBAir:piggi johannes$ lein -version\n>>>\n>>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>>\n>>> JohMBAir:piggi johannes$ lein repl\n>>>\n>>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>>> 127.0.0.1:57650\n>>>\n>>> REPL-y 0.3.7, nREPL 0.2.13\n>>>\n>>> Clojure 1.9.0\n>>>\n>>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>>\n>>>     Docs: (doc function-name-here)\n>>>\n>>>           (find-doc \"part-of-name-here\")\n>>>\n>>>   Source: (source function-name-here)\n>>>\n>>>  Javadoc: (javadoc java-object-or-class-here)\n>>>\n>>>     Exit: Control+D or (exit) or (quit)\n>>>\n>>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>>\n>>>\n>>> user=>\n>>>\n>>> Johannes\n>>>\n>>>\n>>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de>\n>>>> wrote:\n>>>>\n>>>>> I am not sure if this is what you want to see:\n>>>>>\n>>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile\n>>>>> hello-world.core --repl\n>>>>>\n>>>>> ClojureScript 1.10.238\n>>>>>\n>>>>> cljs.user=> ^D\n>>>>>\n>>>>> JohMBAir:hello-world johannes$ clj\n>>>>>\n>>>>> Clojure 1.9.0\n>>>>>\n>>>>> user=> ^D\n>>>>>\n>>>>> JohMBAir:hello-world johannes$ java --version\n>>>>>\n>>>>> java 9.0.1\n>>>>>\n>>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>>\n>>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>>\n>>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>>\n>>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>>\n>>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de>\n>>>>>> wrote:\n>>>>>>\n>>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>>\n>>>>>>> lein figwheel\n>>>>>>>\n>>>>>>> I get the known error:\n>>>>>>>\n>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>\n>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>>>>\n>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from\n>>>>>>> clojars\n>>>>>>>\n>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from\n>>>>>>> clojars\n>>>>>>>\n>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n>>>>>>>\n>>>>>>> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom\n>>>>>>> from clojars\n>>>>>>>\n>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>>\n>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>>>> lpha4\/core.match-0.3.0-alpha4.pom from central\n>>>>>>>\n>>>>>>> Retrieving org\/clojure\/tools.analyzer.jvm\n>>>>>>> \/0.6.5\/tools.analyzer.jvm-0.6.5.pom from central\n>>>>>>>\n>>>>>>> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom\n>>>>>>> from central\n>>>>>>>\n>>>>>>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom\n>>>>>>> from central\n>>>>>>>\n>>>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>>>> \/0.1.4\/math.combinatorics-0.1.4.pom from central\n>>>>>>>\n>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>>>>>\n>>>>>>> Retrieving com\/fasterxml\/jackson\/core\/jac\n>>>>>>> kson-core\/2.9.0\/jackson-core-2.9.0.jar from central\n>>>>>>>\n>>>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>>>> at\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>> from central\n>>>>>>>\n>>>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>>>> at\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>> from central\n>>>>>>>\n>>>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>>>> \/0.1.4\/math.combinatorics-0.1.4.jar from central\n>>>>>>>\n>>>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>>>> lpha4\/core.match-0.3.0-alpha4.jar from central\n>>>>>>>\n>>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n>>>>>>>\n>>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from\n>>>>>>> clojars\n>>>>>>>\n>>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n>>>>>>>\n>>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from\n>>>>>>> clojars\n>>>>>>>\n>>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>>>>\n>>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>>\n>>>>>>> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar\n>>>>>>> from clojars\n>>>>>>>\n>>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>>>>>\n>>>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException:\n>>>>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.\n>>>>>>> clj:1:1)\n>>>>>>>\n>>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>>\n>>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>>\n>>>>>>> ...\n>>>>>>>\n>>>>>>>\n>>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>>>>>\n>>>>>>>> I am not including `--add-modules` in my template project\n>>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works great:\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>>                 ]\n>>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> ---------------------------\n>>>>>>>>\n>>>>>>>> ~\/expr\/cljs-template > lein figwheel\n>>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>>> Figwheel: Watching build - dev\n>>>>>>>> Compiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>> from [\"src\"]...\n>>>>>>>> Successfully compiled build :dev to \n>>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>>>> in 0.908 seconds.\n>>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>>> ...\n>>>>>>>>     Exit: :cljs\/quit\n>>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n>>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>>> ClojureScript 1.10.238\n>>>>>>>> dev:cljs.user!{:conn 2}=>\n>>>>>>>>\n>>>>>>>>\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de>\n>>>>>>>> wrote:\n>>>>>>>>\n>>>>>>>>> I've learned from several discussions (\n>>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that the\n>>>>>>>>> problem was ClojureScript 1.9 and that one should use the tag \n>>>>>>>>> :jvm-opts\n>>>>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript version \n>>>>>>>>> is out.\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>>>>>>>\n>>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>>\n>>>>>>>>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>>>>>>\n>>>>>>>>> --\n>>>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>>>> with your first post.\n>>>>>>>>> ---\n>>>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>>\n>>>>>>>>\n>>>>>>>> --\n>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>> with your first post.\n>>>>>>> ---\n>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>\n>>>>>>\n>>>>>> --\n>>>>> Note that posts from new members are moderated - please be patient\n>>>>> with your first post.\n>>>>> ---\n>>>>> You received this message because you are subscribed to the Google\n>>>>> Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>>> an email to clojurescrip...@googlegroups.com.\n>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>\n>>>>\n>>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Thu, 03 May 2018 15:09:02 -0700"},
{"body":"Thanks for the tip. Indeed, using the figwheel template, it works.\n I compared the project.clj files and I found a difference in dependencies: \nthe figwheel template one uses \n[com.cemerick\/piggieback \"0.2.2\"]\nand that works. I the cider manual \n[cider\/piggieback \"0.3.1\"]\nis recommended. This does not work. \nJohannes \n\nAm Donnerstag, 3. Mai 2018 14:24:38 UTC+2 schrieb Sonny To:\n>\n> I'm not sure but try starting with a working figwheel template then \n> compare it with yours to see whats missing\n>\n> On Tuesday, May 1, 2018 at 2:35:26 PM UTC+3, Johannes wrote:\n>>\n>> Hi,\n>>\n>> I am looking for a working configuration for Emacs\/Cider\/ClojureScript \n>> Repl. Following the instructions given in the Cider manual \n>> <http:\/\/cider.readthedocs.io\/en\/latest\/clojurescript\/> I built a \n>> project.clj:\n>>\n>> (defproject piggi \"0.1.0-SNAPSHOT\"\n>>   :description \"FIXME: write description\"\n>>   :url \"http:\/\/example.com\/FIXME\";\n>>   :license {:name \"Eclipse Public License\"\n>>             :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>                  [org.clojure\/clojurescript \"1.10.238\"]]  \n>>   :profiles\n>>   {:dev {:dependencies [[cider\/piggieback \"0.3.1\"]\n>>                         [org.clojure\/tools.nrepl \"0.2.13\"]]}         \n>>    :repl-options {:nrepl-middleware [cider.piggieback\/wrap-cljs-repl]}})\n>>\n>> But, if I issue cider-jack-in-clojurescript I get:\n>>\n>> Starting nREPL server via lein update-in :dependencies conj \n>> \\[org.clojure\/tools.nrepl\\ \\\"0.2.12\\\"\\] -- update-in :plugins conj \n>> \\[cider\/cider-nrepl\\ \\\"0.12.0-SNAPSHOT\\\"\\] -- repl :headless... \n>> <wheel-right> is undefined error in process sentinel: Could not start nREPL \n>> server: WARNING: boolean? already refers to: #\u2019clojure.core\/boolean? in \n>> namespace: cider.inlined-deps.fipp.v0v6v4.fipp.visit, being replaced by: \n>> #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading \n>> cider.nrepl.middleware.debug: java.lang.ClassNotFoundException: \n>> sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading \n>> cider.nrepl.middleware.test: java.lang.RuntimeException: Invalid token: \n>> ::clojure.test\/once-fixtures, \n>> compiling:(cider\/nrepl\/middleware\/test.clj:106:57) Exception in thread \n>> \"main\" java.lang.RuntimeException: Unable to resolve var: \n>> cider.nrepl.middleware.test\/wrap-test in this context, \n>> compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918)\n>>  \n>> at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n>> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n>> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n>> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n>> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n>> clojure.lang.Compiler.access$300(Compiler.java:38) at \n>> clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at \n>> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n>> clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at \n>> clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at \n>> clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at \n>> clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n>> clojure.lang.Compiler.eval(Compiler.java:7059) at \n>> clojure.lang.Compiler.eval(Compiler.java:7052) at \n>> clojure.lang.Compiler.load(Compiler.java:7514) at \n>> clojure.lang.Compiler.loadFile(Compiler.java:7452) at \n>> clojure.main$load_script.invokeStatic(main.clj:278) at \n>> clojure.main$init_opt.invokeStatic(main.clj:280) at \n>> clojure.main$init_opt.invoke(main.clj:280) at \n>> clojure.main$initialize.invokeStatic(main.clj:311) at \n>> clojure.main$null_opt.invokeStatic(main.clj:345) at \n>> clojure.main$null_opt.invoke(main.clj:342) at \n>> clojure.main$main.invokeStatic(main.clj:424) at \n>> clojure.main$main.doInvoke(main.clj:387) at \n>> clojure.lang.RestFn.applyTo(RestFn.java:137) at \n>> clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) \n>> Caused by: java.lang.RuntimeException: Unable to resolve var: \n>> cider.nrepl.middleware.test\/wrap-test in this context at \n>> clojure.lang.Util.runtimeException(Util.java:221) at \n>> clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at \n>> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess \n>> failed error in process sentinel: Could not start nREPL server: WARNING: \n>> boolean? already refers to: #\u2019clojure.core\/boolean? in namespace: \n>> cider.inlined-deps.fipp.v0v6v4.fipp.visit, being replaced by: \n>> #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading \n>> cider.nrepl.middleware.debug: java.lang.ClassNotFoundException: \n>> sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading \n>> cider.nrepl.middleware.test: java.lang.RuntimeException: Invalid token: \n>> ::clojure.test\/once-fixtures, \n>> compiling:(cider\/nrepl\/middleware\/test.clj:106:57) Exception in thread \n>> \"main\" java.lang.RuntimeException: Unable to resolve var: \n>> cider.nrepl.middleware.test\/wrap-test in this context, \n>> compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918)\n>>  \n>> at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n>> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n>> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n>> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n>> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n>> clojure.lang.Compiler.access$300(Compiler.java:38) at \n>> clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at \n>> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n>> clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at \n>> clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at \n>> clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at \n>> clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at \n>> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n>> clojure.lang.Compiler.eval(Compiler.java:7059) at \n>> clojure.lang.Compiler.eval(Compiler.java:7052) at \n>> clojure.lang.Compiler.load(Compiler.java:7514) at \n>> clojure.lang.Compiler.loadFile(Compiler.java:7452) at \n>> clojure.main$load_script.invokeStatic(main.clj:278) at \n>> clojure.main$init_opt.invokeStatic(main.clj:280) at \n>> clojure.main$init_opt.invoke(main.clj:280) at \n>> clojure.main$initialize.invokeStatic(main.clj:311) at \n>> clojure.main$null_opt.invokeStatic(main.clj:345) at \n>> clojure.main$null_opt.invoke(main.clj:342) at \n>> clojure.main$main.invokeStatic(main.clj:424) at \n>> clojure.main$main.doInvoke(main.clj:387) at \n>> clojure.lang.RestFn.applyTo(RestFn.java:137) at \n>> clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) \n>> Caused by: java.lang.RuntimeException: Unable to resolve var: \n>> cider.nrepl.middleware.test\/wrap-test in this context at \n>> clojure.lang.Util.runtimeException(Util.java:221) at \n>> clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at \n>> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess \n>> failed \n>>\n>> Any hints, what to do?\n>> Johannes\n>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: cider clojurescript repl Johannes Thu, 03 May 2018 13:59:55 -0700"},
{"body":"Am Donnerstag, 3. Mai 2018 22:51:33 UTC+2 schrieb Alan Thompson:\n>\n> And what happens if you type `lein figwheel` ?\n>\nThe same problem as before: \nJohMBAir:cljs-template-master johannes$ lein figwheel\n\nFigwheel: Cutting some fruit, just a sec ...\n\nException in thread \"main\" java.lang.ExceptionInInitializerError\n\nat clojure.main.<clinit>(main.java:20)\n\nCaused by: java.lang.ClassNotFoundException: \njavax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n\nat clojure.lang.Compiler.load(Compiler.java:7526)\n\nat clojure.lang.RT.loadResourceScript(RT.java:379)\n\nat clojure.lang.RT.loadResourceScript(RT.java:370)\n\nat clojure.lang.RT.load(RT.java:460)\n\nat clojure.lang.RT.load(RT.java:426)\n\nat clojure.core$load$fn__6548.invoke(core.clj:6046)\n\nat clojure.core$load.invokeStatic(core.clj:6045)\n\nat clojure.core$load.doInvoke(core.clj:6029)\n\nat clojure.lang.RestFn.invoke(RestFn.java:408)\n\nat clojure.core$load_one.invokeStatic(core.clj:5848)\n\nat clojure.core$load_one.invoke(core.clj:5843)\n\nat clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n\nat clojure.core$load_lib.invokeStatic(core.clj:5887)\n\nat clojure.core$load_lib.doInvoke(core.clj:5868)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:142)\n\nat clojure.core$apply.invokeStatic(core.clj:659)\n\nat clojure.core$load_libs.invokeStatic(core.clj:5925)\n\nat clojure.core$load_libs.doInvoke(core.clj:5909)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:137)\n\nat clojure.core$apply.invokeStatic(core.clj:659)\n\nat clojure.core$require.invokeStatic(core.clj:5947)\n\nat clojure.core$require.doInvoke(core.clj:5947)\n\nat clojure.lang.RestFn.invoke(RestFn.java:1789)\n\nat \nfigwheel_sidecar.components.figwheel_server$eval18306$loading__6434__auto____18307.invoke(figwheel_server.clj:1)\n\nat \nfigwheel_sidecar.components.figwheel_server$eval18306.invokeStatic(figwheel_server.clj:1)\n\nat \nfigwheel_sidecar.components.figwheel_server$eval18306.invoke(figwheel_server.clj:1)\n\nat clojure.lang.Compiler.eval(Compiler.java:7062)\n\nat clojure.lang.Compiler.eval(Compiler.java:7051)\n\nat clojure.lang.Compiler.load(Compiler.java:7514)\n\nat clojure.lang.RT.loadResourceScript(RT.java:379)\n\nat clojure.lang.RT.loadResourceScript(RT.java:370)\n\nat clojure.lang.RT.load(RT.java:460)\n\nat clojure.lang.RT.load(RT.java:426)\n\nat clojure.core$load$fn__6548.invoke(core.clj:6046)\n\nat clojure.core$load.invokeStatic(core.clj:6045)\n\nat clojure.core$load.doInvoke(core.clj:6029)\n\nat clojure.lang.RestFn.invoke(RestFn.java:408)\n\nat clojure.core$load_one.invokeStatic(core.clj:5848)\n\nat clojure.core$load_one.invoke(core.clj:5843)\n\nat clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n\nat clojure.core$load_lib.invokeStatic(core.clj:5887)\n\nat clojure.core$load_lib.doInvoke(core.clj:5868)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:142)\n\nat clojure.core$apply.invokeStatic(core.clj:659)\n\nat clojure.core$load_libs.invokeStatic(core.clj:5925)\n\nat clojure.core$load_libs.doInvoke(core.clj:5909)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:137)\n\nat clojure.core$apply.invokeStatic(core.clj:659)\n\nat clojure.core$require.invokeStatic(core.clj:5947)\n\nat clojure.core$require.doInvoke(core.clj:5947)\n\nat clojure.lang.RestFn.invoke(RestFn.java:1789)\n\nat \nfigwheel_sidecar.repl$eval9100$loading__6434__auto____9101.invoke(repl.clj:1)\n\nat figwheel_sidecar.repl$eval9100.invokeStatic(repl.clj:1)\n\nat figwheel_sidecar.repl$eval9100.invoke(repl.clj:1)\n\nat clojure.lang.Compiler.eval(Compiler.java:7062)\n\nat clojure.lang.Compiler.eval(Compiler.java:7051)\n\nat clojure.lang.Compiler.load(Compiler.java:7514)\n\nat clojure.lang.RT.loadResourceScript(RT.java:379)\n\nat clojure.lang.RT.loadResourceScript(RT.java:370)\n\nat clojure.lang.RT.load(RT.java:460)\n\nat clojure.lang.RT.load(RT.java:426)\n\nat clojure.core$load$fn__6548.invoke(core.clj:6046)\n\nat clojure.core$load.invokeStatic(core.clj:6045)\n\nat clojure.core$load.doInvoke(core.clj:6029)\n\nat clojure.lang.RestFn.invoke(RestFn.java:408)\n\nat clojure.core$load_one.invokeStatic(core.clj:5848)\n\nat clojure.core$load_one.invoke(core.clj:5843)\n\nat clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n\nat clojure.core$load_lib.invokeStatic(core.clj:5887)\n\nat clojure.core$load_lib.doInvoke(core.clj:5868)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:142)\n\nat clojure.core$apply.invokeStatic(core.clj:659)\n\nat clojure.core$load_libs.invokeStatic(core.clj:5925)\n\nat clojure.core$load_libs.doInvoke(core.clj:5909)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:137)\n\nat clojure.core$apply.invokeStatic(core.clj:659)\n\nat clojure.core$require.invokeStatic(core.clj:5947)\n\nat clojure.core$require.doInvoke(core.clj:5947)\n\nat clojure.lang.RestFn.invoke(RestFn.java:1789)\n\nat \nfigwheel_sidecar.system$eval9094$loading__6434__auto____9095.invoke(system.clj:1)\n\nat figwheel_sidecar.system$eval9094.invokeStatic(system.clj:1)\n\nat figwheel_sidecar.system$eval9094.invoke(system.clj:1)\n\nat clojure.lang.Compiler.eval(Compiler.java:7062)\n\nat clojure.lang.Compiler.eval(Compiler.java:7051)\n\nat clojure.lang.Compiler.load(Compiler.java:7514)\n\nat clojure.lang.RT.loadResourceScript(RT.java:379)\n\nat clojure.lang.RT.loadResourceScript(RT.java:370)\n\nat clojure.lang.RT.load(RT.java:460)\n\nat clojure.lang.RT.load(RT.java:426)\n\nat clojure.core$load$fn__6548.invoke(core.clj:6046)\n\nat clojure.core$load.invokeStatic(core.clj:6045)\n\nat clojure.core$load.doInvoke(core.clj:6029)\n\nat clojure.lang.RestFn.invoke(RestFn.java:408)\n\nat clojure.core$load_one.invokeStatic(core.clj:5848)\n\nat clojure.core$load_one.invoke(core.clj:5843)\n\nat clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n\nat clojure.core$load_lib.invokeStatic(core.clj:5887)\n\nat clojure.core$load_lib.doInvoke(core.clj:5868)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:142)\n\nat clojure.core$apply.invokeStatic(core.clj:659)\n\nat clojure.core$load_libs.invokeStatic(core.clj:5925)\n\nat clojure.core$load_libs.doInvoke(core.clj:5909)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:137)\n\nat clojure.core$apply.invokeStatic(core.clj:659)\n\nat clojure.core$require.invokeStatic(core.clj:5947)\n\nat clojure.core$require.doInvoke(core.clj:5947)\n\nat clojure.lang.RestFn.invoke(RestFn.java:930)\n\nat \nfigwheel_sidecar.repl_api$eval19$loading__6434__auto____20.invoke(repl_api.clj:1)\n\nat figwheel_sidecar.repl_api$eval19.invokeStatic(repl_api.clj:1)\n\nat figwheel_sidecar.repl_api$eval19.invoke(repl_api.clj:1)\n\nat clojure.lang.Compiler.eval(Compiler.java:7062)\n\nat clojure.lang.Compiler.eval(Compiler.java:7051)\n\nat clojure.lang.Compiler.load(Compiler.java:7514)\n\nat clojure.lang.RT.loadResourceScript(RT.java:379)\n\nat clojure.lang.RT.loadResourceScript(RT.java:370)\n\nat clojure.lang.RT.load(RT.java:460)\n\nat clojure.lang.RT.load(RT.java:426)\n\nat clojure.core$load$fn__6548.invoke(core.clj:6046)\n\nat clojure.core$load.invokeStatic(core.clj:6045)\n\nat clojure.core$load.doInvoke(core.clj:6029)\n\nat clojure.lang.RestFn.invoke(RestFn.java:408)\n\nat clojure.core$load_one.invokeStatic(core.clj:5848)\n\nat clojure.core$load_one.invoke(core.clj:5843)\n\nat clojure.core$load_lib$fn__6493.invoke(core.clj:5888)\n\nat clojure.core$load_lib.invokeStatic(core.clj:5887)\n\nat clojure.core$load_lib.doInvoke(core.clj:5868)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:142)\n\nat clojure.core$apply.invokeStatic(core.clj:659)\n\nat clojure.core$load_libs.invokeStatic(core.clj:5925)\n\nat clojure.core$load_libs.doInvoke(core.clj:5909)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:137)\n\nat clojure.core$apply.invokeStatic(core.clj:659)\n\nat clojure.core$require.invokeStatic(core.clj:5947)\n\nat clojure.core$require.doInvoke(core.clj:5947)\n\nat clojure.lang.RestFn.invoke(RestFn.java:408)\n\nat user$eval13$loading__6434__auto____14.invoke(user.clj:1)\n\nat user$eval13.invokeStatic(user.clj:1)\n\nat user$eval13.invoke(user.clj:1)\n\nat clojure.lang.Compiler.eval(Compiler.java:7062)\n\nat clojure.lang.Compiler.eval(Compiler.java:7051)\n\nat clojure.lang.Compiler.load(Compiler.java:7514)\n\nat clojure.lang.RT.loadResourceScript(RT.java:379)\n\nat clojure.lang.RT.loadResourceScript(RT.java:366)\n\nat clojure.lang.RT.maybeLoadResourceScript(RT.java:362)\n\nat clojure.lang.RT.doInit(RT.java:482)\n\nat clojure.lang.RT.<clinit>(RT.java:336)\n\n... 1 more\n\nCaused by: java.lang.ClassNotFoundException: \njavax.xml.bind.DatatypeConverter\n\nat java.base\/java.net.URLClassLoader.findClass(URLClassLoader.java:466)\n\nat clojure.lang.DynamicClassLoader.findClass(DynamicClassLoader.java:69)\n\nat java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:563)\n\nat clojure.lang.DynamicClassLoader.loadClass(DynamicClassLoader.java:77)\n\nat java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n\nat java.base\/java.lang.Class.forName0(Native Method)\n\nat java.base\/java.lang.Class.forName(Class.java:375)\n\nat clojure.lang.RT.classForName(RT.java:2204)\n\nat clojure.lang.RT.classForNameNonLoading(RT.java:2217)\n\nat \norg.httpkit.server$eval18583$loading__6434__auto____18584.invoke(server.clj:1)\n\nat org.httpkit.server$eval18583.invokeStatic(server.clj:1)\n\nat org.httpkit.server$eval18583.invoke(server.clj:1)\n\nat clojure.lang.Compiler.eval(Compiler.java:7062)\n\nat clojure.lang.Compiler.eval(Compiler.java:7051)\n\nat clojure.lang.Compiler.load(Compiler.java:7514)\n\n... 146 more\n\nJohannes \n\n>\n>\n> On Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de \n> <javascript:>> wrote:\n>\n>>\n>>\n>> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>>\n>>> That looks good.  Can you verify it matches what is in `project.clj`?  \n>>>\n>> Yes, I think it does. That's the downloaded project.clj:\n>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>   :min-lein-version \"2.7.1\"\n>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>                  [org.clojure\/core.async \"0.4.474\"]\n>>                  [tupelo \"0.9.76\"]\n>>                 ]\n>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>>             [lein-figwheel \"0.5.15\"]\n>>             [lein-doo \"0.1.10\"]]\n>>\n>>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>>                          \"reporters\"     [\"progress\" \"junit\"]\n>>                          \"junitReporter\" {\"outputDir\" \n>> \"target\/test-results\"}}}\n>>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n>>   :source-paths [\"src\"]\n>>   :cljsbuild {:builds\n>>               [{:id           \"dev\"\n>>                 :source-paths [\"src\"]\n>>                 ;; The presence of a :figwheel configuration here will \n>> cause figwheel to inject the\n>>                 ;; figwheel client into your build\n>>                 :figwheel     {:on-jsload \"flintstones.core\/on-js-reload\"\n>>                                ;; :open-urls will pop open your \n>> application in the default browser once\n>>                                ;; Figwheel has started and compiled your \n>> application.  Comment this out\n>>                                ;; once it no longer serves you.\n>>                                :open-urls [\"\n>> http:\/\/localhost:3449\/index.html\"]}\n>>                 :compiler     {:main                 flintstones.core\n>>                                :optimizations        :none\n>>                                :libs                 \n>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>\n>>                                :foreign-libs         [{:file     \"dino.js\"\n>>                                                        :provides \n>> [\"dinoPhony\"]}]\n>>                                :externs              [\"dino-externs.js\"]\n>>\n>>                                :output-to           \n>>  \"resources\/public\/js\/compiled\/flintstones.js\"\n>>                                :output-dir           \n>> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>>                                :asset-path           \n>> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of \n>> `resources\/public`\n>>                                                         ; ^^^ must match \n>> :output-dir\n>>                                :source-map-timestamp true\n>>                                ;; To console.log CLJS data-structures \n>> make sure you enable devtools in Chrome\n>>                                ;; \n>> https:\/\/github.com\/binaryage\/cljs-devtools\n>>                                :preloads             [devtools.preload]}}\n>>\n>>                {:id           \"test\"\n>>                 :source-paths [\"src\" \"test\"]\n>>                 :compiler     {:main                 \n>> tst.flintstones.doorunner\n>>                                :optimizations        :none ; :advanced\n>>                                :libs                 \n>> [\"resources\/public\/libs\"] ; recursive includes all children\n>>\n>>                                :foreign-libs         [{:file     \"dino.js\"\n>>                                                        :provides \n>> [\"dinoPhony\"]}]\n>>                                :externs              [\"dino-externs.js\"]\n>>\n>>                                :output-to           \n>>  \"resources\/public\/js\/compiled\/bedrock.js\"\n>>                                :output-dir           \n>> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>>                                ;:asset-path           \n>> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of `resources\/public`\n>>\n>>                                :source-map-timestamp true}}]}\n>>\n>>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>>                                    [figwheel-sidecar \"0.5.15\"]\n>>                                    [com.cemerick\/piggieback \"0.2.2\"]]\n>>                    ;; need to add dev source path here to get user.clj \n>> loaded\n>>                    :source-paths  [\"src\" \"dev\"]\n>>                    ;; for CIDER\n>>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>>                    :repl-options  {:nrepl-middleware \n>> [cemerick.piggieback\/wrap-cljs-repl]}\n>>                    ;; need to add the compliled assets to the \n>> :clean-targets\n>>                    :clean-targets ^{:protect false} \n>> [\"resources\/public\/js\/compiled\"\n>>                                                      \"out\"\n>>                                                      :target-path]}}\n>>\n>>   :jvm-opts [\"-Xmx1g\"])\n>>\n>>  \n>>\n>>> Also, try `lein --version` or type `lein repl` to verify the same stuff \n>>> is found.\n>>>\n>> JohMBAir:piggi johannes$ lein -version\n>>\n>> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>\n>> JohMBAir:piggi johannes$ lein repl\n>>\n>> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n>> 127.0.0.1:57650\n>>\n>> REPL-y 0.3.7, nREPL 0.2.13\n>>\n>> Clojure 1.9.0\n>>\n>> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>>\n>>     Docs: (doc function-name-here)\n>>\n>>           (find-doc \"part-of-name-here\")\n>>\n>>   Source: (source function-name-here)\n>>\n>>  Javadoc: (javadoc java-object-or-class-here)\n>>\n>>     Exit: Control+D or (exit) or (quit)\n>>\n>>  Results: Stored in vars *1, *2, *3, an exception in *e\n>>\n>>\n>> user=> \n>>  \n>> Johannes\n>>\n>>\n>>> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de> wrote:\n>>>\n>>>> I am not sure if this is what you want to see:\n>>>>\n>>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile \n>>>> hello-world.core --repl\n>>>>\n>>>> ClojureScript 1.10.238\n>>>>\n>>>> cljs.user=> ^D\n>>>>\n>>>> JohMBAir:hello-world johannes$ clj\n>>>>\n>>>> Clojure 1.9.0\n>>>>\n>>>> user=> ^D\n>>>>\n>>>> JohMBAir:hello-world johannes$ java --version\n>>>>\n>>>> java 9.0.1\n>>>>\n>>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>>\n>>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>>\n>>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>>\n>>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>>\n>>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de> \n>>>>> wrote:\n>>>>>\n>>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>>\n>>>>>> lein figwheel\n>>>>>>\n>>>>>> I get the known error:\n>>>>>>\n>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>\n>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>>>\n>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from \n>>>>>> clojars\n>>>>>>\n>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from clojars\n>>>>>>\n>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n>>>>>>\n>>>>>> Retrieving \n>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom from clojars\n>>>>>>\n>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>>\n>>>>>> Retrieving \n>>>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom from \n>>>>>> central\n>>>>>>\n>>>>>> Retrieving \n>>>>>> org\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom from \n>>>>>> central\n>>>>>>\n>>>>>> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom \n>>>>>> from central\n>>>>>>\n>>>>>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom \n>>>>>> from central\n>>>>>>\n>>>>>> Retrieving \n>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom from \n>>>>>> central\n>>>>>>\n>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>>>>\n>>>>>> Retrieving \n>>>>>> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar \n>>>>>> from \n>>>>>> central\n>>>>>>\n>>>>>> Retrieving \n>>>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>>>  \n>>>>>> from central\n>>>>>>\n>>>>>> Retrieving \n>>>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>>>  \n>>>>>> from central\n>>>>>>\n>>>>>> Retrieving \n>>>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar from \n>>>>>> central\n>>>>>>\n>>>>>> Retrieving \n>>>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar from \n>>>>>> central\n>>>>>>\n>>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n>>>>>>\n>>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from \n>>>>>> clojars\n>>>>>>\n>>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n>>>>>>\n>>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from clojars\n>>>>>>\n>>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>>>\n>>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>>\n>>>>>> Retrieving \n>>>>>> primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar from clojars\n>>>>>>\n>>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>>>>\n>>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException: \n>>>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n>>>>>>\n>>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>>\n>>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>>\n>>>>>> ...\n>>>>>>\n>>>>>>\n>>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>>>>\n>>>>>>> I am not including `--add-modules` in my template project \n>>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works great:\n>>>>>>>\n>>>>>>>\n>>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>>                 ]\n>>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions \n>>>>>>> [[org.clojure\/clojure]]]\n>>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>>\n>>>>>>>\n>>>>>>> ---------------------------\n>>>>>>>\n>>>>>>> ~\/expr\/cljs-template > lein figwheel            \n>>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>>> Figwheel: Configuration Valid ;)\n>>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>>> Figwheel: Watching build - dev\n>>>>>>> Compiling build :dev to \n>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" from [\"src\"]...\n>>>>>>> Successfully compiled build :dev to \n>>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 seconds.\n>>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>>> ...\n>>>>>>>     Exit: :cljs\/quit\n>>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n>>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>>> ClojureScript 1.10.238\n>>>>>>> dev:cljs.user!{:conn 2}=> \n>>>>>>>\n>>>>>>>\n>>>>>>>\n>>>>>>>\n>>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de> \n>>>>>>> wrote:\n>>>>>>>\n>>>>>>>> I've learned from several discussions (\n>>>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that the \n>>>>>>>> problem was ClojureScript 1.9 and that one should use the tag \n>>>>>>>> :jvm-opts \n>>>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript version is \n>>>>>>>> out.\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>>>>>>\n>>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>>\n>>>>>>>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>>>>>\n>>>>>>>> -- \n>>>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>>>> with your first post.\n>>>>>>>> --- \n>>>>>>>> You received this message because you are subscribed to the Google \n>>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>>\n>>>>>>>\n>>>>>>> -- \n>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>> with your first post.\n>>>>>> --- \n>>>>>> You received this message because you are subscribed to the Google \n>>>>>> Groups \"ClojureScript\" group.\n>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>\n>>>>>\n>>>>> -- \n>>>> Note that posts from new members are moderated - please be patient with \n>>>> your first post.\n>>>> --- \n>>>> You received this message because you are subscribed to the Google \n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send \n>>>> an email to clojurescrip...@googlegroups.com.\n>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>\n>>>\n>>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Johannes Thu, 03 May 2018 13:57:07 -0700"},
{"body":"And what happens if you type `lein figwheel` ?\n \nOn Thu, May 3, 2018 at 1:42 PM, Johannes <bra...@nordakademie.de> wrote:\n\n>\n>\n> Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>>\n>> That looks good.  Can you verify it matches what is in `project.clj`?\n>>\n> Yes, I think it does. That's the downloaded project.clj:\n> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>   :min-lein-version \"2.7.1\"\n>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>                  [org.clojure\/clojurescript \"1.10.238\"]\n>                  [org.clojure\/core.async \"0.4.474\"]\n>                  [tupelo \"0.9.76\"]\n>                 ]\n>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>             [lein-figwheel \"0.5.15\"]\n>             [lein-doo \"0.1.10\"]]\n>\n>   :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n>                          \"reporters\"     [\"progress\" \"junit\"]\n>                          \"junitReporter\" {\"outputDir\"\n> \"target\/test-results\"}}}\n>         :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n>                 :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n>   :source-paths [\"src\"]\n>   :cljsbuild {:builds\n>               [{:id           \"dev\"\n>                 :source-paths [\"src\"]\n>                 ;; The presence of a :figwheel configuration here will\n> cause figwheel to inject the\n>                 ;; figwheel client into your build\n>                 :figwheel     {:on-jsload \"flintstones.core\/on-js-reload\"\n>                                ;; :open-urls will pop open your\n> application in the default browser once\n>                                ;; Figwheel has started and compiled your\n> application.  Comment this out\n>                                ;; once it no longer serves you.\n>                                :open-urls [\"http:\/\/localhost:3449\/index.\n> html\"]}\n>                 :compiler     {:main                 flintstones.core\n>                                :optimizations        :none\n>                                :libs\n> [\"resources\/public\/libs\"] ; recursive includes all children\n>\n>                                :foreign-libs         [{:file     \"dino.js\"\n>                                                        :provides\n> [\"dinoPhony\"]}]\n>                                :externs              [\"dino-externs.js\"]\n>\n>                                :output-to            \"resources\/public\/js\/\n> compiled\/flintstones.js\"\n>                                :output-dir\n> \"resources\/public\/js\/compiled\/flintstones-dev\"\n>                                :asset-path\n> \"js\/compiled\/flintstones-dev\" ; rel to figwheel default of\n> `resources\/public`\n>                                                         ; ^^^ must match\n> :output-dir\n>                                :source-map-timestamp true\n>                                ;; To console.log CLJS data-structures make\n> sure you enable devtools in Chrome\n>                                ;; https:\/\/github.com\/binaryage\/\n> cljs-devtools\n>                                :preloads             [devtools.preload]}}\n>\n>                {:id           \"test\"\n>                 :source-paths [\"src\" \"test\"]\n>                 :compiler     {:main\n> tst.flintstones.doorunner\n>                                :optimizations        :none ; :advanced\n>                                :libs\n> [\"resources\/public\/libs\"] ; recursive includes all children\n>\n>                                :foreign-libs         [{:file     \"dino.js\"\n>                                                        :provides\n> [\"dinoPhony\"]}]\n>                                :externs              [\"dino-externs.js\"]\n>\n>                                :output-to            \"resources\/public\/js\/\n> compiled\/bedrock.js\"\n>                                :output-dir\n> \"resources\/public\/js\/compiled\/bedrock-tst\"\n>                                ;:asset-path\n> \"js\/compiled\/bedrock-tst\" ; rel to figwheel default of `resources\/public`\n>\n>                                :source-map-timestamp true}}]}\n>\n>   :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n>                                    [figwheel-sidecar \"0.5.15\"]\n>                                    [com.cemerick\/piggieback \"0.2.2\"]]\n>                    ;; need to add dev source path here to get user.clj\n> loaded\n>                    :source-paths  [\"src\" \"dev\"]\n>                    ;; for CIDER\n>                    ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n>                    :repl-options  {:nrepl-middleware\n> [cemerick.piggieback\/wrap-cljs-repl]}\n>                    ;; need to add the compliled assets to the\n> :clean-targets\n>                    :clean-targets ^{:protect false} [\"resources\/public\/js\/\n> compiled\"\n>                                                      \"out\"\n>                                                      :target-path]}}\n>\n>   :jvm-opts [\"-Xmx1g\"])\n>\n>\n>\n>> Also, try `lein --version` or type `lein repl` to verify the same stuff\n>> is found.\n>>\n> JohMBAir:piggi johannes$ lein -version\n>\n> Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>\n> JohMBAir:piggi johannes$ lein repl\n>\n> nREPL server started on port 57650 on host 127.0.0.1 - nrepl:\/\/\n> 127.0.0.1:57650\n>\n> REPL-y 0.3.7, nREPL 0.2.13\n>\n> Clojure 1.9.0\n>\n> Java HotSpot(TM) 64-Bit Server VM 9.0.1+11\n>\n>     Docs: (doc function-name-here)\n>\n>           (find-doc \"part-of-name-here\")\n>\n>   Source: (source function-name-here)\n>\n>  Javadoc: (javadoc java-object-or-class-here)\n>\n>     Exit: Control+D or (exit) or (quit)\n>\n>  Results: Stored in vars *1, *2, *3, an exception in *e\n>\n>\n> user=>\n>\n> Johannes\n>\n>\n>> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de> wrote:\n>>\n>>> I am not sure if this is what you want to see:\n>>>\n>>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile\n>>> hello-world.core --repl\n>>>\n>>> ClojureScript 1.10.238\n>>>\n>>> cljs.user=> ^D\n>>>\n>>> JohMBAir:hello-world johannes$ clj\n>>>\n>>> Clojure 1.9.0\n>>>\n>>> user=> ^D\n>>>\n>>> JohMBAir:hello-world johannes$ java --version\n>>>\n>>> java 9.0.1\n>>>\n>>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>>\n>>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>>\n>>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>>\n>>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>>\n>>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de>\n>>>> wrote:\n>>>>\n>>>>> Hm, I downloaded your profile.clj, and with\n>>>>>\n>>>>> lein figwheel\n>>>>>\n>>>>> I get the known error:\n>>>>>\n>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>\n>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>>\n>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from\n>>>>> clojars\n>>>>>\n>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from clojars\n>>>>>\n>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n>>>>>\n>>>>> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom\n>>>>> from clojars\n>>>>>\n>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>>\n>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>> lpha4\/core.match-0.3.0-alpha4.pom from central\n>>>>>\n>>>>> Retrieving org\/clojure\/tools.analyzer.jvm\n>>>>> \/0.6.5\/tools.analyzer.jvm-0.6.5.pom from central\n>>>>>\n>>>>> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom\n>>>>> from central\n>>>>>\n>>>>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom\n>>>>> from central\n>>>>>\n>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>> \/0.1.4\/math.combinatorics-0.1.4.pom from central\n>>>>>\n>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>>>\n>>>>> Retrieving \n>>>>> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar\n>>>>> from central\n>>>>>\n>>>>> Retrieving com\/fasterxml\/jackson\/dataform\n>>>>> at\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>> from central\n>>>>>\n>>>>> Retrieving com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-cbor\/2.\n>>>>> 9.0\/jackson-dataformat-cbor-2.9.0.jar from central\n>>>>>\n>>>>> Retrieving org\/clojure\/math.combinatorics\n>>>>> \/0.1.4\/math.combinatorics-0.1.4.jar from central\n>>>>>\n>>>>> Retrieving org\/clojure\/core.match\/0.3.0-a\n>>>>> lpha4\/core.match-0.3.0-alpha4.jar from central\n>>>>>\n>>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n>>>>>\n>>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from\n>>>>> clojars\n>>>>>\n>>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n>>>>>\n>>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from clojars\n>>>>>\n>>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>>\n>>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>>\n>>>>> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar\n>>>>> from clojars\n>>>>>\n>>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>>>\n>>>>> Exception in thread \"main\" java.lang.ClassNotFoundException:\n>>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.\n>>>>> clj:1:1)\n>>>>>\n>>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>>\n>>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>>\n>>>>> ...\n>>>>>\n>>>>>\n>>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>>>\n>>>>>> I am not including `--add-modules` in my template project\n>>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works great:\n>>>>>>\n>>>>>>\n>>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>>   :min-lein-version \"2.7.1\"\n>>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>>                  [tupelo \"0.9.76\"]\n>>>>>>                 ]\n>>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>>>> [[org.clojure\/clojure]]]\n>>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>>\n>>>>>>\n>>>>>> ---------------------------\n>>>>>>\n>>>>>> ~\/expr\/cljs-template > lein figwheel\n>>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>>> Figwheel: Configuration Valid ;)\n>>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>>> Figwheel: Watching build - dev\n>>>>>> Compiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>> from [\"src\"]...\n>>>>>> Successfully compiled build :dev to \n>>>>>> \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>>>> in 0.908 seconds.\n>>>>>> Launching ClojureScript REPL for build: dev\n>>>>>> ...\n>>>>>>     Exit: :cljs\/quit\n>>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n>>>>>> Prompt will show when Figwheel connects to your application\n>>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>>> ClojureScript 1.10.238\n>>>>>> dev:cljs.user!{:conn 2}=>\n>>>>>>\n>>>>>>\n>>>>>>\n>>>>>>\n>>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de>\n>>>>>> wrote:\n>>>>>>\n>>>>>>> I've learned from several discussions (https:\/\/github.com\/bhauman\/le\n>>>>>>> in-figwheel\/issues\/612) that the problem was ClojureScript 1.9 and\n>>>>>>> that one should use the tag :jvm-opts [\"--add-modules\" \"java.xml.bind\"]\n>>>>>>> until a new ClojureScript version is out.\n>>>>>>>\n>>>>>>>\n>>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>>>>>\n>>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>>\n>>>>>>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>>>>\n>>>>>>> --\n>>>>>>> Note that posts from new members are moderated - please be patient\n>>>>>>> with your first post.\n>>>>>>> ---\n>>>>>>> You received this message because you are subscribed to the Google\n>>>>>>> Groups \"ClojureScript\" group.\n>>>>>>> To unsubscribe from this group and stop receiving emails from it,\n>>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>>\n>>>>>>\n>>>>>> --\n>>>>> Note that posts from new members are moderated - please be patient\n>>>>> with your first post.\n>>>>> ---\n>>>>> You received this message because you are subscribed to the Google\n>>>>> Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>>> an email to clojurescrip...@googlegroups.com.\n>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>\n>>>>\n>>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Thu, 03 May 2018 13:52:13 -0700"},
{"body":"Am Donnerstag, 3. Mai 2018 22:28:29 UTC+2 schrieb Alan Thompson:\n>\n> That looks good.  Can you verify it matches what is in `project.clj`?  \n>\nYes, I think it does. That's the downloaded project.clj:\n(defproject flintstones \"0.1.0-SNAPSHOT\"\n  :min-lein-version \"2.7.1\"\n  :dependencies [[org.clojure\/clojure \"1.9.0\"]\n                 [org.clojure\/clojurescript \"1.10.238\"]\n                 [org.clojure\/core.async \"0.4.474\"]\n                 [tupelo \"0.9.76\"]\n                ]\n  :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n            [lein-figwheel \"0.5.15\"]\n            [lein-doo \"0.1.10\"]] \n  :doo {:karma {:config {\"plugins\"       [\"karma-junit-reporter\"]\n                         \"reporters\"     [\"progress\" \"junit\"]\n                         \"junitReporter\" {\"outputDir\" \n\"target\/test-results\"}}}\n        :paths {:karma   \"node_modules\/karma\/bin\/karma\"\n                :phantom \"node_modules\/phantomjs\/bin\/phantomjs\" }}\n  :source-paths [\"src\"]\n  :cljsbuild {:builds\n              [{:id           \"dev\"\n                :source-paths [\"src\"]\n                ;; The presence of a :figwheel configuration here will \ncause figwheel to inject the\n                ;; figwheel client into your build\n                :figwheel     {:on-jsload \"flintstones.core\/on-js-reload\"\n                               ;; :open-urls will pop open your application \nin the default browser once\n                               ;; Figwheel has started and compiled your \napplication.  Comment this out\n                               ;; once it no longer serves you.\n                               :open-urls \n[\"http:\/\/localhost:3449\/index.html\"]}\n                :compiler     {:main                 flintstones.core\n                               :optimizations        :none\n                               :libs                 \n[\"resources\/public\/libs\"] ; recursive includes all children\n\n                               :foreign-libs         [{:file     \"dino.js\"\n                                                       :provides \n[\"dinoPhony\"]}]\n                               :externs              [\"dino-externs.js\"]\n\n                               :output-to           \n \"resources\/public\/js\/compiled\/flintstones.js\"\n                               :output-dir           \n\"resources\/public\/js\/compiled\/flintstones-dev\"\n                               :asset-path           \n\"js\/compiled\/flintstones-dev\" ; rel to figwheel default of \n`resources\/public`\n                                                        ; ^^^ must match \n:output-dir\n                               :source-map-timestamp true\n                               ;; To console.log CLJS data-structures make \nsure you enable devtools in Chrome\n                               ;; https:\/\/github.com\/binaryage\/cljs-devtools\n                               :preloads             [devtools.preload]}}\n\n               {:id           \"test\"\n                :source-paths [\"src\" \"test\"]\n                :compiler     {:main                 \ntst.flintstones.doorunner\n                               :optimizations        :none ; :advanced\n                               :libs                 \n[\"resources\/public\/libs\"] ; recursive includes all children\n\n                               :foreign-libs         [{:file     \"dino.js\"\n                                                       :provides \n[\"dinoPhony\"]}]\n                               :externs              [\"dino-externs.js\"]\n\n                               :output-to           \n \"resources\/public\/js\/compiled\/bedrock.js\"\n                               :output-dir           \n\"resources\/public\/js\/compiled\/bedrock-tst\"\n                               ;:asset-path           \n\"js\/compiled\/bedrock-tst\" ; rel to figwheel default of `resources\/public`\n\n                               :source-map-timestamp true}}]}\n\n  :profiles {:dev {:dependencies  [[binaryage\/devtools \"0.9.9\"]\n                                   [figwheel-sidecar \"0.5.15\"]\n                                   [com.cemerick\/piggieback \"0.2.2\"]]\n                   ;; need to add dev source path here to get user.clj \nloaded\n                   :source-paths  [\"src\" \"dev\"]\n                   ;; for CIDER\n                   ;; :plugins [[cider\/cider-nrepl \"0.12.0\"]]\n                   :repl-options  {:nrepl-middleware \n[cemerick.piggieback\/wrap-cljs-repl]}\n                   ;; need to add the compliled assets to the :clean-targets\n                   :clean-targets ^{:protect false} \n[\"resources\/public\/js\/compiled\"\n                                                     \"out\"\n                                                     :target-path]}}\n\n  :jvm-opts [\"-Xmx1g\"])\n\n \n\n> Also, try `lein --version` or type `lein repl` to verify the same stuff is \n> found.\n>\nJohMBAir:piggi johannes$ lein -version\n\nLeiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n\nJohMBAir:piggi johannes$ lein repl\n\nnREPL server started on port 57650 on host 127.0.0.1 - \nnrepl:\/\/127.0.0.1:57650\n\nREPL-y 0.3.7, nREPL 0.2.13\n\nClojure 1.9.0\n\nJava HotSpot(TM) 64-Bit Server VM 9.0.1+11\n\n    Docs: (doc function-name-here)\n\n          (find-doc \"part-of-name-here\")\n\n  Source: (source function-name-here)\n\n Javadoc: (javadoc java-object-or-class-here)\n\n    Exit: Control+D or (exit) or (quit)\n\n Results: Stored in vars *1, *2, *3, an exception in *e\n\n\nuser=> \n \nJohannes\n\n\n> On Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de \n> <javascript:>> wrote:\n>\n>> I am not sure if this is what you want to see:\n>>\n>> JohMBAir:hello-world johannes$ clj --main cljs.main --compile \n>> hello-world.core --repl\n>>\n>> ClojureScript 1.10.238\n>>\n>> cljs.user=> ^D\n>>\n>> JohMBAir:hello-world johannes$ clj\n>>\n>> Clojure 1.9.0\n>>\n>> user=> ^D\n>>\n>> JohMBAir:hello-world johannes$ java --version\n>>\n>> java 9.0.1\n>>\n>> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>>\n>> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>>\n>> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>>\n>>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>>\n>>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de> \n>>> wrote:\n>>>\n>>>> Hm, I downloaded your profile.clj, and with\n>>>>\n>>>> lein figwheel\n>>>>\n>>>> I get the known error:\n>>>>\n>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>\n>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>>\n>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from \n>>>> clojars\n>>>>\n>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from clojars\n>>>>\n>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n>>>>\n>>>> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom \n>>>> from clojars\n>>>>\n>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>>\n>>>> Retrieving \n>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom from \n>>>> central\n>>>>\n>>>> Retrieving \n>>>> org\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom from \n>>>> central\n>>>>\n>>>> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom \n>>>> from central\n>>>>\n>>>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom from \n>>>> central\n>>>>\n>>>> Retrieving \n>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom from \n>>>> central\n>>>>\n>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>>\n>>>> Retrieving \n>>>> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar from \n>>>> central\n>>>>\n>>>> Retrieving \n>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>>>  \n>>>> from central\n>>>>\n>>>> Retrieving \n>>>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>>>  \n>>>> from central\n>>>>\n>>>> Retrieving \n>>>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar from \n>>>> central\n>>>>\n>>>> Retrieving \n>>>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar from \n>>>> central\n>>>>\n>>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n>>>>\n>>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from \n>>>> clojars\n>>>>\n>>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n>>>>\n>>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from clojars\n>>>>\n>>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>>\n>>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>>\n>>>> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar \n>>>> from clojars\n>>>>\n>>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>>\n>>>> Exception in thread \"main\" java.lang.ClassNotFoundException: \n>>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n>>>>\n>>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>>\n>>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>>\n>>>> ...\n>>>>\n>>>>\n>>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>>\n>>>>> I am not including `--add-modules` in my template project \n>>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works great:\n>>>>>\n>>>>>\n>>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>>   :min-lein-version \"2.7.1\"\n>>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>>                  [tupelo \"0.9.76\"]\n>>>>>                 ]\n>>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions \n>>>>> [[org.clojure\/clojure]]]\n>>>>>             [lein-figwheel \"0.5.15\"]\n>>>>>             [lein-doo \"0.1.10\"]]\n>>>>>\n>>>>>\n>>>>> ---------------------------\n>>>>>\n>>>>> ~\/expr\/cljs-template > lein figwheel            \n>>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>>> Figwheel: Validating the configuration found in project.clj\n>>>>> Figwheel: Configuration Valid ;)\n>>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>>> Figwheel: Watching build - dev\n>>>>> Compiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\" \n>>>>> from [\"src\"]...\n>>>>> Successfully compiled build :dev to \n>>>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 seconds.\n>>>>> Launching ClojureScript REPL for build: dev\n>>>>> ...\n>>>>>     Exit: :cljs\/quit\n>>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n>>>>> Prompt will show when Figwheel connects to your application\n>>>>> [Rebel readline] Type :repl\/help for online help info\n>>>>> ClojureScript 1.10.238\n>>>>> dev:cljs.user!{:conn 2}=> \n>>>>>\n>>>>>\n>>>>>\n>>>>>\n>>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de> \n>>>>> wrote:\n>>>>>\n>>>>>> I've learned from several discussions (\n>>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that the \n>>>>>> problem was ClojureScript 1.9 and that one should use the tag :jvm-opts \n>>>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript version is \n>>>>>> out.\n>>>>>>\n>>>>>>\n>>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>>>>\n>>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>>\n>>>>>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>>>\n>>>>>> -- \n>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>> with your first post.\n>>>>>> --- \n>>>>>> You received this message because you are subscribed to the Google \n>>>>>> Groups \"ClojureScript\" group.\n>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>\n>>>>>\n>>>>> -- \n>>>> Note that posts from new members are moderated - please be patient with \n>>>> your first post.\n>>>> --- \n>>>> You received this message because you are subscribed to the Google \n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send \n>>>> an email to clojurescrip...@googlegroups.com.\n>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>\n>>>\n>>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Johannes Thu, 03 May 2018 13:43:10 -0700"},
{"body":"That looks good.  Can you verify it matches what is in `project.clj`?\nAlso, try `lein --version` or type `lein repl` to verify the same stuff is\nfound.\nAlan \nOn Wed, May 2, 2018 at 3:00 PM, Johannes <bra...@nordakademie.de> wrote:\n\n> I am not sure if this is what you want to see:\n>\n> JohMBAir:hello-world johannes$ clj --main cljs.main --compile\n> hello-world.core --repl\n>\n> ClojureScript 1.10.238\n>\n> cljs.user=> ^D\n>\n> JohMBAir:hello-world johannes$ clj\n>\n> Clojure 1.9.0\n>\n> user=> ^D\n>\n> JohMBAir:hello-world johannes$ java --version\n>\n> java 9.0.1\n>\n> Java(TM) SE Runtime Environment (build 9.0.1+11)\n>\n> Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n>\n> Am Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>>\n>> Can you verify versions for Java, Clojure, & ClojureScript?\n>>\n>> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de> wrote:\n>>\n>>> Hm, I downloaded your profile.clj, and with\n>>>\n>>> lein figwheel\n>>>\n>>> I get the known error:\n>>>\n>>> Figwheel: Cutting some fruit, just a sec ...\n>>>\n>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>>\n>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from\n>>> clojars\n>>>\n>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from clojars\n>>>\n>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n>>>\n>>> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom\n>>> from clojars\n>>>\n>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>>\n>>> Retrieving org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom\n>>> from central\n>>>\n>>> Retrieving org\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom\n>>> from central\n>>>\n>>> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom\n>>> from central\n>>>\n>>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom from\n>>> central\n>>>\n>>> Retrieving org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom\n>>> from central\n>>>\n>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>>\n>>> Retrieving \n>>> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar\n>>> from central\n>>>\n>>> Retrieving com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-smile\/2.\n>>> 9.0\/jackson-dataformat-smile-2.9.0.jar from central\n>>>\n>>> Retrieving com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-cbor\/2.\n>>> 9.0\/jackson-dataformat-cbor-2.9.0.jar from central\n>>>\n>>> Retrieving org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar\n>>> from central\n>>>\n>>> Retrieving org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar\n>>> from central\n>>>\n>>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n>>>\n>>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from\n>>> clojars\n>>>\n>>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n>>>\n>>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from clojars\n>>>\n>>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>>\n>>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>>\n>>> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar\n>>> from clojars\n>>>\n>>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>>\n>>> Exception in thread \"main\" java.lang.ClassNotFoundException:\n>>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n>>>\n>>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>>\n>>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>>\n>>> ...\n>>>\n>>>\n>>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>>\n>>>> I am not including `--add-modules` in my template project\n>>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works great:\n>>>>\n>>>>\n>>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>>   :min-lein-version \"2.7.1\"\n>>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>>                  [tupelo \"0.9.76\"]\n>>>>                 ]\n>>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions\n>>>> [[org.clojure\/clojure]]]\n>>>>             [lein-figwheel \"0.5.15\"]\n>>>>             [lein-doo \"0.1.10\"]]\n>>>>\n>>>>\n>>>> ---------------------------\n>>>>\n>>>> ~\/expr\/cljs-template > lein figwheel\n>>>> Figwheel: Cutting some fruit, just a sec ...\n>>>> Figwheel: Validating the configuration found in project.clj\n>>>> Figwheel: Configuration Valid ;)\n>>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>>> Figwheel: Watching build - dev\n>>>> Compiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>> from [\"src\"]...\n>>>> Successfully compiled build :dev to \n>>>> \"resources\/public\/js\/compiled\/flintstones.js\"\n>>>> in 0.908 seconds.\n>>>> Launching ClojureScript REPL for build: dev\n>>>> ...\n>>>>     Exit: :cljs\/quit\n>>>>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n>>>> Prompt will show when Figwheel connects to your application\n>>>> [Rebel readline] Type :repl\/help for online help info\n>>>> ClojureScript 1.10.238\n>>>> dev:cljs.user!{:conn 2}=>\n>>>>\n>>>>\n>>>>\n>>>>\n>>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de>\n>>>> wrote:\n>>>>\n>>>>> I've learned from several discussions (https:\/\/github.com\/bhauman\/le\n>>>>> in-figwheel\/issues\/612) that the problem was ClojureScript 1.9 and\n>>>>> that one should use the tag :jvm-opts [\"--add-modules\" \"java.xml.bind\"]\n>>>>> until a new ClojureScript version is out.\n>>>>>\n>>>>>\n>>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>>>\n>>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>>\n>>>>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>>\n>>>>> --\n>>>>> Note that posts from new members are moderated - please be patient\n>>>>> with your first post.\n>>>>> ---\n>>>>> You received this message because you are subscribed to the Google\n>>>>> Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>>> an email to clojurescrip...@googlegroups.com.\n>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>\n>>>>\n>>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Thu, 03 May 2018 13:28:54 -0700"},
{"body":"I'm not sure but try starting with a working figwheel template then compare \nit with yours to see whats missing \nOn Tuesday, May 1, 2018 at 2:35:26 PM UTC+3, Johannes wrote:\n>\n> Hi,\n>\n> I am looking for a working configuration for Emacs\/Cider\/ClojureScript \n> Repl. Following the instructions given in the Cider manual \n> <http:\/\/cider.readthedocs.io\/en\/latest\/clojurescript\/> I built a \n> project.clj:\n>\n> (defproject piggi \"0.1.0-SNAPSHOT\"\n>   :description \"FIXME: write description\"\n>   :url \"http:\/\/example.com\/FIXME\";\n>   :license {:name \"Eclipse Public License\"\n>             :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>                  [org.clojure\/clojurescript \"1.10.238\"]]  \n>   :profiles\n>   {:dev {:dependencies [[cider\/piggieback \"0.3.1\"]\n>                         [org.clojure\/tools.nrepl \"0.2.13\"]]}         \n>    :repl-options {:nrepl-middleware [cider.piggieback\/wrap-cljs-repl]}})\n>\n> But, if I issue cider-jack-in-clojurescript I get:\n>\n> Starting nREPL server via lein update-in :dependencies conj \n> \\[org.clojure\/tools.nrepl\\ \\\"0.2.12\\\"\\] -- update-in :plugins conj \n> \\[cider\/cider-nrepl\\ \\\"0.12.0-SNAPSHOT\\\"\\] -- repl :headless... \n> <wheel-right> is undefined error in process sentinel: Could not start nREPL \n> server: WARNING: boolean? already refers to: #\u2019clojure.core\/boolean? in \n> namespace: cider.inlined-deps.fipp.v0v6v4.fipp.visit, being replaced by: \n> #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading \n> cider.nrepl.middleware.debug: java.lang.ClassNotFoundException: \n> sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading \n> cider.nrepl.middleware.test: java.lang.RuntimeException: Invalid token: \n> ::clojure.test\/once-fixtures, \n> compiling:(cider\/nrepl\/middleware\/test.clj:106:57) Exception in thread \n> \"main\" java.lang.RuntimeException: Unable to resolve var: \n> cider.nrepl.middleware.test\/wrap-test in this context, \n> compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918)\n>  \n> at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.access$300(Compiler.java:38) at \n> clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at \n> clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at \n> clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.eval(Compiler.java:7059) at \n> clojure.lang.Compiler.eval(Compiler.java:7052) at \n> clojure.lang.Compiler.load(Compiler.java:7514) at \n> clojure.lang.Compiler.loadFile(Compiler.java:7452) at \n> clojure.main$load_script.invokeStatic(main.clj:278) at \n> clojure.main$init_opt.invokeStatic(main.clj:280) at \n> clojure.main$init_opt.invoke(main.clj:280) at \n> clojure.main$initialize.invokeStatic(main.clj:311) at \n> clojure.main$null_opt.invokeStatic(main.clj:345) at \n> clojure.main$null_opt.invoke(main.clj:342) at \n> clojure.main$main.invokeStatic(main.clj:424) at \n> clojure.main$main.doInvoke(main.clj:387) at \n> clojure.lang.RestFn.applyTo(RestFn.java:137) at \n> clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) \n> Caused by: java.lang.RuntimeException: Unable to resolve var: \n> cider.nrepl.middleware.test\/wrap-test in this context at \n> clojure.lang.Util.runtimeException(Util.java:221) at \n> clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess \n> failed error in process sentinel: Could not start nREPL server: WARNING: \n> boolean? already refers to: #\u2019clojure.core\/boolean? in namespace: \n> cider.inlined-deps.fipp.v0v6v4.fipp.visit, being replaced by: \n> #\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading \n> cider.nrepl.middleware.debug: java.lang.ClassNotFoundException: \n> sun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading \n> cider.nrepl.middleware.test: java.lang.RuntimeException: Invalid token: \n> ::clojure.test\/once-fixtures, \n> compiling:(cider\/nrepl\/middleware\/test.clj:106:57) Exception in thread \n> \"main\" java.lang.RuntimeException: Unable to resolve var: \n> cider.nrepl.middleware.test\/wrap-test in this context, \n> compiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918)\n>  \n> at clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.access$300(Compiler.java:38) at \n> clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.analyze(Compiler.java:6729) at \n> clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at \n> clojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at \n> clojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at \n> clojure.lang.Compiler.analyze(Compiler.java:6773) at \n> clojure.lang.Compiler.eval(Compiler.java:7059) at \n> clojure.lang.Compiler.eval(Compiler.java:7052) at \n> clojure.lang.Compiler.load(Compiler.java:7514) at \n> clojure.lang.Compiler.loadFile(Compiler.java:7452) at \n> clojure.main$load_script.invokeStatic(main.clj:278) at \n> clojure.main$init_opt.invokeStatic(main.clj:280) at \n> clojure.main$init_opt.invoke(main.clj:280) at \n> clojure.main$initialize.invokeStatic(main.clj:311) at \n> clojure.main$null_opt.invokeStatic(main.clj:345) at \n> clojure.main$null_opt.invoke(main.clj:342) at \n> clojure.main$main.invokeStatic(main.clj:424) at \n> clojure.main$main.doInvoke(main.clj:387) at \n> clojure.lang.RestFn.applyTo(RestFn.java:137) at \n> clojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) \n> Caused by: java.lang.RuntimeException: Unable to resolve var: \n> cider.nrepl.middleware.test\/wrap-test in this context at \n> clojure.lang.Util.runtimeException(Util.java:221) at \n> clojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at \n> clojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess \n> failed \n>\n> Any hints, what to do?\n> Johannes\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: cider clojurescript repl Sonny To Thu, 03 May 2018 05:24:56 -0700"},
{"body":"I am not sure if this is what you want to see:\n\nJohMBAir:hello-world johannes$ clj --main cljs.main --compile \nhello-world.core --repl \nClojureScript 1.10.238\n\ncljs.user=> ^D\n\nJohMBAir:hello-world johannes$ clj\n\nClojure 1.9.0\n\nuser=> ^D\n\nJohMBAir:hello-world johannes$ java --version\n\njava 9.0.1\n\nJava(TM) SE Runtime Environment (build 9.0.1+11)\n\nJava HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)\n\nAm Mittwoch, 2. Mai 2018 21:05:09 UTC+2 schrieb Alan Thompson:\n>\n> Can you verify versions for Java, Clojure, & ClojureScript?\n>\n> On Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de \n> <javascript:>> wrote:\n>\n>> Hm, I downloaded your profile.clj, and with\n>>\n>> lein figwheel\n>>\n>> I get the known error:\n>>\n>> Figwheel: Cutting some fruit, just a sec ...\n>>\n>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>>\n>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from \n>> clojars\n>>\n>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from clojars\n>>\n>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n>>\n>> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom \n>> from clojars\n>>\n>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>>\n>> Retrieving \n>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom from central\n>>\n>> Retrieving \n>> org\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom from \n>> central\n>>\n>> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom from \n>> central\n>>\n>> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom from \n>> central\n>>\n>> Retrieving \n>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom from \n>> central\n>>\n>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>>\n>> Retrieving \n>> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar from \n>> central\n>>\n>> Retrieving \n>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n>>  \n>> from central\n>>\n>> Retrieving \n>> com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n>>  \n>> from central\n>>\n>> Retrieving \n>> org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar from \n>> central\n>>\n>> Retrieving \n>> org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar from central\n>>\n>> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n>>\n>> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from \n>> clojars\n>>\n>> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n>>\n>> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from clojars\n>>\n>> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>>\n>> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>>\n>> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar \n>> from clojars\n>>\n>> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>>\n>> Exception in thread \"main\" java.lang.ClassNotFoundException: \n>> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n>>\n>> at clojure.lang.Compiler.load(Compiler.java:7526)\n>>\n>> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>>\n>> ...\n>>\n>>\n>> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>>\n>>> I am not including `--add-modules` in my template project \n>>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works great:\n>>>\n>>>\n>>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>>   :min-lein-version \"2.7.1\"\n>>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>>                  [org.clojure\/core.async \"0.4.474\"]\n>>>                  [tupelo \"0.9.76\"]\n>>>                 ]\n>>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>>>             [lein-figwheel \"0.5.15\"]\n>>>             [lein-doo \"0.1.10\"]]\n>>>\n>>>\n>>> ---------------------------\n>>>\n>>> ~\/expr\/cljs-template > lein figwheel            \n>>> Figwheel: Cutting some fruit, just a sec ...\n>>> Figwheel: Validating the configuration found in project.clj\n>>> Figwheel: Configuration Valid ;)\n>>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>>> Figwheel: Watching build - dev\n>>> Compiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\" \n>>> from [\"src\"]...\n>>> Successfully compiled build :dev to \n>>> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 seconds.\n>>> Launching ClojureScript REPL for build: dev\n>>> ...\n>>>     Exit: :cljs\/quit\n>>>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n>>> Prompt will show when Figwheel connects to your application\n>>> [Rebel readline] Type :repl\/help for online help info\n>>> ClojureScript 1.10.238\n>>> dev:cljs.user!{:conn 2}=> \n>>>\n>>>\n>>>\n>>>\n>>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de> \n>>> wrote:\n>>>\n>>>> I've learned from several discussions (\n>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that the problem \n>>>> was ClojureScript 1.9 and that one should use the tag :jvm-opts \n>>>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript version is out.\n>>>>\n>>>>\n>>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>>\n>>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>>\n>>>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>>\n>>>> -- \n>>>> Note that posts from new members are moderated - please be patient with \n>>>> your first post.\n>>>> --- \n>>>> You received this message because you are subscribed to the Google \n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send \n>>>> an email to clojurescrip...@googlegroups.com.\n>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>\n>>>\n>>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Johannes Wed, 02 May 2018 15:00:30 -0700"},
{"body":"Can you verify versions for Java, Clojure, & ClojureScript?\n\nOn Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de> wrote: \n> Hm, I downloaded your profile.clj, and with\n>\n> lein figwheel\n>\n> I get the known error:\n>\n> Figwheel: Cutting some fruit, just a sec ...\n>\n> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>\n> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from\n> clojars\n>\n> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from clojars\n>\n> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n>\n> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom\n> from clojars\n>\n> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>\n> Retrieving org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom\n> from central\n>\n> Retrieving org\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom\n> from central\n>\n> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom from\n> central\n>\n> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom from\n> central\n>\n> Retrieving org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom\n> from central\n>\n> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>\n> Retrieving \n> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar\n> from central\n>\n> Retrieving com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-\n> smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar from central\n>\n> Retrieving com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-\n> cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar from central\n>\n> Retrieving org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar\n> from central\n>\n> Retrieving org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar\n> from central\n>\n> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n>\n> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from\n> clojars\n>\n> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n>\n> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from clojars\n>\n> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>\n> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>\n> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar\n> from clojars\n>\n> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>\n> Exception in thread \"main\" java.lang.ClassNotFoundException:\n> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7526)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>\n> ...\n>\n>\n> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>\n>> I am not including `--add-modules` in my template project\n>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works great:\n>>\n>>\n>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>   :min-lein-version \"2.7.1\"\n>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>                  [org.clojure\/core.async \"0.4.474\"]\n>>                  [tupelo \"0.9.76\"]\n>>                 ]\n>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>>             [lein-figwheel \"0.5.15\"]\n>>             [lein-doo \"0.1.10\"]]\n>>\n>>\n>> ---------------------------\n>>\n>> ~\/expr\/cljs-template > lein figwheel\n>> Figwheel: Cutting some fruit, just a sec ...\n>> Figwheel: Validating the configuration found in project.clj\n>> Figwheel: Configuration Valid ;)\n>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>> Figwheel: Watching build - dev\n>> Compiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\"\n>> from [\"src\"]...\n>> Successfully compiled build :dev to \n>> \"resources\/public\/js\/compiled\/flintstones.js\"\n>> in 0.908 seconds.\n>> Launching ClojureScript REPL for build: dev\n>> ...\n>>     Exit: :cljs\/quit\n>>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n>> Prompt will show when Figwheel connects to your application\n>> [Rebel readline] Type :repl\/help for online help info\n>> ClojureScript 1.10.238\n>> dev:cljs.user!{:conn 2}=>\n>>\n>>\n>>\n>>\n>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de> wrote:\n>>\n>>> I've learned from several discussions (https:\/\/github.com\/bhauman\/le\n>>> in-figwheel\/issues\/612) that the problem was ClojureScript 1.9 and that\n>>> one should use the tag :jvm-opts [\"--add-modules\" \"java.xml.bind\"] until a\n>>> new ClojureScript version is out.\n>>>\n>>>\n>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>\n>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>\n>>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Wed, 02 May 2018 12:05:37 -0700"},
{"body":"Can you verify versions for Java, Clojure, & ClojureScript?\nAlan\n\nOn Mon, Apr 30, 2018 at 6:34 AM, Johannes <bra...@nordakademie.de> wrote: \n> Hm, I downloaded your profile.clj, and with\n>\n> lein figwheel\n>\n> I get the known error:\n>\n> Figwheel: Cutting some fruit, just a sec ...\n>\n> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n>\n> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from\n> clojars\n>\n> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from clojars\n>\n> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n>\n> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom\n> from clojars\n>\n> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n>\n> Retrieving org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom\n> from central\n>\n> Retrieving org\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom\n> from central\n>\n> Retrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom from\n> central\n>\n> Retrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom from\n> central\n>\n> Retrieving org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom\n> from central\n>\n> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n>\n> Retrieving \n> com\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar\n> from central\n>\n> Retrieving com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-\n> smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar from central\n>\n> Retrieving com\/fasterxml\/jackson\/dataformat\/jackson-dataformat-\n> cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar from central\n>\n> Retrieving org\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar\n> from central\n>\n> Retrieving org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar\n> from central\n>\n> Retrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n>\n> Retrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from\n> clojars\n>\n> Retrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n>\n> Retrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from clojars\n>\n> Retrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n>\n> Retrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n>\n> Retrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar\n> from clojars\n>\n> Retrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n>\n> Exception in thread \"main\" java.lang.ClassNotFoundException:\n> javax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7526)\n>\n> at clojure.lang.RT.loadResourceScript(RT.java:379)\n>\n> ...\n>\n>\n> Am Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>\n>> I am not including `--add-modules` in my template project\n>> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works great:\n>>\n>>\n>> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>>   :min-lein-version \"2.7.1\"\n>>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>>                  [org.clojure\/clojurescript \"1.10.238\"]\n>>                  [org.clojure\/core.async \"0.4.474\"]\n>>                  [tupelo \"0.9.76\"]\n>>                 ]\n>>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>>             [lein-figwheel \"0.5.15\"]\n>>             [lein-doo \"0.1.10\"]]\n>>\n>>\n>> ---------------------------\n>>\n>> ~\/expr\/cljs-template > lein figwheel\n>> Figwheel: Cutting some fruit, just a sec ...\n>> Figwheel: Validating the configuration found in project.clj\n>> Figwheel: Configuration Valid ;)\n>> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n>> Figwheel: Watching build - dev\n>> Compiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\"\n>> from [\"src\"]...\n>> Successfully compiled build :dev to \n>> \"resources\/public\/js\/compiled\/flintstones.js\"\n>> in 0.908 seconds.\n>> Launching ClojureScript REPL for build: dev\n>> ...\n>>     Exit: :cljs\/quit\n>>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n>> Prompt will show when Figwheel connects to your application\n>> [Rebel readline] Type :repl\/help for online help info\n>> ClojureScript 1.10.238\n>> dev:cljs.user!{:conn 2}=>\n>>\n>>\n>>\n>>\n>> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de> wrote:\n>>\n>>> I've learned from several discussions (https:\/\/github.com\/bhauman\/le\n>>> in-figwheel\/issues\/612) that the problem was ClojureScript 1.9 and that\n>>> one should use the tag :jvm-opts [\"--add-modules\" \"java.xml.bind\"] until a\n>>> new ClojureScript version is out.\n>>>\n>>>\n>>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>>\n>>>> The error message fingers org\/httpkit\/server.clj.\n>>>>\n>>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Wed, 02 May 2018 10:01:06 -0700"},
{"body":"Hi,\n\nI am looking for a working configuration for Emacs\/Cider\/ClojureScript \nRepl. Following the instructions given in the Cider manual \n<http:\/\/cider.readthedocs.io\/en\/latest\/clojurescript\/> I built a \nproject.clj: \n(defproject piggi \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http:\/\/example.com\/FIXME\";\n  :license {:name \"Eclipse Public License\"\n            :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n  :dependencies [[org.clojure\/clojure \"1.9.0\"]\n                 [org.clojure\/clojurescript \"1.10.238\"]]  \n  :profiles\n  {:dev {:dependencies [[cider\/piggieback \"0.3.1\"]\n                        [org.clojure\/tools.nrepl \"0.2.13\"]]}         \n   :repl-options {:nrepl-middleware [cider.piggieback\/wrap-cljs-repl]}})\n\nBut, if I issue cider-jack-in-clojurescript I get:\n\nStarting nREPL server via lein update-in :dependencies conj \n\\[org.clojure\/tools.nrepl\\ \\\"0.2.12\\\"\\] -- update-in :plugins conj \n\\[cider\/cider-nrepl\\ \\\"0.12.0-SNAPSHOT\\\"\\] -- repl :headless... \n<wheel-right> is undefined error in process sentinel: Could not start nREPL \nserver: WARNING: boolean? already refers to: #\u2019clojure.core\/boolean? in \nnamespace: cider.inlined-deps.fipp.v0v6v4.fipp.visit, being replaced by: \n#\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading \ncider.nrepl.middleware.debug: java.lang.ClassNotFoundException: \nsun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading \ncider.nrepl.middleware.test: java.lang.RuntimeException: Invalid token: \n::clojure.test\/once-fixtures, \ncompiling:(cider\/nrepl\/middleware\/test.clj:106:57) Exception in thread \n\"main\" java.lang.RuntimeException: Unable to resolve var: \ncider.nrepl.middleware.test\/wrap-test in this context, \ncompiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918)\n \nat clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at \nclojure.lang.Compiler.analyze(Compiler.java:6773) at \nclojure.lang.Compiler.analyze(Compiler.java:6729) at \nclojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \nclojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \nclojure.lang.Compiler.analyze(Compiler.java:6773) at \nclojure.lang.Compiler.analyze(Compiler.java:6729) at \nclojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \nclojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \nclojure.lang.Compiler.analyze(Compiler.java:6773) at \nclojure.lang.Compiler.access$300(Compiler.java:38) at \nclojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at \nclojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at \nclojure.lang.Compiler.analyze(Compiler.java:6773) at \nclojure.lang.Compiler.analyze(Compiler.java:6729) at \nclojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at \nclojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at \nclojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at \nclojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at \nclojure.lang.Compiler.analyze(Compiler.java:6773) at \nclojure.lang.Compiler.eval(Compiler.java:7059) at \nclojure.lang.Compiler.eval(Compiler.java:7052) at \nclojure.lang.Compiler.load(Compiler.java:7514) at \nclojure.lang.Compiler.loadFile(Compiler.java:7452) at \nclojure.main$load_script.invokeStatic(main.clj:278) at \nclojure.main$init_opt.invokeStatic(main.clj:280) at \nclojure.main$init_opt.invoke(main.clj:280) at \nclojure.main$initialize.invokeStatic(main.clj:311) at \nclojure.main$null_opt.invokeStatic(main.clj:345) at \nclojure.main$null_opt.invoke(main.clj:342) at \nclojure.main$main.invokeStatic(main.clj:424) at \nclojure.main$main.doInvoke(main.clj:387) at \nclojure.lang.RestFn.applyTo(RestFn.java:137) at \nclojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) \nCaused by: java.lang.RuntimeException: Unable to resolve var: \ncider.nrepl.middleware.test\/wrap-test in this context at \nclojure.lang.Util.runtimeException(Util.java:221) at \nclojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at \nclojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess \nfailed error in process sentinel: Could not start nREPL server: WARNING: \nboolean? already refers to: #\u2019clojure.core\/boolean? in namespace: \ncider.inlined-deps.fipp.v0v6v4.fipp.visit, being replaced by: \n#\u2019cider.inlined-deps.fipp.v0v6v4.fipp.visit\/boolean? Error loading \ncider.nrepl.middleware.debug: java.lang.ClassNotFoundException: \nsun.misc.Launcher, compiling:(dynapath\/defaults.clj:29:3) Error loading \ncider.nrepl.middleware.test: java.lang.RuntimeException: Invalid token: \n::clojure.test\/once-fixtures, \ncompiling:(cider\/nrepl\/middleware\/test.clj:106:57) Exception in thread \n\"main\" java.lang.RuntimeException: Unable to resolve var: \ncider.nrepl.middleware.test\/wrap-test in this context, \ncompiling:(\/private\/var\/folders\/lj\/z8hchxbn7n58vh8bqg8frmr00000gq\/T\/form-init7208710527506290850.clj:1:7918)\n \nat clojure.lang.Compiler.analyzeSeq(Compiler.java:7010) at \nclojure.lang.Compiler.analyze(Compiler.java:6773) at \nclojure.lang.Compiler.analyze(Compiler.java:6729) at \nclojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \nclojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \nclojure.lang.Compiler.analyze(Compiler.java:6773) at \nclojure.lang.Compiler.analyze(Compiler.java:6729) at \nclojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3881) at \nclojure.lang.Compiler.analyzeSeq(Compiler.java:7005) at \nclojure.lang.Compiler.analyze(Compiler.java:6773) at \nclojure.lang.Compiler.access$300(Compiler.java:38) at \nclojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6368) at \nclojure.lang.Compiler.analyzeSeq(Compiler.java:7003) at \nclojure.lang.Compiler.analyze(Compiler.java:6773) at \nclojure.lang.Compiler.analyze(Compiler.java:6729) at \nclojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6100) at \nclojure.lang.Compiler$FnMethod.parse(Compiler.java:5460) at \nclojure.lang.Compiler$FnExpr.parse(Compiler.java:4022) at \nclojure.lang.Compiler.analyzeSeq(Compiler.java:7001) at \nclojure.lang.Compiler.analyze(Compiler.java:6773) at \nclojure.lang.Compiler.eval(Compiler.java:7059) at \nclojure.lang.Compiler.eval(Compiler.java:7052) at \nclojure.lang.Compiler.load(Compiler.java:7514) at \nclojure.lang.Compiler.loadFile(Compiler.java:7452) at \nclojure.main$load_script.invokeStatic(main.clj:278) at \nclojure.main$init_opt.invokeStatic(main.clj:280) at \nclojure.main$init_opt.invoke(main.clj:280) at \nclojure.main$initialize.invokeStatic(main.clj:311) at \nclojure.main$null_opt.invokeStatic(main.clj:345) at \nclojure.main$null_opt.invoke(main.clj:342) at \nclojure.main$main.invokeStatic(main.clj:424) at \nclojure.main$main.doInvoke(main.clj:387) at \nclojure.lang.RestFn.applyTo(RestFn.java:137) at \nclojure.lang.Var.applyTo(Var.java:702) at clojure.main.main(main.java:37) \nCaused by: java.lang.RuntimeException: Unable to resolve var: \ncider.nrepl.middleware.test\/wrap-test in this context at \nclojure.lang.Util.runtimeException(Util.java:221) at \nclojure.lang.Compiler$TheVarExpr$Parser.parse(Compiler.java:720) at \nclojure.lang.Compiler.analyzeSeq(Compiler.java:7003) ... 34 more Subprocess \nfailed \n\nAny hints, what to do?\nJohannes\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] cider clojurescript repl Johannes Tue, 01 May 2018 04:35:48 -0700"},
{"body":"Hm, I downloaded your profile.clj, and with\n\nlein figwheel \nI get the known error:\n\nFigwheel: Cutting some fruit, just a sec ...\n\nRetrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.pom from clojars\n\nRetrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.pom from clojars\n\nRetrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.pom from clojars\n\nRetrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.pom from clojars\n\nRetrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.pom \nfrom clojars\n\nRetrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.pom from clojars\n\nRetrieving org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.pom \nfrom central\n\nRetrieving \norg\/clojure\/tools.analyzer.jvm\/0.6.5\/tools.analyzer.jvm-0.6.5.pom from \ncentral\n\nRetrieving org\/clojure\/tools.analyzer\/0.6.4\/tools.analyzer-0.6.4.pom from \ncentral\n\nRetrieving org\/clojure\/tools.reader\/0.8.12\/tools.reader-0.8.12.pom from \ncentral\n\nRetrieving \norg\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.pom from \ncentral\n\nRetrieving prismatic\/schema\/1.1.7\/schema-1.1.7.pom from clojars\n\nRetrieving \ncom\/fasterxml\/jackson\/core\/jackson-core\/2.9.0\/jackson-core-2.9.0.jar from \ncentral\n\nRetrieving \ncom\/fasterxml\/jackson\/dataformat\/jackson-dataformat-smile\/2.9.0\/jackson-dataformat-smile-2.9.0.jar\n \nfrom central\n\nRetrieving \ncom\/fasterxml\/jackson\/dataformat\/jackson-dataformat-cbor\/2.9.0\/jackson-dataformat-cbor-2.9.0.jar\n \nfrom central\n\nRetrieving \norg\/clojure\/math.combinatorics\/0.1.4\/math.combinatorics-0.1.4.jar from \ncentral\n\nRetrieving org\/clojure\/core.match\/0.3.0-alpha4\/core.match-0.3.0-alpha4.jar \nfrom central\n\nRetrieving cheshire\/cheshire\/5.8.0\/cheshire-5.8.0.jar from clojars\n\nRetrieving clojure-csv\/clojure-csv\/2.0.2\/clojure-csv-2.0.2.jar from clojars\n\nRetrieving danlentz\/clj-uuid\/0.1.7\/clj-uuid-0.1.7.jar from clojars\n\nRetrieving criterium\/criterium\/0.4.4\/criterium-0.4.4.jar from clojars\n\nRetrieving tupelo\/tupelo\/0.9.76\/tupelo-0.9.76.jar from clojars\n\nRetrieving enlive\/enlive\/1.1.6\/enlive-1.1.6.jar from clojars\n\nRetrieving primitive-math\/primitive-math\/0.1.4\/primitive-math-0.1.4.jar \nfrom clojars\n\nRetrieving prismatic\/schema\/1.1.7\/schema-1.1.7.jar from clojars\n\nException in thread \"main\" java.lang.ClassNotFoundException: \njavax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\n\nat clojure.lang.Compiler.load(Compiler.java:7526)\n\nat clojure.lang.RT.loadResourceScript(RT.java:379)\n\n...\n\n\nAm Montag, 30. April 2018 02:46:34 UTC+2 schrieb Alan Thompson:\n>\n> I am not including `--add-modules` in my template project \n> <https:\/\/github.com\/cloojure\/cljs-template.git> and it works great:\n>\n>\n> (defproject flintstones \"0.1.0-SNAPSHOT\"\n>   :min-lein-version \"2.7.1\"\n>   :dependencies [[org.clojure\/clojure \"1.9.0\"]\n>                  [org.clojure\/clojurescript \"1.10.238\"]\n>                  [org.clojure\/core.async \"0.4.474\"]\n>                  [tupelo \"0.9.76\"]\n>                 ]\n>   :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n>             [lein-figwheel \"0.5.15\"]\n>             [lein-doo \"0.1.10\"]]\n>\n>\n> ---------------------------\n>\n> ~\/expr\/cljs-template > lein figwheel            \n> Figwheel: Cutting some fruit, just a sec ...\n> Figwheel: Validating the configuration found in project.clj\n> Figwheel: Configuration Valid ;)\n> Figwheel: Starting server at http:\/\/0.0.0.0:3449\n> Figwheel: Watching build - dev\n> Compiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\" from \n> [\"src\"]...\n> Successfully compiled build :dev to \n> \"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 seconds.\n> Launching ClojureScript REPL for build: dev\n> ...\n>     Exit: :cljs\/quit\n>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n> Prompt will show when Figwheel connects to your application\n> [Rebel readline] Type :repl\/help for online help info\n> ClojureScript 1.10.238\n> dev:cljs.user!{:conn 2}=> \n>\n>\n>\n>\n> On Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de \n> <javascript:>> wrote:\n>\n>> I've learned from several discussions (\n>> https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that the problem \n>> was ClojureScript 1.9 and that one should use the tag :jvm-opts \n>> [\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript version is out.\n>>\n>>\n>> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>>\n>>> The error message fingers org\/httpkit\/server.clj.\n>>>\n>>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Johannes Mon, 30 Apr 2018 06:34:28 -0700"},
{"body":"I am not including `--add-modules` in my template project\n<https:\/\/github.com\/cloojure\/cljs-template.git> and it works great: \n\n(defproject flintstones \"0.1.0-SNAPSHOT\"\n  :min-lein-version \"2.7.1\"\n  :dependencies [[org.clojure\/clojure \"1.9.0\"]\n                 [org.clojure\/clojurescript \"1.10.238\"]\n                 [org.clojure\/core.async \"0.4.474\"]\n                 [tupelo \"0.9.76\"]\n                ]\n  :plugins [[lein-cljsbuild \"1.1.7\" :exclusions [[org.clojure\/clojure]]]\n            [lein-figwheel \"0.5.15\"]\n            [lein-doo \"0.1.10\"]]\n\n\n---------------------------\n\n~\/expr\/cljs-template > lein figwheel\nFigwheel: Cutting some fruit, just a sec ...\nFigwheel: Validating the configuration found in project.clj\nFigwheel: Configuration Valid ;)\nFigwheel: Starting server at http:\/\/0.0.0.0:3449\nFigwheel: Watching build - dev\nCompiling build :dev to \"resources\/public\/js\/compiled\/flintstones.js\" from\n[\"src\"]...\nSuccessfully compiled build :dev to\n\"resources\/public\/js\/compiled\/flintstones.js\" in 0.908 seconds.\nLaunching ClojureScript REPL for build: dev\n...\n    Exit: :cljs\/quit\n Results: Stored in vars *1, *2, *3, *e holds last exception object\nPrompt will show when Figwheel connects to your application\n[Rebel readline] Type :repl\/help for online help info\nClojureScript 1.10.238\ndev:cljs.user!{:conn 2}=>\n\n\n\n\nOn Thu, Apr 26, 2018 at 2:53 AM, Johannes <bra...@nordakademie.de> wrote:\n\n> I've learned from several discussions (https:\/\/github.com\/bhauman\/\n> lein-figwheel\/issues\/612) that the problem was ClojureScript 1.9 and that\n> one should use the tag :jvm-opts [\"--add-modules\" \"java.xml.bind\"] until a\n> new ClojureScript version is out.\n>\n>\n> Am Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>>\n>> The error message fingers org\/httpkit\/server.clj.\n>>\n>> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Alan Thompson Sun, 29 Apr 2018 17:46:43 -0700"},
{"body":"I've learned from several discussions \n(https:\/\/github.com\/bhauman\/lein-figwheel\/issues\/612) that the problem was \nClojureScript 1.9 and that one should use the tag :jvm-opts \n[\"--add-modules\" \"java.xml.bind\"] until a new ClojureScript version is out. \nAm Donnerstag, 26. April 2018 01:04:37 UTC+2 schrieb Phill Wolf:\n>\n> The error message fingers org\/httpkit\/server.clj.\n>\n> Is this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Johannes Thu, 26 Apr 2018 02:54:21 -0700"},
{"body":"The error message fingers org\/httpkit\/server.clj.\n\nIs this it? --> https:\/\/github.com\/http-kit\/http-kit\/issues\/356 \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Phill Wolf Wed, 25 Apr 2018 16:05:08 -0700"},
{"body":"Hi folks\n\nClojurists Together is funding Bozhidar Batsov and Mike Fikes $5,400USD\neach to work on CIDER and ClojureScript (respectively) from May-July. You\ncan read more about the work they're doing at in the announcement\n<https:\/\/www.clojuriststogether.org\/news\/q2-2018-funding-announcement\/>. \nWe couldn't have done any of this without the support of our company and\ndeveloper members <https:\/\/www.clojuriststogether.org\/members\/>. If you\nlike the projects that we've been funding, consider joining as a company\n<https:\/\/www.clojuriststogether.org\/companies\/> or developer\n<https:\/\/www.clojuriststogether.org\/developers\/> member so we can keep\nfunding projects that are important to the Clojure ecosystem.\n\nThanks!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojurists Together is funding CIDER and ClojureScript from May-July Daniel Compton Wed, 25 Apr 2018 14:32:42 -0700"},
{"body":"thanks.\n\nThe home page and the docs overall try to give a sense of the mix of \u201cthings\" \nthat this is good for. \nIn particular, this page articulates with more precision what this is good for \nand what this is NOT good for (which is what I always look for first)  \nhttp:\/\/fizzygum.org\/docs\/is-fizzygum-for-me\/ \n<http:\/\/fizzygum.org\/docs\/is-fizzygum-for-me\/>\n\nWhether these are problems that we have, we share, or are even worth solving, \nI\u2019ll be the first one to say that that's very subjective ;-)\n\nDavide\n\n\n> On 24 Apr 2018, at 18:44, Jamie Orchard-Hays <jamie...@gmail.com> wrote:\n> \n> Looks interesting. The first thing I look for when something new comes out \n> is, \u201cwhy did we build this thing? (what problem are we solving with this?)\u201d \n> Do have anything like that on the site? \n> \n> Cheers,\n> \n> Jamie\n> \n>> On Apr 23, 2018, at 11:52 AM, david...@fizzygum.org \n>> <mailto:david...@fizzygum.org> wrote:\n>> \n>> Hi, \n>> \n>> sending you the link to a new system inspired by the LISP\/Smalltalk \n>> residential systems.\n>> \n>> It's similar to \"cloxp\" by Robert Krahn \/ Robin Schreiber, so I thought you \n>> might like it.\n>> \n>> http:\/\/fizzygum.org\/ <http:\/\/fizzygum.org\/> \n>> \n>> In particular, for you explicitly: \n>> http:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/ \n>> <http:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/> \n>> \n>> It _should_ be adaptable to work with ClojureScript, see \n>> http:\/\/fizzygum.org\/docs\/support-for-other-languages\/ \n>> <http:\/\/fizzygum.org\/docs\/support-for-other-languages\/> but I didn't try yet.\n>> \n>> Cheers, \n>> Davide Della Casa\n>> \n>> -- \n>> Note that posts from new members are moderated - please be patient with your \n>> first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescript+unsubscr...@googlegroups.com \n>> <mailto:clojurescript+unsubscr...@googlegroups.com>.\n>> To post to this group, send email to clojurescript@googlegroups.com \n>> <mailto:clojurescript@googlegroups.com>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript \n>> <https:\/\/groups.google.com\/group\/clojurescript>.\n> \n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com \n> <mailto:clojurescript+unsubscr...@googlegroups.com>.\n> To post to this group, send email to clojurescript@googlegroups.com \n> <mailto:clojurescript@googlegroups.com>.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript \n> <https:\/\/groups.google.com\/group\/clojurescript>.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] new web-based live desktop environment similar to cloxp Davide Della Casa Tue, 24 Apr 2018 12:05:43 -0700"},
{"body":"Looks interesting. The first thing I look for when something new comes out is, \n\u201cwhy did we build this thing? (what problem are we solving with this?)\u201d Do have \nanything like that on the site? \nCheers,\n\nJamie\n\n> On Apr 23, 2018, at 11:52 AM, david...@fizzygum.org wrote:\n> \n> Hi, \n> \n> sending you the link to a new system inspired by the LISP\/Smalltalk \n> residential systems.\n> \n> It's similar to \"cloxp\" by Robert Krahn \/ Robin Schreiber, so I thought you \n> might like it.\n> \n> http:\/\/fizzygum.org\/ <http:\/\/fizzygum.org\/> \n> \n> In particular, for you explicitly: \n> http:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/ \n> <http:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/> \n> \n> It _should_ be adaptable to work with ClojureScript, see \n> http:\/\/fizzygum.org\/docs\/support-for-other-languages\/ but I didn't try yet.\n> \n> Cheers, \n> Davide Della Casa\n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com \n> <mailto:clojurescript+unsubscr...@googlegroups.com>.\n> To post to this group, send email to clojurescript@googlegroups.com \n> <mailto:clojurescript@googlegroups.com>.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript \n> <https:\/\/groups.google.com\/group\/clojurescript>.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] new web-based live desktop environment similar to cloxp Jamie Orchard-Hays Tue, 24 Apr 2018 10:45:13 -0700"},
{"body":"Hi, \n\nsending you the link to a new system inspired by the LISP\/Smalltalk \nresidential systems. \nIt's similar to \"cloxp\" by Robert Krahn \/ Robin Schreiber, so I thought you \nmight like it.\n\nhttp:\/\/fizzygum.org\/ \n\nIn particular, for you explicitly: \nhttp:\/\/fizzygum.org\/docs\/fizzygum-for-lispers-and-smalltalkers\/ \n\nIt _should_ be adaptable to work with ClojureScript, \nsee http:\/\/fizzygum.org\/docs\/support-for-other-languages\/ but I didn't try \nyet.\n\nCheers, \nDavide Della Casa\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] new web-based live desktop environment similar to cloxp davidedc Tue, 24 Apr 2018 09:15:24 -0700"},
{"body":"Today, I tried to use figwheel 0.5.15 together with ClojureScript \n 1.10.238. If I omit \n:jvm-opts [\"--add-modules\" \"java.xml.bind\"]\nI get the \"old\" error message:\nException in thread \"main\" java.lang.ExceptionInInitializerError\nat clojure.main.<clinit>(main.java:20)\nCaused by: java.lang.ClassNotFoundException: \njavax.xml.bind.DatatypeConverter, compiling:(org\/httpkit\/server.clj:1:1)\nat clojure.lang.Compiler.load(Compiler.java:7526)\nIf I reactivate the flag, all works fine.\nIs the ClojjureScript 1.9 issue not being solved? \nJohannes\n\n\nAm Mittwoch, 14. M\u00e4rz 2018 23:12:33 UTC+1 schrieb Daniel Compton:\n>\n> Yep this is a ClojureScript issue. I wrote more about this here \n> https:\/\/www.deps.co\/blog\/how-to-upgrade-clojure-projects-to-use-java-9\/. \n>\n> Until ClojureScript 1.10, you need to add:\n>\n> :jvm-opts [\"--add-modules\" \"java.xml.bind\"]\n>\n> to your Leiningen config.\n>\n> On Thu, Mar 15, 2018 at 1:14 AM gvim <gvi...@gmail.com <javascript:>> \n> wrote:\n>\n>> So it's a Clojurescript issue, not Figwheel?\n>>\n>> gvim\n>>\n>>\n>> On 14\/03\/2018 06:43, Ale\u0161 Roub\u00ed\u010dek wrote:\n>> > Java 9 compatibility will come with ClojureScript 1.10. It will be\n>> > released in few weeks timeframe.\n>> >\n>> > On Tuesday, March 13, 2018 at 1:58:12 PM UTC+1, g vim wrote:\n>> >\n>> >     A few months ago I tried setting-up a Figwheel-based Clojurescript\n>> >     project with Java 9 but hit some errors which seemed to be issues \n>> with\n>> >     Figwheel and Java 9. Does anyone know if these issues have been\n>> >     resolved? I couldn't find anything recent on Google.\n>> >\n>> >     gvim\n>> >\n>> > --\n>> > Note that posts from new members are moderated - please be patient with\n>> > your first post.\n>> > ---\n>> > You received this message because you are subscribed to the Google\n>> > Groups \"ClojureScript\" group.\n>> > To unsubscribe from this group and stop receiving emails from it, send\n>> > an email to clojurescrip...@googlegroups.com <javascript:>\n>> > <mailto:clojurescript+unsubscr...@googlegroups.com <javascript:>>.\n>> > To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>\n>> > <mailto:clojur...@googlegroups.com <javascript:>>.\n>> > Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Johannes Mon, 23 Apr 2018 12:32:25 -0700"},
{"body":"Mike :: I just found your answer. Because of some other problems concerning \nClojurescript and Java 9 I didn't anything with figwheel. But today I made \nan new try getting the same problem. And your hint was helpful. Safari \ndoesn't work but Chrome does. \nHave you got any further insights concerning that problem in the meantime?\n\nJohannes\n\n\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: problem with figwheel quick start tutorial Johannes Sun, 22 Apr 2018 14:49:22 -0700"},
{"body":"Hello Boris\n\nMy work in progress is pretty minimal, though buried underneath a bunch of\nother code :) It is devcards project:\nhttps:\/\/github.com\/Reefersleep\/cards-for-fast-cities\nLook in\n\/src\/cards_for_fast_cities\/core.cljs\nin \"(defcard-rg drag-and-drop\", line 439. \nThe project can be run with \"lein figwheel\" and by navigating to\nhttp:\/\/localhost:3449\/cards.html#!\/cards_for_fast_cities.core in a browser.\n\nHow about your work, is that publicly accessible? I was contemplating doing\na port or a reduced version for cljs myself. I fear it's too big a task to\nfit my brainspace\/spare time, so I'm very curious to see your take on it.\n\nKind regards\nS\u00f8ren\n\nOn Thu, Apr 19, 2018 at 5:58 PM, Boris Kourtoukov <borisko...@gmail.com>\nwrote:\n\n> I ended up quickly prototyping my own drag and drop solution (only needed\n> a rough mockup at the time) so haven't went further with it.\n>\n> Is there a minimal gist I could test out? I wouldn't mind getting this\n> worked out in case I need it in the future.\n>\n> Best,\n> Boris\n>\n> On Saturday, April 14, 2018 at 11:08:26 PM UTC+2, Reefersleep wrote:\n>>\n>> Hello Boris\n>>\n>> I'm trying to use the same lib. I'm *almost* there :)\n>>\n>> I don't have any problems with the innerRef, not that I know of, anyway.\n>> My problem is getting the \"placeholder\" React elements into the right\n>> places, with the right React->Reagent->React interop conversions.\n>>\n>> To be clear, I'm just doing (.-innerRef provided) to get the ref.\n>>\n>> My current state is; I've got elements lined up, being draggable,\n>> elements move out of the way for each other, and they are swapped upon drop\n>> (as I want them to). However, the first time I drag over another element,\n>> the surrounding container shrinks to fit all the elements minus the one I'm\n>> dragging, meaning that the ones that are moving out of the way are\n>> overlapping others. I'm pretty sure this is because I don't have the\n>> placeholder set up properly.\n>>\n>> Let me know if you made any progress, or if you're still working on it.\n>> Maybe we can help each other out :)\n>>\n>> On Monday, March 12, 2018 at 11:08:39 AM UTC+1, Boris Kourtoukov wrote:\n>>>\n>>> I am trying to translate this Beautiful Drag and Drop's simple example:\n>>> https:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\n>>> \/stories\/src\/simple\/simple.jsx\n>>>\n>>> Everything works well until I get into the inner \"Draggables\", what is\n>>> the appropriate way to write the following in Reagent:\n>>> https:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\n>>> \/stories\/src\/simple\/simple.jsx#L79-L87\n>>>\n>>> Specifically the `:ref` fields seem to not function as expected if I\n>>> just do `(aget droppable-provided \"innerRef\")`\n>>>\n>>> As an aside has anyone had any luck with Beautiful Drag and Drop?\n>>>\n>>> Also if someone hasn't seen it yet, this is a super helpful tool for\n>>> larger JSX components: https:\/\/github.com\/madvas\/jsx-to-clojurescript\n>>>\n>>> Thanks!\n>>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: [reagent] react-beautiful-dnd question S\u00f8ren Knudsen Sun, 22 Apr 2018 12:05:37 -0700"},
{"body":"On 22 Apr 2018, at 03:55, Chen Bing <eda...@gmail.com> wrote:\n\n> https:\/\/reagent-project.github.io\/\n> Example \"BMI calculator\",\n>     Slider  initialized with assoc atom(bmi-data),it's a copy of \n> atom(bmi-data)\n>           ,why atom (bmi-data) change will repaint Slider? \nThe component being rendered is bmi-component. The component calls calc-bmi, \nwhich dereferences mmi-data: @bmi-data is a deref. bmi-data is a reagent atom \nand reagent atoms are set up so that components referring to the atom re-render \nwhen the atom changes, as noted earlier on the page you linked to:\n\n> The easiest way to manage state in Reagent is to use Reagent\u2019s own version of \n> atom. It works exactly like the one in clojure.core, except that it keeps \n> track of every time it is deref\u2019ed. Any component that uses an atom is \n> automagically re-rendered when its value changes.\n\n\nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] confusing on https:\/\/reagent-project.github.io\/ Exmaple Bmi- 'Alan Forrester' via ClojureScript Sun, 22 Apr 2018 00:46:46 -0700"},
{"body":"https:\/\/reagent-project.github.io\/\nExample \"BMI calculator\",\n    Slider  initialized with assoc atom(bmi-data),it's a copy of \natom(bmi-data)\n          ,why atom (bmi-data) change will repaint Slider? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] confusing on https:\/\/reagent-project.github.io\/ Exmaple Bmi- Chen Bing Sat, 21 Apr 2018 21:57:54 -0700"},
{"body":"Hi folks\n\nClojurists Together Q2 funding applications close on 22 April, so if you\nwere thinking of applying <https:\/\/www.clojuriststogether.org\/open-source\/>,\nnow is the time. We haven't had too many applications yet, it would be\ngreat to get some more from library and tool maintainers. \nThanks, Daniel.\n\nOn Wed, Apr 11, 2018 at 9:16 AM Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> Hi folks\n>\n> Clojurists Together is an organisation dedicated to funding critical open\n> source Clojure projects. We fund projects on a 3-month cycle. Funding\n> varies based on member support, but in our current cycle we were able to\n> fund clj-http and Figwheel $1800USD\/mo each for three months. Both projects\n> have made amazing progress, you can read more about them in our Feb\n> <http:\/\/clojuriststogether.org\/news\/february-2018-monthly-update\/> and\n> March <http:\/\/clojuriststogether.org\/news\/march-2018-monthly-update\/>\n> updates.\n>\n> We're gearing up for our next cycle and are soliciting proposals from the\n> Clojure\/ClojureScript community. We recently surveyed\n> <https:\/\/clojuriststogether.org\/news\/q2-2018-survey-results\/> our members\n> to see what they wanted us to fund. The main areas they were focused on\n> were documentation, build tooling, and libraries. *If you maintain a\n> Clojure project that is important to some or all of the Clojure community\n> please apply <https:\/\/clojuriststogether.org\/open-source\/> for our second\n> funding round.*\n>\n> *If you run or manage a company that relies on the Clojure open source\n> ecosystem, we'd encourage you to consider joining as a company member\n> <https:\/\/clojuriststogether.org\/news\/>. *We've had a great response from\n> individual developers, but only a handful of companies have joined as\n> sponsors. A very special thanks to all of our members\n> <https:\/\/clojuriststogether.org\/members\/>, we couldn't do any of this\n> without your support.\n>\n> Let us know if you have any questions\/concerns, either here or at\n> h...@clojuriststogether.org\n>\n> Thanks, Daniel.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Clojurists Together Q2 2018 Call for Proposals Daniel Compton Thu, 19 Apr 2018 14:43:50 -0700"},
{"body":"I ended up quickly prototyping my own drag and drop solution (only needed a \nrough mockup at the time) so haven't went further with it. \nIs there a minimal gist I could test out? I wouldn't mind getting this \nworked out in case I need it in the future. \n\nBest,\nBoris\n\nOn Saturday, April 14, 2018 at 11:08:26 PM UTC+2, Reefersleep wrote:\n>\n> Hello Boris\n>\n> I'm trying to use the same lib. I'm *almost* there :)\n>\n> I don't have any problems with the innerRef, not that I know of, anyway. \n> My problem is getting the \"placeholder\" React elements into the right \n> places, with the right React->Reagent->React interop conversions. \n>\n> To be clear, I'm just doing (.-innerRef provided) to get the ref. \n>\n> My current state is; I've got elements lined up, being draggable, elements \n> move out of the way for each other, and they are swapped upon drop (as I \n> want them to). However, the first time I drag over another element, the \n> surrounding container shrinks to fit all the elements minus the one I'm \n> dragging, meaning that the ones that are moving out of the way are \n> overlapping others. I'm pretty sure this is because I don't have the \n> placeholder set up properly.\n>\n> Let me know if you made any progress, or if you're still working on it. \n> Maybe we can help each other out :)\n>\n> On Monday, March 12, 2018 at 11:08:39 AM UTC+1, Boris Kourtoukov wrote:\n>>\n>> I am trying to translate this Beautiful Drag and Drop's simple example: \n>> https:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\/stories\/src\/simple\/simple.jsx\n>>\n>> Everything works well until I get into the inner \"Draggables\", what is \n>> the appropriate way to write the following in Reagent: \n>> https:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\/stories\/src\/simple\/simple.jsx#L79-L87\n>>\n>> Specifically the `:ref` fields seem to not function as expected if I just \n>> do `(aget droppable-provided \"innerRef\")` \n>>\n>> As an aside has anyone had any luck with Beautiful Drag and Drop? \n>>\n>> Also if someone hasn't seen it yet, this is a super helpful tool for \n>> larger JSX components: https:\/\/github.com\/madvas\/jsx-to-clojurescript\n>>\n>> Thanks!\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [reagent] react-beautiful-dnd question Boris Kourtoukov Thu, 19 Apr 2018 08:59:12 -0700"},
{"body":"Hello Boris\n\nI'm trying to use the same lib. I'm *almost* there :) \nI don't have any problems with the innerRef, not that I know of, anyway. My \nproblem is getting the \"placeholder\" React elements into the right places, \nwith the right React->Reagent->React interop conversions. \n\nTo be clear, I'm just doing (.-innerRef provided) to get the ref. \n\nMy current state is; I've got elements lined up, being draggable, elements \nmove out of the way for each other, and they are swapped upon drop (as I \nwant them to). However, the first time I drag over another element, the \nsurrounding container shrinks to fit all the elements minus the one I'm \ndragging, meaning that the ones that are moving out of the way are \noverlapping others. I'm pretty sure this is because I don't have the \nplaceholder set up properly.\n\nLet me know if you made any progress, or if you're still working on it. \nMaybe we can help each other out :)\n\nOn Monday, March 12, 2018 at 11:08:39 AM UTC+1, Boris Kourtoukov wrote:\n>\n> I am trying to translate this Beautiful Drag and Drop's simple example: \n> https:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\/stories\/src\/simple\/simple.jsx\n>\n> Everything works well until I get into the inner \"Draggables\", what is the \n> appropriate way to write the following in Reagent: \n> https:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\/stories\/src\/simple\/simple.jsx#L79-L87\n>\n> Specifically the `:ref` fields seem to not function as expected if I just \n> do `(aget droppable-provided \"innerRef\")` \n>\n> As an aside has anyone had any luck with Beautiful Drag and Drop? \n>\n> Also if someone hasn't seen it yet, this is a super helpful tool for \n> larger JSX components: https:\/\/github.com\/madvas\/jsx-to-clojurescript\n>\n> Thanks!\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [reagent] react-beautiful-dnd question Reefersleep Sat, 14 Apr 2018 14:08:42 -0700"},
{"body":"Interesting, thanks for sharing! Agree that being able to visualize trees \n(especially maps) is very useful. \nOn Tuesday, April 10, 2018 at 2:21:37 PM UTC-7, Juan Monetta wrote:\n>\n> Hi! While working on some tooling ended up creating a couple of libraries \n> maybe someone else find useful.\n>\n> reagent-flowgraph <https:\/\/github.com\/jpmonettas\/reagent-flowgraph> A \n> reagent component for laying out tree nodes in 2D space.\n> clj-tree-layout <https:\/\/github.com\/jpmonettas\/clj-tree-layout> A library \n> for laying out tree nodes in 2D space for Clojure and ClojureScript.\n>\n> Since in Clojure we are surrounded by trees (deps, specs, namespaces, \n> sexp, execution flow, etc) I think having a way to represent them \n> graphically could lead to interesting tools.\n>\n> Juan\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] reagent-flowgraph and clj-tree-layout Wei Hsu Wed, 11 Apr 2018 09:04:25 -0700"},
{"body":"Hi! While working on some tooling ended up creating a couple of libraries \nmaybe someone else find useful. \nreagent-flowgraph <https:\/\/github.com\/jpmonettas\/reagent-flowgraph> A \nreagent component for laying out tree nodes in 2D space.\nclj-tree-layout <https:\/\/github.com\/jpmonettas\/clj-tree-layout> A library \nfor laying out tree nodes in 2D space for Clojure and ClojureScript.\n\nSince in Clojure we are surrounded by trees (deps, specs, namespaces, sexp, \nexecution flow, etc) I think having a way to represent them graphically \ncould lead to interesting tools.\n\nJuan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] reagent-flowgraph and clj-tree-layout Juan Monetta Tue, 10 Apr 2018 14:22:04 -0700"},
{"body":"Hi folks\n\nClojurists Together is an organisation dedicated to funding critical open\nsource Clojure projects. We fund projects on a 3-month cycle. Funding\nvaries based on member support, but in our current cycle we were able to\nfund clj-http and Figwheel $1800USD\/mo each for three months. Both projects\nhave made amazing progress, you can read more about them in our Feb\n<http:\/\/clojuriststogether.org\/news\/february-2018-monthly-update\/> and March\n<http:\/\/clojuriststogether.org\/news\/march-2018-monthly-update\/> updates. \nWe're gearing up for our next cycle and are soliciting proposals from the\nClojure\/ClojureScript community. We recently surveyed\n<https:\/\/clojuriststogether.org\/news\/q2-2018-survey-results\/> our members\nto see what they wanted us to fund. The main areas they were focused on\nwere documentation, build tooling, and libraries. *If you maintain a\nClojure project that is important to some or all of the Clojure community\nplease apply <https:\/\/clojuriststogether.org\/open-source\/> for our second\nfunding round.*\n\n*If you run or manage a company that relies on the Clojure open source\necosystem, we'd encourage you to consider joining as a company member\n<https:\/\/clojuriststogether.org\/news\/>. *We've had a great response from\nindividual developers, but only a handful of companies have joined as\nsponsors. A very special thanks to all of our members\n<https:\/\/clojuriststogether.org\/members\/>, we couldn't do any of this\nwithout your support.\n\nLet us know if you have any questions\/concerns, either here or at\nh...@clojuriststogether.org\n\nThanks, Daniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojurists Together Q2 2018 Call for Proposals Daniel Compton Tue, 10 Apr 2018 14:16:39 -0700"},
{"body":"Hi,\n  Reify Health is building clinical trial software using Clojure and\nClojureScript. We are looking for experienced developers who are\nknowledgeable in our stack or eager to learn it. We care about building\nmeaningful products, providing delightful user experiences\n<https:\/\/www.youtube.com\/watch?v=L8DKD_PshFM&t=1s> and actively listening\nto our users with the goal of continuous improvement. We actively use,\ncontribute\nto <https:\/\/github.com\/cljsjs\/packages\/commits?author=EmergentBehavior>\nand author\nopen source libraries <https:\/\/github.com\/reifyhealth\/specmonstah\/>. We've\nbeen early adopters of clojure.spec and have applications in re-frame and\nom.next. \nFor more details and to apply, see the frontend developer position\n<https:\/\/jobs.lever.co\/reifyhealth\/089e5e4c-13e9-49c8-93a9-11e7f5a8b78f?lever-origin=applied&lever-source%5B%5D=Local%20ML>\n and backend developer position\n<https:\/\/jobs.lever.co\/reifyhealth\/dd9f818f-d94c-4a0c-b97c-06e19f5939a2?lever-origin=applied&lever-source%5B%5D=Local%20ML>.\nIf you have any questions, feel free to email me at engineering-hiring at\nreifyhealth.com.\n\n*Cheers,*\n*Gabriel*\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [JOB] Clojure(Script) jobs at Reify Health | U.S Remote or Boston Gabriel Horner Mon, 09 Apr 2018 20:17:44 -0700"},
{"body":"We've just released v0.3.2\n<https:\/\/github.com\/Day8\/re-frame-10x\/releases\/tag\/0.3.2> which has two\nsmall improvements: \nChanged\n\n   - Updated cljs-devtools <https:\/\/github.com\/binaryage\/cljs-devtools> to\n   0.9.10, which includes a fix to render ClojureScript 1.10's MapEntry's in a\n   cleaner fashion. Note, if you are using cljs-devtools directly (and you\n   should be!) you will need to update your own version to 0.9.10 or higher.\n   - Efficiently print results in the code browser, so you only have to pay\n   for the cost of printing what is visible, not the entire data structure.\n   This should result in a big performance boost on apps which have a lot of\n   data in app-db.\n\n\nLet us know if you have any issues or questions, either here, on #re-frame\nin Clojurians Slack, or on GitHub.\n\nOn Thu, Apr 5, 2018 at 8:43 PM Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> Today we announce v0.3.1\n> <https:\/\/github.com\/Day8\/re-frame-10x\/releases\/tag\/0.3.1> of\n> re-frame-10x. It contains three headline features,\n> plus a few smaller fixes and quality of life improvements.\n>\n> *Demo App *\n>\n> Want to see it in action easily? Run TodoMVC with re-frame-10x attached:\n> https:\/\/jacekschae.github.io\/conduit-re-frame-10x-demo\/\n>\n> *Replay Button*\n>\n> There's a new \"Replay\" button that lets you re-run an event (generally\n> after tweaking some code).  This enables what we have salaciously named the \n> HotPlay\n> workflow\n> <https:\/\/github.com\/Day8\/re-frame-10x\/blob\/master\/docs\/HyperlinkedInformation\/ReplayButton.md>.\n> Good luck resisting.\n>\n> *REPL capture*\n>\n> We've linked\n> <https:\/\/github.com\/Day8\/re-frame-10x\/blob\/master\/docs\/HyperlinkedInformation\/UsingTheRepl.md>\n> re-frame-10x with your browser-connected REPL. It is easy now to experiment\n> directly with captured trace data using the full power of ClojureScript.\n> We've also written some docs\n> <https:\/\/github.com\/Day8\/re-frame-10x\/blob\/master\/docs\/HyperlinkedInformation\/UsingTheRepl.md>\n> on how to use this.\n>\n> Our thanks to Val Waeselynck for his scope capture\n> <https:\/\/github.com\/vvvvalvalval\/scope-capture> library, which acted as\n> an inspiration.\n>\n> *Code tracing indentation*\n>\n> Traced code is now displayed with indentations - traced forms deeper\n> in the stack are more deeply indented - which visually communicates context\n> and structure.\n>\n> The full release notes are available\n> <https:\/\/github.com\/Day8\/re-frame-10x\/releases\/tag\/0.3.1> on GitHub.\n>\n> Let us know if you have any issues or questions, either here, on #re-frame\n> in Clojurians Slack, or on GitHub.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] re-frame-10x 0.3.1 Daniel Compton Mon, 09 Apr 2018 16:26:15 -0700"},
{"body":"https:\/\/gist.github.com\/philoskim\/19bafdac0d9d5610408157e528c053d6 \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [TIP] How to get *ns* string in ClojureScript Philos Kim Mon, 09 Apr 2018 00:50:24 -0700"},
{"body":"https:\/\/gist.github.com\/philoskim\/19bafdac0d9d5610408157e528c053d6 \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [TIP] How to get *ns* string in ClojureScript Philos Kim Mon, 09 Apr 2018 00:50:18 -0700"},
{"body":"I found the way, so I want to share the tip with others here ( \nhttps:\/\/gist.github.com\/philoskim\/1d61574f69902c102d1a3c5c9112c6ba ). \n2018\ub144 4\uc6d4 6\uc77c \uae08\uc694\uc77c \uc624\uc804 11\uc2dc 36\ubd84 9\ucd08 UTC+9, Philos Kim \ub2d8\uc758 \ub9d0:\n>\n> I ran the follwoing code in the figwheel REPL and the result is an empty \n> list. \n>\n> How can I enumerate the ClojureScript macros?\n>\n> dev:cljs.user=> (->> (ns-publics 'cljs.core)\n>                      vals\n>                      (filter #(get (meta %) :macro)))\n> ()\n>\n>\n> Thanks in advance.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [?] How to enumerate the ClojureScript macros in ClojureScript REPL such as figwheel REPL Philos Kim Sun, 08 Apr 2018 19:38:26 -0700"},
{"body":"The answer to this can be pretty involved, so I'll just direct you to \nPlanck, which sets things up for deps.cljs files embedded in JARS on the \nclasspath around here \n \nhttps:\/\/github.com\/mfikes\/planck\/blob\/51b88aac41c77207f25eaefd5cd4a66ccb8fb17f\/planck-cljs\/src\/planck\/js_deps.cljs#L59\n\nand with Planck's *load-fn* ultimately making use of that information, with \n*load-fn* being set up in this namespace\n\n  https:\/\/github.com\/mfikes\/planck\/blob\/master\/planck-cljs\/src\/planck\/repl.cljs\n\nLumo also does the same thing IIRC, and you can probably find similar code \nin its repository.\n\n- Mike\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: self-hosted clojurescript eval-str and load-fn cljsjs dependencies Mike Fikes Sat, 07 Apr 2018 05:38:24 -0700"},
{"body":"(let [src  \"(require '[reagent.core :as r]) (r\/render (fn [] [:h1 \n\\\"Hello\\\"]) (js\/document.getElementById \\\"app\\\"))\"]\n  (cljs\/eval-str cljs-state src \"kernel.cljs\"\n                 {:eval (fn [m]\n                          (cljs\/js-eval m))\n                  :verbose true\n                  :load load-fn\n                  }\n                 (fn [result]\n                   (prn result))\n                 )\n) \n\nThe load-fn I implemented does not know where to find reagent's cljsjs \ndependencies. It does not know the path to create-react-class.js and \nreact-dom.js\n\nthat information is provided in the cljsjs package itself \n\n{:foreign-libs\n [{:file\n   \"cljsjs\/create-react-class\/development\/create-react-class.inc.js\",\n   :provides [\"cljsjs.create-react-class\" \"create-react-class\"],\n   :requires [\"react\"],\n   :file-min\n   \"cljsjs\/create-react-class\/production\/create-react-class.min.inc.js\",\n   :global-exports {create-react-class createReactClass}}],\n :externs\n [\"cljsjs\/create-react-class\/common\/create-react-class.ext.js\"]}\n\n\n\n I can see it on the filesystem\n\nsto@obi:~\/workspace\/stigmergy-webtop$ find . -name *react*\n.\/resources\/public\/js\/generated\/dev\/cljsjs\/create-react-class\n.\/resources\/public\/js\/generated\/dev\/cljsjs\/create-react-class\/development\/create-react-class.inc.js\n.\/resources\/public\/js\/generated\/dev\/cljsjs\/react\n.\/resources\/public\/js\/generated\/dev\/cljsjs\/react\/development\/react.inc.js\n.\/resources\/public\/js\/generated\/dev\/cljsjs\/react-dom\n.\/resources\/public\/js\/generated\/dev\/cljsjs\/react-dom\/development\/react-dom.inc.js\n\n\nThe question is how do I extract the foreign-libs meta data of where the \ndependency is in my load-fn?\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] self-hosted clojurescript eval-str and load-fn cljsjs dependencies Sonny To Sat, 07 Apr 2018 03:43:25 -0700"},
{"body":"I ran the follwoing code in the figwheel REPL and the result is an empty \nlist. \nHow can I enumerate the ClojureScript macros?\n\ndev:cljs.user=> (->> (ns-publics 'cljs.core)\n                     vals\n                     (filter #(get (meta %) :macro)))\n()\n\n\nThanks in advance.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [?] How to enumerate the ClojureScript macros in ClojureScript REPL such as figwheel REPL Philos Kim Thu, 05 Apr 2018 19:36:48 -0700"},
{"body":"Today we announce v0.3.1\n<https:\/\/github.com\/Day8\/re-frame-10x\/releases\/tag\/0.3.1> of re-frame-10x.\nIt contains three headline features,\nplus a few smaller fixes and quality of life improvements. \n*Demo App *\n\nWant to see it in action easily? Run TodoMVC with re-frame-10x attached:\nhttps:\/\/jacekschae.github.io\/conduit-re-frame-10x-demo\/\n\n*Replay Button*\n\nThere's a new \"Replay\" button that lets you re-run an event (generally\nafter tweaking some code).  This enables what we have salaciously\nnamed the HotPlay\nworkflow\n<https:\/\/github.com\/Day8\/re-frame-10x\/blob\/master\/docs\/HyperlinkedInformation\/ReplayButton.md>.\nGood luck resisting.\n\n*REPL capture*\n\nWe've linked\n<https:\/\/github.com\/Day8\/re-frame-10x\/blob\/master\/docs\/HyperlinkedInformation\/UsingTheRepl.md>\nre-frame-10x with your browser-connected REPL. It is easy now to experiment\ndirectly with captured trace data using the full power of ClojureScript.\nWe've also written some docs\n<https:\/\/github.com\/Day8\/re-frame-10x\/blob\/master\/docs\/HyperlinkedInformation\/UsingTheRepl.md>\non how to use this.\n\nOur thanks to Val Waeselynck for his scope capture\n<https:\/\/github.com\/vvvvalvalval\/scope-capture> library, which acted as an\ninspiration.\n\n*Code tracing indentation*\n\nTraced code is now displayed with indentations - traced forms deeper\nin the stack are more deeply indented - which visually communicates context\nand structure.\n\nThe full release notes are available\n<https:\/\/github.com\/Day8\/re-frame-10x\/releases\/tag\/0.3.1> on GitHub.\n\nLet us know if you have any issues or questions, either here, on #re-frame\nin Clojurians Slack, or on GitHub.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] re-frame-10x 0.3.1 Daniel Compton Thu, 05 Apr 2018 01:44:38 -0700"},
{"body":"Hey folks,\n\nOkLetsPlay is a young startup building LetsBet, a patented social betting \nplatform that enables real money and cryptocurrency betting on skill-based \nvideo games. \nWe're looking for an experienced and enthusiastic Clojure developer who will \nhelp pioneer both our distributed back-end and our mobile front-end. We like to \nkeep things clean, elegant, and well-tested; we're interested in someone who \nfeels the same. We're in the Bay Area and we're interested in a dev who is as \nwell.\n\nFront-end: ClojureScript + React Native + Firebase\nBack-end: Clojure + Heroku + Postgres + Firebase\n\nApply here: \nhttps:\/\/angel.co\/okletsplay\/jobs\/292089-software-engineer-clojure-developer\n\nOr email me: hiring at okletsplay.com\n\nCheers,\nJeaye\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [JOB] OkLetsPlay | SF Bay Area | Employee #3 Jeaye Mon, 02 Apr 2018 13:47:56 -0700"},
{"body":"https:\/\/github.com\/Zaphodious\/hireling \nHello all.\n\nI've been building a library to help work with service workers, and I have \nenough functionality that I can call it in \"alpha\". I'm looking for any \nfeedback ya'll can give me, as I want this to be as useful to the community \nas possible.\n\nThanks for your time.\n\n- Alex\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Published a service worker library to alpha. Thoughts? Alex Chythlook Mon, 02 Apr 2018 12:18:07 -0700"},
{"body":"Happy to announce Quil 2.7.1 release.\nQuil is a Clojure\/ClojureScript library for creating interactive drawings\nand animations. \nThe release available on clojars: http:\/\/clojars.org\/quil. List of changes:\n\n   -\n\n   Add resize-sketch function. #212\n   <https:\/\/github.com\/quil\/quil\/issues\/212>.\n   -\n\n   Add :enable\/disable-async-saveframe hints. Thanks to Jacob Maine.\n   -\n\n   Add display-ads function to embed advertising in sketches to make a few\n   bucks while sharing your art. Docs\n   <https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ>.\n   -\n\n   Pass event object to key-released handler in fun-mode. #209\n   <https:\/\/github.com\/quil\/quil\/issues\/209>.\n   -\n\n   Disable automatic setting of pixel density to be screen density. #202\n   <https:\/\/github.com\/quil\/quil\/issues\/202>.\n   -\n\n   Fix not working titles. See #236\n   <https:\/\/github.com\/quil\/quil\/issues\/236>. Thanks to @mishadoff\n   <https:\/\/github.com\/mishadoff>.\n   -\n\n   Fix random-2d and random-3d to produce uniformly distributed vectors.\n   Commit\n   \n<https:\/\/github.com\/quil\/quil\/commit\/dd447f44f6aba573212d13862920da47b868359b>\n   .\n   -\n\n   Update to Processing 3.3.7 and Processing.js to 1.6.6.\n   -\n\n   Partial Java 9 support. Doesn't work on Mac OS. See Processing plan\n   <https:\/\/github.com\/processing\/processing\/wiki\/Supported-Platforms#java-9>\n   for Java 9 support.\n\nDocumentation on http:\/\/quil.info has been updated.\n\nHappy hacking!\nNikita\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Quil 2.7.1 Release Nikita Beloglazov Sun, 01 Apr 2018 09:10:50 -0700"},
{"body":"Ok so I've deleted my project's out and .cpcache directories and my ~\/.m2 \ndirectory just in case there was something being cached between the two \nversions and this still isn't working as expected. There's nothing in the \nrelease notes at https:\/\/clojurescript.org\/news\/2018-03-26-release about \nchanges to compiler options in eval-str\/eval but before I log a bug, could \nsomeone else who has changed to 1.10.238 try this snippet to see if it \nworks? \n(ns my.sample\n  (:require [cljs.js :as cjs]))\n\n(enable-console-print!)\n\n(println (cjs\/eval-str (cjs\/empty-state) \"(+ 1 1)\" \"\" {:context :expr :eval \ncjs\/js-eval} identity))\n\nIn 1.9.946 it returns {:ns cljs.user, :value 2} and it's returning nil in \n1.10.238\n\nI'm testing in Chrome 65.0.3325.181\n\nThanks,\nRichard\n\nOn Wednesday, 28 March 2018 01:39:45 UTC+11, Richard Davies wrote:\n>\n> Hi,\n>\n> This code\n>   (cjs\/eval-str (cjs\/empty-state) \"(+ 1 1)\" \"some.name\" {:context :expr \n> :eval cjs\/js-eval} identity)\n>\n> executes as expected under 1.9.946, but in 1.10.238 returns nil. Do I need \n> to set different compiler options now, or is this a bug?\n>\n> I have tried eval under both versions and it behaves the same way; it's \n> only eval-str that seems to show a difference between versions.\n>\n> Regards,\n> Richard\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Differences in eval-str between ClojureScript 1.9.946 and 1.10.238 ? Richard Davies Fri, 30 Mar 2018 22:31:07 -0700"},
{"body":"oops i used the wrong function its supposed to be pp\/pprint\n\nOn Friday, March 30, 2018 at 6:17:06 AM UTC+3, Sonny To wrote:\n>\n> Launching ClojureScript REPL for build: dev\n> Figwheel Controls:\n>           (stop-autobuild)                ;; stops Figwheel autobuilder\n>           (start-autobuild [id ...])      ;; starts autobuilder focused on \n> optional ids\n>           (switch-to-build id ...)        ;; switches autobuilder to \n> different build\n>           (reset-autobuild)               ;; stops, cleans, and starts \n> autobuilder\n>           (reload-config)                 ;; reloads build config and \n> resets autobuild\n>           (build-once [id ...])           ;; builds source one time\n>           (clean-builds [id ..])          ;; deletes compiled cljs target \n> files\n>           (print-config [id ...])         ;; prints out build \n> configurations\n>           (fig-status)                    ;; displays current state of \n> system\n>           (figwheel.client\/set-autoload false)    ;; will turn autoloading \n> off\n>           (figwheel.client\/set-repl-pprint false) ;; will turn pretty \n> printing off\n>   Switch REPL build focus:\n>           :cljs\/quit                      ;; allows you to switch REPL to \n> another build\n>     Docs: (doc function-name-here)\n>     Exit: Control+C or :cljs\/quit\n>  Results: Stored in vars *1, *2, *3, *e holds last exception object\n> Prompt will show when Figwheel connects to your application\n> \"asyncInit\"\n> To quit, type: :cljs\/quit\n> nil\n> cljs.user=> (require '            [cljs.pprint :as pp]            )\n> nil\n> cljs.user=> (pp\/print 12)\n> #object[Error Error: No protocol method IWriter.-write defined for type \n> null: ]\n>    cljs.core\/missing-protocol \n> (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/core.cljs:316:4)\n>    cljs.core\/-write \n> (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/core.cljs:750:1)\n>    Function.cljs.pprint.print.cljs$core$IFn$_invoke$arity$variadic \n> (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/pprin\\\n> t.cljs:26:4)\n>    cljs$pprint$print \n> (jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/pprint.cljs:25:1)\n> nil\n>\n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Clojurescript 1.10.238 and pretty printing fails Sonny To Fri, 30 Mar 2018 02:03:47 -0700"},
{"body":"Launching ClojureScript REPL for build: dev\nFigwheel Controls:\n          (stop-autobuild)                ;; stops Figwheel autobuilder\n          (start-autobuild [id ...])      ;; starts autobuilder focused on \noptional ids\n          (switch-to-build id ...)        ;; switches autobuilder to \ndifferent build\n          (reset-autobuild)               ;; stops, cleans, and starts \nautobuilder\n          (reload-config)                 ;; reloads build config and \nresets autobuild\n          (build-once [id ...])           ;; builds source one time\n          (clean-builds [id ..])          ;; deletes compiled cljs target \nfiles\n          (print-config [id ...])         ;; prints out build configurations\n          (fig-status)                    ;; displays current state of \nsystem\n          (figwheel.client\/set-autoload false)    ;; will turn autoloading \noff\n          (figwheel.client\/set-repl-pprint false) ;; will turn pretty \nprinting off\n  Switch REPL build focus:\n          :cljs\/quit                      ;; allows you to switch REPL to \nanother build\n    Docs: (doc function-name-here)\n    Exit: Control+C or :cljs\/quit\n Results: Stored in vars *1, *2, *3, *e holds last exception object\nPrompt will show when Figwheel connects to your application\n\"asyncInit\"\nTo quit, type: :cljs\/quit\nnil\ncljs.user=> (require '            [cljs.pprint :as pp]            )\nnil\ncljs.user=> (pp\/print 12)\n#object[Error Error: No protocol method IWriter.-write defined for type \nnull: ]\n   cljs.core\/missing-protocol \n(jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/core.cljs:316:4)\n   cljs.core\/-write \n(jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/core.cljs:750:1)\n   Function.cljs.pprint.print.cljs$core$IFn$_invoke$arity$variadic \n(jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/pprin\\\nt.cljs:26:4)\n   cljs$pprint$print \n(jar:file:\/home\/sto\/.m2\/repository\/org\/clojure\/clojurescript\/1.10.238\/clojurescript-1.10.238.jar!\/cljs\/pprint.cljs:25:1)\nnil \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojurescript 1.10.238 and pretty printing fails Sonny To Thu, 29 Mar 2018 20:18:12 -0700"},
{"body":"I've been able to reproduce the same thing with the moment.js.\n\nThere's opened issue on the \nJIRA: https:\/\/dev.clojure.org\/jira\/browse\/CLJS-2708 \n\u0432\u0442\u043e\u0440\u043d\u0438\u043a, 27 \u043c\u0430\u0440\u0442\u0430 2018 \u0433., 21:46:30 UTC+3 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c David Nolen \u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n>\n> I believe there are issues with React 16 and Google Closure Compiler \n> module processing, try React 15 instead for now.\n>\n> David\n>\n> On Tue, Mar 27, 2018 at 3:24 AM, Marat Khafizov <xafi...@gmail.com \n> <javascript:>> wrote:\n>\n>> Hey there.\n>>\n>> I'm trying to use node destribution of reactjs with js module require.\n>>\n>> (defproject compile-cljs-node-modules-react \"0.1.0-SNAPSHOT\"\n>>   :description \"FIXME: write description\"\n>>   :url \"http:\/\/example.com\/FIXME\";\n>>   :license {:name \"Eclipse Public License\"\n>>             :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n>>   :dependencies [[org.clojure\/clojure \"1.8.0\"]\n>>                  [org.clojure\/clojurescript \"1.10.238\"]]\n>>   :plugins [[lein-cljsbuild \"1.1.7\"]]\n>>   \n>>   :cljsbuild \n>>   {:builds {:app\n>>               {:source-paths [\"src\"]\n>>                :compiler\n>>                {:main           \"compile-cljs-node-modules-react.core\"\n>>                 :asset-path    \"\/js\/out\"\n>>                 :output-to     \"target\/cljsbuild\/public\/js\/app.js\"\n>>                 :output-dir    \"target\/cljsbuild\/public\/js\/out\"\n>>                 :source-map    true\n>>                 :npm-deps      {:react \"16.2.0\" :react-dom \"16.2.0\"}\n>>                 :install-deps  true\n>>                 :optimizations :none\n>>                 :pretty-print  true}}}})\n>>\n>>\n>> SImple cljs file:\n>> (ns compile-cljs-node-modules-react.core\n>>   (:require [\"react-dom\/server\" :as dom-server]\n>>             [react :as react]))\n>>   \n>> (defn render-simple-markup []\n>>   (dom-server\/renderToString (react\/createElement \"div\" nil \"Hello, \n>> world!\")))\n>>\n>> When I run\n>> lein cljsbuild once app\n>>\n>> I get the following error:\n>> [eval]:85\n>>             !id.startsWith(goog:);\n>>                            ^^^^\n>>\n>> SyntaxError: missing ) after argument list\n>>     at createScript (vm.js:80:10)\n>>     at Object.runInThisContext (vm.js:139:10)\n>>     at Object.<anonymous> ([eval]-wrapper:6:22)\n>>     at Module._compile (module.js:635:30)\n>>     at evalScript (bootstrap_node.js:462:27)\n>>     at startup (bootstrap_node.js:163:9)\n>>     at bootstrap_node.js:608:3\n>>\n>> OS: windows 7\n>> npm version: 5.5.1\n>> node v8.9.3\n>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Clojurescript 1.10.238 fails to compile when using node modules for browser target in windows Marat Khafizov Tue, 27 Mar 2018 22:42:06 -0700"},
{"body":"I believe there are issues with React 16 and Google Closure Compiler module\nprocessing, try React 15 instead for now. \nDavid\n\nOn Tue, Mar 27, 2018 at 3:24 AM, Marat Khafizov <xafiz...@gmail.com> wrote:\n\n> Hey there.\n>\n> I'm trying to use node destribution of reactjs with js module require.\n>\n> (defproject compile-cljs-node-modules-react \"0.1.0-SNAPSHOT\"\n>   :description \"FIXME: write description\"\n>   :url \"http:\/\/example.com\/FIXME\";\n>   :license {:name \"Eclipse Public License\"\n>             :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n>   :dependencies [[org.clojure\/clojure \"1.8.0\"]\n>                  [org.clojure\/clojurescript \"1.10.238\"]]\n>   :plugins [[lein-cljsbuild \"1.1.7\"]]\n>\n>   :cljsbuild\n>   {:builds {:app\n>               {:source-paths [\"src\"]\n>                :compiler\n>                {:main           \"compile-cljs-node-modules-react.core\"\n>                 :asset-path    \"\/js\/out\"\n>                 :output-to     \"target\/cljsbuild\/public\/js\/app.js\"\n>                 :output-dir    \"target\/cljsbuild\/public\/js\/out\"\n>                 :source-map    true\n>                 :npm-deps      {:react \"16.2.0\" :react-dom \"16.2.0\"}\n>                 :install-deps  true\n>                 :optimizations :none\n>                 :pretty-print  true}}}})\n>\n>\n> SImple cljs file:\n> (ns compile-cljs-node-modules-react.core\n>   (:require [\"react-dom\/server\" :as dom-server]\n>             [react :as react]))\n>\n> (defn render-simple-markup []\n>   (dom-server\/renderToString (react\/createElement \"div\" nil \"Hello,\n> world!\")))\n>\n> When I run\n> lein cljsbuild once app\n>\n> I get the following error:\n> [eval]:85\n>             !id.startsWith(goog:);\n>                            ^^^^\n>\n> SyntaxError: missing ) after argument list\n>     at createScript (vm.js:80:10)\n>     at Object.runInThisContext (vm.js:139:10)\n>     at Object.<anonymous> ([eval]-wrapper:6:22)\n>     at Module._compile (module.js:635:30)\n>     at evalScript (bootstrap_node.js:462:27)\n>     at startup (bootstrap_node.js:163:9)\n>     at bootstrap_node.js:608:3\n>\n> OS: windows 7\n> npm version: 5.5.1\n> node v8.9.3\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Clojurescript 1.10.238 fails to compile when using node modules for browser target in windows David Nolen Tue, 27 Mar 2018 11:46:39 -0700"},
{"body":"Hey there.\n\nI'm trying to use node distribution of react 16 with reagent 0.8.0-alpha2. \nI do: \n   1. lein new reagent reagent-app\n   2. Change reagent version to 0.8.0-alpha2\n   3. npm install react react-dom\n   4. lein cljsbuild once app\n\nActual result:\n\n[eval]:85\n            !id.startsWith(goog:);\n                           ^^^^\n\nSyntaxError: missing ) after argument list\n    at createScript (vm.js:80:10)\n    at Object.runInThisContext (vm.js:139:10)\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:635:30)\n    at evalScript (bootstrap_node.js:462:27)\n    at startup (bootstrap_node.js:163:9)\n    at bootstrap_node.js:608:3\n\nOS: windows 7\nnpm version: 5.5.1\nnode v8.9.3\n\n\nRelated issue for \nreagent: https:\/\/github.com\/reagent-project\/reagent\/issues\/357\n\n\nThanks\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojurescript 1.10.238 fails to compile with node_modules for browser build Marat Khafizov Tue, 27 Mar 2018 07:43:52 -0700"},
{"body":"Hey there.\n\nI'm trying to use node destribution of reactjs with js module require. \n(defproject compile-cljs-node-modules-react \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http:\/\/example.com\/FIXME\";\n  :license {:name \"Eclipse Public License\"\n            :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n  :dependencies [[org.clojure\/clojure \"1.8.0\"]\n                 [org.clojure\/clojurescript \"1.10.238\"]]\n  :plugins [[lein-cljsbuild \"1.1.7\"]]\n  \n  :cljsbuild \n  {:builds {:app\n              {:source-paths [\"src\"]\n               :compiler\n               {:main           \"compile-cljs-node-modules-react.core\"\n                :asset-path    \"\/js\/out\"\n                :output-to     \"target\/cljsbuild\/public\/js\/app.js\"\n                :output-dir    \"target\/cljsbuild\/public\/js\/out\"\n                :source-map    true\n                :npm-deps      {:react \"16.2.0\" :react-dom \"16.2.0\"}\n                :install-deps  true\n                :optimizations :none\n                :pretty-print  true}}}})\n\n\nSImple cljs file:\n(ns compile-cljs-node-modules-react.core\n  (:require [\"react-dom\/server\" :as dom-server]\n            [react :as react]))\n  \n(defn render-simple-markup []\n  (dom-server\/renderToString (react\/createElement \"div\" nil \"Hello, \nworld!\")))\n\nWhen I run\nlein cljsbuild once app\n\nI get the following error:\n[eval]:85\n            !id.startsWith(goog:);\n                           ^^^^\n\nSyntaxError: missing ) after argument list\n    at createScript (vm.js:80:10)\n    at Object.runInThisContext (vm.js:139:10)\n    at Object.<anonymous> ([eval]-wrapper:6:22)\n    at Module._compile (module.js:635:30)\n    at evalScript (bootstrap_node.js:462:27)\n    at startup (bootstrap_node.js:163:9)\n    at bootstrap_node.js:608:3\n\nOS: windows 7\nnpm version: 5.5.1\nnode v8.9.3\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojurescript 1.10.238 fails to compile when using node modules for browser target in windows Marat Khafizov Tue, 27 Mar 2018 07:40:29 -0700"},
{"body":"Hi,\n\nThis code\n  (cjs\/eval-str (cjs\/empty-state) \"(+ 1 1)\" \"some.name\" {:context :expr \n:eval cjs\/js-eval} identity) \nexecutes as expected under 1.9.946, but in 1.10.238 returns nil. Do I need \nto set different compiler options now, or is this a bug?\n\nI have tried eval under both versions and it behaves the same way; it's \nonly eval-str that seems to show a difference between versions.\n\nRegards,\nRichard\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Differences in eval-str between ClojureScript 1.9.946 and 1.10.238 ? Richard Davies Tue, 27 Mar 2018 07:40:23 -0700"},
{"body":"Thanks, David.\n\nI still need: \n:jvm-opts [\"--add-modules\" \"java.xml.bind\"]\n\n... in my projects.clj it seems.\n\ngvim\n\n\n\nOn 26\/03\/2018 13:26, David Nolen wrote:\n ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript\n\nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.10.238\"]\n\nThis release contains a very large number of enhancements. Please\nrefer to the announce post for details:\nhttps:\/\/clojurescript.org\/news\/2018-03-26-release\n\nAs always, feedback welcome!\n\n## 1.10.238\n\n### Enhancements\n* cljs.main, simple command line access to Compiler & REPLs\n* cljs.server.* namespaces for integration with -Dclojure.server.repl\n* :aot-cache compiler to enable global AOT caching of dependencies in JARs\n* :stable-names compiler flag, to support vendorization when using\n:modules,\n   defaults to true when using :modules.\n* Add :webworker & :nashorn target\n* pREPL implementation (usage requires Clojure 1.10.0-alpha)\n\n### Changes\n* * CLJS-2592: :npm-deps using ES6 modules with .mjs extensions are not\ndetected correctly\n* AOTed ClojureScript artifact is now the default, for sources only use the\n   \"slim\" Maven classifier\n* Bump Closure Compiler\n* REPL now show uniform prompts\n* CLJS-2660: Add cljs.core\/eval which, delegates to an overridable *eval*\n* CLJS-2375: Remove AMD Module Support\n* CLJS-2413: Port core.specs.alpha to ClojureScript\n* CLJS-2423: Allow custom :output-wrapper function\n* Map entries are no longer two element vectors, now MapEntry instances\n* *print-fn* automatically set\n* CLJS-2561: AOT compile browser REPL client js\n* CLJS-2581: Create a cljs.repl\/*repl-env* dynamic var and bind it\naround cljs repl loops\n\n### Fixes\n* CLJS-2680: Passing :watch-fn via --compile-opts to cljs.main\n* CLJS-2692: cljs.core.specs.alpha: Import list needs to require quote\n* CLJS-2696: Large code size in Clojurescript 1.10.x for minimal code\nwith optimizations advanced\n* CLJS-2699: Use higher-level Closure API for module-processing\n* CLJS-2691: goog.require in module-processed files shouldn't require\ngoog.base\n* CLJS-2689: Don't try to use node resolve for goog: modules\n* CLJS-2676: Bad cljs.loader behavior for modules with multiple provides\n* CLJS-2673: Regression: Can't require cljs.js\n* CLJS-2650: Fix JAR compilation of cljs.loader\n* CLJS-2671: Double analysis warning for source in JAR with AOT cache\n* CLJS-2643: Socket REPL output can be directed to the wrong place\n* CLJS-2670: Update cljs.compiler\/warning-types\n* CLJS-2491: Inference warnings are not reported\n* CLJS-2653: REPL crash when mapping stacktrace in Chrome for js\/blah\n* CLJS-2639: Compiler crash when using aot cache with parallel compile\n* CLJS-2520: Synthesize ClojureScript version if using non-built\nClojureScript dep\n* CLJS-2522: Handle sources that are maps in build-modules\n* CLJS-2521: Only expand module graph when modules are actually used\n* CLJS-2519: Module loader doesn't load :cljs-base properly\n* CLJS-2493: Self host: respect :source-map-timestamp compiler option\n* CLJS-2500: Call process-js-modules after compiler restart\n* CLJS-2516 Build API fails targeting Node (QuickStart)\n* CLJS-2462: subvec on non-integral indexes fails\n* CLJS-2474: with-meta on lazy-seq causes separate realization\n* CLJS-2501: Fix crash in cljs.util\/compiled-by-version and build-options\n* CLJS-2476: recur across try should fail compilation\n* CLJS-2495: Closure compilation errors should stop Cljs compilation\n* CLJS-2496 PHM seq and iter should return MapEntry on nil key case\n* CLJS-2473: Infer character literals to have string type\n* CLJS-2455: nth fails on eduction\n* CLJS-2001: Add map-entry? predicate\n* CLJS-2131: Calling empty on a ChunkedSeq should return empty list\n* CLJS-1743: Transient maps should support IFn\n* CLJS-2452: reverse empty vector returns nil\n* CLJS-2450: Allow configuring ignored JS module extensions\n* CLJS-2417: Inter-ns s\/fdef expansion side effect fails when load\ncached source\n* CLJS-2447: Ignore css JS modules\n* CLJS-2397: Multi-arity function instrumentation fails with :static-fns\ntrue\n   CLJS-2197: Calling instrumented var fails to check conformance\n* CLJS-2443: doseq should return nil with no collections\n* CLJS-2430: Fix foreign-libs with Node target\n* CLJS-2414: Self-host: Macro specs are instrumented\n* CLJS-2387: CLJS Analyzer does not correctly detect cache hits for\nanalyzed spec files\n* CLJS-2405: Register dumped specs fails\n* CLJS-2416: Self-host: defn macro Var doesn't have :macro true meta\n* CLJS-2425: Remove unnecessary zero? checks from nat-int?\n* CLJS-2377: The CLJS compiled uses deprecated modules on Java 9\n* Allow clj->js to preserve namespaces\n* CLJS-2391: Unable to :stub a function using stest\/instrument\n* CLJS-2378: keep the :npm-deps-installed? to avoid to reinstall NPM deps\n\n--\nNote that posts from new members are moderated - please be patient with\nyour first post.\n---\nYou received this message because you are subscribed to the Google\nGroups \"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send\nan email to clojurescript+unsubscr...@googlegroups.com\n<mailto:clojurescript+unsubscr...@googlegroups.com>.\nTo post to this group, send email to clojurescript@googlegroups.com\n<mailto:clojurescript@googlegroups.com>.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n \n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- You received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] ANN: ClojureScript 1.10.238, cljs.main & more gvim Mon, 26 Mar 2018 07:09:21 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.10.238\"]\n\nThis release contains a very large number of enhancements. Please\nrefer to the announce post for details:\nhttps:\/\/clojurescript.org\/news\/2018-03-26-release\n\nAs always, feedback welcome!\n\n## 1.10.238\n\n### Enhancements\n* cljs.main, simple command line access to Compiler & REPLs\n* cljs.server.* namespaces for integration with -Dclojure.server.repl\n* :aot-cache compiler to enable global AOT caching of dependencies in JARs\n* :stable-names compiler flag, to support vendorization when using\n:modules,\n  defaults to true when using :modules.\n* Add :webworker & :nashorn target\n* pREPL implementation (usage requires Clojure 1.10.0-alpha)\n\n### Changes\n* * CLJS-2592: :npm-deps using ES6 modules with .mjs extensions are not\ndetected correctly\n* AOTed ClojureScript artifact is now the default, for sources only use the\n  \"slim\" Maven classifier\n* Bump Closure Compiler\n* REPL now show uniform prompts\n* CLJS-2660: Add cljs.core\/eval which, delegates to an overridable *eval*\n* CLJS-2375: Remove AMD Module Support\n* CLJS-2413: Port core.specs.alpha to ClojureScript\n* CLJS-2423: Allow custom :output-wrapper function\n* Map entries are no longer two element vectors, now MapEntry instances\n* *print-fn* automatically set\n* CLJS-2561: AOT compile browser REPL client js\n* CLJS-2581: Create a cljs.repl\/*repl-env* dynamic var and bind it around\ncljs repl loops\n\n### Fixes\n* CLJS-2680: Passing :watch-fn via --compile-opts to cljs.main\n* CLJS-2692: cljs.core.specs.alpha: Import list needs to require quote\n* CLJS-2696: Large code size in Clojurescript 1.10.x for minimal code with\noptimizations advanced\n* CLJS-2699: Use higher-level Closure API for module-processing\n* CLJS-2691: goog.require in module-processed files shouldn't require\ngoog.base\n* CLJS-2689: Don't try to use node resolve for goog: modules\n* CLJS-2676: Bad cljs.loader behavior for modules with multiple provides\n* CLJS-2673: Regression: Can't require cljs.js\n* CLJS-2650: Fix JAR compilation of cljs.loader\n* CLJS-2671: Double analysis warning for source in JAR with AOT cache\n* CLJS-2643: Socket REPL output can be directed to the wrong place\n* CLJS-2670: Update cljs.compiler\/warning-types\n* CLJS-2491: Inference warnings are not reported\n* CLJS-2653: REPL crash when mapping stacktrace in Chrome for js\/blah\n* CLJS-2639: Compiler crash when using aot cache with parallel compile\n* CLJS-2520: Synthesize ClojureScript version if using non-built\nClojureScript dep\n* CLJS-2522: Handle sources that are maps in build-modules\n* CLJS-2521: Only expand module graph when modules are actually used\n* CLJS-2519: Module loader doesn't load :cljs-base properly\n* CLJS-2493: Self host: respect :source-map-timestamp compiler option\n* CLJS-2500: Call process-js-modules after compiler restart\n* CLJS-2516 Build API fails targeting Node (QuickStart)\n* CLJS-2462: subvec on non-integral indexes fails\n* CLJS-2474: with-meta on lazy-seq causes separate realization\n* CLJS-2501: Fix crash in cljs.util\/compiled-by-version and build-options\n* CLJS-2476: recur across try should fail compilation\n* CLJS-2495: Closure compilation errors should stop Cljs compilation\n* CLJS-2496 PHM seq and iter should return MapEntry on nil key case\n* CLJS-2473: Infer character literals to have string type\n* CLJS-2455: nth fails on eduction\n* CLJS-2001: Add map-entry? predicate\n* CLJS-2131: Calling empty on a ChunkedSeq should return empty list\n* CLJS-1743: Transient maps should support IFn\n* CLJS-2452: reverse empty vector returns nil\n* CLJS-2450: Allow configuring ignored JS module extensions\n* CLJS-2417: Inter-ns s\/fdef expansion side effect fails when load cached\nsource\n* CLJS-2447: Ignore css JS modules\n* CLJS-2397: Multi-arity function instrumentation fails with :static-fns\ntrue\n  CLJS-2197: Calling instrumented var fails to check conformance\n* CLJS-2443: doseq should return nil with no collections\n* CLJS-2430: Fix foreign-libs with Node target\n* CLJS-2414: Self-host: Macro specs are instrumented\n* CLJS-2387: CLJS Analyzer does not correctly detect cache hits for\nanalyzed spec files\n* CLJS-2405: Register dumped specs fails\n* CLJS-2416: Self-host: defn macro Var doesn't have :macro true meta\n* CLJS-2425: Remove unnecessary zero? checks from nat-int?\n* CLJS-2377: The CLJS compiled uses deprecated modules on Java 9\n* Allow clj->js to preserve namespaces\n* CLJS-2391: Unable to :stub a function using stest\/instrument\n* CLJS-2378: keep the :npm-deps-installed? to avoid to reinstall NPM deps\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.10.238, cljs.main & more David Nolen Mon, 26 Mar 2018 05:27:07 -0700"},
{"body":"Followed the javascript-modules \n<https:\/\/clojurescript.org\/guides\/javascript-modules> guide on the official \nsite,  and use the latest clojurescript version 1.10.238.\nAnd the compiled this:\n(defn -main [& args]\n  (hello\/sayHello)) \n\nthen run `node main.js`, there comes the error message: \n'module$path$to$src$js$hello.sayHello is not a function'.\nI checked the compiled js file, and here is the content:\ngoog.provide(\"module$path$to$src$js$hello\");\nvar sayHello$$module$path$to$src$js$hello=function(){console.log(\"hello, \nworld!\")};console.log(\"i am changed in hello.\");\nsayHello$$module$path$to$src$js$hello();\n\n*var module$path$to$src$js$hello={};*\nmodule$path$to$src$js$hello.sayHello=sayHello$$module$path$to$src$js$hello;\n\n\n\nAnd if I remove the  module variable declare line, or add a line \n'*goog.exportSymbol(\"module$path$to$src$js$hello\", \nmodule$path$to$src$js$hello);*',\nthen *`node main.js`* will run without error.\n\nIs this an issue of clojurescript, or closure compiler?\n\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Use javascript module guide not work Meng Du Sun, 25 Mar 2018 23:11:00 -0700"},
{"body":"Thanks for the update!\n\nAlan \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: re-frame-10x 0.3.0 Alan Moore Sat, 24 Mar 2018 21:44:22 -0700"},
{"body":"This looks awesome - well done to you all!\n\nSent from my iPhone \n> On 24 Mar 2018, at 08:49, Daniel Compton <daniel.compton.li...@gmail.com> \n> wrote:\n> \n> Look, without wanting to hype it too much, re-frame-10x 0.3.0 contains a \n> feature likely to send ecstatic, Kundalini energy surging through every \n> chakra in your body. The windows of your room might blast outwards as you \n> read about it. (In a world where everything is \"awesome\", \"all the time\", how \n> do we indicate something is interesting and worth a look?).\n> \n> `re-frame-10x` now provides an interactive, explorative UI through which you \n> can browse the form-by-form execution trace of the ClojureScript code in your \n> event handlers.  You can inspect the data produced by every ClojureScript \n> form, while retaining overall context.\n> \n> <estim8-demo.png>\n> \n> To instrument the code in an event handler, simply replace your current use \n> of `fn` or `defn` with with the alternatives `fn-traced` or `defn-traced`. \n> \n> (ns my.app\n>   (:require [day8.re-frame.tracing :refer-macros [fn-traced defn-traced]]))\n> \n> (re-frame.core\/reg-event-db \n>   :some-event\n>   (fn-traced [db event]     ;; <--- use `fn-traced` instead of `fn`\n>      ; ... code in here to be traced\n>      ))\n> \n> Instructions for enabling the code tracing are available at \n> https:\/\/github.com\/Day8\/re-frame-debux.\n> \n> Limitations\/cautions:\n> * This code tracing feature should be considered experimental but still \n> useful. \n> * Currently only first level re-frame event handlers should be traced (not \n> the functions they call).\n> * Operations like `map` or `for` operating on big sequences will generate too \n> much trace.  That will be a problem. Don't enable tracing for event handlers \n> which have that sort of processing. Not yet. \n> * Our logic for tracing may still have a few bugs. Early days. Please report \n> issues, we'll try and take care of them ASAP.\n> \n> Credit:\n> \n> This new feature wouldn't have been possible without the great work of Philos \n> Kim on debux. We have forked debux to make it fit with the re-frame tracing \n> system, and extend the code tracing, but a lot of the credit goes to him for \n> creating it in the first place.\n> \n> Enjoy!\n> \n> Daniel Compton, Mike Thompson, Gregg Ramsey, and the Day8 team.\n> -- \n> You received this message because you are subscribed to the Google Groups \n> \"Reagent-Project\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to reagent-project+unsubscr...@googlegroups.com.\n> To post to this group, send email to reagent-proj...@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/reagent-project.\n> For more options, visit https:\/\/groups.google.com\/d\/optout.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [reagent] ANN: re-frame-10x 0.3.0 Colin Yates Sat, 24 Mar 2018 01:55:23 -0700"},
{"body":"(defmacro foo [x] (str x))\n\n(foo a\/b) \nCLJ: \"a\/b\"\nCLJS: No such namespace: a, could not locate a.cljs, a.cljc, or JavaScript \nsource providing \"a\"\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Is this intended? Can't pass a namespaced sym to a macro unquoted. Leon Grapenthin Thu, 22 Mar 2018 14:14:20 -0700"},
{"body":"Antonin,\n\nIt's an interesting theory and possibly not far from the truth, however I \njust counted my go loop which was experiencing the issue and I only have 3 \n<! operations. I suspect there is something else going on, but what exactly \nit is I can't say. \nIt's good to know that if I ever do run into a situation where I need 18 or \nmore <! calls then a) there is a known issue which I'm now aware of and b) \nthere's a workaround for it. I don't think having this many or even more \ncalls is too complex at all.\n\nCheers,\nAli\n\nOn Wednesday, March 21, 2018 at 2:43:02 PM UTC+5:30, Antonin Hildebrand \nwrote:\n>\n> Hi Ali,\n>\n> For usage please look at the commit which introduced that code (or search \n> current Dirac code base):\n>\n> https:\/\/github.com\/binaryage\/dirac\/commit\/cce56470975a287c0164e6f79cd525d6ed27a543\n>\n> https:\/\/github.com\/binaryage\/dirac\/search?q=chunkify&type=Code&utf8=%E2%9C%93\n>\n> Further explanation:\n> My theory is that the go-macro can handle only limited complexity under \n> ClojureScript. When you hit that threshold the ClojureScript compiler ends \n> up entering infinite recursion. In my code the threshold was 18 async \n> operations (<!) inside a single go block. A workaround was to break complex \n> go block at hand into multiple smaller go blocks nested in a newly \n> introduced parent go block. That is what chunkify macro does - it rewrites \n> existing code to series of nested go blocks. \n>\n> I think this bug is triggered by a specific way how go-macro rewrites the \n> form. At some point it is probably emitting an apply call which triggers \n> CLJS-365. This bug has been unresolved because almost nobody is writing go \n> blocks so complex to hit this problem.\n>\n> But I might be absolutely wrong with this theory. I didn't really dive \n> deep and investigate the real cause.\n>\n> good luck,\n> Antonin\n>\n>\n>\n>\n> On Wednesday, March 21, 2018 at 5:33:00 AM UTC+1, outr...@gmail.com wrote:\n>>\n>> Hi Antonin,\n>>\n>> Thank you for the explanation and links. While the workaround that Moe \n>> suggested does indeed remove all occurrences of the issue, is this \n>> chunkify macro something that should be used somewhere in code, and if \n>> so do you know how?\n>>\n>> Best,\n>> Ali\n>>\n>> On Tuesday, March 20, 2018 at 8:41:44 PM UTC+5:30, Antonin Hildebrand \n>> wrote:\n>>>\n>>> Hi Ali,\n>>>\n>>> I believe I encountered the same issue. And believe it is a bug in cljs \n>>> compiler related to https:\/\/dev.clojure.org\/jira\/browse\/CLJS-365.\n>>>\n>>>\n>>> https:\/\/github.com\/binaryage\/dirac\/blob\/5a373e11d5d03d7057769d170f2599117dbae4b0\/src\/automation\/dirac\/automation.clj#L27-L39\n>>>  \n>>> <https:\/\/www.google.com\/url?q=https%3A%2F%2Fgithub.com%2Fbinaryage%2Fdirac%2Fblob%2F5a373e11d5d03d7057769d170f2599117dbae4b0%2Fsrc%2Fautomation%2Fdirac%2Fautomation.clj%23L27-L39&sa=D&sntz=1&usg=AFQjCNGtEMGxX2Yrm8O-tUccvvNscTtW2Q>\n>>>\n>>> regards,\n>>> Antonin\n>>>\n>>>\n>>> On Tuesday, March 20, 2018 at 11:34:29 AM UTC+1, outr...@gmail.com \n>>> wrote:\n>>>>\n>>>> Moe,\n>>>>\n>>>> Great news: replacing cond with case got rid of the issue in all the \n>>>> cases I mentioned. Like you I can't explain it either but it's good to \n>>>> know \n>>>> there is a workaround. Thank you!\n>>>>\n>>>> Cheers,\n>>>> Ali\n>>>>\n>>>>\n>>>> On Tuesday, March 20, 2018 at 3:25:03 PM UTC+5:30, Moe Aboulkheir wrote:\n>>>>>\n>>>>> Ali,\n>>>>>\n>>>>> I don't have any colour on the underlying cause of the problem, but \n>>>>> I'd be interested to know whether you see it with 'case' as well as \n>>>>> 'cond', \n>>>>> as I vaguely remember running into something like this (in cljs, only).\n>>>>>\n>>>>> Take care,\n>>>>> Moe\n>>>>>\n>>>>> On Tue, Mar 20, 2018 at 7:33 AM, <outr...@gmail.com> wrote:\n>>>>>\n>>>>>> Hello,\n>>>>>>\n>>>>>> I'm running into a very strange issue which, having searched the web, \n>>>>>> no one seems to have reported. \n>>>>>>\n>>>>>> In short, I have a go block similar to the following (simplified for \n>>>>>> posting purposes, however I can post the full code if required):\n>>>>>>\n>>>>>> (go \n>>>>>>  (while true \n>>>>>>    (let [[cmd event-args] (<! mouse-chan)]]\n>>>>>>      ...\n>>>>>>      (cond\n>>>>>>        (= cmd :down)\n>>>>>>        (let [ ... ] ...)\n>>>>>>\n>>>>>>        (= cmd :in)\n>>>>>>        (let [ ... ] ...)\n>>>>>>\n>>>>>>        (= cmd :hover)\n>>>>>>        (let [ ... ] ...)\n>>>>>>\n>>>>>>        (= cmd :handle-down)\n>>>>>>        (let [ ... ] ...)\n>>>>>>\n>>>>>>\n>>>>>>      )\n>>>>>> )) \n>>>>>>\n>>>>>>\n>>>>>> Essentially I have a number of mouse handlers (mousedown, mouseup, \n>>>>>> mouseover, mouseout, ...) which put! a [cmd event-args] vector onto \n>>>>>> mouse-chan, which is subsequently taken in the above block.\n>>>>>>\n>>>>>> Generally speaking, the block compiles successfully, however under \n>>>>>> certain conditions it just \"breaks\", specifically by producing a:\n>>>>>>\n>>>>>> java.lang.StackOverflowError\n>>>>>>\n>>>>>> during compilation.\n>>>>>>\n>>>>>> At present I have 4 branches within the cond block. Within one of \n>>>>>> those branches I have a loop\/recur which takes (via <!) from the same \n>>>>>> channel as in the outermost block. This works absolutely fine until I \n>>>>>> try \n>>>>>> one of the following, which results in the above compilation error:\n>>>>>>\n>>>>>> * adding a fifth branch\n>>>>>>\n>>>>>> * with just the 4 branches in place, if I add even something as \n>>>>>> simple as the following expression:\n>>>>>>\n>>>>>> (when major-in\n>>>>>>   (major-in event-args))\n>>>>>>\n>>>>>> where major-in is either a function or nil\n>>>>>>\n>>>>>> * and the strangest thing of all, if I simply use *map \n>>>>>> deconstruction* at one point in one of the cond branches, I also get \n>>>>>> the same compilation error:\n>>>>>>\n>>>>>> (let [{:keys [x y w h]} (rect-ent-layout ghost-rect)\n>>>>>>           ;; Even this doesn't work if I uncomment it and comment out \n>>>>>> the previous\n>>>>>>      ;; {} ()\n>>>>>>\n>>>>>> ] ...)\n>>>>>>\n>>>>>> but doing the following, which doesn't involve deconstruction, is \n>>>>>> fine:\n>>>>>>\n>>>>>> (let [stuff (rect-ent-layout ghost-rect)\n>>>>>>       x (:x stuff)\n>>>>>>       y (:y stuff)\n>>>>>>       w (:w stuff)\n>>>>>>       h (:h stuff)] ...)\n>>>>>>\n>>>>>> In terms of limitations on core.async go blocks, I am only aware of \n>>>>>> the functional boundary limitation, namely that you cannot create \n>>>>>> anonymous \n>>>>>> functions within a go block which perform any puts\/takes, asynchronous \n>>>>>> or \n>>>>>> otherwise. Beyond that I can't find anything in the documentation which \n>>>>>> would indicate that there are any other limitations. \n>>>>>>\n>>>>>> I am also aware that some macros do create functions, e.g. for, but \n>>>>>> I am not using anything like that. \n>>>>>>\n>>>>>> I'm running a CLJS project with the following dependencies:\n>>>>>>\n>>>>>> [org.clojure\/clojure \"1.9.0-beta4\"]\n>>>>>> [org.clojure\/clojurescript \"1.9.946\"]\n>>>>>> [org.clojure\/core.async  \"0.3.443\"]\n>>>>>>\n>>>>>> I'm also using Reagent and developing using Figwheel. The Compilation \n>>>>>> Error in fact is show in a Figwheel overlay.\n>>>>>>\n>>>>>> I have tried to isolate the issue but I can't seem to pinpoint what \n>>>>>> exactly is causing it.\n>>>>>>\n>>>>>> Has anyone every come across something like this before when working \n>>>>>> with core.async, specifically the java.lang.StackOverflowError \n>>>>>> compilation error? If not, without posting the full code, can anyone \n>>>>>> see anything with the above code which might cause such an issue? \n>>>>>>\n>>>>>> Thank you,\n>>>>>>\n>>>>>> Ali\n>>>>>>\n>>>>>> -- \n>>>>>> Note that posts from new members are moderated - please be patient \n>>>>>> with your first post.\n>>>>>> --- \n>>>>>> You received this message because you are subscribed to the Google \n>>>>>> Groups \"ClojureScript\" group.\n>>>>>> To unsubscribe from this group and stop receiving emails from it, \n>>>>>> send an email to clojurescrip...@googlegroups.com.\n>>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>>\n>>>>>\n>>>>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Is core.async \"broken\", or is it something I'm doing? outrovurt Wed, 21 Mar 2018 04:25:14 -0700"},
{"body":"Hi Ali,\n\nFor usage please look at the commit which introduced that code (or search \ncurrent Dirac code base):\nhttps:\/\/github.com\/binaryage\/dirac\/commit\/cce56470975a287c0164e6f79cd525d6ed27a543\nhttps:\/\/github.com\/binaryage\/dirac\/search?q=chunkify&type=Code&utf8=%E2%9C%93 \nFurther explanation:\nMy theory is that the go-macro can handle only limited complexity under \nClojureScript. When you hit that threshold the ClojureScript compiler ends \nup entering infinite recursion. In my code the threshold was 18 async \noperations (<!) inside a single go block. A workaround was to break complex \ngo block at hand into multiple smaller go blocks nested in a newly \nintroduced parent go block. That is what chunkify macro does - it rewrites \nexisting code to series of nested go blocks. \n\nI think this bug is triggered by a specific way how go-macro rewrites the \nform. At some point it is probably emitting an apply call which triggers \nCLJS-365. This bug has been unresolved because almost nobody is writing go \nblocks so complex to hit this problem.\n\nBut I might be absolutely wrong with this theory. I didn't really dive deep \nand investigate the real cause.\n\ngood luck,\nAntonin\n\n\n\n\nOn Wednesday, March 21, 2018 at 5:33:00 AM UTC+1, outr...@gmail.com wrote:\n>\n> Hi Antonin,\n>\n> Thank you for the explanation and links. While the workaround that Moe \n> suggested does indeed remove all occurrences of the issue, is this \n> chunkify macro something that should be used somewhere in code, and if so \n> do you know how?\n>\n> Best,\n> Ali\n>\n> On Tuesday, March 20, 2018 at 8:41:44 PM UTC+5:30, Antonin Hildebrand \n> wrote:\n>>\n>> Hi Ali,\n>>\n>> I believe I encountered the same issue. And believe it is a bug in cljs \n>> compiler related to https:\/\/dev.clojure.org\/jira\/browse\/CLJS-365.\n>>\n>>\n>> https:\/\/github.com\/binaryage\/dirac\/blob\/5a373e11d5d03d7057769d170f2599117dbae4b0\/src\/automation\/dirac\/automation.clj#L27-L39\n>>  \n>> <https:\/\/www.google.com\/url?q=https%3A%2F%2Fgithub.com%2Fbinaryage%2Fdirac%2Fblob%2F5a373e11d5d03d7057769d170f2599117dbae4b0%2Fsrc%2Fautomation%2Fdirac%2Fautomation.clj%23L27-L39&sa=D&sntz=1&usg=AFQjCNGtEMGxX2Yrm8O-tUccvvNscTtW2Q>\n>>\n>> regards,\n>> Antonin\n>>\n>>\n>> On Tuesday, March 20, 2018 at 11:34:29 AM UTC+1, outr...@gmail.com wrote:\n>>>\n>>> Moe,\n>>>\n>>> Great news: replacing cond with case got rid of the issue in all the \n>>> cases I mentioned. Like you I can't explain it either but it's good to know \n>>> there is a workaround. Thank you!\n>>>\n>>> Cheers,\n>>> Ali\n>>>\n>>>\n>>> On Tuesday, March 20, 2018 at 3:25:03 PM UTC+5:30, Moe Aboulkheir wrote:\n>>>>\n>>>> Ali,\n>>>>\n>>>> I don't have any colour on the underlying cause of the problem, but I'd \n>>>> be interested to know whether you see it with 'case' as well as 'cond', as \n>>>> I vaguely remember running into something like this (in cljs, only).\n>>>>\n>>>> Take care,\n>>>> Moe\n>>>>\n>>>> On Tue, Mar 20, 2018 at 7:33 AM, <outr...@gmail.com> wrote:\n>>>>\n>>>>> Hello,\n>>>>>\n>>>>> I'm running into a very strange issue which, having searched the web, \n>>>>> no one seems to have reported. \n>>>>>\n>>>>> In short, I have a go block similar to the following (simplified for \n>>>>> posting purposes, however I can post the full code if required):\n>>>>>\n>>>>> (go \n>>>>>  (while true \n>>>>>    (let [[cmd event-args] (<! mouse-chan)]]\n>>>>>      ...\n>>>>>      (cond\n>>>>>        (= cmd :down)\n>>>>>        (let [ ... ] ...)\n>>>>>\n>>>>>        (= cmd :in)\n>>>>>        (let [ ... ] ...)\n>>>>>\n>>>>>        (= cmd :hover)\n>>>>>        (let [ ... ] ...)\n>>>>>\n>>>>>        (= cmd :handle-down)\n>>>>>        (let [ ... ] ...)\n>>>>>\n>>>>>\n>>>>>      )\n>>>>> )) \n>>>>>\n>>>>>\n>>>>> Essentially I have a number of mouse handlers (mousedown, mouseup, \n>>>>> mouseover, mouseout, ...) which put! a [cmd event-args] vector onto \n>>>>> mouse-chan, which is subsequently taken in the above block.\n>>>>>\n>>>>> Generally speaking, the block compiles successfully, however under \n>>>>> certain conditions it just \"breaks\", specifically by producing a:\n>>>>>\n>>>>> java.lang.StackOverflowError\n>>>>>\n>>>>> during compilation.\n>>>>>\n>>>>> At present I have 4 branches within the cond block. Within one of \n>>>>> those branches I have a loop\/recur which takes (via <!) from the same \n>>>>> channel as in the outermost block. This works absolutely fine until I try \n>>>>> one of the following, which results in the above compilation error:\n>>>>>\n>>>>> * adding a fifth branch\n>>>>>\n>>>>> * with just the 4 branches in place, if I add even something as simple \n>>>>> as the following expression:\n>>>>>\n>>>>> (when major-in\n>>>>>   (major-in event-args))\n>>>>>\n>>>>> where major-in is either a function or nil\n>>>>>\n>>>>> * and the strangest thing of all, if I simply use *map deconstruction* \n>>>>> at one point in one of the cond branches, I also get the same compilation \n>>>>> error:\n>>>>>\n>>>>> (let [{:keys [x y w h]} (rect-ent-layout ghost-rect)\n>>>>>           ;; Even this doesn't work if I uncomment it and comment out \n>>>>> the previous\n>>>>>      ;; {} ()\n>>>>>\n>>>>> ] ...)\n>>>>>\n>>>>> but doing the following, which doesn't involve deconstruction, is fine:\n>>>>>\n>>>>> (let [stuff (rect-ent-layout ghost-rect)\n>>>>>       x (:x stuff)\n>>>>>       y (:y stuff)\n>>>>>       w (:w stuff)\n>>>>>       h (:h stuff)] ...)\n>>>>>\n>>>>> In terms of limitations on core.async go blocks, I am only aware of \n>>>>> the functional boundary limitation, namely that you cannot create \n>>>>> anonymous \n>>>>> functions within a go block which perform any puts\/takes, asynchronous or \n>>>>> otherwise. Beyond that I can't find anything in the documentation which \n>>>>> would indicate that there are any other limitations. \n>>>>>\n>>>>> I am also aware that some macros do create functions, e.g. for, but I \n>>>>> am not using anything like that. \n>>>>>\n>>>>> I'm running a CLJS project with the following dependencies:\n>>>>>\n>>>>> [org.clojure\/clojure \"1.9.0-beta4\"]\n>>>>> [org.clojure\/clojurescript \"1.9.946\"]\n>>>>> [org.clojure\/core.async  \"0.3.443\"]\n>>>>>\n>>>>> I'm also using Reagent and developing using Figwheel. The Compilation \n>>>>> Error in fact is show in a Figwheel overlay.\n>>>>>\n>>>>> I have tried to isolate the issue but I can't seem to pinpoint what \n>>>>> exactly is causing it.\n>>>>>\n>>>>> Has anyone every come across something like this before when working \n>>>>> with core.async, specifically the java.lang.StackOverflowError \n>>>>> compilation error? If not, without posting the full code, can anyone \n>>>>> see anything with the above code which might cause such an issue? \n>>>>>\n>>>>> Thank you,\n>>>>>\n>>>>> Ali\n>>>>>\n>>>>> -- \n>>>>> Note that posts from new members are moderated - please be patient \n>>>>> with your first post.\n>>>>> --- \n>>>>> You received this message because you are subscribed to the Google \n>>>>> Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this group and stop receiving emails from it, send \n>>>>> an email to clojurescrip...@googlegroups.com.\n>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>\n>>>>\n>>>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Is core.async \"broken\", or is it something I'm doing? Antonin Hildebrand Wed, 21 Mar 2018 02:13:51 -0700"},
{"body":"Hi Antonin,\n\nThank you for the explanation and links. While the workaround that Moe \nsuggested does indeed remove all occurrences of the issue, is this chunkify \nmacro something that should be used somewhere in code, and if so do you \nknow how? \nBest,\nAli\n\nOn Tuesday, March 20, 2018 at 8:41:44 PM UTC+5:30, Antonin Hildebrand wrote:\n>\n> Hi Ali,\n>\n> I believe I encountered the same issue. And believe it is a bug in cljs \n> compiler related to https:\/\/dev.clojure.org\/jira\/browse\/CLJS-365.\n>\n>\n> https:\/\/github.com\/binaryage\/dirac\/blob\/5a373e11d5d03d7057769d170f2599117dbae4b0\/src\/automation\/dirac\/automation.clj#L27-L39\n>  \n> <https:\/\/www.google.com\/url?q=https%3A%2F%2Fgithub.com%2Fbinaryage%2Fdirac%2Fblob%2F5a373e11d5d03d7057769d170f2599117dbae4b0%2Fsrc%2Fautomation%2Fdirac%2Fautomation.clj%23L27-L39&sa=D&sntz=1&usg=AFQjCNGtEMGxX2Yrm8O-tUccvvNscTtW2Q>\n>\n> regards,\n> Antonin\n>\n>\n> On Tuesday, March 20, 2018 at 11:34:29 AM UTC+1, outr...@gmail.com wrote:\n>>\n>> Moe,\n>>\n>> Great news: replacing cond with case got rid of the issue in all the \n>> cases I mentioned. Like you I can't explain it either but it's good to know \n>> there is a workaround. Thank you!\n>>\n>> Cheers,\n>> Ali\n>>\n>>\n>> On Tuesday, March 20, 2018 at 3:25:03 PM UTC+5:30, Moe Aboulkheir wrote:\n>>>\n>>> Ali,\n>>>\n>>> I don't have any colour on the underlying cause of the problem, but I'd \n>>> be interested to know whether you see it with 'case' as well as 'cond', as \n>>> I vaguely remember running into something like this (in cljs, only).\n>>>\n>>> Take care,\n>>> Moe\n>>>\n>>> On Tue, Mar 20, 2018 at 7:33 AM, <outr...@gmail.com> wrote:\n>>>\n>>>> Hello,\n>>>>\n>>>> I'm running into a very strange issue which, having searched the web, \n>>>> no one seems to have reported. \n>>>>\n>>>> In short, I have a go block similar to the following (simplified for \n>>>> posting purposes, however I can post the full code if required):\n>>>>\n>>>> (go \n>>>>  (while true \n>>>>    (let [[cmd event-args] (<! mouse-chan)]]\n>>>>      ...\n>>>>      (cond\n>>>>        (= cmd :down)\n>>>>        (let [ ... ] ...)\n>>>>\n>>>>        (= cmd :in)\n>>>>        (let [ ... ] ...)\n>>>>\n>>>>        (= cmd :hover)\n>>>>        (let [ ... ] ...)\n>>>>\n>>>>        (= cmd :handle-down)\n>>>>        (let [ ... ] ...)\n>>>>\n>>>>\n>>>>      )\n>>>> )) \n>>>>\n>>>>\n>>>> Essentially I have a number of mouse handlers (mousedown, mouseup, \n>>>> mouseover, mouseout, ...) which put! a [cmd event-args] vector onto \n>>>> mouse-chan, which is subsequently taken in the above block.\n>>>>\n>>>> Generally speaking, the block compiles successfully, however under \n>>>> certain conditions it just \"breaks\", specifically by producing a:\n>>>>\n>>>> java.lang.StackOverflowError\n>>>>\n>>>> during compilation.\n>>>>\n>>>> At present I have 4 branches within the cond block. Within one of those \n>>>> branches I have a loop\/recur which takes (via <!) from the same channel as \n>>>> in the outermost block. This works absolutely fine until I try one of the \n>>>> following, which results in the above compilation error:\n>>>>\n>>>> * adding a fifth branch\n>>>>\n>>>> * with just the 4 branches in place, if I add even something as simple \n>>>> as the following expression:\n>>>>\n>>>> (when major-in\n>>>>   (major-in event-args))\n>>>>\n>>>> where major-in is either a function or nil\n>>>>\n>>>> * and the strangest thing of all, if I simply use *map deconstruction* \n>>>> at one point in one of the cond branches, I also get the same compilation \n>>>> error:\n>>>>\n>>>> (let [{:keys [x y w h]} (rect-ent-layout ghost-rect)\n>>>>           ;; Even this doesn't work if I uncomment it and comment out \n>>>> the previous\n>>>>      ;; {} ()\n>>>>\n>>>> ] ...)\n>>>>\n>>>> but doing the following, which doesn't involve deconstruction, is fine:\n>>>>\n>>>> (let [stuff (rect-ent-layout ghost-rect)\n>>>>       x (:x stuff)\n>>>>       y (:y stuff)\n>>>>       w (:w stuff)\n>>>>       h (:h stuff)] ...)\n>>>>\n>>>> In terms of limitations on core.async go blocks, I am only aware of the \n>>>> functional boundary limitation, namely that you cannot create anonymous \n>>>> functions within a go block which perform any puts\/takes, asynchronous or \n>>>> otherwise. Beyond that I can't find anything in the documentation which \n>>>> would indicate that there are any other limitations. \n>>>>\n>>>> I am also aware that some macros do create functions, e.g. for, but I \n>>>> am not using anything like that. \n>>>>\n>>>> I'm running a CLJS project with the following dependencies:\n>>>>\n>>>> [org.clojure\/clojure \"1.9.0-beta4\"]\n>>>> [org.clojure\/clojurescript \"1.9.946\"]\n>>>> [org.clojure\/core.async  \"0.3.443\"]\n>>>>\n>>>> I'm also using Reagent and developing using Figwheel. The Compilation \n>>>> Error in fact is show in a Figwheel overlay.\n>>>>\n>>>> I have tried to isolate the issue but I can't seem to pinpoint what \n>>>> exactly is causing it.\n>>>>\n>>>> Has anyone every come across something like this before when working \n>>>> with core.async, specifically the java.lang.StackOverflowError \n>>>> compilation error? If not, without posting the full code, can anyone \n>>>> see anything with the above code which might cause such an issue? \n>>>>\n>>>> Thank you,\n>>>>\n>>>> Ali\n>>>>\n>>>> -- \n>>>> Note that posts from new members are moderated - please be patient with \n>>>> your first post.\n>>>> --- \n>>>> You received this message because you are subscribed to the Google \n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send \n>>>> an email to clojurescrip...@googlegroups.com.\n>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>\n>>>\n>>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Is core.async \"broken\", or is it something I'm doing? outrovurt Tue, 20 Mar 2018 21:33:51 -0700"},
{"body":"Hi Ali,\n\nI believe I encountered the same issue. And believe it is a bug in cljs \ncompiler related to https:\/\/dev.clojure.org\/jira\/browse\/CLJS-365. \nhttps:\/\/github.com\/binaryage\/dirac\/blob\/5a373e11d5d03d7057769d170f2599117dbae4b0\/src\/automation\/dirac\/automation.clj#L27-L39\n\nregards,\nAntonin\n\n\nOn Tuesday, March 20, 2018 at 11:34:29 AM UTC+1, outr...@gmail.com wrote:\n>\n> Moe,\n>\n> Great news: replacing cond with case got rid of the issue in all the \n> cases I mentioned. Like you I can't explain it either but it's good to know \n> there is a workaround. Thank you!\n>\n> Cheers,\n> Ali\n>\n>\n> On Tuesday, March 20, 2018 at 3:25:03 PM UTC+5:30, Moe Aboulkheir wrote:\n>>\n>> Ali,\n>>\n>> I don't have any colour on the underlying cause of the problem, but I'd \n>> be interested to know whether you see it with 'case' as well as 'cond', as \n>> I vaguely remember running into something like this (in cljs, only).\n>>\n>> Take care,\n>> Moe\n>>\n>> On Tue, Mar 20, 2018 at 7:33 AM, <outr...@gmail.com> wrote:\n>>\n>>> Hello,\n>>>\n>>> I'm running into a very strange issue which, having searched the web, no \n>>> one seems to have reported. \n>>>\n>>> In short, I have a go block similar to the following (simplified for \n>>> posting purposes, however I can post the full code if required):\n>>>\n>>> (go \n>>>  (while true \n>>>    (let [[cmd event-args] (<! mouse-chan)]]\n>>>      ...\n>>>      (cond\n>>>        (= cmd :down)\n>>>        (let [ ... ] ...)\n>>>\n>>>        (= cmd :in)\n>>>        (let [ ... ] ...)\n>>>\n>>>        (= cmd :hover)\n>>>        (let [ ... ] ...)\n>>>\n>>>        (= cmd :handle-down)\n>>>        (let [ ... ] ...)\n>>>\n>>>\n>>>      )\n>>> )) \n>>>\n>>>\n>>> Essentially I have a number of mouse handlers (mousedown, mouseup, \n>>> mouseover, mouseout, ...) which put! a [cmd event-args] vector onto \n>>> mouse-chan, which is subsequently taken in the above block.\n>>>\n>>> Generally speaking, the block compiles successfully, however under \n>>> certain conditions it just \"breaks\", specifically by producing a:\n>>>\n>>> java.lang.StackOverflowError\n>>>\n>>> during compilation.\n>>>\n>>> At present I have 4 branches within the cond block. Within one of those \n>>> branches I have a loop\/recur which takes (via <!) from the same channel as \n>>> in the outermost block. This works absolutely fine until I try one of the \n>>> following, which results in the above compilation error:\n>>>\n>>> * adding a fifth branch\n>>>\n>>> * with just the 4 branches in place, if I add even something as simple \n>>> as the following expression:\n>>>\n>>> (when major-in\n>>>   (major-in event-args))\n>>>\n>>> where major-in is either a function or nil\n>>>\n>>> * and the strangest thing of all, if I simply use *map deconstruction* \n>>> at one point in one of the cond branches, I also get the same compilation \n>>> error:\n>>>\n>>> (let [{:keys [x y w h]} (rect-ent-layout ghost-rect)\n>>>           ;; Even this doesn't work if I uncomment it and comment out \n>>> the previous\n>>>      ;; {} ()\n>>>\n>>> ] ...)\n>>>\n>>> but doing the following, which doesn't involve deconstruction, is fine:\n>>>\n>>> (let [stuff (rect-ent-layout ghost-rect)\n>>>       x (:x stuff)\n>>>       y (:y stuff)\n>>>       w (:w stuff)\n>>>       h (:h stuff)] ...)\n>>>\n>>> In terms of limitations on core.async go blocks, I am only aware of the \n>>> functional boundary limitation, namely that you cannot create anonymous \n>>> functions within a go block which perform any puts\/takes, asynchronous or \n>>> otherwise. Beyond that I can't find anything in the documentation which \n>>> would indicate that there are any other limitations. \n>>>\n>>> I am also aware that some macros do create functions, e.g. for, but I \n>>> am not using anything like that. \n>>>\n>>> I'm running a CLJS project with the following dependencies:\n>>>\n>>> [org.clojure\/clojure \"1.9.0-beta4\"]\n>>> [org.clojure\/clojurescript \"1.9.946\"]\n>>> [org.clojure\/core.async  \"0.3.443\"]\n>>>\n>>> I'm also using Reagent and developing using Figwheel. The Compilation \n>>> Error in fact is show in a Figwheel overlay.\n>>>\n>>> I have tried to isolate the issue but I can't seem to pinpoint what \n>>> exactly is causing it.\n>>>\n>>> Has anyone every come across something like this before when working \n>>> with core.async, specifically the java.lang.StackOverflowError \n>>> compilation error? If not, without posting the full code, can anyone \n>>> see anything with the above code which might cause such an issue? \n>>>\n>>> Thank you,\n>>>\n>>> Ali\n>>>\n>>> -- \n>>> Note that posts from new members are moderated - please be patient with \n>>> your first post.\n>>> --- \n>>> You received this message because you are subscribed to the Google \n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send \n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Is core.async \"broken\", or is it something I'm doing? Antonin Hildebrand Tue, 20 Mar 2018 08:12:08 -0700"},
{"body":"Moe,\n\nGreat news: replacing cond with case got rid of the issue in all the cases \nI mentioned. Like you I can't explain it either but it's good to know there \nis a workaround. Thank you! \nCheers,\nAli\n\n\nOn Tuesday, March 20, 2018 at 3:25:03 PM UTC+5:30, Moe Aboulkheir wrote:\n>\n> Ali,\n>\n> I don't have any colour on the underlying cause of the problem, but I'd be \n> interested to know whether you see it with 'case' as well as 'cond', as I \n> vaguely remember running into something like this (in cljs, only).\n>\n> Take care,\n> Moe\n>\n> On Tue, Mar 20, 2018 at 7:33 AM, <outr...@gmail.com <javascript:>> wrote:\n>\n>> Hello,\n>>\n>> I'm running into a very strange issue which, having searched the web, no \n>> one seems to have reported. \n>>\n>> In short, I have a go block similar to the following (simplified for \n>> posting purposes, however I can post the full code if required):\n>>\n>> (go \n>>  (while true \n>>    (let [[cmd event-args] (<! mouse-chan)]]\n>>      ...\n>>      (cond\n>>        (= cmd :down)\n>>        (let [ ... ] ...)\n>>\n>>        (= cmd :in)\n>>        (let [ ... ] ...)\n>>\n>>        (= cmd :hover)\n>>        (let [ ... ] ...)\n>>\n>>        (= cmd :handle-down)\n>>        (let [ ... ] ...)\n>>\n>>\n>>      )\n>> )) \n>>\n>>\n>> Essentially I have a number of mouse handlers (mousedown, mouseup, \n>> mouseover, mouseout, ...) which put! a [cmd event-args] vector onto \n>> mouse-chan, which is subsequently taken in the above block.\n>>\n>> Generally speaking, the block compiles successfully, however under \n>> certain conditions it just \"breaks\", specifically by producing a:\n>>\n>> java.lang.StackOverflowError\n>>\n>> during compilation.\n>>\n>> At present I have 4 branches within the cond block. Within one of those \n>> branches I have a loop\/recur which takes (via <!) from the same channel as \n>> in the outermost block. This works absolutely fine until I try one of the \n>> following, which results in the above compilation error:\n>>\n>> * adding a fifth branch\n>>\n>> * with just the 4 branches in place, if I add even something as simple as \n>> the following expression:\n>>\n>> (when major-in\n>>   (major-in event-args))\n>>\n>> where major-in is either a function or nil\n>>\n>> * and the strangest thing of all, if I simply use *map deconstruction* \n>> at one point in one of the cond branches, I also get the same compilation \n>> error:\n>>\n>> (let [{:keys [x y w h]} (rect-ent-layout ghost-rect)\n>>           ;; Even this doesn't work if I uncomment it and comment out the \n>> previous\n>>      ;; {} ()\n>>\n>> ] ...)\n>>\n>> but doing the following, which doesn't involve deconstruction, is fine:\n>>\n>> (let [stuff (rect-ent-layout ghost-rect)\n>>       x (:x stuff)\n>>       y (:y stuff)\n>>       w (:w stuff)\n>>       h (:h stuff)] ...)\n>>\n>> In terms of limitations on core.async go blocks, I am only aware of the \n>> functional boundary limitation, namely that you cannot create anonymous \n>> functions within a go block which perform any puts\/takes, asynchronous or \n>> otherwise. Beyond that I can't find anything in the documentation which \n>> would indicate that there are any other limitations. \n>>\n>> I am also aware that some macros do create functions, e.g. for, but I am \n>> not using anything like that. \n>>\n>> I'm running a CLJS project with the following dependencies:\n>>\n>> [org.clojure\/clojure \"1.9.0-beta4\"]\n>> [org.clojure\/clojurescript \"1.9.946\"]\n>> [org.clojure\/core.async  \"0.3.443\"]\n>>\n>> I'm also using Reagent and developing using Figwheel. The Compilation \n>> Error in fact is show in a Figwheel overlay.\n>>\n>> I have tried to isolate the issue but I can't seem to pinpoint what \n>> exactly is causing it.\n>>\n>> Has anyone every come across something like this before when working with \n>> core.async, specifically the java.lang.StackOverflowError compilation \n>> error? If not, without posting the full code, can anyone see anything \n>> with the above code which might cause such an issue? \n>>\n>> Thank you,\n>>\n>> Ali\n>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Is core.async \"broken\", or is it something I'm doing? outrovurt Tue, 20 Mar 2018 03:34:42 -0700"},
{"body":"Ali,\n\nI don't have any colour on the underlying cause of the problem, but I'd be\ninterested to know whether you see it with 'case' as well as 'cond', as I\nvaguely remember running into something like this (in cljs, only). \nTake care,\nMoe\n\nOn Tue, Mar 20, 2018 at 7:33 AM, <outrov...@gmail.com> wrote:\n\n> Hello,\n>\n> I'm running into a very strange issue which, having searched the web, no\n> one seems to have reported.\n>\n> In short, I have a go block similar to the following (simplified for\n> posting purposes, however I can post the full code if required):\n>\n> (go\n>  (while true\n>    (let [[cmd event-args] (<! mouse-chan)]]\n>      ...\n>      (cond\n>        (= cmd :down)\n>        (let [ ... ] ...)\n>\n>        (= cmd :in)\n>        (let [ ... ] ...)\n>\n>        (= cmd :hover)\n>        (let [ ... ] ...)\n>\n>        (= cmd :handle-down)\n>        (let [ ... ] ...)\n>\n>\n>      )\n> ))\n>\n>\n> Essentially I have a number of mouse handlers (mousedown, mouseup,\n> mouseover, mouseout, ...) which put! a [cmd event-args] vector onto\n> mouse-chan, which is subsequently taken in the above block.\n>\n> Generally speaking, the block compiles successfully, however under certain\n> conditions it just \"breaks\", specifically by producing a:\n>\n> java.lang.StackOverflowError\n>\n> during compilation.\n>\n> At present I have 4 branches within the cond block. Within one of those\n> branches I have a loop\/recur which takes (via <!) from the same channel as\n> in the outermost block. This works absolutely fine until I try one of the\n> following, which results in the above compilation error:\n>\n> * adding a fifth branch\n>\n> * with just the 4 branches in place, if I add even something as simple as\n> the following expression:\n>\n> (when major-in\n>   (major-in event-args))\n>\n> where major-in is either a function or nil\n>\n> * and the strangest thing of all, if I simply use *map deconstruction* at\n> one point in one of the cond branches, I also get the same compilation\n> error:\n>\n> (let [{:keys [x y w h]} (rect-ent-layout ghost-rect)\n>           ;; Even this doesn't work if I uncomment it and comment out the\n> previous\n>      ;; {} ()\n>\n> ] ...)\n>\n> but doing the following, which doesn't involve deconstruction, is fine:\n>\n> (let [stuff (rect-ent-layout ghost-rect)\n>       x (:x stuff)\n>       y (:y stuff)\n>       w (:w stuff)\n>       h (:h stuff)] ...)\n>\n> In terms of limitations on core.async go blocks, I am only aware of the\n> functional boundary limitation, namely that you cannot create anonymous\n> functions within a go block which perform any puts\/takes, asynchronous or\n> otherwise. Beyond that I can't find anything in the documentation which\n> would indicate that there are any other limitations.\n>\n> I am also aware that some macros do create functions, e.g. for, but I am\n> not using anything like that.\n>\n> I'm running a CLJS project with the following dependencies:\n>\n> [org.clojure\/clojure \"1.9.0-beta4\"]\n> [org.clojure\/clojurescript \"1.9.946\"]\n> [org.clojure\/core.async  \"0.3.443\"]\n>\n> I'm also using Reagent and developing using Figwheel. The Compilation\n> Error in fact is show in a Figwheel overlay.\n>\n> I have tried to isolate the issue but I can't seem to pinpoint what\n> exactly is causing it.\n>\n> Has anyone every come across something like this before when working with\n> core.async, specifically the java.lang.StackOverflowError compilation\n> error? If not, without posting the full code, can anyone see anything\n> with the above code which might cause such an issue?\n>\n> Thank you,\n>\n> Ali\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Is core.async \"broken\", or is it something I'm doing? Moe Aboulkheir Tue, 20 Mar 2018 02:55:55 -0700"},
{"body":"Hello,\n\nI'm running into a very strange issue which, having searched the web, no \none seems to have reported. \nIn short, I have a go block similar to the following (simplified for \nposting purposes, however I can post the full code if required):\n\n(go \n (while true \n   (let [[cmd event-args] (<! mouse-chan)]]\n     ...\n     (cond\n       (= cmd :down)\n       (let [ ... ] ...)\n\n       (= cmd :in)\n       (let [ ... ] ...)\n\n       (= cmd :hover)\n       (let [ ... ] ...)\n\n       (= cmd :handle-down)\n       (let [ ... ] ...)\n\n\n     )\n)) \n\n\nEssentially I have a number of mouse handlers (mousedown, mouseup, \nmouseover, mouseout, ...) which put! a [cmd event-args] vector onto \nmouse-chan, which is subsequently taken in the above block.\n\nGenerally speaking, the block compiles successfully, however under certain \nconditions it just \"breaks\", specifically by producing a:\n\njava.lang.StackOverflowError\n\nduring compilation.\n\nAt present I have 4 branches within the cond block. Within one of those \nbranches I have a loop\/recur which takes (via <!) from the same channel as \nin the outermost block. This works absolutely fine until I try one of the \nfollowing, which results in the above compilation error:\n\n* adding a fifth branch\n\n* with just the 4 branches in place, if I add even something as simple as \nthe following expression:\n\n(when major-in\n  (major-in event-args))\n\nwhere major-in is either a function or nil\n\n* and the strangest thing of all, if I simply use *map deconstruction* at \none point in one of the cond branches, I also get the same compilation \nerror:\n\n(let [{:keys [x y w h]} (rect-ent-layout ghost-rect)\n          ;; Even this doesn't work if I uncomment it and comment out the \nprevious\n     ;; {} ()\n\n] ...)\n\nbut doing the following, which doesn't involve deconstruction, is fine:\n\n(let [stuff (rect-ent-layout ghost-rect)\n      x (:x stuff)\n      y (:y stuff)\n      w (:w stuff)\n      h (:h stuff)] ...)\n\nIn terms of limitations on core.async go blocks, I am only aware of the \nfunctional boundary limitation, namely that you cannot create anonymous \nfunctions within a go block which perform any puts\/takes, asynchronous or \notherwise. Beyond that I can't find anything in the documentation which \nwould indicate that there are any other limitations. \n\nI am also aware that some macros do create functions, e.g. for, but I am \nnot using anything like that. \n\nI'm running a CLJS project with the following dependencies:\n\n[org.clojure\/clojure \"1.9.0-beta4\"]\n[org.clojure\/clojurescript \"1.9.946\"]\n[org.clojure\/core.async  \"0.3.443\"]\n\nI'm also using Reagent and developing using Figwheel. The Compilation Error \nin fact is show in a Figwheel overlay.\n\nI have tried to isolate the issue but I can't seem to pinpoint what exactly \nis causing it.\n\nHas anyone every come across something like this before when working with \ncore.async, specifically the java.lang.StackOverflowError compilation error? \nIf not, without posting the full code, can anyone see anything with the \nabove code which might cause such an issue? \n\nThank you,\n\nAli\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Is core.async \"broken\", or is it something I'm doing? outrovurt Tue, 20 Mar 2018 00:34:19 -0700"},
{"body":"Hi!\n\nI followed the instruction \non https:\/\/clojurescript.org\/guides\/quick-start#browser-repl\nAnd I tested some code in clojurescript repl and got the following below. \ncljs.user=> (defn ^{:a 777} f [] (meta #'f))\n#'cljs.user\/f\ncljs.user=> (f)\n{:ns cljs.user, :doc nil, :file \"<cljs repl>\", :line 1, :column 1, :name f, \n:test nil, :arglists ()}\ncljs.user=> (meta #'f)\n{:ns cljs.user, :name f, :file \"<cljs repl>\", :end-column 18, :source \"^{:a \n777} f\", :column 1, :line 1, :end-line 1, :arglists ([]), :doc nil, :test \nnil, :a 777}\ncljs.user=>\n\n\nThe same forms (meta #'f) inside and outside of function f return the \ndifferent metadata.\nIs it correct or wrong?\n\n\n \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Metadata returned by cljs.core\/meta called in inside and outside of an user function are not same. \ubc15\uc0c1\uaddc Sat, 17 Mar 2018 01:38:18 -0700"},
{"body":"Hello,\n\nI am so impressed with the Specter lib.  However, I have been having an \nissue with Specter & Clojurescript & couldn't figure out what the issue \nis.  I know I am missing something.  Any help, much appreciated.  The \ndetails are given below:  \nThe basic error is \"Can't take value of macro cljs.core\/fn\".  When I remove \n\"cljs.core\/\" before \"fn\", it works.  What am I missing?  \n\n;==========================================;ON CLJS REPL\n\n(let [mm {:nd\n          {:id        #uuid \"d444525c-0f14-439c-8158-27d9323db4a2\",\n           :parent-id #uuid \"9ef471f1-a4b9-4539-94d7-f626d0225163\",\n           :lines     [\n                       {:id      #uuid \"b7feea61-5352-441f-afb7-88feef6b8684\"\n                        :details []}\n                       ]\n           }\n          }]\n  (sp\/transform [:nd :lines com.rpl.specter\/ALL (com.rpl.specter\/selected? \n(cljs.core\/fn [x] (cljs.core\/= #uuid\"b7feea61-5352-441f-afb7-88feef6b8684\" (:id \nx)))) :details]\n                (fn [v]\n                  (conj v\n                        {:id-detail (random-uuid)\n                         :schedules []\n                         })\n                  )\n                mm\n                )\n  )\n\n;;==========================================\n\n\n----  Compiler Warning on   <cljs form>   line:10  column:77  ----\n\n  Can't take value of macro cljs.core\/fn\n\n   6                        :details []}\n   7                       ]\n   8           }\n   9          }]\n  10  (sp\/transform [:nd :lines com.rpl.specter\/ALL \n(com.rpl.specter\/selected? (cljs.core\/fn [x] (cljs.core\/= \n#uuid\"b7feea61-5352-441f-afb7-88feef6b8684\" (:id x)))) :details]\n                                                                            \n    ^--- \n  11                (fn [v]\n  12                  (conj v\n  13                        {:id-detail (random-uuid)\n  14                         :schedules []\n  15                         })\n\n----  Compiler Warning  ----\n----  Could not Analyze  <cljs form>   line:10  column:3  ----\n\n  Unable to resolve var: fn in this context at line 10 <cljs repl>\n\n   1                       (let [mm {:nd\n   2          {:id        #uuid \"d444525c-0f14-439c-8158-27d9323db4a2\",\n   3           :parent-id #uuid \"9ef471f1-a4b9-4539-94d7-f626d0225163\",\n   4           :lines     [\n   5                       {:id      #uuid \n\"b7feea61-5352-441f-afb7-88feef6b8684\"\n   6                        :details []}\n   7                       ]\n   8           }\n   9          }]\n  10  (sp\/transform [:nd :lines com.rpl.specter\/ALL \n(com.rpl.specter\/selected? (cljs.core\/fn [x] (cljs.core\/= \n#uuid\"b7feea61-5352-441f-afb7-88feef6b8684\" (:id x)))) :details]\n      ^--- \n  11                (fn [v]\n  12                  (conj v\n  13                        {:id-detail (random-uuid)\n  14                         :schedules []\n  15                         })\n  16                  )\n  17                mm\n  18                )\n  19  )\n\n----  Analysis Error  ----\n=> nil\nThanks for the responses.\n\n--Hari\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Help needed - Specter & ClojureScript Hari Krishnan Thu, 15 Mar 2018 16:12:11 -0700"},
{"body":"Yep this is a ClojureScript issue. I wrote more about this here\nhttps:\/\/www.deps.co\/blog\/how-to-upgrade-clojure-projects-to-use-java-9\/. \nUntil ClojureScript 1.10, you need to add:\n\n:jvm-opts [\"--add-modules\" \"java.xml.bind\"]\n\nto your Leiningen config.\n\nOn Thu, Mar 15, 2018 at 1:14 AM gvim <gvi...@gmail.com> wrote:\n\n> So it's a Clojurescript issue, not Figwheel?\n>\n> gvim\n>\n>\n> On 14\/03\/2018 06:43, Ale\u0161 Roub\u00ed\u010dek wrote:\n> > Java 9 compatibility will come with ClojureScript 1.10. It will be\n> > released in few weeks timeframe.\n> >\n> > On Tuesday, March 13, 2018 at 1:58:12 PM UTC+1, g vim wrote:\n> >\n> >     A few months ago I tried setting-up a Figwheel-based Clojurescript\n> >     project with Java 9 but hit some errors which seemed to be issues\n> with\n> >     Figwheel and Java 9. Does anyone know if these issues have been\n> >     resolved? I couldn't find anything recent on Google.\n> >\n> >     gvim\n> >\n> > --\n> > Note that posts from new members are moderated - please be patient with\n> > your first post.\n> > ---\n> > You received this message because you are subscribed to the Google\n> > Groups \"ClojureScript\" group.\n> > To unsubscribe from this group and stop receiving emails from it, send\n> > an email to clojurescript+unsubscr...@googlegroups.com\n> > <mailto:clojurescript+unsubscr...@googlegroups.com>.\n> > To post to this group, send email to clojurescript@googlegroups.com\n> > <mailto:clojurescript@googlegroups.com>.\n> > Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility Daniel Compton Wed, 14 Mar 2018 15:12:39 -0700"},
{"body":"So it's a Clojurescript issue, not Figwheel?\n\ngvim \n\nOn 14\/03\/2018 06:43, Ale\u0161 Roub\u00ed\u010dek wrote:\n Java 9 compatibility will come with ClojureScript 1.10. It will be\nreleased in few weeks timeframe.\n\nOn Tuesday, March 13, 2018 at 1:58:12 PM UTC+1, g vim wrote:\n\n    A few months ago I tried setting-up a Figwheel-based Clojurescript\n    project with Java 9 but hit some errors which seemed to be issues with\n    Figwheel and Java 9. Does anyone know if these issues have been\n    resolved? I couldn't find anything recent on Google.\n\n    gvim\n\n--\nNote that posts from new members are moderated - please be patient with\nyour first post.\n---\nYou received this message because you are subscribed to the Google\nGroups \"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send\nan email to clojurescript+unsubscr...@googlegroups.com\n<mailto:clojurescript+unsubscr...@googlegroups.com>.\nTo post to this group, send email to clojurescript@googlegroups.com\n<mailto:clojurescript@googlegroups.com>.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n \n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- You received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Figwheel and Java 9 compatibility gvim Wed, 14 Mar 2018 05:14:32 -0700"},
{"body":"Java 9 compatibility will come with ClojureScript 1.10. It will be released \nin few weeks timeframe. \nOn Tuesday, March 13, 2018 at 1:58:12 PM UTC+1, g vim wrote:\n>\n> A few months ago I tried setting-up a Figwheel-based Clojurescript \n> project with Java 9 but hit some errors which seemed to be issues with \n> Figwheel and Java 9. Does anyone know if these issues have been \n> resolved? I couldn't find anything recent on Google. \n>\n> gvim \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Figwheel and Java 9 compatibility Ale\u0161 Roub\u00ed\u010dek Tue, 13 Mar 2018 23:44:29 -0700"},
{"body":"A few months ago I tried setting-up a Figwheel-based Clojurescript project with Java 9 but hit some errors which seemed to be issues with Figwheel and Java 9. Does anyone know if these issues have been resolved? I couldn't find anything recent on Google. \ngvim \n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- You received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Figwheel and Java 9 compatibility gvim Tue, 13 Mar 2018 05:58:40 -0700"},
{"body":"This dates back to over a year ago, but here's what I did to use React \n15.1.0 from a CDN when using Reagent 0.7: \nMy Reagent dependency in project.clj looks like this:\n\n                 [reagent \"0.7.0\" :exclusions [cljsjs\/react\n                                               cljsjs\/react-dom\n                                               cljsjs\/react-dom-server]]\n\nThen I just created a set of dummy namespaces in my source tree to fake out \nthe compiler:\n\nsolace:eris2 jfischer$ find src\/cljsjs\nsrc\/cljsjs\nsrc\/cljsjs\/react.cljs\nsrc\/cljsjs\/react\nsrc\/cljsjs\/react\/dom.cljs\nsrc\/cljsjs\/react\/dom\nsrc\/cljsjs\/react\/dom\/server.cljs\n\nsolace:eris2 jfischer$ cat src\/cljsjs\/react.cljs\n(ns cljsjs.react\n  \"Dummy namespace to let me exclude React from my compiled output.\")\n\nAnd in my HTML loaded React from the CDN:\n\n<script src=\"https:\/\/unpkg.com\/react@15.1.0\/dist\/react.min.js\";><\/script>\n<script \nsrc=\"https:\/\/unpkg.com\/react-dom@15.1.0\/dist\/react-dom.min.js\";><\/script>\n\n\nOn Monday, March 5, 2018 at 11:02:53 PM UTC-8, al...@hill.net.au wrote:\n>\n> Hi all,\n>\n> I want to use reagent 0.8 with an external React 16, available as \n> `window.React` (equivalent to using React from a CDN, but in reality built \n> and exported from a separate webpack bundle).\n>\n> My goal is to build a bundle which uses React, ReactDOM and \n> createReactClass from the window object, instead of inlining its own copies \n> of those libraries.\n>\n> I talked to @Deraen about this on Slack a couple of months ago who helped \n> me get this working. I'm currently able to build a bundle as described \n> above, but I have to vendor in all the extern files from the relevant \n> cljsjs React libraries, and add them to :exclusions. My :compiler key in my \n> cljsbuild config looks like this:\n>\n>    :foreign-libs [{:file \"src\/js\/empty.js\"\n>                    :provides [\"react\" \"react-dom\" \"create-react-class\" \n> \"react-dom\/server\"]\n>                    :requires []\n>                    :global-exports {react React\n>                                     react-dom ReactDOM\n>                                     create-react-class createReactClass\n>                                     react-dom\/server ReactDOMServer}}]\n>    :externs [\"src\/js\/externs\/react.ext.js\"\n>              \"src\/js\/externs\/react-dom.ext.js\"\n>              \"src\/js\/externs\/create-react-class.ext.js\"]\n>\n> He thought at the time that it should be possible without the externs and \n> :exclusions, as mentioned on this page: \n> https:\/\/github.com\/reagent-project\/reagent\/blob\/master\/docs\/0.8-upgrade.md#browser---loading-react-from-cdnjs-or-custom-webpack-bundle\n>\n> > it should be possible to override the Cljsjs foreign-libs, while still \n> using externs from Cljsjs packages.\n>\n> But I can't figure it out - if I don't exclude the cljsjs libraries, I get \n> a bundle with React 15 built-in, and if I do exclude them, the bundle is \n> broken because the externs are missing and the names get eaten by the \n> closure compiler.\n>\n> Is there any way around having to commit the externs?\n>\n> Thanks,\n> Alex\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Can't use React from a CDN with reagent 0.8.0-alpha2 without vendoring externs Jonathan Fischer Mon, 12 Mar 2018 16:59:53 -0700"},
{"body":"While the forthcoming Quick Start is an improvement we do want the old\nQuick Start to work until it's ready :) We don't get many reports about the\noriginal Quick Start not working these days so that needs to be taken into\nconsideration here. \nFor the OP, if you're encountering trouble it's important to enumerate the\nprecise steps that lead to the failure, newcomers sometimes diverge from\nthe instructions for one reason or another and this nearly always leads to\nsimple mistakes. If you're looking for some realtime help I recommend Slack\nor IRC.\n\nHTH,\nDavid\n\nOn Mon, Mar 12, 2018 at 10:13 AM, Dave Liepmann <dave.liepm...@gmail.com>\nwrote:\n\n> Please reconsider introducing yourself with a phrase like \"dismal\n> failure\". Regardless of how you feel about it in the heat of frustration,\n> people who worked hard on that document are here. Let's be kind to each\n> other.\n>\n> I have no direct troubleshooting advice, but consider that the entire\n> Quickstart is being massively rewritten:\n>\n> https:\/\/www.reddit.com\/r\/Clojure\/comments\/81yk2a\/\n> clojurescript_110x_new_quick_start_feedback\/\n>\n> https:\/\/clojureverse.org\/t\/clojurescript-1-10-x-new-\n> quick-start-feedback-please\/1679\n>\n> https:\/\/twitter.com\/swannodette\/status\/970140813727584256\n>\n> Cheers.\n> \u2014Dave\n>\n>\n> On Monday, March 12, 2018 at 4:01:19 AM UTC+1, Robbie Huffman wrote:\n>>\n>> It's a dismal failure.\n>>\n>> Yes, the first line of build.clj is (require 'cljs.build.api)\n>>\n>> => java -cp cljs.jar:src clojure.main build.clj\n>> Exception in thread \"main\" java.io.FileNotFoundException: build.clj (No\n>> such file or directory)\n>>\n>> Yes, java is:\n>> > java -version\n>> java version \"1.8.0_161\"\n>> Java(TM) SE Runtime Environment (build 1.8.0_161-b12)\n>> Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Has anyone tried the quickstart guide lately? David Nolen Mon, 12 Mar 2018 09:34:26 -0700"},
{"body":"Please reconsider introducing yourself with a phrase like \"dismal failure\". \nRegardless of how you feel about it in the heat of frustration, people who \nworked hard on that document are here. Let's be kind to each other. \nI have no direct troubleshooting advice, but consider that the entire \nQuickstart is being massively rewritten:\n\nhttps:\/\/www.reddit.com\/r\/Clojure\/comments\/81yk2a\/clojurescript_110x_new_quick_start_feedback\/\n\nhttps:\/\/clojureverse.org\/t\/clojurescript-1-10-x-new-quick-start-feedback-please\/1679\n\nhttps:\/\/twitter.com\/swannodette\/status\/970140813727584256\n\nCheers.\n\u2014Dave\n\nOn Monday, March 12, 2018 at 4:01:19 AM UTC+1, Robbie Huffman wrote:\n>\n> It's a dismal failure.\n>\n> Yes, the first line of build.clj is (require 'cljs.build.api)\n>\n> => java -cp cljs.jar:src clojure.main build.clj\n> Exception in thread \"main\" java.io.FileNotFoundException: build.clj (No \n> such file or directory)\n>\n> Yes, java is:\n> > java -version\n> java version \"1.8.0_161\"\n> Java(TM) SE Runtime Environment (build 1.8.0_161-b12)\n> Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Has anyone tried the quickstart guide lately? Dave Liepmann Mon, 12 Mar 2018 08:48:08 -0700"},
{"body":"I just ran through the the quick start up until the first compilation step and \ndidn't encounter any issues ( https:\/\/asciinema.org\/a\/uddTjAjUQVUuwnVGO3AQ1S5wP \n). Are you sure you're invoking java from the same directory in which you \ncreated\u00a0build.clj ? \nOn Sun, Mar 11, 2018 at 10:05 PM, Robbie Huffman < robbie.huff...@gmail.com > \nwrote:\n\n> \n> It's a dismal failure.\n> \n> Yes, the first line of build.clj is (require ' cljs. build. api (\n> http:\/\/cljs.build.api\/ ) )\n> \n> => java -cp cljs.jar:src clojure.main build.clj\n> Exception in thread \"main\" java. io. FileNotFoundException (\n> http:\/\/java.io.filenotfoundexception\/ ) : build.clj (No such file or\n> directory)\n> \n> Yes, java is:\n> > java -version\n> java version \"1.8.0_161\"\n> Java(TM) SE Runtime Environment (build 1.8.0_161-b12)\n> Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\n> \n> \n> \n> \n> \n> \n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscribe@ googlegroups. com (\n> clojurescript+unsubscr...@googlegroups.com ).\n> To post to this group, send email to clojurescript@ googlegroups. com (\n> clojurescript@googlegroups.com ).\n> Visit this group at https:\/ \/ groups. google. com\/ group\/ clojurescript (\n> https:\/\/groups.google.com\/group\/clojurescript ).\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Has anyone tried the quickstart guide lately? Zane Shelby Mon, 12 Mar 2018 05:29:39 -0700"},
{"body":"I am trying to translate this Beautiful Drag and Drop's simple example: \nhttps:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\/stories\/src\/simple\/simple.jsx \nEverything works well until I get into the inner \"Draggables\", what is the \nappropriate way to write the following in Reagent: \nhttps:\/\/github.com\/atlassian\/react-beautiful-dnd\/blob\/master\/stories\/src\/simple\/simple.jsx#L79-L87\n\nSpecifically the `:ref` fields seem to not function as expected if I just \ndo `(aget droppable-provided \"innerRef\")` \n\nAs an aside has anyone had any luck with Beautiful Drag and Drop? \n\nAlso if someone hasn't seen it yet, this is a super helpful tool for larger \nJSX components: https:\/\/github.com\/madvas\/jsx-to-clojurescript\n\nThanks!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [reagent] react-beautiful-dnd question Boris Kourtoukov Mon, 12 Mar 2018 03:09:07 -0700"},
{"body":"It's a dismal failure.\n\nYes, the first line of build.clj is (require 'cljs.build.api) \n=> java -cp cljs.jar:src clojure.main build.clj\nException in thread \"main\" java.io.FileNotFoundException: build.clj (No \nsuch file or directory)\n\nYes, java is:\n> java -version\njava version \"1.8.0_161\"\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Has anyone tried the quickstart guide lately? Robbie Huffman Sun, 11 Mar 2018 20:01:59 -0700"},
{"body":"Hello,\n\nI have a problem with one of the CLJS split module I lazy load. This CLJS \nsplit depends on a manually written Closure library in Javascript, itself \ndepending on another manually written Closure lib. When the split loads and \nis executed, it successfully loads its Closure dependency but this Closure \nlib fails to load its own Closure dep. I can verify it in the browser \nconsole, the transitive deep Closure lib namespace doesn't exist. \nThe goal is to lazy load external trackers (\u00e0 la Google Analytics) only \nwhen necessary, so I wrap the small JS code they require in a CLJS \nnamespace that I can lazy-load with cljs.loader. As a note, another reason \nwe wrap Closure tracker libs in CLJS ns is we also use them in non CLJS \nprojects so we can't directly `goog.require` cljs.loader in them.\n\nDetails:\n\nEnv:\n\nClojure 1.9.0\nClojurescript 1.9.946\nLinux\nopenjdk version \"1.8.0_162\"\nBoot 2.7.1 and boot-cljs 2.1.4\n\nCLJS compiler options:\n\nBoot-cljs main.cljs.edn\n\n{:require          [yoda.core]\n :init-fns         [yoda.core\/init]\n :compiler-options {:libs       [\"trackers\/dataLayer.js\"\n                                 \"trackers\/google_analytics.js\" ;; depends \non trackers\/dataLayer.js\n                                 \"trackers\/other_tracker.js\"]\n                    :output-dir \"js\"\n                    :modules    {:cljs-base        {:output-to \"js\/main.js\"}\n                                 :google-analytics {:entries   \n#{yoda.tracking.google-analytics-wrapper} ;; depends on \ntrackers\/google_analytics.js\n                                                    :output-to \n\"js\/main.out\/google_analytics_wrapper.js\"}\n                                 :other-tracker    {:entries   \n#{yoda.tracking.other-tracker-wrapper} ;; depends on \ntrackers\/other_tracker.js\n                                                    :output-to \n\"js\/main.out\/other_tracker_wrapper.js\"}}}}\n\nOther CLJS compiler options in build.boot:\n\n(task-options! cljs {:compiler-options {:asset-path  \"\/yd\/js\"\n                                          :optimizations :none\n                                          :source-map true\n                                          :parallel-build true\n                                          :verbose true}})\n\nCode-loading in my-project.tracking namespace:\n\n;; start external trackers\n(loader\/load :google-analytics\n             (fn []\n               ((resolve \n'my-project.tracking.google-analytics-wrapper\/start) ga-tracking-id)))\n(loader\/load :other-tracker\n             (fn []\n               ((resolve \n'my-project.tracking.other-tracker-wrapper\/start))))\n\nThe generated cljs_deps.js looks ok:\n\ngoog.addDependency(\"..\/trackers\/dataLayer.js\", ['trackers.dataLayer'], \n['goog.array']);\ngoog.addDependency(\"..\/trackers\/google_analytics.js\", \n['trackers.google_analytics'], ['trackers.dataLayer', 'goog.net.Cookies']);\ngoog.addDependency(\"..\/my_project\/tracking\/google_analytics_wrapper.js\", \n['my_project.tracking.google_analytics_wrapper'], ['cljs.loader', \n'trackers.google_analytics', 'cljs.core']);\ngoog.addDependency(\"..\/trackers\/other_tracker.js\", \n['trackers.other_tracker'], []);\ngoog.addDependency(\"..\/yoda\/tracking\/other_tracker_wrapper.js\", \n['yoda.tracking.other_tracker_wrapper'], ['trackers.other_tracker', \n'cljs.loader', 'cljs.core']);\n\nProblems:\n\n1. The browser requests source-maps for all the Closure libs in trackers\/ \nwhich is weird because the compilation doesn't change them. They're kept as \nis. No need to use source-maps for plain JS code right ?\n\n2. The browser requests source-maps at the wrong URI for split modules: it \ntries to load them from the root path \/ directly. Here's the error in the \nbrowser\nSource map error: TypeError: NetworkError when attempting to fetch resource.\nResource URL: null\nSource Map URL: google_analytics_wrapper.js.map ;; it should be \n\/yd\/js\/my_project\/tracking\/google_analytics_wrapper.js.map where it does \nexist (verified on disk)\n\n3. Printing the `trackers` global JS variable in the browser (for the \n\"trackers\" part of the trackers.XXX namespaces) shows that it doesn't \ncontains the dataLayer namespace, the transitive Closure lib.\n\n4. Code splitting works fine for the `other_tracker` split, I can verify \nits code is executed. Hence problem #3 seems to come from the transitive \ndependency.\n\nI hope I was clear in explaining the problem. Happy to help you help me by \nanswering any question.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Code-splitting and closure libs problem ? Khalid Jebbari Wed, 07 Mar 2018 04:48:34 -0800"},
{"body":"I guess this script file will generate cljs.jar. \nhttps:\/\/github.com\/clojure\/clojurescript\/blob\/bba3a30bd9e6e79059d3bc81a74846ec47a522c6\/script\/uberjar\nThis script file is used from travis-ci. See \nhttps:\/\/github.com\/clojure\/clojurescript\/blob\/b23c77e230137840241a1ee3da45733813e647ac\/.travis.yml#L20\n \n.\n(almost same content as clojurians slack.) \n2018\u5e743\u67087\u65e5\u6c34\u66dc\u65e5 14\u664257\u520640\u79d2 UTC+9 Sonny To:\n>\n> There doesn't seem to be instructions on how to build clojurescript itself.\n>\n> there's a project.clj and a lein uberjar generates an executable jar. \n> However I noticed that the project version number is always set to \n> \"0.0-SNAPSHOT\". Is the release built generated then manually renamed?\n>\n> How does dnolen generate a release build? \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: how is clojurescript releases built? blackawa Wed, 07 Mar 2018 03:43:12 -0800"},
{"body":"This is documented in Readme of the Github project, see:\n\nhttps:\/\/github.com\/clojure\/clojurescript#developers-welcome \nIn particular see:\n\nhttps:\/\/github.com\/clojure\/clojurescript\/wiki\/Building-the-compiler\n\nNote, you might also need to run \".\/scripts\/bootstrap\" before the build \n(not 100% sure)\n\nHTH\n\nOn Wednesday, March 7, 2018 at 6:57:40 AM UTC+1, Sonny To wrote:\n>\n> There doesn't seem to be instructions on how to build clojurescript itself.\n>\n> there's a project.clj and a lein uberjar generates an executable jar. \n> However I noticed that the project version number is always set to \n> \"0.0-SNAPSHOT\". Is the release built generated then manually renamed?\n>\n> How does dnolen generate a release build? \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: how is clojurescript releases built? AndyR Wed, 07 Mar 2018 00:02:40 -0800"},
{"body":"There doesn't seem to be instructions on how to build clojurescript itself. \nthere's a project.clj and a lein uberjar generates an executable jar. \nHowever I noticed that the project version number is always set to \n\"0.0-SNAPSHOT\". Is the release built generated then manually renamed?\n\nHow does dnolen generate a release build? \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] how is clojurescript releases built? Sonny To Tue, 06 Mar 2018 21:58:22 -0800"},
{"body":"Hi all,\n\nI want to use reagent 0.8 with an external React 16, available as \n`window.React` (equivalent to using React from a CDN, but in reality built \nand exported from a separate webpack bundle). \nMy goal is to build a bundle which uses React, ReactDOM and \ncreateReactClass from the window object, instead of inlining its own copies \nof those libraries.\n\nI talked to @Deraen about this on Slack a couple of months ago who helped \nme get this working. I'm currently able to build a bundle as described \nabove, but I have to vendor in all the extern files from the relevant \ncljsjs React libraries, and add them to :exclusions. My :compiler key in my \ncljsbuild config looks like this:\n\n   :foreign-libs [{:file \"src\/js\/empty.js\"\n                   :provides [\"react\" \"react-dom\" \"create-react-class\" \n\"react-dom\/server\"]\n                   :requires []\n                   :global-exports {react React\n                                    react-dom ReactDOM\n                                    create-react-class createReactClass\n                                    react-dom\/server ReactDOMServer}}]\n   :externs [\"src\/js\/externs\/react.ext.js\"\n             \"src\/js\/externs\/react-dom.ext.js\"\n             \"src\/js\/externs\/create-react-class.ext.js\"]\n\nHe thought at the time that it should be possible without the externs and \n:exclusions, as mentioned on this page: \nhttps:\/\/github.com\/reagent-project\/reagent\/blob\/master\/docs\/0.8-upgrade.md#browser---loading-react-from-cdnjs-or-custom-webpack-bundle\n\n> it should be possible to override the Cljsjs foreign-libs, while still \nusing externs from Cljsjs packages.\n\nBut I can't figure it out - if I don't exclude the cljsjs libraries, I get \na bundle with React 15 built-in, and if I do exclude them, the bundle is \nbroken because the externs are missing and the names get eaten by the \nclosure compiler.\n\nIs there any way around having to commit the externs?\n\nThanks,\nAlex\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Can't use React from a CDN with reagent 0.8.0-alpha2 without vendoring externs alex Mon, 05 Mar 2018 23:03:07 -0800"},
{"body":"Thank you for the background, it explains everything.\n\nSo, if you want to be really safe and \"to the spec\" right now, then I would \n> say, don't use leading digits in keywords. Realistically though, we're \n> never going to disallow those and eventually I expect them to be \n> \"officially\" ok. \n> \nThis is what I specifically wanted to hear, whether things are going to \nchange in the future and if so how. But as it doesn't sound like they are, \nI know where I stand.\n \n\n> For leading digits in namespaces, that may actually violate Java package \n> rules, in which cases we would not be able to allow that.\n>\n\nThis isn't such a concern for me as I'm mostly using them in CLJS, but I do \nrealise that macros are currently executed in Clojure-land so I'll keep all \nof this in mind as I go along.\n\nCheers!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Inconsistency in creating keywords outrovurt Sat, 03 Mar 2018 08:26:12 -0800"},
{"body":"You should be extra careful in CLJS when creating keywords with multiple \nslashes. They currently behave different from CLJ. Logged here: \nhttps:\/\/dev.clojure.org\/jira\/browse\/CLJS-2120 \nOn Thursday, March 1, 2018 at 1:14:34 PM UTC+1, outr...@gmail.com wrote:\n>\n> I've encountered a problem when creating namespaced keywords using the \n> literal syntax, specifically using keywords which start with numbers. \n>\n> If I try using the literal syntax, entering the following at the REPL, I \n> get the exception which follows it:\n>\n> :a\/0\n> ;= clojure.lang.ExceptionInfo: NO_SOURCE_FILE [line 1, col 5] Invalid \n> keyword: :a\/0. {:type :reader-exception, :ex-kind :reader-error, :file \n> \"NO_SOURCE_FILE\", :line 1, :col 5} ...\n>\n> If instead I use the the keyword function, it produces the desired result:\n>\n> (keyword \"a\" \"0\")\n> ;= :a\/0\n>\n>\n> It seems I can get away with almost anything using the keyword function. \n> For example:\n>\n> (keyword \"a\" \"0\/1\")\n> ;= :a\/0\/1\n>\n> I'm wondering then, what is the \"correct\" behaviour if there is such a \n> thing in this case? I know that in Clojure the behaviour appears once again \n> to be slightly different, and the main docs seem to cater more to Clojure \n> than to CLJS.\n>\n> Thank you,\n> Ali\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Inconsistency in creating keywords AndyR Fri, 02 Mar 2018 12:34:53 -0800"},
{"body":"Are you asking about my project or the \u201cthis\u201d in my response? For the later I \nwas referring to the OP\u2019s announcement of: \nhttps:\/\/github.com\/Day8\/re-frame-10x\n\nThe project I\u2019m working on includes a ClojureScript front end for a software \ncooperative (Co-op Source) which I\u2019d be happy to discuss offline as it doesn\u2019t \nrelate directly to this mailing list. Clojure & ClojureScript do figure very \nprominently in many aspects of its implementation, including some VR based sw \ndevelopment experiments, I don\u2019t think subscribers here would appreciate the \ndistraction.\n\nFeel free to email me at \u2018alan\u2019 w the domain coopsource.org.\n\nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] ANN: re-frame-10x: Become 10x more productive developing re-frame applications Alan Moore Fri, 02 Mar 2018 10:13:24 -0800"},
{"body":"On 21\/02\/2018 16:22, Alan Moore wrote:\n This looks really nice! I have to admit there are times when I have had to dig \naround quite a bit to find where my reframe app was going wrong. This should \nmake that process 10x easier. ;-) \nAlan\n\n \nWhat does \"this\" refer to? A book, video, course?\n\ngvim\n\n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- You received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] ANN: re-frame-10x: Become 10x more productive developing re-frame applications gvim Fri, 02 Mar 2018 08:43:06 -0800"},
{"body":"There's actually a lot of history and several open tickets about this \nspecific question of whether keywords can start with a digit. The original \nintent (and the reader reference page) is that it would match symbols in \nthat leading digits are not allowed. However, there is a bug in the regex \nthat lead to them being accepted. \nWe tried to fix this bug several years ago and it broke a lot of existing \ncode that was relying on the ability to do this. We decided at that point \nthat there was no reason to take this away. The lingering tickets are to \n\na) fix the regex to do this on purpose rather than on accident (and this is \nalso the reason why some of your examples work and some do not)\nb) update the reference pages to explicitly include this\nc) sync up edn rules with clojure rules\n\nSo, if you want to be really safe and \"to the spec\" right now, then I would \nsay, don't use leading digits in keywords. Realistically though, we're \nnever going to disallow those and eventually I expect them to be \n\"officially\" ok. \n\nFor leading digits in namespaces, that may actually violate Java package \nrules, in which cases we would not be able to allow that.\n\nOn Friday, March 2, 2018 at 12:35:26 AM UTC-6, outr...@gmail.com wrote:\n>\n> Thank you both for the links, especially the FAQ page. As an aside I was \n> looking for something like the namespace function and am glad I found it.\n>\n> Something is still confusing me however. If we follow the reader docs \n> which Alex posted, \"Symbols begin with a non-numeric character\", and \n> \"Keywords are *like* symbols\" (emphasis mine, this may be open to \n> interpretation) hence also shouldn't begin with a non-numeric character. \n> But if you try the following in either Clojure or (Script)'s REPLs, they \n> work just fine:\n>\n> :0\n> ;= :0\n>\n> Further, using the respective reader-string functions also yields:\n> (read-string \":0\")\n> ;= :0\n>\n> So this would indicate that whatever is written in the docs is not \n> necessarily being enforced in the reader, is that correct?  \n>\n\n> It seems that as far as the reader is concerned, keywords can begin with a \n> numeric but the name portion (after the \/) of a namespaced keyword can't. \n> In other words :0 is legal, :a\/0 isn't. \n>\n> Interestingly enough, \n> :0\/a\n> ;= :0\/a\n>\n> is also legal within each language's reader.\n>\n> In which case, why are :0 and :0\/a legal but not :a\/0?\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Inconsistency in creating keywords Alex Miller Fri, 02 Mar 2018 06:57:49 -0800"},
{"body":"I'm using a fairly typical build setup with figwheel and lein, and running \na repl inside Cursive. \nDoes anyone have a nice solution for (re)building the project \nwith *compile-asserts* either on or off? According to the docs it's \n\"Initially set to boolean value of clojure.spec.compile-asserts system \nproperty\", which is obviously intended to make it easy to turn on and off, \nbut I've not been able to figure out an easy way, in a figwheel setup, to \nchnage that system property and do a rebuild.\n\nThanks\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Switching spec asserts on and off (at compile time) Tom Locke Fri, 02 Mar 2018 00:14:59 -0800"},
{"body":"Thank you both for the links, especially the FAQ page. As an aside I was \nlooking for something like the namespace function and am glad I found it. \nSomething is still confusing me however. If we follow the reader docs which \nAlex posted, \"Symbols begin with a non-numeric character\", and \"Keywords \nare *like* symbols\" (emphasis mine, this may be open to interpretation) \nhence also shouldn't begin with a non-numeric character. But if you try the \nfollowing in either Clojure or (Script)'s REPLs, they work just fine:\n\n:0\n;= :0\n\nFurther, using the respective reader-string functions also yields:\n(read-string \":0\")\n;= :0\n\nSo this would indicate that whatever is written in the docs is not \nnecessarily being enforced in the reader, is that correct? \n\nIt seems that as far as the reader is concerned, keywords can begin with a \nnumeric but the name portion (after the \/) of a namespaced keyword can't. \nIn other words :0 is legal, :a\/0 isn't. \n\nInterestingly enough, \n:0\/a\n;= :0\/a\n\nis also legal within each language's reader.\n\nIn which case, why are :0 and :0\/a legal but not :a\/0?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Inconsistency in creating keywords outrovurt Thu, 01 Mar 2018 22:36:13 -0800"},
{"body":"On Thursday, March 1, 2018 at 9:34:29 AM UTC-6, Thomas Heller wrote:\n>\n> Clojure follows the principle of \"Garbage in, Garbage out\" for a lot of \n> internal functions. \n> \nI would say \"unspecified input \/ unspecified output\", however this is not \none of those cases in my opinion. The keyword function creates keywords and \nthey can be programatically used just fine. You can put them in a map, use \nthem as accessors, etc. \n \n\n> Meaning you are responsible for ensuring that you only use valid data when \n> calling those functions as the validation itself carries overhead which the \n> core fns should not have.\n>\n> :a\/0 fails because the reader does those checks and fails. The keyword fn \n> does no checks and lets you have your invalid keywords. They are still \n> invalid keywords though. Keywords are not allowed to start with numbers.\n>\n\nReally, that applies specifically to *literal* keywords (and actually even \nthat is a matter of some lengthy debate and differences between clj and \ncljs). They are still valid keyword instances, just not ones that can be \nprinted and read back by the reader.\n \n\n> https:\/\/github.com\/edn-format\/edn might be a helpful reference about that \n> is allowed and what isn't.\n>\n\nClojure(Script) code is not edn so the reader page is a better reference \n- https:\/\/clojure.org\/reference\/reader\n\nThese pages will not agree exactly - edn tends to be more restrictive in \nwhat it officially supports.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Inconsistency in creating keywords Alex Miller Thu, 01 Mar 2018 11:06:07 -0800"},
{"body":"Regarding the keyword function, see the faq \nat https:\/\/clojure.org\/guides\/faq#unreadable_keywords \nOn Thursday, March 1, 2018 at 6:14:34 AM UTC-6, outr...@gmail.com wrote:\n>\n> I've encountered a problem when creating namespaced keywords using the \n> literal syntax, specifically using keywords which start with numbers. \n>\n> If I try using the literal syntax, entering the following at the REPL, I \n> get the exception which follows it:\n>\n> :a\/0\n> ;= clojure.lang.ExceptionInfo: NO_SOURCE_FILE [line 1, col 5] Invalid \n> keyword: :a\/0. {:type :reader-exception, :ex-kind :reader-error, :file \n> \"NO_SOURCE_FILE\", :line 1, :col 5} ...\n>\n> If instead I use the the keyword function, it produces the desired result:\n>\n> (keyword \"a\" \"0\")\n> ;= :a\/0\n>\n>\n> It seems I can get away with almost anything using the keyword function. \n> For example:\n>\n> (keyword \"a\" \"0\/1\")\n> ;= :a\/0\/1\n>\n> I'm wondering then, what is the \"correct\" behaviour if there is such a \n> thing in this case? I know that in Clojure the behaviour appears once again \n> to be slightly different, and the main docs seem to cater more to Clojure \n> than to CLJS.\n>\n> Thank you,\n> Ali\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Inconsistency in creating keywords Alex Miller Thu, 01 Mar 2018 10:59:21 -0800"},
{"body":"Clojure follows the principle of \"Garbage in, Garbage out\" for a lot of \ninternal functions. Meaning you are responsible for ensuring that you only \nuse valid data when calling those functions as the validation itself \ncarries overhead which the core fns should not have. \n:a\/0 fails because the reader does those checks and fails. The keyword fn \ndoes no checks and lets you have your invalid keywords. They are still \ninvalid keywords though. Keywords are not allowed to start with numbers.\n\nhttps:\/\/github.com\/edn-format\/edn might be a helpful reference about that \nis allowed and what isn't.\n\nHTH\n\nOn Thursday, March 1, 2018 at 1:14:34 PM UTC+1, outr...@gmail.com wrote:\n>\n> I've encountered a problem when creating namespaced keywords using the \n> literal syntax, specifically using keywords which start with numbers. \n>\n> If I try using the literal syntax, entering the following at the REPL, I \n> get the exception which follows it:\n>\n> :a\/0\n> ;= clojure.lang.ExceptionInfo: NO_SOURCE_FILE [line 1, col 5] Invalid \n> keyword: :a\/0. {:type :reader-exception, :ex-kind :reader-error, :file \n> \"NO_SOURCE_FILE\", :line 1, :col 5} ...\n>\n> If instead I use the the keyword function, it produces the desired result:\n>\n> (keyword \"a\" \"0\")\n> ;= :a\/0\n>\n>\n> It seems I can get away with almost anything using the keyword function. \n> For example:\n>\n> (keyword \"a\" \"0\/1\")\n> ;= :a\/0\/1\n>\n> I'm wondering then, what is the \"correct\" behaviour if there is such a \n> thing in this case? I know that in Clojure the behaviour appears once again \n> to be slightly different, and the main docs seem to cater more to Clojure \n> than to CLJS.\n>\n> Thank you,\n> Ali\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Inconsistency in creating keywords Thomas Heller Thu, 01 Mar 2018 07:35:17 -0800"},
{"body":"I've encountered a problem when creating namespaced keywords using the \nliteral syntax, specifically using keywords which start with numbers. \nIf I try using the literal syntax, entering the following at the REPL, I \nget the exception which follows it:\n\n:a\/0\n;= clojure.lang.ExceptionInfo: NO_SOURCE_FILE [line 1, col 5] Invalid \nkeyword: :a\/0. {:type :reader-exception, :ex-kind :reader-error, :file \n\"NO_SOURCE_FILE\", :line 1, :col 5} ...\n\nIf instead I use the the keyword function, it produces the desired result:\n\n(keyword \"a\" \"0\")\n;= :a\/0\n\n\nIt seems I can get away with almost anything using the keyword function. \nFor example:\n\n(keyword \"a\" \"0\/1\")\n;= :a\/0\/1\n\nI'm wondering then, what is the \"correct\" behaviour if there is such a \nthing in this case? I know that in Clojure the behaviour appears once again \nto be slightly different, and the main docs seem to cater more to Clojure \nthan to CLJS.\n\nThank you,\nAli\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Inconsistency in creating keywords outrovurt Thu, 01 Mar 2018 04:14:53 -0800"},
{"body":"- Is it public API usage to (.-val ...) and (cljs.tagged-literals\/->JSValue \n) inside a CLJS macro writtin in CLJ? \n- If not, is there intent to replace ->JSValue with Clojure tagged-literal?\n\n- Is emitting (->JSValue ...) instead of (js-obj ...) useful or does \noptimization make this obsolete\n\nThank you, \n Leon.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] js literal in macros per JSValue Leon Grapenthin Tue, 27 Feb 2018 11:22:50 -0800"},
{"body":"I need https:\/\/www.npmjs.com\/package\/react-avatar-editor \nand https:\/\/www.npmjs.com\/package\/react-image-gallery for a CLJS project. \nI followed the instructions here to start the \npackage: https:\/\/github.com\/cljsjs\/packages\/wiki\/Creating-Packages\nusing this link for the first library \nabove: https:\/\/unpkg.com\/react-avatar-editor@10.3.0\/dist\/index.js\nand you can see 'AvatarEditor' as the namespace to use, IIUC.\n\nThere are 2 generators for externs, and I tried both:\n\nGenerator written in ClojureScript \n<https:\/\/github.com\/jmmk\/javascript-externs-generator>\nGenerate externs automatically \n<http:\/\/www.dotnetwise.com\/Code\/Externs\/index.html>\n\nand with both externs generators, I get this error:\n\nReferenceError: Can 't find variable: AvatarEditor\nAvatarEditor is undefined!\n\nI get the same error with the ImageGallery component above.\n\nWhat am I missing?\nI assume this is simple to work around, then I'll package the other library \nas well.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Trying to package 2 react components with cljsjs Jonathon McKitrick Tue, 27 Feb 2018 03:39:39 -0800"},
{"body":"Thomas Heller's comment does explain the problem.\n\nYou can define an _empty_ common module whose only purpose is to collect\nshared stuff that you don't want falling into base. If you don't specify\n:depends-on we don't know where to move entries. So the tradeoff is that\nyou specify `:depends-on` but as a result we can produce very optimal\nsplits. \nThere's no intention to change how this works. You must supply\n`:depends-on`.\n\nOn Sat, Feb 24, 2018 at 4:58 PM, Khalid Jebbari <khalid.jebb...@gmail.com>\nwrote:\n\n> Is it true to say that the dependency on :cljs-base is handled by the\n> compiler ? It seems so when I look at the code generated in :none mode.\n>\n> I'd love to understand why it's not possible between modules.\n>\n> Le 24 f\u00e9vr. 2018 21:09, \"David Nolen\" <dnolen.li...@gmail.com> a \u00e9crit :\n>\n>> You must specify :depends-on - the compiler will not do this for you.\n>>\n>> David\n>>\n>> On Fri, Feb 23, 2018 at 1:06 PM, Khalid Jebbari <khalid.jebb...@gmail.com\n>> > wrote:\n>>\n>>> Hello,\n>>>\n>>> Say I have 2 namespaces in CLJS\/CLJC, A and B. A requires B explicitly.\n>>>\n>>> I want to produce a js file for each namespace, A.js and B.js. So I use\n>>> the code-splitting feature, and create a dedicated module entry for each\n>>> namespace, :A and :B.\n>>>\n>>> What's exactly the difference between specifying that module :A\n>>> \":depends-on\" :B and not specifying it ? Surely the compiler can understand\n>>> the dependence by just analyzing the requires in code.\n>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>> To post to this group, send email to clojurescript@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to a topic in the\n>> Google Groups \"ClojureScript\" group.\n>> To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/to\n>> pic\/clojurescript\/0s2xiicjm8U\/unsubscribe.\n>> To unsubscribe from this group and all its topics, send an email to\n>> clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Code-splitting question David Nolen Sat, 24 Feb 2018 14:15:06 -0800"},
{"body":"Is it true to say that the dependency on :cljs-base is handled by the\ncompiler ? It seems so when I look at the code generated in :none mode. \nI'd love to understand why it's not possible between modules.\n\nLe 24 f\u00e9vr. 2018 21:09, \"David Nolen\" <dnolen.li...@gmail.com> a \u00e9crit :\n\n> You must specify :depends-on - the compiler will not do this for you.\n>\n> David\n>\n> On Fri, Feb 23, 2018 at 1:06 PM, Khalid Jebbari <khalid.jebb...@gmail.com>\n> wrote:\n>\n>> Hello,\n>>\n>> Say I have 2 namespaces in CLJS\/CLJC, A and B. A requires B explicitly.\n>>\n>> I want to produce a js file for each namespace, A.js and B.js. So I use\n>> the code-splitting feature, and create a dedicated module entry for each\n>> namespace, :A and :B.\n>>\n>> What's exactly the difference between specifying that module :A\n>> \":depends-on\" :B and not specifying it ? Surely the compiler can understand\n>> the dependence by just analyzing the requires in code.\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/\n> topic\/clojurescript\/0s2xiicjm8U\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Code-splitting question Khalid Jebbari Sat, 24 Feb 2018 13:59:19 -0800"},
{"body":"You must specify :depends-on - the compiler will not do this for you.\n\nDavid \nOn Fri, Feb 23, 2018 at 1:06 PM, Khalid Jebbari <khalid.jebb...@gmail.com>\nwrote:\n\n> Hello,\n>\n> Say I have 2 namespaces in CLJS\/CLJC, A and B. A requires B explicitly.\n>\n> I want to produce a js file for each namespace, A.js and B.js. So I use\n> the code-splitting feature, and create a dedicated module entry for each\n> namespace, :A and :B.\n>\n> What's exactly the difference between specifying that module :A\n> \":depends-on\" :B and not specifying it ? Surely the compiler can understand\n> the dependence by just analyzing the requires in code.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Code-splitting question David Nolen Sat, 24 Feb 2018 12:09:06 -0800"},
{"body":"Thanks for the pointer. I've read the thread twice though and don't fully\nunderstand your answer. I'll try to play with :depends-on in our project\nnext week and analyse the output. But detailed explanation is still welcome. \nLe 24 f\u00e9vr. 2018 10:51, \"Thomas Heller\" <th.hel...@gmail.com> a \u00e9crit :\n\n> I answered a similar question a while ago:\n> https:\/\/groups.google.com\/d\/msg\/clojurescript\/Gk1XA0aIxJM\/Ixu45z-wkEoJ\n>\n>\n> On Friday, February 23, 2018 at 7:06:43 PM UTC+1, Khalid Jebbari wrote:\n>>\n>> Hello,\n>>\n>> Say I have 2 namespaces in CLJS\/CLJC, A and B. A requires B explicitly.\n>>\n>> I want to produce a js file for each namespace, A.js and B.js. So I use\n>> the code-splitting feature, and create a dedicated module entry for each\n>> namespace, :A and :B.\n>>\n>> What's exactly the difference between specifying that module :A\n>> \":depends-on\" :B and not specifying it ? Surely the compiler can understand\n>> the dependence by just analyzing the requires in code.\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/\n> topic\/clojurescript\/0s2xiicjm8U\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Code-splitting question Khalid Jebbari Sat, 24 Feb 2018 11:26:44 -0800"},
{"body":"I answered a similar question a while ago:\nhttps:\/\/groups.google.com\/d\/msg\/clojurescript\/Gk1XA0aIxJM\/Ixu45z-wkEoJ \n\nOn Friday, February 23, 2018 at 7:06:43 PM UTC+1, Khalid Jebbari wrote:\n>\n> Hello,\n>\n> Say I have 2 namespaces in CLJS\/CLJC, A and B. A requires B explicitly.\n>\n> I want to produce a js file for each namespace, A.js and B.js. So I use \n> the code-splitting feature, and create a dedicated module entry for each \n> namespace, :A and :B.\n>\n> What's exactly the difference between specifying that module :A \n> \":depends-on\" :B and not specifying it ? Surely the compiler can understand \n> the dependence by just analyzing the requires in code. \n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Code-splitting question Thomas Heller Sat, 24 Feb 2018 01:52:07 -0800"},
{"body":"Hello,\n\nSay I have 2 namespaces in CLJS\/CLJC, A and B. A requires B explicitly. \nI want to produce a js file for each namespace, A.js and B.js. So I use the \ncode-splitting feature, and create a dedicated module entry for each namespace, \n:A and :B.\n\nWhat's exactly the difference between specifying that module :A \":depends-on\" \n:B and not specifying it ? Surely the compiler can understand the dependence by \njust analyzing the requires in code. \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Code-splitting question Khalid Jebbari Fri, 23 Feb 2018 10:07:10 -0800"},
{"body":"This looks really nice! I have to admit there are times when I have had to dig \naround quite a bit to find where my reframe app was going wrong. This should \nmake that process 10x easier. ;-) \nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: re-frame-10x: Become 10x more productive developing re-frame applications Alan Moore Wed, 21 Feb 2018 08:22:42 -0800"},
{"body":"Hi Community,\n\nI'm hoping someone is able to assist us with understanding and tracking \ndown some errors reported from a browser. Seems it was reported and closed \n(https:\/\/dev.clojure.org\/jira\/browse\/CLJS-1513?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel) \nCould it be an encoding issue? Like the browser not reading as UTF-8?\n\nError: Directive \"w\" is undefined\n~<<-(~;~@{~w~^ ~_~}~;)-<~:>\n^\n\nor\nError: Directive \";\" is undefined\n~<[~;~@{~w~^, ~:_~}~;]~:>\n^\n\nor\nError: Directive \"^\" is undefined\n~:<~1I~w~^ ~@_~w~@{ ~_~w~}~:>\n^\n\nWhat we've been able to identify is:\n\n   - It only happens on a single 'SmartTV' browser\n   - It doesn't happen on the 'SmartTV's emulator\n   - It occurs on :simple, :whitespace, :advanced, and :none cljsbuild \n   optimisations. Neither option provides any insight into what's not defined\n   - Output is set as es3 (default)\n   - Running clojure 1.9.0 and clojurescript 1.9.946\n   - It occurs when loading the script into the browser (i.e. <script \n   src=\"...\"><\/script>)\n   - It's not a caching or old artefact issue\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Debugging Assistance Needed: Directive is undefined? alexander Tue, 20 Feb 2018 00:03:08 -0800"},
{"body":"Hello All,\n\nJust wanted to give you a heads-up for Dutch Clojure Day - a free one day \nClojure conference in Amsterdam. This is a conference run by community \nvolunteers, with sponsorship from amazing Clojure companies across Europe. \nOur CFP will be open until Feb 28th and we welcome all levels of talks \nabout Clojure\/ClojureScript ecosystem. If you have a talk in mind feel free \nto submit at  https:\/\/www.papercall.io\/dcd18 or spread the word :) \nCheck out our website for http:\/\/clojuredays.org to register for the event! \n\nWe look forward to seeing some of you here in Amsterdam on 21st April 2018\n\nCheers,\nVijay\nDCD Organiser Team\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [HEADS-UP] CFP for Dutch Clojure Day 2018 Closes on Feb 28th Vijay Kiran Mon, 19 Feb 2018 00:48:08 -0800"},
{"body":">\n> I'm not an expert but this may help you move in the right \n> direction. \n> https:\/\/blog.estimate-work.com\/a-new-world-writing-css-in-clojurescript-and-life-after-sass-bdf5bc80a24f\n> \nThe authors appear to advocate moving from sass to garden (a clojure CSS \ngeneration library).\n\nThis may also be of interest. https:\/\/github.com\/RyanMcG\/lein-npm also \nthis https:\/\/github.com\/kissaten\/cljs-lein-npm-example \nand https:\/\/github.com\/kapware\/lein-cljs-npm-deps-example\n\nGood luck.\n\nJeff\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How can I include npm-based styles in my Clojurescript project? 'Jeffrey Cummings' via ClojureScript Sat, 17 Feb 2018 22:39:08 -0800"},
{"body":"I have a live demo of this deployed at http:\/\/webtop.stigmergy.systems\/\nThe search is non-functional, and will probably not be functional for a \nwhile.... the idea for the search is it will use datalog to search local \nstate\nand distributed state. I want to get https:\/\/github.com\/replikativ\/datahike \nworking with clojurescript \nOn Saturday, February 10, 2018 at 3:26:28 PM UTC+2, Jonathon McKitrick \nwrote:\n>\n> That\u2019s good stuff!\n>\n> On Fri, Feb 9, 2018 at 5:34 PM Sonny To <son....@gmail.com <javascript:>> \n> wrote:\n>\n>> https:\/\/bitbucket.org\/sonwh98\/stigmergy-webtop\n>>\n>>\n>> On Friday, February 2, 2018 at 6:23:47 PM UTC+2, Jonathon McKitrick wrote:\n>>>\n>>> I'd love a demo that I can show my team to illustrate what reagent and \n>>> reframe can do.\n>>>\n>>> Does anyone know of any?\n>>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to a topic in the \n>> Google Groups \"ClojureScript\" group.\n>> To unsubscribe from this topic, visit \n>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/PE6gYL273aA\/unsubscribe.\n>> To unsubscribe from this group and all its topics, send an email to \n>> clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n> -- \n> Jonathon McKitrick\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any cutting edge reagent\/reframe demos out there? Sonny To Wed, 14 Feb 2018 17:54:28 -0800"},
{"body":"I\u2019m starting a Re-frame project that will need some less\/sass styles found \nin an NPM repo at our company. I\u2019m not very familiar with the css pipelines \nout there, but I just need to import this project and figure out how to get \nthe styles I need into my front-end. Where do I start? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How can I include npm-based styles in my Clojurescript project? Jonathon McKitrick Tue, 13 Feb 2018 06:06:47 -0800"},
{"body":"Hi!\n\nHere in Magnet, some time ago, we've developed a library that features a \n`Promise.all()`-like behaviour for re-frame.\nThis is our first attempt to give back to community with code so we look \nforward to all criticism and suggestions. \nhttps:\/\/clojars.org\/aramis\nhttps:\/\/github.com\/magnetcoop\/aramis\n\nCheers\nDamian\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] magnetcoop\/aramis - a Promise.all()-like re-frame library damian . hryniewicz Mon, 12 Feb 2018 07:38:01 -0800"},
{"body":"That\u2019s good stuff!\n\nOn Fri, Feb 9, 2018 at 5:34 PM Sonny To <son.c...@gmail.com> wrote: \n> https:\/\/bitbucket.org\/sonwh98\/stigmergy-webtop\n>\n>\n> On Friday, February 2, 2018 at 6:23:47 PM UTC+2, Jonathon McKitrick wrote:\n>>\n>> I'd love a demo that I can show my team to illustrate what reagent and\n>> reframe can do.\n>>\n>> Does anyone know of any?\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/PE6gYL273aA\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \nJonathon McKitrick\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any cutting edge reagent\/reframe demos out there? jmckitrick Sat, 10 Feb 2018 05:26:59 -0800"},
{"body":"https:\/\/bitbucket.org\/sonwh98\/stigmergy-webtop \nOn Friday, February 2, 2018 at 6:23:47 PM UTC+2, Jonathon McKitrick wrote:\n>\n> I'd love a demo that I can show my team to illustrate what reagent and \n> reframe can do.\n>\n> Does anyone know of any?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Any cutting edge reagent\/reframe demos out there? Sonny To Fri, 09 Feb 2018 14:34:53 -0800"},
{"body":"Got the answer. It was the \"cross site scripting\" interference. Things \nworked as expected when I used electron.\nRegards,\nKashyap \nOn Sunday, February 4, 2018 at 4:04:20 PM UTC-8, Kashyap CK wrote:\n>\n> Hi,\n> I picked up the example shown here - \n> http:\/\/dimagog.github.io\/blog\/clojure\/clojurescript\/2013\/07\/12\/making-http-requests-from-clojurescript-with-core.async\/\n>  \n> to send HTTP requests from cljs. However, I am unsure how to add custom \n> headers to the request.\n>\n> (defn GET [url]\n>   (let [ch (chan 1)]\n>     (xhr\/send url\n>               (fn [event]\n>                 (let [res (-> event .-target .getResponseText)]\n>                   (go (>! ch res)\n>                       (close! ch)))) \"POST\" \"1234\" {\"Content-Type\" \n> \"application\/json\"})\n>     ch))\n>\n> Things work as expected when I add the method (\"POST\") and body (\"1234\"). \n> However, when I add the header (ofcourse, I send a map which is just a \n> guess), I notice that an \"OPTIONS\" request is sent first (which I gather is \n> expected).\n>\n> I am looking for a way to send HTTP requests with custom headers - \n> (hopefully, without having to install another library).\n>\n> Regards,\n> Kashyap\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Sending custom headers in xhr\/send Kashyap CK Mon, 05 Feb 2018 09:42:55 -0800"},
{"body":"Bug filed: https:\/\/github.com\/boot-clj\/boot-cljs\/issues\/183 \nOn Monday, February 5, 2018 at 5:22:58 PM UTC+1, Khalid Jebbari wrote:\n>\n> I managed to create a minimal reproduction repository. It\u2019s definitely a \n> problem of Boot-cljs, not of the CLJS compiler itself.\n>\n> The repo (with problem statement and instructions): \n> https:\/\/github.com\/DjebbZ\/code-splitting-bug-boot-cljs\n>\n> Will post on boot-cljs issue too, it may help them spot the problem.\n>\n> On Saturday, February 3, 2018 at 2:37:18 PM UTC+1, Khalid Jebbari wrote:\n>>\n>> No I'm really lazy loading from another namespace, our `yoda.tracking` \n>> where all happens. This ns doesn't `require` at all the lazy loaded module, \n>> it just `resolve` it. I will work on a minimal repro case based on \n>> boot-cljs next week.\n>>\n>> Thanks for your attention.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Problems with code-splitting Khalid Jebbari Mon, 05 Feb 2018 08:28:13 -0800"},
{"body":"I managed to create a minimal reproduction repository. It\u2019s definitely a \nproblem of Boot-cljs, not of the CLJS compiler itself. \nThe repo (with problem statement and instructions): \nhttps:\/\/github.com\/DjebbZ\/code-splitting-bug-boot-cljs\n\nWill post on boot-cljs issue too, it may help them spot the problem.\n\nOn Saturday, February 3, 2018 at 2:37:18 PM UTC+1, Khalid Jebbari wrote:\n>\n> No I'm really lazy loading from another namespace, our `yoda.tracking` \n> where all happens. This ns doesn't `require` at all the lazy loaded module, \n> it just `resolve` it. I will work on a minimal repro case based on \n> boot-cljs next week.\n>\n> Thanks for your attention.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Problems with code-splitting Khalid Jebbari Mon, 05 Feb 2018 08:23:23 -0800"},
{"body":"Hi,\nI picked up the example shown here \n- \nhttp:\/\/dimagog.github.io\/blog\/clojure\/clojurescript\/2013\/07\/12\/making-http-requests-from-clojurescript-with-core.async\/\n \nto send HTTP requests from cljs. However, I am unsure how to add custom \nheaders to the request. \n(defn GET [url]\n  (let [ch (chan 1)]\n    (xhr\/send url\n              (fn [event]\n                (let [res (-> event .-target .getResponseText)]\n                  (go (>! ch res)\n                      (close! ch)))) \"POST\" \"1234\" {\"Content-Type\" \n\"application\/json\"})\n    ch))\n\nThings work as expected when I add the method (\"POST\") and body (\"1234\"). \nHowever, when I add the header (ofcourse, I send a map which is just a \nguess), I notice that an \"OPTIONS\" request is sent first (which I gather is \nexpected).\n\nI am looking for a way to send HTTP requests with custom headers - \n(hopefully, without having to install another library).\n\nRegards,\nKashyap\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Sending custom headers in xhr\/send Kashyap CK Sun, 04 Feb 2018 16:04:26 -0800"},
{"body":"I lead a team building a React Native app with Reagent + re-frame that's \nnearing 10K lines across 124 source files. re-frame took a while to really \nclick, but, boy, it's amazing. To make matters better, folks like Daniel and \nthe community have provided excellent support. If I had to do it again, I'd \nstill be using re-frame. \nOn Mon, Jan 29, 2018 at 05:53:33PM +0000, Jonathon McKitrick wrote:\n> My last non-trivial app used Reagent, but I did the rest of the wiring \n> manually. Now that there are many alternatives out there, I'd like to hear \n> your suggestions and comparisons, as I'm about to select one for a \n> non-trivial team (not personal) project.\n> \n> Re-frame is the obvious choice, but I've seen several alternatives. What \n> experiences have you had? What factors might help me choose one over \n> another?\n> \n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Looking for Reagent-based framework\/library suggestions Jeaye Sun, 04 Feb 2018 14:45:06 -0800"},
{"body":"That\u2019s amazing! I\u2019ll be sure to check out and follow this project.\n\nBut I\u2019m looking for more of an actual demo, with examples and showing\nadvanced features. I want to really impress a team of developers with what\nClojurescript and Re-frame can do. \nOn Sun, Feb 4, 2018 at 6:25 AM Nikita Dudnik <nikdud...@gmail.com> wrote:\n\n> Hey,\n>\n> What about this https:\/\/github.com\/status-im\/status-react\n>\n>\n> On Friday, February 2, 2018 at 5:23:47 PM UTC+1, Jonathon McKitrick wrote:\n>>\n>> I'd love a demo that I can show my team to illustrate what reagent and\n>> reframe can do.\n>>\n>> Does anyone know of any?\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/PE6gYL273aA\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \nJonathon McKitrick\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any cutting edge reagent\/reframe demos out there? jmckitrick Sun, 04 Feb 2018 05:33:08 -0800"},
{"body":"Hey,\n\nWhat about this https:\/\/github.com\/status-im\/status-react \nOn Friday, February 2, 2018 at 5:23:47 PM UTC+1, Jonathon McKitrick wrote:\n>\n> I'd love a demo that I can show my team to illustrate what reagent and \n> reframe can do.\n>\n> Does anyone know of any?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Any cutting edge reagent\/reframe demos out there? Nikita Dudnik Sun, 04 Feb 2018 03:25:41 -0800"},
{"body":"No I'm really lazy loading from another namespace, our `yoda.tracking` where \nall happens. This ns doesn't `require` at all the lazy loaded module, it just \n`resolve` it. I will work on a minimal repro case based on boot-cljs next week. \nThanks for your attention.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Problems with code-splitting Khalid Jebbari Sat, 03 Feb 2018 05:38:02 -0800"},
{"body":"I'd love a demo that I can show my team to illustrate what reagent and \nreframe can do. \nDoes anyone know of any?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Any cutting edge reagent\/reframe demos out there? Jonathon McKitrick Fri, 02 Feb 2018 08:24:06 -0800"},
{"body":"I don't really understand your example. In your code snippet here it looks\nlike you're lazy loading the module from the module itself? If that was\nunintentional, where is this lazy loading code happening? \nSomething a bit more minimal and more complete would be helpful.\n\nDavid\n\nOn Mon, Jan 29, 2018 at 12:07 PM, Khalid Jebbari <khalid.jebb...@gmail.com>\nwrote:\n\n> Hello,\n>\n> I'm trying to package all our trackers code (think Google analytics and\n> the likes) into different splits so that they don't make base JS package\n> too big and don't slow down time to interactive. Good idea, right ?\n>\n> Our strategy is basically to write the trackers code in Javascript first\n> with Google Closure compiler in mind (goog.provide(), goog.require() etc.)\n> and add those libs to our CLJS project and also package it as a standalone\n> Javascript file for others non-CLJS project. So far it works really well,\n> until now that I'm trying to code-split them.\n>\n> My first experiment fails because the code of the split ends up in the\n> base package instead, even though the split file is created. But this split\n> file is empty. Here's the configuration:\n>\n> Linux\n> Boot 2.7.1 with boot-cljs 2.1.4\n> Clojure 1.9\n> ClojureScript  1.9.946\n> Java 8 (openjdk version \"1.8.0_144\")\n>\n> CLJS compiler options:\n>\n> ```\n> {:main           \"yoda.core\"\n>  :libs           [\"trackers\/google_analytics.js\" ] ;; lot of trackers\n> here...\n>  :modules        {:google-analytics {:entries   \n> '#{yoda.tracking.google-analytics}\n> ;; cljs namespace that wraps the call to JS tracker, to be able to call\n> `(loader\/set-loaded! :google-analytics)`\n>                                      :output-to \"js\/google-analytics.js\"}}\n>  :asset-path     \"\/yd\/js\/main.out\"\n>  :optimizations  :simple\n>  :source-map     true\n>  :parallel-build true\n>  :verbose        true}\n> ```\n>\n> I use the modules like this in the CLJS code:\n>\n> ```\n> ;; CLJS wrapper namespace\n> (ns yoda.tracking.google-analytics\n>   (:require [cljs.loader :as loader]\n>             [trackers.google-analytics :as ga]))\n>\n> (defn start [ga-tracking-id entity]\n>   (ga\/start ga-tracking-id entity))\n>\n> (loader\/set-loaded! :google-analytics)\n>\n> ;; Code that lazy-loads it somewhere else\n> (loader\/load :google-analytics\n>              (fn []\n>                ((resolve 'yoda.tracking.google-analytics\/start)\n> ga-tracking-id entity)))\n> ```\n>\n> It seems to work when I look at the browser console:\n> log:Module loaded: cljs_base\n> log:Module loaded: google_analytics\n>\n> But when I examine the cljs_base.js and google_analytics.js files, the\n> problem appears: cljs_base.js contains the code of my CLJS wrapper\n> namespace, and google_analytics.js is empty (apart from the comment for\n> source-map).\n>\n> With the `:verbose true` option it looks like the CLJS compiler does the\n> work properly:\n> Building module :google-analytics\n> # ... several entries ...\n> adding entry [trackers.google-analytics] # the JS code\n> adding entry (yoda.tracking.google-analytics) # our CLJS wrapper namespace\n> module :google-analytics depends on :cljs-base\n>\n> Furthermore I expected the google_analytics.js to be loaded with a network\n> request, but there's only the request to load cljs_base.js.\n>\n> Is it because of cross module code motion ? It seems that the code of the\n> CLJS tracker is moved to the main module, but I don't understand why.\n>\n> Thanks in advance for your help.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Problems with code-splitting David Nolen Fri, 02 Feb 2018 00:18:52 -0800"},
{"body":"As described in the section headed \"Browser repl\" of Quickstart the \nrepl.clj file doesn't contain any ns clause and is located in the project \ndirectory. I can build the repl with \njava --add-modules java.xml.bind -cp cljs.jar:src clojure.main repl.clj\n\ninstead of \n\njava -cp cljs.jar:src clojure.main repl.clj\n\nas described in the Quickstart, because of Java 9 incompatibility of \nClojureScript. The hint I got from Thomas Heller.\n\nIn the section headed \"Leiningen\" Quickstart says\n\"All the commands above may be executed with the run feature of Leiningen. \nBut as described \nlein run -m clojure.main repl.clj\ndoesn't work. My assumption is that the Java 9 incompatibility is the \nproblem again.\nMaybe I am wrong.\n\nJohannes\n\nAm Montag, 29. Januar 2018 22:35:02 UTC+1 schrieb Gary Verhaegen:\n>\n> It seems it's not finding the repl.clj file, which would point to an \n> incorrect classpath definition.\n>\n> There's not much we can do to help without access to your project.clj file.\n>\n> From the stack trace, it looks like you may have incorrectly configured \n> the source paths (default is \"src\", I think), or your repl.clj files starts \n> with \"(ns cljs.repl\".\n>\n> By default, if your repl.clj files starts with that, the file itself needs \n> to be at src\/cljs\/repl.clj for Java to find it.\n>\n> On 26 Jan 2018, at 20:18, Johannes <bra...@nordakademie.de <javascript:>> \n> wrote:\n>\n> Is there a way to use leiningen with Clojurescript and Java 9 too.\n>\n> If I try this from the Quickstart:\n> lein run -m clojure.main repl.clj\n>\n> I get the following stack trace ...\n>\n> clojure.lang.Compiler$CompilerException: java.io.FileNotFoundException: \n> Could not locate cljs\/repl__init.class or cljs\/repl.clj on classpath., \n> compiling:(\/Users\/johannes\/tmp\/hello_world\/repl.clj:1:1)\n>  at clojure.lang.Compiler.load (Compiler.java:7391)\n>     clojure.lang.Compiler.loadFile (Compiler.java:7317)\n>     clojure.main$load_script.invokeStatic (main.clj:275)\n>     clojure.main$script_opt.invokeStatic (main.clj:335)\n>     clojure.main$script_opt.invoke (main.clj:330)\n>     clojure.main$main.invokeStatic (main.clj:421)\n>     clojure.main$main.doInvoke (main.clj:384)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.lang.Var.invoke (Var.java:379)\n>     clojure.lang.AFn.applyToHelper (AFn.java:154)\n>     clojure.lang.Var.applyTo (Var.java:700)\n>     clojure.main.main (main.java:37)\n>\n> Am Freitag, 26. Januar 2018 14:55:42 UTC+1 schrieb Johannes:\n>>\n>> yes, it works!\n>>\n>> Thank you\n>>\n>> Am Freitag, 26. Januar 2018 13:15:00 UTC+1 schrieb Thomas Heller:\n>>>\n>>> You can use it with Java9 today if you add a little flag to the command \n>>> line\n>>>\n>>> Instead of calling\n>>>\n>>> java -cp cljs.jar:src clojure.main build.clj\n>>>\n>>> you call\n>>>\n>>> java --add-modules java.xml.bind -cp cljs.jar:src clojure.main build.clj\n>>>\n>>> That should fix it. The Java9 fix was already applied to ClojureScript \n>>> master but it was not released yet. Until then you can just use the flag.\n>>>\n>>>\n>>> On Friday, January 26, 2018 at 10:20:03 AM UTC+1, Johannes wrote:\n>>>>\n>>>> Indeed, I updated to Java 9 a few day ago. Until now I didn't get any \n>>>> problems using Clojure with Java 9. I seems I have to wait for a Java 9 \n>>>> compatible version of Clojurescript.\n>>>>\n>>>> Am Freitag, 26. Januar 2018 01:30:34 UTC+1 schrieb Phill Wolf:\n>>>>>\n>>>>> The first sentence of the Quick Start says, \"The only dependencies \n>>>>> required for this tutorial are an installation of Java 8 and the \n>>>>> standalone \n>>>>> ClojureScript JAR.\"\n>>>>>\n>>>>> The clue \"Caused by: java.lang.ClassNotFoundException: \n>>>>> javax.xml.bind.DatatypeConverter\" suggests you might be using Java 9.\n>>>>>\n>>>> -- \n> Note that posts from new members are moderated - please be patient with \n> your first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescrip...@googlegroups.com <javascript:>.\n> To post to this group, send email to clojur...@googlegroups.com \n> <javascript:>.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Problems with Clojurescript quickstart \u2014 build fails Johannes Wed, 31 Jan 2018 11:02:49 -0800"},
{"body":"Johannes :: I just found your post, when I ran into the same problem. I had \nworked through the quickstart a week ago without problem on a different \ncomputer. I was able to get around this when I switched browsers - it seems \nthat I am running into this problem when I open index.html on Safari, but \nwhen I open index.html on Chrome, all works according to spec (so far). \nProbably this is not very helpful for you as it has been more than a month \nsince you posted this. I am just getting started with ClojureScript, so my \nadvice lacks any depth of analysis. \n\nMike\nOn Sunday, December 10, 2017 at 2:05:02 PM UTC-8, Johannes Brauer wrote:\n>\n> Hi,\n>\n> I think I could make the first steps of the tutorial successfully. With\n>\n> lein figwheel\n>\n> the repl is started. But when write\n>\n> (+ 1 2 3)\n>\n> at the prompt instead of 6 I get\n>\n> #object[TypeError TypeError: undefined is not an object (evaluating \n> 'figwheel.client.utils.persistent_config_get.call')]\n>\n> figwheel$client$repl_pprint@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client.js:179:51\n>\n> figwheel$client$repl_result_pr_str@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client.js:201:53\n>\n> eval code\n> eval@[native code]\n>\n> figwheel$client$utils$eval_helper@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client\/utils.js:160:12\n> nil\n>\n> Are there any hints what is going?\n>\n> Johannes\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: problem with figwheel quick start tutorial Michael Nardell Wed, 31 Jan 2018 09:08:37 -0800"},
{"body":"Hi Daniel,\n\nthanks for the response! \nI'm going to spend some time today reading through the docs you sent, and\nworking up an example app. In the meantime, here are answers to your\nquestions.\n\nThere are 3 of us on the team. We have a senior with a few years of\nexperience with ClojureScript (myself), and 2 intermediate developers with\nbackgrounds in web development and functional languages but new to\nClojureScript. They both have worked with ReactJS, however. Both are very\nexcited to learn Clojure and ClojureScript.\n\nThis app will not be huge, since it's a pilot project in a sense. We want\nto deliver a standalone project a low risk. It will be complex in the sense\nthat it will render a landing page to the customer, but a WYSIWYG UI to an\nadministrator for customizing the content. Not a lot of form processing.\n\n We want it to be a model for ClojureScript projects going forward, if\npossible, even if development slows after requirements are met. Testing and\ndebugging are paramount, and we want it to be approachable by\nnon-ClojureScript developers in the future, if necessary.\n\n\nOn Mon, Jan 29, 2018 at 4:12 PM Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> Hi Jonathon\n>\n> I'll put my cards on the table up-front, I work at Day8 and do a lot of\n> work developing re-frame apps and working on re-frame + Day8's re-frame\n> libraries.\n>\n> I think re-frame is a great UI framework, and we have had success building\n> and maintaining large (50,000 LOC) applications with complex UI's over the\n> last three years. I'm not sure if you've seen it, but\n> https:\/\/github.com\/Day8\/re-frame\/blob\/master\/docs\/FAQs\/DoINeedReFrame.md is\n> a pretty good description of what re-frame gives you\/why you'd want to use\n> it.\n>\n> To help answer your question further, it would be good to know more about\n> the team and project. How many people will be working on it? What are their\n> backgrounds with front-end web development, and ClojureScript? How big is\n> the application going to be? Is it mostly about building forms and\n> shuttling remote state to and from the client, or do you need more\n> complicated UIs? Is this a project that will be built in a few weeks\/months\n> and then parked for a while, or is it going to undergo continuous\n> development? What are the values that are more or less important to you\n> (documentation, performance, testing, debugging, scalability, community,\n> library ecosystem, long-term support, maintainability, novelty e.t.c.)?\n>\n> re-frame has been around for almost 3.5 years and has a pretty healthy\n> community. Using the Lindy effect\n> <https:\/\/en.wikipedia.org\/wiki\/Lindy_effect> (things that have been in\n> existence for a long period of time can be considered more\n> robust\/antifragile, i.e., more likely to continue to survive, than new\n> things that haven't passed the test of time), then we can expect it to be\n> around for another 3.5 years.\n>\n> At Day8 we have a lot invested in re-frame, so it's not going anywhere for\n> us, and because we've written so much code in it, we are very unlikely to\n> make any kind of radical changes that require rewriting your code.\n>\n> Hope that helps,\n> Daniel.\n>\n> On Tue, Jan 30, 2018 at 6:53 AM Jonathon McKitrick <jmckitr...@gmail.com>\n> wrote:\n>\n>> My last non-trivial app used Reagent, but I did the rest of the wiring\n>> manually. Now that there are many alternatives out there, I'd like to hear\n>> your suggestions and comparisons, as I'm about to select one for a\n>> non-trivial team (not personal) project.\n>>\n>> Re-frame is the obvious choice, but I've seen several alternatives. What\n>> experiences have you had? What factors might help me choose one over\n>> another?\n>>\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>>\n> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>\n>\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/79ZbN8Ll5MM\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \nJonathon McKitrick\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Looking for Reagent-based framework\/library suggestions jmckitrick Tue, 30 Jan 2018 04:52:08 -0800"},
{"body":"It seems it's not finding the repl.clj file, which would point to an incorrect \nclasspath definition. \nThere's not much we can do to help without access to your project.clj file.\n\n>From the stack trace, it looks like you may have incorrectly configured the \n>source paths (default is \"src\", I think), or your repl.clj files starts with \n>\"(ns cljs.repl\".\n\nBy default, if your repl.clj files starts with that, the file itself needs to \nbe at src\/cljs\/repl.clj for Java to find it.\n\n> On 26 Jan 2018, at 20:18, Johannes <bra...@nordakademie.de> wrote:\n> \n> Is there a way to use leiningen with Clojurescript and Java 9 too.\n> \n> If I try this from the Quickstart:\n> lein run -m clojure.main repl.clj\n> \n> I get the following stack trace ...\n> \n> clojure.lang.Compiler$CompilerException: java.io.FileNotFoundException: Could \n> not locate cljs\/repl__init.class or cljs\/repl.clj on classpath., \n> compiling:(\/Users\/johannes\/tmp\/hello_world\/repl.clj:1:1)\n>  at clojure.lang.Compiler.load (Compiler.java:7391)\n>     clojure.lang.Compiler.loadFile (Compiler.java:7317)\n>     clojure.main$load_script.invokeStatic (main.clj:275)\n>     clojure.main$script_opt.invokeStatic (main.clj:335)\n>     clojure.main$script_opt.invoke (main.clj:330)\n>     clojure.main$main.invokeStatic (main.clj:421)\n>     clojure.main$main.doInvoke (main.clj:384)\n>     clojure.lang.RestFn.invoke (RestFn.java:408)\n>     clojure.lang.Var.invoke (Var.java:379)\n>     clojure.lang.AFn.applyToHelper (AFn.java:154)\n>     clojure.lang.Var.applyTo (Var.java:700)\n>     clojure.main.main (main.java:37)\n> \n> Am Freitag, 26. Januar 2018 14:55:42 UTC+1 schrieb Johannes:\n>> \n>> yes, it works!\n>> \n>> Thank you\n>> \n>> Am Freitag, 26. Januar 2018 13:15:00 UTC+1 schrieb Thomas Heller:\n>>> \n>>> You can use it with Java9 today if you add a little flag to the command line\n>>> \n>>> Instead of calling\n>>> \n>>> java -cp cljs.jar:src clojure.main build.clj\n>>> \n>>> you call\n>>> \n>>> java --add-modules java.xml.bind -cp cljs.jar:src clojure.main build.clj\n>>> \n>>> That should fix it. The Java9 fix was already applied to ClojureScript \n>>> master but it was not released yet. Until then you can just use the flag.\n>>> \n>>> \n>>>> On Friday, January 26, 2018 at 10:20:03 AM UTC+1, Johannes wrote:\n>>>> Indeed, I updated to Java 9 a few day ago. Until now I didn't get any \n>>>> problems using Clojure with Java 9. I seems I have to wait for a Java 9 \n>>>> compatible version of Clojurescript.\n>>>> \n>>>> Am Freitag, 26. Januar 2018 01:30:34 UTC+1 schrieb Phill Wolf:\n>>>>> \n>>>>> The first sentence of the Quick Start says, \"The only dependencies \n>>>>> required for this tutorial are an installation of Java 8 and the \n>>>>> standalone ClojureScript JAR.\"\n>>>>> \n>>>>> The clue \"Caused by: java.lang.ClassNotFoundException: \n>>>>> javax.xml.bind.DatatypeConverter\" suggests you might be using Java 9.\n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Problems with Clojurescript quickstart \u2014 build fails Gary Verhaegen Mon, 29 Jan 2018 13:35:17 -0800"},
{"body":"Hi Jonathon\n\nI'll put my cards on the table up-front, I work at Day8 and do a lot of\nwork developing re-frame apps and working on re-frame + Day8's re-frame\nlibraries. \nI think re-frame is a great UI framework, and we have had success building\nand maintaining large (50,000 LOC) applications with complex UI's over the\nlast three years. I'm not sure if you've seen it, but\nhttps:\/\/github.com\/Day8\/re-frame\/blob\/master\/docs\/FAQs\/DoINeedReFrame.md is\na pretty good description of what re-frame gives you\/why you'd want to use\nit.\n\nTo help answer your question further, it would be good to know more about\nthe team and project. How many people will be working on it? What are their\nbackgrounds with front-end web development, and ClojureScript? How big is\nthe application going to be? Is it mostly about building forms and\nshuttling remote state to and from the client, or do you need more\ncomplicated UIs? Is this a project that will be built in a few weeks\/months\nand then parked for a while, or is it going to undergo continuous\ndevelopment? What are the values that are more or less important to you\n(documentation, performance, testing, debugging, scalability, community,\nlibrary ecosystem, long-term support, maintainability, novelty e.t.c.)?\n\nre-frame has been around for almost 3.5 years and has a pretty healthy\ncommunity. Using the Lindy effect\n<https:\/\/en.wikipedia.org\/wiki\/Lindy_effect> (things that have been in\nexistence for a long period of time can be considered more\nrobust\/antifragile, i.e., more likely to continue to survive, than new\nthings that haven't passed the test of time), then we can expect it to be\naround for another 3.5 years.\n\nAt Day8 we have a lot invested in re-frame, so it's not going anywhere for\nus, and because we've written so much code in it, we are very unlikely to\nmake any kind of radical changes that require rewriting your code.\n\nHope that helps,\nDaniel.\n\nOn Tue, Jan 30, 2018 at 6:53 AM Jonathon McKitrick <jmckitr...@gmail.com>\nwrote:\n\n> My last non-trivial app used Reagent, but I did the rest of the wiring\n> manually. Now that there are many alternatives out there, I'd like to hear\n> your suggestions and comparisons, as I'm about to select one for a\n> non-trivial team (not personal) project.\n>\n> Re-frame is the obvious choice, but I've seen several alternatives. What\n> experiences have you had? What factors might help me choose one over\n> another?\n>\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Looking for Reagent-based framework\/library suggestions Daniel Compton Mon, 29 Jan 2018 13:13:32 -0800"},
{"body":"My last non-trivial app used Reagent, but I did the rest of the wiring \nmanually. Now that there are many alternatives out there, I'd like to hear \nyour suggestions and comparisons, as I'm about to select one for a \nnon-trivial team (not personal) project. \nRe-frame is the obvious choice, but I've seen several alternatives. What \nexperiences have you had? What factors might help me choose one over \nanother?\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Looking for Reagent-based framework\/library suggestions Jonathon McKitrick Mon, 29 Jan 2018 09:54:01 -0800"},
{"body":"Hello,\n\nI'm trying to package all our trackers code (think Google analytics and the \nlikes) into different splits so that they don't make base JS package too \nbig and don't slow down time to interactive. Good idea, right ? \nOur strategy is basically to write the trackers code in Javascript first \nwith Google Closure compiler in mind (goog.provide(), goog.require() etc.) \nand add those libs to our CLJS project and also package it as a standalone \nJavascript file for others non-CLJS project. So far it works really well, \nuntil now that I'm trying to code-split them.\n\nMy first experiment fails because the code of the split ends up in the base \npackage instead, even though the split file is created. But this split file \nis empty. Here's the configuration:\n\nLinux\nBoot 2.7.1 with boot-cljs 2.1.4\nClojure 1.9\nClojureScript  1.9.946\nJava 8 (openjdk version \"1.8.0_144\")\n\nCLJS compiler options:\n\n```\n{:main           \"yoda.core\"\n :libs           [\"trackers\/google_analytics.js\" ] ;; lot of trackers \nhere...\n :modules        {:google-analytics {:entries   \n'#{yoda.tracking.google-analytics} ;; cljs namespace that wraps the call to \nJS tracker, to be able to call `(loader\/set-loaded! :google-analytics)`\n                                     :output-to \"js\/google-analytics.js\"}}\n :asset-path     \"\/yd\/js\/main.out\"\n :optimizations  :simple\n :source-map     true\n :parallel-build true\n :verbose        true}\n```\n\nI use the modules like this in the CLJS code:\n\n```\n;; CLJS wrapper namespace\n(ns yoda.tracking.google-analytics\n  (:require [cljs.loader :as loader]\n            [trackers.google-analytics :as ga]))\n\n(defn start [ga-tracking-id entity]\n  (ga\/start ga-tracking-id entity))\n\n(loader\/set-loaded! :google-analytics)\n\n;; Code that lazy-loads it somewhere else\n(loader\/load :google-analytics\n             (fn []\n               ((resolve 'yoda.tracking.google-analytics\/start) \nga-tracking-id entity)))\n```\n\nIt seems to work when I look at the browser console:\nlog:Module loaded: cljs_base\nlog:Module loaded: google_analytics\n\nBut when I examine the cljs_base.js and google_analytics.js files, the \nproblem appears: cljs_base contains the code of my CLJS wrapper namespace, \nand google_analytics.js is empty (apart from the comment for source-map).\n\nWith the `:verbose true` option it looks like the CLJS compiler does the \nwork properly:\nBuilding module :google-analytics\n# ... several entries ...\nadding entry [trackers.google-analytics] # the JS code\nadding entry (yoda.tracking.google-analytics) # our CLJS wrapper namespace\nmodule :google-analytics depends on :cljs-base\n\nFurthermore I expected the google_analytics.js to be loaded with a network \nrequest, but there's only the request to load cljs_base.js.\n\nIs it because of cross module code motion ? It seems that the code of the \nCLJS tracker is moved to the main module, but I don't understand why.\n\nThanks in advance for your help.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Problems with code splitting Khalid Jebbari Mon, 29 Jan 2018 08:09:50 -0800"},
{"body":"Hello,\n\nI'm trying to package all our trackers code (think Google analytics and the \nlikes) into different splits so that they don't make base JS package too \nbig and don't slow down time to interactive. Good idea, right ? \nOur strategy is basically to write the trackers code in Javascript first \nwith Google Closure compiler in mind (goog.provide(), goog.require() etc.) \nand add those libs to our CLJS project and also package it as a standalone \nJavascript file for others non-CLJS project. So far it works really well, \nuntil now that I'm trying to code-split them.\n\nMy first experiment fails because the code of the split ends up in the base \npackage instead, even though the split file is created. But this split file \nis empty. Here's the configuration:\n\nLinux\nBoot 2.7.1 with boot-cljs 2.1.4\nClojure 1.9\nClojureScript  1.9.946\nJava 8 (openjdk version \"1.8.0_144\")\n\nCLJS compiler options:\n\n```\n{:main           \"yoda.core\"\n :libs           [\"trackers\/google_analytics.js\" ] ;; lot of trackers \nhere...\n :modules        {:google-analytics {:entries   \n'#{yoda.tracking.google-analytics} ;; cljs namespace that wraps the call to \nJS tracker, to be able to call `(loader\/set-loaded! :google-analytics)`\n                                     :output-to \"js\/google-analytics.js\"}}\n :asset-path     \"\/yd\/js\/main.out\"\n :optimizations  :simple\n :source-map     true\n :parallel-build true\n :verbose        true}\n```\n\nI use the modules like this in the CLJS code:\n\n```\n;; CLJS wrapper namespace\n(ns yoda.tracking.google-analytics\n  (:require [cljs.loader :as loader]\n            [trackers.google-analytics :as ga]))\n\n(defn start [ga-tracking-id entity]\n  (ga\/start ga-tracking-id entity))\n\n(loader\/set-loaded! :google-analytics)\n\n;; Code that lazy-loads it somewhere else\n(loader\/load :google-analytics\n             (fn []\n               ((resolve 'yoda.tracking.google-analytics\/start) \nga-tracking-id entity)))\n```\n\nIt seems to work when I look at the browser console:\nlog:Module loaded: cljs_base\nlog:Module loaded: google_analytics\n\nBut when I examine the cljs_base.js and google_analytics.js files, the \nproblem appears: cljs_base.js contains the code of my CLJS wrapper \nnamespace, and google_analytics.js is empty (apart from the comment for \nsource-map).\n\nWith the `:verbose true` option it looks like the CLJS compiler does the \nwork properly:\nBuilding module :google-analytics\n# ... several entries ...\nadding entry [trackers.google-analytics] # the JS code\nadding entry (yoda.tracking.google-analytics) # our CLJS wrapper namespace\nmodule :google-analytics depends on :cljs-base\n\nFurthermore I expected the google_analytics.js to be loaded with a network \nrequest, but there's only the request to load cljs_base.js.\n\nIs it because of cross module code motion ? It seems that the code of the \nCLJS tracker is moved to the main module, but I don't understand why.\n\nThanks in advance for your help.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Problems with code-splitting Khalid Jebbari Mon, 29 Jan 2018 08:09:50 -0800"},
{"body":"I don\u2019t know how far away the next release it but is it worth adding a note to \nthis effect to the Getting Started page? \nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Problems with Clojurescript quickstart \u2014 build fails Alan Moore Sat, 27 Jan 2018 09:38:01 -0800"},
{"body":"Is there a way to use leiningen with Clojurescript and Java 9 too.\n\nIf I try this from the Quickstart:\nlein run -m clojure.main repl.clj \nI get the following stack trace ...\n\nclojure.lang.Compiler$CompilerException: java.io.FileNotFoundException: \nCould not locate cljs\/repl__init.class or cljs\/repl.clj on classpath., \ncompiling:(\/Users\/johannes\/tmp\/hello_world\/repl.clj:1:1)\n at clojure.lang.Compiler.load (Compiler.java:7391)\n    clojure.lang.Compiler.loadFile (Compiler.java:7317)\n    clojure.main$load_script.invokeStatic (main.clj:275)\n    clojure.main$script_opt.invokeStatic (main.clj:335)\n    clojure.main$script_opt.invoke (main.clj:330)\n    clojure.main$main.invokeStatic (main.clj:421)\n    clojure.main$main.doInvoke (main.clj:384)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    clojure.lang.Var.invoke (Var.java:379)\n    clojure.lang.AFn.applyToHelper (AFn.java:154)\n    clojure.lang.Var.applyTo (Var.java:700)\n    clojure.main.main (main.java:37)\n\nAm Freitag, 26. Januar 2018 14:55:42 UTC+1 schrieb Johannes:\n>\n> yes, it works!\n>\n> Thank you\n>\n> Am Freitag, 26. Januar 2018 13:15:00 UTC+1 schrieb Thomas Heller:\n>>\n>> You can use it with Java9 today if you add a little flag to the command \n>> line\n>>\n>> Instead of calling\n>>\n>> java -cp cljs.jar:src clojure.main build.clj\n>>\n>> you call\n>>\n>> java --add-modules java.xml.bind -cp cljs.jar:src clojure.main build.clj\n>>\n>> That should fix it. The Java9 fix was already applied to ClojureScript \n>> master but it was not released yet. Until then you can just use the flag.\n>>\n>>\n>> On Friday, January 26, 2018 at 10:20:03 AM UTC+1, Johannes wrote:\n>>>\n>>> Indeed, I updated to Java 9 a few day ago. Until now I didn't get any \n>>> problems using Clojure with Java 9. I seems I have to wait for a Java 9 \n>>> compatible version of Clojurescript.\n>>>\n>>> Am Freitag, 26. Januar 2018 01:30:34 UTC+1 schrieb Phill Wolf:\n>>>>\n>>>> The first sentence of the Quick Start says, \"The only dependencies \n>>>> required for this tutorial are an installation of Java 8 and the \n>>>> standalone \n>>>> ClojureScript JAR.\"\n>>>>\n>>>> The clue \"Caused by: java.lang.ClassNotFoundException: \n>>>> javax.xml.bind.DatatypeConverter\" suggests you might be using Java 9.\n>>>>\n>>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Problems with Clojurescript quickstart \u2014 build fails Johannes Fri, 26 Jan 2018 12:19:10 -0800"},
{"body":"Am Donnerstag, 25. Januar 2018 23:14:10 UTC+1 schrieb Johannes:\n>\n> I'm trying to follow the Clojurescript Quick-Start\n>\n> I have downloaded the Clojurescript jar as described in the Quick-Start \n> guide.  I have created the files describe there. But when I try to build \n> using the command:\n>\n> java -cp cljs.jar:src clojure.main build.clj\n>\n> I get the following stacktrace:\n>\n>\n> Exception in thread \"main\" java.lang.ExceptionInInitializerError, \n> compiling:(\/Users\/johannes\/tmp\/hello_world\/build.clj:1:1)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7391)\n>\n> at clojure.lang.Compiler.loadFile(Compiler.java:7317)\n>\n> at clojure.main$load_script.invokeStatic(main.clj:275)\n>\n> at clojure.main$script_opt.invokeStatic(main.clj:335)\n>\n> at clojure.main$script_opt.invoke(main.clj:330)\n>\n> at clojure.main$main.invokeStatic(main.clj:421)\n>\n> at clojure.main$main.doInvoke(main.clj:384)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>\n> at clojure.lang.Var.invoke(Var.java:379)\n>\n> at clojure.lang.AFn.applyToHelper(AFn.java:154)\n>\n> at clojure.lang.Var.applyTo(Var.java:700)\n>\n> at clojure.main.main(main.java:37)\n>\n> Caused by: java.lang.ExceptionInInitializerError\n>\n> at java.base\/java.lang.Class.forName0(Native Method)\n>\n> at java.base\/java.lang.Class.forName(Class.java:375)\n>\n> at clojure.lang.RT.classForName(RT.java:2168)\n>\n> at clojure.lang.RT.classForName(RT.java:2177)\n>\n> at clojure.lang.RT.loadClassForName(RT.java:2196)\n>\n> at clojure.lang.RT.load(RT.java:443)\n>\n> at clojure.lang.RT.load(RT.java:419)\n>\n> at clojure.core$load$fn__5677.invoke(core.clj:5893)\n>\n> at clojure.core$load.invokeStatic(core.clj:5892)\n>\n> at clojure.core$load.doInvoke(core.clj:5876)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>\n> at clojure.core$load_one.invokeStatic(core.clj:5697)\n>\n> at clojure.core$load_one.invoke(core.clj:5692)\n>\n> at clojure.core$load_lib$fn__5626.invoke(core.clj:5737)\n>\n> at clojure.core$load_lib.invokeStatic(core.clj:5736)\n>\n> at clojure.core$load_lib.doInvoke(core.clj:5717)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>\n> at clojure.core$apply.invokeStatic(core.clj:648)\n>\n> at clojure.core$load_libs.invokeStatic(core.clj:5774)\n>\n> at clojure.core$load_libs.doInvoke(core.clj:5758)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>\n> at clojure.core$apply.invokeStatic(core.clj:648)\n>\n> at clojure.core$require.invokeStatic(core.clj:5796)\n>\n> at cljs.build.api$loading__5569__auto____4052.invoke(api.clj:8)\n>\n> at cljs.build.api__init.load(Unknown Source)\n>\n> at cljs.build.api__init.<clinit>(Unknown Source)\n>\n> at java.base\/java.lang.Class.forName0(Native Method)\n>\n> at java.base\/java.lang.Class.forName(Class.java:375)\n>\n> at clojure.lang.RT.classForName(RT.java:2168)\n>\n> at clojure.lang.RT.classForName(RT.java:2177)\n>\n> at clojure.lang.RT.loadClassForName(RT.java:2196)\n>\n> at clojure.lang.RT.load(RT.java:443)\n>\n> at clojure.lang.RT.load(RT.java:419)\n>\n> at clojure.core$load$fn__5677.invoke(core.clj:5893)\n>\n> at clojure.core$load.invokeStatic(core.clj:5892)\n>\n> at clojure.core$load.doInvoke(core.clj:5876)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>\n> at clojure.core$load_one.invokeStatic(core.clj:5697)\n>\n> at clojure.core$load_one.invoke(core.clj:5692)\n>\n> at clojure.core$load_lib$fn__5626.invoke(core.clj:5737)\n>\n> at clojure.core$load_lib.invokeStatic(core.clj:5736)\n>\n> at clojure.core$load_lib.doInvoke(core.clj:5717)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>\n> at clojure.core$apply.invokeStatic(core.clj:648)\n>\n> at clojure.core$load_libs.invokeStatic(core.clj:5774)\n>\n> at clojure.core$load_libs.doInvoke(core.clj:5758)\n>\n> at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>\n> at clojure.core$apply.invokeStatic(core.clj:648)\n>\n> at clojure.core$require.invokeStatic(core.clj:5796)\n>\n> at clojure.core$require.doInvoke(core.clj:5796)\n>\n> at clojure.lang.RestFn.invoke(RestFn.java:408)\n>\n> at user$eval1.invokeStatic(build.clj:1)\n>\n> at user$eval1.invoke(build.clj:1)\n>\n> at clojure.lang.Compiler.eval(Compiler.java:6927)\n>\n> at clojure.lang.Compiler.load(Compiler.java:7379)\n>\n> ... 11 more\n>\n> Caused by: java.lang.ClassNotFoundException: \n> javax.xml.bind.DatatypeConverter\n>\n> at \n> java.base\/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)\n>\n> at \n> java.base\/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)\n>\n> at java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n>\n> at java.base\/java.lang.Class.forName0(Native Method)\n>\n> at java.base\/java.lang.Class.forName(Class.java:375)\n>\n> at clojure.lang.RT.classForName(RT.java:2168)\n>\n> at clojure.lang.RT.classForNameNonLoading(RT.java:2181)\n>\n> at cljs.util$loading__5569__auto____268.invoke(util.cljc:9)\n>\n> at cljs.util__init.load(Unknown Source)\n>\n> at cljs.util__init.<clinit>(Unknown Source)\n>\n> ... 66 more\n>\n> What is going wrong?\n>\n> Johannes\n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Problems with Clojurescript quickstart \u2014 build fails Johannes Fri, 26 Jan 2018 11:56:14 -0800"},
{"body":"yes, it works!\n\nThank you \nAm Freitag, 26. Januar 2018 13:15:00 UTC+1 schrieb Thomas Heller:\n>\n> You can use it with Java9 today if you add a little flag to the command \n> line\n>\n> Instead of calling\n>\n> java -cp cljs.jar:src clojure.main build.clj\n>\n> you call\n>\n> java --add-modules java.xml.bind -cp cljs.jar:src clojure.main build.clj\n>\n> That should fix it. The Java9 fix was already applied to ClojureScript \n> master but it was not released yet. Until then you can just use the flag.\n>\n>\n> On Friday, January 26, 2018 at 10:20:03 AM UTC+1, Johannes wrote:\n>>\n>> Indeed, I updated to Java 9 a few day ago. Until now I didn't get any \n>> problems using Clojure with Java 9. I seems I have to wait for a Java 9 \n>> compatible version of Clojurescript.\n>>\n>> Am Freitag, 26. Januar 2018 01:30:34 UTC+1 schrieb Phill Wolf:\n>>>\n>>> The first sentence of the Quick Start says, \"The only dependencies \n>>> required for this tutorial are an installation of Java 8 and the standalone \n>>> ClojureScript JAR.\"\n>>>\n>>> The clue \"Caused by: java.lang.ClassNotFoundException: \n>>> javax.xml.bind.DatatypeConverter\" suggests you might be using Java 9.\n>>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Problems with Clojurescript quickstart \u2014 build fails Johannes Fri, 26 Jan 2018 05:56:20 -0800"},
{"body":"You can use it with Java9 today if you add a little flag to the command line \nInstead of calling\n\njava -cp cljs.jar:src clojure.main build.clj\n\nyou call\n\njava --add-modules java.xml.bind -cp cljs.jar:src clojure.main build.clj\n\nThat should fix it. The Java9 fix was already applied to ClojureScript \nmaster but it was not released yet. Until then you can just use the flag.\n\n\nOn Friday, January 26, 2018 at 10:20:03 AM UTC+1, Johannes wrote:\n>\n> Indeed, I updated to Java 9 a few day ago. Until now I didn't get any \n> problems using Clojure with Java 9. I seems I have to wait for a Java 9 \n> compatible version of Clojurescript.\n>\n> Am Freitag, 26. Januar 2018 01:30:34 UTC+1 schrieb Phill Wolf:\n>>\n>> The first sentence of the Quick Start says, \"The only dependencies \n>> required for this tutorial are an installation of Java 8 and the standalone \n>> ClojureScript JAR.\"\n>>\n>> The clue \"Caused by: java.lang.ClassNotFoundException: \n>> javax.xml.bind.DatatypeConverter\" suggests you might be using Java 9.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Problems with Clojurescript quickstart \u2014 build fails Thomas Heller Fri, 26 Jan 2018 04:15:26 -0800"},
{"body":"Indeed, I updated to Java 9 a few day ago. Until now I didn't get any \nproblems using Clojure with Java 9. I seems I have to wait for a Java 9 \ncompatible version of Clojurescript. \nAm Freitag, 26. Januar 2018 01:30:34 UTC+1 schrieb Phill Wolf:\n>\n> The first sentence of the Quick Start says, \"The only dependencies \n> required for this tutorial are an installation of Java 8 and the standalone \n> ClojureScript JAR.\"\n>\n> The clue \"Caused by: java.lang.ClassNotFoundException: \n> javax.xml.bind.DatatypeConverter\" suggests you might be using Java 9.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Problems with Clojurescript quickstart \u2014 build fails Johannes Fri, 26 Jan 2018 01:20:33 -0800"},
{"body":"The first sentence of the Quick Start says, \"The only dependencies required \nfor this tutorial are an installation of Java 8 and the standalone \nClojureScript JAR.\" \nThe clue \"Caused by: java.lang.ClassNotFoundException: \njavax.xml.bind.DatatypeConverter\" suggests you might be using Java 9.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Problems with Clojurescript quickstart \u2014 build fails Phill Wolf Thu, 25 Jan 2018 16:30:56 -0800"},
{"body":"I'm trying to follow the Clojurescript Quick-Start \nI have downloaded the Clojurescript jar as described in the Quick-Start \nguide.  I have created the files describe there. But when I try to build \nusing the command:\n\njava -cp cljs.jar:src clojure.main build.clj\n\nI get the following stacktrace:\n\n\nException in thread \"main\" java.lang.ExceptionInInitializerError, \ncompiling:(\/Users\/johannes\/tmp\/hello_world\/build.clj:1:1)\n\nat clojure.lang.Compiler.load(Compiler.java:7391)\n\nat clojure.lang.Compiler.loadFile(Compiler.java:7317)\n\nat clojure.main$load_script.invokeStatic(main.clj:275)\n\nat clojure.main$script_opt.invokeStatic(main.clj:335)\n\nat clojure.main$script_opt.invoke(main.clj:330)\n\nat clojure.main$main.invokeStatic(main.clj:421)\n\nat clojure.main$main.doInvoke(main.clj:384)\n\nat clojure.lang.RestFn.invoke(RestFn.java:408)\n\nat clojure.lang.Var.invoke(Var.java:379)\n\nat clojure.lang.AFn.applyToHelper(AFn.java:154)\n\nat clojure.lang.Var.applyTo(Var.java:700)\n\nat clojure.main.main(main.java:37)\n\nCaused by: java.lang.ExceptionInInitializerError\n\nat java.base\/java.lang.Class.forName0(Native Method)\n\nat java.base\/java.lang.Class.forName(Class.java:375)\n\nat clojure.lang.RT.classForName(RT.java:2168)\n\nat clojure.lang.RT.classForName(RT.java:2177)\n\nat clojure.lang.RT.loadClassForName(RT.java:2196)\n\nat clojure.lang.RT.load(RT.java:443)\n\nat clojure.lang.RT.load(RT.java:419)\n\nat clojure.core$load$fn__5677.invoke(core.clj:5893)\n\nat clojure.core$load.invokeStatic(core.clj:5892)\n\nat clojure.core$load.doInvoke(core.clj:5876)\n\nat clojure.lang.RestFn.invoke(RestFn.java:408)\n\nat clojure.core$load_one.invokeStatic(core.clj:5697)\n\nat clojure.core$load_one.invoke(core.clj:5692)\n\nat clojure.core$load_lib$fn__5626.invoke(core.clj:5737)\n\nat clojure.core$load_lib.invokeStatic(core.clj:5736)\n\nat clojure.core$load_lib.doInvoke(core.clj:5717)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:142)\n\nat clojure.core$apply.invokeStatic(core.clj:648)\n\nat clojure.core$load_libs.invokeStatic(core.clj:5774)\n\nat clojure.core$load_libs.doInvoke(core.clj:5758)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:137)\n\nat clojure.core$apply.invokeStatic(core.clj:648)\n\nat clojure.core$require.invokeStatic(core.clj:5796)\n\nat cljs.build.api$loading__5569__auto____4052.invoke(api.clj:8)\n\nat cljs.build.api__init.load(Unknown Source)\n\nat cljs.build.api__init.<clinit>(Unknown Source)\n\nat java.base\/java.lang.Class.forName0(Native Method)\n\nat java.base\/java.lang.Class.forName(Class.java:375)\n\nat clojure.lang.RT.classForName(RT.java:2168)\n\nat clojure.lang.RT.classForName(RT.java:2177)\n\nat clojure.lang.RT.loadClassForName(RT.java:2196)\n\nat clojure.lang.RT.load(RT.java:443)\n\nat clojure.lang.RT.load(RT.java:419)\n\nat clojure.core$load$fn__5677.invoke(core.clj:5893)\n\nat clojure.core$load.invokeStatic(core.clj:5892)\n\nat clojure.core$load.doInvoke(core.clj:5876)\n\nat clojure.lang.RestFn.invoke(RestFn.java:408)\n\nat clojure.core$load_one.invokeStatic(core.clj:5697)\n\nat clojure.core$load_one.invoke(core.clj:5692)\n\nat clojure.core$load_lib$fn__5626.invoke(core.clj:5737)\n\nat clojure.core$load_lib.invokeStatic(core.clj:5736)\n\nat clojure.core$load_lib.doInvoke(core.clj:5717)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:142)\n\nat clojure.core$apply.invokeStatic(core.clj:648)\n\nat clojure.core$load_libs.invokeStatic(core.clj:5774)\n\nat clojure.core$load_libs.doInvoke(core.clj:5758)\n\nat clojure.lang.RestFn.applyTo(RestFn.java:137)\n\nat clojure.core$apply.invokeStatic(core.clj:648)\n\nat clojure.core$require.invokeStatic(core.clj:5796)\n\nat clojure.core$require.doInvoke(core.clj:5796)\n\nat clojure.lang.RestFn.invoke(RestFn.java:408)\n\nat user$eval1.invokeStatic(build.clj:1)\n\nat user$eval1.invoke(build.clj:1)\n\nat clojure.lang.Compiler.eval(Compiler.java:6927)\n\nat clojure.lang.Compiler.load(Compiler.java:7379)\n\n... 11 more\n\nCaused by: java.lang.ClassNotFoundException: \njavax.xml.bind.DatatypeConverter\n\nat \njava.base\/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)\n\nat \njava.base\/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)\n\nat java.base\/java.lang.ClassLoader.loadClass(ClassLoader.java:496)\n\nat java.base\/java.lang.Class.forName0(Native Method)\n\nat java.base\/java.lang.Class.forName(Class.java:375)\n\nat clojure.lang.RT.classForName(RT.java:2168)\n\nat clojure.lang.RT.classForNameNonLoading(RT.java:2181)\n\nat cljs.util$loading__5569__auto____268.invoke(util.cljc:9)\n\nat cljs.util__init.load(Unknown Source)\n\nat cljs.util__init.<clinit>(Unknown Source)\n\n... 66 more\n\nWhat is going wrong?\n\nJohannes\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Problems with Clojurescript quickstart \u2014 build fails Johannes Thu, 25 Jan 2018 14:14:29 -0800"},
{"body":"It's time for the annual State of Clojure Community survey!\n\nIf you are a user of Clojure or ClojureScript, we are greatly interested in \nyour responses to the following survey: \nhttps:\/\/www.surveymonkey.com\/r\/clojure2018\n\nThe survey contains four pages:\n\n1. General questions applicable to any user of Clojure or ClojureScript\n2. Questions specific to JVM Clojure (skip if not applicable)\n3. Questions specific to ClojureScript (skip if not applicable)\n4. Final comments\n\nThe survey will close February 9th. All of the data will be released in \nFebruary. We are greatly appreciative of your input!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] 2018 State of Clojure Community Survey Alex Miller Thu, 25 Jan 2018 08:18:48 -0800"},
{"body":"Repost from the Clojure \ngroup: https:\/\/groups.google.com\/forum\/#!topic\/clojure\/znd8R_QJU8c \nHi,\n\nI have the following clojurescript project dependency setup: X -> Y (X has \nstated Y in :dependencies). Now, I would like Y to depend on a npm \njavascript library Z. Following the guides, I added :npm-deps to one of the \nbuilds specified in Y. When I build and run Y, everything works fine with \nthe new Z dependency. However, building\/running project X now fails since \nthe dependency Z cannot be found. From what I currently know, there are two \napproaches to get X running again:\n\n1) Specify Z as an :npm-deps also in the project X builds. This is not very \nelegant since the union of all dependencies now cascade to the top level \nprojects. Also, this approach would fail when transitive dependencies need \ndifferent versions of the same dependency.\n2) Compile Y into a bundle. Then X would depend on the prebuilt bundle of Y \n(which already includes Z). This is not perfect since it requires an extra \nprocessing step in Y, making lein checkouts a bit more troublesome etc. \nAlso, my intuition tells me that this might affect code splitting, \ncompilation optimizations, dead code elimination, etc. in a negative way.\n\nAm I missing something?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] :npm-deps and transitive dependencies Lucas Wiener Tue, 16 Jan 2018 11:04:30 -0800"},
{"body":"based on the explanation mfikes gave, the solution I ended up with is \n\n(js\/eval \"globalEval = eval\")\nthen in my clojurescript,\n(js\/globalEval \" function abc(){}\") \nOn Tuesday, January 9, 2018 at 1:32:57 AM UTC+2, Sonny To wrote:\n>\n> clojuresript repl:\n> stigmergy.loader> (js\/eval \"function abc(){}\")\n> nil\n> stigmergy.loader> (js\/abc)\n> #object[ReferenceError ReferenceError: abc is not defined]                \n>                                                                             \n>                           \n> nil\n>\n> javascript repl:\n> eval(\"function abc(){}\")\n> 01:30:26.689 undefined\n> 01:30:33.614 abc()\n> 01:30:33.624 undefined\n>\n> why can't I define a functiion using js\/eval but can using eval in \n> javascript?\n>\n> however this works:\n>\n> stigmergy.loader> (js\/eval \"foobar123 = function(){}\")\n> #object[foobar123]\n> stigmergy.loader> (js\/foobar123)\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: different vehavior between js\/eval in clojurescript repl and eval in javascript repl Sonny To Mon, 08 Jan 2018 17:31:02 -0800"},
{"body":"mfikes answered this on the clojurescript slack channel\n \nmfikes: You can get around this by, for example doing `(let [geval js\/eval] \n> (geval \"function abc(){}\"))`\n> @phronmophobic Yeah, I think you are right. Planck specifically doesn't do \n> that in order to fix, for example \n> https:\/\/github.com\/mfikes\/planck\/issues\/543 (see the bit at the very bottom \n> of that bug thread) (edited)\n\n\nThis is an odd behavior but it is due to how javascript behaves:\n\nmfikes: By binding, `\" the eval code is not being evaluated by a direct \n> call\" \n> Then 1. a. applies here \n> http:\/\/www.ecma-international.org\/ecma-262\/5.1\/#sec-10.4.2\n> In short, it is an ECMAScript 5 feature\n\n\nOn Tuesday, January 9, 2018 at 1:32:57 AM UTC+2, Sonny To wrote:\n>\n> clojuresript repl:\n> stigmergy.loader> (js\/eval \"function abc(){}\")\n> nil\n> stigmergy.loader> (js\/abc)\n> #object[ReferenceError ReferenceError: abc is not defined]                \n>                                                                             \n>                           \n> nil\n>\n> javascript repl:\n> eval(\"function abc(){}\")\n> 01:30:26.689 undefined\n> 01:30:33.614 abc()\n> 01:30:33.624 undefined\n>\n> why can't I define a functiion using js\/eval but can using eval in \n> javascript?\n>\n> however this works:\n>\n> stigmergy.loader> (js\/eval \"foobar123 = function(){}\")\n> #object[foobar123]\n> stigmergy.loader> (js\/foobar123)\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: different vehavior between js\/eval in clojurescript repl and eval in javascript repl Sonny To Mon, 08 Jan 2018 16:29:57 -0800"},
{"body":"clojuresript repl:\nstigmergy.loader> (js\/eval \"function abc(){}\")\nnil\nstigmergy.loader> (js\/abc)\n#object[ReferenceError ReferenceError: abc is not defined]                  \n                                                                            \n                        \nnil \njavascript repl:\neval(\"function abc(){}\")\n01:30:26.689 undefined\n01:30:33.614 abc()\n01:30:33.624 undefined\n\nwhy can't I define a functiion using js\/eval but can using eval in \njavascript?\n\nhowever this works:\n\nstigmergy.loader> (js\/eval \"foobar123 = function(){}\")\n#object[foobar123]\nstigmergy.loader> (js\/foobar123)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] different vehavior between js\/eval in clojurescript repl and eval in javascript repl Sonny To Mon, 08 Jan 2018 15:33:06 -0800"},
{"body":"Christian,\n\nGreat to see the progress on this! I\u2019ll join you again on the gitter channel as \nthere are some things that might be complimentary, ie. holochain.org. TBD. \nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: durable datascript experiments Alan Moore Sat, 06 Jan 2018 09:45:23 -0800"},
{"body":"It now has its own repo as datahike and is on clojars to play around.\n\nhttps:\/\/github.com\/replikativ\/datahike \nWe are also working on replication of the hitchhiker-tree here:\n\nhttps:\/\/gitlab.com\/replikativ\/index-sync\n\nSo hopefully we will be able to stream replicate a datahike db soon.\n\nBest,\nChristian\n\nOn 31.12.2017 00:13, Laurens Van Houtven wrote:\n> Whoa; this looks awesome. Thanks for publishing this.\n> \n> On Sat, Dec 30, 2017 at 2:24 PM, Christian Weilbach\n> <whitesp...@polyc0l0r.net <mailto:whitesp...@polyc0l0r.net>> wrote:\n> \n>     Hi,\n> \n>     performance is now a lot better, ~3-5x slower than datascript for\n>     queries on the fractal index trees on my machine. This still needs\n>     tuning ofc., but I have tried to make it fast with a lot of profiling\n>     during idle times at 34C3. The fractal tree causes some overhead though.\n>     Inserts are a lot more expensive, but I expect them to be written to\n>     disk anyway. Therefore comparing inserts\/deletes with datascript is a\n>     bit pointless, if you do everything in memory then it will always be\n>     more performant.\n> \n>     So it should be usable for small test projects now. GC is still TODO,\n>     but I would be really happy for feedback! We are developing this as a\n>     toolbox for distributed dataprocessing architectures.\n> \n>     Best,\n>     Christian\n> \n>     On 26.12.2017 12:18, Christian Weilbach wrote:\n>     > Hi,\n>     >\n>     > I have finally taken the time yesterday in a good end-of-year\n>     tradition\n>     > of ambitious hacks to bring the hitchhiker-tree (1) and datascript (2)\n>     > together. I have only touched the db.cljc namespace in datascript and\n>     > replaced all calls to the in-memory balanced-tree set (btset) with\n>     calls\n>     > to the hitchhiker-tree, the rest is vanilla DataScript. All tests pass\n>     > and I can store and load databases sufficiently with the three\n>     trees for\n>     > the indices (no datascript serialization used).\n>     >\n>     > I would like to have early feedback, so feel free to play and throw\n>     > ideas around. You need to install my version of the\n>     hitchhiker-tree (1)\n>     > first. Atm. it is a drop-in replacement for DataScript, but this is a\n>     > prototype, don't use it for anything serious yet.\n>     >\n>     > Here is an example interaction with the store:\n>     >\n>     >\n>     \n> https:\/\/github.com\/whilo\/datascript\/blob\/hitchhiker_tree_support\/test\/datascript\/test\/store.cljc\n>     \n> <https:\/\/github.com\/whilo\/datascript\/blob\/hitchhiker_tree_support\/test\/datascript\/test\/store.cljc>\n>     >\n>     > Caveats:\n>     > 1. There is no working GC for the hitchhiker-trees yet.\n>     > 2. Performance penalty against DataScript is in the 20-100x range,\n>     but I\n>     > haven't done serious profiling yet.\n>     > 3. There are probably bugs that are not covered by the tests, please\n>     > open an issue.\n>     >\n>     > Goals:\n>     > This is more of an intermediary goal, although it is very useful\n>     to have\n>     > a durable datascript around in itself. The hitchhiker-tree is a\n>     generic\n>     > persistent durable datastructure that can be efficiently synched and\n>     > hence replication is the goal. Next step is a \"web-after-tomorrow\" (3)\n>     > architecture similar to datsync, that we are discussing about here:\n>     >\n>     > https:\/\/gitter.im\/metasoarous\/datsync\n>     <https:\/\/gitter.im\/metasoarous\/datsync>\n>     > https:\/\/gitter.im\/replikativ\/replikativ\n>     <https:\/\/gitter.im\/replikativ\/replikativ>\n>     >\n>     > In the longer run we can allow multiple writers with different\n>     > conflict-resolution scheme similar to CRDTs and the bloom language\n>     > (dedalus).\n>     >\n>     >\n>     > Happy hacking :),\n>     > Christian\n>     >\n>     > (1) https:\/\/github.com\/whilo\/hitchhiker-tree\n>     <https:\/\/github.com\/whilo\/hitchhiker-tree>\n>     > (2)\n>     https:\/\/github.com\/whilo\/datascript\/tree\/hitchhiker_tree_support\n>     <https:\/\/github.com\/whilo\/datascript\/tree\/hitchhiker_tree_support>\n>     > (3) http:\/\/tonsky.me\/blog\/the-web-after-tomorrow\/\n>     <http:\/\/tonsky.me\/blog\/the-web-after-tomorrow\/>\n>     >\n> \n> \n>     --\n>     You received this message because you are subscribed to the Google\n>     Groups \"Clojure\" group.\n>     To post to this group, send email to cloj...@googlegroups.com\n>     <mailto:cloj...@googlegroups.com>\n>     Note that posts from new members are moderated - please be patient\n>     with your first post.\n>     To unsubscribe from this group, send email to\n>     clojure+unsubscr...@googlegroups.com\n>     <mailto:clojure%2bunsubscr...@googlegroups.com>\n>     For more options, visit this group at\n>     http:\/\/groups.google.com\/group\/clojure?hl=en\n>     <http:\/\/groups.google.com\/group\/clojure?hl=en>\n>     ---\n>     You received this message because you are subscribed to the Google\n>     Groups \"Clojure\" group.\n>     To unsubscribe from this group and stop receiving emails from it,\n>     send an email to clojure+unsubscr...@googlegroups.com\n>     <mailto:clojure%2bunsubscr...@googlegroups.com>.\n>     For more options, visit https:\/\/groups.google.com\/d\/optout\n>     <https:\/\/groups.google.com\/d\/optout>.\n> \n> \n> -- \n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google\n> Groups \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send\n> an email to clojurescript+unsubscr...@googlegroups.com\n> <mailto:clojurescript+unsubscr...@googlegroups.com>.\n> To post to this group, send email to clojurescript@googlegroups.com\n> <mailto:clojurescript@googlegroups.com>.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"Re: [ClojureScript] Re: durable datascript experiments Christian Weilbach Fri, 05 Jan 2018 13:22:19 -0800"},
{"body":"Hello Everyone!\n\nThe third edition of free Clojure Conference in Amsterdam is ready for your \nCFPs now :) \nYou can submit your proposal via https:\/\/www.papercall.io\/dcd18  \n<https:\/\/t.co\/HeXAEzuwUC>\n\nIf you have any questions, you can reply to this thread or tweet us at \n@clojuredays\n\nRegards,\n@vijaykiran\nOn behalf of DCD 18 Team \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] CFP for Dutch Clojure Day, 2018 Amsterdam is now Open! Vijay Kiran Tue, 02 Jan 2018 06:44:27 -0800"},
{"body":"Whoa; this looks awesome. Thanks for publishing this.\n\nOn Sat, Dec 30, 2017 at 2:24 PM, Christian Weilbach <\nwhitesp...@polyc0l0r.net> wrote: \n> Hi,\n>\n> performance is now a lot better, ~3-5x slower than datascript for\n> queries on the fractal index trees on my machine. This still needs\n> tuning ofc., but I have tried to make it fast with a lot of profiling\n> during idle times at 34C3. The fractal tree causes some overhead though.\n> Inserts are a lot more expensive, but I expect them to be written to\n> disk anyway. Therefore comparing inserts\/deletes with datascript is a\n> bit pointless, if you do everything in memory then it will always be\n> more performant.\n>\n> So it should be usable for small test projects now. GC is still TODO,\n> but I would be really happy for feedback! We are developing this as a\n> toolbox for distributed dataprocessing architectures.\n>\n> Best,\n> Christian\n>\n> On 26.12.2017 12:18, Christian Weilbach wrote:\n> > Hi,\n> >\n> > I have finally taken the time yesterday in a good end-of-year tradition\n> > of ambitious hacks to bring the hitchhiker-tree (1) and datascript (2)\n> > together. I have only touched the db.cljc namespace in datascript and\n> > replaced all calls to the in-memory balanced-tree set (btset) with calls\n> > to the hitchhiker-tree, the rest is vanilla DataScript. All tests pass\n> > and I can store and load databases sufficiently with the three trees for\n> > the indices (no datascript serialization used).\n> >\n> > I would like to have early feedback, so feel free to play and throw\n> > ideas around. You need to install my version of the hitchhiker-tree (1)\n> > first. Atm. it is a drop-in replacement for DataScript, but this is a\n> > prototype, don't use it for anything serious yet.\n> >\n> > Here is an example interaction with the store:\n> >\n> > https:\/\/github.com\/whilo\/datascript\/blob\/hitchhiker_\n> tree_support\/test\/datascript\/test\/store.cljc\n> >\n> > Caveats:\n> > 1. There is no working GC for the hitchhiker-trees yet.\n> > 2. Performance penalty against DataScript is in the 20-100x range, but I\n> > haven't done serious profiling yet.\n> > 3. There are probably bugs that are not covered by the tests, please\n> > open an issue.\n> >\n> > Goals:\n> > This is more of an intermediary goal, although it is very useful to have\n> > a durable datascript around in itself. The hitchhiker-tree is a generic\n> > persistent durable datastructure that can be efficiently synched and\n> > hence replication is the goal. Next step is a \"web-after-tomorrow\" (3)\n> > architecture similar to datsync, that we are discussing about here:\n> >\n> > https:\/\/gitter.im\/metasoarous\/datsync\n> > https:\/\/gitter.im\/replikativ\/replikativ\n> >\n> > In the longer run we can allow multiple writers with different\n> > conflict-resolution scheme similar to CRDTs and the bloom language\n> > (dedalus).\n> >\n> >\n> > Happy hacking :),\n> > Christian\n> >\n> > (1) https:\/\/github.com\/whilo\/hitchhiker-tree\n> > (2) https:\/\/github.com\/whilo\/datascript\/tree\/hitchhiker_tree_support\n> > (3) http:\/\/tonsky.me\/blog\/the-web-after-tomorrow\/\n> >\n>\n>\n> --\n> You received this message because you are subscribed to the Google\n> Groups \"Clojure\" group.\n> To post to this group, send email to cloj...@googlegroups.com\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> To unsubscribe from this group, send email to\n> clojure+unsubscr...@googlegroups.com\n> For more options, visit this group at\n> http:\/\/groups.google.com\/group\/clojure?hl=en\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"Clojure\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojure+unsubscr...@googlegroups.com.\n> For more options, visit https:\/\/groups.google.com\/d\/optout.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: durable datascript experiments Laurens Van Houtven Sat, 30 Dec 2017 15:14:26 -0800"},
{"body":"Hi,\n\nperformance is now a lot better, ~3-5x slower than datascript for\nqueries on the fractal index trees on my machine. This still needs\ntuning ofc., but I have tried to make it fast with a lot of profiling\nduring idle times at 34C3. The fractal tree causes some overhead though.\nInserts are a lot more expensive, but I expect them to be written to\ndisk anyway. Therefore comparing inserts\/deletes with datascript is a\nbit pointless, if you do everything in memory then it will always be\nmore performant. \nSo it should be usable for small test projects now. GC is still TODO,\nbut I would be really happy for feedback! We are developing this as a\ntoolbox for distributed dataprocessing architectures.\n\nBest,\nChristian\n\nOn 26.12.2017 12:18, Christian Weilbach wrote:\n> Hi,\n> \n> I have finally taken the time yesterday in a good end-of-year tradition\n> of ambitious hacks to bring the hitchhiker-tree (1) and datascript (2)\n> together. I have only touched the db.cljc namespace in datascript and\n> replaced all calls to the in-memory balanced-tree set (btset) with calls\n> to the hitchhiker-tree, the rest is vanilla DataScript. All tests pass\n> and I can store and load databases sufficiently with the three trees for\n> the indices (no datascript serialization used).\n> \n> I would like to have early feedback, so feel free to play and throw\n> ideas around. You need to install my version of the hitchhiker-tree (1)\n> first. Atm. it is a drop-in replacement for DataScript, but this is a\n> prototype, don't use it for anything serious yet.\n> \n> Here is an example interaction with the store:\n> \n> https:\/\/github.com\/whilo\/datascript\/blob\/hitchhiker_tree_support\/test\/datascript\/test\/store.cljc\n> \n> Caveats:\n> 1. There is no working GC for the hitchhiker-trees yet.\n> 2. Performance penalty against DataScript is in the 20-100x range, but I\n> haven't done serious profiling yet.\n> 3. There are probably bugs that are not covered by the tests, please\n> open an issue.\n> \n> Goals:\n> This is more of an intermediary goal, although it is very useful to have\n> a durable datascript around in itself. The hitchhiker-tree is a generic\n> persistent durable datastructure that can be efficiently synched and\n> hence replication is the goal. Next step is a \"web-after-tomorrow\" (3)\n> architecture similar to datsync, that we are discussing about here:\n> \n> https:\/\/gitter.im\/metasoarous\/datsync\n> https:\/\/gitter.im\/replikativ\/replikativ\n> \n> In the longer run we can allow multiple writers with different\n> conflict-resolution scheme similar to CRDTs and the bloom language\n> (dedalus).\n> \n> \n> Happy hacking :),\n> Christian\n> \n> (1) https:\/\/github.com\/whilo\/hitchhiker-tree\n> (2) https:\/\/github.com\/whilo\/datascript\/tree\/hitchhiker_tree_support\n> (3) http:\/\/tonsky.me\/blog\/the-web-after-tomorrow\/\n> \n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"[ClojureScript] Re: durable datascript experiments Christian Weilbach Sat, 30 Dec 2017 12:25:21 -0800"},
{"body":"I have a single source tree under src\/main\/clj that contains files ending \nin .clj, .cljs, and .cljc (clojure, clojurescript, and mixed). This was \nworking fine, but something changed and now figwheel is popping up pink \nerror panels with \"Couldn't load Clojure file...\", referring to .clj files \nthat I'd like it to ignore. Is there a way to tell one of these tools to \nskip the .clj files? \nRob\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] make cljsbuild\/figwheel skip .clj files Rob Nikander Sat, 30 Dec 2017 09:36:55 -0800"},
{"body":"Hi,\n\nI have finally taken the time yesterday in a good end-of-year tradition\nof ambitious hacks to bring the hitchhiker-tree (1) and datascript (2)\ntogether. I have only touched the db.cljc namespace in datascript and\nreplaced all calls to the in-memory balanced-tree set (btset) with calls\nto the hitchhiker-tree, the rest is vanilla DataScript. All tests pass\nand I can store and load databases sufficiently with the three trees for\nthe indices (no datascript serialization used). \nI would like to have early feedback, so feel free to play and throw\nideas around. You need to install my version of the hitchhiker-tree (1)\nfirst. Atm. it is a drop-in replacement for DataScript, but this is a\nprototype, don't use it for anything serious yet.\n\nHere is an example interaction with the store:\n\nhttps:\/\/github.com\/whilo\/datascript\/blob\/hitchhiker_tree_support\/test\/datascript\/test\/store.cljc\n\nCaveats:\n1. There is no working GC for the hitchhiker-trees yet.\n2. Performance penalty against DataScript is in the 20-100x range, but I\nhaven't done serious profiling yet.\n3. There are probably bugs that are not covered by the tests, please\nopen an issue.\n\nGoals:\nThis is more of an intermediary goal, although it is very useful to have\na durable datascript around in itself. The hitchhiker-tree is a generic\npersistent durable datastructure that can be efficiently synched and\nhence replication is the goal. Next step is a \"web-after-tomorrow\" (3)\narchitecture similar to datsync, that we are discussing about here:\n\nhttps:\/\/gitter.im\/metasoarous\/datsync\nhttps:\/\/gitter.im\/replikativ\/replikativ\n\nIn the longer run we can allow multiple writers with different\nconflict-resolution scheme similar to CRDTs and the bloom language\n(dedalus).\n\n\nHappy hacking :),\nChristian\n\n(1) https:\/\/github.com\/whilo\/hitchhiker-tree\n(2) https:\/\/github.com\/whilo\/datascript\/tree\/hitchhiker_tree_support\n(3) http:\/\/tonsky.me\/blog\/the-web-after-tomorrow\/\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"[ClojureScript] durable datascript experiments Christian Weilbach Tue, 26 Dec 2017 03:19:34 -0800"},
{"body":"Hi. This was reported to piggieback repo, since that's where I encountered \nit, but perhaps worth looking at by compiler devs. \nhttps:\/\/github.com\/cemerick\/piggieback\/issues\/78\n\nThanks\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Exception while analyzing Goog Closure (java 9, clj 1.9) Vlad Kozin Thu, 14 Dec 2017 08:16:25 -0800"},
{"body":"Hi,\n\nI think I could make the first steps of the tutorial successfully. With \nlein figwheel\n\nthe repl is started. But when write\n\n(+ 1 2 3)\n\nat the prompt instead of 6 I get\n\n#object[TypeError TypeError: undefined is not an object (evaluating \n'figwheel.client.utils.persistent_config_get.call')]\nfigwheel$client$repl_pprint@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client.js:179:51\nfigwheel$client$repl_result_pr_str@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client.js:201:53\n\neval code\neval@[native code]\nfigwheel$client$utils$eval_helper@file:\/\/\/Users\/johannes\/tmp\/hello_seymore\/out\/figwheel\/client\/utils.js:160:12\nnil\n\nAre there any hints what is going?\n\nJohannes\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] problem with figwheel quick start tutorial johannes.brauer via ClojureScript Sun, 10 Dec 2017 14:05:43 -0800"},
{"body":"Hi Rob\n\nI've written up some upgrade notes here on what you need to do to use Java\n9:\nhttps:\/\/www.deps.co\/blog\/how-to-upgrade-your-clojure-projects-to-use-java-9\/.\nThat might be useful to you, or other readers looking to upgrade to Java 9. \n--\nDaniel.\n\nOn Wed, Dec 6, 2017 at 3:23 PM Alex Miller <a...@puredanger.com> wrote:\n\n> This is a ClojureScript issue with Java 9 - same thing was mentioned\n> yesterday here:\n>\n> https:\/\/groups.google.com\/d\/msg\/clojurescript\/vcHhsLUCYlw\/gW1ioB5PBAAJ\n>\n>\n>\n> On Tuesday, December 5, 2017 at 6:22:00 PM UTC-6, Rob Nikander wrote:\n>>\n>>\n>>\n>> On Tuesday, December 5, 2017 at 7:03:32 PM UTC-5, Andy Fingerhut wrote:\n>>>\n>>> Try lein 2.8.1, if you are using any other version of Leiningen.  There\n>>> are known issues with Leiningen versions less than that, combined with Java\n>>> 9.\n>>>\n>>\n>> Looks like I'm running it already.\n>>\n>>   $ lein version\n>>   Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] lein, clojurescript, and Java 9? Daniel Compton Wed, 06 Dec 2017 13:39:36 -0800"},
{"body":"This is a ClojureScript issue with Java 9 - same thing was mentioned \nyesterday here: \nhttps:\/\/groups.google.com\/d\/msg\/clojurescript\/vcHhsLUCYlw\/gW1ioB5PBAAJ\n\n\n\nOn Tuesday, December 5, 2017 at 6:22:00 PM UTC-6, Rob Nikander wrote:\n>\n>\n>\n> On Tuesday, December 5, 2017 at 7:03:32 PM UTC-5, Andy Fingerhut wrote:\n>>\n>> Try lein 2.8.1, if you are using any other version of Leiningen.  There \n>> are known issues with Leiningen versions less than that, combined with Java \n>> 9.\n>>\n>\n> Looks like I'm running it already.\n>\n>   $ lein version\n>   Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] lein, clojurescript, and Java 9? Alex Miller Tue, 05 Dec 2017 18:23:27 -0800"},
{"body":"On Tuesday, December 5, 2017 at 7:03:32 PM UTC-5, Andy Fingerhut wrote:\n>\n> Try lein 2.8.1, if you are using any other version of Leiningen.  There \n> are known issues with Leiningen versions less than that, combined with Java \n> 9.\n> \nLooks like I'm running it already.\n\n  $ lein version\n  Leiningen 2.8.1 on Java 9.0.1 Java HotSpot(TM) 64-Bit Server VM \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] lein, clojurescript, and Java 9? Rob Nikander Tue, 05 Dec 2017 16:22:54 -0800"},
{"body":"Try lein 2.8.1, if you are using any other version of Leiningen.  There are\nknown issues with Leiningen versions less than that, combined with Java 9. \nAndy\n\nOn Tue, Dec 5, 2017 at 7:20 AM, Rob Nikander <rob.nikan...@gmail.com> wrote:\n\n> Hi,\n>\n> Is this supposed to work? It works with Java 8, but when I use Java 9 I\n> get the error below.\n>\n> Rob\n>\n> $ java -version\n> java version \"9.0.1\"\n> ...\n> $ lein cljsbuild auto\n> Watching for changes before compiling ClojureScript...\n> Compiling 17 source files to \/Users\/rob\/[...]\/target\/default\/classes\n> Exception in thread \"main\" java.lang.ClassNotFoundException:\n> javax.xml.bind.DatatypeConverter, compiling:(cljs\/util.cljc:1:1)\n> at clojure.lang.Compiler.load(Compiler.java:7526)\n> at clojure.lang.RT.loadResourceScript(RT.java:379)\n> at clojure.lang.RT.loadResourceScript(RT.java:370)\n> at clojure.lang.RT.load(RT.java:460)\n> at clojure.lang.RT.load(RT.java:426)\n> at clojure.core$load$fn__6548.invoke(core.clj:6046)\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] lein, clojurescript, and Java 9? Andy Fingerhut Tue, 05 Dec 2017 16:03:47 -0800"},
{"body":"Hi,\n\nIs this supposed to work? It works with Java 8, but when I use Java 9 I get \nthe error below. \nRob\n\n$ java -version\njava version \"9.0.1\"\n...\n$ lein cljsbuild auto\nWatching for changes before compiling ClojureScript...\nCompiling 17 source files to \/Users\/rob\/[...]\/target\/default\/classes\nException in thread \"main\" java.lang.ClassNotFoundException: \njavax.xml.bind.DatatypeConverter, compiling:(cljs\/util.cljc:1:1)\nat clojure.lang.Compiler.load(Compiler.java:7526)\nat clojure.lang.RT.loadResourceScript(RT.java:379)\nat clojure.lang.RT.loadResourceScript(RT.java:370)\nat clojure.lang.RT.load(RT.java:460)\nat clojure.lang.RT.load(RT.java:426)\nat clojure.core$load$fn__6548.invoke(core.clj:6046)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] lein, clojurescript, and Java 9? Rob Nikander Tue, 05 Dec 2017 07:20:49 -0800"},
{"body":"FWIW, I think the criticism around TDD in the Clojure(script) community is \nnot so much that testing first is bad, but that writing tests without first \nthinking through and understanding your problem is bad. I think some have \nextended this to a blanket \"TDD bad!\" battlecry, but this I think misses \nmuch of the nuance of the critique that Rich Hickey and others have made. \nMore to the point of your post, cool work!\n\nChris\n\n\nOn Monday, December 4, 2017 at 12:35:36 AM UTC-8, Nathan Fisher wrote:\n>\n> Hi All,\n>\n>\n> I know TDD carries a bit of a stigma in the Clojure(script) community but \n> I find it valuable. I thought I'd share my test harness for local \n> development so others could use it\/comment on it.\n>\n> The main benefit I see to this test harness is;\n>\n>    1. it's quick as figwheel is.\n>    2. it has desktop notifications.\n>    3. it uses vanilla cljs.test\/deftest and cljs.test\/run-all-tests \n>    rather than another macro.\n>\n>\n> I plan to write up a blog post on it but you can try it by doing the \n> following;\n>\n>    1. clone https:\/\/github.com\/nfisher\/lein-nashtest.\n>    2. lein figwheel.\n>    3. browse to http:\/\/0.0.0.0:3449\/test.html.\n>    4. accept notifications.\n>    5. cause the test to fail in cljs\/jbx\/pants_test.cljs.\n>    6. fix the test and see a passing notification.\n>\n> The failure notification looks as follows;\n>\n>\n> <https:\/\/lh3.googleusercontent.com\/-Vq1BC6y50cM\/WiUExdX1SZI\/AAAAAAAAGWg\/kTMzig4RYHU2PWStfXZkKAhJCSAeqLv5wCEwYBhgL\/s1600\/Screen%2BShot%2B2017-12-04%2Bat%2B05.12.45.png>\n>\n> And the browser looks as follows with a failure;\n>\n>\n>\n> <https:\/\/lh3.googleusercontent.com\/-AFiBKq-n--U\/WiUFMRy7NII\/AAAAAAAAGWk\/SHOqxGH2ykoAxYJsHjlbOUbbrtWjAKUAwCLcBGAs\/s1600\/Screen%2BShot%2B2017-12-04%2Bat%2B05.13.07.png>\n>\n> Looking under the hood you'll see it's a bit hack-ish essentially there's \n> two bits to it;\n>\n>\n>    1. figwheels :js-onload.\n>    2. overriding console.log and taking actions on particular values. \n>    Using the cljs.test\/report multi-method would probably be a better \n> approach \n>    long-term.\n>    \n> If you wanted to use the test harness in your own project you can simply \n> add a cljsbuild target similar to figtest in my projects build and copy \n> test.html into your $project\/resources\/public folder.\n>\n> Cheers!\n> Nathan\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: TDD + figwheel + desktop notifications Christopher Small Mon, 04 Dec 2017 11:34:43 -0800"},
{"body":"That is a neat trick!  \n\n(But if I did TDD on a web server, the very first test would be \"it's not \nlistening to 0.0.0.0\", which, evidently, browsing to 0.0.0.0 is not a test \nof.) \n;-)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: TDD + figwheel + desktop notifications Phill Wolf Mon, 04 Dec 2017 01:59:56 -0800"},
{"body":"This is a Java9 error. It was fixed recently but has not been released yet. \nYou can either add \"--add-modules java.xml.bind\" to the java cmd arguments \nor downgrade to Java 8.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ClosureScript Quick Start error on Windows Thomas Heller Mon, 04 Dec 2017 01:19:24 -0800"},
{"body":"Hi All, \n\nI know TDD carries a bit of a stigma in the Clojure(script) community but I \nfind it valuable. I thought I'd share my test harness for local development \nso others could use it\/comment on it.\n\nThe main benefit I see to this test harness is;\n\n   1. it's quick as figwheel is.\n   2. it has desktop notifications.\n   3. it uses vanilla cljs.test\/deftest and cljs.test\/run-all-tests rather \n   than another macro.\n\n\nI plan to write up a blog post on it but you can try it by doing the \nfollowing;\n\n   1. clone https:\/\/github.com\/nfisher\/lein-nashtest.\n   2. lein figwheel.\n   3. browse to http:\/\/0.0.0.0:3449\/test.html.\n   4. accept notifications.\n   5. cause the test to fail in cljs\/jbx\/pants_test.cljs.\n   6. fix the test and see a passing notification.\n\nThe failure notification looks as follows;\n\n<https:\/\/lh3.googleusercontent.com\/-Vq1BC6y50cM\/WiUExdX1SZI\/AAAAAAAAGWg\/kTMzig4RYHU2PWStfXZkKAhJCSAeqLv5wCEwYBhgL\/s1600\/Screen%2BShot%2B2017-12-04%2Bat%2B05.12.45.png>\n\nAnd the browser looks as follows with a failure;\n\n\n<https:\/\/lh3.googleusercontent.com\/-AFiBKq-n--U\/WiUFMRy7NII\/AAAAAAAAGWk\/SHOqxGH2ykoAxYJsHjlbOUbbrtWjAKUAwCLcBGAs\/s1600\/Screen%2BShot%2B2017-12-04%2Bat%2B05.13.07.png>\n\nLooking under the hood you'll see it's a bit hack-ish essentially there's \ntwo bits to it;\n\n\n   1. figwheels :js-onload.\n   2. overriding console.log and taking actions on particular values. Using \n   the cljs.test\/report multi-method would probably be a better approach \n   long-term.\n   \nIf you wanted to use the test harness in your own project you can simply \nadd a cljsbuild target similar to figtest in my projects build and copy \ntest.html into your $project\/resources\/public folder.\n\nCheers!\nNathan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] TDD + figwheel + desktop notifications Nathan Fisher Mon, 04 Dec 2017 00:36:07 -0800"},
{"body":"Which JDK version are you using? make sure it's great than 8.\n\nOn Mon, Dec 4, 2017 at 7:16 AM, Leroy Mason <leroyma...@gmail.com> wrote: \n> I'm working on Windows 10 according to the instructions on the\n> ClojureScript Quick Start page https:\/\/clojurescript.\n> org\/guides\/quick-start.\n>\n> When I try to compile the hello world program using this command I get the\n> error below.\n>\n> Does anyone know how to resolve this on Windows?\n>\n> compile command - java -cp \"cljs.jar;src\" clojure.main build.clj\n>\n> error output -\n>\n> C:\\Users\\leroy\\OneDrive\\Programming Languages\\Clojure\\hello-world>java\n> -cp \"cljs.jar;src\" clojure.main build.clj\n> Exception in thread \"main\" java.lang.ExceptionInInitializerError,\n> compiling:(C:\\Users\\leroy\\OneDrive\\Programming\n> Languages\\Clojure\\hello-world\\build.clj:1:1)\n>         at clojure.lang.Compiler.load(Compiler.java:7391)\n>         at clojure.lang.Compiler.loadFile(Compiler.java:7317)\n>         at clojure.main$load_script.invokeStatic(main.clj:275)\n>         at clojure.main$script_opt.invokeStatic(main.clj:335)\n>         at clojure.main$script_opt.invoke(main.clj:330)\n>         at clojure.main$main.invokeStatic(main.clj:421)\n>         at clojure.main$main.doInvoke(main.clj:384)\n>         at clojure.lang.RestFn.invoke(RestFn.java:408)\n>         at clojure.lang.Var.invoke(Var.java:379)\n>         at clojure.lang.AFn.applyToHelper(AFn.java:154)\n>         at clojure.lang.Var.applyTo(Var.java:700)\n>         at clojure.main.main(main.java:37)\n> Caused by: java.lang.ExceptionInInitializerError\n>         at java.base\/java.lang.Class.forName0(Native Method)\n>         at java.base\/java.lang.Class.forName(Unknown Source)\n>         at clojure.lang.RT.classForName(RT.java:2168)\n>         at clojure.lang.RT.classForName(RT.java:2177)\n>         at clojure.lang.RT.loadClassForName(RT.java:2196)\n>         at clojure.lang.RT.load(RT.java:443)\n>         at clojure.lang.RT.load(RT.java:419)\n>         at clojure.core$load$fn__5677.invoke(core.clj:5893)\n>         at clojure.core$load.invokeStatic(core.clj:5892)\n>         at clojure.core$load.doInvoke(core.clj:5876)\n>         at clojure.lang.RestFn.invoke(RestFn.java:408)\n>         at clojure.core$load_one.invokeStatic(core.clj:5697)\n>         at clojure.core$load_one.invoke(core.clj:5692)\n>         at clojure.core$load_lib$fn__5626.invoke(core.clj:5737)\n>         at clojure.core$load_lib.invokeStatic(core.clj:5736)\n>         at clojure.core$load_lib.doInvoke(core.clj:5717)\n>         at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>         at clojure.core$apply.invokeStatic(core.clj:648)\n>         at clojure.core$load_libs.invokeStatic(core.clj:5774)\n>         at clojure.core$load_libs.doInvoke(core.clj:5758)\n>         at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>         at clojure.core$apply.invokeStatic(core.clj:648)\n>         at clojure.core$require.invokeStatic(core.clj:5796)\n>         at cljs.build.api$loading__5569__auto____4052.invoke(api.clj:8)\n>         at cljs.build.api__init.load(Unknown Source)\n>         at cljs.build.api__init.<clinit>(Unknown Source)\n>         at java.base\/java.lang.Class.forName0(Native Method)\n>         at java.base\/java.lang.Class.forName(Unknown Source)\n>         at clojure.lang.RT.classForName(RT.java:2168)\n>         at clojure.lang.RT.classForName(RT.java:2177)\n>         at clojure.lang.RT.loadClassForName(RT.java:2196)\n>         at clojure.lang.RT.load(RT.java:443)\n>         at clojure.lang.RT.load(RT.java:419)\n>         at clojure.core$load$fn__5677.invoke(core.clj:5893)\n>         at clojure.core$load.invokeStatic(core.clj:5892)\n>         at clojure.core$load.doInvoke(core.clj:5876)\n>         at clojure.lang.RestFn.invoke(RestFn.java:408)\n>         at clojure.core$load_one.invokeStatic(core.clj:5697)\n>         at clojure.core$load_one.invoke(core.clj:5692)\n>         at clojure.core$load_lib$fn__5626.invoke(core.clj:5737)\n>         at clojure.core$load_lib.invokeStatic(core.clj:5736)\n>         at clojure.core$load_lib.doInvoke(core.clj:5717)\n>         at clojure.lang.RestFn.applyTo(RestFn.java:142)\n>         at clojure.core$apply.invokeStatic(core.clj:648)\n>         at clojure.core$load_libs.invokeStatic(core.clj:5774)\n>         at clojure.core$load_libs.doInvoke(core.clj:5758)\n>         at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>         at clojure.core$apply.invokeStatic(core.clj:648)\n>         at clojure.core$require.invokeStatic(core.clj:5796)\n>         at clojure.core$require.doInvoke(core.clj:5796)\n>         at clojure.lang.RestFn.invoke(RestFn.java:408)\n>         at user$eval1.invokeStatic(build.clj:1)\n>         at user$eval1.invoke(build.clj:1)\n>         at clojure.lang.Compiler.eval(Compiler.java:6927)\n>         at clojure.lang.Compiler.load(Compiler.java:7379)\n>         ... 11 more\n> Caused by: java.lang.ClassNotFoundException: javax.xml.bind.\n> DatatypeConverter\n>         at java.base\/jdk.internal.loader.BuiltinClassLoader.loadClass(Unknown\n> Source)\n>         at \n> java.base\/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Unknown\n> Source)\n>         at java.base\/java.lang.ClassLoader.loadClass(Unknown Source)\n>         at java.base\/java.lang.Class.forName0(Native Method)\n>         at java.base\/java.lang.Class.forName(Unknown Source)\n>         at clojure.lang.RT.classForName(RT.java:2168)\n>         at clojure.lang.RT.classForNameNonLoading(RT.java:2181)\n>         at cljs.util$loading__5569__auto____268.invoke(util.cljc:9)\n>         at cljs.util__init.load(Unknown Source)\n>         at cljs.util__init.<clinit>(Unknown Source)\n>         ... 66 more\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] ClosureScript Quick Start error on Windows Jiacai Liu Sun, 03 Dec 2017 19:23:57 -0800"},
{"body":"I'm working on Windows 10 according to the instructions on the \nClojureScript Quick Start page https:\/\/clojurescript.org\/guides\/quick-start. \nWhen I try to compile the hello world program using this command I get the \nerror below.\n\nDoes anyone know how to resolve this on Windows?\n\ncompile command - java -cp \"cljs.jar;src\" clojure.main build.clj\n\nerror output - \n\nC:\\Users\\leroy\\OneDrive\\Programming Languages\\Clojure\\hello-world>java -cp \n\"cljs.jar;src\" clojure.main build.clj\nException in thread \"main\" java.lang.ExceptionInInitializerError, \ncompiling:(C:\\Users\\leroy\\OneDrive\\Programming \nLanguages\\Clojure\\hello-world\\build.clj:1:1)\n        at clojure.lang.Compiler.load(Compiler.java:7391)\n        at clojure.lang.Compiler.loadFile(Compiler.java:7317)\n        at clojure.main$load_script.invokeStatic(main.clj:275)\n        at clojure.main$script_opt.invokeStatic(main.clj:335)\n        at clojure.main$script_opt.invoke(main.clj:330)\n        at clojure.main$main.invokeStatic(main.clj:421)\n        at clojure.main$main.doInvoke(main.clj:384)\n        at clojure.lang.RestFn.invoke(RestFn.java:408)\n        at clojure.lang.Var.invoke(Var.java:379)\n        at clojure.lang.AFn.applyToHelper(AFn.java:154)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.main.main(main.java:37)\nCaused by: java.lang.ExceptionInInitializerError\n        at java.base\/java.lang.Class.forName0(Native Method)\n        at java.base\/java.lang.Class.forName(Unknown Source)\n        at clojure.lang.RT.classForName(RT.java:2168)\n        at clojure.lang.RT.classForName(RT.java:2177)\n        at clojure.lang.RT.loadClassForName(RT.java:2196)\n        at clojure.lang.RT.load(RT.java:443)\n        at clojure.lang.RT.load(RT.java:419)\n        at clojure.core$load$fn__5677.invoke(core.clj:5893)\n        at clojure.core$load.invokeStatic(core.clj:5892)\n        at clojure.core$load.doInvoke(core.clj:5876)\n        at clojure.lang.RestFn.invoke(RestFn.java:408)\n        at clojure.core$load_one.invokeStatic(core.clj:5697)\n        at clojure.core$load_one.invoke(core.clj:5692)\n        at clojure.core$load_lib$fn__5626.invoke(core.clj:5737)\n        at clojure.core$load_lib.invokeStatic(core.clj:5736)\n        at clojure.core$load_lib.doInvoke(core.clj:5717)\n        at clojure.lang.RestFn.applyTo(RestFn.java:142)\n        at clojure.core$apply.invokeStatic(core.clj:648)\n        at clojure.core$load_libs.invokeStatic(core.clj:5774)\n        at clojure.core$load_libs.doInvoke(core.clj:5758)\n        at clojure.lang.RestFn.applyTo(RestFn.java:137)\n        at clojure.core$apply.invokeStatic(core.clj:648)\n        at clojure.core$require.invokeStatic(core.clj:5796)\n        at cljs.build.api$loading__5569__auto____4052.invoke(api.clj:8)\n        at cljs.build.api__init.load(Unknown Source)\n        at cljs.build.api__init.<clinit>(Unknown Source)\n        at java.base\/java.lang.Class.forName0(Native Method)\n        at java.base\/java.lang.Class.forName(Unknown Source)\n        at clojure.lang.RT.classForName(RT.java:2168)\n        at clojure.lang.RT.classForName(RT.java:2177)\n        at clojure.lang.RT.loadClassForName(RT.java:2196)\n        at clojure.lang.RT.load(RT.java:443)\n        at clojure.lang.RT.load(RT.java:419)\n        at clojure.core$load$fn__5677.invoke(core.clj:5893)\n        at clojure.core$load.invokeStatic(core.clj:5892)\n        at clojure.core$load.doInvoke(core.clj:5876)\n        at clojure.lang.RestFn.invoke(RestFn.java:408)\n        at clojure.core$load_one.invokeStatic(core.clj:5697)\n        at clojure.core$load_one.invoke(core.clj:5692)\n        at clojure.core$load_lib$fn__5626.invoke(core.clj:5737)\n        at clojure.core$load_lib.invokeStatic(core.clj:5736)\n        at clojure.core$load_lib.doInvoke(core.clj:5717)\n        at clojure.lang.RestFn.applyTo(RestFn.java:142)\n        at clojure.core$apply.invokeStatic(core.clj:648)\n        at clojure.core$load_libs.invokeStatic(core.clj:5774)\n        at clojure.core$load_libs.doInvoke(core.clj:5758)\n        at clojure.lang.RestFn.applyTo(RestFn.java:137)\n        at clojure.core$apply.invokeStatic(core.clj:648)\n        at clojure.core$require.invokeStatic(core.clj:5796)\n        at clojure.core$require.doInvoke(core.clj:5796)\n        at clojure.lang.RestFn.invoke(RestFn.java:408)\n        at user$eval1.invokeStatic(build.clj:1)\n        at user$eval1.invoke(build.clj:1)\n        at clojure.lang.Compiler.eval(Compiler.java:6927)\n        at clojure.lang.Compiler.load(Compiler.java:7379)\n        ... 11 more\nCaused by: java.lang.ClassNotFoundException: \njavax.xml.bind.DatatypeConverter\n        at \njava.base\/jdk.internal.loader.BuiltinClassLoader.loadClass(Unknown Source)\n        at \njava.base\/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Unknown \nSource)\n        at java.base\/java.lang.ClassLoader.loadClass(Unknown Source)\n        at java.base\/java.lang.Class.forName0(Native Method)\n        at java.base\/java.lang.Class.forName(Unknown Source)\n        at clojure.lang.RT.classForName(RT.java:2168)\n        at clojure.lang.RT.classForNameNonLoading(RT.java:2181)\n        at cljs.util$loading__5569__auto____268.invoke(util.cljc:9)\n        at cljs.util__init.load(Unknown Source)\n        at cljs.util__init.<clinit>(Unknown Source)\n        ... 66 more\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ClosureScript Quick Start error on Windows Leroy Mason Sun, 03 Dec 2017 18:53:44 -0800"},
{"body":"IMHO :foreign-libs do too many things these days and its not clear what to \nuse when or how. This feature is alpha so I expect that everything will be \nsorted out properly in the future. I fully expect the \"flaws\" to be \naddressed. \n:foreign-libs used to refer to \"foreign JS\" that was not processed in any \nway and just got prepended which was a great solution at the time and had a \ngigantic impact overall. It has some scaling issues but overall it works \nwell.\n\nThe biggest flaw I saw was related to mixing :foreign-libs and :npm-deps. \nOne library may be using cljsjs.react (aka foreign lib) while a newer one \nmaybe using \"react\" via :npm-deps. This would lead to a situation where you \nhad 2 React instances in your page. Since everything also happens at the \nclasspath level there was no proper way to \"configure\" it besides \nmoving\/deleting your node_modules folder which I think is pretty odd. \nAgain: this will probably be fixed.\n\nI didn't like some of the decisions that were made and decided to build \nsomething on my own to address the issues I saw in my own code\/project. \nYMMV.\n\n> The CLJS file is using JS and the JS file is using CLJS. 100% full \ninterop.\n\nThis is my goal and I'm close to achieving it.\n\nCheers,\n\/thomas\n\nPS: Someone started some boot related work started recently:\nhttps:\/\/github.com\/jgdavey\/boot-shadow-cljs\n\nPPS: I wrote some posts about my motivations and the implementation details \nin case you are interested.\nhttps:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/09\/15\/js-dependencies-the-problem.html\nhttps:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/09\/15\/js-dependencies-going-forward.html\nhttps:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/11\/10\/js-dependencies-in-practice.html\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Simple es6 JS file fails to compile as foreign lib Thomas Heller Mon, 20 Nov 2017 11:43:54 -0800"},
{"body":"Thomas, thanks for the detailed example!\n\nI was reading over the weekend about shadow-cljs and it is definitely an \nintriguing approach. However, my motivation for these es6 experiments is to \neventually bring them into a larger project I am working on, which already \nhas an existing boot build framework. Realistically, I'm probably going to \nhave to make it work within the boot ecosystem. \nI'm curious why you think :foreign-libs is deeply flawed. It is my \nunderstanding that :npm-deps are also converted to :foreign-libs under the \nhood, and it seems like a lot of work has been put into these features over \nthe last year or two. If the approach was deeply flawed, this would seem \nlike a big deal.\n\n\nOn Monday, November 20, 2017 at 9:36:07 AM UTC-5, Thomas Heller wrote:\n>\n> The Closure Compiler is fully capable of this. It appears that something \n> is broken, don't know what.\n>\n> In shadow-cljs [1] I handle JS dependencies quite differently so not only \n> does this work there it is also much simpler (IMHO).\n>\n> I made a demo showcasing all of the JS interop here:\n> https:\/\/github.com\/thheller\/shadow-cljs-examples\/tree\/master\/local-js\n>\n> You can clone it and run:\n> npm install\n> npx shadow-cljs watch app\n> open http:\/\/localhost:9300\n>\n> These two files are interesting:\n>\n> https:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/master\/local-js\/src\/demo\/app.cljs\n>\n> https:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/master\/local-js\/src\/demo\/foo.js\n>\n> The CLJS files is using JS and the JS file is using CLJS. 100% full \n> interop.\n>\n> Note that the use of :default in the ns :require is not yet official [2].\n> The support for relative require (ie. \".\/foo\") was rejected and is \"never, \n> ever going to happen.\" [3].\n>\n> I consider this an experiment to explore alternatives to :foreign-libs as \n> I think they are deeply flawed and should be abandoned.\n>\n> It works well in shadow-cljs but please don't use it in any library until \n> there is something \"official\" to make all of this work.\n>\n> Cheers,\n> \/thomas\n>\n>\n> [1] https:\/\/github.com\/thheller\/shadow-cljs\n> [2] https:\/\/dev.clojure.org\/jira\/browse\/CLJS-2376\n> [3] \n> https:\/\/dev.clojure.org\/jira\/browse\/CLJS-2061?focusedCommentId=46191&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-46191\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Simple es6 JS file fails to compile as foreign lib Zalan Kemenczy Mon, 20 Nov 2017 08:38:25 -0800"},
{"body":"The Closure Compiler is fully capable of this. It appears that something is \nbroken, don't know what. \nIn shadow-cljs [1] I handle JS dependencies quite differently so not only \ndoes this work there it is also much simpler (IMHO).\n\nI made a demo showcasing all of the JS interop here:\nhttps:\/\/github.com\/thheller\/shadow-cljs-examples\/tree\/master\/local-js\n\nYou can clone it and run:\nnpm install\nnpx shadow-cljs watch app\nopen http:\/\/localhost:9300\n\nThese two files are interesting:\nhttps:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/master\/local-js\/src\/demo\/app.cljs\nhttps:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/master\/local-js\/src\/demo\/foo.js\n\nThe CLJS files is using JS and the JS file is using CLJS. 100% full interop.\n\nNote that the use of :default in the ns :require is not yet official [2].\nThe support for relative require (ie. \".\/foo\") was rejected and is \"never, \never going to happen.\" [3].\n\nI consider this an experiment to explore alternatives to :foreign-libs as I \nthink they are deeply flawed and should be abandoned.\n\nIt works well in shadow-cljs but please don't use it in any library until \nthere is something \"official\" to make all of this work.\n\nCheers,\n\/thomas\n\n\n[1] https:\/\/github.com\/thheller\/shadow-cljs\n[2] https:\/\/dev.clojure.org\/jira\/browse\/CLJS-2376\n[3] \nhttps:\/\/dev.clojure.org\/jira\/browse\/CLJS-2061?focusedCommentId=46191&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-46191\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Simple es6 JS file fails to compile as foreign lib Thomas Heller Mon, 20 Nov 2017 06:36:19 -0800"},
{"body":"Thanks for the response.\n\nAre you sure? The page you link to says that \"ECMAScript 6 is now \nofficially supported as an input language for the Closure Compiler\", and \nthat the google closure parser \"understands all ES6 features\", specifically \n\"transpilation of the following ES6 features... arrow functions... default \nparameters... template strings.\" Which are the three es6 features included \nin my simple JS file. \nWhat's more, if you remove the :language-in :es6 from the compiler options, \nthe compiler specifically prints an error:\n\nERROR - this language feature is only supported for ECMASCRIPT6 mode or \nbetter: arrow function. Use --language_in=ECMASCRIPT6 or ECMASCRIPT6_STRICT \nor higher to enable ES6 features.\n\nAll of this seems to suggest that the google closure compiler is indeed \naware of, and able to parse es6, and that something else after \ntranspilation is causing the optimization phases to be skipped.\n\nZ.\n\n\n\nOn Thursday, November 16, 2017 at 11:30:55 AM UTC-5, francis....@gmail.com \nwrote:\n>\n> From the Closure repository \n> https:\/\/github.com\/google\/closure-compiler\/wiki\/ECMAScript6 I get that \n> \"Optimizations currently occur on \"transpiled\" code.\" \n> So you probably need to transpile your javascript first (using babel \n> https:\/\/babeljs.io\/ for instance)\n>\n> Le jeudi 16 novembre 2017 02:33:31 UTC+1, Zalan Kemenczy a \u00e9crit :\n>>\n>> I'm trying to compile a super simple es6 JS file as a foreign lib, as \n>> described in the clojurescript docs under Bundling \"Google Closure \n>> Compatible Code\": \n>> https:\/\/clojurescript.org\/reference\/dependencies#bundling-javascript-code\n>>\n>>\n>> The compilation succeeds with no optimizations. However, for the life of \n>> me I can't get it to compile with advanced optimizations. I just get a \n>> bunch of warnings, that say all the compiler phases were skipped. A lot of \n>> warnings like:\n>>\n>>\n>> WARNING: Skipping pass checkVariableReferences\n>>\n>> factory features:  [block function, getters, string continuation, \n>> trailing comma, setters, ES3 keywor\n>>\n>> ds as identifiers, reserved words as properties, RegExp flag 'y', array \n>> pattern rest, binary literal,\n>>\n>>  let declaration, computed property, super, spread expression, RegExp \n>> flag 'u', default parameter, cl\n>>\n>> ass, arrow function, generator, template literal, for-of loop, member \n>> declaration, destructuring, oct\n>>\n>> al literal, const declaration, extended object literal, rest parameter, \n>> new.target, exponent operator\n>>\n>>  (**), trailing comma in param list, async function]    \n>>\n>>\n>> The JS file looks like:\n>>\n>>\n>> goog.provide('js.lib');\n>>\n>>\n>> js.lib.debugMessage = (x = \"any old string\") => {\n>>\n>> console.log(`Printing ${x} from cljs!`);\n>>\n>> };\n>>\n>>\n>> The cljs file looks like:\n>>\n>>\n>> (ns integrated.core\n>>\n>>   (:require [js.lib :as lib]))\n>>\n>>\n>> (enable-console-print!)\n>>\n>>\n>> (lib\/debugMessage \"Narf\")\n>>\n>>\n>> and using the standalone cljs.jar, my build.clj file is:\n>>\n>>\n>> (require 'cljs.build.api)\n>>\n>>\n>> (cljs.build.api\/build \"src\"\n>>\n>>     {:main 'integrated.core\n>>\n>>      :output-to \"out\/main.js\"\n>>\n>>      :language-in :es6\n>>\n>>      :foreign-libs [{:file \"src\"\n>>\n>>                      :module-type :es6}]\n>>\n>>      :optimizations :advanced\n>>\n>>      :verbose true})\n>>\n>> If this is not how it's done, how do folks get es6 js to load as a \n>> foreign lib?\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Simple es6 JS file fails to compile as foreign lib Zalan Kemenczy Thu, 16 Nov 2017 11:23:04 -0800"},
{"body":"I'm trying to compile a super simple es6 JS file as a foreign lib, as \ndescribed in the clojurescript docs under Bundling \"Google Closure \nCompatible \nCode\": https:\/\/clojurescript.org\/reference\/dependencies#bundling-javascript-code \n\nThe compilation succeeds with no optimizations. However, for the life of me \nI can't get it to compile with advanced optimizations. I just get a bunch \nof warnings, that say all the compiler phases were skipped. A lot of \nwarnings like:\n\n\nWARNING: Skipping pass checkVariableReferences\n\nfactory features:  [block function, getters, string continuation, trailing \ncomma, setters, ES3 keywor\n\nds as identifiers, reserved words as properties, RegExp flag 'y', array \npattern rest, binary literal,\n\n let declaration, computed property, super, spread expression, RegExp flag \n'u', default parameter, cl\n\nass, arrow function, generator, template literal, for-of loop, member \ndeclaration, destructuring, oct\n\nal literal, const declaration, extended object literal, rest parameter, \nnew.target, exponent operator\n\n (**), trailing comma in param list, async function]    \n\n\nThe JS file looks like:\n\n\ngoog.provide('js.lib');\n\n\njs.lib.debugMessage = (x = \"any old string\") => {\n\nconsole.log(`Printing ${x} from cljs!`);\n\n};\n\n\nThe cljs file looks like:\n\n\n(ns integrated.core\n\n  (:require [js.lib :as lib]))\n\n\n(enable-console-print!)\n\n\n(lib\/debugMessage \"Narf\")\n\n\nand using the standalone cljs.jar, my build.clj file is:\n\n\n(require 'cljs.build.api)\n\n\n(cljs.build.api\/build \"src\"\n\n    {:main 'integrated.core\n\n     :output-to \"out\/main.js\"\n\n     :language-in :es6\n\n     :foreign-libs [{:file \"src\"\n\n                     :module-type :es6}]\n\n     :optimizations :advanced\n\n     :verbose true})\n\nIf this is not how it's done, how do folks get es6 js to load as a foreign \nlib?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Simple es6 JS file fails to compile as foreign lib Zalan Kemenczy Wed, 15 Nov 2017 17:33:47 -0800"},
{"body":"Hi folks\n\nToday we are incredibly excited to announce Clojurists Together\n<https:\/\/clojuriststogether.org\/>. The goal of Clojurists Together is to\nsupport important Clojure projects, by pooling donations from companies and\nindividuals in the Clojure community and then funding project maintainers. \nThe Clojurists Together model is based off the successful Ruby Together\n<https:\/\/rubytogether.org> project, which has been running for 2.5 years\nnow. It is run by a committee <https:\/\/clojuriststogether.org\/team\/> of\nClojure community members and lives under the Clojars organisation. Being\npart of Clojars allows us to accept 501(c)3 charitable donations via the SFC\n<https:\/\/sfconservancy.org\/>. We\u2019ve been (slowly) working on this for more\nthan a year now, and are looking forward to getting your feedback on it.\n\nThe announcement post\n<https:\/\/clojuriststogether.org\/news\/introducing-clojurists-together\/> has\nmore details, but briefly, there are two sides to Clojurists Together:\nCompanies\nand individuals, and open source maintainers.\n\n*Companies and individuals*\n\nCompanies and individuals sign up for a monthly donation to support\nClojurists Together at a tier they choose. Different tiers afford different\nbenefits. Company tiers are here <https:\/\/clojuriststogether.org\/companies\/>,\nindividual tiers are here <https:\/\/clojuriststogether.org\/developers\/>.\nEvery quarter, companies are surveyed to find out which tools, libraries,\nand areas of the Clojure ecosystem they think could be improved, or are\nimportant to them. We then compile that information and use it to help us\npick projects that will have the biggest impact.\n\n*Open Source Maintainers*\n\nEvery quarter open source maintainers can submit their project for funding\nfor the next quarterly funding period. You can see more on the application\nhere <https:\/\/clojuriststogether.org\/open-source\/>. We look through the\napplications, and pick the projects that can make the biggest impact. We\nfund projects based on the amount of support we get. The more support we\nget from companies and individuals, the more projects we can support, and\nthe more hours we can pay them for.\n\n*What now?*\n\n   - Encourage your managers to sign up for a company membership\n   <https:\/\/clojuriststogether.org\/companies\/>. For the next month, any\n   company or person that signs up will be marked as a founding member.\n   - If you are an open source maintainer, consider applying for funding\n   <https:\/\/clojuriststogether.org\/open-source\/>.\n   - If you are an individual developer, consider signing up for a developer\n   membership <https:\/\/clojuriststogether.org\/open-source\/>.\n   - Spread the word to other people you know that use Clojure commercially.\n   - If you're a designer, and have some time to help us improve the site\n   design, logo, e.t.c. that would be incredible. Please contact us off list\n   for more on this.\n\n*Questions?*\n\nThere may be some mistakes or things that don\u2019t look right in there. Please\nlet us know if you have any questions, either here, or off-list at\nh...@clojuriststogether.org. This project is for the Clojure community, so we\nwant your input on this. What works well, what doesn\u2019t work for you, what\nwould you like to see?\n\nThanks, from the Clojurists Together Committee\n<https:\/\/clojuriststogether.org\/team\/>:\nToby Crawley, Bridget Hilyer, Maria Geller, Devin Walters, Daniel Solano\nG\u00f3mez, Larry Staton Jr., Daniel Compton.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: Clojurists Together - Funding critical Clojure open source projects Daniel Compton Mon, 13 Nov 2017 15:21:45 -0800"},
{"body":"Actually a different set of protocols (e.g. StreamRequest, StreamResponse, \nStreamClient) would probably be best otherwise clients could call both \nfunctions while only one should be used. \nOn Monday, November 13, 2017 at 10:35:43 PM UTC, fmj...@gmail.com wrote:\n>\n> Not sure there is one.\n> Maybe augment httpurr Request protocol \n> <https:\/\/github.com\/funcool\/httpurr\/blob\/master\/src\/httpurr\/protocols.cljc> \n> with a -read(_ read-cb end-cb) function and amend accordingly the provided \n> clients \n> <https:\/\/github.com\/funcool\/httpurr\/tree\/master\/src\/httpurr\/client>?\n> You could even make that function return a beicon \n> <http:\/\/funcool.github.io\/beicon\/latest\/> stream...\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Streamy http client for Cljs? fmjrey Mon, 13 Nov 2017 14:50:45 -0800"},
{"body":"Not sure there is one.\nMaybe augment httpurr Request protocol \n<https:\/\/github.com\/funcool\/httpurr\/blob\/master\/src\/httpurr\/protocols.cljc> \nwith a -read(_ read-cb end-cb) function and amend accordingly the provided \nclients <https:\/\/github.com\/funcool\/httpurr\/tree\/master\/src\/httpurr\/client>?\nYou could even make that function return a beicon \n<http:\/\/funcool.github.io\/beicon\/latest\/> stream... \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Streamy http client for Cljs? fmjrey Mon, 13 Nov 2017 14:37:29 -0800"},
{"body":"Does this exist? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Streamy http client for Cljs? Dustin Getz Mon, 13 Nov 2017 12:45:08 -0800"},
{"body":"Hi folks\n\nI\u2019m pleased to announce Deps Versions (https:\/\/versions.deps.co\/). Deps\nVersions is a service that shows you when your dependencies are outdated.\nYou can add badges to your OSS Clojure\/ClojureScript GitHub projects that\nwill check if your dependencies are up to date. \nI hope to add support for more languages and tools (like tools.deps) soon,\nand for users to be able to subscribe to notifications when new versions\nare available.\n\nI wrote a blog post <https:\/\/www.deps.co\/blog\/announcing-deps-versions\/> at\nthe Deps blog explaining the background a bit more.\n\nDeps Versions is open source <https:\/\/github.com\/deps-app\/versions> on\nGitHub, so you can open issues and pull requests there for improvements and\nbug fixes.\n\nThanks, Daniel.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: Deps Versions - Add badges to spot when your dependencies are out of date Daniel Compton Mon, 13 Nov 2017 11:34:28 -0800"},
{"body":"I want to add my experience with this when trying to fit react-apollo into \na cljs project. Maybe it is useful to others going in this direction. \nOverall, I find it works better than I expected for an alpha feature, \nthough not yet seamless. \nUnfortunately I did not keep good enough notes while hacking through the \nproject, so some bits below are from my memory. Also, I'm no JS expert.\n\nI started a project with latest CLJS, reagent 0.8 (cljsjs deps excluded), \nreact 15.6.2 from npm, apollo-client, and react-apollo both from npm.\n\nThis is in order of discovery:\n\n1. NPM module that does not export using ES6\/CommonJS did not generate a \nnamespace.\n\nThe first thing that broke was 'whatwg-fetch' polyfill. Because it did not \n'export' anything, module_deps did not generate any 'provide'.\n\nBut somewhere in apollo-client, there is a 'require', so dependency \nresolution failed. I forked whatwg-fetch and added these lines just to fool \nmodule_deps:\n\n           const whatwg_fetch = 1; \n\n           export { whatwg_fetch };\n\n \n\n2.  Closure compiler assumes a file is either CommonJS or ES6. If a file \nhas both types of import\/export, it will ignore the other.\n\nreact-apollo contains source with both 'require' and 'import' in the same \nfile. Closure ignored one, did not rewrite module names into\n\nthe 'provide' string (\"full$path$to$module\"), leading to undefined vars. I \nforked the library and manually converted the imports to ES6. \n\n \n\n3. Closure compiler does not support circular \ndependency. https:\/\/github.com\/google\/closure-compiler\/issues\/1883\n\napollo-client contains some circular deps. Forked the library and manually \nmerged the files... New version of apollo-client\n\nwas released with more circular deps, I will not be upgrading for a while. \n\n \n\nAt this point, I got myself a working although fragile dev environment. I \ncould (:require [apollo-client]) like a cljs library, and interop was \nseamless.\nThen it was time for advanced optimization....\n\n4. Libraries not written with closure compiler in mind..\n\nWell.. mangled names everywhere. These libraries have some dynamic codes. \nNot much to say here, just use the extern shotgun until\n\nno more errors. I'm not even sure if something like tsickle (typescript to \nclosure) can even help here.\n\n\n5. Passing complex objects back and forth between js and cljs\n\nThe choice here is either being really careful when using js->clj, clj->js, \nand :keywordize-keys or extern shotgun. I did some experiments\n\nto understand how to do this safely, but got frustrated and used the extern \nshotgun.\n\n\nAfter all that, I have a working app at about 700k uncompressed compared to \n3MB+ simple optimization. \n\nI don't see an easy way to run arbitrary node module into closure's \nadvanced optimization yet.. Maybe a pre-processor can do the above tasks\nautomatically?\n\n \n\n\nOn Friday, September 29, 2017 at 1:00:01 AM UTC+7, Thomas Heller wrote:\n>\n> *\u201cSeamless interaction with NPM\u201d not so seamless*\n>\n> This has been exactly my experience as well which is why I wrote an \n> entirely new implementation for JS dependencies.\n>\n> The detailed article can be found here\n>\n> https:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/09\/15\/js-dependencies-going-forward.html\n>\n> In short the implementation is much less aggressive and sacrifices some \n> potential byte savings for greater compatibility with the JS ecosystem.\n>\n> I added js-nacl to my demo here:\n>\n> https:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/bb29828917080b143030ff557590c7c94b806ed7\/browser\/src\/demo\/app.cljs#L25-L29\n>\n> The relevant bits from the config are\n>\n> https:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/bb29828917080b143030ff557590c7c94b806ed7\/browser\/shadow-cljs.edn#L26-L28\n>\n> which basically just tell the compiler to use the window.crypto property \n> when require(\"crypto\") is used.\n>\n> I don't know if everything works since I know nothing about js-nacl. The \n> Basic example from their README seems to work.\n>\n> This is still in pre-release mode but I could some more testers with \n> \"troublesome\" JS dependencies.\n>\n>\n>\n> On Saturday, September 23, 2017 at 8:26:43 PM UTC+2, Ant\u00f3nio Monteiro \n> wrote:\n>>\n>> You also need to pass the `:install-deps true` compiler option from \n>> 1.9.854 onwards.\n>>\n>> Some libraries are not consumable by Google Closure if they use \n>> constructs like dynamic exporting and such.\n>>\n>> In any case, it looks like your problem is even another one: you're \n>> trying to use a Node.js library in the browser. Obviously, `fs`, `path` and \n>> `crypto` (which are Node.js builtins) are not going to be available in any \n>> browser.\n>>\n>> On Friday, September 22, 2017 at 3:50:45 PM UTC-7, Krzysztof Jurewicz \n>> wrote:\n>>>\n>>> Hello, \n>>>\n>>> I want to write a simple proof-of-concept (which may eventually evolve \n>>> into something more serious) GUI wallet for a cryptocurrency that I\u2019ve been \n>>> writing. As desktop libraries\/languages are either not very functional or \n>>> not very portable, ClojureScript plus local storage in browser as a \n>>> database looks like a good choice. To make it work, I need support for \n>>> Ed25519 (a public-key signature system). \n>>>\n>>> Fortunately, there are implementations of Ed25519 compiled to \n>>> JavaScript. js-nacl is a \u201cpure-Javascript High-level API to \n>>> Emscripten-compiled libsodium routines\u201d, available also as a NPM package, \n>>> and post at \n>>> https:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules\n>>>  \n>>> advertises \u201cSeamless interaction with NPM dependencies\u201d. I tried to use it, \n>>> roughly in the following way: \n>>>\n>>> \u2488 lein new reagent-frontend ercoin-wallet \n>>> \u2489 Added :npm-deps {:js-nacl \"1.2.2\"} to :cljsbuild \u21e8 :builds \u21e8 app \u21e8 \n>>> :compiler in project.clj. \n>>> \u248a Added [js-nacl :as nacl] to :require in core.cljs \n>>>\n>>> However :npm-deps seemed to be ignored. Fixed this by downgrading \n>>> ClojureScript from 1.9.908 to 1.9.671 (BTW, these versions are not tagged \n>>> in the Git repository), but then there are warnings: \n>>>\n>>> WARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module [\u2026] at [\u2026] \n>>>\n>>> , where modules are \u201cfs\u201d, \u201cpath\u201d and \u201ccrypto\u201d. \n>>>\n>>> spinningtopsofdo on IRC said that \u201cFrom a quick skim for js-nacl it \n>>> looks like it's using emscripten and doing some unique module loading that \n>>> Google Closure isn't aware of (\n>>> https:\/\/github.com\/tonyg\/js-nacl\/blob\/master\/lib\/nacl_factory.js#L30-L39).\u201d \n>>> and \u201cI think it's more the way js-nacl is using ASM \/ Emscripten and \n>>> creating JavaScript Modules. :npm-deps covers the common JavaScript module \n>>> patterns (e.g. CommonJs, Node, UMD) but there is still many edge cases out \n>>> there\u201d. \n>>>\n>>> I\u2019ve tried also tweetnacl-js, but similarly there is a warning: \n>>>\n>>> \u201cWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module \"crypto\" at \n>>> [\u2026]\u201d. \n>>>\n>>> What is the status of NPM interoperability then? Is it supposed to work \n>>> as plug & play or does it require hacky knowledge in some cases? \n>>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: \u201cSeamless interaction with NPM\u201d not so seamless Hendrik Poernama Fri, 10 Nov 2017 07:40:33 -0800"},
{"body":"Run CLJS tests in nashorn using cljs.test report hooks.\n\nREADME and source code: https:\/\/github.com\/nfisher\/lein-nashtest \nLeiningen dependency information:\n\n[lein-nashtest \"0.1.3\"]\n\nInitial release aiming to be non-intrusive to users tests through the use \nof cljs.test reporting hooks.\n\nSee the README for limitations, installation, usage, and the (short) \nroadmap.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: lein-nashtest 0.1.3 Nathan Fisher Thu, 09 Nov 2017 00:26:25 -0800"},
{"body":"After a while of digging I found the solution to be a combination of using \nreact's `initLocalState` lifecycle method and `om.next\/get-state` as hinted \nto in Chris' SO answer. \nThe general outline becomes as follows:\n\n    (defui MyComponent\n        Object\n        (initLocalState [this] {:id (gensym \"\") ...}) ; <-- the key\n        (render [this]\n         (let [id (om\/get-state this :id)] ...))\n        (componentDidmount [this]\n         (let [id (om\/get-state this :id)] ...))\n        ...\n\n\nThis approach is a little more verbose than in Reagent, but yields \nequivalent results. I use this all the time, so am a little surprised I \ncouldn't find any discussion about this elsewhere. I guess I am the only \none who didn't get it the first time :-)\n\n\nOp woensdag 8 november 2017 16:20:29 UTC+1 schreef Marc Claesen:\n>\n> I am fairly new to cljs and very new to Om.Next so this question is \n> probably trivial to answer. \n>\n>\n> I would like to do something equivalent to Reagent form-3 components, \n> which enable me to define some vars I can reuse in all lifecycle functions \n> of specific instantiations of a component.\n>\n>\n> Basically my question is how do I construct something equivalent to the \n> let in the Reagent code snippet below? I can't seem to figure out how to \n> do this properly using Om's defui macro.\n>\n>\n> A simple example would be to generate ids I can attach to specific \n> elements in my component to streamline access to them in all lifecycle \n> functions of a specific instance of my component via gdom\/getElement.\n>\n>\n> (defn my-component\n>   [x y z]  \n>   (let [id (gensym \"my-component-\")]  ;; <-- how to do this in Om?\n>      (reagent\/create-class                 \n>        {:component-did-mount (...)\n>         :component-will-mount (...)          \n>         :reagent-render\n>          (fn [x y z] (...))))\n>\n>\n> I assume an equivalent approach is possible in Om.Next, but please let me \n> know if I am somehow committing a cardinal sin using this approach.\n>\n>\n> I have also asked this question on stackoverflow \n> <https:\/\/stackoverflow.com\/q\/47181093\/2148672>.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Om.Next how to define vars shared across all lifecycle functions in component instantiation Marc Claesen Wed, 08 Nov 2017 23:41:39 -0800"},
{"body":"I would like to do something similar to Reagent form-3 components, which \nenable me to define some shared (static) vars I can reuse in all lifecycle \nfunctions in specific instantiations of my component. \n\nBasically my question is how do I construct something equivalent to the let in \nthe Reagent code snippet below? I can't seem to figure out how to do this \nproperly using Om's defui macro.\n\n\nA simple example would be to generate ids for specific elements to enable \nefficient access to those elements in all lifecycle functions of a specific \ninstance of my component via gdom\/getElement.\n\n\n(defn my-component\n  [x y z]  \n  (let [id (gensym \"my-component-\")]  ;; <-- how to do this in Om?\n     (reagent\/create-class                 \n       {:component-did-mount (...)\n        :component-will-mount (...)          \n        :reagent-render\n         (fn [x y z] (...))))\n\n\nI am new to Om.Next but I assume something like this is possible. If I am \nsomehow committing cardinal sins with this approach please let me know.\n\n\nI've also posted this question on SO here \n<https:\/\/stackoverflow.com\/q\/47181093\/2148672>.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Om.Next equivalent of Reagent's Form-3 component Marc Claesen Wed, 08 Nov 2017 07:20:48 -0800"},
{"body":"try this example  without lein please \nhttps:\/\/github.com\/minimal-xyz\/minimal-shadow-cljs-nodejs \nask in clojurians.slack.com\/messages\/shadow-cljs if you got any problems.\n\nOn Wednesday, October 4, 2017 at 4:38:34 AM UTC+8, Jonathon McKitrick wrote:\n>\n> I have my first NodeJS clojurescript project, and it WFM (Works For Me).\n>\n> I\u2019ve run `lein cljsbuild once` and `node XXX` to run the script many \n> times, though a few times I found `node_modules` was not populated, the \n> after running builds again, it would miraculously re-appear.\n>\n> Now that my colleagues are trying to run the project, they are running \n> into the same issue: an empty `node_modules` folder.\n>\n> What step am I missing?\n>\n> The project file has\n>\n> :target :nodejs\n> :npm-deps {assorted deps here}\n> :install-deps\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to make a cljs-node project install Jiyin Yiyong Mon, 06 Nov 2017 00:06:01 -0800"},
{"body":"When I try to run the clojurescript node repl for a leiningen project with \nnpm-deps, I get the following error: \nlein trampoline run -m clojure.main repl.clj\n\nClojureScript Node.js REPL server listening on 55620\nTo quit, type: :cljs\/quit\ncljs.user=> cljs.user=> (require 'mpgui.core)\nclojure.lang.ExceptionInfo: No such namespace: xml2js, could not locate \nxml2js.cljs, xml2js.cljc, or JavaScript source providing \"xml2js\" in file \n\/hom\ne\/dusan\/maximoplus-gui\/src\/mpgui\/core.cljs {:tag :cljs\/analysis-error}\n        at clojure.core$ex_info.invokeStatic(core.clj:4617)\n        at clojure.core$ex_info.invoke(core.clj:4617)\n        at cljs.analyzer$error.invokeStatic(analyzer.cljc:697)\n        at cljs.analyzer$error.invoke(analyzer.cljc:693)\n        at cljs.analyzer$error.invokeStatic(analyzer.cljc:695)\n...\n\nHowever, this works:\n\nlein trampoline run -m clojure.main repl.clj\nClojureScript Node.js REPL server listening on 54333\nTo quit, type: :cljs\/quit\ncljs.user=> (in-ns 'mpgui.core)\nnil\nmpgui.core=> (load-namespace 'mpgui.core)\nnil\nmpgui.core=> xml2js\nWARNING: Use of undeclared Var mpgui.core\/xml2js at line 1 <cljs repl>\nnil\nmpgui.core=> (load-file \"src\/mpgui\/core.cljs\")\nnil\nmpgui.core=> xml2js\n#js {:defaults #js {\"0.1\" #js {:explicitCharkey false, :trim true, \n:normalize true, :normalizeTags false, :attrkey \"@\", :charkey \"#\", \n:explicitArray f\nalse, :ignoreAttrs false, :mergeAttrs false, :explicitRoot false, \n:validator nil, :xmlns false, :explicitChildren false, :childkey \"@@\", \n:charsAsChild\nren false, :includeWhiteChars false, :async false, :strict true, \n:attrNameProcessors nil, :attrValueProcessors nil, :tagNameProcessors nil, \n:valueProc\nessors nil, :emptyTag \"\"}, \"0.2\" #js {:explicitCharkey false, :trim false, \n:normalize false, :normalizeTags false, :attrkey \"$\", :charkey \"_\", :explic\nitArray true, :ignoreAttrs false, :mergeAttrs false, :explicitRoot true, \n:validator nil, :xmlns false, :explicitChildren false, \n:preserveChildrenOrder\n false, :childkey \"$$\", :charsAsChildren false, :includeWhiteChars false, \n:async false, :strict true, :attrNameProcessors nil, :attrValueProcessors ni\nl, :tagNameProcessors nil, :valueProcessors nil, :rootName \"root\", :xmldec \n#js {:version \"1.0\", :encoding \"UTF-8\", :standalone true}, :doctype nil, :r\nenderOpts #js {:pretty true, :indent \"  \", :newline \"\\n\"}, :headless false, \n:chunkSize 10000, :emptyTag \"\", :cdata false}}, :processors #js {:normaliz\ne #object[Function], :firstCharLowerCase #object[Function], :stripPrefix \n#object[Function], :parseNumbers #object[Function], :parseBooleans \n#object[Fu\nnction]}, :ValidationError #object[ValidationError], :Builder \n#object[Builder], :Parser #object[Parser], :parseString #object[Function]}\n\n\nAny ideas why this works, and the first example doesn't? I am using \nclojurescript 1.9.946\n\nThanks\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] npm-deps and nodejs repl Dusan Miloradovic Sun, 29 Oct 2017 00:12:03 -0700"},
{"body":"I have answered your question in stackoverflow.\nIf you need more details about how I solve this issue inside Klipse, please \ncontact me in private. \nOn Sunday, 22 October 2017 01:47:23 UTC+3, phil jones wrote:\n>\n> I have a problem seeing libraries from inside an eval-ed expression in \n> clojurescript.\n>\n> Full details are here : \n> https:\/\/stackoverflow.com\/questions\/46866902\/clojurescript-eval-how-to-use-libraries-included-in-the-calling-code\n>\n> Basically, I want to include some clojure libraries in a web page, and \n> allow a user to write a small bit of clojurescript \"glued\" code (in the \n> browser) to call and use them. \n>\n> However when I try to eval the user's input, the libraries I've included \n> are not visible.\n>\n> Is there any way to get it to see them?\n>\n> I tried setting the :ns of the opt arument to eval, but it doesn't seem to \n> make any difference.\n>\n> cheers\n>\n> Phil\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeing libraries from eval in Clojurescript Yehonathan Sharvit Mon, 23 Oct 2017 05:16:19 -0700"},
{"body":"Thanks for the response Dustin,\n\nThat looks promising but it now seems to be failing because functions and \nname-spaces with hyphens in them are still not recognised with the error \nmessage telling me that hyphenated_fn_name is not a function. :-( \nOn Sunday, 22 October 2017 22:18:10 UTC-2, Dustin Getz wrote:\n>\n> I got this working by fully qualifying all symbols and haven't gotten \n> around to making ns forms work properly\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeing libraries from eval in Clojurescript phil jones Mon, 23 Oct 2017 00:47:00 -0700"},
{"body":"Thanks for the response Dustin,\n\nThat looks promising but it now seems to be failing because functions and \nname-spaces with hyphens in them are still not recognised with the error \nmessage telling me that hyphenated-fn-name is not a function. :-( \n\nOn Sunday, 22 October 2017 22:18:10 UTC-2, Dustin Getz wrote:\n>\n> I got this working by fully qualifying all symbols and haven't gotten \n> around to making ns forms work properly\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeing libraries from eval in Clojurescript phil jones Mon, 23 Oct 2017 00:46:01 -0700"},
{"body":"I got this working by fully qualifying all symbols and haven't gotten \naround to making ns forms work properly \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Seeing libraries from eval in Clojurescript Dustin Getz Sun, 22 Oct 2017 17:19:15 -0700"},
{"body":"I have a problem seeing libraries from inside an eval-ed expression in \nclojurescript. \nFull details are here : \nhttps:\/\/stackoverflow.com\/questions\/46866902\/clojurescript-eval-how-to-use-libraries-included-in-the-calling-code\n\nBasically, I want to include some clojure libraries in a web page, and \nallow a user to write a small bit of clojurescript \"glued\" code (in the \nbrowser) to call and use them. \n\nHowever when I try to eval the user's input, the libraries I've included \nare not visible.\n\nIs there any way to get it to see them?\n\nI tried setting the :ns of the opt arument to eval, but it doesn't seem to \nmake any difference.\n\ncheers\n\nPhil\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Seeing libraries from eval in Clojurescript phil jones Sat, 21 Oct 2017 15:48:07 -0700"},
{"body":"I have open a issue <https:\/\/github.com\/clojure-emacs\/cider\/issues\/2099> in \ncider, just want to know there is anyone else having this problem ? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] macroexpand-1 doesn't work in cider Jiacai Liu Wed, 18 Oct 2017 20:05:45 -0700"},
{"body":"On Tuesday, 19 February 2013 03:20:49 UTC-7, Stuart Campbell wrote:\n>\n> Say I have some namespace that looks like this:\n>\n> (ns util.logging)\n>\n> (defn log* [priority generate-message]\n>   (if (loggable? priority)\n>     (write-log (generate-message))))\n>\n> I also have some convenience macros that reference the functions in that \n> namespace:\n>\n> (ns util.logging-macros)\n>\n> (defmacro debug [msg]\n>   `(foo.logging\/log* :debug (fn [] ~msg)))\n>\n> If I want to be able to use the debug macro, I have to ensure that the \n> util.logging ns is loaded. I'm currently doing this manually:\n>\n> (ns foo\n>   (:require [util.logging :as logging])\n>   (:require-macros [util.logging-macros :as log]))\n>\n> (log\/debug \"Hello\")\n>\n> Is there a way to ensure util.logging is always required along with \n> util.logging-macros?\n> \nThe recommended way to do this with a modern (circa 2017) ClojureScript is \ndescribed \nhere: https:\/\/groups.google.com\/d\/msg\/clojurescript\/o0Q8Gs_0HYQ\/yv0NgDD1BgAJ\n\nI appreciate that necroposting is considered gauche, but this post is still \na top hit on Google when searching on this topic, and hopefully I can spare \nothers the hours that I spent trying to figure this out.\n\n.M\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Referencing ClojureScript namespace from Clojure macro Marc Daya Sat, 14 Oct 2017 12:59:29 -0700"},
{"body":"I have a REPL connected to the browser.  I wrote a function called `test1`, \ncalled it from the REPL, and got an error. Is there a way to see a stack \ntrace?  Typing `*e` as I would in normal Clojure REPL did not work. \n=> (test1)\n#object[TypeError TypeError: null is not an object (evaluating \n'elt.innerHTML = html')]\n   someapp$dom#html_BANG_ (file:\/[...]\/src\/main\/clj\/someapp\/dom.cljs:118:22)\nnil\n\n(If it matters, I'm using figwheel.)\n\nthanks, \nRob\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Stacktrace in REPL? Rob Nikander Thu, 12 Oct 2017 15:03:12 -0700"},
{"body":"Hi\nNo not the same. My problem is that the paths to the js sources get messed \nup when using an output-to settings not under the output-dir.\nI can't say much about your error without seeing your compiler options. Can \nyou post them? \nregards\nDan\n\nOn Wednesday, October 11, 2017 at 4:37:51 PM UTC+2, Sonny To wrote:\n>\n> I think this is related to my problem \n> https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/700iaLDzrNI\n> are you getting the same error messages?\n>\n> On Friday, September 29, 2017 at 11:10:18 PM UTC+3, Dan Johansson wrote:\n>>\n>> Hi\n>> When trying out the modules feature in cljs 1.9.908 I ran into a problem \n>> when using optimization other than :none\n>> It seems like the output-to must be inside the output-dir. The problem I \n>> have with this is that I can't use the same markup for :none and :advanced \n>> compilation mode since the script tag need to reference one js file in one \n>> location. And there is a limitation in cljsbuild (I think) that prevents me \n>> from using the same output-dir for :none and :advanced.\n>>\n>> There are ways to workaround this of course but I wanted to check if I'm \n>> missing something and if this is a known and intentional side effect of the \n>> module implementation.\n>>\n>> regards\n>> Dan\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: modules Dan Johansson Thu, 12 Oct 2017 02:52:31 -0700"},
{"body":"I can't get source-maps to work for files loaded at runtime using \ncljs.loader\/load \n(see https:\/\/clojurescript.org\/news\/2017-07-10-code-splitting)\nExceptions occuring in those files show js sources from e.g. VM11393:86948 \nSources loaded via script tag shows source-maps correctly\n\nShould it work or is it unsupported?\n\nI use chrome and cljs \"1.9.908\"\n\n:optimizations :none\n:source-map true\n\n\nThanks\nDan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] source maps and modules (code splitting) Dan Johansson Thu, 12 Oct 2017 02:26:16 -0700"},
{"body":"You can access anything from your page, it doesn't depend on project.clj. One \nexception is advanced mode compilation where are names changed. To make any \nname publicly accessible add :export metadata to the var. Eg. (defn ^:export \nfn2 [] ...) \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How to provide a second namespace in a lein project? Ale\u0161 Roub\u00ed\u010dek Wed, 11 Oct 2017 22:50:57 -0700"},
{"body":"I think this is related to my \nproblem https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/700iaLDzrNI\nare you getting the same error messages? \nOn Friday, September 29, 2017 at 11:10:18 PM UTC+3, Dan Johansson wrote:\n>\n> Hi\n> When trying out the modules feature in cljs 1.9.908 I ran into a problem \n> when using optimization other than :none\n> It seems like the output-to must be inside the output-dir. The problem I \n> have with this is that I can't use the same markup for :none and :advanced \n> compilation mode since the script tag need to reference one js file in one \n> location. And there is a limitation in cljsbuild (I think) that prevents me \n> from using the same output-dir for :none and :advanced.\n>\n> There are ways to workaround this of course but I wanted to check if I'm \n> missing something and if this is a known and intentional side effect of the \n> module implementation.\n>\n> regards\n> Dan\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: modules Sonny To Wed, 11 Oct 2017 07:38:01 -0700"},
{"body":"this happens when setting optimizations to :advanced.  module compilation \nworks without error when set to  optimizations is set to :none \nOn Wednesday, October 11, 2017 at 5:31:47 PM UTC+3, Sonny To wrote:\n>\n> I get the folloiwing stacktrace when upgrading to   \n> [org.clojure\/clojurescript \"1.9.946\"]\n>\n> it is having problem compiling modules. last version I was able to \n> successfully compile was  1.9.671\n>\n> clojure.lang.ArityException: Wrong number of args (1) passed to: \n> core\/max-key\n>         at clojure.lang.AFn.throwArity(AFn.java:429)\n>         at clojure.lang.RestFn.invoke(RestFn.java:412)\n>         at clojure.lang.AFn.applyToHelper(AFn.java:154)\n>         at clojure.lang.RestFn.applyTo(RestFn.java:132)\n>         at clojure.core$apply.invokeStatic(core.clj:659)\n>         at clojure.core$apply.invoke(core.clj:652)\n>         at \n> cljs.module_graph$deepest_common_parent.invokeStatic(module_graph.cljc:137)\n>         at \n> cljs.module_graph$deepest_common_parent.invoke(module_graph.cljc:131)\n>         at \n> cljs.module_graph$inputs__GT_assigned_modules$assign1__22066.invoke(module_graph.cljc:183)\n>         at clojure.core$map$fn__5414$fn__5415.invoke(core.clj:2722)\n>         at \n> clojure.core.protocols$iter_reduce.invokeStatic(protocols.clj:49)\n>         at clojure.core.protocols$fn__7664.invokeStatic(protocols.clj:75)\n>         at clojure.core.protocols$fn__7664.invoke(protocols.clj:75)\n>         at \n> clojure.core.protocols$fn__7606$G__7601__7619.invoke(protocols.clj:13)\n>         at clojure.core$transduce.invokeStatic(core.clj:6760)\n>         at clojure.core$into.invokeStatic(core.clj:6775)\n>         at clojure.core$into.invoke(core.clj:6763)\n>         at \n> cljs.module_graph$inputs__GT_assigned_modules.invokeStatic(module_graph.cljc:199)\n>         at \n> cljs.module_graph$inputs__GT_assigned_modules.invoke(module_graph.cljc:166)\n>         at \n> cljs.module_graph$expand_modules.invokeStatic(module_graph.cljc:220)\n>         at cljs.module_graph$expand_modules.invoke(module_graph.cljc:208)\n>         at cljs.closure$build_modules.invokeStatic(closure.clj:1192)\n>         at cljs.closure$build_modules.invoke(closure.clj:1131)\n>         at cljs.closure$optimize_modules.invokeStatic(closure.clj:1299)\n>         at cljs.closure$optimize_modules.doInvoke(closure.clj:1279)\n>         at clojure.lang.RestFn.applyTo(RestFn.java:139)\n>         at clojure.core$apply.invokeStatic(core.clj:659)\n>         at clojure.core$apply.invoke(core.clj:652)\n>         at cljs.closure$build.invokeStatic(closure.clj:2627)\n>         at cljs.closure$build.invoke(closure.clj:2507)\n>         at cljs.build.api$build.invokeStatic(api.clj:205)\n>         at cljs.build.api$build.invoke(api.clj:189)\n>         at cljs.build.api$build.invokeStatic(api.clj:192)\n>         at cljs.build.api$build.invoke(api.clj:189)\n>         at cljsbuild.compiler$compile_cljs$fn__786.invoke(compiler.clj:61)\n>         at cljsbuild.compiler$compile_cljs.invokeStatic(compiler.clj:60)\n>         at cljsbuild.compiler$compile_cljs.invoke(compiler.clj:48)\n>         at cljsbuild.compiler$run_compiler.invokeStatic(compiler.clj:168)\n>         at cljsbuild.compiler$run_compiler.invoke(compiler.clj:129)\n>         at \n> user$eval915$iter__963__967$fn__968$fn__994.invoke(form-init1546479694599073517.clj:1)\n>         at \n> user$eval915$iter__963__967$fn__968.invoke(form-init1546479694599073517.clj:1)\n>         at clojure.lang.LazySeq.sval(LazySeq.java:40)\n>         at clojure.lang.LazySeq.seq(LazySeq.java:49)\n>         at clojure.lang.RT.seq(RT.java:526)\n>         at clojure.core$seq__4956.invokeStatic(core.clj:137)\n>         at clojure.core$dorun.invokeStatic(core.clj:3113)\n>         at clojure.core$doall.invokeStatic(core.clj:3128)\n>         at clojure.core$doall.invoke(core.clj:3128)\n>         at user$eval915.invokeStatic(form-init1546479694599073517.clj:1)\n>         at user$eval915.invoke(form-init1546479694599073517.clj:1)\n>         at clojure.lang.Compiler.eval(Compiler.java:7005)\n>         at clojure.lang.Compiler.eval(Compiler.java:6995)\n>         at clojure.lang.Compiler.load(Compiler.java:7457)\n>         at clojure.lang.Compiler.loadFile(Compiler.java:7395)\n>         at clojure.main$load_script.invokeStatic(main.clj:277)\n>         at clojure.main$init_opt.invokeStatic(main.clj:279)\n>         at clojure.main$init_opt.invoke(main.clj:279)\n>         at clojure.main$initialize.invokeStatic(main.clj:310)\n>         at clojure.main$null_opt.invokeStatic(main.clj:344)\n>         at clojure.main$null_opt.invoke(main.clj:341)\n>         at clojure.main$main.invokeStatic(main.clj:423)\n>         at clojure.main$main.doInvoke(main.clj:386)\n>         at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>         at clojure.lang.Var.applyTo(Var.java:702)\n>         at clojure.main.main(main.java:37)\n> Uberjar aborting because jar failed: Subprocess failed\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: clojure.lang.ArityException: Wrong number of args (1) passed to: core\/max-key Sonny To Wed, 11 Oct 2017 07:36:53 -0700"},
{"body":"Hi @franko !\nYou might be interested in modules \n: https:\/\/clojurescript.org\/guides\/code-splitting. \nDeclare one module for `my-project.core` and an other one for \n`my-project.other`. It will create two `.js` files :) \n\nOn Tuesday, October 10, 2017 at 8:00:06 PM UTC+2, franko wrote:\n>\n> I see how to make my-project.core fn's available to be called from a web \n> page. \n>\n> But how does one tweak my-project's lein project.clj such that the same \n> web page can use my-project.*other*'s fns as well?\n>\n> Just to be clear, I'm not asking how to call my-project.other\/fn2 from \n> my-project.core\/fn1. \n>\n> Without your help, I'd end up creating a wrapper in my-project.core just \n> to call into my-project.other which doesn't seem right. \n>\n> Thanks in advance! :)\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to provide a second namespace in a lein project? geoffrey . gaillard Wed, 11 Oct 2017 07:34:14 -0700"},
{"body":"I see how to make my-project.core fn's available to be called from a web \npage. \nBut how does one tweak my-project's lein project.clj such that the same web \npage can use my-project.*other*'s fns as well?\n\nJust to be clear, I'm not asking how to call my-project.other\/fn2 from \nmy-project.core\/fn1. \n\nWithout your help, I'd end up creating a wrapper in my-project.core just to \ncall into my-project.other which doesn't seem right. \n\nThanks in advance! :)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How to provide a second namespace in a lein project? franko Tue, 10 Oct 2017 11:00:54 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.946\"]\n\nThis release contains many bug fixes and addresses feedback from the 1.9.908\nrelease. Important changes include parity with Clojure 1.9.0-beta1 and an\nupdated Google Closure Compiler dependency. The later one in particular now\nmeans that ClojureScript has a dependency on JDK 8.\n\nAs always feedback welcome!\n\n1.9.946\n\n### Changes\n* CLJS-2300: Delegate clojure.string\/capitalize to goog.string\/capitalize\n* CLJS-2374: Print js\/Infinity, js\/-Infinity, js\/NaN using new reader\nliterals\n* bump tools.reader (1.1.0)\n* CLJS-2372: update hash to use the new infinity literals\n* CLJS-2364: Bump Closure Compiler to the Sep 2017 version\n* CLJS-2340: Have js-keys delegate directly to good.object\/getKeys\n* CLJS-2338: Support renamePrefix{Namespace} closure compiler option\n\n### Fixes\n* CLJS-1576: fix source-map string encoding by applying encodeURIComponent\nand fixing string\/replace call\n* CLJS-2294: Always use opts with implicit opts added\n* CLJS-2166: Add uri? predicate\n* CLJS-2368: Self-host: Never compile macro namespaces with\n`:optimize-constants true\n* CLJS-2367: Self-host: :def-emits-var leaks into loaded namespace\nprocessing\n* CLJS-2352: Emit valid JS for NaN etc. even when used w\/ CLJ >=\n1.9.0-alpha20\n* CLJS-2339: Significant code reload slowdown with :npm-deps\n* CLJS-2361: Self-host: circular dependency detection doesn't handle REPL\nself-require\n* CLJS-2356: Self-host: circular dependency detection is not correct\n* CLJS-2354: Self-host: `compile-str` doesn't handle `clojure` -> `cljs`\naliasing\n* CLJS-2353: use portable `node-module-dep?` function in analyze-deps\n* CLJS-2345: escape paths emitted as args to cljs.core.load_file\n* CLJS-2349: Port reset-vals! and swap-vals! over from Clojure\n* CLJS-2336: Call alength once in areduce and amap\n* CLJS-2335: Avoid alength on strings\n* CLJS-2334: Also gather dependencies from foreign-libs that are modules\n* CLJS-2333: module-deps.js doesn't correctly compute `main` if aliased in\nbrowser field\n* CLJS-2332: module_deps.js doesn't process `export from` correctly\n* CLJS-2330: Don't set `\"browser\"` field for Closure if target is :nodejs\n* CLJS-2326: Indexing node_modules can't find `main` when it doesn't have\nan extension\n* CLJS-2328: Args are not provided to *main-cli-fn* with optimizations\nadvanced\n* CLJS-2327: module_deps.js doesn't know about browser field advanced usage\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.946 David Nolen Tue, 03 Oct 2017 14:52:20 -0700"},
{"body":"I have my first NodeJS clojurescript project, and it WFM (Works For Me).\n\nI\u2019ve run `lein cljsbuild once` and `node XXX` to run the script many times, \nthough a few times I found `node_modules` was not populated, the after \nrunning builds again, it would miraculously re-appear. \nNow that my colleagues are trying to run the project, they are running into \nthe same issue: an empty `node_modules` folder.\n\nWhat step am I missing?\n\nThe project file has\n\n:target :nodejs\n:npm-deps {assorted deps here}\n:install-deps\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How to make a cljs-node project install Jonathon McKitrick Tue, 03 Oct 2017 13:38:46 -0700"},
{"body":"Hi\nWhen trying out the modules feature in cljs 1.9.908 I ran into a problem \nwhen using optimization other than :none\nIt seems like the output-to must be inside the output-dir. The problem I \nhave with this is that I can't use the same markup for :none and :advanced \ncompilation mode since the script tag need to reference one js file in one \nlocation. And there is a limitation in cljsbuild (I think) that prevents me \nfrom using the same output-dir for :none and :advanced. \nThere are ways to workaround this of course but I wanted to check if I'm \nmissing something and if this is a known and intentional side effect of the \nmodule implementation.\n\nregards\nDan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] modules Dan Johansson Fri, 29 Sep 2017 13:10:39 -0700"},
{"body":"groovy https:\/\/dev.clojure.org\/jira\/browse\/CLJS-2371 created \nOn Fri, Sep 29, 2017 at 2:01 AM, David Nolen <dnolen.li...@gmail.com> wrote:\n\n> Yes please raise an issue in JIRA thanks.\n>\n> David\n>\n> On Fri, Sep 29, 2017 at 5:26 AM, Timothy Pratley <timothyprat...@gmail.com\n> > wrote:\n>\n>> The ClojureScript compiler has code to handle :rename-macros, but it is\n>> inaccessible due to an overly restrictive spec:\n>>\n>> (ns cljs.user\n>>   (:require [n.m :refer-macros [a] :rename-macros {a b}]))\n>>\n>> Could not Analyze src\/cljs\/user.cljs\n>> Only :as, :refer and :rename options supported in :require \/\n>> :require-macros; offending spec: (power-turtle.m :rename-macros {all all2})\n>> at line 1 src\/cljs\/user.cljs\n>>\n>> I believe that this form is valid and the intention is to support it.\n>> If so please let me know and I can raise an issue in Jira.\n>>\n>>\n>> The alternative form works fine:\n>>\n>> (ns cljs.user\n>>   (:require-macros [n.m :refer [a] :rename {a b}]))\n>>\n>>\n>> Regards,\n>> Timothy\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/\n> topic\/clojurescript\/xNlcmPVoj48\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] [bug report] :rename-macros is inaccessible do to overly restrictive spec Timothy Pratley Fri, 29 Sep 2017 09:02:54 -0700"},
{"body":"I implemented a new solution for dealing with JS dependencies in a browser \ncontext. \nIn short it trades a few potential byte savings for greater compatibility \nwith the npm ecosystem.\n\nI wrote about it here:\nhttps:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/09\/15\/js-dependencies-going-forward.html\n\nIf you are using dependencies from NPM but currently have to jump through \nhoops to make it all work this might be a good solution for you. I am \nlooking for testers and want to hear about any package that might not work. \nIf you have trouble using the new :npm-deps feature of CLJS this might be a \nsuitable fallback to use.\n\nCheers,\n\/thomas\n\n\nPS: See discussion on reddit as well:\nhttps:\/\/www.reddit.com\/r\/Clojure\/comments\/72wf86\/shadowcljs_js_dependencies_going_forward\/\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] shadow-cljs - JS dependencies: Going forward Thomas Heller Fri, 29 Sep 2017 02:42:28 -0700"},
{"body":"Yes please raise an issue in JIRA thanks.\n\nDavid \nOn Fri, Sep 29, 2017 at 5:26 AM, Timothy Pratley <timothyprat...@gmail.com>\nwrote:\n\n> The ClojureScript compiler has code to handle :rename-macros, but it is\n> inaccessible due to an overly restrictive spec:\n>\n> (ns cljs.user\n>   (:require [n.m :refer-macros [a] :rename-macros {a b}]))\n>\n> Could not Analyze src\/cljs\/user.cljs\n> Only :as, :refer and :rename options supported in :require \/\n> :require-macros; offending spec: (power-turtle.m :rename-macros {all all2})\n> at line 1 src\/cljs\/user.cljs\n>\n> I believe that this form is valid and the intention is to support it.\n> If so please let me know and I can raise an issue in Jira.\n>\n>\n> The alternative form works fine:\n>\n> (ns cljs.user\n>   (:require-macros [n.m :refer [a] :rename {a b}]))\n>\n>\n> Regards,\n> Timothy\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] [bug report] :rename-macros is inaccessible do to overly restrictive spec David Nolen Fri, 29 Sep 2017 02:02:34 -0700"},
{"body":"also, regarding \n> Most of my use cases are doing refers of namespaces.\n\nI generate a user.cljs file that does all the refers so that the symbols \ncan be used without fully qualifying them.\nThat way when you start up in the user.cljs namespace, all your refers are \nready to go! :) \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Best practice to prepare a state for cljs.js\/eval? Timothy Pratley Thu, 28 Sep 2017 21:30:09 -0700"},
{"body":"Hi Tiago,\n\nThe compiler produces files ending in .cache.json\nYou can collect these and merge them together. \nI've been doing this (thanks to Mike for suggesting) \nin http:\/\/github.com\/timothypratley\/power-turtle\nif you wanted to do the same thing...\nHere is how I am doing it:\n\nI define a clojure task that collects the caches into a single file\n\n(ns power-turtle.collect-caches\n  (:require\n    [clojure.java.io :as io]\n    [clojure.string :as string]\n    [cognitect.transit :as transit])\n  (:import (java.io File)))\n\n(defn collect-caches [caches-dir]\n  (into {}\n        (for [^File f (file-seq (io\/file caches-dir))\n              :when (.isFile f)\n              :let [filename (.getName f)]\n              :when (string\/ends-with? filename \".cache.json\")\n              :let [cache (with-open [in (io\/input-stream f)]\n                            (transit\/read\n                              (transit\/reader in :json)))]]\n          [(symbol (:name cache)) cache])))\n\n(defn -main [caches-dir output-cache-file]\n  (println \"Collect caches: Started\")\n  (let [mega-cache (collect-caches caches-dir)]\n    (with-open [out (io\/output-stream output-cache-file)]\n      (transit\/write\n        (transit\/writer out :json)\n        mega-cache))\n    (println \"Collect caches: Done\" (count mega-cache) \"namespaces\")))\n\n\n\nThen I load that into the state:\n\n(io\/fetch-file!\n  \"aot\/cache.json\"\n  (fn fetched [txt]\n    (let [cache (transit\/read (transit\/reader :json) txt)]\n      (swap! replumb-repl\/st update :cljs.analyzer\/namespaces merge cache)))))\n\n\nand now you can call stuff.\n\nI hope that helps.\n\n\nRegards,\nTimothy\n\nOn Sunday, July 23, 2017 at 5:31:58 AM UTC-7, Tiago Ant\u00e3o wrote:\n>\n> Hi,\n>\n> I am trying to prepare a state to be used under cljs.js\/eval. Mostly of \n> what I want to do could be achieved with a loader, but I was wondering if \n> there is any documentation or example on how to prepare a state before \n> usage with eval? The only thing available is empty-state and I was not able \n> to find any documentation on how to change empty-state to add more stuff to \n> it.\n>\n> Most of my use cases are doing refers of namespaces.\n>\n> I would prefer to change the start state as in my case using the loader to \n> achieve what I need is actually a hack (I know from the very start all that \n> I want to add).\n>\n> Thanks,\n> Tiago\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Best practice to prepare a state for cljs.js\/eval? Timothy Pratley Thu, 28 Sep 2017 21:27:44 -0700"},
{"body":"Hi \ubc15\uc0c1\uaddc,\n\nThe trick with ClojureScript defmacro is that it behaves differently in \ndifferent circumstances. \nIf you call defmacro in a cljs file, it actually defines a function, not a \nmacro, instead of throwing an error.\nI find that pretty confusing. The function will produce the form instead of \nexpanding the form like a macro would.\nThere is no error reported.\n\nA cljc file can be loaded in response to either :require-macros,  \n:require,  or being in your compilation directory.\nIf it gets loaded by :require-macros, it will define the macro correctly.\nIf it gets loaded by :require, it will define the macro incorrectly.\nIn your example, you never :require the file, but the file is compiled \nnever the less, because it is in the src directory.\nWhat this does is produces the incorrect function.\nHowever because you ALSO :require-macros, it also correctly creates the \nmacro.\nNow there is a weird situation where if you refer to the macro using the \nfully qualified namespace,\nit will call the incorrect function,\nbut if you just call the macro as you have, it works.\n\nSo to answer your question, yes in your example the (defmacro) happened \ntwice:\nOnce in the correct context of defining the macro in clj,\nand a second time in the incorrect context of defining a function in cljs.\nIt is confusing and bad to have (defmacro) called in both contexts.\n\nYou can avoid this however by wrapping your macro in #?(:clj  (defmacro \n...))\nNow it will only get defined once, in the correct context.\n\nYou can find more detailed examples here:\n\nhttp:\/\/blog.fikesfarm.com\/posts\/2015-06-19-portable-macro-musing.html\nhttps:\/\/stackoverflow.com\/questions\/29914967\/can-cljc-single-file-macro-definitions-to-work-with-clojurescript\n\nBut the easiest thing to do to avoid confusion is to only put your macros \nin a clj file, not a cljc file.\n\n\nRegards,\nTimothy\n\n\n\n\n\nOn Friday, September 15, 2017 at 11:27:24 AM UTC-7, \ubc15\uc0c1\uaddc wrote:\n>\n> oh, sorry for my unclear questions.\n>\n> In my thought, the following steps might be expected when ClojureScript \n> compiler compiles core.cljs above.\n>\n> 1) It meets `ns` form at line 1 in core.cljs, handles `:require-macros`, \n> and it tries to load macro.cljc as Clojure code because what is required is \n> macros as the keyword `:require-macros` means\n>\n> 2) Loading macro.cljc, as expected, it makes a namespace named 'macro' and \n> registers symbols and vars to use for compile time, not for runtime.\n>\n> 3) At line 6 in core.cljs it meets `log` form and it tries to macro-expand \n> the `log` macro.\n>\n> 4) It finds the `log` macro var in macro namespace which is registered \n> just before, call the `log` macro var to expand the `log` form, and is \n> returned the expanded form which includes `now` symbol.\n>\n> 5) At this time ClojureScript compiler starts to resolve the symbols in \n> the expanded form.\n>\n> 6) And It meets symbol `now` and searches in all namespaces to resolve the \n> symbol to use for runtime.\n>\n> 7) When the modified macro.cljc above is used, ClojureScript compiler \n> can't resolve the symbol `now` for runtime, because the `now` function is a \n> macro helper function to be used for compile time. Hence the warning.\n>\n> 8) But when the unmodified macro.cljc above is used, ClojureScript \n> compiler emited no warning. This means ClojureScript compiler resolved the \n> symbol `now` for runtime, which I thought must be registered by loading \n> macro.cljc as ClojureScript code.\n>\n> So, this makes me have a doubt that ClojureScript compiler load macro.cljc \n> twice, one time as ClojureScript code, next time as Clojure code.\n>\n>\n> 2017\ub144 9\uc6d4 15\uc77c \uae08\uc694\uc77c \uc624\ud6c4 9\uc2dc 40\ubd84 19\ucd08 UTC+9, David Nolen \ub2d8\uc758 \ub9d0:\n>>\n>> You cannot define macros in .cljs files or .cljc files you intend to load \n>> as ClojureScript. So it's not clear to me what you are trying to \n>> demonstrate.\n>>\n>> HTH,\n>> David\n>>\n>> On Thu, Sep 14, 2017 at 4:37 AM, \ubc15\uc0c1\uaddc <psk...@gmail.com> wrote:\n>>\n>>> I have wondered how clojurescript compiler processes macros.\n>>> So I tested as following:\n>>>\n>>> I made dirs and files as below.\n>>>\n>>> guruma@mac cljs $ tree .\n>>> .\n>>> \u251c\u2500\u2500 build.clj\n>>> \u251c\u2500\u2500 cljs.jar\n>>> \u2514\u2500\u2500 src\n>>>     \u2514\u2500\u2500 foo\n>>>         \u251c\u2500\u2500 core.cljs\n>>>         \u2514\u2500\u2500 macro.cljc\n>>>\n>>> 2 directories, 4 files\n>>>\n>>> I downloaded cljs.jar using curl.\n>>>\n>>> guruma@mac cljs $ curl -LOk \n>>> https:\/\/github.com\/clojure\/clojurescript\/releases\/download\/r1.9.908\/cljs.jar\n>>>\n>>> And I made build.clj, core.cljs and macro.cljc as below.\n>>>\n>>> build.clj\n>>> (require 'cljs.build.api)\n>>>\n>>> (cljs.build.api\/build\n>>>   \".\/src\"\n>>>   {:main 'core\n>>>    :output-to \"out\/main.js\"})\n>>>\n>>> core.cljs\n>>> (ns foo.core\n>>>   (:require-macros [macro :refer [log]]))\n>>>\n>>> (enable-console-print!)\n>>>\n>>> (log \"hello, world\")\n>>>\n>>> core.cljs require macro.cljc and use a macro 'log'.\n>>>\n>>> macro.cljc\n>>> (ns foo.macro)\n>>>\n>>> (defn now []\n>>>   #?(:clj (System\/currentTimeMillis)\n>>>      :cljs (js\/Date.now)))\n>>>\n>>> (defmacro log [x]\n>>>   `(println \"log[\" (now) \"]: \" ~x))\n>>>\n>>> macro.cljc defines a macro 'log'.\n>>> And there is the helper function 'now' that has read-conditionals in its \n>>> body. \n>>>\n>>> And compile.\n>>>\n>>> guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj\n>>> guruma@mac cljs $\n>>>\n>>> No error and no warning.\n>>>\n>>> And I modified macro.cljc as below\n>>>\n>>> macro.cljc  modified\n>>> (ns foo.macro)\n>>>\n>>> #?(:clj (defn now []  ; <== modified\n>>>     (System\/currentTimeMillis)))\n>>>\n>>> (defmacro log [x]\n>>>   `(println \"log[\" (now) \"]: \" ~x))\n>>>\n>>> the function 'now' is in read-conditional.\n>>>\n>>> And compile.\n>>>\n>>> guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj\n>>> WARNING: Use of undeclared Var foo.macro\/now at line 6 \n>>> .\/src\/foo\/core.cljs\n>>>\n>>> Here is a warning and it is out of question because there is no \n>>> definition of the function 'now' for clojurescript to be used for runtime.\n>>>\n>>> But what i can't understand is why there is no warning when compiling \n>>> unmodified macro.cljc.\n>>>\n>>> My questions are:\n>>>\n>>> 1) Does clojurescript compiler load macro twice for :clj and :cljs in \n>>> read-conditional when handling :require-macros?\n>>> 2) How does clojurescript compiler resolve the symbol 'now' defined in \n>>> macro.cljc?\n>>>\n>>> Thanks a lot in advance.\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>> -- \n>>> Note that posts from new members are moderated - please be patient with \n>>> your first post.\n>>> --- \n>>> You received this message because you are subscribed to the Google \n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send \n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] clojurescript compiler loads twice macro in .cljc for require-macros? Timothy Pratley Thu, 28 Sep 2017 21:17:32 -0700"},
{"body":"The ClojureScript compiler has code to handle :rename-macros, but it is \ninaccessible due to an overly restrictive spec: \n(ns cljs.user\n  (:require [n.m :refer-macros [a] :rename-macros {a b}]))\n\nCould not Analyze src\/cljs\/user.cljs\nOnly :as, :refer and :rename options supported in :require \/ \n:require-macros; offending spec: (power-turtle.m :rename-macros {all all2}) \nat line 1 src\/cljs\/user.cljs\n\nI believe that this form is valid and the intention is to support it.\nIf so please let me know and I can raise an issue in Jira.\n\n\nThe alternative form works fine:\n\n(ns cljs.user\n  (:require-macros [n.m :refer [a] :rename {a b}]))\n\n\nRegards,\nTimothy\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [bug report] :rename-macros is inaccessible do to overly restrictive spec Timothy Pratley Thu, 28 Sep 2017 20:27:15 -0700"},
{"body":"*\u201cSeamless interaction with NPM\u201d not so seamless*\n\nThis has been exactly my experience as well which is why I wrote an \nentirely new implementation for JS dependencies. \nThe detailed article can be found here\nhttps:\/\/code.thheller.com\/blog\/shadow-cljs\/2017\/09\/15\/js-dependencies-going-forward.html\n\nIn short the implementation is much less aggressive and sacrifices some \npotential byte savings for greater compatibility with the JS ecosystem.\n\nI added js-nacl to my demo here:\nhttps:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/bb29828917080b143030ff557590c7c94b806ed7\/browser\/src\/demo\/app.cljs#L25-L29\n\nThe relevant bits from the config are\nhttps:\/\/github.com\/thheller\/shadow-cljs-examples\/blob\/bb29828917080b143030ff557590c7c94b806ed7\/browser\/shadow-cljs.edn#L26-L28\n\nwhich basically just tell the compiler to use the window.crypto property \nwhen require(\"crypto\") is used.\n\nI don't know if everything works since I know nothing about js-nacl. The \nBasic example from their README seems to work.\n\nThis is still in pre-release mode but I could some more testers with \n\"troublesome\" JS dependencies.\n\n\n\nOn Saturday, September 23, 2017 at 8:26:43 PM UTC+2, Ant\u00f3nio Monteiro wrote:\n>\n> You also need to pass the `:install-deps true` compiler option from \n> 1.9.854 onwards.\n>\n> Some libraries are not consumable by Google Closure if they use constructs \n> like dynamic exporting and such.\n>\n> In any case, it looks like your problem is even another one: you're trying \n> to use a Node.js library in the browser. Obviously, `fs`, `path` and \n> `crypto` (which are Node.js builtins) are not going to be available in any \n> browser.\n>\n> On Friday, September 22, 2017 at 3:50:45 PM UTC-7, Krzysztof Jurewicz \n> wrote:\n>>\n>> Hello, \n>>\n>> I want to write a simple proof-of-concept (which may eventually evolve \n>> into something more serious) GUI wallet for a cryptocurrency that I\u2019ve been \n>> writing. As desktop libraries\/languages are either not very functional or \n>> not very portable, ClojureScript plus local storage in browser as a \n>> database looks like a good choice. To make it work, I need support for \n>> Ed25519 (a public-key signature system). \n>>\n>> Fortunately, there are implementations of Ed25519 compiled to JavaScript. \n>> js-nacl is a \u201cpure-Javascript High-level API to Emscripten-compiled \n>> libsodium routines\u201d, available also as a NPM package, and post at \n>> https:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules\n>>  \n>> advertises \u201cSeamless interaction with NPM dependencies\u201d. I tried to use it, \n>> roughly in the following way: \n>>\n>> \u2488 lein new reagent-frontend ercoin-wallet \n>> \u2489 Added :npm-deps {:js-nacl \"1.2.2\"} to :cljsbuild \u21e8 :builds \u21e8 app \u21e8 \n>> :compiler in project.clj. \n>> \u248a Added [js-nacl :as nacl] to :require in core.cljs \n>>\n>> However :npm-deps seemed to be ignored. Fixed this by downgrading \n>> ClojureScript from 1.9.908 to 1.9.671 (BTW, these versions are not tagged \n>> in the Git repository), but then there are warnings: \n>>\n>> WARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module [\u2026] at [\u2026] \n>>\n>> , where modules are \u201cfs\u201d, \u201cpath\u201d and \u201ccrypto\u201d. \n>>\n>> spinningtopsofdo on IRC said that \u201cFrom a quick skim for js-nacl it looks \n>> like it's using emscripten and doing some unique module loading that Google \n>> Closure isn't aware of (\n>> https:\/\/github.com\/tonyg\/js-nacl\/blob\/master\/lib\/nacl_factory.js#L30-L39).\u201d \n>> and \u201cI think it's more the way js-nacl is using ASM \/ Emscripten and \n>> creating JavaScript Modules. :npm-deps covers the common JavaScript module \n>> patterns (e.g. CommonJs, Node, UMD) but there is still many edge cases out \n>> there\u201d. \n>>\n>> I\u2019ve tried also tweetnacl-js, but similarly there is a warning: \n>>\n>> \u201cWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module \"crypto\" at \n>> [\u2026]\u201d. \n>>\n>> What is the status of NPM interoperability then? Is it supposed to work \n>> as plug & play or does it require hacky knowledge in some cases? \n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: \u201cSeamless interaction with NPM\u201d not so seamless Thomas Heller Thu, 28 Sep 2017 11:00:12 -0700"},
{"body":"I'm not using Figwheel with Node, though that sounds like a good next step\nsince CIDER isn't picking up the NodeJS imports. \nI decided to try NodeJS since it has a lot of support around the office,\nand this is a script which should have a short startup time. So far, so\ngood.\n\nOn Mon, Sep 25, 2017 at 7:32 PM Phill Wolf <phill.w...@gmail.com> wrote:\n\n> Are you using Figwheel with Node?\n>\n> Your project sounds ambitious.  If your program must connect to MySQL,\n> perhaps you could use the real (JVM) Clojure instead with less bother.  But\n> I imagine you have your reasons for jousting with\n> ClojureScript-on-Node-with-nREPL-and-CIDER.  At any rate, it makes good\n> reading, so I look forward to the next installment.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/T_27DClDpUY\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \nJonathon McKitrick\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: MySQL on NodeJS jmckitrick Tue, 26 Sep 2017 03:29:20 -0700"},
{"body":"Thanks! Just for record, Kauren in cljsrn Slack pointed me out a very good \nsolution for this: shadow-cljs. \nThe instructions in the links below work:\nhttps:\/\/github.com\/thheller\/shadow-cljs\/wiki\/ClojureScript-for-JS-Devs\nhttps:\/\/www.youtube.com\/watch?v=BLDX5Twt2zk\n\nEm domingo, 24 de setembro de 2017 14:36:05 UTC-3, Jeaye Wilkerson escreveu:\n>\n> The best starting point is perhaps http:\/\/cljsrn.org\/ -- You can, indeed, \n> get figwheel working with React Native. This is typically done through \n> re-natal, with which lein-figwheel has specific support. The Clojurians \n> Slack, as mentioned in the previous link, is a great place to get help. \n>\n> On Sun, Sep 24, 2017 at 06:17:14AM -0700, Ricardo Mayerhofer wrote: \n> > Hi all, \n> > I've a react native application written in Javascript (with a couple of \n> JSX \n> > components), I want to migrate some application logic to ClojureScript \n> > which I find easier to work with and more productive. \n> > \n> > What's the best way to achieve this? Figwheel works great for browser \n> > development. Is there a way I save my ClojureScript code and it gets \n> > updated in my react-native app? \n> > \n> > Or is it the only way to work with NPM private modules, change code, \n> > install it, and reload in react native app? \n> > \n> > Any advice is appreciated! Thanks. \n> > \n> > -- \n> > Note that posts from new members are moderated - please be patient with \n> your first post. \n> > --- \n> > You received this message because you are subscribed to the Google \n> Groups \"ClojureScript\" group. \n> > To unsubscribe from this group and stop receiving emails from it, send \n> an email to clojurescrip...@googlegroups.com <javascript:>. \n> > To post to this group, send email to clojur...@googlegroups.com \n> <javascript:>. \n> > Visit this group at https:\/\/groups.google.com\/group\/clojurescript. \n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Poliglot react native application Ricardo Mayerhofer Mon, 25 Sep 2017 17:27:33 -0700"},
{"body":"Are you using Figwheel with Node?\n\nYour project sounds ambitious.  If your program must connect to MySQL, \nperhaps you could use the real (JVM) Clojure instead with less bother.  But \nI imagine you have your reasons for jousting with \nClojureScript-on-Node-with-nREPL-and-CIDER.  At any rate, it makes good \nreading, so I look forward to the next installment. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: MySQL on NodeJS Phill Wolf Mon, 25 Sep 2017 16:33:03 -0700"},
{"body":"So I've come to the conclusion that the REPL and CIDER do not pick up any \nof the NodeJS namespaces. I have to build the project and run it with node \ninstead. Not sure exactly why this is the case.... \nOn Monday, September 25, 2017 at 7:56:16 AM UTC-4, Jonathon McKitrick wrote:\n>\n> Update: it turns out several of the dependencies of mysql had to be \n> imported at the project level. At least, that's what I did to get past the \n> dependency errors. Now I'm stuck here:\n>\n> path.js:7\n>     throw new TypeError('Path must be a string. Received ' + \n> inspect(path));\n>     ^\n>\n> TypeError: Path must be a string. Received { '.\/support\/isBuffer.js': \n> '.\/support\/isBufferBrowser.js' }\n>     at assertPath (path.js:7:11)\n>     at Object.join (path.js:1211:7)\n>     at Deps.<anonymous> ([eval]:115:32)\n>     at emitOne (events.js:96:13)\n>     at Deps.emit (events.js:188:7)\n>     at \n> \/Users\/devmbp42\/arc\/check-templates\/node_modules\/@cljs-oss\/module-deps\/index.js:338:18\n>\n> It looks like I got past the dependency issues, but I'm not sure where to \n> go from here....\n>\n> On Monday, September 25, 2017 at 7:16:20 AM UTC-4, Jonathon McKitrick \n> wrote:\n>>\n>> Here's what I have so far:\n>>\n>> (defproject foo \"0.1.0-SNAPSHOT\"\n>>   :description \"FIXME\"\n>>   \n>>   :dependencies [[org.clojure\/clojure \"1.8.0\"]\n>>                  [org.clojure\/clojurescript \"1.9.908\"]\n>>                  [com.cemerick\/piggieback \"0.2.2\"]]\n>>\n>>   :plugins [[lein-cljsbuild \"1.1.7\"]\n>>             [lein-ancient \"0.6.12\"]]\n>>   :repl-options {:nrepl-middleware [cemerick.piggieback\/wrap-cljs-repl]}\n>>\n>>   :source-paths [\"src\"]\n>>\n>>   :cljsbuild\n>>   {:builds\n>>    [{:source-paths [\"src\"]\n>>      :compiler\n>>      {:target :nodejs\n>>       :output-to \"check_templates.js\"\n>>       :optimizations :none\n>>       :npm-deps {:mysql \"2.14.1\"}\n>>       :install-deps true\n>>       :main check-templates.core\n>>       :parallel-build true}}]})\n>>\n>> and\n>>\n>> (ns check-templates.core\n>>   (:require [cljs.nodejs :as nodejs]\n>>             #_[mysql :as sql]))\n>>\n>> (nodejs\/enable-util-print!)\n>>\n>> (defn -main [& args]\n>>   (.log js\/console \"Hello world\")\n>>   (println \"Hello world\"))\n>>\n>> (set! *main-cli-fn* -main)\n>>\n>> I run `lein cljsbuild once` and I get the node_modules directory \n>> populated with dependencies.\n>> I can run `lein repl` and then use piggieback to get to the CLJS repl. \n>> But I seem unable to get the mysql dependency imported.\n>>\n>> If I enable the `require` form to import mysql in the source file and \n>> then start the repl and require the project namespace, I get this error:\n>>\n>> events.js:160\n>>       throw er; \/\/ Unhandled 'error' event\n>>       ^\n>>\n>> Error: Can't resolve 'url' in \n>> '\/Users\/devmbp42\/arc\/check-templates\/node_modules\/mysql\/lib'\n>>     at onError \n>> (\/Users\/devmbp42\/arc\/check-templates\/node_modules\/enhanced-resolve\/lib\/Resolver.js:61:15)\n>>\n>> So it's finding the modules and attempting to load them. But I don't know \n>> enough about NodeJS to understand exactly what is broken or how to fix it.\n>>\n>>\n>> On Friday, September 22, 2017 at 1:33:07 PM UTC-4, Jonathon McKitrick \n>> wrote:\n>>>\n>>> Hi all,\n>>>\n>>> I'm slowly but surely weaseling Clojure and Clojurescript into our \n>>> company's codebase. I'm tasked with a script which will read from a MySQL \n>>> database and generate a very simple report.\n>>>\n>>> So far, I have a NodeJS REPL project up and running, but I'm not quite \n>>> sure how to get Node's MySQL library into the project and namespace. Any \n>>> thoughts?\n>>>\n>>>\n>>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: MySQL on NodeJS Jonathon McKitrick Mon, 25 Sep 2017 06:27:44 -0700"},
{"body":"Update: it turns out several of the dependencies of mysql had to be \nimported at the project level. At least, that's what I did to get past the \ndependency errors. Now I'm stuck here: \npath.js:7\n    throw new TypeError('Path must be a string. Received ' + inspect(path));\n    ^\n\nTypeError: Path must be a string. Received { '.\/support\/isBuffer.js': \n'.\/support\/isBufferBrowser.js' }\n    at assertPath (path.js:7:11)\n    at Object.join (path.js:1211:7)\n    at Deps.<anonymous> ([eval]:115:32)\n    at emitOne (events.js:96:13)\n    at Deps.emit (events.js:188:7)\n    at \n\/Users\/devmbp42\/arc\/check-templates\/node_modules\/@cljs-oss\/module-deps\/index.js:338:18\n\nIt looks like I got past the dependency issues, but I'm not sure where to \ngo from here....\n\nOn Monday, September 25, 2017 at 7:16:20 AM UTC-4, Jonathon McKitrick wrote:\n>\n> Here's what I have so far:\n>\n> (defproject foo \"0.1.0-SNAPSHOT\"\n>   :description \"FIXME\"\n>   \n>   :dependencies [[org.clojure\/clojure \"1.8.0\"]\n>                  [org.clojure\/clojurescript \"1.9.908\"]\n>                  [com.cemerick\/piggieback \"0.2.2\"]]\n>\n>   :plugins [[lein-cljsbuild \"1.1.7\"]\n>             [lein-ancient \"0.6.12\"]]\n>   :repl-options {:nrepl-middleware [cemerick.piggieback\/wrap-cljs-repl]}\n>\n>   :source-paths [\"src\"]\n>\n>   :cljsbuild\n>   {:builds\n>    [{:source-paths [\"src\"]\n>      :compiler\n>      {:target :nodejs\n>       :output-to \"check_templates.js\"\n>       :optimizations :none\n>       :npm-deps {:mysql \"2.14.1\"}\n>       :install-deps true\n>       :main check-templates.core\n>       :parallel-build true}}]})\n>\n> and\n>\n> (ns check-templates.core\n>   (:require [cljs.nodejs :as nodejs]\n>             #_[mysql :as sql]))\n>\n> (nodejs\/enable-util-print!)\n>\n> (defn -main [& args]\n>   (.log js\/console \"Hello world\")\n>   (println \"Hello world\"))\n>\n> (set! *main-cli-fn* -main)\n>\n> I run `lein cljsbuild once` and I get the node_modules directory populated \n> with dependencies.\n> I can run `lein repl` and then use piggieback to get to the CLJS repl. But \n> I seem unable to get the mysql dependency imported.\n>\n> If I enable the `require` form to import mysql in the source file and then \n> start the repl and require the project namespace, I get this error:\n>\n> events.js:160\n>       throw er; \/\/ Unhandled 'error' event\n>       ^\n>\n> Error: Can't resolve 'url' in \n> '\/Users\/devmbp42\/arc\/check-templates\/node_modules\/mysql\/lib'\n>     at onError \n> (\/Users\/devmbp42\/arc\/check-templates\/node_modules\/enhanced-resolve\/lib\/Resolver.js:61:15)\n>\n> So it's finding the modules and attempting to load them. But I don't know \n> enough about NodeJS to understand exactly what is broken or how to fix it.\n>\n>\n> On Friday, September 22, 2017 at 1:33:07 PM UTC-4, Jonathon McKitrick \n> wrote:\n>>\n>> Hi all,\n>>\n>> I'm slowly but surely weaseling Clojure and Clojurescript into our \n>> company's codebase. I'm tasked with a script which will read from a MySQL \n>> database and generate a very simple report.\n>>\n>> So far, I have a NodeJS REPL project up and running, but I'm not quite \n>> sure how to get Node's MySQL library into the project and namespace. Any \n>> thoughts?\n>>\n>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: MySQL on NodeJS Jonathon McKitrick Mon, 25 Sep 2017 04:56:41 -0700"},
{"body":"Here's what I have so far:\n\n(defproject foo \"0.1.0-SNAPSHOT\"\n  :description \"FIXME\"\n  \n  :dependencies [[org.clojure\/clojure \"1.8.0\"]\n                 [org.clojure\/clojurescript \"1.9.908\"]\n                 [com.cemerick\/piggieback \"0.2.2\"]] \n  :plugins [[lein-cljsbuild \"1.1.7\"]\n            [lein-ancient \"0.6.12\"]]\n  :repl-options {:nrepl-middleware [cemerick.piggieback\/wrap-cljs-repl]}\n\n  :source-paths [\"src\"]\n\n  :cljsbuild\n  {:builds\n   [{:source-paths [\"src\"]\n     :compiler\n     {:target :nodejs\n      :output-to \"check_templates.js\"\n      :optimizations :none\n      :npm-deps {:mysql \"2.14.1\"}\n      :install-deps true\n      :main check-templates.core\n      :parallel-build true}}]})\n\nand\n\n(ns check-templates.core\n  (:require [cljs.nodejs :as nodejs]\n            #_[mysql :as sql]))\n\n(nodejs\/enable-util-print!)\n\n(defn -main [& args]\n  (.log js\/console \"Hello world\")\n  (println \"Hello world\"))\n\n(set! *main-cli-fn* -main)\n\nI run `lein cljsbuild once` and I get the node_modules directory populated \nwith dependencies.\nI can run `lein repl` and then use piggieback to get to the CLJS repl. But \nI seem unable to get the mysql dependency imported.\n\nIf I enable the `require` form to import mysql in the source file and then \nstart the repl and require the project namespace, I get this error:\n\nevents.js:160\n      throw er; \/\/ Unhandled 'error' event\n      ^\n\nError: Can't resolve 'url' in \n'\/Users\/devmbp42\/arc\/check-templates\/node_modules\/mysql\/lib'\n    at onError \n(\/Users\/devmbp42\/arc\/check-templates\/node_modules\/enhanced-resolve\/lib\/Resolver.js:61:15)\n\nSo it's finding the modules and attempting to load them. But I don't know \nenough about NodeJS to understand exactly what is broken or how to fix it.\n\n\nOn Friday, September 22, 2017 at 1:33:07 PM UTC-4, Jonathon McKitrick wrote:\n>\n> Hi all,\n>\n> I'm slowly but surely weaseling Clojure and Clojurescript into our \n> company's codebase. I'm tasked with a script which will read from a MySQL \n> database and generate a very simple report.\n>\n> So far, I have a NodeJS REPL project up and running, but I'm not quite \n> sure how to get Node's MySQL library into the project and namespace. Any \n> thoughts?\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: MySQL on NodeJS Jonathon McKitrick Mon, 25 Sep 2017 04:17:02 -0700"},
{"body":"The best starting point is perhaps http:\/\/cljsrn.org\/ -- You can, indeed, get \nfigwheel working with React Native. This is typically done through re-natal, \nwith which lein-figwheel has specific support. The Clojurians Slack, as \nmentioned in the previous link, is a great place to get help. \nOn Sun, Sep 24, 2017 at 06:17:14AM -0700, Ricardo Mayerhofer wrote:\n> Hi all,\n> I've a react native application written in Javascript (with a couple of JSX \n> components), I want to migrate some application logic to ClojureScript \n> which I find easier to work with and more productive.\n> \n> What's the best way to achieve this? Figwheel works great for browser \n> development. Is there a way I save my ClojureScript code and it gets \n> updated in my react-native app?\n> \n> Or is it the only way to work with NPM private modules, change code, \n> install it, and reload in react native app?\n> \n> Any advice is appreciated! Thanks.\n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: PGP signature","subject":"Re: [ClojureScript] Poliglot react native application Jeaye Sun, 24 Sep 2017 10:36:23 -0700"},
{"body":"Hi all,\nI've a react native application written in Javascript (with a couple of JSX \ncomponents), I want to migrate some application logic to ClojureScript \nwhich I find easier to work with and more productive. \nWhat's the best way to achieve this? Figwheel works great for browser \ndevelopment. Is there a way I save my ClojureScript code and it gets \nupdated in my react-native app?\n\nOr is it the only way to work with NPM private modules, change code, \ninstall it, and reload in react native app?\n\nAny advice is appreciated! Thanks.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Poliglot react native application Ricardo Mayerhofer Sun, 24 Sep 2017 08:58:41 -0700"},
{"body":"You also need to pass the `:install-deps true` compiler option from 1.9.854 \nonwards. \nSome libraries are not consumable by Google Closure if they use constructs \nlike dynamic exporting and such.\n\nIn any case, it looks like your problem is even another one: you're trying \nto use a Node.js library in the browser. Obviously, `fs`, `path` and \n`crypto` (which are Node.js builtins) are not going to be available in any \nbrowser.\n\nOn Friday, September 22, 2017 at 3:50:45 PM UTC-7, Krzysztof Jurewicz wrote:\n>\n> Hello, \n>\n> I want to write a simple proof-of-concept (which may eventually evolve \n> into something more serious) GUI wallet for a cryptocurrency that I\u2019ve been \n> writing. As desktop libraries\/languages are either not very functional or \n> not very portable, ClojureScript plus local storage in browser as a \n> database looks like a good choice. To make it work, I need support for \n> Ed25519 (a public-key signature system). \n>\n> Fortunately, there are implementations of Ed25519 compiled to JavaScript. \n> js-nacl is a \u201cpure-Javascript High-level API to Emscripten-compiled \n> libsodium routines\u201d, available also as a NPM package, and post at \n> https:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules\n>  \n> advertises \u201cSeamless interaction with NPM dependencies\u201d. I tried to use it, \n> roughly in the following way: \n>\n> \u2488 lein new reagent-frontend ercoin-wallet \n> \u2489 Added :npm-deps {:js-nacl \"1.2.2\"} to :cljsbuild \u21e8 :builds \u21e8 app \u21e8 \n> :compiler in project.clj. \n> \u248a Added [js-nacl :as nacl] to :require in core.cljs \n>\n> However :npm-deps seemed to be ignored. Fixed this by downgrading \n> ClojureScript from 1.9.908 to 1.9.671 (BTW, these versions are not tagged \n> in the Git repository), but then there are warnings: \n>\n> WARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module [\u2026] at [\u2026] \n>\n> , where modules are \u201cfs\u201d, \u201cpath\u201d and \u201ccrypto\u201d. \n>\n> spinningtopsofdo on IRC said that \u201cFrom a quick skim for js-nacl it looks \n> like it's using emscripten and doing some unique module loading that Google \n> Closure isn't aware of (\n> https:\/\/github.com\/tonyg\/js-nacl\/blob\/master\/lib\/nacl_factory.js#L30-L39).\u201d \n> and \u201cI think it's more the way js-nacl is using ASM \/ Emscripten and \n> creating JavaScript Modules. :npm-deps covers the common JavaScript module \n> patterns (e.g. CommonJs, Node, UMD) but there is still many edge cases out \n> there\u201d. \n>\n> I\u2019ve tried also tweetnacl-js, but similarly there is a warning: \n>\n> \u201cWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module \"crypto\" at \n> [\u2026]\u201d. \n>\n> What is the status of NPM interoperability then? Is it supposed to work as \n> plug & play or does it require hacky knowledge in some cases? \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: \u201cSeamless interaction with NPM\u201d not so seamless Ant\u00f3nio Monteiro Sat, 23 Sep 2017 11:26:59 -0700"},
{"body":"Hello,\n\nI want to write a simple proof-of-concept (which may eventually evolve into \nsomething more serious) GUI wallet for a cryptocurrency that I\u2019ve been writing. \nAs desktop libraries\/languages are either not very functional or not very \nportable, ClojureScript plus local storage in browser as a database looks like \na good choice. To make it work, I need support for Ed25519 (a public-key \nsignature system). \nFortunately, there are implementations of Ed25519 compiled to JavaScript. \njs-nacl is a \u201cpure-Javascript High-level API to Emscripten-compiled libsodium \nroutines\u201d, available also as a NPM package, and post at \nhttps:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules\n advertises \u201cSeamless interaction with NPM dependencies\u201d. I tried to use it, \nroughly in the following way:\n\n\u2488 lein new reagent-frontend ercoin-wallet\n\u2489 Added :npm-deps {:js-nacl \"1.2.2\"} to :cljsbuild \u21e8 :builds \u21e8 app \u21e8 :compiler \nin project.clj.\n\u248a Added [js-nacl :as nacl] to :require in core.cljs\n\nHowever :npm-deps seemed to be ignored. Fixed this by downgrading ClojureScript \nfrom 1.9.908 to 1.9.671 (BTW, these versions are not tagged in the Git \nrepository), but then there are warnings:\n\nWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module [\u2026] at [\u2026]\n\n, where modules are \u201cfs\u201d, \u201cpath\u201d and \u201ccrypto\u201d.\n\nspinningtopsofdo on IRC said that \u201cFrom a quick skim for js-nacl it looks like \nit's using emscripten and doing some unique module loading that Google Closure \nisn't aware of \n(https:\/\/github.com\/tonyg\/js-nacl\/blob\/master\/lib\/nacl_factory.js#L30-L39).\u201d \nand \u201cI think it's more the way js-nacl is using ASM \/ Emscripten and creating \nJavaScript Modules. :npm-deps covers the common JavaScript module patterns \n(e.g. CommonJs, Node, UMD) but there is still many edge cases out there\u201d.\n\nI\u2019ve tried also tweetnacl-js, but similarly there is a warning:\n\n\u201cWARNING: JSC_JS_MODULE_LOAD_WARNING. Failed to load module \"crypto\" at [\u2026]\u201d.\n\nWhat is the status of NPM interoperability then? Is it supposed to work as plug \n& play or does it require hacky knowledge in some cases?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] \u201cSeamless interaction with NPM\u201d not so seamless Krzysztof Jurewicz Fri, 22 Sep 2017 15:51:06 -0700"},
{"body":"Hi all,\n\nI'm slowly but surely weaseling Clojure and Clojurescript into our \ncompany's codebase. I'm tasked with a script which will read from a MySQL \ndatabase and generate a very simple report. \nSo far, I have a NodeJS REPL project up and running, but I'm not quite sure \nhow to get Node's MySQL library into the project and namespace. Any \nthoughts?\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] MySQL on NodeJS Jonathon McKitrick Fri, 22 Sep 2017 10:33:23 -0700"},
{"body":"I was hoping that by splitting my code into modules I could emulate npm's \nvendor.js behavior - where massive dependencies like React and Material UI \ngo into a separate file and app.js goes into it's own file.  This doesn't \nhelp initial load but greatly helps subsequent loads since vendor.js is \ncached by the browser and I can update my app without resending the \nunchanged majority of the code. \nSo, I put my \"vendor\" code into one module and my app code into another. \n It does split it correctly, with 90% of the code ending up in one big \nvendor.js file and my app in another.  But the problem is, everytime I \nrebuild, the closure compiler chooses new short names for the vendor.js \nfile and so it can't be cached and makes the approach useless.\n\nIs there anyway to use advanced mode and have the closure compiler use the \nsame shortened names each time?  The vendor js file doesn't change much \nfrom build to build except a few variable names are always different.\n\nThanks.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Compilation - Modules, and npm's vendor.js behavior Scott Klarenbach Thu, 21 Sep 2017 09:23:04 -0700"},
{"body":"Moved to https:\/\/dev.clojure.org\/jira\/browse\/CLJS-2366 \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] :arglists inconsistency in cljs David Goldfarb Sun, 17 Sep 2017 23:44:06 -0700"},
{"body":"Thanks for the report! File an issue in JIRA,\nhttps:\/\/dev.clojure.org\/jira\/browse\/CLJS \nDavid\n\nOn Sun, Sep 17, 2017 at 3:51 AM, David Goldfarb <d...@degel.com> wrote:\n\n> ClojureScript does not seem to fully support setting :arglists meta-data\n> to a function. In particular, it seems to fail when the real parameter list\n> contains an '&'.\n>\n> In Clojure,\n> (:arglists (meta (defn f {:arglists '([x])} [& a] a)))\n> returns ([x]). But, in ClojureScript, it returns ([& a])\n>\n> Note that simpler forms do work correctly:\n> (:arglists (meta (defn f {:arglists '([x])} [a] a)))\n> returns ([x]) in both environments.\n>\n> (Tested in in ClojureScript 1.9.908 and Clojure 1.9.0-alpha17)\n>\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] :arglists inconsistency in cljs David Nolen Sun, 17 Sep 2017 08:29:56 -0700"},
{"body":"ClojureScript does not seem to fully support setting :arglists meta-data to \na function. In particular, it seems to fail when the real parameter list \ncontains an '&'. \nIn Clojure,\n(:arglists (meta (defn f {:arglists '([x])} [& a] a)))\nreturns ([x]). But, in ClojureScript, it returns ([& a])\n\nNote that simpler forms do work correctly: \n(:arglists (meta (defn f {:arglists '([x])} [a] a)))\nreturns ([x]) in both environments.\n\n(Tested in in ClojureScript 1.9.908 and Clojure 1.9.0-alpha17)\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] :arglists inconsistency in cljs David Goldfarb Sun, 17 Sep 2017 00:52:05 -0700"},
{"body":"oh, sorry for my unclear questions.\n\nIn my thought, the following steps might be expected when ClojureScript \ncompiler compiles core.cljs above. \n1) It meets `ns` form at line 1 in core.cljs, handles `:require-macros`, \nand it tries to load macro.cljc as Clojure code because what is required is \nmacros as the keyword `:require-macros` means\n\n2) Loading macro.cljc, as expected, it makes a namespace named 'macro' and \nregisters symbols and vars to use for compile time, not for runtime.\n\n3) At line 6 in core.cljs it meets `log` form and it tries to macro-expand \nthe `log` macro.\n\n4) It finds the `log` macro var in macro namespace which is registered just \nbefore, call the `log` macro var to expand the `log` form, and is returned \nthe expanded form which includes `now` symbol.\n\n5) At this time ClojureScript compiler starts to resolve the symbols in the \nexpanded form.\n\n6) And It meets symbol `now` and searches in all namespaces to resolve the \nsymbol to use for runtime.\n\n7) When the modified macro.cljc above is used, ClojureScript compiler can't \nresolve the symbol `now` for runtime, because the `now` function is a macro \nhelper function to be used for compile time. Hence the warning.\n\n8) But when the unmodified macro.cljc above is used, ClojureScript compiler \nemited no warning. This means ClojureScript compiler resolved the symbol \n`now` for runtime, which I thought must be registered by loading macro.cljc \nas ClojureScript code.\n\nSo, this makes me have a doubt that ClojureScript compiler load macro.cljc \ntwice, one time as ClojureScript code, next time as Clojure code.\n\n\n2017\ub144 9\uc6d4 15\uc77c \uae08\uc694\uc77c \uc624\ud6c4 9\uc2dc 40\ubd84 19\ucd08 UTC+9, David Nolen \ub2d8\uc758 \ub9d0:\n>\n> You cannot define macros in .cljs files or .cljc files you intend to load \n> as ClojureScript. So it's not clear to me what you are trying to \n> demonstrate.\n>\n> HTH,\n> David\n>\n> On Thu, Sep 14, 2017 at 4:37 AM, \ubc15\uc0c1\uaddc <psk...@gmail.com <javascript:>> \n> wrote:\n>\n>> I have wondered how clojurescript compiler processes macros.\n>> So I tested as following:\n>>\n>> I made dirs and files as below.\n>>\n>> guruma@mac cljs $ tree .\n>> .\n>> \u251c\u2500\u2500 build.clj\n>> \u251c\u2500\u2500 cljs.jar\n>> \u2514\u2500\u2500 src\n>>     \u2514\u2500\u2500 foo\n>>         \u251c\u2500\u2500 core.cljs\n>>         \u2514\u2500\u2500 macro.cljc\n>>\n>> 2 directories, 4 files\n>>\n>> I downloaded cljs.jar using curl.\n>>\n>> guruma@mac cljs $ curl -LOk \n>> https:\/\/github.com\/clojure\/clojurescript\/releases\/download\/r1.9.908\/cljs.jar\n>>\n>> And I made build.clj, core.cljs and macro.cljc as below.\n>>\n>> build.clj\n>> (require 'cljs.build.api)\n>>\n>> (cljs.build.api\/build\n>>   \".\/src\"\n>>   {:main 'core\n>>    :output-to \"out\/main.js\"})\n>>\n>> core.cljs\n>> (ns foo.core\n>>   (:require-macros [macro :refer [log]]))\n>>\n>> (enable-console-print!)\n>>\n>> (log \"hello, world\")\n>>\n>> core.cljs require macro.cljc and use a macro 'log'.\n>>\n>> macro.cljc\n>> (ns foo.macro)\n>>\n>> (defn now []\n>>   #?(:clj (System\/currentTimeMillis)\n>>      :cljs (js\/Date.now)))\n>>\n>> (defmacro log [x]\n>>   `(println \"log[\" (now) \"]: \" ~x))\n>>\n>> macro.cljc defines a macro 'log'.\n>> And there is the helper function 'now' that has read-conditionals in its \n>> body. \n>>\n>> And compile.\n>>\n>> guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj\n>> guruma@mac cljs $\n>>\n>> No error and no warning.\n>>\n>> And I modified macro.cljc as below\n>>\n>> macro.cljc  modified\n>> (ns foo.macro)\n>>\n>> #?(:clj (defn now []  ; <== modified\n>>     (System\/currentTimeMillis)))\n>>\n>> (defmacro log [x]\n>>   `(println \"log[\" (now) \"]: \" ~x))\n>>\n>> the function 'now' is in read-conditional.\n>>\n>> And compile.\n>>\n>> guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj\n>> WARNING: Use of undeclared Var foo.macro\/now at line 6 .\/src\/foo\/core.cljs\n>>\n>> Here is a warning and it is out of question because there is no \n>> definition of the function 'now' for clojurescript to be used for runtime.\n>>\n>> But what i can't understand is why there is no warning when compiling \n>> unmodified macro.cljc.\n>>\n>> My questions are:\n>>\n>> 1) Does clojurescript compiler load macro twice for :clj and :cljs in \n>> read-conditional when handling :require-macros?\n>> 2) How does clojurescript compiler resolve the symbol 'now' defined in \n>> macro.cljc?\n>>\n>> Thanks a lot in advance.\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] clojurescript compiler loads twice macro in .cljc for require-macros? \ubc15\uc0c1\uaddc Fri, 15 Sep 2017 11:27:46 -0700"},
{"body":"You cannot define macros in .cljs files or .cljc files you intend to load\nas ClojureScript. So it's not clear to me what you are trying to\ndemonstrate. \nHTH,\nDavid\n\nOn Thu, Sep 14, 2017 at 4:37 AM, \ubc15\uc0c1\uaddc <psk...@gmail.com> wrote:\n\n> I have wondered how clojurescript compiler processes macros.\n> So I tested as following:\n>\n> I made dirs and files as below.\n>\n> guruma@mac cljs $ tree .\n> .\n> \u251c\u2500\u2500 build.clj\n> \u251c\u2500\u2500 cljs.jar\n> \u2514\u2500\u2500 src\n>     \u2514\u2500\u2500 foo\n>         \u251c\u2500\u2500 core.cljs\n>         \u2514\u2500\u2500 macro.cljc\n>\n> 2 directories, 4 files\n>\n> I downloaded cljs.jar using curl.\n>\n> guruma@mac cljs $ curl -LOk https:\/\/github.com\/clojure\/\n> clojurescript\/releases\/download\/r1.9.908\/cljs.jar\n>\n> And I made build.clj, core.cljs and macro.cljc as below.\n>\n> build.clj\n> (require 'cljs.build.api)\n>\n> (cljs.build.api\/build\n>   \".\/src\"\n>   {:main 'core\n>    :output-to \"out\/main.js\"})\n>\n> core.cljs\n> (ns foo.core\n>   (:require-macros [macro :refer [log]]))\n>\n> (enable-console-print!)\n>\n> (log \"hello, world\")\n>\n> core.cljs require macro.cljc and use a macro 'log'.\n>\n> macro.cljc\n> (ns foo.macro)\n>\n> (defn now []\n>   #?(:clj (System\/currentTimeMillis)\n>      :cljs (js\/Date.now)))\n>\n> (defmacro log [x]\n>   `(println \"log[\" (now) \"]: \" ~x))\n>\n> macro.cljc defines a macro 'log'.\n> And there is the helper function 'now' that has read-conditionals in its\n> body.\n>\n> And compile.\n>\n> guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj\n> guruma@mac cljs $\n>\n> No error and no warning.\n>\n> And I modified macro.cljc as below\n>\n> macro.cljc  modified\n> (ns foo.macro)\n>\n> #?(:clj (defn now []  ; <== modified\n>     (System\/currentTimeMillis)))\n>\n> (defmacro log [x]\n>   `(println \"log[\" (now) \"]: \" ~x))\n>\n> the function 'now' is in read-conditional.\n>\n> And compile.\n>\n> guruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj\n> WARNING: Use of undeclared Var foo.macro\/now at line 6 .\/src\/foo\/core.cljs\n>\n> Here is a warning and it is out of question because there is no definition\n> of the function 'now' for clojurescript to be used for runtime.\n>\n> But what i can't understand is why there is no warning when compiling\n> unmodified macro.cljc.\n>\n> My questions are:\n>\n> 1) Does clojurescript compiler load macro twice for :clj and :cljs in\n> read-conditional when handling :require-macros?\n> 2) How does clojurescript compiler resolve the symbol 'now' defined in\n> macro.cljc?\n>\n> Thanks a lot in advance.\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] clojurescript compiler loads twice macro in .cljc for require-macros? David Nolen Fri, 15 Sep 2017 05:40:57 -0700"},
{"body":"I have wondered how clojurescript compiler processes macros.\nSo I tested as following: \nI made dirs and files as below.\n\nguruma@mac cljs $ tree .\n.\n\u251c\u2500\u2500 build.clj\n\u251c\u2500\u2500 cljs.jar\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 foo\n        \u251c\u2500\u2500 core.cljs\n        \u2514\u2500\u2500 macro.cljc\n\n2 directories, 4 files\n\nI downloaded cljs.jar using curl.\n\nguruma@mac cljs $ curl -LOk \nhttps:\/\/github.com\/clojure\/clojurescript\/releases\/download\/r1.9.908\/cljs.jar\n\nAnd I made build.clj, core.cljs and macro.cljc as below.\n\nbuild.clj\n(require 'cljs.build.api)\n\n(cljs.build.api\/build\n  \".\/src\"\n  {:main 'core\n   :output-to \"out\/main.js\"})\n\ncore.cljs\n(ns foo.core\n  (:require-macros [macro :refer [log]]))\n\n(enable-console-print!)\n\n(log \"hello, world\")\n\ncore.cljs require macro.cljc and use a macro 'log'.\n\nmacro.cljc\n(ns foo.macro)\n\n(defn now []\n  #?(:clj (System\/currentTimeMillis)\n     :cljs (js\/Date.now)))\n\n(defmacro log [x]\n  `(println \"log[\" (now) \"]: \" ~x))\n\nmacro.cljc defines a macro 'log'.\nAnd there is the helper function 'now' that has read-conditionals in its \nbody. \n\nAnd compile.\n\nguruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj\nguruma@mac cljs $\n\nNo error and no warning.\n\nAnd I modified macro.cljc as below\n\nmacro.cljc  modified\n(ns foo.macro)\n\n#?(:clj (defn now []  ; <== modified\n    (System\/currentTimeMillis)))\n\n(defmacro log [x]\n  `(println \"log[\" (now) \"]: \" ~x))\n\nthe function 'now' is in read-conditional.\n\nAnd compile.\n\nguruma@mac cljs $ java -cp cljs.jar:src clojure.main build.clj\nWARNING: Use of undeclared Var foo.macro\/now at line 6 .\/src\/foo\/core.cljs\n\nHere is a warning and it is out of question because there is no definition \nof the function 'now' for clojurescript to be used for runtime.\n\nBut what i can't understand is why there is no warning when compiling \nunmodified macro.cljc.\n\nMy questions are:\n\n1) Does clojurescript compiler load macro twice for :clj and :cljs in \nread-conditional when handling :require-macros?\n2) How does clojurescript compiler resolve the symbol 'now' defined in \nmacro.cljc?\n\nThanks a lot in advance.\n\n\n\n\n\n\n\n\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] clojurescript compiler loads twice macro in .cljc for require-macros? \ubc15\uc0c1\uaddc Thu, 14 Sep 2017 01:58:49 -0700"},
{"body":"I agree it's a little weird, but I think the resolution should be that\nthose calls throw just as they do in the JVM variant.  If they don't, it's\nprobably because it's too much of a performance hit to do so. \nOn Wed, Sep 13, 2017 at 1:57 PM Gary Trakhman <gary.trakh...@gmail.com>\nwrote:\n\n> This is specific to cljs, jvm clojure doesn't allow a nil in number ops\n> and max doesn't allow 0 args.\n>\n> In general, clojure defers to the host for number operations since those\n> often need to be fast and overhead-free, so this is showing some\n> implementation details in the emitted javascript.\n>\n> I disagree that this is a 'referential transparency' issue when doing it\n> creates the same result every time.  There's no 'references'.\n>\n> Upon inspecting, I notice that the emitted code for the apply\n> cljs.core.apply.call(null,cljs.core.max,cljs.core.PersistentVector.EMPTY)\n> returns 'undefined', where the emitted code for (max) is a bit different.\n>  \"function (){\n> return ((1) > (function (){var x__24812__auto__ = null;\n> var y__24813__auto__ = null;\n> return ((x__24812__auto__ > y__24813__auto__) ? x__24812__auto__ :\n> y__24813__auto__);\n> })());\n>\n> I think the issue here is that 'max' is implemented as a macro but not\n> when you use apply:\n>\n> https:\/\/github.com\/clojure\/clojurescript\/blob\/r1.9.908-12-g998933f\/src\/main\/clojure\/cljs\/core.cljc#L1146\n>\n> https:\/\/github.com\/clojure\/clojurescript\/blob\/998933f5090254611b46a2b86626fb17cabc994a\/src\/main\/cljs\/cljs\/core.cljs#L2649\n>\n> On Wed, Sep 13, 2017 at 1:40 PM <ferrarigiovanni...@gmail.com> wrote:\n>\n>> Hi Everyone!\n>>\n>> I recently come up against an unexpected behavior in my program written\n>> in cljs (version 1.7.145)\n>> and I verified that the same problem happen with lumo.\n>>\n>> cljs.user=> (> 1 nil)\n>> true\n>> cljs.user=> (apply max [])\n>> nil\n>> cljs.user=> (> 1 (apply max []))\n>> false\n>>\n>> This seems to be a problem of Referential Opacity and I think is due to\n>> the fact that \">\" is a macro.\n>> But I'm not sure... Can someone give me a detailed explanation of the\n>> reason? :)\n>>\n>> Thanks! :)\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Referential Transparency Gary Trakhman Wed, 13 Sep 2017 11:00:30 -0700"},
{"body":"This is specific to cljs, jvm clojure doesn't allow a nil in number ops and\nmax doesn't allow 0 args. \nIn general, clojure defers to the host for number operations since those\noften need to be fast and overhead-free, so this is showing some\nimplementation details in the emitted javascript.\n\nI disagree that this is a 'referential transparency' issue when doing it\ncreates the same result every time.  There's no 'references'.\n\nUpon inspecting, I notice that the emitted code for the apply\ncljs.core.apply.call(null,cljs.core.max,cljs.core.PersistentVector.EMPTY)\nreturns 'undefined', where the emitted code for (max) is a bit different.\n \"function (){\nreturn ((1) > (function (){var x__24812__auto__ = null;\nvar y__24813__auto__ = null;\nreturn ((x__24812__auto__ > y__24813__auto__) ? x__24812__auto__ :\ny__24813__auto__);\n})());\n\nI think the issue here is that 'max' is implemented as a macro but not when\nyou use apply:\nhttps:\/\/github.com\/clojure\/clojurescript\/blob\/r1.9.908-12-g998933f\/src\/main\/clojure\/cljs\/core.cljc#L1146\nhttps:\/\/github.com\/clojure\/clojurescript\/blob\/998933f5090254611b46a2b86626fb17cabc994a\/src\/main\/cljs\/cljs\/core.cljs#L2649\n\nOn Wed, Sep 13, 2017 at 1:40 PM <ferrarigiovanni...@gmail.com> wrote:\n\n> Hi Everyone!\n>\n> I recently come up against an unexpected behavior in my program written in\n> cljs (version 1.7.145)\n> and I verified that the same problem happen with lumo.\n>\n> cljs.user=> (> 1 nil)\n> true\n> cljs.user=> (apply max [])\n> nil\n> cljs.user=> (> 1 (apply max []))\n> false\n>\n> This seems to be a problem of Referential Opacity and I think is due to\n> the fact that \">\" is a macro.\n> But I'm not sure... Can someone give me a detailed explanation of the\n> reason? :)\n>\n> Thanks! :)\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Referential Transparency Gary Trakhman Wed, 13 Sep 2017 10:58:05 -0700"},
{"body":"Hi Everyone!\n\nI recently come up against an unexpected behavior in my program written in \ncljs (version 1.7.145)\nand I verified that the same problem happen with lumo. \ncljs.user=> (> 1 nil)\ntrue\ncljs.user=> (apply max [])\nnil\ncljs.user=> (> 1 (apply max []))\nfalse\n\nThis seems to be a problem of Referential Opacity and I think is due to the \nfact that \">\" is a macro.\nBut I'm not sure... Can someone give me a detailed explanation of the \nreason? :)\n\nThanks! :)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Referential Transparency ferrarigiovanni555 Wed, 13 Sep 2017 10:40:43 -0700"},
{"body":"Apologies for this necro- post! I'm wrapping my mind around js->clj with \nregard to callbacks,postgres, clojurescript and nodejs interop, and \nelectron. And I have found very little on the internet for this \nintersection of interests. This old post was helpful, so fwiw, with regard \nto: \n\"2. I couldn't get ((.rows result) 0) to work for result.rows[0]. \nresult.rows worked as-is in cljs but I don't understand why.\"\n\nYou have to read off rows as a property, then it works: \n(get (.-rows result) 0)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: core.async equivalent of Clojurescript\/NodeJS nested callbacks Kinley Dorji Wed, 13 Sep 2017 10:39:12 -0700"},
{"body":"Thanks for the pointers Daniel, these should come in handy as I refactor!\n\nBest,\nJakub \nOn Thursday, September 7, 2017 at 6:18:23 PM UTC-4, Daniel Compton wrote:\n>\n> Hi Jakub\n>\n> You might already know this, but rather than creating the subscriptions \n> manually, you can also use syntactic sugar to specify them as a dependency. \n> For example:\n>\n>\n> https:\/\/github.com\/Day8\/re-frame\/blob\/8555c7c5a67e94e22c968eee545b6ff2f8db63dd\/examples\/todomvc\/src\/todomvc\/subs.cljs#L135-L144\n>\n> (reg-sub\n>   :visible-todos\n>   :<- [:todos]\n>   :<- [:showing]\n>   (fn [[todos showing] _]\n>     (let [filter-fn (case showing\n>                       :active (complement :done)\n>                       :done :done\n>                       :all identity)]\n>       (filter filter-fn todos))))\n>\n> I'm not sure if I totally understood your question, and answered something \n> you weren't asking?\n>\n> Also, if you need to get into the nitty gritty of subscriptions firing and \n> seeing how long they take to run, you can look at \n> https:\/\/github.com\/Day8\/re-frame-trace. We're still working on improving \n> the developer experience for general re-frame debugging\/usage, but it's \n> perfect for your use case of trying to see exactly which subscriptions are \n> running, being created, and being destroyed.\n>\n> Hope that helps!\n>\n> Daniel.\n>\n>\n> On Fri, Sep 8, 2017 at 6:53 AM Jakub Ner <jaku...@gmail.com <javascript:>> \n> wrote:\n>\n>> I ended up just putting an empty...\n>>\n>>   (fn [_ _]\n>>     [])\n>>\n>>  ... to force the code into \"layer 3\"\/\"materialized view\" and that seems \n>> to work well: successfully decoupled recalculation of this function from \n>> every single unrelated *app-db* update and the nested *reactions*\/\n>> *subscriptions* seems to remain reactive.\n>>\n>> My new code with change in *green*:\n>>\n>> (rf\/reg-sub\n>>   :foo\n>>  * (fn [_ _]*\n>> *    [])*\n>>\n>>   (fn [_ [_ x y z] _]\n>>     (let [A @(subs\/subscribe [:l x y])\n>>           B @(subs\/subscribe [:m y z])\n>>           C @(subs\/subscribe [:n x y z])\n>>           D @(subs\/subscribe [:o])]\n>>       (into #{}\n>>             (apply concat\n>>                    (for [a A\n>>                          b B\n>>                          :let [u (first C)]\n>>                          :when @(subs\/subscribe [:p a u)]\n>>                      (for [c C\n>>                            :when (< 0 @(subs\/subscribe [:q a u c]))]\n>>                        (list a u c))))))))\n>>\n>>\n>>\n>> On Thursday, September 7, 2017 at 4:47:41 AM UTC-4, Jakub Ner wrote:\n>>>\n>>> Hello,\n>>>\n>>> I'm not sure how to even search for the question I'm about to ask...  \n>>> I'm fairly new to this and I hope I'm using the right terminology.\n>>>\n>>> I'm going through some reframe subscriptions and trying to refactor them \n>>> for performance.  My problem is that I have \"layer 2\"\/\"extraction\" \n>>> subscriptions that loop through other subscriptions and do crazy things: \n>>>  slow?\n>>>\n>>> I'm not exactly sure what to do with these.  I thought I should make \n>>> \"layer 3\"\/\"materialized view\" subscriptions out of them and have the crazy \n>>> loops \"subscribe\" in the first function (the one subscribing to other \n>>> reactions).  But maybe I'm out to lunch.\n>>>\n>>> Here is an example of the \"layer 2\"\/\"extraction\" subscription I'm \n>>> dealing with:\n>>>\n>>> (rf\/reg-sub\n>>>   :foo\n>>>   (fn [_ [_ x y z] _]\n>>>     (let [A @(subs\/subscribe [:l x y])\n>>>           B @(subs\/subscribe [:m y z])\n>>>           C @(subs\/subscribe [:n x y z])\n>>>           D @(subs\/subscribe [:o])]\n>>>       (into #{}\n>>>             (apply concat\n>>>                    (for [a A\n>>>                          b B\n>>>                          :let [u (first C)]\n>>>                          :when @(subs\/subscribe [:p a u)]\n>>>                      (for [c C\n>>>                            :when (< 0 @(subs\/subscribe [:q a u c]))]\n>>>                        (list a u c))))))))\n>>>\n>>>\n>>> Should I just make this a normal function (instead of registering a \n>>> subscription) and coerce it to be a reaction?  Would that be more efficient?\n>>>  \n>>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Day8\/Reframe Subscription Refactor Jakub Ner Thu, 07 Sep 2017 18:01:51 -0700"},
{"body":"Hi Jakub\n\nYou might already know this, but rather than creating the subscriptions\nmanually, you can also use syntactic sugar to specify them as a dependency.\nFor example: \nhttps:\/\/github.com\/Day8\/re-frame\/blob\/8555c7c5a67e94e22c968eee545b6ff2f8db63dd\/examples\/todomvc\/src\/todomvc\/subs.cljs#L135-L144\n\n(reg-sub\n  :visible-todos\n  :<- [:todos]\n  :<- [:showing]\n  (fn [[todos showing] _]\n    (let [filter-fn (case showing\n                      :active (complement :done)\n                      :done :done\n                      :all identity)]\n      (filter filter-fn todos))))\n\nI'm not sure if I totally understood your question, and answered something\nyou weren't asking?\n\nAlso, if you need to get into the nitty gritty of subscriptions firing and\nseeing how long they take to run, you can look at\nhttps:\/\/github.com\/Day8\/re-frame-trace. We're still working on improving\nthe developer experience for general re-frame debugging\/usage, but it's\nperfect for your use case of trying to see exactly which subscriptions are\nrunning, being created, and being destroyed.\n\nHope that helps!\n\nDaniel.\n\n\nOn Fri, Sep 8, 2017 at 6:53 AM Jakub Ner <jakub....@gmail.com> wrote:\n\n> I ended up just putting an empty...\n>\n>   (fn [_ _]\n>     [])\n>\n>  ... to force the code into \"layer 3\"\/\"materialized view\" and that seems\n> to work well: successfully decoupled recalculation of this function from\n> every single unrelated *app-db* update and the nested *reactions*\/\n> *subscriptions* seems to remain reactive.\n>\n> My new code with change in *green*:\n>\n> (rf\/reg-sub\n>   :foo\n>  * (fn [_ _]*\n> *    [])*\n>\n>   (fn [_ [_ x y z] _]\n>     (let [A @(subs\/subscribe [:l x y])\n>           B @(subs\/subscribe [:m y z])\n>           C @(subs\/subscribe [:n x y z])\n>           D @(subs\/subscribe [:o])]\n>       (into #{}\n>             (apply concat\n>                    (for [a A\n>                          b B\n>                          :let [u (first C)]\n>                          :when @(subs\/subscribe [:p a u)]\n>                      (for [c C\n>                            :when (< 0 @(subs\/subscribe [:q a u c]))]\n>                        (list a u c))))))))\n>\n>\n>\n> On Thursday, September 7, 2017 at 4:47:41 AM UTC-4, Jakub Ner wrote:\n>>\n>> Hello,\n>>\n>> I'm not sure how to even search for the question I'm about to ask...  I'm\n>> fairly new to this and I hope I'm using the right terminology.\n>>\n>> I'm going through some reframe subscriptions and trying to refactor them\n>> for performance.  My problem is that I have \"layer 2\"\/\"extraction\"\n>> subscriptions that loop through other subscriptions and do crazy things:\n>>  slow?\n>>\n>> I'm not exactly sure what to do with these.  I thought I should make\n>> \"layer 3\"\/\"materialized view\" subscriptions out of them and have the crazy\n>> loops \"subscribe\" in the first function (the one subscribing to other\n>> reactions).  But maybe I'm out to lunch.\n>>\n>> Here is an example of the \"layer 2\"\/\"extraction\" subscription I'm dealing\n>> with:\n>>\n>> (rf\/reg-sub\n>>   :foo\n>>   (fn [_ [_ x y z] _]\n>>     (let [A @(subs\/subscribe [:l x y])\n>>           B @(subs\/subscribe [:m y z])\n>>           C @(subs\/subscribe [:n x y z])\n>>           D @(subs\/subscribe [:o])]\n>>       (into #{}\n>>             (apply concat\n>>                    (for [a A\n>>                          b B\n>>                          :let [u (first C)]\n>>                          :when @(subs\/subscribe [:p a u)]\n>>                      (for [c C\n>>                            :when (< 0 @(subs\/subscribe [:q a u c]))]\n>>                        (list a u c))))))))\n>>\n>>\n>> Should I just make this a normal function (instead of registering a\n>> subscription) and coerce it to be a reaction?  Would that be more efficient?\n>>\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Day8\/Reframe Subscription Refactor Daniel Compton Thu, 07 Sep 2017 15:18:44 -0700"},
{"body":"I ended up just putting an empty...\n\n  (fn [_ _]\n    []) \n ... to force the code into \"layer 3\"\/\"materialized view\" and that seems to \nwork well: successfully decoupled recalculation of this function from every \nsingle unrelated *app-db* update and the nested *reactions*\/*subscriptions* \nseems \nto remain reactive.\n\nMy new code with change in *green*:\n\n(rf\/reg-sub\n  :foo\n * (fn [_ _]*\n*    [])*\n  (fn [_ [_ x y z] _]\n    (let [A @(subs\/subscribe [:l x y])\n          B @(subs\/subscribe [:m y z])\n          C @(subs\/subscribe [:n x y z])\n          D @(subs\/subscribe [:o])]\n      (into #{}\n            (apply concat\n                   (for [a A\n                         b B\n                         :let [u (first C)]\n                         :when @(subs\/subscribe [:p a u)]\n                     (for [c C\n                           :when (< 0 @(subs\/subscribe [:q a u c]))]\n                       (list a u c))))))))\n\n\n\nOn Thursday, September 7, 2017 at 4:47:41 AM UTC-4, Jakub Ner wrote:\n>\n> Hello,\n>\n> I'm not sure how to even search for the question I'm about to ask...  I'm \n> fairly new to this and I hope I'm using the right terminology.\n>\n> I'm going through some reframe subscriptions and trying to refactor them \n> for performance.  My problem is that I have \"layer 2\"\/\"extraction\" \n> subscriptions that loop through other subscriptions and do crazy things: \n>  slow?\n>\n> I'm not exactly sure what to do with these.  I thought I should make \n> \"layer 3\"\/\"materialized view\" subscriptions out of them and have the crazy \n> loops \"subscribe\" in the first function (the one subscribing to other \n> reactions).  But maybe I'm out to lunch.\n>\n> Here is an example of the \"layer 2\"\/\"extraction\" subscription I'm dealing \n> with:\n>\n> (rf\/reg-sub\n>   :foo\n>   (fn [_ [_ x y z] _]\n>     (let [A @(subs\/subscribe [:l x y])\n>           B @(subs\/subscribe [:m y z])\n>           C @(subs\/subscribe [:n x y z])\n>           D @(subs\/subscribe [:o])]\n>       (into #{}\n>             (apply concat\n>                    (for [a A\n>                          b B\n>                          :let [u (first C)]\n>                          :when @(subs\/subscribe [:p a u)]\n>                      (for [c C\n>                            :when (< 0 @(subs\/subscribe [:q a u c]))]\n>                        (list a u c))))))))\n>\n>\n> Should I just make this a normal function (instead of registering a \n> subscription) and coerce it to be a reaction?  Would that be more efficient?\n>  \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Day8\/Reframe Subscription Refactor Jakub Ner Thu, 07 Sep 2017 11:53:36 -0700"},
{"body":"For reference, if you want to compile ClojureScript into CommonJS code and \nbundle it with Webpack, check this \nout \nhttps:\/\/hashnode.com\/post\/early-stage-live-coding-clojurescript-with-webpack-cj2w4lsiv006ul7k8rcp9bqvd \nOn Friday, May 20, 2016 at 1:04:21 AM UTC+8, Jiyin Yiyong wrote:\n>\n> Searched and read some pages on this topic,\n> https:\/\/github.com\/clojure\/clojurescript\/wiki\/Google-Summer-of-Code-2015\n> https:\/\/github.com\/clojure\/clojurescript\/wiki\/Compiler-Options#foreign-libs\n> as a Webpack user I used them quite open. How about CommonJS support now?\n>\n> * Can I require commonjs file?\n> * Can I use commonjs packages?\n> * ES6 is starting to taking over the JavaScript world, does cljs compiler \n> recognise import and export?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How about ClojureScript and CommonJS now? Jiyin Yiyong Fri, 01 Sep 2017 10:15:21 -0700"},
{"body":"You are right to ask yourself. Think about passing real code and not EDN\ndata to another process, if you switch the readers you can have bad\nsurprises, some have passed some time on this very problem ;) \n2017-08-23 19:39 GMT+02:00 Alan Moore <kahunamo...@coopsource.org>:\n\n> Ivan,\n>\n> Thanks for the detailed explanation. Clearly I was off the mark re eval. I\n> guess it was my knee-jerk reaction from my (different) frustrations with\n> the lack of eval. My bad.\n>\n> Alan\n>\n>\n> On Aug 23, 2017, at 10:18 AM, Ivan Pierre <kilroys...@gmail.com> wrote:\n>\n> It's clear that edn reader will not apply macro substitutions. But this is\n> made in eval function.\n> Character macros are in the reader (){}[], these are managed by edn as a\n> standard. But ' (quote) is the injection of a special form that has a\n> functional meaning in the evaluation, no0t on the reading. So edn reader\n> doesn't have it, as we wish to have data, not code.\n> I think it's a bad call on the cljs version of read-string that read\n> edn and not s-expressions... to be seen in code. I think the solution will\n> be obvious.\n> You also get some weird problems with backquote and splice on Clojure,\n> when you make some nesting you get some exploding representations caused by\n> the way toString() don't use a real inverse function of read for `, ~, and\n> ~@, not tested on ClojureScript. ;)\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/\n> topic\/clojurescript\/R6waOGeuxBU\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/\n> topic\/clojurescript\/R6waOGeuxBU\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Differences in read-string with quoted forms Ivan Pierre Fri, 25 Aug 2017 14:37:45 -0700"},
{"body":"Thanks Moe for the code reviews and prompt feedback!\n\nThis is a good moment to also re-share Antonio's blog post with the \ncompiler \nlimitations: \nhttps:\/\/anmonteiro.com\/2017\/02\/compiling-clojurescript-projects-without-the-jvm\/\nAdditionally there is a :source-map bug that needs \nattention: https:\/\/github.com\/anmonteiro\/lumo\/issues\/132 \nSo early days, but simple lambdas (as they should be) compile and run fine.\n\n \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] Lumo support in serverless-cljs-plugin Andrea Richiardi Thu, 24 Aug 2017 06:54:45 -0700"},
{"body":"Thanks in large part to the initiative of Andrea Richiardi,\nserverless-cljs-plugin\n<https:\/\/github.com\/nervous-systems\/serverless-cljs-plugin> 0.2.0 now\noptionally supports compilation with Lumo, in addition to the existing JVM\nsupport.  The Serverless <https:\/\/serverless.com\/> plugin allows\nClojurescript to be packaged and repeatably deployed to AWS Lambda, among\nother platforms. \nThere is not currently a companion runtime library for non-JVM builds, as\ncljs-lambda is presently Lumo-incompatible.  That said, it's a simple\nlibrary, and a Lumo-friendly alternative is in the pipeline.\nSee lumo-example\n<https:\/\/github.com\/nervous-systems\/serverless-cljs-plugin\/tree\/master\/lumo-example>\nfor\na minimal working example.\n\nTake care,\nMoe\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Lumo support in serverless-cljs-plugin Moe Aboulkheir Thu, 24 Aug 2017 05:14:21 -0700"},
{"body":"Ivan,\n\nThanks for the detailed explanation. Clearly I was off the mark re eval. I\nguess it was my knee-jerk reaction from my (different) frustrations with\nthe lack of eval. My bad. \nAlan\n\n\nOn Aug 23, 2017, at 10:18 AM, Ivan Pierre <kilroys...@gmail.com> wrote:\n\nIt's clear that edn reader will not apply macro substitutions. But this is\nmade in eval function.\nCharacter macros are in the reader (){}[], these are managed by edn as a\nstandard. But ' (quote) is the injection of a special form that has a\nfunctional meaning in the evaluation, no0t on the reading. So edn reader\ndoesn't have it, as we wish to have data, not code.\nI think it's a bad call on the cljs version of read-string that read\nedn and not s-expressions... to be seen in code. I think the solution will\nbe obvious.\nYou also get some weird problems with backquote and splice on Clojure, when\nyou make some nesting you get some exploding representations caused by the\nway toString() don't use a real inverse function of read for `, ~, and ~@,\nnot tested on ClojureScript. ;)\n\n-- \nNote that posts from new members are moderated - please be patient with\nyour first post.\n---\nYou received this message because you are subscribed to a topic in the\nGoogle Groups \"ClojureScript\" group.\nTo unsubscribe from this topic, visit\nhttps:\/\/groups.google.com\/d\/topic\/clojurescript\/R6waOGeuxBU\/unsubscribe.\nTo unsubscribe from this group and all its topics, send an email to\nclojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Differences in read-string with quoted forms Alan Moore Wed, 23 Aug 2017 10:39:53 -0700"},
{"body":"It's clear that edn reader will not apply macro substitutions. But this is \nmade in eval function.\nCharacter macros are in the reader (){}[], these are managed by edn as a \nstandard. But ' (quote) is the injection of a special form that has a \nfunctional meaning in the evaluation, no0t on the reading. So edn reader \ndoesn't have it, as we wish to have data, not code.\nI think it's a bad call on the cljs version of read-string that read \nedn and not s-expressions... to be seen in code. I think the solution will \nbe obvious.\nYou also get some weird problems with backquote and splice on Clojure, when \nyou make some nesting you get some exploding representations caused by the \nway toString() don't use a real inverse function of read for `, ~, and ~@, \nnot tested on ClojureScript. ;) \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Differences in read-string with quoted forms Ivan Pierre Wed, 23 Aug 2017 10:18:45 -0700"},
{"body":"Dustin,\n\nI think the biggest restriction is the lack of the special form eval in the \nClojureScript runtime (unless you are using a self hosted version?) so anything \nthat could result in reading such a form is not supported. \nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Differences in read-string with quoted forms Alan Moore Tue, 22 Aug 2017 09:45:30 -0700"},
{"body":"Ahh - that makes sense now. Still a little weird, but consistent I guess\n\nThanks! \nOn Saturday, August 19, 2017 at 12:19:18 AM UTC-7, Avi Avicenna wrote:\n>\n> clojurescript's cljs.reader\/read-string expects the input string in edn \n> format\n>\n> (doc cljs.reader\/read-string)\n> =>\n> -------------------------\n> cljs.reader\/read-string\n> ([s] [opts s])\n>   Reads one object from the string s.\n>    Returns nil when s is nil or empty.\n>\n>    Reads data in the edn format (subset of Clojure data):\n>    http:\/\/edn-format.org\n>\n>    opts is a map as per cljs.tools.reader.edn\/read\n>\n>\n> the cljs.reader\/read-string equivalent in clojure is in clojure.edn \n> namespace. \n> clojure.edn\/read-string returns the same output\n>\n> (clojure.edn\/read-string \"'(foo 42)\")\n> => '\n>\n> (cljs.reader\/read-string \"'(foo 42)\")\n> => '\n>\n> the top level structure beginning with ' is not specified in edn format, \n> so maybe that's why the result is kinda weird.\n>\n> Yours,\n> Avi\n>\n> On Friday, 18 August 2017 04:21:59 UTC+7, mbosse...@netflix.com wrote:\n>>\n>> I'm new to ClojureScript, but I didn't find this difference from Clojure \n>> noted anywhere. Is this expected?\n>>\n>> In Clojure (expected):\n>>\n>> (clojure.core\/read-string \"'(foo 42)\")\n>> => (quote (foo 42))\n>>\n>> In ClojureScript:\n>>\n>> (cljs.reader\/read-string \"'(foo 42)\")\n>> => '\n>>\n>> If I do the long form quote it works fine:\n>>\n>> (cljs.reader\/read-string \"(quote (foo 42))\")\n>> => (quote (foo 42))\n>>\n>> But it appears that it's just reading the quote as a symbol in cljs:\n>>\n>> (type (cljs.reader\/read-string \"'(foo 42)\"))\n>> => cljs.core\/Symbol\n>>\n>> Thanks,\n>> Matt\n>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Differences in read-string with quoted forms mbossenbroek via ClojureScript Mon, 21 Aug 2017 09:19:47 -0700"},
{"body":"what is the right way to read an entire string with many cljs forms\n(including maybe a ns form) at runtime? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Differences in read-string with quoted forms Dustin Getz Sat, 19 Aug 2017 06:33:30 -0700"},
{"body":"clojurescript's cljs.reader\/read-string expects the input string in edn \nformat \n(doc cljs.reader\/read-string)\n=>\n-------------------------\ncljs.reader\/read-string\n([s] [opts s])\n  Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http:\/\/edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn\/read\n\n\nthe cljs.reader\/read-string equivalent in clojure is in clojure.edn \nnamespace. \nclojure.edn\/read-string returns the same output\n\n(clojure.edn\/read-string \"'(foo 42)\")\n=> '\n\n(cljs.reader\/read-string \"'(foo 42)\")\n=> '\n\nthe top level structure beginning with ' is not specified in edn format, so \nmaybe that's why the result is kinda weird.\n\nYours,\nAvi\n\nOn Friday, 18 August 2017 04:21:59 UTC+7, mbosse...@netflix.com wrote:\n>\n> I'm new to ClojureScript, but I didn't find this difference from Clojure \n> noted anywhere. Is this expected?\n>\n> In Clojure (expected):\n>\n> (clojure.core\/read-string \"'(foo 42)\")\n> => (quote (foo 42))\n>\n> In ClojureScript:\n>\n> (cljs.reader\/read-string \"'(foo 42)\")\n> => '\n>\n> If I do the long form quote it works fine:\n>\n> (cljs.reader\/read-string \"(quote (foo 42))\")\n> => (quote (foo 42))\n>\n> But it appears that it's just reading the quote as a symbol in cljs:\n>\n> (type (cljs.reader\/read-string \"'(foo 42)\"))\n> => cljs.core\/Symbol\n>\n> Thanks,\n> Matt\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Differences in read-string with quoted forms Avi Avicenna Sat, 19 Aug 2017 00:20:06 -0700"},
{"body":"I'm new to ClojureScript, but I didn't find this difference from Clojure \nnoted anywhere. Is this expected? \nIn Clojure (expected):\n\n(clojure.core\/read-string \"'(foo 42)\")\n=> (quote (foo 42))\n\nIn ClojureScript:\n\n(cljs.reader\/read-string \"'(foo 42)\")\n=> '\n\nIf I do the long form quote it works fine:\n\n(cljs.reader\/read-string \"(quote (foo 42))\")\n=> (quote (foo 42))\n\nBut it appears that it's just reading the quote as a symbol in cljs:\n\n(type (cljs.reader\/read-string \"'(foo 42)\"))\n=> cljs.core\/Symbol\n\nThanks,\nMatt\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Differences in read-string with quoted forms mbossenbroek via ClojureScript Thu, 17 Aug 2017 14:22:39 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.908\"]\n\nThis release includes a number of bug fixes and changes based on feedback\nfrom the 1.9.854 release. For high level details please refer to the\nannouncement on the official site\nhttps:\/\/clojurescript.org\/news\/2017-08-16-release\n\nAs always feedback welcome!\n\n## 1.9.908\n\n### Enhancements\n* CLJS-2323: data readers support for records\n\n### Changes\n* CLJS-2322: Require only `@cljs-oss\/module-deps` to be installed to figure\nout Node.js dep graph\n* CLJS-2321: Do not automatically call `set-loaded!` on the user's behalf\n* CLJS-2316: Upgrade Closure Compiler to August release\n* CLJS-2317: Upgrade Google Closure Library\n* CLJS-2234: Make build scripts optionally less verbose\n* CLJS-2314: Eliminate str call on literal strings in str macro\n* CLJS-2291: Set up Windows CI\n* CLJS-2286: Simplify JS module processing\n\n### Fixes\n* CLJS-2324: module-graph doesn't munge :requires when indexing inputs\n* CLJS-2309: :module foreign-libs order not preserved\n* CLJS-2318: module-deps.js doesn't respect the package.json `module` field\n* CLJS-2312: Miss-compile: Uncaught SyntaxError: Unexpected token default\n* CLJS-2315: module_deps.js can't resolve JSON modules\n* CLJS-2313: :language-out is a build affecting option\n* CLJS-2306: Provide better warning message when namespace can't be found\n* CLJS-2303: Disable duplicate alias checking for self-host\n* CLJS-2307: Closure warns on unreachable checked array code\n* CLJS-2305 Tests: Unable to resolve symbol: opts in this context\n* CLJS-2299: Failure with alias and bad require of clojure.spec\n* CLJS-2302: Disable process-shim by default in Node.js targets\n* CLJS-2266: Self-host: Cannot require clojure.x where clojure.x has no\nmacros namespace\n* CLJS-2304: Fix compiler infrastructure tests on Windows\n* CLJS-2261: Issue using interop record constructors in macros namespaces\n* CLJS-2296: Foreign libs that expose modules are not being processed under\ntarget nod\n* CLJS-2293: Self-host: Can't load cljs.js owing to set alias\n* CLJS-2295: `index-node-modules-dir` can't determine :main for\npackage.json files that have `.` in the string\n* CLJS-1620: In JavaScript ES2015 modules default export name is munged to\ndefault$\n* CLJS-2287: Self-host: `require` prints result of loading node deps \/\nglobal exports\n* CLJS-2290: Node packages using require('assert') fail compilation\n* CLJS-2281: module_deps.js cannot compute inputs for ES6 sources\n* CLJS-2284: Fix build API tests not to pollute `out` in the current\ndirectory\n* CLJS-2282: Some valid keywords are strings in JS object literals\n* CLJS-2283: Regression with js-obj and gobject alias?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.908 David Nolen Wed, 16 Aug 2017 15:25:41 -0700"},
{"body":"After leaving ClojureScript for a while and coming back, I was wondering if \nthere is now something like Jest based snapshot testing for ClojureScript ? \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Is there something like Jest snapshot testing for ClojureScript ? 'Roger Gilliar' via ClojureScript Sun, 13 Aug 2017 07:15:08 -0700"},
{"body":"Hello. I don't know why it worked on figwheel since map returns a lazy seq \nof things. \nThe function you used later is correct, as you want a string. \n\nYou can use\n(reduce str (map subst_ s))\nor\n(apply str (map subst_ s))\nThey will work too.\n\nSaludos!\n\nEl lunes, 7 de agosto de 2017, 16:39:29 (UTC-5), francis....@gmail.com \nescribi\u00f3:\n>\n> I just posted to github my first clojurescript application:\n> https:\/\/github.com\/francisstephan\/farsiscript\n> It is a very simple application, translating latin characters to arabic \/ \n> farsi characters, using reagent.\n> In my first version, the translation was performed as follows:\n> (map  subst_ s)\n>\n> where s is the original string (latin characters) and subst_ substitutes \n> farsi characters to latin characters.\n> While developing using figwheel, this seemed to work.\n> But when I packaged the app for deployment, what I got was no longer an \n> arabic\/farsi string (where most characters connect to their left with the \n> following character), but a sequence of unconnected arabic characters.\n> This prompted me to change my code to:\n> (reduce str \"\" (map  subst_ s))\n>\n> which works fine both in figwheel and in deployment version.\n> Why this difference of behavior between figwheel and deployment version in \n> the first instance ?\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: clojurescript string manipulation Jose Figueroa Martinez Tue, 08 Aug 2017 09:31:23 -0700"},
{"body":"Hello. I don't know why it worked on figwheel since map returns a lazy seq \nof things. \nThe function you used later is correct, as you want a string. \n\nYou can use\n(reduce str (map subst_ s))\nor\n(apply str (map subt_))\nThey will work too.\n\nSaludos!\n\n\n\nEl lunes, 7 de agosto de 2017, 16:39:29 (UTC-5), francis....@gmail.com \nescribi\u00f3:\n>\n> I just posted to github my first clojurescript application:\n> https:\/\/github.com\/francisstephan\/farsiscript\n> It is a very simple application, translating latin characters to arabic \/ \n> farsi characters, using reagent.\n> In my first version, the translation was performed as follows:\n> (map  subst_ s)\n>\n> where s is the original string (latin characters) and subst_ substitutes \n> farsi characters to latin characters.\n> While developing using figwheel, this seemed to work.\n> But when I packaged the app for deployment, what I got was no longer an \n> arabic\/farsi string (where most characters connect to their left with the \n> following character), but a sequence of unconnected arabic characters.\n> This prompted me to change my code to:\n> (reduce str \"\" (map  subst_ s))\n>\n> which works fine both in figwheel and in deployment version.\n> Why this difference of behavior between figwheel and deployment version in \n> the first instance ?\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: clojurescript string manipulation Jose Figueroa Martinez Tue, 08 Aug 2017 09:29:42 -0700"},
{"body":"I just posted to github my first clojurescript application:\nhttps:\/\/github.com\/francisstephan\/farsiscript\nIt is a very simple application, translating latin characters to arabic \/ \nfarsi characters, using reagent.\nIn my first version, the translation was performed as follows:\n(map  subst_ s) \nwhere s is the original string (latin characters) and subst_ substitutes \nfarsi characters to latin characters.\nWhile developing using figwheel, this seemed to work.\nBut when I packaged the app for deployment, what I got was no longer an \narabic\/farsi string (where most characters connect to their left with the \nfollowing character), but a sequence of unconnected arabic characters.\nThis prompted me to change my code to:\n(reduce str \"\" (map  subst_ s))\n\nwhich works fine both in figwheel and in deployment version.\nWhy this difference of behavior between figwheel and deployment version in \nthe first instance ?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] clojurescript string manipulation francis . stephan09 Mon, 07 Aug 2017 14:39:47 -0700"},
{"body":"Thank you, Alex. That makes total sense now. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How is Clojure loaded by java from cljs.jar? Jay Martin Sun, 06 Aug 2017 09:02:53 -0700"},
{"body":"cljs.jar is self-contained (includes its dependencies) and includes Clojure \nitself (including clojure.main). \nThe cljs.jar is built using this script:\n\nhttps:\/\/github.com\/clojure\/clojurescript\/blob\/master\/script\/build\n\nYou can walk through that process to learn more if needed.\n\n\nOn Saturday, August 5, 2017 at 12:15:31 PM UTC-5, Jay Martin wrote:\n>\n> In the \"ClojureScript Compiler\" section of the ClojureScript Quick Start \n> Guide <https:\/\/clojurescript.org\/guides\/quick-start>, we run the build \n> script with the java command:\n>\n> java -cp cljs.jar:src clojure.main build.clj\n>\n>\n> This command starts a JVM and loads the cljs.jar file and all of the \n> contents of the 'src' directory, to the JVM Classpath.\n>\n> According to the man page for the java program, clojure.main is a class \n> file, (I'm assuming this one \n> <https:\/\/www.google.com\/url?q=https%3A%2F%2Fgithub.com%2Fclojure%2Fclojure%2Fblob%2Fmaster%2Fsrc%2Fjvm%2Fclojure%2Fmain.java&sa=D&sntz=1&usg=AFQjCNGvBUQ46skdR5RrGZG1INZmSOpElw>)\n>  \n> and build.clj is its argument.\n>\n> My question is: *How is the clojure.main class getting loaded to the \n> classpath?*\n>\n> Obviously clojure.main is part of Clojure. By unzipping the cljs.jar, I \n> see that it has a project.clj file with the following contents:\n>\n> (defproject org.clojure\/clojurescript \"0.0-SNAPSHOT\"\n>   :description \"ClojureScript compiler and core runtime library\"\n>   :parent [org.clojure\/pom.contrib \"0.1.2\"]\n>   :url \"https:\/\/github.com\/clojure\/clojurescript\";\n>   :license {:name \"Eclipse Public License\"\n>             :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n>   :jvm-opts ^:replace [\"-Dclojure.compiler.direct-linking=true\" \"-Xmx512m\" \n> \"-server\"]\n>   :source-paths [\"src\/main\/clojure\" \"src\/main\/cljs\"]\n>   :resource-paths [\"src\/main\/cljs\"]\n>   :test-paths [\"src\/test\/clojure\" \"src\/test\/cljs\" \"src\/test\/self\" \n> \"src\/test\/cljs_cp\"]\n>   :dependencies [[org.clojure\/clojure \"1.8.0\"]\n>                  [org.clojure\/data.json \"0.2.6\"]\n>                  [org.clojure\/tools.reader \"1.0.3\"]\n>                  [org.clojure\/test.check \"0.10.0-alpha2\" :scope \"test\"]\n>                  [com.cognitect\/transit-clj \"0.8.300\"]\n>                  [org.clojure\/google-closure-library \n> \"0.0-20170519-fa0499ef\"]\n>                  [com.google.javascript\/closure-compiler-unshaded \n> \"v20170626\"]\n>                  [org.mozilla\/rhino \"1.7R5\"]]\n>   :profiles {:1.6 {:dependencies [[org.clojure\/clojure \"1.6.0\"]]}\n>              :uberjar {:aot :all :main clojure.main}}\n>   :aliases {\"test-all\" [\"with-profile\" \"test,1.5:test,1.6\" \"test\"]\n>             \"check-all\" [\"with-profile\" \"1.5:1.6\" \"check\"]}\n>   :min-lein-version \"2.0.0\")\n>\n>\n> [org.clojure\/clojure \"1.8.0\"] is listed as a dependency. Is this how \n> Clojure is getting loaded to the JVM Classpath?\n>\n> If so, how is this happening? It doesn't seem like the java program would \n> be smart enough to parse a project.clj file. \n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How is Clojure loaded by java from cljs.jar? Alex Miller Sat, 05 Aug 2017 18:15:55 -0700"},
{"body":"In the \"ClojureScript Compiler\" section of the ClojureScript Quick Start \nGuide <https:\/\/clojurescript.org\/guides\/quick-start>, we run the build \nscript with the java command: \njava -cp cljs.jar:src clojure.main build.clj\n\n\nThis command starts a JVM and loads the cljs.jar file and all of the \ncontents of the 'src' directory, to the JVM Classpath.\n\nAccording to the man page for the java program, clojure.main is a class \nfile, (I'm assuming this one \n<https:\/\/github.com\/clojure\/clojure\/blob\/master\/src\/jvm\/clojure\/main.java>) \nand build.clj is its argument.\n\nMy question is: *How is the clojure.main class getting loaded to the \nclasspath?*\n\nObviously clojure.main is part of Clojure. By unzipping the cljs.jar, I see \nthat it has a project.clj file with the following contents:\n\n(defproject org.clojure\/clojurescript \"0.0-SNAPSHOT\"\n  :description \"ClojureScript compiler and core runtime library\"\n  :parent [org.clojure\/pom.contrib \"0.1.2\"]\n  :url \"https:\/\/github.com\/clojure\/clojurescript\";\n  :license {:name \"Eclipse Public License\"\n            :url \"http:\/\/www.eclipse.org\/legal\/epl-v10.html\"}\n  :jvm-opts ^:replace [\"-Dclojure.compiler.direct-linking=true\" \"-Xmx512m\" \n\"-server\"]\n  :source-paths [\"src\/main\/clojure\" \"src\/main\/cljs\"]\n  :resource-paths [\"src\/main\/cljs\"]\n  :test-paths [\"src\/test\/clojure\" \"src\/test\/cljs\" \"src\/test\/self\" \n\"src\/test\/cljs_cp\"]\n  :dependencies [[org.clojure\/clojure \"1.8.0\"]\n                 [org.clojure\/data.json \"0.2.6\"]\n                 [org.clojure\/tools.reader \"1.0.3\"]\n                 [org.clojure\/test.check \"0.10.0-alpha2\" :scope \"test\"]\n                 [com.cognitect\/transit-clj \"0.8.300\"]\n                 [org.clojure\/google-closure-library \n\"0.0-20170519-fa0499ef\"]\n                 [com.google.javascript\/closure-compiler-unshaded \n\"v20170626\"]\n                 [org.mozilla\/rhino \"1.7R5\"]]\n  :profiles {:1.6 {:dependencies [[org.clojure\/clojure \"1.6.0\"]]}\n             :uberjar {:aot :all :main clojure.main}}\n  :aliases {\"test-all\" [\"with-profile\" \"test,1.5:test,1.6\" \"test\"]\n            \"check-all\" [\"with-profile\" \"1.5:1.6\" \"check\"]}\n  :min-lein-version \"2.0.0\")\n\n\n[org.clojure\/clojure \"1.8.0\"] is listed as a dependency. Is this how \nClojure is getting loaded to the JVM Classpath?\n\nIf so, how is this happening? It doesn't seem like the java program would \nbe smart enough to parse a project.clj file. \n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How is Clojure loaded by java from cljs.jar? Jay Martin Sat, 05 Aug 2017 10:16:00 -0700"},
{"body":"jQuery includes CSS-like dom selection syntax. There are many ClojureScript \nlibs which do this too, some of which are here \n<http:\/\/www.lispcast.com\/cljs-dom-manipulation>:, along with their relative \ntradeoffs. \nYou might get more replies by going through the exercise of doing an \ninitial translation yourself and then asking for feedback. And also by \nexplaining why you're interested in such a translation. E.g., are you \nshopping for elegant syntax in your next language of choice? If so, I'd \nrecommend researching Lisp macros, because Clojure\/Script is a Lisp and \nprovides elegant meta-programming facilities via its (initially) funny \nlooking syntax, which is in fact very consistent within itself, much like \nlegos are consistent in the way they snap together and compose. This is its \nsuperpower, a point which may get lost in a superficial comparison of \nsyntax aesthetics.\n\nHere's a resource <https:\/\/lambdaisland.com\/episodes\/clojurescript-interop> \nto help with learning JavaScript interop via ClojureScript.\n\nIt might be a more reasonable comparison to first translate your jQuery \ncode into JavaScript, and only then translate the JavaScript into \nClojreScript, because JavaScript is the lingua franca between them. Let me \nknow if you bump into any difficulties.\n\n \n\nOn Thursday, August 3, 2017 at 5:25:33 PM UTC-4, zbm wrote:\n>\n> Jquery to get the table td values\n>\n> $('#table1 tbody > tr').each(function() {\n>  name = $(this).find('td.name').text();\n>  id = $(this).find('td.id').text();\n> }\n>\n> What will be clojurescript equivalent of the above jquery?\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Clojurescript equivalent for JS to access table rows Jay Martin Sat, 05 Aug 2017 09:37:28 -0700"},
{"body":"Jquery to get the table td values\n\n$('#table1 tbody > tr').each(function() {\n name = $(this).find('td.name').text();\n id = $(this).find('td.id').text();\n} \nWhat will be clojurescript equivalent of the above jquery?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojurescript equivalent for JS to access table rows Zainil Maredia Thu, 03 Aug 2017 14:26:04 -0700"},
{"body":"Hi Rob,\n\nI'll follow up with you about this to your message on the Cursive list,\nsince it's getting pretty Cursive specific. \nCheers,\nColin\n\nOn 4 August 2017 at 00:25, Rob Nikander <rob.nikan...@gmail.com> wrote:\n\n> I got this working, but I'm seeing very strange behavior that makes it\n> unusable. IntelliJ can hang and overuse CPU on certain expressions. It will\n> happen, for example, if I type the following in the IntelliJ Cursive REPL\n> connected to Figwheel\/ClojureScript...\n>\n> cljs.user=> (deftype Foo [a])\n> cljs.user=> (def foo (-> Foo 123))  ; so far everything is normal\n> cljs.user=> (.-a foo)   ; oh it does not like this.\n>\n> It's hard to finish tying that last line. It's as if it's trying to parse\n> it before I'm done (maybe for auto completion?) and choking. Once I type\n> \"(.-a\" the CPU starts to go and IntelliJ responds to keypresses only after\n> huge delays.\n>\n> Rob\n>\n> On Monday, July 31, 2017 at 10:42:11 PM UTC-4, Colin Fleming wrote:\n>>\n>> Hi Rob,\n>>\n>> So using Maven, those instructions should work pretty much as-is, since\n>> the clojure.main style REPL it uses just uses the classpath from IntelliJ,\n>> it doesn't use lein for anything fancy. The only part which I don't know\n>> about is compiling ClojureScript from Maven - I actually didn't even know\n>> that was possible. But the rest of it should work as described in that doc,\n>> you'll just have to translate things like :source-paths to the Maven\n>> equivalent which should be straightforward.\n>>\n>> Cheers,\n>> Colin\n>>\n>> On 1 August 2017 at 11:23, Rob Nikander <rob.ni...@gmail.com> wrote:\n>>\n>>> Okay, thanks, I will try figwheel. I'm using Maven not Leiningen so I'll\n>>> need to find time later to translate those instructions. On my test project\n>>> here I could use Leiningen, but on another, Maven is entrenched.\n>>>\n>>> On Monday, July 31, 2017 at 6:16:30 PM UTC-4, Colin Fleming wrote:\n>>>>\n>>>> In fact, Figwheel has a page dedicated to Cursive:\n>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/wiki\/Runni\n>>>> ng-figwheel-in-a-Cursive-Clojure-REPL. I agree that if you're doing\n>>>> browser development, you almost certainly want to be using figwheel.\n>>>>\n>>>> On 1 August 2017 at 02:58, Ikuru Kanuma <kanu...@gmail.com> wrote:\n>>>>\n>>>>> Hi Rob,\n>>>>>\n>>>>> Perhaps following this README will help?\n>>>>> It should work as long as you have a working repl + can add this as a\n>>>>> dependency.\n>>>>> Figwheel will give you hot code reloading + a cljs repl + lot of other\n>>>>> goodies and is really popular.\n>>>>>\n>>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/tree\/master\/sidecar\n>>>>>\n>>>>> Ikuru\n>>>>>\n>>>>> --\n>>>>> Note that posts from new members are moderated - please be patient\n>>>>> with your first post.\n>>>>> ---\n>>>>> You received this message because you are subscribed to the Google\n>>>>> Groups \"ClojureScript\" group.\n>>>>> To unsubscribe from this group and stop receiving emails from it, send\n>>>>> an email to clojurescrip...@googlegroups.com.\n>>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>>\n>>>>\n>>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: REPL setup help Colin Fleming Thu, 03 Aug 2017 13:12:07 -0700"},
{"body":"I got this working, but I'm seeing very strange behavior that makes it \nunusable. IntelliJ can hang and overuse CPU on certain expressions. It will \nhappen, for example, if I type the following in the IntelliJ Cursive REPL \nconnected to Figwheel\/ClojureScript... \ncljs.user=> (deftype Foo [a])   \ncljs.user=> (def foo (-> Foo 123))  ; so far everything is normal\ncljs.user=> (.-a foo)   ; oh it does not like this.\n\nIt's hard to finish tying that last line. It's as if it's trying to parse \nit before I'm done (maybe for auto completion?) and choking. Once I type \n\"(.-a\" the CPU starts to go and IntelliJ responds to keypresses only after \nhuge delays.\n\nRob\n\nOn Monday, July 31, 2017 at 10:42:11 PM UTC-4, Colin Fleming wrote:\n>\n> Hi Rob,\n>\n> So using Maven, those instructions should work pretty much as-is, since \n> the clojure.main style REPL it uses just uses the classpath from IntelliJ, \n> it doesn't use lein for anything fancy. The only part which I don't know \n> about is compiling ClojureScript from Maven - I actually didn't even know \n> that was possible. But the rest of it should work as described in that doc, \n> you'll just have to translate things like :source-paths to the Maven \n> equivalent which should be straightforward.\n>\n> Cheers,\n> Colin\n>\n> On 1 August 2017 at 11:23, Rob Nikander <rob.ni...@gmail.com <javascript:>\n> > wrote:\n>\n>> Okay, thanks, I will try figwheel. I'm using Maven not Leiningen so I'll \n>> need to find time later to translate those instructions. On my test project \n>> here I could use Leiningen, but on another, Maven is entrenched.\n>>\n>> On Monday, July 31, 2017 at 6:16:30 PM UTC-4, Colin Fleming wrote:\n>>>\n>>> In fact, Figwheel has a page dedicated to Cursive: \n>>> https:\/\/github.com\/bhauman\/lein-figwheel\/wiki\/Running-figwheel-in-a-Cursive-Clojure-REPL.\n>>>  \n>>> I agree that if you're doing browser development, you almost certainly want \n>>> to be using figwheel.\n>>>\n>>> On 1 August 2017 at 02:58, Ikuru Kanuma <kanu...@gmail.com> wrote:\n>>>\n>>>> Hi Rob,\n>>>>\n>>>> Perhaps following this README will help?\n>>>> It should work as long as you have a working repl + can add this as a \n>>>> dependency.\n>>>> Figwheel will give you hot code reloading + a cljs repl + lot of other \n>>>> goodies and is really popular.\n>>>>\n>>>> https:\/\/github.com\/bhauman\/lein-figwheel\/tree\/master\/sidecar\n>>>>\n>>>> Ikuru\n>>>>\n>>>> -- \n>>>> Note that posts from new members are moderated - please be patient with \n>>>> your first post.\n>>>> --- \n>>>> You received this message because you are subscribed to the Google \n>>>> Groups \"ClojureScript\" group.\n>>>> To unsubscribe from this group and stop receiving emails from it, send \n>>>> an email to clojurescrip...@googlegroups.com.\n>>>> To post to this group, send email to clojur...@googlegroups.com.\n>>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>>\n>>>\n>>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: REPL setup help Rob Nikander Thu, 03 Aug 2017 05:25:44 -0700"},
{"body":"Hi Rob,\n\nSo using Maven, those instructions should work pretty much as-is, since the\nclojure.main style REPL it uses just uses the classpath from IntelliJ, it\ndoesn't use lein for anything fancy. The only part which I don't know about\nis compiling ClojureScript from Maven - I actually didn't even know that\nwas possible. But the rest of it should work as described in that doc,\nyou'll just have to translate things like :source-paths to the Maven\nequivalent which should be straightforward. \nCheers,\nColin\n\nOn 1 August 2017 at 11:23, Rob Nikander <rob.nikan...@gmail.com> wrote:\n\n> Okay, thanks, I will try figwheel. I'm using Maven not Leiningen so I'll\n> need to find time later to translate those instructions. On my test project\n> here I could use Leiningen, but on another, Maven is entrenched.\n>\n> On Monday, July 31, 2017 at 6:16:30 PM UTC-4, Colin Fleming wrote:\n>>\n>> In fact, Figwheel has a page dedicated to Cursive: https:\/\/github.com\/bh\n>> auman\/lein-figwheel\/wiki\/Running-figwheel-in-a-Cursive-Clojure-REPL. I\n>> agree that if you're doing browser development, you almost certainly want\n>> to be using figwheel.\n>>\n>> On 1 August 2017 at 02:58, Ikuru Kanuma <kanu...@gmail.com> wrote:\n>>\n>>> Hi Rob,\n>>>\n>>> Perhaps following this README will help?\n>>> It should work as long as you have a working repl + can add this as a\n>>> dependency.\n>>> Figwheel will give you hot code reloading + a cljs repl + lot of other\n>>> goodies and is really popular.\n>>>\n>>> https:\/\/github.com\/bhauman\/lein-figwheel\/tree\/master\/sidecar\n>>>\n>>> Ikuru\n>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: REPL setup help Colin Fleming Mon, 31 Jul 2017 19:42:25 -0700"},
{"body":"Okay, thanks, I will try figwheel. I'm using Maven not Leiningen so I'll \nneed to find time later to translate those instructions. On my test project \nhere I could use Leiningen, but on another, Maven is entrenched. \nOn Monday, July 31, 2017 at 6:16:30 PM UTC-4, Colin Fleming wrote:\n>\n> In fact, Figwheel has a page dedicated to Cursive: \n> https:\/\/github.com\/bhauman\/lein-figwheel\/wiki\/Running-figwheel-in-a-Cursive-Clojure-REPL.\n>  \n> I agree that if you're doing browser development, you almost certainly want \n> to be using figwheel.\n>\n> On 1 August 2017 at 02:58, Ikuru Kanuma <kanu...@gmail.com <javascript:>> \n> wrote:\n>\n>> Hi Rob,\n>>\n>> Perhaps following this README will help?\n>> It should work as long as you have a working repl + can add this as a \n>> dependency.\n>> Figwheel will give you hot code reloading + a cljs repl + lot of other \n>> goodies and is really popular.\n>>\n>> https:\/\/github.com\/bhauman\/lein-figwheel\/tree\/master\/sidecar\n>>\n>> Ikuru\n>>\n>> -- \n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: REPL setup help Rob Nikander Mon, 31 Jul 2017 16:24:12 -0700"},
{"body":"Great release, nice to see npm support more stable now, just started \ntesting, seems fine for now. \nIl giorno venerd\u00ec 28 luglio 2017 23:54:42 UTC+2, David Nolen ha scritto:\n>\n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>\n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>\n> Leiningen dependency information:\n>\n> [org.clojure\/clojurescript \"1.9.854\"]\n>\n> This is a significant feature release. Notable new features include\n> comprehensive NPM dependency support, overhauled code splitting,\n> enhanced JavaScript module preprocessing, declared global exports for\n> foreign libs, and checked array operations. There are also a large\n> number of fixes, changes, and minor enhancementes. For more detailed\n> descriptions of the major enhancements, please refer to the last month\n> of posts https:\/\/clojurescript.org\/news\/news.\n>\n> As always, feedback welcome!\n>\n> ## 1.9.854\n>\n> ### Enhancements\n> * CLJS-2280: Provide process.env :preload and auto-configure\n> * CLJS-2279: Infer `:module-type ` for provided `node_modules`\n> * CLJS-2250: Support :foreign-libs overrides via :provides\n> * CLJS-2243: Self-host: Add support for :global-exports\n> * CLJS-2232: Self-host: Add support for string-based requires\n> * add *print-fn-bodies* knob, set to false\n> * CLJS-2198: Safe array operations\n> * CLJS-2217: Support `:rename` for JS modules\n> * CLJS-2214: Support :global-exports for foreign libraries\n> * CLJS-1428: Add a cljs.core\/*command-line-args* var\n> * CLJS-2061: Support ns :require for JS libs, allow strings along with \n> symbol\n> * CLJS-2148: Add warnings for invalid use of aget and aset\n> * CLJS-2143: Add support for symbol preprocess values\n>\n> ### Changes\n> * CLJS-2273: Bump tools.reader to 1.0.3 and development dependencies\n> * CLJS-2235: Allow passing extra maven opts to build scripts\n> * CLJS-2267: Allow ^:const inlined vars to affect if emission\n> * CLJS-2245: Add support for using a local `node_modules` installation \n> through a new `:node-modules` compiler flag\n> * CLJS-2002: Don't throw when no *print-fn* is set\n> * support Clojure primitive array type hints, core.async no longer\n>   gives warnings\n> * CLJS-2213: Node.js target should use node_modules index to emit platform \n> specific require\n> * CLJS-2200: bump to tools.reader 1.0.2\n> * CLJS-2135: require macro prints last result of loaded-libs\n> * CLJS-2192: Add ChakraCore testing facilities\n> * CLJS-1800: Defer to tools.reader for cljs.reader functionality\n> * CLJS-2163: Clean up uses of aget \/ aset on objects\n> * CLJS-2184: Add `ns-publics` and `ns-imports`\n> * CLJS-2183: Assert arguments are quoted symbols in some core macros\n> * CLJS-2182: Assert argument to resolve is a quoted symbol\n> * CLJS-2186: Update docstrings for aget\/aset to be consistent with Clojure\n> * CLJS-2180: Allow compiling `:modules` with whitespace optimizations\n> * CLJS-1822: Use `:file-min` when processing JS modules with advanced \n> optimizations\n> * CLJS-2169: Error when compiling with :source-map and advanced \n> optimizations\n> * CLJS-2037: Throw if overwriting alias in current namespace\n> * CLJS-2160: Add loaded? and prefetch functions to cljs.loader\n> * CLJS-2148: Add unsafe-get and use goog.object\n> * CLJS-2161: Bump Closure Compiler to June 2017 release\n>\n> ### Fixes\n> * CLJS-1854: Self-host: Reload ns with const\n> * CLJS-2278: JavaScript object literals are printed wth keys that cannot \n> be read\n> * CLJS-2276: Self-host: Need test.check dep for CLJS-2275\n> * CLJS-2275: cljs.spec.alpha\/fdef resolves eagerly\n> * CLJS-2259: Extra .cljs_node_repl directory containing cljs.core output\n> * CLJS-2274: Update CI script to install deps\n> * CLJS-2269: Warn on top level code split loads\n> * CLJS-2272: Tests that depended on default install deps behavior failing\n> * CLJS-2255: Clean up :npm-deps\n> * CLJS-2263: Docstring for neg-int? backwards\n> * CLJS-2262: Correct comment that *warn-on-infer* is file-scope\n> * CLJS-2258: Stack overflow regression for sequence xform applied to \n> eduction\n> * CLJS-2256: Generated code doesn't add newline after sourceMappingURL \n> comment\n> * CLJS-2254: Module Indexing: Provide relative paths for a package's main \n> module\n> * CLJS-2248: Build API tests rely on Yarn\n> * CLJS-2239: Self-host: Add `:target :nodejs` to the docstrings in cljs.js\n> * CLJS-2251: Follow-up fix to CLJS-2249 and related commit\n> * CLJS-2249: Provide a test for d4b871cce73\n> * CLJS-2246: Revert CLJS-2245 and CLJS-2240 and fix `lein test`\n> * CLJS-2244: Orphaned processed JS modules breaks :modules\n> * CLJS-2242: Lots of undeclared Var warns in cljs.spec.gen.alpha\n> * CLJS-2241: Multiple requires of Node.js modules in non :nodejs target \n> are not idempotent at the REPL\n> * CLJS-2229: Ensure that new modules work works correctly with REPLs\n> * CLJS-2238: Perf regression with node module indexing\n> * CLJS-2240: don't shell out to module_deps.js if `:npm-deps` not specified\n> * CLJS-2230: Double checked arrays\n> * CLJS-2227: Squelch some of the array access tests\n> * CLJS-2228: Port CLJS-2226 to module_deps.js\n> * CLJS-1955: data_readers.cljc can't reference handlers in user code\n> * CLJS-2225: Need to add :checked-arrays to known compiler opts\n> * CLJS-2226: :npm-deps can't index scoped packages\n> * CLJS-2224: Resolve-var is wrong wrt. module resolution\n> * CLJS-2223: Self-host: Undeclared Var deps\/native-node-modules\n> * CLJS-2222: CI failing after CLJS-2217\n> * CLJS-2219: Enable JSC under test-simple\n> * CLJS-2218: Make ClojureScript aware of native node modules\n> * CLJS-2220: Add runtime :npm-deps tests\n> * CLJS-2212: Replace missing-js-modules with new index-node-modules-dir\n> * CLJS-2211: Add function to index a top-level node_modules installation\n> * CLJS-2208: module_deps.js is not compatible with older JS implementations\n> * CLJS-2207: cljs.test\/js-filename is using non-portable .endsWith\n> * CLJS-1764: Double warning for undeclared Var (REPL only)\n> * CLJS-2204: Tests failing with respect to lodash\/array namespace\n> * CLJS-2205: NPM deps: Correctly compute `:provides` if file ends in \n> `index.js`\n> * CLJS-2203: REPL is turning on all warnings by default (including \n> :invalid-array-access)\n> * CLJS-2201: Self-host: test-js-filename failing\n> * CLJS-2202: String requires should work from Cljs files in classpath\n> * CLJS-2199: String requires broken after recompile\n> * CLJS-2172: memfn docstring refers to Java and reflection\n> * CLJS-1959: under :nodejs target we should provide __dirname and \n> __filename constants\n> * CLJS-1966: cljs.test assumes the output directory is '\/out\/' when \n> determining the filename for a failed or errored test result.\n> * CLJS-2191: Clean up doc references to clojure.spec.* in favor of \n> cljs.spec.*\n> * CLJS-2194: cljs.util\/relative-name bug\n> * CLJS-2195: npm-deps tests are not idempotent\n> * CLJS-2179: Add test for preprocess JS module as symbol\n> * CLJS-2152: \"is not a relative path\" exception thrown when `:libs` \n> directory is provided.\n> * CLJS-2193: :npm-deps dependencies are implicit\n> * CLJS-1797: Update aot_core to support build with MINGW on Windows\n> * CLJS-2189: Add test for :preloads\n> * CLJS-2188: Use :invalid-array-access instead of :invalid-aget \/ \n> :invalid-aset\n> * CLJS-2181: Can't compile string sources with modules\n> * CLJS-2185: Self-host: Docstrings for bootstrap helpers\n> * CLJS-2178: Add tests for `:npm-deps`\n> * CLJS-2177: NPM deps & JS modules fixes for Windows\n> * CLJS-2175: ES6 Module processing broken with Closure v20170626\n> * CLJS-2175: Add test to check ES6 module processing works\n> * CLJS-2176: module_deps.js: fix regexes for Windows paths\n> * CLJS-2173: Fix `npm install` when `:npm-deps` in Windows\n> * CLJS-2164: Require cljs.js results in warning about new unsafe-get macro\n> * CLJS-1998: Printing an Object with a null prototype throws an error\n> * CLJS-2158: cljs_base module generates empty goog.require\n> * CLJS-2157: Automatically generate cljs.loader\/set-loaded! call\n> * CLJS-2154: Provide compiler info & timing when compiling modules\n> * CLJS-2151: Rollback removal of dependency information for node targeted \n> compilation\n> * CLJS-2141: Self-host: cljs.js is using undeclared symbol lib\n> * CLJS-2145: inode_find issue with hash-map\n> * CLJS-2142: Can't instrument a namespace containing constants\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.854 marcs . pompili Mon, 31 Jul 2017 15:45:43 -0700"},
{"body":"In fact, Figwheel has a page dedicated to Cursive:\nhttps:\/\/github.com\/bhauman\/lein-figwheel\/wiki\/Running-figwheel-in-a-Cursive-Clojure-REPL.\nI agree that if you're doing browser development, you almost certainly want\nto be using figwheel. \nOn 1 August 2017 at 02:58, Ikuru Kanuma <kanuma...@gmail.com> wrote:\n\n> Hi Rob,\n>\n> Perhaps following this README will help?\n> It should work as long as you have a working repl + can add this as a\n> dependency.\n> Figwheel will give you hot code reloading + a cljs repl + lot of other\n> goodies and is really popular.\n>\n> https:\/\/github.com\/bhauman\/lein-figwheel\/tree\/master\/sidecar\n>\n> Ikuru\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: REPL setup help Colin Fleming Mon, 31 Jul 2017 15:17:31 -0700"},
{"body":"Hi Rob,\n\nPerhaps following this README will help?\nIt should work as long as you have a working repl + can add this as a \ndependency.\nFigwheel will give you hot code reloading + a cljs repl + lot of other \ngoodies and is really popular. \nhttps:\/\/github.com\/bhauman\/lein-figwheel\/tree\/master\/sidecar\n\nIkuru\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: REPL setup help Ikuru Kanuma Mon, 31 Jul 2017 07:58:19 -0700"},
{"body":"Thanks for the feedback.  I can verify that the `:process-shim false` option \nworks around the problem.  I\u2019m following up with the doo developer and have \nproposed a patch (https:\/\/github.com\/bensu\/doo\/pull\/141). \nCal \n\n\n\n\n> On Jul 30, 2017, at 20:31, David Nolen <dnolen.li...@gmail.com> wrote:\n> \n> The shim is intentionally present regardless of target. You can disable this \n> behavior with `:process-shim false`.\n> \n> If there's a more robust way for doo to determine the environment that's \n> probably a good idea too.\n> \n> David\n> \n> On Sun, Jul 30, 2017 at 1:06 PM, Charles Loomis <c...@sixsq.com> wrote:\n> I\u2019ve encountered a problem when running unit tests with doo (phantomjs) and \n> the 1.9.854 release.\n> \n> With the new release, the problem is that doo always fails _after_ running \n> the defined tests with:\n> \n>     WARNING: doo's init function was not set\n>     #object[TypeError TypeError: undefined is not an object\n>       (evaluating 'process_exit.call')]\n>     TypeError: undefined is not an object (evaluating 'process_exit.call\u2019)\n> \n> This is caused by doo not finding the correct exit function.\n> \n> To distinguish between browser\/nodejs targets, doo checks for the existence \n> of js\/process. If it exists, it assumes that nodejs is being used and tries \n> to extract the exit function from from the js\/process object. Otherwise it \n> uses the *exit-fn* dynamic variable. This logic works as expected in 1.9.671.\n> \n> In 1.9.854, a shim for the nodejs process library was added \n> (src\/main\/cljs\/process\/env.cljs). This creates a js\/process object which \n> looks like:\n> \n>     {\n>       \"env\": {\n>         \"NODE_ENV\": \"development\"\n>       }\n>     }\n> \n> even when nodejs is not being targeted.  This causes the doo logic for \n> looking up the exit function to fail.\n> \n> It looks like either:\n> \n>  1) doo needs to be updated to use a more precise test when targeting nodejs \n> or\n>  2) clojurescript should define the js\/process shim only when nodejs is \n> targeted\n> \n> I\u2019d like some feedback on this to understand where to follow up with this \n> issue.\n> \n> \n> Cal\n> \n> --\n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> ---\n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n> \n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] ANN: ClojureScript 1.9.854 Charles Loomis Mon, 31 Jul 2017 01:23:06 -0700"},
{"body":"Hi,\n\nI'm new to ClojureScript. I followed the quick start instructions [1] and \nset up a REPL. It works, but now I'd like to integrate a REPL with my web \napp and IDE. Any pointers? \nI have a Java servlet container, also running Clojure code. I'm using \nIntelliJ with Cursive plugin, and have REPL windows in the IDE working for \nthe JVM\/server-side of things. I can reload Clojure code in the running \nserver. \n\nNow, that servlet code responds with an HTML page which contains my \nClojureScript code. That runs, but I don't know how to connect that browser \nenvironment to a REPL window in IntelliJ, or even a REPL in my terminal. \n The quick start terminal REPL only connects to a magic server listening on \nlocalhost:9000. \n\nAnyway... any pointers? \n\nthanks,\nRob\n\n\n[1]: https:\/\/clojurescript.org\/guides\/quick-start#browser-repl\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] REPL setup help Rob Nikander Sun, 30 Jul 2017 18:03:07 -0700"},
{"body":"On Sun, Jul 30, 2017 at 4:01 PM, Leon Grapenthin <grapenthinl...@gmail.com>\nwrote: \n> Yes, it does make CLJSJS obsolete and the new method is to include Node\n> modules from NPM.\n>\n>\nThis is not true and we should avoid disseminating such claims.\n\n\n> CLJSJS was never the one true way, especially for production. It lacked\n> deduplication of transitive dependencies that were not packed per CLJSJS\n> and of course support for dependencies that where are not included in\n> CLJSJS.\n> It was nice to get started quickly, but in production one compiled its own\n> bundle of js deps e. g. via webpack, and handwritten (or handcopypasted)\n> externs.\n>\n> As a newcomer, you won't have to deal with all that in the future, which\n> is one of the many benefits of this release.\n>\n> Nonetheless this new functionality will probably take an iteration or two\n> until its stable.\n>\n\nTotal elimination of externs is just a non-goal. In some cases you will\neither need to engage with a JavaScript library maintainer to avoid\nneedlessly dynamic code or supply externs. For example React still needs\nlike 6 externs to work from node_modules under advanced compilation. This\ncould be avoided with a diplomatic PR.\n\nPart of the rationale for this change is encourage ClojureScript developers\nto engage more directly with the wider JavaScript ecosystem and push\nlibrary maintainers to make their libraries Closure compatible as the\nchanges are often trivial, especially for modern JS libraries written in\nES6.\n\nDavid\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: ANN: ClojureScript 1.9.854 David Nolen Sun, 30 Jul 2017 13:16:05 -0700"},
{"body":"The ability to consume node_modules is just an additional feature - it\nmakes no existing features obsolete. \nDavid\n\nOn Sun, Jul 30, 2017 at 3:42 PM, Daniel <doubleagen...@gmail.com> wrote:\n\n> For someone who is new to clojurescript and pretty confused by\n> clojurescript dependency management in general, does this release obsolete\n> cljsjs for new projects and what is the new method?\n>\n>\n> On Friday, July 28, 2017 at 4:55:04 PM UTC-5, David Nolen wrote:\n>>\n>> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>>\n>> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>>\n>> Leiningen dependency information:\n>>\n>> [org.clojure\/clojurescript \"1.9.854\"]\n>>\n>> This is a significant feature release. Notable new features include\n>> comprehensive NPM dependency support, overhauled code splitting,\n>> enhanced JavaScript module preprocessing, declared global exports for\n>> foreign libs, and checked array operations. There are also a large\n>> number of fixes, changes, and minor enhancementes. For more detailed\n>> descriptions of the major enhancements, please refer to the last month\n>> of posts https:\/\/clojurescript.org\/news\/news.\n>>\n>> As always, feedback welcome!\n>>\n>> ## 1.9.854\n>>\n>> ### Enhancements\n>> * CLJS-2280: Provide process.env :preload and auto-configure\n>> * CLJS-2279: Infer `:module-type ` for provided `node_modules`\n>> * CLJS-2250: Support :foreign-libs overrides via :provides\n>> * CLJS-2243: Self-host: Add support for :global-exports\n>> * CLJS-2232: Self-host: Add support for string-based requires\n>> * add *print-fn-bodies* knob, set to false\n>> * CLJS-2198: Safe array operations\n>> * CLJS-2217: Support `:rename` for JS modules\n>> * CLJS-2214: Support :global-exports for foreign libraries\n>> * CLJS-1428: Add a cljs.core\/*command-line-args* var\n>> * CLJS-2061: Support ns :require for JS libs, allow strings along with\n>> symbol\n>> * CLJS-2148: Add warnings for invalid use of aget and aset\n>> * CLJS-2143: Add support for symbol preprocess values\n>>\n>> ### Changes\n>> * CLJS-2273: Bump tools.reader to 1.0.3 and development dependencies\n>> * CLJS-2235: Allow passing extra maven opts to build scripts\n>> * CLJS-2267: Allow ^:const inlined vars to affect if emission\n>> * CLJS-2245: Add support for using a local `node_modules` installation\n>> through a new `:node-modules` compiler flag\n>> * CLJS-2002: Don't throw when no *print-fn* is set\n>> * support Clojure primitive array type hints, core.async no longer\n>>   gives warnings\n>> * CLJS-2213: Node.js target should use node_modules index to emit\n>> platform specific require\n>> * CLJS-2200: bump to tools.reader 1.0.2\n>> * CLJS-2135: require macro prints last result of loaded-libs\n>> * CLJS-2192: Add ChakraCore testing facilities\n>> * CLJS-1800: Defer to tools.reader for cljs.reader functionality\n>> * CLJS-2163: Clean up uses of aget \/ aset on objects\n>> * CLJS-2184: Add `ns-publics` and `ns-imports`\n>> * CLJS-2183: Assert arguments are quoted symbols in some core macros\n>> * CLJS-2182: Assert argument to resolve is a quoted symbol\n>> * CLJS-2186: Update docstrings for aget\/aset to be consistent with Clojure\n>> * CLJS-2180: Allow compiling `:modules` with whitespace optimizations\n>> * CLJS-1822: Use `:file-min` when processing JS modules with advanced\n>> optimizations\n>> * CLJS-2169: Error when compiling with :source-map and advanced\n>> optimizations\n>> * CLJS-2037: Throw if overwriting alias in current namespace\n>> * CLJS-2160: Add loaded? and prefetch functions to cljs.loader\n>> * CLJS-2148: Add unsafe-get and use goog.object\n>> * CLJS-2161: Bump Closure Compiler to June 2017 release\n>>\n>> ### Fixes\n>> * CLJS-1854: Self-host: Reload ns with const\n>> * CLJS-2278: JavaScript object literals are printed wth keys that cannot\n>> be read\n>> * CLJS-2276: Self-host: Need test.check dep for CLJS-2275\n>> * CLJS-2275: cljs.spec.alpha\/fdef resolves eagerly\n>> * CLJS-2259: Extra .cljs_node_repl directory containing cljs.core output\n>> * CLJS-2274: Update CI script to install deps\n>> * CLJS-2269: Warn on top level code split loads\n>> * CLJS-2272: Tests that depended on default install deps behavior failing\n>> * CLJS-2255: Clean up :npm-deps\n>> * CLJS-2263: Docstring for neg-int? backwards\n>> * CLJS-2262: Correct comment that *warn-on-infer* is file-scope\n>> * CLJS-2258: Stack overflow regression for sequence xform applied to\n>> eduction\n>> * CLJS-2256: Generated code doesn't add newline after sourceMappingURL\n>> comment\n>> * CLJS-2254: Module Indexing: Provide relative paths for a package's main\n>> module\n>> * CLJS-2248: Build API tests rely on Yarn\n>> * CLJS-2239: Self-host: Add `:target :nodejs` to the docstrings in cljs.js\n>> * CLJS-2251: Follow-up fix to CLJS-2249 and related commit\n>> * CLJS-2249: Provide a test for d4b871cce73\n>> * CLJS-2246: Revert CLJS-2245 and CLJS-2240 and fix `lein test`\n>> * CLJS-2244: Orphaned processed JS modules breaks :modules\n>> * CLJS-2242: Lots of undeclared Var warns in cljs.spec.gen.alpha\n>> * CLJS-2241: Multiple requires of Node.js modules in non :nodejs target\n>> are not idempotent at the REPL\n>> * CLJS-2229: Ensure that new modules work works correctly with REPLs\n>> * CLJS-2238: Perf regression with node module indexing\n>> * CLJS-2240: don't shell out to module_deps.js if `:npm-deps` not\n>> specified\n>> * CLJS-2230: Double checked arrays\n>> * CLJS-2227: Squelch some of the array access tests\n>> * CLJS-2228: Port CLJS-2226 to module_deps.js\n>> * CLJS-1955: data_readers.cljc can't reference handlers in user code\n>> * CLJS-2225: Need to add :checked-arrays to known compiler opts\n>> * CLJS-2226: :npm-deps can't index scoped packages\n>> * CLJS-2224: Resolve-var is wrong wrt. module resolution\n>> * CLJS-2223: Self-host: Undeclared Var deps\/native-node-modules\n>> * CLJS-2222: CI failing after CLJS-2217\n>> * CLJS-2219: Enable JSC under test-simple\n>> * CLJS-2218: Make ClojureScript aware of native node modules\n>> * CLJS-2220: Add runtime :npm-deps tests\n>> * CLJS-2212: Replace missing-js-modules with new index-node-modules-dir\n>> * CLJS-2211: Add function to index a top-level node_modules installation\n>> * CLJS-2208: module_deps.js is not compatible with older JS\n>> implementations\n>> * CLJS-2207: cljs.test\/js-filename is using non-portable .endsWith\n>> * CLJS-1764: Double warning for undeclared Var (REPL only)\n>> * CLJS-2204: Tests failing with respect to lodash\/array namespace\n>> * CLJS-2205: NPM deps: Correctly compute `:provides` if file ends in\n>> `index.js`\n>> * CLJS-2203: REPL is turning on all warnings by default (including\n>> :invalid-array-access)\n>> * CLJS-2201: Self-host: test-js-filename failing\n>> * CLJS-2202: String requires should work from Cljs files in classpath\n>> * CLJS-2199: String requires broken after recompile\n>> * CLJS-2172: memfn docstring refers to Java and reflection\n>> * CLJS-1959: under :nodejs target we should provide __dirname and\n>> __filename constants\n>> * CLJS-1966: cljs.test assumes the output directory is '\/out\/' when\n>> determining the filename for a failed or errored test result.\n>> * CLJS-2191: Clean up doc references to clojure.spec.* in favor of\n>> cljs.spec.*\n>> * CLJS-2194: cljs.util\/relative-name bug\n>> * CLJS-2195: npm-deps tests are not idempotent\n>> * CLJS-2179: Add test for preprocess JS module as symbol\n>> * CLJS-2152: \"is not a relative path\" exception thrown when `:libs`\n>> directory is provided.\n>> * CLJS-2193: :npm-deps dependencies are implicit\n>> * CLJS-1797: Update aot_core to support build with MINGW on Windows\n>> * CLJS-2189: Add test for :preloads\n>> * CLJS-2188: Use :invalid-array-access instead of :invalid-aget \/\n>> :invalid-aset\n>> * CLJS-2181: Can't compile string sources with modules\n>> * CLJS-2185: Self-host: Docstrings for bootstrap helpers\n>> * CLJS-2178: Add tests for `:npm-deps`\n>> * CLJS-2177: NPM deps & JS modules fixes for Windows\n>> * CLJS-2175: ES6 Module processing broken with Closure v20170626\n>> * CLJS-2175: Add test to check ES6 module processing works\n>> * CLJS-2176: module_deps.js: fix regexes for Windows paths\n>> * CLJS-2173: Fix `npm install` when `:npm-deps` in Windows\n>> * CLJS-2164: Require cljs.js results in warning about new unsafe-get macro\n>> * CLJS-1998: Printing an Object with a null prototype throws an error\n>> * CLJS-2158: cljs_base module generates empty goog.require\n>> * CLJS-2157: Automatically generate cljs.loader\/set-loaded! call\n>> * CLJS-2154: Provide compiler info & timing when compiling modules\n>> * CLJS-2151: Rollback removal of dependency information for node targeted\n>> compilation\n>> * CLJS-2141: Self-host: cljs.js is using undeclared symbol lib\n>> * CLJS-2145: inode_find issue with hash-map\n>> * CLJS-2142: Can't instrument a namespace containing constants\n>>\n>> --\n> You received this message because you are subscribed to the Google\n> Groups \"Clojure\" group.\n> To post to this group, send email to cloj...@googlegroups.com\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> To unsubscribe from this group, send email to\n> clojure+unsubscr...@googlegroups.com\n> For more options, visit this group at\n> http:\/\/groups.google.com\/group\/clojure?hl=en\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"Clojure\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojure+unsubscr...@googlegroups.com.\n> For more options, visit https:\/\/groups.google.com\/d\/optout.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.854 David Nolen Sun, 30 Jul 2017 13:08:03 -0700"},
{"body":"Yes, it does make CLJSJS obsolete and the new method is to include Node \nmodules from NPM. \nCLJSJS was never the one true way, especially for production. It lacked \ndeduplication of transitive dependencies that were not packed per CLJSJS \nand of course support for dependencies that where are not included in \nCLJSJS. \nIt was nice to get started quickly, but in production one compiled its own \nbundle of js deps e. g. via webpack, and handwritten (or handcopypasted) \nexterns.\n\nAs a newcomer, you won't have to deal with all that in the future, which is \none of the many benefits of this release.\n\nNonetheless this new functionality will probably take an iteration or two \nuntil its stable.\n\nOn Sunday, July 30, 2017 at 9:42:32 PM UTC+2, Daniel wrote:\n>\n> For someone who is new to clojurescript and pretty confused by \n> clojurescript dependency management in general, does this release obsolete \n> cljsjs for new projects and what is the new method?\n>\n> On Friday, July 28, 2017 at 4:55:04 PM UTC-5, David Nolen wrote:\n>>\n>> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>>\n>> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>>\n>> Leiningen dependency information:\n>>\n>> [org.clojure\/clojurescript \"1.9.854\"]\n>>\n>> This is a significant feature release. Notable new features include\n>> comprehensive NPM dependency support, overhauled code splitting,\n>> enhanced JavaScript module preprocessing, declared global exports for\n>> foreign libs, and checked array operations. There are also a large\n>> number of fixes, changes, and minor enhancementes. For more detailed\n>> descriptions of the major enhancements, please refer to the last month\n>> of posts https:\/\/clojurescript.org\/news\/news.\n>>\n>> As always, feedback welcome!\n>>\n>> ## 1.9.854\n>>\n>> ### Enhancements\n>> * CLJS-2280: Provide process.env :preload and auto-configure\n>> * CLJS-2279: Infer `:module-type ` for provided `node_modules`\n>> * CLJS-2250: Support :foreign-libs overrides via :provides\n>> * CLJS-2243: Self-host: Add support for :global-exports\n>> * CLJS-2232: Self-host: Add support for string-based requires\n>> * add *print-fn-bodies* knob, set to false\n>> * CLJS-2198: Safe array operations\n>> * CLJS-2217: Support `:rename` for JS modules\n>> * CLJS-2214: Support :global-exports for foreign libraries\n>> * CLJS-1428: Add a cljs.core\/*command-line-args* var\n>> * CLJS-2061: Support ns :require for JS libs, allow strings along with \n>> symbol\n>> * CLJS-2148: Add warnings for invalid use of aget and aset\n>> * CLJS-2143: Add support for symbol preprocess values\n>>\n>> ### Changes\n>> * CLJS-2273: Bump tools.reader to 1.0.3 and development dependencies\n>> * CLJS-2235: Allow passing extra maven opts to build scripts\n>> * CLJS-2267: Allow ^:const inlined vars to affect if emission\n>> * CLJS-2245: Add support for using a local `node_modules` installation \n>> through a new `:node-modules` compiler flag\n>> * CLJS-2002: Don't throw when no *print-fn* is set\n>> * support Clojure primitive array type hints, core.async no longer\n>>   gives warnings\n>> * CLJS-2213: Node.js target should use node_modules index to emit \n>> platform specific require\n>> * CLJS-2200: bump to tools.reader 1.0.2\n>> * CLJS-2135: require macro prints last result of loaded-libs\n>> * CLJS-2192: Add ChakraCore testing facilities\n>> * CLJS-1800: Defer to tools.reader for cljs.reader functionality\n>> * CLJS-2163: Clean up uses of aget \/ aset on objects\n>> * CLJS-2184: Add `ns-publics` and `ns-imports`\n>> * CLJS-2183: Assert arguments are quoted symbols in some core macros\n>> * CLJS-2182: Assert argument to resolve is a quoted symbol\n>> * CLJS-2186: Update docstrings for aget\/aset to be consistent with Clojure\n>> * CLJS-2180: Allow compiling `:modules` with whitespace optimizations\n>> * CLJS-1822: Use `:file-min` when processing JS modules with advanced \n>> optimizations\n>> * CLJS-2169: Error when compiling with :source-map and advanced \n>> optimizations\n>> * CLJS-2037: Throw if overwriting alias in current namespace\n>> * CLJS-2160: Add loaded? and prefetch functions to cljs.loader\n>> * CLJS-2148: Add unsafe-get and use goog.object\n>> * CLJS-2161: Bump Closure Compiler to June 2017 release\n>>\n>> ### Fixes\n>> * CLJS-1854: Self-host: Reload ns with const\n>> * CLJS-2278: JavaScript object literals are printed wth keys that cannot \n>> be read\n>> * CLJS-2276: Self-host: Need test.check dep for CLJS-2275\n>> * CLJS-2275: cljs.spec.alpha\/fdef resolves eagerly\n>> * CLJS-2259: Extra .cljs_node_repl directory containing cljs.core output\n>> * CLJS-2274: Update CI script to install deps\n>> * CLJS-2269: Warn on top level code split loads\n>> * CLJS-2272: Tests that depended on default install deps behavior failing\n>> * CLJS-2255: Clean up :npm-deps\n>> * CLJS-2263: Docstring for neg-int? backwards\n>> * CLJS-2262: Correct comment that *warn-on-infer* is file-scope\n>> * CLJS-2258: Stack overflow regression for sequence xform applied to \n>> eduction\n>> * CLJS-2256: Generated code doesn't add newline after sourceMappingURL \n>> comment\n>> * CLJS-2254: Module Indexing: Provide relative paths for a package's main \n>> module\n>> * CLJS-2248: Build API tests rely on Yarn\n>> * CLJS-2239: Self-host: Add `:target :nodejs` to the docstrings in cljs.js\n>> * CLJS-2251: Follow-up fix to CLJS-2249 and related commit\n>> * CLJS-2249: Provide a test for d4b871cce73\n>> * CLJS-2246: Revert CLJS-2245 and CLJS-2240 and fix `lein test`\n>> * CLJS-2244: Orphaned processed JS modules breaks :modules\n>> * CLJS-2242: Lots of undeclared Var warns in cljs.spec.gen.alpha\n>> * CLJS-2241: Multiple requires of Node.js modules in non :nodejs target \n>> are not idempotent at the REPL\n>> * CLJS-2229: Ensure that new modules work works correctly with REPLs\n>> * CLJS-2238: Perf regression with node module indexing\n>> * CLJS-2240: don't shell out to module_deps.js if `:npm-deps` not \n>> specified\n>> * CLJS-2230: Double checked arrays\n>> * CLJS-2227: Squelch some of the array access tests\n>> * CLJS-2228: Port CLJS-2226 to module_deps.js\n>> * CLJS-1955: data_readers.cljc can't reference handlers in user code\n>> * CLJS-2225: Need to add :checked-arrays to known compiler opts\n>> * CLJS-2226: :npm-deps can't index scoped packages\n>> * CLJS-2224: Resolve-var is wrong wrt. module resolution\n>> * CLJS-2223: Self-host: Undeclared Var deps\/native-node-modules\n>> * CLJS-2222: CI failing after CLJS-2217\n>> * CLJS-2219: Enable JSC under test-simple\n>> * CLJS-2218: Make ClojureScript aware of native node modules\n>> * CLJS-2220: Add runtime :npm-deps tests\n>> * CLJS-2212: Replace missing-js-modules with new index-node-modules-dir\n>> * CLJS-2211: Add function to index a top-level node_modules installation\n>> * CLJS-2208: module_deps.js is not compatible with older JS \n>> implementations\n>> * CLJS-2207: cljs.test\/js-filename is using non-portable .endsWith\n>> * CLJS-1764: Double warning for undeclared Var (REPL only)\n>> * CLJS-2204: Tests failing with respect to lodash\/array namespace\n>> * CLJS-2205: NPM deps: Correctly compute `:provides` if file ends in \n>> `index.js`\n>> * CLJS-2203: REPL is turning on all warnings by default (including \n>> :invalid-array-access)\n>> * CLJS-2201: Self-host: test-js-filename failing\n>> * CLJS-2202: String requires should work from Cljs files in classpath\n>> * CLJS-2199: String requires broken after recompile\n>> * CLJS-2172: memfn docstring refers to Java and reflection\n>> * CLJS-1959: under :nodejs target we should provide __dirname and \n>> __filename constants\n>> * CLJS-1966: cljs.test assumes the output directory is '\/out\/' when \n>> determining the filename for a failed or errored test result.\n>> * CLJS-2191: Clean up doc references to clojure.spec.* in favor of \n>> cljs.spec.*\n>> * CLJS-2194: cljs.util\/relative-name bug\n>> * CLJS-2195: npm-deps tests are not idempotent\n>> * CLJS-2179: Add test for preprocess JS module as symbol\n>> * CLJS-2152: \"is not a relative path\" exception thrown when `:libs` \n>> directory is provided.\n>> * CLJS-2193: :npm-deps dependencies are implicit\n>> * CLJS-1797: Update aot_core to support build with MINGW on Windows\n>> * CLJS-2189: Add test for :preloads\n>> * CLJS-2188: Use :invalid-array-access instead of :invalid-aget \/ \n>> :invalid-aset\n>> * CLJS-2181: Can't compile string sources with modules\n>> * CLJS-2185: Self-host: Docstrings for bootstrap helpers\n>> * CLJS-2178: Add tests for `:npm-deps`\n>> * CLJS-2177: NPM deps & JS modules fixes for Windows\n>> * CLJS-2175: ES6 Module processing broken with Closure v20170626\n>> * CLJS-2175: Add test to check ES6 module processing works\n>> * CLJS-2176: module_deps.js: fix regexes for Windows paths\n>> * CLJS-2173: Fix `npm install` when `:npm-deps` in Windows\n>> * CLJS-2164: Require cljs.js results in warning about new unsafe-get macro\n>> * CLJS-1998: Printing an Object with a null prototype throws an error\n>> * CLJS-2158: cljs_base module generates empty goog.require\n>> * CLJS-2157: Automatically generate cljs.loader\/set-loaded! call\n>> * CLJS-2154: Provide compiler info & timing when compiling modules\n>> * CLJS-2151: Rollback removal of dependency information for node targeted \n>> compilation\n>> * CLJS-2141: Self-host: cljs.js is using undeclared symbol lib\n>> * CLJS-2145: inode_find issue with hash-map\n>> * CLJS-2142: Can't instrument a namespace containing constants\n>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.854 Leon Grapenthin Sun, 30 Jul 2017 13:02:18 -0700"},
{"body":"No idea, make something minimal without any tooling besides ClojureScript\nand report the issue in JIRA. \nThanks,\nDavid\n\nOn Sun, Jul 30, 2017 at 2:47 PM, Leon Grapenthin <grapenthinl...@gmail.com>\nwrote:\n\n> Amazing release, trying it out right now.\n>\n> Just wanted to see if including this works: https:\/\/github.com\/\n> coopermaruyama\/react-web3\n>\n> I try to :require it via [react-web3 :as w3]\n>\n> Unfortunately this gives me a not-found error. Also I noticed that CLJS\n> indeed downloaded react-web3 to \"node_modules\", but the folder is missing\n> from the node_modules folder in the compilers output.\n>\n> Am I requiring it wrong, or is it not supported for some reason?\n>\n> Kind regards,\n>  Leon.\n>\n> On Friday, July 28, 2017 at 11:54:42 PM UTC+2, David Nolen wrote:\n>>\n>> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>>\n>> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>>\n>> Leiningen dependency information:\n>>\n>> [org.clojure\/clojurescript \"1.9.854\"]\n>>\n>> This is a significant feature release. Notable new features include\n>> comprehensive NPM dependency support, overhauled code splitting,\n>> enhanced JavaScript module preprocessing, declared global exports for\n>> foreign libs, and checked array operations. There are also a large\n>> number of fixes, changes, and minor enhancementes. For more detailed\n>> descriptions of the major enhancements, please refer to the last month\n>> of posts https:\/\/clojurescript.org\/news\/news.\n>>\n>> As always, feedback welcome!\n>>\n>> ## 1.9.854\n>>\n>> ### Enhancements\n>> * CLJS-2280: Provide process.env :preload and auto-configure\n>> * CLJS-2279: Infer `:module-type ` for provided `node_modules`\n>> * CLJS-2250: Support :foreign-libs overrides via :provides\n>> * CLJS-2243: Self-host: Add support for :global-exports\n>> * CLJS-2232: Self-host: Add support for string-based requires\n>> * add *print-fn-bodies* knob, set to false\n>> * CLJS-2198: Safe array operations\n>> * CLJS-2217: Support `:rename` for JS modules\n>> * CLJS-2214: Support :global-exports for foreign libraries\n>> * CLJS-1428: Add a cljs.core\/*command-line-args* var\n>> * CLJS-2061: Support ns :require for JS libs, allow strings along with\n>> symbol\n>> * CLJS-2148: Add warnings for invalid use of aget and aset\n>> * CLJS-2143: Add support for symbol preprocess values\n>>\n>> ### Changes\n>> * CLJS-2273: Bump tools.reader to 1.0.3 and development dependencies\n>> * CLJS-2235: Allow passing extra maven opts to build scripts\n>> * CLJS-2267: Allow ^:const inlined vars to affect if emission\n>> * CLJS-2245: Add support for using a local `node_modules` installation\n>> through a new `:node-modules` compiler flag\n>> * CLJS-2002: Don't throw when no *print-fn* is set\n>> * support Clojure primitive array type hints, core.async no longer\n>>   gives warnings\n>> * CLJS-2213: Node.js target should use node_modules index to emit\n>> platform specific require\n>> * CLJS-2200: bump to tools.reader 1.0.2\n>> * CLJS-2135: require macro prints last result of loaded-libs\n>> * CLJS-2192: Add ChakraCore testing facilities\n>> * CLJS-1800: Defer to tools.reader for cljs.reader functionality\n>> * CLJS-2163: Clean up uses of aget \/ aset on objects\n>> * CLJS-2184: Add `ns-publics` and `ns-imports`\n>> * CLJS-2183: Assert arguments are quoted symbols in some core macros\n>> * CLJS-2182: Assert argument to resolve is a quoted symbol\n>> * CLJS-2186: Update docstrings for aget\/aset to be consistent with Clojure\n>> * CLJS-2180: Allow compiling `:modules` with whitespace optimizations\n>> * CLJS-1822: Use `:file-min` when processing JS modules with advanced\n>> optimizations\n>> * CLJS-2169: Error when compiling with :source-map and advanced\n>> optimizations\n>> * CLJS-2037: Throw if overwriting alias in current namespace\n>> * CLJS-2160: Add loaded? and prefetch functions to cljs.loader\n>> * CLJS-2148: Add unsafe-get and use goog.object\n>> * CLJS-2161: Bump Closure Compiler to June 2017 release\n>>\n>> ### Fixes\n>> * CLJS-1854: Self-host: Reload ns with const\n>> * CLJS-2278: JavaScript object literals are printed wth keys that cannot\n>> be read\n>> * CLJS-2276: Self-host: Need test.check dep for CLJS-2275\n>> * CLJS-2275: cljs.spec.alpha\/fdef resolves eagerly\n>> * CLJS-2259: Extra .cljs_node_repl directory containing cljs.core output\n>> * CLJS-2274: Update CI script to install deps\n>> * CLJS-2269: Warn on top level code split loads\n>> * CLJS-2272: Tests that depended on default install deps behavior failing\n>> * CLJS-2255: Clean up :npm-deps\n>> * CLJS-2263: Docstring for neg-int? backwards\n>> * CLJS-2262: Correct comment that *warn-on-infer* is file-scope\n>> * CLJS-2258: Stack overflow regression for sequence xform applied to\n>> eduction\n>> * CLJS-2256: Generated code doesn't add newline after sourceMappingURL\n>> comment\n>> * CLJS-2254: Module Indexing: Provide relative paths for a package's main\n>> module\n>> * CLJS-2248: Build API tests rely on Yarn\n>> * CLJS-2239: Self-host: Add `:target :nodejs` to the docstrings in cljs.js\n>> * CLJS-2251: Follow-up fix to CLJS-2249 and related commit\n>> * CLJS-2249: Provide a test for d4b871cce73\n>> * CLJS-2246: Revert CLJS-2245 and CLJS-2240 and fix `lein test`\n>> * CLJS-2244: Orphaned processed JS modules breaks :modules\n>> * CLJS-2242: Lots of undeclared Var warns in cljs.spec.gen.alpha\n>> * CLJS-2241: Multiple requires of Node.js modules in non :nodejs target\n>> are not idempotent at the REPL\n>> * CLJS-2229: Ensure that new modules work works correctly with REPLs\n>> * CLJS-2238: Perf regression with node module indexing\n>> * CLJS-2240: don't shell out to module_deps.js if `:npm-deps` not\n>> specified\n>> * CLJS-2230: Double checked arrays\n>> * CLJS-2227: Squelch some of the array access tests\n>> * CLJS-2228: Port CLJS-2226 to module_deps.js\n>> * CLJS-1955: data_readers.cljc can't reference handlers in user code\n>> * CLJS-2225: Need to add :checked-arrays to known compiler opts\n>> * CLJS-2226: :npm-deps can't index scoped packages\n>> * CLJS-2224: Resolve-var is wrong wrt. module resolution\n>> * CLJS-2223: Self-host: Undeclared Var deps\/native-node-modules\n>> * CLJS-2222: CI failing after CLJS-2217\n>> * CLJS-2219: Enable JSC under test-simple\n>> * CLJS-2218: Make ClojureScript aware of native node modules\n>> * CLJS-2220: Add runtime :npm-deps tests\n>> * CLJS-2212: Replace missing-js-modules with new index-node-modules-dir\n>> * CLJS-2211: Add function to index a top-level node_modules installation\n>> * CLJS-2208: module_deps.js is not compatible with older JS\n>> implementations\n>> * CLJS-2207: cljs.test\/js-filename is using non-portable .endsWith\n>> * CLJS-1764: Double warning for undeclared Var (REPL only)\n>> * CLJS-2204: Tests failing with respect to lodash\/array namespace\n>> * CLJS-2205: NPM deps: Correctly compute `:provides` if file ends in\n>> `index.js`\n>> * CLJS-2203: REPL is turning on all warnings by default (including\n>> :invalid-array-access)\n>> * CLJS-2201: Self-host: test-js-filename failing\n>> * CLJS-2202: String requires should work from Cljs files in classpath\n>> * CLJS-2199: String requires broken after recompile\n>> * CLJS-2172: memfn docstring refers to Java and reflection\n>> * CLJS-1959: under :nodejs target we should provide __dirname and\n>> __filename constants\n>> * CLJS-1966: cljs.test assumes the output directory is '\/out\/' when\n>> determining the filename for a failed or errored test result.\n>> * CLJS-2191: Clean up doc references to clojure.spec.* in favor of\n>> cljs.spec.*\n>> * CLJS-2194: cljs.util\/relative-name bug\n>> * CLJS-2195: npm-deps tests are not idempotent\n>> * CLJS-2179: Add test for preprocess JS module as symbol\n>> * CLJS-2152: \"is not a relative path\" exception thrown when `:libs`\n>> directory is provided.\n>> * CLJS-2193: :npm-deps dependencies are implicit\n>> * CLJS-1797: Update aot_core to support build with MINGW on Windows\n>> * CLJS-2189: Add test for :preloads\n>> * CLJS-2188: Use :invalid-array-access instead of :invalid-aget \/\n>> :invalid-aset\n>> * CLJS-2181: Can't compile string sources with modules\n>> * CLJS-2185: Self-host: Docstrings for bootstrap helpers\n>> * CLJS-2178: Add tests for `:npm-deps`\n>> * CLJS-2177: NPM deps & JS modules fixes for Windows\n>> * CLJS-2175: ES6 Module processing broken with Closure v20170626\n>> * CLJS-2175: Add test to check ES6 module processing works\n>> * CLJS-2176: module_deps.js: fix regexes for Windows paths\n>> * CLJS-2173: Fix `npm install` when `:npm-deps` in Windows\n>> * CLJS-2164: Require cljs.js results in warning about new unsafe-get macro\n>> * CLJS-1998: Printing an Object with a null prototype throws an error\n>> * CLJS-2158: cljs_base module generates empty goog.require\n>> * CLJS-2157: Automatically generate cljs.loader\/set-loaded! call\n>> * CLJS-2154: Provide compiler info & timing when compiling modules\n>> * CLJS-2151: Rollback removal of dependency information for node targeted\n>> compilation\n>> * CLJS-2141: Self-host: cljs.js is using undeclared symbol lib\n>> * CLJS-2145: inode_find issue with hash-map\n>> * CLJS-2142: Can't instrument a namespace containing constants\n>>\n>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: ANN: ClojureScript 1.9.854 David Nolen Sun, 30 Jul 2017 11:54:12 -0700"},
{"body":"Amazing release, trying it out right now.\n\nJust wanted to see if including this \nworks: https:\/\/github.com\/coopermaruyama\/react-web3 \nI try to :require it via [react-web3 :as w3]\n\nUnfortunately this gives me a not-found error. Also I noticed that CLJS \nindeed downloaded react-web3 to \"node_modules\", but the folder is missing \nfrom the node_modules folder in the compilers output.\n\nAm I requiring it wrong, or is it not supported for some reason?\n\nKind regards,\n Leon.\n\nOn Friday, July 28, 2017 at 11:54:42 PM UTC+2, David Nolen wrote:\n>\n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>\n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>\n> Leiningen dependency information:\n>\n> [org.clojure\/clojurescript \"1.9.854\"]\n>\n> This is a significant feature release. Notable new features include\n> comprehensive NPM dependency support, overhauled code splitting,\n> enhanced JavaScript module preprocessing, declared global exports for\n> foreign libs, and checked array operations. There are also a large\n> number of fixes, changes, and minor enhancementes. For more detailed\n> descriptions of the major enhancements, please refer to the last month\n> of posts https:\/\/clojurescript.org\/news\/news.\n>\n> As always, feedback welcome!\n>\n> ## 1.9.854\n>\n> ### Enhancements\n> * CLJS-2280: Provide process.env :preload and auto-configure\n> * CLJS-2279: Infer `:module-type ` for provided `node_modules`\n> * CLJS-2250: Support :foreign-libs overrides via :provides\n> * CLJS-2243: Self-host: Add support for :global-exports\n> * CLJS-2232: Self-host: Add support for string-based requires\n> * add *print-fn-bodies* knob, set to false\n> * CLJS-2198: Safe array operations\n> * CLJS-2217: Support `:rename` for JS modules\n> * CLJS-2214: Support :global-exports for foreign libraries\n> * CLJS-1428: Add a cljs.core\/*command-line-args* var\n> * CLJS-2061: Support ns :require for JS libs, allow strings along with \n> symbol\n> * CLJS-2148: Add warnings for invalid use of aget and aset\n> * CLJS-2143: Add support for symbol preprocess values\n>\n> ### Changes\n> * CLJS-2273: Bump tools.reader to 1.0.3 and development dependencies\n> * CLJS-2235: Allow passing extra maven opts to build scripts\n> * CLJS-2267: Allow ^:const inlined vars to affect if emission\n> * CLJS-2245: Add support for using a local `node_modules` installation \n> through a new `:node-modules` compiler flag\n> * CLJS-2002: Don't throw when no *print-fn* is set\n> * support Clojure primitive array type hints, core.async no longer\n>   gives warnings\n> * CLJS-2213: Node.js target should use node_modules index to emit platform \n> specific require\n> * CLJS-2200: bump to tools.reader 1.0.2\n> * CLJS-2135: require macro prints last result of loaded-libs\n> * CLJS-2192: Add ChakraCore testing facilities\n> * CLJS-1800: Defer to tools.reader for cljs.reader functionality\n> * CLJS-2163: Clean up uses of aget \/ aset on objects\n> * CLJS-2184: Add `ns-publics` and `ns-imports`\n> * CLJS-2183: Assert arguments are quoted symbols in some core macros\n> * CLJS-2182: Assert argument to resolve is a quoted symbol\n> * CLJS-2186: Update docstrings for aget\/aset to be consistent with Clojure\n> * CLJS-2180: Allow compiling `:modules` with whitespace optimizations\n> * CLJS-1822: Use `:file-min` when processing JS modules with advanced \n> optimizations\n> * CLJS-2169: Error when compiling with :source-map and advanced \n> optimizations\n> * CLJS-2037: Throw if overwriting alias in current namespace\n> * CLJS-2160: Add loaded? and prefetch functions to cljs.loader\n> * CLJS-2148: Add unsafe-get and use goog.object\n> * CLJS-2161: Bump Closure Compiler to June 2017 release\n>\n> ### Fixes\n> * CLJS-1854: Self-host: Reload ns with const\n> * CLJS-2278: JavaScript object literals are printed wth keys that cannot \n> be read\n> * CLJS-2276: Self-host: Need test.check dep for CLJS-2275\n> * CLJS-2275: cljs.spec.alpha\/fdef resolves eagerly\n> * CLJS-2259: Extra .cljs_node_repl directory containing cljs.core output\n> * CLJS-2274: Update CI script to install deps\n> * CLJS-2269: Warn on top level code split loads\n> * CLJS-2272: Tests that depended on default install deps behavior failing\n> * CLJS-2255: Clean up :npm-deps\n> * CLJS-2263: Docstring for neg-int? backwards\n> * CLJS-2262: Correct comment that *warn-on-infer* is file-scope\n> * CLJS-2258: Stack overflow regression for sequence xform applied to \n> eduction\n> * CLJS-2256: Generated code doesn't add newline after sourceMappingURL \n> comment\n> * CLJS-2254: Module Indexing: Provide relative paths for a package's main \n> module\n> * CLJS-2248: Build API tests rely on Yarn\n> * CLJS-2239: Self-host: Add `:target :nodejs` to the docstrings in cljs.js\n> * CLJS-2251: Follow-up fix to CLJS-2249 and related commit\n> * CLJS-2249: Provide a test for d4b871cce73\n> * CLJS-2246: Revert CLJS-2245 and CLJS-2240 and fix `lein test`\n> * CLJS-2244: Orphaned processed JS modules breaks :modules\n> * CLJS-2242: Lots of undeclared Var warns in cljs.spec.gen.alpha\n> * CLJS-2241: Multiple requires of Node.js modules in non :nodejs target \n> are not idempotent at the REPL\n> * CLJS-2229: Ensure that new modules work works correctly with REPLs\n> * CLJS-2238: Perf regression with node module indexing\n> * CLJS-2240: don't shell out to module_deps.js if `:npm-deps` not specified\n> * CLJS-2230: Double checked arrays\n> * CLJS-2227: Squelch some of the array access tests\n> * CLJS-2228: Port CLJS-2226 to module_deps.js\n> * CLJS-1955: data_readers.cljc can't reference handlers in user code\n> * CLJS-2225: Need to add :checked-arrays to known compiler opts\n> * CLJS-2226: :npm-deps can't index scoped packages\n> * CLJS-2224: Resolve-var is wrong wrt. module resolution\n> * CLJS-2223: Self-host: Undeclared Var deps\/native-node-modules\n> * CLJS-2222: CI failing after CLJS-2217\n> * CLJS-2219: Enable JSC under test-simple\n> * CLJS-2218: Make ClojureScript aware of native node modules\n> * CLJS-2220: Add runtime :npm-deps tests\n> * CLJS-2212: Replace missing-js-modules with new index-node-modules-dir\n> * CLJS-2211: Add function to index a top-level node_modules installation\n> * CLJS-2208: module_deps.js is not compatible with older JS implementations\n> * CLJS-2207: cljs.test\/js-filename is using non-portable .endsWith\n> * CLJS-1764: Double warning for undeclared Var (REPL only)\n> * CLJS-2204: Tests failing with respect to lodash\/array namespace\n> * CLJS-2205: NPM deps: Correctly compute `:provides` if file ends in \n> `index.js`\n> * CLJS-2203: REPL is turning on all warnings by default (including \n> :invalid-array-access)\n> * CLJS-2201: Self-host: test-js-filename failing\n> * CLJS-2202: String requires should work from Cljs files in classpath\n> * CLJS-2199: String requires broken after recompile\n> * CLJS-2172: memfn docstring refers to Java and reflection\n> * CLJS-1959: under :nodejs target we should provide __dirname and \n> __filename constants\n> * CLJS-1966: cljs.test assumes the output directory is '\/out\/' when \n> determining the filename for a failed or errored test result.\n> * CLJS-2191: Clean up doc references to clojure.spec.* in favor of \n> cljs.spec.*\n> * CLJS-2194: cljs.util\/relative-name bug\n> * CLJS-2195: npm-deps tests are not idempotent\n> * CLJS-2179: Add test for preprocess JS module as symbol\n> * CLJS-2152: \"is not a relative path\" exception thrown when `:libs` \n> directory is provided.\n> * CLJS-2193: :npm-deps dependencies are implicit\n> * CLJS-1797: Update aot_core to support build with MINGW on Windows\n> * CLJS-2189: Add test for :preloads\n> * CLJS-2188: Use :invalid-array-access instead of :invalid-aget \/ \n> :invalid-aset\n> * CLJS-2181: Can't compile string sources with modules\n> * CLJS-2185: Self-host: Docstrings for bootstrap helpers\n> * CLJS-2178: Add tests for `:npm-deps`\n> * CLJS-2177: NPM deps & JS modules fixes for Windows\n> * CLJS-2175: ES6 Module processing broken with Closure v20170626\n> * CLJS-2175: Add test to check ES6 module processing works\n> * CLJS-2176: module_deps.js: fix regexes for Windows paths\n> * CLJS-2173: Fix `npm install` when `:npm-deps` in Windows\n> * CLJS-2164: Require cljs.js results in warning about new unsafe-get macro\n> * CLJS-1998: Printing an Object with a null prototype throws an error\n> * CLJS-2158: cljs_base module generates empty goog.require\n> * CLJS-2157: Automatically generate cljs.loader\/set-loaded! call\n> * CLJS-2154: Provide compiler info & timing when compiling modules\n> * CLJS-2151: Rollback removal of dependency information for node targeted \n> compilation\n> * CLJS-2141: Self-host: cljs.js is using undeclared symbol lib\n> * CLJS-2145: inode_find issue with hash-map\n> * CLJS-2142: Can't instrument a namespace containing constants\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.854 Leon Grapenthin Sun, 30 Jul 2017 11:48:05 -0700"},
{"body":"The shim is intentionally present regardless of target. You can disable\nthis behavior with `:process-shim false`. \nIf there's a more robust way for doo to determine the environment that's\nprobably a good idea too.\n\nDavid\n\nOn Sun, Jul 30, 2017 at 1:06 PM, Charles Loomis <c...@sixsq.com> wrote:\n\n> I\u2019ve encountered a problem when running unit tests with doo (phantomjs)\n> and the 1.9.854 release.\n>\n> With the new release, the problem is that doo always fails _after_ running\n> the defined tests with:\n>\n>     WARNING: doo's init function was not set\n>     #object[TypeError TypeError: undefined is not an object\n>       (evaluating 'process_exit.call')]\n>     TypeError: undefined is not an object (evaluating 'process_exit.call\u2019)\n>\n> This is caused by doo not finding the correct exit function.\n>\n> To distinguish between browser\/nodejs targets, doo checks for the\n> existence of js\/process. If it exists, it assumes that nodejs is being used\n> and tries to extract the exit function from from the js\/process object.\n> Otherwise it uses the *exit-fn* dynamic variable. This logic works as\n> expected in 1.9.671.\n>\n> In 1.9.854, a shim for the nodejs process library was added\n> (src\/main\/cljs\/process\/env.cljs). This creates a js\/process object which\n> looks like:\n>\n>     {\n>       \"env\": {\n>         \"NODE_ENV\": \"development\"\n>       }\n>     }\n>\n> even when nodejs is not being targeted.  This causes the doo logic for\n> looking up the exit function to fail.\n>\n> It looks like either:\n>\n>  1) doo needs to be updated to use a more precise test when targeting\n> nodejs or\n>  2) clojurescript should define the js\/process shim only when nodejs is\n> targeted\n>\n> I\u2019d like some feedback on this to understand where to follow up with this\n> issue.\n>\n>\n> Cal\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] ANN: ClojureScript 1.9.854 David Nolen Sun, 30 Jul 2017 11:32:17 -0700"},
{"body":"I\u2019ve encountered a problem when running unit tests with doo (phantomjs) and the \n1.9.854 release. \nWith the new release, the problem is that doo always fails _after_ running the \ndefined tests with:\n\n    WARNING: doo's init function was not set\n    #object[TypeError TypeError: undefined is not an object\n      (evaluating 'process_exit.call')]\n    TypeError: undefined is not an object (evaluating 'process_exit.call\u2019)\n\nThis is caused by doo not finding the correct exit function.\n\nTo distinguish between browser\/nodejs targets, doo checks for the existence of \njs\/process. If it exists, it assumes that nodejs is being used and tries to \nextract the exit function from from the js\/process object. Otherwise it uses \nthe *exit-fn* dynamic variable. This logic works as expected in 1.9.671. \n\nIn 1.9.854, a shim for the nodejs process library was added \n(src\/main\/cljs\/process\/env.cljs). This creates a js\/process object which looks \nlike:\n\n    {\n      \"env\": {\n        \"NODE_ENV\": \"development\"\n      }\n    }\n\neven when nodejs is not being targeted.  This causes the doo logic for looking \nup the exit function to fail. \n\nIt looks like either:\n\n 1) doo needs to be updated to use a more precise test when targeting nodejs or\n 2) clojurescript should define the js\/process shim only when nodejs is targeted\n\nI\u2019d like some feedback on this to understand where to follow up with this \nissue. \n\n\nCal\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] ANN: ClojureScript 1.9.854 Charles Loomis Sun, 30 Jul 2017 10:06:53 -0700"},
{"body":"What?\n\nA couple of tools for Clojure and ClojureScript to help you work with \nclojure.spec at the repl. \nWhere?\n\n[inspectable \"0.2.0\"]\nhttps:\/\/github.com\/jpmonettas\/inspectable\n\nSummary?\n\nInspectable contains two tools so far :\n\n- borwse-spec : A GUI spec registry browser.\n- why : A GUI that explains spec fails in a bunch of different situations.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] inspectable 0.2.0 now supports clojurescript Juan Monetta Sun, 30 Jul 2017 07:20:51 -0700"},
{"body":"Wow! Nice work... thanks so very much! Hoping to have some time soon to \ncontribute\/give back. \nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.854 Alan Moore Sat, 29 Jul 2017 17:46:48 -0700"},
{"body":"Works for me on iOS JavaScriptCore \ud83d\udc4d (RN 0.45). \n\nThanks David and all ClojureScript contributors! \nRangel\n\nP.S. The only issue with a library that I saw was \nwith \nhttps:\/\/github.com\/tailrecursion\/cljs-priority-map\/blob\/master\/src\/cljs\/tailrecursion\/priority_map.cljs#L4\n\n\n*Invalid :refer, var cljs.reader\/reader-error does not exist *\n\nI assume this is on the library side to fix with the latest ClojureScript \nupdate but just FYI if anyone runs into it.\n\nOn Friday, July 28, 2017 at 2:55:04 PM UTC-7, David Nolen wrote:\n>\n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>\n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>\n> Leiningen dependency information:\n>\n> [org.clojure\/clojurescript \"1.9.854\"]\n>\n> This is a significant feature release. Notable new features include\n> comprehensive NPM dependency support, overhauled code splitting,\n> enhanced JavaScript module preprocessing, declared global exports for\n> foreign libs, and checked array operations. There are also a large\n> number of fixes, changes, and minor enhancementes. For more detailed\n> descriptions of the major enhancements, please refer to the last month\n> of posts https:\/\/clojurescript.org\/news\/news.\n>\n> As always, feedback welcome!\n>\n> ## 1.9.854\n>\n> ### Enhancements\n> * CLJS-2280: Provide process.env :preload and auto-configure\n> * CLJS-2279: Infer `:module-type ` for provided `node_modules`\n> * CLJS-2250: Support :foreign-libs overrides via :provides\n> * CLJS-2243: Self-host: Add support for :global-exports\n> * CLJS-2232: Self-host: Add support for string-based requires\n> * add *print-fn-bodies* knob, set to false\n> * CLJS-2198: Safe array operations\n> * CLJS-2217: Support `:rename` for JS modules\n> * CLJS-2214: Support :global-exports for foreign libraries\n> * CLJS-1428: Add a cljs.core\/*command-line-args* var\n> * CLJS-2061: Support ns :require for JS libs, allow strings along with \n> symbol\n> * CLJS-2148: Add warnings for invalid use of aget and aset\n> * CLJS-2143: Add support for symbol preprocess values\n>\n> ### Changes\n> * CLJS-2273: Bump tools.reader to 1.0.3 and development dependencies\n> * CLJS-2235: Allow passing extra maven opts to build scripts\n> * CLJS-2267: Allow ^:const inlined vars to affect if emission\n> * CLJS-2245: Add support for using a local `node_modules` installation \n> through a new `:node-modules` compiler flag\n> * CLJS-2002: Don't throw when no *print-fn* is set\n> * support Clojure primitive array type hints, core.async no longer\n>   gives warnings\n> * CLJS-2213: Node.js target should use node_modules index to emit platform \n> specific require\n> * CLJS-2200: bump to tools.reader 1.0.2\n> * CLJS-2135: require macro prints last result of loaded-libs\n> * CLJS-2192: Add ChakraCore testing facilities\n> * CLJS-1800: Defer to tools.reader for cljs.reader functionality\n> * CLJS-2163: Clean up uses of aget \/ aset on objects\n> * CLJS-2184: Add `ns-publics` and `ns-imports`\n> * CLJS-2183: Assert arguments are quoted symbols in some core macros\n> * CLJS-2182: Assert argument to resolve is a quoted symbol\n> * CLJS-2186: Update docstrings for aget\/aset to be consistent with Clojure\n> * CLJS-2180: Allow compiling `:modules` with whitespace optimizations\n> * CLJS-1822: Use `:file-min` when processing JS modules with advanced \n> optimizations\n> * CLJS-2169: Error when compiling with :source-map and advanced \n> optimizations\n> * CLJS-2037: Throw if overwriting alias in current namespace\n> * CLJS-2160: Add loaded? and prefetch functions to cljs.loader\n> * CLJS-2148: Add unsafe-get and use goog.object\n> * CLJS-2161: Bump Closure Compiler to June 2017 release\n>\n> ### Fixes\n> * CLJS-1854: Self-host: Reload ns with const\n> * CLJS-2278: JavaScript object literals are printed wth keys that cannot \n> be read\n> * CLJS-2276: Self-host: Need test.check dep for CLJS-2275\n> * CLJS-2275: cljs.spec.alpha\/fdef resolves eagerly\n> * CLJS-2259: Extra .cljs_node_repl directory containing cljs.core output\n> * CLJS-2274: Update CI script to install deps\n> * CLJS-2269: Warn on top level code split loads\n> * CLJS-2272: Tests that depended on default install deps behavior failing\n> * CLJS-2255: Clean up :npm-deps\n> * CLJS-2263: Docstring for neg-int? backwards\n> * CLJS-2262: Correct comment that *warn-on-infer* is file-scope\n> * CLJS-2258: Stack overflow regression for sequence xform applied to \n> eduction\n> * CLJS-2256: Generated code doesn't add newline after sourceMappingURL \n> comment\n> * CLJS-2254: Module Indexing: Provide relative paths for a package's main \n> module\n> * CLJS-2248: Build API tests rely on Yarn\n> * CLJS-2239: Self-host: Add `:target :nodejs` to the docstrings in cljs.js\n> * CLJS-2251: Follow-up fix to CLJS-2249 and related commit\n> * CLJS-2249: Provide a test for d4b871cce73\n> * CLJS-2246: Revert CLJS-2245 and CLJS-2240 and fix `lein test`\n> * CLJS-2244: Orphaned processed JS modules breaks :modules\n> * CLJS-2242: Lots of undeclared Var warns in cljs.spec.gen.alpha\n> * CLJS-2241: Multiple requires of Node.js modules in non :nodejs target \n> are not idempotent at the REPL\n> * CLJS-2229: Ensure that new modules work works correctly with REPLs\n> * CLJS-2238: Perf regression with node module indexing\n> * CLJS-2240: don't shell out to module_deps.js if `:npm-deps` not specified\n> * CLJS-2230: Double checked arrays\n> * CLJS-2227: Squelch some of the array access tests\n> * CLJS-2228: Port CLJS-2226 to module_deps.js\n> * CLJS-1955: data_readers.cljc can't reference handlers in user code\n> * CLJS-2225: Need to add :checked-arrays to known compiler opts\n> * CLJS-2226: :npm-deps can't index scoped packages\n> * CLJS-2224: Resolve-var is wrong wrt. module resolution\n> * CLJS-2223: Self-host: Undeclared Var deps\/native-node-modules\n> * CLJS-2222: CI failing after CLJS-2217\n> * CLJS-2219: Enable JSC under test-simple\n> * CLJS-2218: Make ClojureScript aware of native node modules\n> * CLJS-2220: Add runtime :npm-deps tests\n> * CLJS-2212: Replace missing-js-modules with new index-node-modules-dir\n> * CLJS-2211: Add function to index a top-level node_modules installation\n> * CLJS-2208: module_deps.js is not compatible with older JS implementations\n> * CLJS-2207: cljs.test\/js-filename is using non-portable .endsWith\n> * CLJS-1764: Double warning for undeclared Var (REPL only)\n> * CLJS-2204: Tests failing with respect to lodash\/array namespace\n> * CLJS-2205: NPM deps: Correctly compute `:provides` if file ends in \n> `index.js`\n> * CLJS-2203: REPL is turning on all warnings by default (including \n> :invalid-array-access)\n> * CLJS-2201: Self-host: test-js-filename failing\n> * CLJS-2202: String requires should work from Cljs files in classpath\n> * CLJS-2199: String requires broken after recompile\n> * CLJS-2172: memfn docstring refers to Java and reflection\n> * CLJS-1959: under :nodejs target we should provide __dirname and \n> __filename constants\n> * CLJS-1966: cljs.test assumes the output directory is '\/out\/' when \n> determining the filename for a failed or errored test result.\n> * CLJS-2191: Clean up doc references to clojure.spec.* in favor of \n> cljs.spec.*\n> * CLJS-2194: cljs.util\/relative-name bug\n> * CLJS-2195: npm-deps tests are not idempotent\n> * CLJS-2179: Add test for preprocess JS module as symbol\n> * CLJS-2152: \"is not a relative path\" exception thrown when `:libs` \n> directory is provided.\n> * CLJS-2193: :npm-deps dependencies are implicit\n> * CLJS-1797: Update aot_core to support build with MINGW on Windows\n> * CLJS-2189: Add test for :preloads\n> * CLJS-2188: Use :invalid-array-access instead of :invalid-aget \/ \n> :invalid-aset\n> * CLJS-2181: Can't compile string sources with modules\n> * CLJS-2185: Self-host: Docstrings for bootstrap helpers\n> * CLJS-2178: Add tests for `:npm-deps`\n> * CLJS-2177: NPM deps & JS modules fixes for Windows\n> * CLJS-2175: ES6 Module processing broken with Closure v20170626\n> * CLJS-2175: Add test to check ES6 module processing works\n> * CLJS-2176: module_deps.js: fix regexes for Windows paths\n> * CLJS-2173: Fix `npm install` when `:npm-deps` in Windows\n> * CLJS-2164: Require cljs.js results in warning about new unsafe-get macro\n> * CLJS-1998: Printing an Object with a null prototype throws an error\n> * CLJS-2158: cljs_base module generates empty goog.require\n> * CLJS-2157: Automatically generate cljs.loader\/set-loaded! call\n> * CLJS-2154: Provide compiler info & timing when compiling modules\n> * CLJS-2151: Rollback removal of dependency information for node targeted \n> compilation\n> * CLJS-2141: Self-host: cljs.js is using undeclared symbol lib\n> * CLJS-2145: inode_find issue with hash-map\n> * CLJS-2142: Can't instrument a namespace containing constants\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.854 Rangel Spasov Fri, 28 Jul 2017 22:24:58 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.854\"]\n\nThis is a significant feature release. Notable new features include\ncomprehensive NPM dependency support, overhauled code splitting,\nenhanced JavaScript module preprocessing, declared global exports for\nforeign libs, and checked array operations. There are also a large\nnumber of fixes, changes, and minor enhancementes. For more detailed\ndescriptions of the major enhancements, please refer to the last month\nof posts https:\/\/clojurescript.org\/news\/news.\n\nAs always, feedback welcome!\n\n## 1.9.854\n\n### Enhancements\n* CLJS-2280: Provide process.env :preload and auto-configure\n* CLJS-2279: Infer `:module-type ` for provided `node_modules`\n* CLJS-2250: Support :foreign-libs overrides via :provides\n* CLJS-2243: Self-host: Add support for :global-exports\n* CLJS-2232: Self-host: Add support for string-based requires\n* add *print-fn-bodies* knob, set to false\n* CLJS-2198: Safe array operations\n* CLJS-2217: Support `:rename` for JS modules\n* CLJS-2214: Support :global-exports for foreign libraries\n* CLJS-1428: Add a cljs.core\/*command-line-args* var\n* CLJS-2061: Support ns :require for JS libs, allow strings along with\nsymbol\n* CLJS-2148: Add warnings for invalid use of aget and aset\n* CLJS-2143: Add support for symbol preprocess values\n\n### Changes\n* CLJS-2273: Bump tools.reader to 1.0.3 and development dependencies\n* CLJS-2235: Allow passing extra maven opts to build scripts\n* CLJS-2267: Allow ^:const inlined vars to affect if emission\n* CLJS-2245: Add support for using a local `node_modules` installation\nthrough a new `:node-modules` compiler flag\n* CLJS-2002: Don't throw when no *print-fn* is set\n* support Clojure primitive array type hints, core.async no longer\n  gives warnings\n* CLJS-2213: Node.js target should use node_modules index to emit platform\nspecific require\n* CLJS-2200: bump to tools.reader 1.0.2\n* CLJS-2135: require macro prints last result of loaded-libs\n* CLJS-2192: Add ChakraCore testing facilities\n* CLJS-1800: Defer to tools.reader for cljs.reader functionality\n* CLJS-2163: Clean up uses of aget \/ aset on objects\n* CLJS-2184: Add `ns-publics` and `ns-imports`\n* CLJS-2183: Assert arguments are quoted symbols in some core macros\n* CLJS-2182: Assert argument to resolve is a quoted symbol\n* CLJS-2186: Update docstrings for aget\/aset to be consistent with Clojure\n* CLJS-2180: Allow compiling `:modules` with whitespace optimizations\n* CLJS-1822: Use `:file-min` when processing JS modules with advanced\noptimizations\n* CLJS-2169: Error when compiling with :source-map and advanced\noptimizations\n* CLJS-2037: Throw if overwriting alias in current namespace\n* CLJS-2160: Add loaded? and prefetch functions to cljs.loader\n* CLJS-2148: Add unsafe-get and use goog.object\n* CLJS-2161: Bump Closure Compiler to June 2017 release\n\n### Fixes\n* CLJS-1854: Self-host: Reload ns with const\n* CLJS-2278: JavaScript object literals are printed wth keys that cannot be\nread\n* CLJS-2276: Self-host: Need test.check dep for CLJS-2275\n* CLJS-2275: cljs.spec.alpha\/fdef resolves eagerly\n* CLJS-2259: Extra .cljs_node_repl directory containing cljs.core output\n* CLJS-2274: Update CI script to install deps\n* CLJS-2269: Warn on top level code split loads\n* CLJS-2272: Tests that depended on default install deps behavior failing\n* CLJS-2255: Clean up :npm-deps\n* CLJS-2263: Docstring for neg-int? backwards\n* CLJS-2262: Correct comment that *warn-on-infer* is file-scope\n* CLJS-2258: Stack overflow regression for sequence xform applied to\neduction\n* CLJS-2256: Generated code doesn't add newline after sourceMappingURL\ncomment\n* CLJS-2254: Module Indexing: Provide relative paths for a package's main\nmodule\n* CLJS-2248: Build API tests rely on Yarn\n* CLJS-2239: Self-host: Add `:target :nodejs` to the docstrings in cljs.js\n* CLJS-2251: Follow-up fix to CLJS-2249 and related commit\n* CLJS-2249: Provide a test for d4b871cce73\n* CLJS-2246: Revert CLJS-2245 and CLJS-2240 and fix `lein test`\n* CLJS-2244: Orphaned processed JS modules breaks :modules\n* CLJS-2242: Lots of undeclared Var warns in cljs.spec.gen.alpha\n* CLJS-2241: Multiple requires of Node.js modules in non :nodejs target are\nnot idempotent at the REPL\n* CLJS-2229: Ensure that new modules work works correctly with REPLs\n* CLJS-2238: Perf regression with node module indexing\n* CLJS-2240: don't shell out to module_deps.js if `:npm-deps` not specified\n* CLJS-2230: Double checked arrays\n* CLJS-2227: Squelch some of the array access tests\n* CLJS-2228: Port CLJS-2226 to module_deps.js\n* CLJS-1955: data_readers.cljc can't reference handlers in user code\n* CLJS-2225: Need to add :checked-arrays to known compiler opts\n* CLJS-2226: :npm-deps can't index scoped packages\n* CLJS-2224: Resolve-var is wrong wrt. module resolution\n* CLJS-2223: Self-host: Undeclared Var deps\/native-node-modules\n* CLJS-2222: CI failing after CLJS-2217\n* CLJS-2219: Enable JSC under test-simple\n* CLJS-2218: Make ClojureScript aware of native node modules\n* CLJS-2220: Add runtime :npm-deps tests\n* CLJS-2212: Replace missing-js-modules with new index-node-modules-dir\n* CLJS-2211: Add function to index a top-level node_modules installation\n* CLJS-2208: module_deps.js is not compatible with older JS implementations\n* CLJS-2207: cljs.test\/js-filename is using non-portable .endsWith\n* CLJS-1764: Double warning for undeclared Var (REPL only)\n* CLJS-2204: Tests failing with respect to lodash\/array namespace\n* CLJS-2205: NPM deps: Correctly compute `:provides` if file ends in\n`index.js`\n* CLJS-2203: REPL is turning on all warnings by default (including\n:invalid-array-access)\n* CLJS-2201: Self-host: test-js-filename failing\n* CLJS-2202: String requires should work from Cljs files in classpath\n* CLJS-2199: String requires broken after recompile\n* CLJS-2172: memfn docstring refers to Java and reflection\n* CLJS-1959: under :nodejs target we should provide __dirname and\n__filename constants\n* CLJS-1966: cljs.test assumes the output directory is '\/out\/' when\ndetermining the filename for a failed or errored test result.\n* CLJS-2191: Clean up doc references to clojure.spec.* in favor of\ncljs.spec.*\n* CLJS-2194: cljs.util\/relative-name bug\n* CLJS-2195: npm-deps tests are not idempotent\n* CLJS-2179: Add test for preprocess JS module as symbol\n* CLJS-2152: \"is not a relative path\" exception thrown when `:libs`\ndirectory is provided.\n* CLJS-2193: :npm-deps dependencies are implicit\n* CLJS-1797: Update aot_core to support build with MINGW on Windows\n* CLJS-2189: Add test for :preloads\n* CLJS-2188: Use :invalid-array-access instead of :invalid-aget \/\n:invalid-aset\n* CLJS-2181: Can't compile string sources with modules\n* CLJS-2185: Self-host: Docstrings for bootstrap helpers\n* CLJS-2178: Add tests for `:npm-deps`\n* CLJS-2177: NPM deps & JS modules fixes for Windows\n* CLJS-2175: ES6 Module processing broken with Closure v20170626\n* CLJS-2175: Add test to check ES6 module processing works\n* CLJS-2176: module_deps.js: fix regexes for Windows paths\n* CLJS-2173: Fix `npm install` when `:npm-deps` in Windows\n* CLJS-2164: Require cljs.js results in warning about new unsafe-get macro\n* CLJS-1998: Printing an Object with a null prototype throws an error\n* CLJS-2158: cljs_base module generates empty goog.require\n* CLJS-2157: Automatically generate cljs.loader\/set-loaded! call\n* CLJS-2154: Provide compiler info & timing when compiling modules\n* CLJS-2151: Rollback removal of dependency information for node targeted\ncompilation\n* CLJS-2141: Self-host: cljs.js is using undeclared symbol lib\n* CLJS-2145: inode_find issue with hash-map\n* CLJS-2142: Can't instrument a namespace containing constants\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.854 David Nolen Fri, 28 Jul 2017 14:55:12 -0700"},
{"body":"Hi,\n\nI am trying to prepare a state to be used under cljs.js\/eval. Mostly of \nwhat I want to do could be achieved with a loader, but I was wondering if \nthere is any documentation or example on how to prepare a state before \nusage with eval? The only thing available is empty-state and I was not able \nto find any documentation on how to change empty-state to add more stuff to \nit. \nMost of my use cases are doing refers of namespaces.\n\nI would prefer to change the start state as in my case using the loader to \nachieve what I need is actually a hack (I know from the very start all that \nI want to add).\n\nThanks,\nTiago\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Best practice to prepare a state for cljs.js\/eval? Tiago Ant\u00e3o Sun, 23 Jul 2017 05:32:25 -0700"},
{"body":"Hi everybody!\n\nHow can I rewrite this function with spawn? I tried but got ENOENT errors. \n(def child-process (js\/require \"child_process\"))\n\n(defui build-configuration [this]\n  [:button {:type \"button\"\n            :style {:margin-left 15}}\n   \"Build\"]\n  :click #(do\n            (when (:builder @state)\n              (kill-process (:builder @state)))\n            (let [builder (.exec child-process (str \"cd \" (:path @this)\n                                                    (if (= (:build @this) \n\"dev\")\n                                                      (str (if (= \n(:platform @this) \"android\")\n                                                             \" && adb \nreverse tcp:8081 tcp:8081 && adb reverse tcp:3449 tcp:3449\"\n                                                             \"\")\n                                                           \" && re-natal \nuse-\" (:platform @this) \"-device \" (:device @this)\n                                                           \" && re-natal \nuse-figwheel && lein figwheel \" (:platform @this))\n                                                      \" && lein \nprod-build\")))]\n              (-> (.-stdout builder)\n                  (.on \"data\" (fn[data]\n                                (println data))))\n              (-> (.-stderr builder)\n                  (.on \"data\" (fn[data]\n                                (println data))))\n              (swap! state assoc :builder builder))))\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] rewrite exec with spawn Oleg Kilimnik Fri, 21 Jul 2017 07:59:25 -0700"},
{"body":"How can I rewrite the function with spawn instead of exec?\n\n(defui build-configuration [this]\n  [:button {:type \"button\"\n            :style {:margin-left 15}}\n   \"Build\"]\n  :click #(do\n            (when (:builder @state)\n              (kill-process (:builder @state)))\n            (let [builder (.exec child-process (str \"cd \" (:path @this)\n                                                    (if (= (:build @this) \n\"dev\")\n                                                      (str (if (= \n(:platform @this) \"android\")\n                                                             \" && adb \nreverse tcp:8081 tcp:8081 && adb reverse tcp:3449 tcp:3449\"\n                                                             \"\")\n                                                           \" && re-natal \nuse-\" (:platform @this) \"-device \" (:device @this)\n                                                           \" && re-natal \nuse-figwheel && lein figwheel \" (:platform @this))\n                                                      \" && lein \nprod-build\")))]\n              (-> (.-stdout builder)\n                  (.on \"data\" (fn[data]\n                                (println data))))\n              (-> (.-stderr builder)\n                  (.on \"data\" (fn[data]\n                                (println data))))\n              (swap! state assoc :builder builder)))) \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How can I rewrite the function with spawn instead of exec? Oleg Kilimnik Fri, 21 Jul 2017 07:59:21 -0700"},
{"body":"Ah this is just what I was looking for. I will need to rearrange some of \nthe namespaces but this looks like a perfect way of implementing it. Thanks \nThomas! \nCrispin\n\nOn Tuesday, July 18, 2017 at 3:19:38 PM UTC+8, Thomas Heller wrote:\n>\n> You can easily achieve this by creating a CLJS namespace that \n> self-requires the macros. Having dedicated .macros namespaces is generally \n> not recommended.\n>\n> pixi\/something.cljs\n> (ns pixi.something\n>   (:require-macros [pixi.something]))\n>\n> pixi\/something.clj\n> (ns pixi.something)\n>\n> (defmacro foo [..] ..)\n>\n>\n> user\/code.cljs\n> (ns user.code\n>   (:require [pixi.something :refer (foo)))\n>\n> (foo)\n>\n> The user code does not need to worry about whether foo is a macro or not, \n> it is handled transparently by the compiler. You never need to \n> :refer-macros or :require-macros in the user code this way. And you can \n> manage dependent CLJS namespaces that only the macro uses by requiring them \n> in the .cljs companion file.\n>\n> HTH,\n> \/thomas\n>\n> On Monday, July 17, 2017 at 4:54:38 PM UTC+2, cri...@procrustes.net wrote:\n>>\n>> Hi there,\n>>\n>> I have a macro for use in cljs that injects code to make a function call \n>> to a function in a cljs namespace.  Now when I use that macro I have to \n>> :require the corresponding cljs namespace or during compilation I am \n>> flooded with superfluous: \"WARNING: Use of undeclared Var \n>> mycljsnamespace\/func at line ....\" messages.\n>>\n>> Is there a way to make the use of the macro in a cljs namespace add the \n>> cljs require statement to ensure that these warnings are suppressed?\n>>\n>> The function call in the macro is here: \n>> https:\/\/github.com\/infinitelives\/infinitelives.pixi\/blob\/master\/src\/clj\/infinitelives\/pixi\/macros.clj#L36\n>>\n>> and when using it, the compilation looks like:\n>>\n>> WARNING: Use of undeclared Var \n>> infinitelives.pixi.canvas\/get-default-canvas at line 15 src\/cljs\/...\n>> WARNING: Use of undeclared Var \n>> infinitelives.pixi.canvas\/get-default-canvas at line 15 src\/cljs\/...\n>> WARNING: Use of undeclared Var \n>> infinitelives.pixi.canvas\/get-default-canvas at line 11 src\/cljs\/...\n>> ...\n>>\n>> at this stage in my present project its at least 50 lines of these.\n>>\n>> if I require that name space in the client code that warning disappears \n>> but that requires the user of the macro to know that in advance, and be \n>> disciplined enough to do it.\n>>\n>> How do I *auto require* the namespace, when the macro is used?\n>>\n>> I found this thread from 2013: \n>> https:\/\/groups.google.com\/forum\/#!searchin\/clojurescript\/require$20in$20macro%7Csort:relevance\/clojurescript\/FNwwN87B2EE\/lLF-Tel977AJ\n>>\n>> In it, Jozef Wagner states: \"AFAIK there is no way to do this \n>> automatically\"\n>>\n>> Is this still the case?\n>>\n>> I see CLJS has supported since 1.9.293 : CLJS-1346: Support require \n>> outside of ns\n>>\n>> Can I make the macro inject the require into its output code so the \n>> \"WARNING: Use of undeclared Var\" is not emmitted?\n>>\n>> I have experimented with this but have been unable to make it work.\n>>\n>> Is this possible to do? If so, how can this be done?\n>>\n>> Regards\n>>\n>> Crispin\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Including a cljs namespace automatically apon use of clj macro crispin Tue, 18 Jul 2017 08:24:11 -0700"},
{"body":"Thanks wow I had no idea it was possible to securely sandbox a browser from\njavascript like that. I can't even imagine how that is done reliably but I\nwill explore it. \nMy use case is two fold: an Excel like formula language, and React.js\nexpression. Both only need pure functions. React itself doesn't need to run\nsecurely, just the user expressions.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] secure cljs eval of user generated code Dustin Getz Tue, 18 Jul 2017 06:59:09 -0700"},
{"body":"You can easily achieve this by creating a CLJS namespace that self-requires \nthe macros. Having dedicated .macros namespaces is generally not \nrecommended. \npixi\/something.cljs\n(ns pixi.something\n  (:require-macros [pixi.something]))\n\npixi\/something.clj\n(ns pixi.something)\n\n(defmacro foo [..] ..)\n\n\nuser\/code.cljs\n(ns user.code\n  (:require [pixi.something :refer (foo)))\n\n(foo)\n\nThe user code does not need to worry about whether foo is a macro or not, \nit is handled transparently by the compiler. You never need to \n:refer-macros or :require-macros in the user code this way. And you can \nmanage dependent CLJS namespaces that only the macro uses by requiring them \nin the .cljs companion file.\n\nHTH,\n\/thomas\n\nOn Monday, July 17, 2017 at 4:54:38 PM UTC+2, cri...@procrustes.net wrote:\n>\n> Hi there,\n>\n> I have a macro for use in cljs that injects code to make a function call \n> to a function in a cljs namespace.  Now when I use that macro I have to \n> :require the corresponding cljs namespace or during compilation I am \n> flooded with superfluous: \"WARNING: Use of undeclared Var \n> mycljsnamespace\/func at line ....\" messages.\n>\n> Is there a way to make the use of the macro in a cljs namespace add the \n> cljs require statement to ensure that these warnings are suppressed?\n>\n> The function call in the macro is here: \n> https:\/\/github.com\/infinitelives\/infinitelives.pixi\/blob\/master\/src\/clj\/infinitelives\/pixi\/macros.clj#L36\n>\n> and when using it, the compilation looks like:\n>\n> WARNING: Use of undeclared Var \n> infinitelives.pixi.canvas\/get-default-canvas at line 15 src\/cljs\/...\n> WARNING: Use of undeclared Var \n> infinitelives.pixi.canvas\/get-default-canvas at line 15 src\/cljs\/...\n> WARNING: Use of undeclared Var \n> infinitelives.pixi.canvas\/get-default-canvas at line 11 src\/cljs\/...\n> ...\n>\n> at this stage in my present project its at least 50 lines of these.\n>\n> if I require that name space in the client code that warning disappears \n> but that requires the user of the macro to know that in advance, and be \n> disciplined enough to do it.\n>\n> How do I *auto require* the namespace, when the macro is used?\n>\n> I found this thread from 2013: \n> https:\/\/groups.google.com\/forum\/#!searchin\/clojurescript\/require$20in$20macro%7Csort:relevance\/clojurescript\/FNwwN87B2EE\/lLF-Tel977AJ\n>\n> In it, Jozef Wagner states: \"AFAIK there is no way to do this \n> automatically\"\n>\n> Is this still the case?\n>\n> I see CLJS has supported since 1.9.293 : CLJS-1346: Support require \n> outside of ns\n>\n> Can I make the macro inject the require into its output code so the \n> \"WARNING: Use of undeclared Var\" is not emmitted?\n>\n> I have experimented with this but have been unable to make it work.\n>\n> Is this possible to do? If so, how can this be done?\n>\n> Regards\n>\n> Crispin\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Including a cljs namespace automatically apon use of clj macro Thomas Heller Tue, 18 Jul 2017 00:20:07 -0700"},
{"body":"Hi there,\n\nI have a macro for use in cljs that injects code to make a function call to \na function in a cljs namespace.  Now when I use that macro I have to \n:require the corresponding cljs namespace or during compilation I am \nflooded with superfluous: \"WARNING: Use of undeclared Var \nmycljsnamespace\/func at line ....\" messages. \nIs there a way to make the use of the macro in a cljs namespace add the \ncljs require statement to ensure that these warnings are suppressed?\n\nThe function call in the macro is here: \nhttps:\/\/github.com\/infinitelives\/infinitelives.pixi\/blob\/master\/src\/clj\/infinitelives\/pixi\/macros.clj#L36\n\nand when using it, the compilation looks like:\n\nWARNING: Use of undeclared Var infinitelives.pixi.canvas\/get-default-canvas \nat line 15 src\/cljs\/...\nWARNING: Use of undeclared Var infinitelives.pixi.canvas\/get-default-canvas \nat line 15 src\/cljs\/...\nWARNING: Use of undeclared Var infinitelives.pixi.canvas\/get-default-canvas \nat line 11 src\/cljs\/...\n...\n\nat this stage in my present project its at least 50 lines of these.\n\nif I require that name space in the client code that warning disappears but \nthat requires the user of the macro to know that in advance, and be \ndisciplined enough to do it.\n\nHow do I *auto require* the namespace, when the macro is used?\n\nI found this thread from 2013: \nhttps:\/\/groups.google.com\/forum\/#!searchin\/clojurescript\/require$20in$20macro%7Csort:relevance\/clojurescript\/FNwwN87B2EE\/lLF-Tel977AJ\n\nIn it, Jozef Wagner states: \"AFAIK there is no way to do this automatically\"\n\nIs this still the case?\n\nI see CLJS has supported since 1.9.293 : CLJS-1346: Support require outside \nof ns\n\nCan I make the macro inject the require into its output code so the \n\"WARNING: Use of undeclared Var\" is not emmitted?\n\nI have experimented with this but have been unable to make it work.\n\nIs this possible to do? If so, how can this be done?\n\nRegards\n\nCrispin\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Including a cljs namespace automatically apon use of clj macro crispin Mon, 17 Jul 2017 07:54:54 -0700"},
{"body":"Hi Dustin\n\nWhere are you wanting to evaluate this? \nSomething like https:\/\/github.com\/google\/caja or http:\/\/www.adsafe.org\/ may\nbe useful.\n\nWe probably need to know a bit more about the usage scenario to give more\nspecific advice.\n\n--\nDaniel.\n\nOn Sun, Jul 16, 2017 at 10:30 AM Dustin Getz <dustin.g...@gmail.com> wrote:\n\n> Is it theoretically possible to modify cljs compiler to remove all special\n> forms for outside-world effects? So for example, js\/window, js\/document,\n> js*, aset, cookies, console.log, XHR etc. If this were achieved, could we\n> evaluate arbitrary user supplied forms without fear? Would this be a secure\n> sandbox? Denial of service like an infinite loop would be a problem. A\n> monadic construct could be used to permit very controlled effects.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] secure cljs eval of user generated code Daniel Compton Sun, 16 Jul 2017 16:27:07 -0700"},
{"body":"Is it theoretically possible to modify cljs compiler to remove all special \nforms for outside-world effects? So for example, js\/window, js\/document, \njs*, aset, cookies, console.log, XHR etc. If this were achieved, could we \nevaluate arbitrary user supplied forms without fear? Would this be a secure \nsandbox? Denial of service like an infinite loop would be a problem. A \nmonadic construct could be used to permit very controlled effects. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] secure cljs eval of user generated code Dustin Getz Sat, 15 Jul 2017 15:30:34 -0700"},
{"body":"3rd post in the series is now up thanks to Mike Fixes\nhttps:\/\/clojurescript.org\/news\/2017-07-14-checked-array-access \nOn Mon, Jul 10, 2017 at 5:28 PM, David Nolen <dnolen.li...@gmail.com> wrote:\n\n> We have a series of blog posts in the queue that outline several major\n> enhancements to the ClojureScript compiler that will be available in the\n> next release. This is the first one in the series:\n>\n> https:\/\/clojurescript.org\/news\/2017-07-10-code-splitting\n>\n> Enjoy!\n> David\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: New Features coming to ClojureScript David Nolen Fri, 14 Jul 2017 08:17:11 -0700"},
{"body":"Awesome, thanks! It is nice to see all the hard work done by Maria, and now \nthese latest changes, making ClojureScript integration with modules so seamless. \nI'm teaching an HTML\/JS class at our local tech hub and have been including \nsome comparisons between js & cljs for interested\/advanced students. Node.js is \nour next topic so the timing of this is perfect (was not looking forward to \nexplaining away the last remaining pain points of using modules in cljs.)\n\nThanks again for all your work on ClojureScript!\n\nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: New Features coming to ClojureScript Alan Moore Thu, 13 Jul 2017 10:30:04 -0700"},
{"body":"Second post in the series is up\nhttps:\/\/clojurescript.org\/news\/2017-07-12-clojurescript-is-not-an-island-integrating-node-modules\nkindly contributed by Ant\u00f3nio Nuno Monteiro. \nEnjoy!\nDavid\n\nOn Mon, Jul 10, 2017 at 5:28 PM, David Nolen <dnolen.li...@gmail.com> wrote:\n\n> We have a series of blog posts in the queue that outline several major\n> enhancements to the ClojureScript compiler that will be available in the\n> next release. This is the first one in the series:\n>\n> https:\/\/clojurescript.org\/news\/2017-07-10-code-splitting\n>\n> Enjoy!\n> David\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: New Features coming to ClojureScript David Nolen Wed, 12 Jul 2017 10:48:48 -0700"},
{"body":"We have a series of blog posts in the queue that outline several major\nenhancements to the ClojureScript compiler that will be available in the\nnext release. This is the first one in the series: \nhttps:\/\/clojurescript.org\/news\/2017-07-10-code-splitting\n\nEnjoy!\nDavid\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] New Features coming to ClojureScript David Nolen Mon, 10 Jul 2017 14:29:12 -0700"},
{"body":"It might be worth including a discussion about when to use this library,\nand perhaps indicating that using it might not be a best-practice. \n:ret and :fn specs were originally validated by instrument, but this\nfeature was removed because Rich et al thought it redundant, and that there\nwere different (and arguably better) tools for validating :ret specs, e.g.\ncheck.\n\nhttps:\/\/groups.google.com\/d\/msg\/clojure\/JU6EmjtbRiQ\/WSrueFvsBQAJ\n\nFor what it's worth I understand why you might want to use this, and it's\nnice to have the option if you have a legacy test suite that you want to\nincorporate some specs\/validation with, but if you're using it you're doing\nexample based testing and not the generative testing which spec seems\nintended to encourage.\n\nR.\n\nOn 8 July 2017 at 19:06, Jeaye <cont...@jeaye.com> wrote:\n\n> Folks,\n>\n> I'm happy to announce that a new version of Orchestra has been released\n> this past week.\n>\n> # Where to find it?\n> https:\/\/github.com\/jeaye\/orchestra\n> [orchestra \"2017.07.04-1\"]\n>\n> # What is it?\n> Orchestra is a Clojure(Script) library made as a drop-in replacement for\n> clojure.spec.test.alpha, which provides custom instrumentation that\n> validates all aspects of function specs. By default, clojure.spec will only\n> instrument :args. This leaves out :ret and :fn from automatic validation;\n> Orchestra checks all of them for you.\n>\n> # What changed since 0.3.0?\n> ClojureScript support!\n>\n> # Any more info?\n> You can read my call to arms for instrumentation here:\n> https:\/\/blog.jeaye.com\/2017\/05\/31\/clojure-spec\/ Also, some notes on\n> porting Orchestra to ClojureScript, which extend to porting Clojure\n> projects to ClojureScript in general, here: https:\/\/blog.jeaye.com\/2017\/\n> 06\/30\/orchestra-cljs\/\n>\n> # When should I use it?\n> I strongly believe we can benefit from this instrumentation throughout the\n> entire development cycle, so I recommend both your tests and your\n> developments builds use instrumentation by default. If any functions\n> misbehave, you'll know immediately and you'll have the context to find out\n> why.\n>\n> Cheers,\n> Jeaye\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] [ANN] Orchestra 2017.07.04-1 (now supporting ClojureScript) Rick Moynihan Mon, 10 Jul 2017 07:45:41 -0700"},
{"body":"> Yes.  Currently optimization is something we are doing when compiling \n> clojurescript, but perhaps *ideally* optimization could be done after \n> bundling when all the javascript is available.   However, I realize this \n> may not actually work very well in practice since most modern js \n> applications include dozens or hundreds of npm libraries that are not \n> closure ready and would break in unexpected ways.  Perhaps this is why \n> UglyifyJS is more common for webpack users?  UglyifyJS does dead code \n> elimination as well I believe, is it as good? probably not? is it good \n> enough? not sure.\n> \n\nUglifyJS is not good enough in my opinion, not even close. The JS world has \n\"accepted\" that you need to make lots of many small files to make it \nacceptable. We don't since we have Closure.\n\n \n\n> Do we still need analyzer data after its compiled? Can't we just use the \n> javascript as a lib? I assume that google closure isn't written in cljs but \n> cljs has no problem using or optimizing it... perhaps the packages are \n> distributed as unoptimized google closure compatible js and the webpack \n> plugin turns google closure modules into commonjs modules? not sure. just \n> ideas. \n>\n\n\nYou need to analyzer data if you want to compile any .cljs. It is not \nneeded at runtime (which is where the closure library comes in).\n\n \n\n> Best optimized perhaps, but possibly not the best js dev ux.  Many js \n> developers don't want to run java as part of their build process and might \n> prefer to use uglifyjs even if the results are not as good.  \n>\n\nBut many js devs do optimize and the best results would probably be to put \n> the unoptimized closure together with the unoptimized javascript and then \n> optimize everything together. But my guess is that wont work in practice. \n>  UglifyJS I think is safer than closure, as good? probably not, good \n> enough? not sure.  Your solution probably produces best optimization, but \n> its worth asking if thats what devs care about the most?  Slower build \n> process with more complexity vs a faster website.  There will be devs on \n> both sides I think. \n>\n\n\nThis is one place where it is far more important to optimize for production \nusers not the developer UX. I care very little about the fact that my \nproduction build may take a while longer if the resulting .js my users have \nto download is substantially smaller with much better runtime performance. \nThe fear of Java is unreasonable and mostly FUD. If I run builds with \ncreate-react-app or create-react-native-app they are frequently much slower \nthan a :advanced compiled CLJS build.\n\nThere are still lots of places where we can optimize the dev UX but \nproduction concerns will always come first.\n\nJS integration is still a work in progress and will get a whole lot better \nsoon. Stay tuned. ;)\n\n\/thomas\n \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Mon, 10 Jul 2017 03:34:38 -0700"},
{"body":"On Sunday, July 9, 2017 at 8:06:00 PM UTC+10, Thomas Heller wrote:\n>\n> Hey,\n>\n> I understand what you want to achieve and I definitely want to make the \n> whole thing easier but some issues don't have an easy solution.\n>\n> TL;DR: It's complicated.\n> \n\nYeah! :)\n \n\n>\n> First we need to split compilation and bundling.\n>\n\n\nYes.  Currently optimization is something we are doing when compiling \nclojurescript, but perhaps *ideally* optimization could be done after \nbundling when all the javascript is available.   However, I realize this \nmay not actually work very well in practice since most modern js \napplications include dozens or hundreds of npm libraries that are not \nclosure ready and would break in unexpected ways.  Perhaps this is why \nUglyifyJS is more common for webpack users?  UglyifyJS does dead code \nelimination as well I believe, is it as good? probably not? is it good \nenough? not sure.\n \n\n>\n> CLJS->JS compilation just takes one .cljs file and compiles it to .js. To \n> do that it needs analyzer data of all CLJS dependencies. If you were to \n> publish compiled CLJS to npm you'd need to also ship the analyzer data \n> somehow. The other problem is that certain compiler options affect the \n> generated JS which means that for every .cljs file there are many possible \n> .js results. Another thing is that you also need to account for the \n> compiler version since that may also affect the output or the analyzer data \n> which then may affect other files.\n>\n\nDo we still need analyzer data after its compiled? Can't we just use the \njavascript as a lib? I assume that google closure isn't written in cljs but \ncljs has no problem using or optimizing it... perhaps the packages are \ndistributed as unoptimized google closure compatible js and the webpack \nplugin turns google closure modules into commonjs modules? not sure. just \nideas. \n \n\n>\n> The second part is bundling things together, which means reducing the \n> number of individual files down to a more reasonable number. shadow-cljs \n> enables JS tools to do that for us (eg. webpack, create-react-app or any \n> other), since those tools use \"require\" to discover dependencies.\n>\n> The best option for this however is to use the Closure Compiler but to get \n> the whole benefit of it you need to optimize your whole program, which \n> includes EVERY .js file. There is promising progress in Closure to support \n> optimizing common js and ES6 code but it is not quite there yet and can't \n> compile everything. It will be coming to shadow-cljs soon though, it is \n> already in CLJS but I didn't hook it up yet since I wanted to solve some \n> issues first. \n>\n\nBest optimized perhaps, but possibly not the best js dev ux.  Many js \ndevelopers don't want to run java as part of their build process and might \nprefer to use uglifyjs even if the results are not as good.  \n\n\n> :npm-module tries to bridge the gap a little but as soon as you don't \n> optimize your whole program you need externs to teach Closure about the \n> things it can't see. Which means you can still use :advanced compilation \n> for the CLJS\/Closure parts but the rest of the code remains untouched. It \n> also means that you need a second bundler (eg. webpack) to then combine the \n> Closure output with the remaining unoptimized parts.\n>\n\nBut many js devs do optimize and the best results would probably be to put \nthe unoptimized closure together with the unoptimized javascript and then \noptimize everything together. But my guess is that wont work in practice. \n UglifyJS I think is safer than closure, as good? probably not, good \nenough? not sure.  Your solution probably produces best optimization, but \nits worth asking if thats what devs care about the most?  Slower build \nprocess with more complexity vs a faster website.  There will be devs on \nboth sides I think.  \n \n\n>\n> Given all these constraints I don't think it is feasible to publish \n> compiled (but unbundled) CLJS code as a library to NPM. It would be \n> relatively easy to consume uncompiled .cljs code from NPM packages but \n> unless everybody agrees to do that it would just make things a whole lot \n> more complicated for everyone. Maven is also a whole lot better than NPM \n> IMHO, npm or yarn just have better UX (until something breaks).\n>\n\nI don't necessarily agree or disagree on mvn but npm is what modernjs devs \nuse and they are familiar with its quirks, maven has its own set of tools \nto troubleshoot dependency conflicts and js devs unfamiliar with java may \nhave more difficulty configuring repo authentication and troubleshooting \nthe errors.  I would rather deploy to npm, but if compile must happen down \nstream then I think your solution is a pretty good one. \n \n\n>\n> :npm-deps is a feature in CLJS that lets you declare which npm packages \n> your CLJS code requires to work. Technically this would need a complement \n> in package.json to allow declaring which CLJS packages the JS code needs. I \n> don't have a solution for that and I was and still am opposed to whole idea \n> of :npm-deps. It does however solve the issue from the CLJS perspective, \n> just not from the \"Play as a Team\" JS perspective.\n>\n> I do want integration to be painless and I do think shadow-cljs already \n> makes life easier for some. I am very interested to hear about any other \n> pain points people may have with CLJS<->JS interop. I tested webpack, \n> create-react-app and create-react-native-app. They are all work reasonably \n> well but I haven't gone beyond basic examples.\n>\n> I really don't have a good solution for the problem since part of the \n> solution must come from the JS world and I have basically no idea what \n> people are doing over there.\n>\n> The whole problem basically boils down to which bundler you want to use. \n>\n\nTrue a more general tool is probably better than a webpack plugin.\n \n\n>\n> I'm personally only considering the Closure Compiler for that and \n> shadow-cljs is trying to make that as easy as possible with support for \n> common JS \/ ES6 coming soon.\n>\n> If you want to use webpack or so that also works reasonably well already \n> but CLJS really is built with the Closure Compiler in mind so the end \n> result of this won't be optimal.\n>\n\n> If you want both that is always going to require more manual work for \n> :externs and come with certain caveats.\n>\n> I hope that made some sort of sense, I have been thinking about this a lot \n> but haven't gotten very far.\n>\n\nYeah. Hopefully my rambling is useful feedback, your goals are probably a \nbit different than mine and thats okay - its your tool :)  \n\n\n> \/thomas\n>\n> On Sunday, July 9, 2017 at 3:29:15 AM UTC+2, Kurt Harriger wrote:\n>>\n>> Thomas,\n>>\n>> First thank you for starting this project!\n>>\n>> I recently joined a team at Atlassian that uses ClojureScript to support \n>> collaborative editing.  I don't think I need to sell the community here on \n>> the advantages of ClojureScript, but I think packaging still needs work.\n>>\n>> If you use ClojureScript for your entire UI you probably don't have any \n>> issues, but in larger organizations we need to \"Play as a Team.\" It does \n>> not seem feasible or reasonable to expect that other teams switch to using \n>> the ClosureScript compiler and make their js libraries play nice with \n>> closure because the end result will be marginally better, especially given \n>> the work involved in ensuring they still work with advanced optimizations \n>> may be non-trivial.\n>>\n>> The only practical alternative I'm currently aware of is to precompile \n>> the ClojureScript with optimizations and have them include this as a script \n>> tag in their page.  The disadvantages of this are many:\n>>\n>> * separate download - not bundled with other js libraries\n>> * not commonjs \/ cannot require \/ pollutes global namespace \n>> * install\/upgrade\/versioning process is different \/ change script tag \n>> rather than npm\/yarn\n>> * each precompiled ClosureScript library will include closure and cljs \n>> again\n>>\n>> As we add support for multiple editors I want to split the library into \n>> multiple artifacts that can be released separately, however that last \n>> bullet point is undesirable.  I have had some success in adding a cljsbuild \n>> along side a webpack build, but CommonJS has solved a lot of pain points \n>> for JS devs and most modern js devs now expect an npm artifact. \n>>\n>> Although shadow-cljs doesn't solve having different install\/version \n>> process it does appear to solve the other issues and is better than using a \n>> script tag.\n>>\n>> I did have a general question though. I understand that if you compile \n>> multiple ClosureScript libraries independently each will end up with \n>> duplicate bits of closure and cljs core. Shadow-cljs, as I understand it, \n>> appears to solve this by first compiling all the ClosureScript code \n>> together and exposing it as a commonjs module. But thinking out-loud \n>> here...isn't sharing dependencies the problem npm is trying to solve? could \n>> we leverage that instead of reinvent it?  \n>>\n>> What if google closure libraries and cljs.core were published as their \n>> own commonjs npm libraries - precompiled but not minified yet? Couldn't \n>> cljs libraries then just 'require' them without resulting in another copy \n>> or requiring the closurescirpt compiler (and jvm)?  In my ideal world, I \n>> think I would be able to specify :npm-module as the clojurescript compiler \n>> target and it would generate js that can be packaged in npm that 'requires' \n>> rather than bundles cljs and closure.  Minification can be done downstream \n>> with *all* the javascript, not just the cljs code. I also found a closure \n>> plugin for webpack https:\/\/www.npmjs.com\/package\/webpack-closure-compiler \n>> (I never used it though), so maybe we can still get just as good if not \n>> better results doing it later? \n>>\n>> I'm not sure what would be involved in rewriting cljs output to require \n>> \"require\" closure and cljs.core as their own libraries, but maybe the \n>> partially solved already with \n>> https:\/\/github.com\/clojure\/clojurescript\/wiki\/JavaScript-Module-Support-(Alpha)\n>> ?\n>>\n>> Thanks!\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Kurt Harriger Mon, 10 Jul 2017 01:57:59 -0700"},
{"body":"Thanks Jeaye, I'm really happy to see this for CLJS too!\n\nOrchestra has been an excellent development time addition to our apps.\nChecking the :ret specs is very helpful for finding the error in code as\nclose as possible to the problem, rather than further downstream when a\nfurther spec fails. \nOn Sun, Jul 9, 2017 at 6:06 AM Jeaye <cont...@jeaye.com> wrote:\n\n> Folks,\n>\n> I'm happy to announce that a new version of Orchestra has been released\n> this past week.\n>\n> # Where to find it?\n> https:\/\/github.com\/jeaye\/orchestra\n> [orchestra \"2017.07.04-1\"]\n>\n> # What is it?\n> Orchestra is a Clojure(Script) library made as a drop-in replacement for\n> clojure.spec.test.alpha, which provides custom instrumentation that\n> validates all aspects of function specs. By default, clojure.spec will only\n> instrument :args. This leaves out :ret and :fn from automatic validation;\n> Orchestra checks all of them for you.\n>\n> # What changed since 0.3.0?\n> ClojureScript support!\n>\n> # Any more info?\n> You can read my call to arms for instrumentation here:\n> https:\/\/blog.jeaye.com\/2017\/05\/31\/clojure-spec\/ Also, some notes on\n> porting Orchestra to ClojureScript, which extend to porting Clojure\n> projects to ClojureScript in general, here:\n> https:\/\/blog.jeaye.com\/2017\/06\/30\/orchestra-cljs\/\n>\n> # When should I use it?\n> I strongly believe we can benefit from this instrumentation throughout the\n> entire development cycle, so I recommend both your tests and your\n> developments builds use instrumentation by default. If any functions\n> misbehave, you'll know immediately and you'll have the context to find out\n> why.\n>\n> Cheers,\n> Jeaye\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] [ANN] Orchestra 2017.07.04-1 (now supporting ClojureScript) Daniel Compton Sun, 09 Jul 2017 14:39:06 -0700"},
{"body":"Hey,\n\nI understand what you want to achieve and I definitely want to make the \nwhole thing easier but some issues don't have an easy solution. \nTL;DR: It's complicated.\n\nFirst we need to split compilation and bundling.\n\nCLJS->JS compilation just takes one .cljs file and compiles it to .js. To \ndo that it needs analyzer data of all CLJS dependencies. If you were to \npublish compiled CLJS to npm you'd need to also ship the analyzer data \nsomehow. The other problem is that certain compiler options affect the \ngenerated JS which means that for every .cljs file there are many possible \n.js results. Another thing is that you also need to account for the \ncompiler version since that may also affect the output or the analyzer data \nwhich then may affect other files.\n\nThe second part is bundling things together, which means reducing the \nnumber of individual files down to a more reasonable number. shadow-cljs \nenables JS tools to do that for us (eg. webpack, create-react-app or any \nother), since those tools use \"require\" to discover dependencies.\n\nThe best option for this however is to use the Closure Compiler but to get \nthe whole benefit of it you need to optimize your whole program, which \nincludes EVERY .js file. There is promising progress in Closure to support \noptimizing common js and ES6 code but it is not quite there yet and can't \ncompile everything. It will be coming to shadow-cljs soon though, it is \nalready in CLJS but I didn't hook it up yet since I wanted to solve some \nissues first. \n\n:npm-module tries to bridge the gap a little but as soon as you don't \noptimize your whole program you need externs to teach Closure about the \nthings it can't see. Which means you can still use :advanced compilation \nfor the CLJS\/Closure parts but the rest of the code remains untouched. It \nalso means that you need a second bundler (eg. webpack) to then combine the \nClosure output with the remaining unoptimized parts.\n\nGiven all these constraints I don't think it is feasible to publish \ncompiled (but unbundled) CLJS code as a library to NPM. It would be \nrelatively easy to consume uncompiled .cljs code from NPM packages but \nunless everybody agrees to do that it would just make things a whole lot \nmore complicated for everyone. Maven is also a whole lot better than NPM \nIMHO, npm or yarn just have better UX (until something breaks).\n\n:npm-deps is a feature in CLJS that lets you declare which npm packages \nyour CLJS code requires to work. Technically this would need a complement \nin package.json to allow declaring which CLJS packages the JS code needs. I \ndon't have a solution for that and I was and still am opposed to whole idea \nof :npm-deps. It does however solve the issue from the CLJS perspective, \njust not from the \"Play as a Team\" JS perspective.\n\nI do want integration to be painless and I do think shadow-cljs already \nmakes life easier for some. I am very interested to hear about any other \npain points people may have with CLJS<->JS interop. I tested webpack, \ncreate-react-app and create-react-native-app. They are all work reasonably \nwell but I haven't gone beyond basic examples.\n\nI really don't have a good solution for the problem since part of the \nsolution must come from the JS world and I have basically no idea what \npeople are doing over there.\n\nThe whole problem basically boils down to which bundler you want to use.\n\nI'm personally only considering the Closure Compiler for that and \nshadow-cljs is trying to make that as easy as possible with support for \ncommon JS \/ ES6 coming soon.\n\nIf you want to use webpack or so that also works reasonably well already \nbut CLJS really is built with the Closure Compiler in mind so the end \nresult of this won't be optimal.\n\nIf you want both that is always going to require more manual work for \n:externs and come with certain caveats.\n\nI hope that made some sort of sense, I have been thinking about this a lot \nbut haven't gotten very far.\n\n\/thomas\n\nOn Sunday, July 9, 2017 at 3:29:15 AM UTC+2, Kurt Harriger wrote:\n>\n> Thomas,\n>\n> First thank you for starting this project!\n>\n> I recently joined a team at Atlassian that uses ClojureScript to support \n> collaborative editing.  I don't think I need to sell the community here on \n> the advantages of ClojureScript, but I think packaging still needs work.\n>\n> If you use ClojureScript for your entire UI you probably don't have any \n> issues, but in larger organizations we need to \"Play as a Team.\" It does \n> not seem feasible or reasonable to expect that other teams switch to using \n> the ClosureScript compiler and make their js libraries play nice with \n> closure because the end result will be marginally better, especially given \n> the work involved in ensuring they still work with advanced optimizations \n> may be non-trivial.\n>\n> The only practical alternative I'm currently aware of is to precompile the \n> ClojureScript with optimizations and have them include this as a script tag \n> in their page.  The disadvantages of this are many:\n>\n> * separate download - not bundled with other js libraries\n> * not commonjs \/ cannot require \/ pollutes global namespace \n> * install\/upgrade\/versioning process is different \/ change script tag \n> rather than npm\/yarn\n> * each precompiled ClosureScript library will include closure and cljs \n> again\n>\n> As we add support for multiple editors I want to split the library into \n> multiple artifacts that can be released separately, however that last \n> bullet point is undesirable.  I have had some success in adding a cljsbuild \n> along side a webpack build, but CommonJS has solved a lot of pain points \n> for JS devs and most modern js devs now expect an npm artifact. \n>\n> Although shadow-cljs doesn't solve having different install\/version \n> process it does appear to solve the other issues and is better than using a \n> script tag.\n>\n> I did have a general question though. I understand that if you compile \n> multiple ClosureScript libraries independently each will end up with \n> duplicate bits of closure and cljs core. Shadow-cljs, as I understand it, \n> appears to solve this by first compiling all the ClosureScript code \n> together and exposing it as a commonjs module. But thinking out-loud \n> here...isn't sharing dependencies the problem npm is trying to solve? could \n> we leverage that instead of reinvent it?  \n>\n> What if google closure libraries and cljs.core were published as their own \n> commonjs npm libraries - precompiled but not minified yet? Couldn't cljs \n> libraries then just 'require' them without resulting in another copy or \n> requiring the closurescirpt compiler (and jvm)?  In my ideal world, I think \n> I would be able to specify :npm-module as the clojurescript compiler target \n> and it would generate js that can be packaged in npm that 'requires' rather \n> than bundles cljs and closure.  Minification can be done downstream with \n> *all* the javascript, not just the cljs code. I also found a closure plugin \n> for webpack https:\/\/www.npmjs.com\/package\/webpack-closure-compiler (I \n> never used it though), so maybe we can still get just as good if not better \n> results doing it later? \n>\n> I'm not sure what would be involved in rewriting cljs output to require \n> \"require\" closure and cljs.core as their own libraries, but maybe the \n> partially solved already with \n> https:\/\/github.com\/clojure\/clojurescript\/wiki\/JavaScript-Module-Support-(Alpha)\n> ?\n>\n> Thanks!\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Sun, 09 Jul 2017 03:06:22 -0700"},
{"body":"I understand it is important since only a small portion of the relatively\nlarge closure code base is used in any given app... but isn't this part of\nwhat the uglify plugin and\/or webpack-closure-compiler does? Are you saying\nthat dead code elimination will not work as well after the code has been\ncommonjs-ified? Perhaps it will still work well enough? \n\n\nOn Sun, Jul 9, 2017 at 1:34 PM Dustin Getz <dustin.g...@gmail.com> wrote:\n\n> Closure is also doing dead code elimination which is only possible if you\n> code in a restricted dialect of javascript, which cljs compiler does emit.\n> Dead code elimination is important because, for example, the standard\n> library and data structures are not implemented naively and bundled with\n> the js vm, the standard lib has to be shipped on the wire and parsed.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/AGXku7Ous0Y\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Kurt Harriger Sat, 08 Jul 2017 22:27:45 -0700"},
{"body":"Closure is also doing dead code elimination which is only possible if you\ncode in a restricted dialect of javascript, which cljs compiler does emit.\nDead code elimination is important because, for example, the standard\nlibrary and data structures are not implemented naively and bundled with\nthe js vm, the standard lib has to be shipped on the wire and parsed. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Dustin Getz Sat, 08 Jul 2017 20:35:35 -0700"},
{"body":"Thomas,\n\nFirst thank you for starting this project! \nI recently joined a team at Atlassian that uses ClojureScript to support \ncollaborative editing.  I don't think I need to sell the community here on \nthe advantages of ClojureScript, but I think packaging still needs work.\n\nIf you use ClojureScript for your entire UI you probably don't have any \nissues, but in larger organizations we need to \"Play as a Team.\" It does \nnot seem feasible or reasonable to expect that other teams switch to using \nthe ClosureScript compiler and make their js libraries play nice with \nclosure because the end result will be marginally better, especially given \nthe work involved in ensuring they still work with advanced optimizations \nmay be non-trivial.\n\nThe only practical alternative I'm currently aware of is to precompile the \nClojureScript with optimizations and have them include this as a script tag \nin their page.  The disadvantages of this are many:\n\n* separate download - not bundled with other js libraries\n* not commonjs \/ cannot require \/ pollutes global namespace \n* install\/upgrade\/versioning process is different \/ change script tag \nrather than npm\/yarn\n* each precompiled ClosureScript library will include closure and cljs again\n\nAs we add support for multiple editors I want to split the library into \nmultiple artifacts that can be released separately, however that last \nbullet point is undesirable.  I have had some success in adding a cljsbuild \nalong side a webpack build, but CommonJS has solved a lot of pain points \nfor JS devs and most modern js devs now expect an npm artifact. \n\nAlthough shadow-cljs doesn't solve having different install\/version process \nit does appear to solve the other issues and is better than using a script \ntag.\n\nI did have a general question though. I understand that if you compile \nmultiple ClosureScript libraries independently each will end up with \nduplicate bits of closure and cljs core. Shadow-cljs, as I understand it, \nappears to solve this by first compiling all the ClosureScript code \ntogether and exposing it as a commonjs module. But thinking out-loud \nhere...isn't sharing dependencies the problem npm is trying to solve? could \nwe leverage that instead of reinvent it?  \n\nWhat if google closure libraries and cljs.core were published as their own \ncommonjs npm libraries - precompiled but not minified yet? Couldn't cljs \nlibraries then just 'require' them without resulting in another copy or \nrequiring the closurescirpt compiler (and jvm)?  In my ideal world, I think \nI would be able to specify :npm-module as the clojurescript compiler target \nand it would generate js that can be packaged in npm that 'requires' rather \nthan bundles cljs and closure.  Minification can be done downstream with \n*all* the javascript, not just the cljs code. I also found a closure plugin \nfor webpack https:\/\/www.npmjs.com\/package\/webpack-closure-compiler (I never \nused it though), so maybe we can still get just as good if not better \nresults doing it later? \n\nI'm not sure what would be involved in rewriting cljs output to require \n\"require\" closure and cljs.core as their own libraries, but maybe the \npartially solved already with \nhttps:\/\/github.com\/clojure\/clojurescript\/wiki\/JavaScript-Module-Support-(Alpha)?\n\nThanks!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Kurt Harriger Sat, 08 Jul 2017 18:29:36 -0700"},
{"body":"Folks,\n\nI'm happy to announce that a new version of Orchestra has been released this \npast week. \n# Where to find it?\nhttps:\/\/github.com\/jeaye\/orchestra\n[orchestra \"2017.07.04-1\"]\n\n# What is it?\nOrchestra is a Clojure(Script) library made as a drop-in replacement for \nclojure.spec.test.alpha, which provides custom instrumentation that validates \nall aspects of function specs. By default, clojure.spec will only instrument \n:args. This leaves out :ret and :fn from automatic validation; Orchestra checks \nall of them for you.\n\n# What changed since 0.3.0?\nClojureScript support!\n\n# Any more info?\nYou can read my call to arms for instrumentation here: \nhttps:\/\/blog.jeaye.com\/2017\/05\/31\/clojure-spec\/ Also, some notes on porting \nOrchestra to ClojureScript, which extend to porting Clojure projects to \nClojureScript in general, here: \nhttps:\/\/blog.jeaye.com\/2017\/06\/30\/orchestra-cljs\/\n\n# When should I use it?\nI strongly believe we can benefit from this instrumentation throughout the \nentire development cycle, so I recommend both your tests and your developments \nbuilds use instrumentation by default. If any functions misbehave, you'll know \nimmediately and you'll have the context to find out why.\n\nCheers,\nJeaye\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Orchestra 2017.07.04-1 (now supporting ClojureScript) Jeaye Sat, 08 Jul 2017 11:07:14 -0700"},
{"body":"It's noteworthy that this behavior again changes after advanced builds. \nThere is a related ticket here: \nhttps:\/\/dev.clojure.org\/jira\/browse\/CLJS-2038\n\nIt's probably best to avoid redefining recursive functions for anything \nnon-dev stuff.\n\n- Andre\n\nOn Monday, October 24, 2016 at 1:31:13 AM UTC+2, Aravindh Johendran wrote:\n>\n> Hi Mike,\n>\n> Thanks. Yes, it is the exact same issue because of call to shadowing local \n> symbol. Memoization, tracing, etc. are iimpacted by this.\n> Seems to me this is an optimization and shouldn't be default behavior.\n>\n>\n> (defn fib1 [n]\n>   (if (< n 2)\n>     n\n>     (+ (fib1 (dec n))\n>       (fib1 (dec (dec n))))))\n>       \n> (defn fib2 [n]\n>   (if (< n 2)\n>     n\n>     (+ (cljs.user\/fib2 (dec n))\n>       (cljs.user\/fib2 (dec (dec n))))))\n>\n>  On Replete repl and iPad Pro:\n>\n> (time (fib1 20))\n> \"Elapsed time: 2.000000 msecs\"\n> 6765\n>\n> (time (fib2 20))\n> \"Elapsed time: 3.000000 msecs\"\n> 6765\n>\n> => (time (fib1 35))\n> \"Elapsed time: 1491.000000 msecs\"\n> 9227465\n>\n> => (time (fib2 35))\n> \"Elapsed time: 2159.000000 msecs\"\n> 9227465\n>\n> => (time (fib1 38))\n> \"Elapsed time: 6335.000000 msecs\"\n> 39088169\n>\n> => (time (fib2 38))\n> \"Elapsed time: 9162.000000 msecs\"\n> 39088169\n>\n>\n> I'll play around with performance numbers on Planck with static fns etc. \n> later.\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Differences in emitted javascript for recursive function definitions AndyR Wed, 05 Jul 2017 21:55:30 -0700"},
{"body":"This issue has been resolved! :-) \nLooks like http:\/\/dev.clojure.org\/jira\/browse\/CLJS-1495 \n<http:\/\/www.google.com\/url?q=http%3A%2F%2Fdev.clojure.org%2Fjira%2Fbrowse%2FCLJS-1495&sa=D&sntz=1&usg=AFQjCNGuxu0a5o-oNr8s_0bVFlAnNwtZMA>\n could \nbe closed. \nThanks to everyone contributing so much to clojurescript!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Differences in emitted javascript for recursive function definitions Aravindh Johendran Wed, 05 Jul 2017 20:07:31 -0700"},
{"body":"Nick have you seen\nhttps:\/\/www.reddit.com\/r\/Clojure\/search?q=graphql&restrict_sr=on&sort=relevance&t=all\n? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How do you use GraphQL with Clojurescript? Dustin Getz Wed, 05 Jul 2017 15:24:55 -0700"},
{"body":"My pleasure; Happy to have been helpful.\n\nI'll clarify that I think om-next is probably going to be the most Clojuric\nand well-trod approach to GraphQL style web development with\nClojure\/Script. However, I personally prefer Reagent over Om. This is part\nof why I started down the route of developing Datsync. I hoped that I'd be\nable to decouple from the particulars of the React wrapper (om vs reagent\nvs rum vs quiescent etc), and have something more standalone. But we're\nquite a bit further from being generally production ready, so factor that\nin as you will. And to be clear, I think Om is great, so don't let my\npreferences steer you away. But maybe also consider tinkering with Reagent\na bit for contrast. \nCheers\n\nChris\n\n\nOn Wed, Jul 5, 2017 at 11:25 AM, Nick Pavlica <lini...@gmail.com> wrote:\n\n> Hi Chris,\n>   Lots of great information here!  It sounds like your preference is\n> Om(next), which sounds very interesting.  I think that I'll have to dig in\n> and play with it before things really start to click.  I'm sure I'll have\n> many more questions once I get a better handle on Clojurescript approach.\n>\n> Thanks Again!!\n> -- Nick\n>\n> On Saturday, July 1, 2017 at 3:19:59 PM UTC-6, Christopher Small wrote:\n>>\n>> Hi Nick\n>>\n>> I'll try not to get carried away here...\n>>\n>> First off, folks in the Clojure and ClojureScript communities are\n>> absolutely familiar with, inspired by, and building on top of or in the\n>> direction of GraphQL. David Nolen, the author of Om and the lead\n>> ClojureScript developer, has build om-next which is more or less a Clojury\n>> take on the GraphQL idea. The insight there, which Dustin hints to, is that\n>> Datomic has this thing called a pull query you can execute, which is more\n>> or less isomorphic (I guess if it's more or less I should just say\n>> homomorphic...) to the GraphQL query. Om-next is basically just \"let's\n>> close that gap\", and most of the gap is stuff like pagination and sorting\n>> of collections. So it gives you a way of describing these things directly\n>> in your pull queries. The nice thing about the pull query, is it's just a\n>> data structure, so it's very composable. You can build queries up\n>> programatically, which is really lovely. This pattern of building programs\n>> around the composition of data structures is really a cornerstone of the\n>> Clojure philosophy.\n>>\n>> As I think some others have pointed out here, there seem to be others\n>> experimenting more directly with the GraphQL api. But om-next is really no\n>> less agnostic about a lot of things than GraphQL. It's not really tied to\n>> Datomic, except in that it inherits the pull query syntax. But you can\n>> implement the resolvers and such to work with any backend storage mechanism\n>> (and long as you can traverse the relationships). The Datomic integration\n>> happens to be trivial, which is nice, and opens up other possibilities.\n>> However, Datomic is not the only \"Datomic\" in a sense. DataScript is a cljc\n>> (meaning, it can compile to and be used from both Clojure AND ClojureScript\n>> (And JS actually)) implementation of an in memory version of the Datomic\n>> API. It's actually surprisingly feature complete, and a great way to\n>> experiment with the underlying data model, pull queries, and even Datalog\n>> (a query language also baked into Datomic which is more expressive than\n>> SQL, and better for querying graph relations). The folks at Mozilla have\n>> also started working on Mentat, a Rust (I believe) implementation of a\n>> Datomic like database on top of SQLite. It's very clear to me with all the\n>> activity around these projects that while Datomic remains a very powerful\n>> system with many features these other projects will likely never aim for,\n>> the overall idea has started catching on, and is worth paying attention to.\n>>\n>> Part of what makes the om-next approach so fascinating is that Datomic's\n>> data model is based on RDF. If you're not familiar with it, RDF is a web\n>> standard, and the de facto data language of the Semantic Web (also manifest\n>> as web standards). It's part of the vision of the computable web of data.\n>> The idea is that all data should be self-describing, globally meaningful,\n>> and infinitely extensible. There are vocabularies which can be described in\n>> RDF data, which themselves describe the schema and meaning of other data.\n>> It's super brilliant stuff, and actually really simple! Data is organized\n>> as (entity, attribute, value) triples of \"facts\". The key is that as long\n>> as your attributes are globally meaningful, you can merge information about\n>> an entity without ever worrying about overwriting other information about\n>> that entity. This gives us extensibility. In Clojure and Datomic, these\n>> globally meaninful attributes are achieved via namespaced keywords, which\n>> is also: brilliant and simple. We can also have entities that point to\n>> other entities, giving us polymorphic entity relationships. Datomic owes\n>> some of it's brilliance and I think success to making this collection of\n>> ideas a bit simpler, more approachable and more idiomatic. RDF has been a\n>> great idea waiting for someone to come around and maximize it. And Datomic\n>> is not alone. Look at other companies like MarkLogic who've built big\n>> businesses around RDF technology. By contrast, GraphQL is an idea that was\n>> hacked together kind of recently, is not as far as I know a standard\n>> (please correct me if I'm wrong here), and doesn't have namespaced\n>> attributes, so you're a little stuck not being able to get all of the\n>> natural polymorphism and extensibility of Datomic and friends as easily.\n>> However, it's also proven that streamlining the communication of data from\n>> server to client, and stripping out all of our bloated controllers and REST\n>> apis is possible, and that it can dramatically shrink code bases and\n>> accelerate development, which is really awesome. But in short, it's really\n>> worth seeing what the Clojure community is doing with these ideas, because\n>> it definitely adds some dimensions of awesomeness.\n>>\n>> I'd be remiss if I did not mention that I'm working with some folks on\n>> building out Datsync, a system for syncing Datomic\/DataScript data (EAV \/\n>> triple data, in technical terms) between nodes in a network (either server\n>> client or P2P). Here, our goal is to extend the scope of what om-next\n>> describes by automating the synchronization of EAV triples given that this\n>> is what your data looks like. We do plan to support om-next style pull\n>> query syntax (so you'd be able to differentially sync using something more\n>> or less equivalent to a GraphQL query). But we're also considering\n>> implementing a reactive, incrementally maintained, eventually consistent\n>> Datalog engine. It's been shown that a subset of Datalog is more or less\n>> the most expressive eventually consistent language you can construct, so\n>> this effectively means we'll have maxed out what you can describe without\n>> needing coordination between peers (and hence some kind of consensus\n>> algorithm, like Raft or Paxos). In general, it's a really lovely complement\n>> to the pull query. Taking a step back though, the audacious goal of Datsync\n>> is to more or less one-up GraphQL by having the full expressiveness of\n>> Datalog+pull for the description of synchronization scope, together with\n>> the flexibility of RDF data for data modelling, and almost 0 hook-up (you\n>> won't have to implement resolvers or anything; just plug in an\n>> synchronize). There are some caveats to this of course, and there will be\n>> plenty of work exploring this paradigm, but we're very excited by the\n>> potentialities!\n>>\n>> As for your comments about your experience coming to the Clojure\n>> ecosystem, I really appreciate your voice here. The Clojure community is\n>> full of extremely bright folks working on lots of really wonderful things,\n>> and it can feel a little overwhelming coming to so many new ideas and ways\n>> of doing things at once. Having done ruby and rails development in the past\n>> prior to Clojure, I can testify to that feeling. So, while I can say that\n>> it does get better, there have been discussions in the community of late\n>> about how we can reduce the burden here. So again, I thank you for voicing\n>> your perception of things here. However, I can also say having poked a\n>> stick at various JS tooling that the ClojureScript ecosystem anyway feels\n>> way saner to me. There are two build systems, but to at least some extent\n>> they are compatible. Contrast that with Python's infinite menagerie of\n>> tooling. Also, FP is getting more popular in JS, so folks start bringing in\n>> libraries to help with that, and instantly, confusion ensues about which\n>> one, how they handle this edge case, etc. In contrast, ClojureScript has\n>> good pure data structures built right into the language, as well as all\n>> (well, most) of the well thought out functional programming utilities baked\n>> into the clojure.core namespace, so there's never a question about any of\n>> that. And by building on the Google Closure compiler, ClojureScript is able\n>> to leverage a bunch of useful properties of that sytem automatically,\n>> without any real thought, such as code shaking, browser compatibility, etc.\n>> And yes, it's a little confusing some times figuring out which lib works on\n>> front end versus back end, but honestly? This is way better than the\n>> alternative in my opinion. What other functional language has as high a\n>> utilization across browser, server and distributed system? That's a lot of\n>> power to pack into the punch of one well thought out language. So I'd argue\n>> that the mild discomfort of coming into the scene and having to figure out\n>> what libs are for clojure and which for clojurescript is more or less worth\n>> it, cause in the end it's only giving you more options. And I think now\n>> that we have .cljc files for doing this, more and more libraries are doing\n>> this \"first-class\" now, and for old libs, they are frequently rewritten to\n>> work with both after the fact, so the situation is improving overall. But\n>> that doesn't mean there isn't more we can do to make the situation better.\n>>\n>> Ok... I think I got carried away... but hopefully that 2c was useful.\n>>\n>> Chris\n>>\n>>\n>> On Friday, June 30, 2017 at 8:28:22 PM UTC-7, mynomoto wrote:\n>>>\n>>> Hi Nick,\n>>>\n>>> At Xerpa[1], we have being using graphql on a clojurescript project.\n>>> It's an SPA that uses reagent with json api and its currently being\n>>> converted to a re-frame one with graphql.\n>>>\n>>> We studied the possibility of using relay modern and apollo client but\n>>> decided to not use them at the moment.\n>>>\n>>> We started using graphql-builder[2] which is like yesql[3] but for\n>>> graphql queries meaning that you write queries in another file directly\n>>> using graphql and you can use those from clojurescript functions passing\n>>> parameters when needed. It worked really well for the first couple of views\n>>> but we found it not flexible enough for our needs in different views.\n>>>\n>>> After more research we found a new library venia[4] that uses clojure\n>>> data structures to generate graphql queries. We needed a mechanism for\n>>> merging queries requested by each component and requesting the merged query\n>>> when the view changed. We wrote that in house and it's in production for a\n>>> couple of months. I hope to find time to write more about that sometime but\n>>> this is our experience so far.\n>>>\n>>> Cheers,\n>>>\n>>> mynomoto\n>>>\n>>> [1]: http:\/\/www.xerpa.com.br\/\n>>> [2]: https:\/\/github.com\/retro\/graphql-builder\n>>> [3]: https:\/\/github.com\/krisajenkins\/yesql\n>>> [4]: https:\/\/github.com\/Vincit\/venia\n>>>\n>>>\n>>> On Friday, June 30, 2017 at 9:52:40 PM UTC-3, Nick Pavlica wrote:\n>>>>\n>>>> Hi Dustin,\n>>>>   Thanks for addressing my question, and helping me better understand\n>>>> ClojureScript, and the community!\n>>>>\n>>>> On Friday, June 30, 2017 at 2:35:40 PM UTC-6, Dustin Getz wrote:\n>>>>>\n>>>>> It's not clear to me that the cljs community has converged on graphql\n>>>>> as a best practice. some people have certainly adopted it but it doesn't\n>>>>> feel like there are very many to me. for example, Datomic has been doing\n>>>>> what GraphQL offers plus much more since like 2013, it's not clear that\n>>>>> graphql adds anything to what cljs users have already been doing since at\n>>>>> least as long as facebook is been doing it internally. this isn't what you\n>>>>> asked, but could explain the silence.\n>>>>>\n>>>>\n>>>> I'm sure that GraphQL isn't that big of a deal from within the Clojure*\n>>>> community, but it's pretty exciting when you are coming from traditional\n>>>> environments where you deal with REST endpoints.  I've done a little\n>>>> research on Datomic, and it sounds awesome, but I haven't used it yet.  In\n>>>> my mind, GraphQL has some non technical advantages over Datomic.  The\n>>>> primary advantage is that it's an open specification, and not a proprietary\n>>>> product.  This allows for multiple implementations, and provides\n>>>> opportunities for multiple support points.  As it stands, there's only one\n>>>> company that has a Datomic implementation, and if they go down so does your\n>>>> tech stack.  Additionally, if the current implementation of Datomic doesn't\n>>>> have a feature or function you can't just add it yourself(At-least to my\n>>>> knowledge);  Another potential down side of having only one Datomic vendor,\n>>>> is the potential of price gouging leading to unforscene budgeting issues.\n>>>> I'm saying that Cognitech would act that way, but it's something that I\n>>>> think should at-leas be considered.  I'm sure an end to end Clojure stack,\n>>>> plus Datomic is pretty sweet, I'm just now sure how many can go that\n>>>> route.  It makes me wonder if someone isn't thinking about an open\n>>>> implementation.\n>>>>\n>>>> Many Thanks!\n>>>> -- Nick\n>>>>\n>>> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/\n> topic\/clojurescript\/VbJLJS9I-qM\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How do you use GraphQL with Clojurescript? Christopher Small Wed, 05 Jul 2017 13:43:54 -0700"},
{"body":"Hi Chris, \n  Lots of great information here!  It sounds like your preference is \nOm(next), which sounds very interesting.  I think that I'll have to dig in \nand play with it before things really start to click.  I'm sure I'll have \nmany more questions once I get a better handle on Clojurescript approach.  \nThanks Again!!\n-- Nick  \n\nOn Saturday, July 1, 2017 at 3:19:59 PM UTC-6, Christopher Small wrote:\n>\n> Hi Nick\n>\n> I'll try not to get carried away here...\n>\n> First off, folks in the Clojure and ClojureScript communities are \n> absolutely familiar with, inspired by, and building on top of or in the \n> direction of GraphQL. David Nolen, the author of Om and the lead \n> ClojureScript developer, has build om-next which is more or less a Clojury \n> take on the GraphQL idea. The insight there, which Dustin hints to, is that \n> Datomic has this thing called a pull query you can execute, which is more \n> or less isomorphic (I guess if it's more or less I should just say \n> homomorphic...) to the GraphQL query. Om-next is basically just \"let's \n> close that gap\", and most of the gap is stuff like pagination and sorting \n> of collections. So it gives you a way of describing these things directly \n> in your pull queries. The nice thing about the pull query, is it's just a \n> data structure, so it's very composable. You can build queries up \n> programatically, which is really lovely. This pattern of building programs \n> around the composition of data structures is really a cornerstone of the \n> Clojure philosophy.\n>\n> As I think some others have pointed out here, there seem to be others \n> experimenting more directly with the GraphQL api. But om-next is really no \n> less agnostic about a lot of things than GraphQL. It's not really tied to \n> Datomic, except in that it inherits the pull query syntax. But you can \n> implement the resolvers and such to work with any backend storage mechanism \n> (and long as you can traverse the relationships). The Datomic integration \n> happens to be trivial, which is nice, and opens up other possibilities. \n> However, Datomic is not the only \"Datomic\" in a sense. DataScript is a cljc \n> (meaning, it can compile to and be used from both Clojure AND ClojureScript \n> (And JS actually)) implementation of an in memory version of the Datomic \n> API. It's actually surprisingly feature complete, and a great way to \n> experiment with the underlying data model, pull queries, and even Datalog \n> (a query language also baked into Datomic which is more expressive than \n> SQL, and better for querying graph relations). The folks at Mozilla have \n> also started working on Mentat, a Rust (I believe) implementation of a \n> Datomic like database on top of SQLite. It's very clear to me with all the \n> activity around these projects that while Datomic remains a very powerful \n> system with many features these other projects will likely never aim for, \n> the overall idea has started catching on, and is worth paying attention to.\n>\n> Part of what makes the om-next approach so fascinating is that Datomic's \n> data model is based on RDF. If you're not familiar with it, RDF is a web \n> standard, and the de facto data language of the Semantic Web (also manifest \n> as web standards). It's part of the vision of the computable web of data. \n> The idea is that all data should be self-describing, globally meaningful, \n> and infinitely extensible. There are vocabularies which can be described in \n> RDF data, which themselves describe the schema and meaning of other data. \n> It's super brilliant stuff, and actually really simple! Data is organized \n> as (entity, attribute, value) triples of \"facts\". The key is that as long \n> as your attributes are globally meaningful, you can merge information about \n> an entity without ever worrying about overwriting other information about \n> that entity. This gives us extensibility. In Clojure and Datomic, these \n> globally meaninful attributes are achieved via namespaced keywords, which \n> is also: brilliant and simple. We can also have entities that point to \n> other entities, giving us polymorphic entity relationships. Datomic owes \n> some of it's brilliance and I think success to making this collection of \n> ideas a bit simpler, more approachable and more idiomatic. RDF has been a \n> great idea waiting for someone to come around and maximize it. And Datomic \n> is not alone. Look at other companies like MarkLogic who've built big \n> businesses around RDF technology. By contrast, GraphQL is an idea that was \n> hacked together kind of recently, is not as far as I know a standard \n> (please correct me if I'm wrong here), and doesn't have namespaced \n> attributes, so you're a little stuck not being able to get all of the \n> natural polymorphism and extensibility of Datomic and friends as easily. \n> However, it's also proven that streamlining the communication of data from \n> server to client, and stripping out all of our bloated controllers and REST \n> apis is possible, and that it can dramatically shrink code bases and \n> accelerate development, which is really awesome. But in short, it's really \n> worth seeing what the Clojure community is doing with these ideas, because \n> it definitely adds some dimensions of awesomeness.\n>\n> I'd be remiss if I did not mention that I'm working with some folks on \n> building out Datsync, a system for syncing Datomic\/DataScript data (EAV \/ \n> triple data, in technical terms) between nodes in a network (either server \n> client or P2P). Here, our goal is to extend the scope of what om-next \n> describes by automating the synchronization of EAV triples given that this \n> is what your data looks like. We do plan to support om-next style pull \n> query syntax (so you'd be able to differentially sync using something more \n> or less equivalent to a GraphQL query). But we're also considering \n> implementing a reactive, incrementally maintained, eventually consistent \n> Datalog engine. It's been shown that a subset of Datalog is more or less \n> the most expressive eventually consistent language you can construct, so \n> this effectively means we'll have maxed out what you can describe without \n> needing coordination between peers (and hence some kind of consensus \n> algorithm, like Raft or Paxos). In general, it's a really lovely complement \n> to the pull query. Taking a step back though, the audacious goal of Datsync \n> is to more or less one-up GraphQL by having the full expressiveness of \n> Datalog+pull for the description of synchronization scope, together with \n> the flexibility of RDF data for data modelling, and almost 0 hook-up (you \n> won't have to implement resolvers or anything; just plug in an \n> synchronize). There are some caveats to this of course, and there will be \n> plenty of work exploring this paradigm, but we're very excited by the \n> potentialities!\n>\n> As for your comments about your experience coming to the Clojure \n> ecosystem, I really appreciate your voice here. The Clojure community is \n> full of extremely bright folks working on lots of really wonderful things, \n> and it can feel a little overwhelming coming to so many new ideas and ways \n> of doing things at once. Having done ruby and rails development in the past \n> prior to Clojure, I can testify to that feeling. So, while I can say that \n> it does get better, there have been discussions in the community of late \n> about how we can reduce the burden here. So again, I thank you for voicing \n> your perception of things here. However, I can also say having poked a \n> stick at various JS tooling that the ClojureScript ecosystem anyway feels \n> way saner to me. There are two build systems, but to at least some extent \n> they are compatible. Contrast that with Python's infinite menagerie of \n> tooling. Also, FP is getting more popular in JS, so folks start bringing in \n> libraries to help with that, and instantly, confusion ensues about which \n> one, how they handle this edge case, etc. In contrast, ClojureScript has \n> good pure data structures built right into the language, as well as all \n> (well, most) of the well thought out functional programming utilities baked \n> into the clojure.core namespace, so there's never a question about any of \n> that. And by building on the Google Closure compiler, ClojureScript is able \n> to leverage a bunch of useful properties of that sytem automatically, \n> without any real thought, such as code shaking, browser compatibility, etc. \n> And yes, it's a little confusing some times figuring out which lib works on \n> front end versus back end, but honestly? This is way better than the \n> alternative in my opinion. What other functional language has as high a \n> utilization across browser, server and distributed system? That's a lot of \n> power to pack into the punch of one well thought out language. So I'd argue \n> that the mild discomfort of coming into the scene and having to figure out \n> what libs are for clojure and which for clojurescript is more or less worth \n> it, cause in the end it's only giving you more options. And I think now \n> that we have .cljc files for doing this, more and more libraries are doing \n> this \"first-class\" now, and for old libs, they are frequently rewritten to \n> work with both after the fact, so the situation is improving overall. But \n> that doesn't mean there isn't more we can do to make the situation better.\n>\n> Ok... I think I got carried away... but hopefully that 2c was useful.\n>\n> Chris\n>\n>\n> On Friday, June 30, 2017 at 8:28:22 PM UTC-7, mynomoto wrote:\n>>\n>> Hi Nick,\n>>\n>> At Xerpa[1], we have being using graphql on a clojurescript project. It's \n>> an SPA that uses reagent with json api and its currently being converted to \n>> a re-frame one with graphql.\n>>\n>> We studied the possibility of using relay modern and apollo client but \n>> decided to not use them at the moment.\n>>\n>> We started using graphql-builder[2] which is like yesql[3] but for \n>> graphql queries meaning that you write queries in another file directly \n>> using graphql and you can use those from clojurescript functions passing \n>> parameters when needed. It worked really well for the first couple of views \n>> but we found it not flexible enough for our needs in different views. \n>>\n>> After more research we found a new library venia[4] that uses clojure \n>> data structures to generate graphql queries. We needed a mechanism for \n>> merging queries requested by each component and requesting the merged query \n>> when the view changed. We wrote that in house and it's in production for a \n>> couple of months. I hope to find time to write more about that sometime but \n>> this is our experience so far.\n>>\n>> Cheers,\n>>\n>> mynomoto\n>>\n>> [1]: http:\/\/www.xerpa.com.br\/\n>> [2]: https:\/\/github.com\/retro\/graphql-builder\n>> [3]: https:\/\/github.com\/krisajenkins\/yesql\n>> [4]: https:\/\/github.com\/Vincit\/venia\n>>\n>>\n>> On Friday, June 30, 2017 at 9:52:40 PM UTC-3, Nick Pavlica wrote:\n>>>\n>>> Hi Dustin,\n>>>   Thanks for addressing my question, and helping me better understand \n>>> ClojureScript, and the community!\n>>>\n>>> On Friday, June 30, 2017 at 2:35:40 PM UTC-6, Dustin Getz wrote:\n>>>>\n>>>> It's not clear to me that the cljs community has converged on graphql \n>>>> as a best practice. some people have certainly adopted it but it doesn't \n>>>> feel like there are very many to me. for example, Datomic has been doing \n>>>> what GraphQL offers plus much more since like 2013, it's not clear that \n>>>> graphql adds anything to what cljs users have already been doing since at \n>>>> least as long as facebook is been doing it internally. this isn't what you \n>>>> asked, but could explain the silence.\n>>>>\n>>>\n>>> I'm sure that GraphQL isn't that big of a deal from within the Clojure* \n>>> community, but it's pretty exciting when you are coming from traditional \n>>> environments where you deal with REST endpoints.  I've done a little \n>>> research on Datomic, and it sounds awesome, but I haven't used it yet.  In \n>>> my mind, GraphQL has some non technical advantages over Datomic.  The \n>>> primary advantage is that it's an open specification, and not a proprietary \n>>> product.  This allows for multiple implementations, and provides \n>>> opportunities for multiple support points.  As it stands, there's only one \n>>> company that has a Datomic implementation, and if they go down so does your \n>>> tech stack.  Additionally, if the current implementation of Datomic doesn't \n>>> have a feature or function you can't just add it yourself(At-least to my \n>>> knowledge);  Another potential down side of having only one Datomic vendor, \n>>> is the potential of price gouging leading to unforscene budgeting issues.  \n>>> I'm saying that Cognitech would act that way, but it's something that I \n>>> think should at-leas be considered.  I'm sure an end to end Clojure stack, \n>>> plus Datomic is pretty sweet, I'm just now sure how many can go that \n>>> route.  It makes me wonder if someone isn't thinking about an open \n>>> implementation.     \n>>>\n>>> Many Thanks!\n>>> -- Nick    \n>>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How do you use GraphQL with Clojurescript? Nick Pavlica Wed, 05 Jul 2017 11:25:59 -0700"},
{"body":"Hi Mynomoto,\n  Thanks for all the good information!  I'll look into venia, and the other \ntools that you pointed out. \n--Nick\n\n\nOn Friday, June 30, 2017 at 9:28:22 PM UTC-6, mynomoto wrote:\n>\n> Hi Nick,\n>\n> At Xerpa[1], we have being using graphql on a clojurescript project. It's \n> an SPA that uses reagent with json api and its currently being converted to \n> a re-frame one with graphql.\n>\n> We studied the possibility of using relay modern and apollo client but \n> decided to not use them at the moment.\n>\n> We started using graphql-builder[2] which is like yesql[3] but for graphql \n> queries meaning that you write queries in another file directly using \n> graphql and you can use those from clojurescript functions passing \n> parameters when needed. It worked really well for the first couple of views \n> but we found it not flexible enough for our needs in different views. \n>\n> After more research we found a new library venia[4] that uses clojure data \n> structures to generate graphql queries. We needed a mechanism for merging \n> queries requested by each component and requesting the merged query when \n> the view changed. We wrote that in house and it's in production for a \n> couple of months. I hope to find time to write more about that sometime but \n> this is our experience so far.\n>\n> Cheers,\n>\n> mynomoto\n>\n> [1]: http:\/\/www.xerpa.com.br\/\n> [2]: https:\/\/github.com\/retro\/graphql-builder\n> [3]: https:\/\/github.com\/krisajenkins\/yesql\n> [4]: https:\/\/github.com\/Vincit\/venia\n>\n>\n> On Friday, June 30, 2017 at 9:52:40 PM UTC-3, Nick Pavlica wrote:\n>>\n>> Hi Dustin,\n>>   Thanks for addressing my question, and helping me better understand \n>> ClojureScript, and the community!\n>>\n>> On Friday, June 30, 2017 at 2:35:40 PM UTC-6, Dustin Getz wrote:\n>>>\n>>> It's not clear to me that the cljs community has converged on graphql as \n>>> a best practice. some people have certainly adopted it but it doesn't feel \n>>> like there are very many to me. for example, Datomic has been doing what \n>>> GraphQL offers plus much more since like 2013, it's not clear that graphql \n>>> adds anything to what cljs users have already been doing since at least as \n>>> long as facebook is been doing it internally. this isn't what you asked, \n>>> but could explain the silence.\n>>>\n>>\n>> I'm sure that GraphQL isn't that big of a deal from within the Clojure* \n>> community, but it's pretty exciting when you are coming from traditional \n>> environments where you deal with REST endpoints.  I've done a little \n>> research on Datomic, and it sounds awesome, but I haven't used it yet.  In \n>> my mind, GraphQL has some non technical advantages over Datomic.  The \n>> primary advantage is that it's an open specification, and not a proprietary \n>> product.  This allows for multiple implementations, and provides \n>> opportunities for multiple support points.  As it stands, there's only one \n>> company that has a Datomic implementation, and if they go down so does your \n>> tech stack.  Additionally, if the current implementation of Datomic doesn't \n>> have a feature or function you can't just add it yourself(At-least to my \n>> knowledge);  Another potential down side of having only one Datomic vendor, \n>> is the potential of price gouging leading to unforscene budgeting issues.  \n>> I'm saying that Cognitech would act that way, but it's something that I \n>> think should at-leas be considered.  I'm sure an end to end Clojure stack, \n>> plus Datomic is pretty sweet, I'm just now sure how many can go that \n>> route.  It makes me wonder if someone isn't thinking about an open \n>> implementation.     \n>>\n>> Many Thanks!\n>> -- Nick    \n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How do you use GraphQL with Clojurescript? Nick Pavlica Wed, 05 Jul 2017 11:13:21 -0700"},
{"body":"Looks like a problem to me. Please file an issue in JIRA, thanks!\n\nDavid \nOn Sun, Jul 2, 2017 at 3:12 PM, Vojimir Golem <vojimir.go...@gmail.com>\nwrote:\n\n>\n> I think that the following line might cause the problem on windows:\n> https:\/\/github.com\/clojure\/clojurescript\/blob\/master\/src\/\n> main\/clojure\/cljs\/repl.cljc#L713\n>\n> For file param e.g. \"src\\duct3\\client.cljs\"\n>\n> (str \"file:\/\/\" (.getAbsolutePath file))\n>\n> evaluates on windows as:\n> \"file:\/\/C:\\Projects\\Playground\\duct3\\src\\duct3\\client.cljs\"\n>\n> which is not legal file Url (https:\/\/en.wikipedia.org\/\n> wiki\/File_URI_scheme#Windows)\n>\n> and final result is: java.net.UnknownHostException (java treat that URL\n> as FTP address).\n>\n> Is this a known issue?\n>\n> Thx!\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Issue with building fileUrl on windows in repl.cljc? David Nolen Sun, 02 Jul 2017 19:45:53 -0700"},
{"body":"I think that the following line might cause the problem on windows:\nhttps:\/\/github.com\/clojure\/clojurescript\/blob\/master\/src\/main\/clojure\/cljs\/repl.cljc#L713 \nFor file param e.g. \"src\\duct3\\client.cljs\"\n\n(str \"file:\/\/\" (.getAbsolutePath file))\n\nevaluates on windows as:\n\"file:\/\/C:\\Projects\\Playground\\duct3\\src\\duct3\\client.cljs\"\n\nwhich is not legal file Url (\nhttps:\/\/en.wikipedia.org\/wiki\/File_URI_scheme#Windows) \n\nand final result is: java.net.UnknownHostException (java treat that URL as \nFTP address).\n\nIs this a known issue?\n\nThx!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Issue with building fileUrl on windows in repl.cljc? Vojimir Golem Sun, 02 Jul 2017 14:51:26 -0700"},
{"body":"Hi Nick\n\nI'll try not to get carried away here... \nFirst off, folks in the Clojure and ClojureScript communities are \nabsolutely familiar with, inspired by, and building on top of or in the \ndirection of GraphQL. David Nolen, the author of Om and the lead \nClojureScript developer, has build om-next which is more or less a Clojury \ntake on the GraphQL idea. The insight there, which Dustin hints to, is that \nDatomic has this thing called a pull query you can execute, which is more \nor less isomorphic (I guess if it's more or less I should just say \nhomomorphic...) to the GraphQL query. Om-next is basically just \"let's \nclose that gap\", and most of the gap is stuff like pagination and sorting \nof collections. So it gives you a way of describing these things directly \nin your pull queries. The nice thing about the pull query, is it's just a \ndata structure, so it's very composable. You can build queries up \nprogramatically, which is really lovely. This pattern of building programs \naround the composition of data structures is really a cornerstone of the \nClojure philosophy.\n\nAs I think some others have pointed out here, there seem to be others \nexperimenting more directly with the GraphQL api. But om-next is really no \nless agnostic about a lot of things than GraphQL. It's not really tied to \nDatomic, except in that it inherits the pull query syntax. But you can \nimplement the resolvers and such to work with any backend storage mechanism \n(and long as you can traverse the relationships). The Datomic integration \nhappens to be trivial, which is nice, and opens up other possibilities. \nHowever, Datomic is not the only \"Datomic\" in a sense. DataScript is a cljc \n(meaning, it can compile to and be used from both Clojure AND ClojureScript \n(And JS actually)) implementation of an in memory version of the Datomic \nAPI. It's actually surprisingly feature complete, and a great way to \nexperiment with the underlying data model, pull queries, and even Datalog \n(a query language also baked into Datomic which is more expressive than \nSQL, and better for querying graph relations). The folks at Mozilla have \nalso started working on Mentat, a Rust (I believe) implementation of a \nDatomic like database on top of SQLite. It's very clear to me with all the \nactivity around these projects that while Datomic remains a very powerful \nsystem with many features these other projects will likely never aim for, \nthe overall idea has started catching on, and is worth paying attention to.\n\nPart of what makes the om-next approach so fascinating is that Datomic's \ndata model is based on RDF. If you're not familiar with it, RDF is a web \nstandard, and the de facto data language of the Semantic Web (also manifest \nas web standards). It's part of the vision of the computable web of data. \nThe idea is that all data should be self-describing, globally meaningful, \nand infinitely extensible. There are vocabularies which can be described in \nRDF data, which themselves describe the schema and meaning of other data. \nIt's super brilliant stuff, and actually really simple! Data is organized \nas (entity, attribute, value) triples of \"facts\". The key is that as long \nas your attributes are globally meaningful, you can merge information about \nan entity without ever worrying about overwriting other information about \nthat entity. This gives us extensibility. In Clojure and Datomic, these \nglobally meaninful attributes are achieved via namespaced keywords, which \nis also: brilliant and simple. We can also have entities that point to \nother entities, giving us polymorphic entity relationships. Datomic owes \nsome of it's brilliance and I think success to making this collection of \nideas a bit simpler, more approachable and more idiomatic. RDF has been a \ngreat idea waiting for someone to come around and maximize it. And Datomic \nis not alone. Look at other companies like MarkLogic who've built big \nbusinesses around RDF technology. By contrast, GraphQL is an idea that was \nhacked together kind of recently, is not as far as I know a standard \n(please correct me if I'm wrong here), and doesn't have namespaced \nattributes, so you're a little stuck not being able to get all of the \nnatural polymorphism and extensibility of Datomic and friends as easily. \nHowever, it's also proven that streamlining the communication of data from \nserver to client, and stripping out all of our bloated controllers and REST \napis is possible, and that it can dramatically shrink code bases and \naccelerate development, which is really awesome. But in short, it's really \nworth seeing what the Clojure community is doing with these ideas, because \nit definitely adds some dimensions of awesomeness.\n\nI'd be remiss if I did not mention that I'm working with some folks on \nbuilding out Datsync, a system for syncing Datomic\/DataScript data (EAV \/ \ntriple data, in technical terms) between nodes in a network (either server \nclient or P2P). Here, our goal is to extend the scope of what om-next \ndescribes by automating the synchronization of EAV triples given that this \nis what your data looks like. We do plan to support om-next style pull \nquery syntax (so you'd be able to differentially sync using something more \nor less equivalent to a GraphQL query). But we're also considering \nimplementing a reactive, incrementally maintained, eventually consistent \nDatalog engine. It's been shown that a subset of Datalog is more or less \nthe most expressive eventually consistent language you can construct, so \nthis effectively means we'll have maxed out what you can describe without \nneeding coordination between peers (and hence some kind of consensus \nalgorithm, like Raft or Paxos). In general, it's a really lovely complement \nto the pull query. Taking a step back though, the audacious goal of Datsync \nis to more or less one-up GraphQL by having the full expressiveness of \nDatalog+pull for the description of synchronization scope, together with \nthe flexibility of RDF data for data modelling, and almost 0 hook-up (you \nwon't have to implement resolvers or anything; just plug in an \nsynchronize). There are some caveats to this of course, and there will be \nplenty of work exploring this paradigm, but we're very excited by the \npotentialities!\n\nAs for your comments about your experience coming to the Clojure ecosystem, \nI really appreciate your voice here. The Clojure community is full of \nextremely bright folks working on lots of really wonderful things, and it \ncan feel a little overwhelming coming to so many new ideas and ways of \ndoing things at once. Having done ruby and rails development in the past \nprior to Clojure, I can testify to that feeling. So, while I can say that \nit does get better, there have been discussions in the community of late \nabout how we can reduce the burden here. So again, I thank you for voicing \nyour perception of things here. However, I can also say having poked a \nstick at various JS tooling that the ClojureScript ecosystem anyway feels \nway saner to me. There are two build systems, but to at least some extent \nthey are compatible. Contrast that with Python's infinite menagerie of \ntooling. Also, FP is getting more popular in JS, so folks start bringing in \nlibraries to help with that, and instantly, confusion ensues about which \none, how they handle this edge case, etc. In contrast, ClojureScript has \ngood pure data structures built right into the language, as well as all \n(well, most) of the well thought out functional programming utilities baked \ninto the clojure.core namespace, so there's never a question about any of \nthat. And by building on the Google Closure compiler, ClojureScript is able \nto leverage a bunch of useful properties of that sytem automatically, \nwithout any real thought, such as code shaking, browser compatibility, etc. \nAnd yes, it's a little confusing some times figuring out which lib works on \nfront end versus back end, but honestly? This is way better than the \nalternative in my opinion. What other functional language has as high a \nutilization across browser, server and distributed system? That's a lot of \npower to pack into the punch of one well thought out language. So I'd argue \nthat the mild discomfort of coming into the scene and having to figure out \nwhat libs are for clojure and which for clojurescript is more or less worth \nit, cause in the end it's only giving you more options. And I think now \nthat we have .cljc files for doing this, more and more libraries are doing \nthis \"first-class\" now, and for old libs, they are frequently rewritten to \nwork with both after the fact, so the situation is improving overall. But \nthat doesn't mean there isn't more we can do to make the situation better.\n\nOk... I think I got carried away... but hopefully that 2c was useful.\n\nChris\n\n\nOn Friday, June 30, 2017 at 8:28:22 PM UTC-7, mynomoto wrote:\n>\n> Hi Nick,\n>\n> At Xerpa[1], we have being using graphql on a clojurescript project. It's \n> an SPA that uses reagent with json api and its currently being converted to \n> a re-frame one with graphql.\n>\n> We studied the possibility of using relay modern and apollo client but \n> decided to not use them at the moment.\n>\n> We started using graphql-builder[2] which is like yesql[3] but for graphql \n> queries meaning that you write queries in another file directly using \n> graphql and you can use those from clojurescript functions passing \n> parameters when needed. It worked really well for the first couple of views \n> but we found it not flexible enough for our needs in different views. \n>\n> After more research we found a new library venia[4] that uses clojure data \n> structures to generate graphql queries. We needed a mechanism for merging \n> queries requested by each component and requesting the merged query when \n> the view changed. We wrote that in house and it's in production for a \n> couple of months. I hope to find time to write more about that sometime but \n> this is our experience so far.\n>\n> Cheers,\n>\n> mynomoto\n>\n> [1]: http:\/\/www.xerpa.com.br\/\n> [2]: https:\/\/github.com\/retro\/graphql-builder\n> [3]: https:\/\/github.com\/krisajenkins\/yesql\n> [4]: https:\/\/github.com\/Vincit\/venia\n>\n>\n> On Friday, June 30, 2017 at 9:52:40 PM UTC-3, Nick Pavlica wrote:\n>>\n>> Hi Dustin,\n>>   Thanks for addressing my question, and helping me better understand \n>> ClojureScript, and the community!\n>>\n>> On Friday, June 30, 2017 at 2:35:40 PM UTC-6, Dustin Getz wrote:\n>>>\n>>> It's not clear to me that the cljs community has converged on graphql as \n>>> a best practice. some people have certainly adopted it but it doesn't feel \n>>> like there are very many to me. for example, Datomic has been doing what \n>>> GraphQL offers plus much more since like 2013, it's not clear that graphql \n>>> adds anything to what cljs users have already been doing since at least as \n>>> long as facebook is been doing it internally. this isn't what you asked, \n>>> but could explain the silence.\n>>>\n>>\n>> I'm sure that GraphQL isn't that big of a deal from within the Clojure* \n>> community, but it's pretty exciting when you are coming from traditional \n>> environments where you deal with REST endpoints.  I've done a little \n>> research on Datomic, and it sounds awesome, but I haven't used it yet.  In \n>> my mind, GraphQL has some non technical advantages over Datomic.  The \n>> primary advantage is that it's an open specification, and not a proprietary \n>> product.  This allows for multiple implementations, and provides \n>> opportunities for multiple support points.  As it stands, there's only one \n>> company that has a Datomic implementation, and if they go down so does your \n>> tech stack.  Additionally, if the current implementation of Datomic doesn't \n>> have a feature or function you can't just add it yourself(At-least to my \n>> knowledge);  Another potential down side of having only one Datomic vendor, \n>> is the potential of price gouging leading to unforscene budgeting issues.  \n>> I'm saying that Cognitech would act that way, but it's something that I \n>> think should at-leas be considered.  I'm sure an end to end Clojure stack, \n>> plus Datomic is pretty sweet, I'm just now sure how many can go that \n>> route.  It makes me wonder if someone isn't thinking about an open \n>> implementation.     \n>>\n>> Many Thanks!\n>> -- Nick    \n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How do you use GraphQL with Clojurescript? Christopher Small Sat, 01 Jul 2017 14:20:40 -0700"},
{"body":"Hi Nick,\n\nAt Xerpa[1], we have being using graphql on a clojurescript project. It's \nan SPA that uses reagent with json api and its currently being converted to \na re-frame one with graphql. \nWe studied the possibility of using relay modern and apollo client but \ndecided to not use them at the moment.\n\nWe started using graphql-builder[2] which is like yesql[3] but for graphql \nqueries meaning that you write queries in another file directly using \ngraphql and you can use those from clojurescript functions passing \nparameters when needed. It worked really well for the first couple of views \nbut we found it not flexible enough for our needs in different views. \n\nAfter more research we found a new library venia[4] that uses clojure data \nstructures to generate graphql queries. We needed a mechanism for merging \nqueries requested by each component and requesting the merged query when \nthe view changed. We wrote that in house and it's in production for a \ncouple of months. I hope to find time to write more about that sometime but \nthis is our experience so far.\n\nCheers,\n\nmynomoto\n\n[1]: http:\/\/www.xerpa.com.br\/\n[2]: https:\/\/github.com\/retro\/graphql-builder\n[3]: https:\/\/github.com\/krisajenkins\/yesql\n[4]: https:\/\/github.com\/Vincit\/venia\n\n\nOn Friday, June 30, 2017 at 9:52:40 PM UTC-3, Nick Pavlica wrote:\n>\n> Hi Dustin,\n>   Thanks for addressing my question, and helping me better understand \n> ClojureScript, and the community!\n>\n> On Friday, June 30, 2017 at 2:35:40 PM UTC-6, Dustin Getz wrote:\n>>\n>> It's not clear to me that the cljs community has converged on graphql as \n>> a best practice. some people have certainly adopted it but it doesn't feel \n>> like there are very many to me. for example, Datomic has been doing what \n>> GraphQL offers plus much more since like 2013, it's not clear that graphql \n>> adds anything to what cljs users have already been doing since at least as \n>> long as facebook is been doing it internally. this isn't what you asked, \n>> but could explain the silence.\n>>\n>\n> I'm sure that GraphQL isn't that big of a deal from within the Clojure* \n> community, but it's pretty exciting when you are coming from traditional \n> environments where you deal with REST endpoints.  I've done a little \n> research on Datomic, and it sounds awesome, but I haven't used it yet.  In \n> my mind, GraphQL has some non technical advantages over Datomic.  The \n> primary advantage is that it's an open specification, and not a proprietary \n> product.  This allows for multiple implementations, and provides \n> opportunities for multiple support points.  As it stands, there's only one \n> company that has a Datomic implementation, and if they go down so does your \n> tech stack.  Additionally, if the current implementation of Datomic doesn't \n> have a feature or function you can't just add it yourself(At-least to my \n> knowledge);  Another potential down side of having only one Datomic vendor, \n> is the potential of price gouging leading to unforscene budgeting issues.  \n> I'm saying that Cognitech would act that way, but it's something that I \n> think should at-leas be considered.  I'm sure an end to end Clojure stack, \n> plus Datomic is pretty sweet, I'm just now sure how many can go that \n> route.  It makes me wonder if someone isn't thinking about an open \n> implementation.     \n>\n> Many Thanks!\n> -- Nick    \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How do you use GraphQL with Clojurescript? mynomoto Fri, 30 Jun 2017 20:28:48 -0700"},
{"body":"Hi Dustin,\n  Thanks for addressing my question, and helping me better understand \nClojureScript, and the community! \nOn Friday, June 30, 2017 at 2:35:40 PM UTC-6, Dustin Getz wrote:\n>\n> It's not clear to me that the cljs community has converged on graphql as a \n> best practice. some people have certainly adopted it but it doesn't feel \n> like there are very many to me. for example, Datomic has been doing what \n> GraphQL offers plus much more since like 2013, it's not clear that graphql \n> adds anything to what cljs users have already been doing since at least as \n> long as facebook is been doing it internally. this isn't what you asked, \n> but could explain the silence.\n>\n\nI'm sure that GraphQL isn't that big of a deal from within the Clojure* \ncommunity, but it's pretty exciting when you are coming from traditional \nenvironments where you deal with REST endpoints.  I've done a little \nresearch on Datomic, and it sounds awesome, but I haven't used it yet.  In \nmy mind, GraphQL has some non technical advantages over Datomic.  The \nprimary advantage is that it's an open specification, and not a proprietary \nproduct.  This allows for multiple implementations, and provides \nopportunities for multiple support points.  As it stands, there's only one \ncompany that has a Datomic implementation, and if they go down so does your \ntech stack.  Additionally, if the current implementation of Datomic doesn't \nhave a feature or function you can't just add it yourself(At-least to my \nknowledge);  Another potential down side of having only one Datomic vendor, \nis the potential of price gouging leading to unforscene budgeting issues.  \nI'm saying that Cognitech would act that way, but it's something that I \nthink should at-leas be considered.  I'm sure an end to end Clojure stack, \nplus Datomic is pretty sweet, I'm just now sure how many can go that \nroute.  It makes me wonder if someone isn't thinking about an open \nimplementation.     \n\nMany Thanks!\n-- Nick    \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How do you use GraphQL with Clojurescript? Nick Pavlica Fri, 30 Jun 2017 17:53:02 -0700"},
{"body":"Hi Luke,\n  Thanks for addressing my question, and helping better understand \nClojurescript and the community! \nOn Friday, June 30, 2017 at 2:22:18 PM UTC-6, Luke Burton wrote:\n>\n>\n>\n> > On Jun 30, 2017, at 10:40 AM, Nick Pavlica <lin...@gmail.com \n> <javascript:>> wrote: \n> > \n> > Ok, \n> >   We are at over 40 views, and it seems like no one in the Clojurescript \n> community is familiar with using GraphQL, or doesn't have the time to give \n> some good pointers.   \n>\n> The Clojure community is small and has a different set of values and \n> expectations. I would consider the possibility that you\u2019re framing your \n> question in a way that doesn\u2019t resonate very clearly with people who might \n> have an opinion. \n>\n\n> If I understand it correctly, you\u2019re asking \u201cshould I query a GraphQL \n> backend directly or via a framework?\u201d Since the cost of experimentation in \n> this language is so low, most people will be thinking \u201cwhy don\u2019t you just \n> try both approaches?\u201d \n>\n\n> If you can\u2019t find a framework that does it, chances are it\u2019s so easy to do \n> in Clojure\/ClojureScript that nobody bothers to put an abstraction there. \n> What happens when you make a GraphQL query yourself? If it\u2019s super easy you \n> may elect to forego any frameworks even if they exist! \n>\n> Another community idiom is that our programs are collections of small, \n> composable functions. When written this way, the cost of making a framework \n> choice that turns out to be suboptimal is very low. In writing Clojure I\u2019m \n> generally much less anxious about upfront framework decisions compared to \n> other languages - I\u2019m willing and able to change quite fundamental \n> components if things aren\u2019t working out. This is another reason questions \n> like \u201cwhich thing does everyone choose for this?\u201d are often answered with \n> \u201cpick the one that works for you\u201d. \n>\n> Luke.\n\n\nI'm sure my question was unclear, and is certainly poorly constructed for \nthe initiated; sorry about that.  The difficulty, is that for someone new \nto the Clojure* community, it can be a little overwhelming.  While Clojure* \nthe language is beautifully decomplected, in many ways the lack of apparent \nfocus by the community makes it hard to get started.  For example, there \nare at-least three runtime implementations, each with their own caveats, \nand a set of libraries that try to bridge them.  There are two popular \nbuild tools, multiple repels, and so on, until you start running in circles \ntrying to figure out what best practice is.   This breadth is certainly \ngreat for those that have been here a while, but it seem to takes away from \nthe depth that other small communities like Elixir are developing by \nfocusing their limited resources behind an primary effort like Phoenix. \nI've seen this play out in other communities like Ruby On Rails , and many \nothers, that eventually grew into what we view as \"mainstream\".  It's \ndefinitely a challenge to come into the Clojure* world from more \ntraditional communities.  The idea of baking a cake without a well vetted \nand thought through recipe really feels foreign.  I'm sure that in time \nthat uncomfortable uncertainty just goes away.  I almost wonder if more \neffort should be made by the community to help newbies get over this \nhurdle.  I'm sure experimentation is quite easy once your used to the \nClojure* way, but I think that baggage that we carry with us makes it hard \nto see.  For example, When Ember was cool, I spent allot of time learning \nit, then Angular came along and there was another big learning curve.  I \nthink that most people coming to Clojure* would look at trying to learn two \nframeworks just to experiment with, would wince a little, because it wasn't \ntrivial to switch between other frameworks in the past.  With that said, I \nwonder if this would better have been a little better form of the \nquestion.  It would still highlight my ignorance of the \"Clojure Way\", but \nwould maybe have been a little more focused:\n\n\" All, I'm new to the Clojure* community and would like to build a SPA \nstyle web application, and eventually mobile equivalents that needs to work \nwith GraphQL endpoints.  I've seen a number of tools, libraries, and \nframeworks, but I'm unclear which one has the most community support behind \nit.  I've noticed that Om, and Reagent plus Reframe are mentioned the most \nin presentations and blog posts, but there's limited documentation on each \ntheir project pages, and neither have reached 1.0.  Ideally, I would like \nto integrate with the Apollo, or Relay Modern GraphQL client libraries so \nthat I can take advantage of Pagination, Caching, Mutation and other \nfunctions that have been tuned specifically for working with a GraphQL \nserver, so I don't have to re-invent the wheel.  Without getting into a \nflame war, are there any inherent advantage to either of these frameworks \nfor this application, or do they essentially achieve the same benefits, \njust in different ways?  Are there any good resources out there that \nillustrate how to successful use Clojurescript with GraphQL?\"\n\nHowever, in Clojure* land, it sounds like you just need to pick one, and \nhack away until it works :)            \n\nThanks again for the feedback and guidance!\n-- Nick\n \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How do you use GraphQL with Clojurescript? Nick Pavlica Fri, 30 Jun 2017 17:25:44 -0700"},
{"body":"It's not clear to me that the cljs community has converged on graphql as a\nbest practice. some people have certainly adopted it but it doesn't feel\nlike there are very many to me. for example, Datomic has been doing what\nGraphQL offers plus much more since like 2013, it's not clear that graphql\nadds anything to what cljs users have already been doing since at least as\nlong as facebook is been doing it internally. this isn't what you asked,\nbut could explain the silence. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How do you use GraphQL with Clojurescript? Dustin Getz Fri, 30 Jun 2017 13:35:47 -0700"},
{"body":"> On Jun 30, 2017, at 10:40 AM, Nick Pavlica <lini...@gmail.com> wrote:\n> \n> Ok, \n>   We are at over 40 views, and it seems like no one in the Clojurescript \n> community is familiar with using GraphQL, or doesn't have the time to give \n> some good pointers.  \nThe Clojure community is small and has a different set of values and \nexpectations. I would consider the possibility that you\u2019re framing your \nquestion in a way that doesn\u2019t resonate very clearly with people who might have \nan opinion. \n\nIf I understand it correctly, you\u2019re asking \u201cshould I query a GraphQL backend \ndirectly or via a framework?\u201d Since the cost of experimentation in this \nlanguage is so low, most people will be thinking \u201cwhy don\u2019t you just try both \napproaches?\u201d\n\nIf you can\u2019t find a framework that does it, chances are it\u2019s so easy to do in \nClojure\/ClojureScript that nobody bothers to put an abstraction there. What \nhappens when you make a GraphQL query yourself? If it\u2019s super easy you may \nelect to forego any frameworks even if they exist!\n\nAnother community idiom is that our programs are collections of small, \ncomposable functions. When written this way, the cost of making a framework \nchoice that turns out to be suboptimal is very low. In writing Clojure I\u2019m \ngenerally much less anxious about upfront framework decisions compared to other \nlanguages - I\u2019m willing and able to change quite fundamental components if \nthings aren\u2019t working out. This is another reason questions like \u201cwhich thing \ndoes everyone choose for this?\u201d are often answered with \u201cpick the one that \nworks for you\u201d. \n\nLuke. \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: How do you use GraphQL with Clojurescript? Luke Burton Fri, 30 Jun 2017 13:22:30 -0700"},
{"body":"On Monday, June 26, 2017 at 12:18:52 PM UTC-6, Nick Pavlica wrote:\n>\n> All,\n>   Like most new Clojure\/Clojurescript users, I'm trying to navigate the \n> various library combinations to accomplish my goals.  In this case, I'm \n> trying to find a good set of cljs libraries to build a client app for a \n> GraphQL based server.  My understanding is that Om Next, and Reagent plus \n> Re-frame, are the most popular client library options.  That being said, \n> what's the best way to interact with a GraphQL server?  I'm guessing that \n> you can combine them with a specialized GraphQL client like Apollo, or \n> Relay Modern;  I understand that this may be redundant, but I'm not exactly \n> clear on how you make the most out of GraphQL without a specialized \n> client.  Is it just better to just use cljs with one of these clients and \n> forgo the frame works?  Your guidance is appreciated! \n>\n> Thanks!\n> --Nick     \n> \n\nOk, \n  We are at over 40 views, and it seems like no one in the Clojurescript \ncommunity is familiar with using GraphQL, or doesn't have the time to give \nsome good pointers.  This is the hard part of newbies trying to adopt \ntechnologies that are often much better than the mainstream.  The desire to \nuse best of bread design, currently GraphQL, and best of breed languages is \nthere, but it's a tough sell to learn a language, multiple frameworks, and \nhow to best integrate with a GraphQL client lib. Hopefully this will \nchange, and if I can find the time to wade through the plethora of \nlibraries, and get all the parts working, I'll try to document one way to \ndo it.  The hard part is not going back to the familiar, which is hard not \nto do :) \n\nCheers!\n--Nick  \n\n \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How do you use GraphQL with Clojurescript? Nick Pavlica Fri, 30 Jun 2017 10:40:56 -0700"},
{"body":"Here:\n\nhttps:\/\/github.com\/simon-brooke\/swinging-needle-meter\/ \nIt's simple, but it works - in Chrome and Firefox, anyway, not tested on \nInternet Exploder.\n\nUseful if\n\n(1) you want a live display of a changing variable;\n(2) you want to experiment with animating SVG from re-frame.\n\nEnjoy!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] A re-frame\/re-com swinging needle meter, demonstrating how to animate SVG from re-frame. 'Simon Brooke' via ClojureScript Fri, 30 Jun 2017 07:40:19 -0700"},
{"body":"Hi, \n\n<https:\/\/www.google.com\/url?q=https%3A%2F%2Fgithub.com%2Fpriornix%2Fantizer&sa=D&sntz=1&usg=AFQjCNHHlZ1Vjtvpit3gb5Wbryq1fNss7Q>\n\nhttps:\/\/github.com\/priornix\/antizer \n<https:\/\/www.google.com\/url?q=https%3A%2F%2Fgithub.com%2Fpriornix%2Fantizer&sa=D&sntz=1&usg=AFQjCNHHlZ1Vjtvpit3gb5Wbryq1fNss7Q>\n\n\nAntizer <https:\/\/github.com\/priornix\/antizer> has just been released. It is \na ClojureScript library implementing Ant Design <https:\/\/ant.design\/> React \ncomponents for Reagent and Rum.\n\nAnt Design is an enterprise-class UI design language and React-based \nimplementation with the following features:\n\n   - An enterprise-class UI design language for web applications.\n   - A set of high-quality React components out of the box.\n   - Extensive API documentation and examples.\n\nExamples and Documentation\n\n   - \n   \n   Reagent Demo \n   <https:\/\/priornix.github.io\/antizer\/latest\/examples\/reagent.html>\n   - \n   \n   Rum Demo <https:\/\/priornix.github.io\/antizer\/latest\/examples\/rum.html>\n   - \n   \n   Antizer Documentation https:\/\/priornix.github.io\/antizer\/latest\/\n   - \n   \n   API Documentation https:\/\/priornix.github.io\/antizer\/latest\/api\/\n   \nGithub project: https:\/\/github.com\/priornix\/antizer\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Antizer 0.2.0 Released - Ant Design UI Library for Reagent Michael Lim Fri, 30 Jun 2017 07:11:18 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.671\"]\n\nThis is a follow up bugfix release to 1.9.660.\n\nAs always, feedback welcome!\n\n## 1.9.671\n\n### Fixes\n* CLJS-2139: Undeclared var regression in fn bodies\n* CLJS-2137: Missing INext on some sequences\n* CLJS-2136: Clarify IFind contract to avoid double-lookups\n* need to elide :c.a\/analyzed in c.a\/analyze-wrap-meta to avoid dumping\nunintended\n  with-meta expressions\n* resolve returns improperly constructed Var\n* fix :fn-invoke-direct edgecase around keywords\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.671, bugfix release David Nolen Fri, 30 Jun 2017 07:01:54 -0700"},
{"body":"Hi all,\n\nI'm developing an app with react-native and I'm using react-navigation. \nFollowing the instructions on this \nissue, https:\/\/github.com\/react-community\/react-navigation\/issues\/1400, I \nrequired cardStackStyleInterpolation in this way \n(def cardstyle (js\/require \n\"react-navigation\/src\/views\/CardStackStyleInterpolator.js\")).\n\nIt works, but I have this warning:\n\n<https:\/\/lh3.googleusercontent.com\/-aLUYAREMt8g\/WVTZ8xwlH0I\/AAAAAAAAG-E\/wJk4e5z97j8Px5_pcqYGThVU7p-joCVVgCLcBGAs\/s1600\/warning.png>\n\nHow I can fix it? This file is on \n\/node_modules\/react-navigation\/src\/views\/CardStackStyleInterpolator.js\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How to import a js file into the node_modules folder? manuela trotti Thu, 29 Jun 2017 12:14:08 -0700"},
{"body":"Thanks Dustin. https:\/\/github.com\/thheller\/shadow-cljs \nand https:\/\/github.com\/thheller\/npm-module-example both look promising. \nDo you have a public repo of your webpack + cljs project? \n\nOn Thursday, 29 June 2017 16:47:46 UTC+1, Dustin Getz wrote:\n>\n> Today i still feel any sufficiently sophisticated cljs app is going to \n> have some amount of js. Certain js ecosystem things are better done in js, \n> it's not fun to pet a cat backwards.\n>\n> I have a webpack build which outputs a js artifact and other compiled \n> resources that weren't inlined, and also a cljs build. At one point I think \n> I used cljs compiler's :preamble option to concat them but David said \n> somewhere on this list that this isn't a supported use case of preamble. So \n> I have two js artifacts now (and other compiled resources referenced from \n> them) and make sure webpack's output loads first.\n>\n> Webpack will rewrite your css's external references as it compiles your \n> css, including for your npm dependencies, you shouldn't have to do that by \n> hand. \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Asset rollup in production build? Colin Yates Thu, 29 Jun 2017 09:05:31 -0700"},
{"body":"Today i still feel any sufficiently sophisticated cljs app is going to have\nsome amount of js. Certain js ecosystem things are better done in js, it's\nnot fun to pet a cat backwards. \nI have a webpack build which outputs a js artifact and other compiled\nresources that weren't inlined, and also a cljs build. At one point I think\nI used cljs compiler's :preamble option to concat them but David said\nsomewhere on this list that this isn't a supported use case of preamble. So\nI have two js artifacts now (and other compiled resources referenced from\nthem) and make sure webpack's output loads first.\n\nWebpack will rewrite your css's external references as it compiles your\ncss, including for your npm dependencies, you shouldn't have to do that by\nhand.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Asset rollup in production build? Dustin Getz Thu, 29 Jun 2017 08:48:12 -0700"},
{"body":"Hi all,\n\nI recently dipped my toes into a JavaScript and webpack project. It was \nactually a typescript + react project and webpack did a really neat trick \nof bundling all the images into a single (I assume base64 encoded) _thing_ \nwhich significantly reduced the number of network requests. \nI am a bit of a novice in \"pure\" JavaScript land, so I assume CSS needs to \nbe updated to point to the relevant bit of the base64 string which \nrepresents that specific icon.\n\nHas anyone tried to do this with a pure ClojureScript project? Most search \nresults are about using NPM modules in ClojureScript which I don't want.\n\nHow do you all \"productionise\" your project over and above minimising and \noptimising the produced JavaScript?\n\nThanks,\n\nColin\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Asset rollup in production build? Colin Yates Thu, 29 Jun 2017 08:34:07 -0700"},
{"body":"Christian,\n\nCongratulations on the new release! I'll give it a spin. \nSorry to have dropped off the gitter channel lately... I'm way over-committed. \nHopefully I can give you feedback soon.\n\nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] replikativ 0.2.4 - An open, scalable and distributive infrastructure for a data-driven community of applications. Alan Moore Wed, 28 Jun 2017 09:53:48 -0700"},
{"body":"Wow... this is quite the list!\n\nThanks for all the hard work. \nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.660, compiler performance, runtime performance, cljs.spec fixes Alan Moore Wed, 28 Jun 2017 09:47:58 -0700"},
{"body":"Woohoo! Congrats.\n\nOn Tuesday, June 27, 2017 at 10:35:29 AM UTC-5, David Nolen wrote:\n>\n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>\n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>\n> Leiningen dependency information:\n>\n> [org.clojure\/clojurescript \"1.9.660\"]\n>\n> This release includes many performance enhancements to the\n> ClojureScript compiler as well as ClojureScript runtime code. In\n> addition, the release contains fixes to cljs.spec so that it works\n> correctly under incremental compilation.\n>\n> For more information please refer to the new post here kindly\n> contributed by Mike Fikes:\n>\n> https:\/\/clojurescript.org\/news\/2017-06-27-faster-compilation-runtime-and-spec-caching-fixes\n>\n> Thanks to all that contributed, and as always, feedback welcome!\n>\n> ## 1.9.660\n>\n> ### Enhancements\n> * CLJS-2108: faster set equivalence\n> * CLJS-2099: Optimize apply by avoiding .apply\n> * CLJS-2046: Optimize expression in call position\n> * CLJS-1876: Faster reduce for PV, Subvec and ChunkedSeq\n> * CLJS-2080: Faster equiv-map\n> * CLJS-2066: Avoid analyzing named fn literal bodies twice\n> * CLJS-2065: Improve analyzer munge performance\n>\n> ### Changes\n> * CLJS-2134: Warn on variadic signatures in protocol method implementation\n> * CLJS-2130: Self-host: Add `:fn-invoke-direct` to public API docstrings\n> * CLJS-2112: Iterator based reduce path\n> * CLJS-2100: to-array calls seq too often\n> * CLJS-2041: Compiler flag to drop Function.prototype.call invokes\n> * CLJS-2093: inline ^:const var values\n> * CLJS-2042: Variadic invoke calls array_seq inefficiently\n> * CLJS-2003 remove redundant calls to `str` in munge\/demunge\n> * CLJS-1907: Improve error message from cljs.reader\/read-string\n> * CLJS-1724: Include IIterable in fast-path-protocols\n> * CLJS-924: Better error message for mistaken use of 'def'\n> * CLJS-1599: UUIDs are not equal for upper\/lower case strings\n> * NodeJS REPL accepts a :path opt to set NODE_PATH\n> * CLJS-1886: RangedIterator should only be created from \n> cljs.core.PersistentVector instances\n> * CLJS-2068: MapEntry, RedNode and BlackNode are IComparable\n> * CLJS-2073: Don't flush for every emitted line\n> * CLJS-2089: Warn message wrong for recur to protocol with nil\n> * CLJS-2085: defrecord recur method head target object\n> * CLJS-1977: defrecord should use murmur hashing like Clojure\n> * CLJS-2076: modules should support wildcard namespaces\n> * CLJS-2078: add resolve macro\n>\n> ### Fixes\n> * CLJS-2133: Invalid variadic IFn implementations now fail\n> * CLJS-2128: Fix regression in CLJS-1886\n> * CLJS-2126: Add new compiler option :fn-invoke-direct to build-affecting \n> options\n> * CLJS-2054: Private core names still result in \"already declared\" warnings\n> * CLJS-2125: Duplicate HOF invoke warnings if :static-fns true\n> * CLJS-2119: s\/form for s\/& is qualified with `clojure.spec.alpha`\n> * CLJS-2121: Self-host: Document string as valid name arg\n> * CLJS-2124: Self-host: Tests failing wth Could not find tag parser for \n> :cljs.spec.alpha\n> * CLJS-2122: Self-host: Non-symbol ns names dumped into env\n> * CLJS-2117: Self-host: Port CLJS-1989 to self-hosted\n> * CLJS-1989: s\/fdef expansion side effect fails when load cached source\n> * CLJS-2116: Need to handle un-namespaced symbol when evaluating `foo.core\n> * CLJS-2109: incorrect syntax-quote symbol resolution (resolve-symbol \n> 'clojure.core) -> 'clojure\/core\n> * CLJS-2113: nth function produces different results from clojure when \n> using a negative index on a sequence\n> * CLJS-2115: Pass not-found in the native-satisfies? branch of nth\n> * CLJS-2111: Transit analysis caching broken for JSValue or regex\n> * CLJS-2101: Undeclared var in do chain of defs\n> * CLJS-2104: Const-replaced exprs do not emit js \"return\"\n> * CLJS-1992: declare after def should have no effect\n> * CLJS-1251: Missing semicolons when emitting deftype and defrecord \n> mistaken use of 'def'\n> * CLJS-1685: Incorrectly lazy subvec when start param is nil\n> * CLJS-1641: Multi-arity defn copies arguments unnecessarily for all cases\n> * CLJS-2092: Redundant call to equiv-map in PAM.-equiv\n> * Check for compilation success, and lib folder\n> * CLJS-2030: Case with grouped keyword test emit result-expr multiple times\n> * CLJS-2094: Predicates unit tests constructs a uuid with nil\n> * CLJS-1891: UUID.toString can return non-string\n> * CLJS-2072: Eliminate reflection in cljs.js-deps\/build-index\n> * CLJS-2012: Find on PHM with nil entry always returns nil entry\n> * CLJS-2057: fix language-in options (es6 deprecated and add missing \n> es2016)\n> * CLJS-2060: Backport CLJ-2141 Return only true\/false from qualified-* \n> predicates\n> * CLJS-2091: reify docstring ISeqable example needs correction\n> * CLJS-2088: fix caching collision between macros ns and regular ns in \n> boostrap\n> * CLJS-2036: Relative path exception thrown when :preloads requires a \n> :foreign-lib\n> * CLJS-2083: Test equiv-map for maps which do not impl IKVReduce\n> * CLJS-2081: Self-host: Regression with CLJS-2079\n> * CLJS-2079: Records and maps are not equal\n> * CLJS-2075: PersistentTreeMap.reduce-kv does not honor reduced?\n> * Browser REPL regression\n> * CLJS-2069: Self-host: automatic `clojure` -> `cljs` aliasing doesn't \n> work when loading macro namespaces\n> * CLJS-2067: reduce-kv \/ inode-kv-reduce fails to honor reduced?\n> * CLJS-2056: Self-host: test-self-parity failing wrt cljs.core\/fn symbol\n>\n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.660, compiler performance, runtime performance, cljs.spec fixes Alex Miller Tue, 27 Jun 2017 09:22:38 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.660\"]\n\nThis release includes many performance enhancements to the\nClojureScript compiler as well as ClojureScript runtime code. In\naddition, the release contains fixes to cljs.spec so that it works\ncorrectly under incremental compilation.\n\nFor more information please refer to the new post here kindly\ncontributed by Mike Fikes:\nhttps:\/\/clojurescript.org\/news\/2017-06-27-faster-compilation-runtime-and-spec-caching-fixes\n\nThanks to all that contributed, and as always, feedback welcome!\n\n## 1.9.660\n\n### Enhancements\n* CLJS-2108: faster set equivalence\n* CLJS-2099: Optimize apply by avoiding .apply\n* CLJS-2046: Optimize expression in call position\n* CLJS-1876: Faster reduce for PV, Subvec and ChunkedSeq\n* CLJS-2080: Faster equiv-map\n* CLJS-2066: Avoid analyzing named fn literal bodies twice\n* CLJS-2065: Improve analyzer munge performance\n\n### Changes\n* CLJS-2134: Warn on variadic signatures in protocol method implementation\n* CLJS-2130: Self-host: Add `:fn-invoke-direct` to public API docstrings\n* CLJS-2112: Iterator based reduce path\n* CLJS-2100: to-array calls seq too often\n* CLJS-2041: Compiler flag to drop Function.prototype.call invokes\n* CLJS-2093: inline ^:const var values\n* CLJS-2042: Variadic invoke calls array_seq inefficiently\n* CLJS-2003 remove redundant calls to `str` in munge\/demunge\n* CLJS-1907: Improve error message from cljs.reader\/read-string\n* CLJS-1724: Include IIterable in fast-path-protocols\n* CLJS-924: Better error message for mistaken use of 'def'\n* CLJS-1599: UUIDs are not equal for upper\/lower case strings\n* NodeJS REPL accepts a :path opt to set NODE_PATH\n* CLJS-1886: RangedIterator should only be created from\ncljs.core.PersistentVector instances\n* CLJS-2068: MapEntry, RedNode and BlackNode are IComparable\n* CLJS-2073: Don't flush for every emitted line\n* CLJS-2089: Warn message wrong for recur to protocol with nil\n* CLJS-2085: defrecord recur method head target object\n* CLJS-1977: defrecord should use murmur hashing like Clojure\n* CLJS-2076: modules should support wildcard namespaces\n* CLJS-2078: add resolve macro\n\n### Fixes\n* CLJS-2133: Invalid variadic IFn implementations now fail\n* CLJS-2128: Fix regression in CLJS-1886\n* CLJS-2126: Add new compiler option :fn-invoke-direct to build-affecting\noptions\n* CLJS-2054: Private core names still result in \"already declared\" warnings\n* CLJS-2125: Duplicate HOF invoke warnings if :static-fns true\n* CLJS-2119: s\/form for s\/& is qualified with `clojure.spec.alpha`\n* CLJS-2121: Self-host: Document string as valid name arg\n* CLJS-2124: Self-host: Tests failing wth Could not find tag parser for\n:cljs.spec.alpha\n* CLJS-2122: Self-host: Non-symbol ns names dumped into env\n* CLJS-2117: Self-host: Port CLJS-1989 to self-hosted\n* CLJS-1989: s\/fdef expansion side effect fails when load cached source\n* CLJS-2116: Need to handle un-namespaced symbol when evaluating `foo.core\n* CLJS-2109: incorrect syntax-quote symbol resolution (resolve-symbol\n'clojure.core) -> 'clojure\/core\n* CLJS-2113: nth function produces different results from clojure when\nusing a negative index on a sequence\n* CLJS-2115: Pass not-found in the native-satisfies? branch of nth\n* CLJS-2111: Transit analysis caching broken for JSValue or regex\n* CLJS-2101: Undeclared var in do chain of defs\n* CLJS-2104: Const-replaced exprs do not emit js \"return\"\n* CLJS-1992: declare after def should have no effect\n* CLJS-1251: Missing semicolons when emitting deftype and defrecord\nmistaken use of 'def'\n* CLJS-1685: Incorrectly lazy subvec when start param is nil\n* CLJS-1641: Multi-arity defn copies arguments unnecessarily for all cases\n* CLJS-2092: Redundant call to equiv-map in PAM.-equiv\n* Check for compilation success, and lib folder\n* CLJS-2030: Case with grouped keyword test emit result-expr multiple times\n* CLJS-2094: Predicates unit tests constructs a uuid with nil\n* CLJS-1891: UUID.toString can return non-string\n* CLJS-2072: Eliminate reflection in cljs.js-deps\/build-index\n* CLJS-2012: Find on PHM with nil entry always returns nil entry\n* CLJS-2057: fix language-in options (es6 deprecated and add missing es2016)\n* CLJS-2060: Backport CLJ-2141 Return only true\/false from qualified-*\npredicates\n* CLJS-2091: reify docstring ISeqable example needs correction\n* CLJS-2088: fix caching collision between macros ns and regular ns in\nboostrap\n* CLJS-2036: Relative path exception thrown when :preloads requires a\n:foreign-lib\n* CLJS-2083: Test equiv-map for maps which do not impl IKVReduce\n* CLJS-2081: Self-host: Regression with CLJS-2079\n* CLJS-2079: Records and maps are not equal\n* CLJS-2075: PersistentTreeMap.reduce-kv does not honor reduced?\n* Browser REPL regression\n* CLJS-2069: Self-host: automatic `clojure` -> `cljs` aliasing doesn't work\nwhen loading macro namespaces\n* CLJS-2067: reduce-kv \/ inode-kv-reduce fails to honor reduced?\n* CLJS-2056: Self-host: test-self-parity failing wrt cljs.core\/fn symbol\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.660, compiler performance, runtime performance, cljs.spec fixes David Nolen Tue, 27 Jun 2017 08:35:22 -0700"},
{"body":"All,\n  Like most new Clojure\/Clojurescript users, I'm trying to navigate the \nvarious library combinations to accomplish my goals.  In this case, I'm \ntrying to find a good set of cljs libraries to build a client app for a \nGraphQL based server.  My understanding is that Om Next, and Reagent plus \nRe-frame, are the most popular client library options.  That being said, \nwhat's the best way to interact with a GraphQL server?  I'm guessing that \nyou can combine them with a specialized GraphQL client like Apollo, or \nRelay Modern;  I understand that this may be redundant, but I'm not exactly \nclear on how you make the most out of GraphQL without a specialized \nclient.  Is it just better to just use cljs with one of these clients and \nforgo the frame works?  Your guidance is appreciated! \nThanks!\n--Nick     \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How do you use GraphQL with Clojurescript? Nick Pavlica Mon, 26 Jun 2017 11:19:37 -0700"},
{"body":"I should add, I\u2019d like to share a lot of specs that are composable and can \nbe used in both clj and cljs, but also only one or the other. \nOn Sunday, June 25, 2017 at 12:44:50 PM UTC-4, Jonathon McKitrick wrote:\n>\n> I have some spec integration on either server side or client side. But I\u2019d \n> like to share the specs between both, using cljc I assume.\n>\n> What\u2019s the best way to organize the code layout?\n> What namespace convention is best for specs shared between front and back \n> ends?\n> Is a cljc file the best way to accomplish this?\n>\n> thanks!\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to organize specs shared between clj and cljs Jonathon McKitrick Sun, 25 Jun 2017 09:50:35 -0700"},
{"body":"I have some spec integration on either server side or client side. But I\u2019d \nlike to share the specs between both, using cljc I assume. \nWhat\u2019s the best way to organize the code layout?\nWhat namespace convention is best for specs shared between front and back \nends?\nIs a cljc file the best way to accomplish this?\n\nthanks!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How to organize specs shared between clj and cljs Jonathon McKitrick Sun, 25 Jun 2017 09:45:07 -0700"},
{"body":"That's really jumping. I can hardly follow that. Maybe we can talk about it\nhere http:\/\/clojureverse.org\/ \nOn Fri, Jun 23, 2017 at 6:16 PM Dustin Getz <dustin.g...@gmail.com> wrote:\n\n> Basically dumping my brain here as it is quite jumbled,\n>\n> Walking the ui ast and injecting memoizers is an incomplete solution, it\n> will yield render-tree pruning, but it is understood that render-tree\n> pruning will not work with graph values. Walking the ui ast to inject thick\n> components (that can be forceUpdated) is still a candidate in my mind.\n>\n> The way an indexer\/reconciler works (in both Om Next, and in Reagent) i\n> believe, you want each horizontal layer in the UI tree responsible for\n> connecting to his own dependencies. Reagent tracks reaction derefs to imply\n> the connection between instance and dependency; om next provides the query\n> protocol and uses that to connect the instance to its dependency. The\n> approaches are more or less equivalent, right? Either way, each strata in\n> the tree is managed standalone and forceUpdated out of band.\n>\n> Any forceUpdate approach will necessarily violate function laws like\n> dynamic scope, because we're perverting the evaluation rules of the AST to\n> evaluate breadth first instead of depth first? So even if we can write our\n> UI code as just functions, and use a macro to inject the components, the ui\n> as it evaluates is going to violate function laws. So i dont know if i see\n> a point to exploring this approach further, as the goal was to make UI code\n> evaluation follow the same proper laws as regular code evaluation.\n>\n> Another approach is to use incremental rendering as described in John\n> Degoes's talk on Purescript Halogen\n> <https:\/\/www.slideshare.net\/jdegoes\/halogen-past-present-and-future>.\n> Essentially, if react lets us define our UI :: state -> VirtualDom,\n> incremental lets us define \u0394UI :: \u0394state -> \u0394VirtualDom, and the runtime\n> provides UI=reduce(\u0394UI, \u0394states) where \u0394states is a stream of state\n> changes. This will give us all our laws and be fast and work with graph\n> values in state, but the types involved are complex. Incremental also loses\n> the intuitive nature of react though where it feels like we are defining\n> html templates. Thinking in terms of \u0394html templates, i dont even know what\n> that would make the ui code look like, probably something like redux\n> reducers. But it would be correct and optimal performance?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/Fy-8QmJuv80\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Optimizing virtual dom computation without using React jiyinyiyong Fri, 23 Jun 2017 22:33:06 -0700"},
{"body":"Sorry, did check email these days....\n\nIf you prefer creating components without `defcomp`, you can write\n`create-comp` directly. It's too verbose though.\nhttps:\/\/github.com\/Respo\/respo\/wiki\/defcomp \nI don't intend to add Hiccup-like DSL to Respo. We alreay got Reagent and\nRum for that. Respo is not designed to be that simple.\n\nOn Wed, Jun 14, 2017 at 7:46 PM Dustin Getz <dustin.g...@gmail.com> wrote:\n\n> Respo UI code is all functions but many of the functions are wrapped in\n> defcomp at the place of definition. Is it possible to move the defcomp up\n> to the root of the UI, so UI code is just functions and no dependency on\n> the macro?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/Fy-8QmJuv80\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Optimizing virtual dom computation without using React jiyinyiyong Fri, 23 Jun 2017 22:23:20 -0700"},
{"body":"Basically dumping my brain here as it is quite jumbled, \n\nWalking the ui ast and injecting memoizers is an incomplete solution, it \nwill yield render-tree pruning, but it is understood that render-tree \npruning will not work with graph values. Walking the ui ast to inject thick \ncomponents (that can be forceUpdated) is still a candidate in my mind. \nThe way an indexer\/reconciler works (in both Om Next, and in Reagent) i \nbelieve, you want each horizontal layer in the UI tree responsible for \nconnecting to his own dependencies. Reagent tracks reaction derefs to imply \nthe connection between instance and dependency; om next provides the query \nprotocol and uses that to connect the instance to its dependency. The \napproaches are more or less equivalent, right? Either way, each strata in \nthe tree is managed standalone and forceUpdated out of band.\n\nAny forceUpdate approach will necessarily violate function laws like \ndynamic scope, because we're perverting the evaluation rules of the AST to \nevaluate breadth first instead of depth first? So even if we can write our \nUI code as just functions, and use a macro to inject the components, the ui \nas it evaluates is going to violate function laws. So i dont know if i see \na point to exploring this approach further, as the goal was to make UI code \nevaluation follow the same proper laws as regular code evaluation.\n\nAnother approach is to use incremental rendering as described in John \nDegoes's talk on Purescript Halogen \n<https:\/\/www.slideshare.net\/jdegoes\/halogen-past-present-and-future>. \nEssentially, if react lets us define our UI :: state -> VirtualDom, \nincremental lets us define \u0394UI :: \u0394state -> \u0394VirtualDom, and the runtime \nprovides UI=reduce(\u0394UI, \u0394states) where \u0394states is a stream of state \nchanges. This will give us all our laws and be fast and work with graph \nvalues in state, but the types involved are complex. Incremental also loses \nthe intuitive nature of react though where it feels like we are defining \nhtml templates. Thinking in terms of \u0394html templates, i dont even know what \nthat would make the ui code look like, probably something like redux \nreducers. But it would be correct and optimal performance?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Optimizing virtual dom computation without using React Dustin Getz Fri, 23 Jun 2017 03:17:11 -0700"},
{"body":"Hello,\n\nthe directory *hello_world\/*\n.\n\u251c\u2500\u2500 cljs.jar\n\u251c\u2500\u2500 node.clj\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 hello_world\n        \u2514\u2500\u2500 core.cljs \n\nin this directory (where the node.clj file is) just execute:\njava -cp \"cljs.jar;src\" clojure.main node.clj\n\nand then:\nnode main.js\n\nThat is.\n\nSaludos!\n\nEl jueves, 15 de junio de 2017, 18:34:22 (UTC-5), Mike Frederick escribi\u00f3:\n>\n> All,\n>\n> It seems like I have setup\/built everything correctly, but I cannot get \n> the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to \n> work...\n>\n> here is the file *src\\hello-world\\core.cljs*\n>\n> (ns hello-world.core\n>   (:require [cljs.nodejs :as nodejs]))\n>\n> (nodejs\/enable-util-print!)\n>\n> (defn -main [& args]\n>   (println \"Hello world!\"))\n>\n> (set! *main-cli-fn* -main)\n>\n> and here is the file *src\\hello-world\\node.clj*\n>\n> (require 'cljs.build.api)\n> (cljs.build.api\/build \"src\"\n>  {:main 'hello-world.core\n>  :output-to \"main.js\"\n>  :target :nodejs})\n>\n>>\n>>\n> These look to be exactly as listed at the tutorial web site. Yes, I am \n> using a Windows system. I compile this with:\n>\n> C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" clojure\n> .main node.clj\n>\n> and get no messages. Then I type:\n>\n> C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js\n> goog.require could not find: hello_world.core\n>\n> C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681\n>     throw Error(errorMessage);\n>           ^\n> Error: goog.require could not find: hello_world.core\n>     at Error (native)\n>     at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\out\n> \\goog\\base.js:681:11)\n>     at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\main\n> .js:22:6)\n>     at Module._compile (module.js:570:32)\n>     at Object.Module._extensions..js (module.js:579:10)\n>     at Module.load (module.js:487:32)\n>     at tryModuleLoad (module.js:446:12)\n>     at Function.Module._load (module.js:438:3)\n>     at Module.runMain (module.js:604:10)\n>     at run (bootstrap_node.js:394:7)\n>\n> Can anyone help me get this running? TIA\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Trying to get \"how to use Clojurescript in node.js\" to work Jose Figueroa Martinez Fri, 16 Jun 2017 13:38:40 -0700"},
{"body":".\n\u251c\u2500\u2500 build.clj\n\u251c\u2500\u2500 cljs.jar\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 hello_world\n        \u2514\u2500\u2500 core.cljs \nForgot the build.clj.\n\nOn Friday, June 16, 2017 at 9:05:14 PM UTC+2, Thomas Heller wrote:\n>\n> \u251c\u2500\u2500 cljs.jar\n> \u2514\u2500\u2500 src\n>     \u2514\u2500\u2500 hello_world\n>         \u2514\u2500\u2500 core.cljs\n>\n>\n> This is the structure you should have. Its a bit confusing since you have \n> src\\hello_world\\src.\n>\n>\n>\n>\n>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Trying to get \"how to use Clojurescript in node.js\" to work Thomas Heller Fri, 16 Jun 2017 12:06:35 -0700"},
{"body":"\u251c\u2500\u2500 cljs.jar\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 hello_world\n        \u2514\u2500\u2500 core.cljs \n\nThis is the structure you should have. Its a bit confusing since you have \nsrc\\hello_world\\src.\n\n\n\n\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Trying to get \"how to use Clojurescript in node.js\" to work Thomas Heller Fri, 16 Jun 2017 12:05:33 -0700"},
{"body":"There is only 1 item in the set of files name *hello_world:* \n<https:\/\/lh3.googleusercontent.com\/-1dAdRU0BETY\/WUP90bjXuUI\/AAAAAAAAADk\/V_DR_XSyVrYtw927p5wJ74YF0bv9pTk9QCLcBGAs\/s1600\/Hello.PNG>\n\n\n\nOn Friday, June 16, 2017 at 9:35:40 AM UTC-5, Jose Figueroa Martinez wrote:\n>\n> Hello,\n>\n> try renaming your *src\/hello-world\/* to *src\/hello_world\/*\n>\n> I think you renamed the project folder, not the source folder in *src\/*.\n>\n> Saludos!\n>\n>\n> El viernes, 16 de junio de 2017, 9:12:38 (UTC-5), Mike Frederick escribi\u00f3:\n>>\n>> OK, I did that, re-ran the compile and execution commands, and got a \n>> similar result:\n>>\n>> C:\\Users\\Michael\\Documents\\src\\hello-world>cd ..\n>>\n>> C:\\Users\\Michael\\Documents\\src>cd hello_world\n>>\n>> C:\\Users\\Michael\\Documents\\src\\hello_world>java -cp \"cljs.jar;src\" \n>> clojure.main node.clj\n>>\n>> C:\\Users\\Michael\\Documents\\src\\hello_world>node main.js\n>> goog.require could not find: hello_world.core\n>>\n>> C:\\Users\\Michael\\Documents\\src\\hello_world\\out\\goog\\base.js:681\n>>     throw Error(errorMessage);\n>>           ^\n>> Error: goog.require could not find: hello_world.core\n>>     at Error (native)\n>>     at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello_world\\\n>> out\\goog\\base.js:681:11)\n>>     at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello_world\\\n>> main.js:22:6)\n>>     at Module._compile (module.js:570:32)\n>>     at Object.Module._extensions..js (module.js:579:10)\n>>     at Module.load (module.js:487:32)\n>>     at tryModuleLoad (module.js:446:12)\n>>     at Function.Module._load (module.js:438:3)\n>>     at Module.runMain (module.js:604:10)\n>>     at run (bootstrap_node.js:394:7)\n>>\n>>\n>> On Friday, June 16, 2017 at 7:26:16 AM UTC-5, Chris Perkins wrote:\n>>>\n>>> Try renaming your \"hello-world\" directory to \"hello_world\".\n>>>\n>>> See: \n>>> https:\/\/stackoverflow.com\/questions\/4420944\/why-does-clojure-convert-dashes-in-names-to-underscores-in-the-filesystem\n>>>\n>>> On Thursday, June 15, 2017 at 5:34:22 PM UTC-6, Mike Frederick wrote:\n>>>>\n>>>> All,\n>>>>\n>>>> It seems like I have setup\/built everything correctly, but I cannot get \n>>>> the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to \n>>>> work...\n>>>>\n>>>> here is the file *src\\hello-world\\core.cljs*\n>>>>\n>>>> (ns hello-world.core\n>>>>   (:require [cljs.nodejs :as nodejs]))\n>>>>\n>>>> (nodejs\/enable-util-print!)\n>>>>\n>>>> (defn -main [& args]\n>>>>   (println \"Hello world!\"))\n>>>>\n>>>> (set! *main-cli-fn* -main)\n>>>>\n>>>> and here is the file *src\\hello-world\\node.clj*\n>>>>\n>>>> (require 'cljs.build.api)\n>>>> (cljs.build.api\/build \"src\"\n>>>>  {:main 'hello-world.core\n>>>>  :output-to \"main.js\"\n>>>>  :target :nodejs})\n>>>>\n>>>>>\n>>>>>\n>>>> These look to be exactly as listed at the tutorial web site. Yes, I am \n>>>> using a Windows system. I compile this with:\n>>>>\n>>>> C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" \n>>>> clojure.main node.clj\n>>>>\n>>>> and get no messages. Then I type:\n>>>>\n>>>> C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js\n>>>> goog.require could not find: hello_world.core\n>>>>\n>>>> C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681\n>>>>     throw Error(errorMessage);\n>>>>           ^\n>>>> Error: goog.require could not find: hello_world.core\n>>>>     at Error (native)\n>>>>     at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\\n>>>> out\\goog\\base.js:681:11)\n>>>>     at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\\n>>>> main.js:22:6)\n>>>>     at Module._compile (module.js:570:32)\n>>>>     at Object.Module._extensions..js (module.js:579:10)\n>>>>     at Module.load (module.js:487:32)\n>>>>     at tryModuleLoad (module.js:446:12)\n>>>>     at Function.Module._load (module.js:438:3)\n>>>>     at Module.runMain (module.js:604:10)\n>>>>     at run (bootstrap_node.js:394:7)\n>>>>\n>>>> Can anyone help me get this running? TIA\n>>>>\n>>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Trying to get \"how to use Clojurescript in node.js\" to work Mike Frederick Fri, 16 Jun 2017 08:49:31 -0700"},
{"body":"Here is the result of trying that:\n\nC:\\Users\\Michael\\Documents\\src\\hello_world>cd ..\\.. \nC:\\Users\\Michael\\Documents>java -cp \"cljs.jar;src\" clojure.main node.clj\nError: Could not find or load main class clojure.main\n\n\nOn Friday, June 16, 2017 at 10:09:41 AM UTC-5, Thomas Heller wrote:\n>\n> C:\\Users\\Michael\\Documents\\src\\hello_world>java -cp \"cljs.jar;src\" clojure\n> .main node.clj\n>\n> Don't run java in the hello world directory. Run it in C:\\Users\\Michael\\\n> Documents\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Trying to get \"how to use Clojurescript in node.js\" to work Mike Frederick Fri, 16 Jun 2017 08:45:21 -0700"},
{"body":"C:\\Users\\Michael\\Documents\\src\\hello_world>java -cp \"cljs.jar;src\" clojure.main \nnode.clj \nDon't run java in the hello world directory. Run it in C:\\Users\\Michael\\\nDocuments\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Trying to get \"how to use Clojurescript in node.js\" to work Thomas Heller Fri, 16 Jun 2017 08:10:13 -0700"},
{"body":"Hello,\n\ntry renaming your *src\/hello-world\/* to *src\/hello_world\/* \nI think you renamed the project folder, not the source folder in *src\/*.\n\nSaludos!\n\n\nEl viernes, 16 de junio de 2017, 9:12:38 (UTC-5), Mike Frederick escribi\u00f3:\n>\n> OK, I did that, re-ran the compile and execution commands, and got a \n> similar result:\n>\n> C:\\Users\\Michael\\Documents\\src\\hello-world>cd ..\n>\n> C:\\Users\\Michael\\Documents\\src>cd hello_world\n>\n> C:\\Users\\Michael\\Documents\\src\\hello_world>java -cp \"cljs.jar;src\" clojure\n> .main node.clj\n>\n> C:\\Users\\Michael\\Documents\\src\\hello_world>node main.js\n> goog.require could not find: hello_world.core\n>\n> C:\\Users\\Michael\\Documents\\src\\hello_world\\out\\goog\\base.js:681\n>     throw Error(errorMessage);\n>           ^\n> Error: goog.require could not find: hello_world.core\n>     at Error (native)\n>     at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello_world\\out\n> \\goog\\base.js:681:11)\n>     at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello_world\\main\n> .js:22:6)\n>     at Module._compile (module.js:570:32)\n>     at Object.Module._extensions..js (module.js:579:10)\n>     at Module.load (module.js:487:32)\n>     at tryModuleLoad (module.js:446:12)\n>     at Function.Module._load (module.js:438:3)\n>     at Module.runMain (module.js:604:10)\n>     at run (bootstrap_node.js:394:7)\n>\n>\n> On Friday, June 16, 2017 at 7:26:16 AM UTC-5, Chris Perkins wrote:\n>>\n>> Try renaming your \"hello-world\" directory to \"hello_world\".\n>>\n>> See: \n>> https:\/\/stackoverflow.com\/questions\/4420944\/why-does-clojure-convert-dashes-in-names-to-underscores-in-the-filesystem\n>>\n>> On Thursday, June 15, 2017 at 5:34:22 PM UTC-6, Mike Frederick wrote:\n>>>\n>>> All,\n>>>\n>>> It seems like I have setup\/built everything correctly, but I cannot get \n>>> the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to \n>>> work...\n>>>\n>>> here is the file *src\\hello-world\\core.cljs*\n>>>\n>>> (ns hello-world.core\n>>>   (:require [cljs.nodejs :as nodejs]))\n>>>\n>>> (nodejs\/enable-util-print!)\n>>>\n>>> (defn -main [& args]\n>>>   (println \"Hello world!\"))\n>>>\n>>> (set! *main-cli-fn* -main)\n>>>\n>>> and here is the file *src\\hello-world\\node.clj*\n>>>\n>>> (require 'cljs.build.api)\n>>> (cljs.build.api\/build \"src\"\n>>>  {:main 'hello-world.core\n>>>  :output-to \"main.js\"\n>>>  :target :nodejs})\n>>>\n>>>>\n>>>>\n>>> These look to be exactly as listed at the tutorial web site. Yes, I am \n>>> using a Windows system. I compile this with:\n>>>\n>>> C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" \n>>> clojure.main node.clj\n>>>\n>>> and get no messages. Then I type:\n>>>\n>>> C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js\n>>> goog.require could not find: hello_world.core\n>>>\n>>> C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681\n>>>     throw Error(errorMessage);\n>>>           ^\n>>> Error: goog.require could not find: hello_world.core\n>>>     at Error (native)\n>>>     at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\\n>>> out\\goog\\base.js:681:11)\n>>>     at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\\n>>> main.js:22:6)\n>>>     at Module._compile (module.js:570:32)\n>>>     at Object.Module._extensions..js (module.js:579:10)\n>>>     at Module.load (module.js:487:32)\n>>>     at tryModuleLoad (module.js:446:12)\n>>>     at Function.Module._load (module.js:438:3)\n>>>     at Module.runMain (module.js:604:10)\n>>>     at run (bootstrap_node.js:394:7)\n>>>\n>>> Can anyone help me get this running? TIA\n>>>\n>>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Trying to get \"how to use Clojurescript in node.js\" to work Jose Figueroa Martinez Fri, 16 Jun 2017 07:36:59 -0700"},
{"body":"OK, I did that, re-ran the compile and execution commands, and got a \nsimilar result: \nC:\\Users\\Michael\\Documents\\src\\hello-world>cd ..\n\nC:\\Users\\Michael\\Documents\\src>cd hello_world\n\nC:\\Users\\Michael\\Documents\\src\\hello_world>java -cp \"cljs.jar;src\" clojure.main \nnode.clj\n\nC:\\Users\\Michael\\Documents\\src\\hello_world>node main.js\ngoog.require could not find: hello_world.core\n\nC:\\Users\\Michael\\Documents\\src\\hello_world\\out\\goog\\base.js:681\n    throw Error(errorMessage);\n          ^\nError: goog.require could not find: hello_world.core\n    at Error (native)\n    at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello_world\\out\\\ngoog\\base.js:681:11)\n    at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello_world\\main.\njs:22:6)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.runMain (module.js:604:10)\n    at run (bootstrap_node.js:394:7)\n\n\nOn Friday, June 16, 2017 at 7:26:16 AM UTC-5, Chris Perkins wrote:\n>\n> Try renaming your \"hello-world\" directory to \"hello_world\".\n>\n> See: \n> https:\/\/stackoverflow.com\/questions\/4420944\/why-does-clojure-convert-dashes-in-names-to-underscores-in-the-filesystem\n>\n> On Thursday, June 15, 2017 at 5:34:22 PM UTC-6, Mike Frederick wrote:\n>>\n>> All,\n>>\n>> It seems like I have setup\/built everything correctly, but I cannot get \n>> the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to \n>> work...\n>>\n>> here is the file *src\\hello-world\\core.cljs*\n>>\n>> (ns hello-world.core\n>>   (:require [cljs.nodejs :as nodejs]))\n>>\n>> (nodejs\/enable-util-print!)\n>>\n>> (defn -main [& args]\n>>   (println \"Hello world!\"))\n>>\n>> (set! *main-cli-fn* -main)\n>>\n>> and here is the file *src\\hello-world\\node.clj*\n>>\n>> (require 'cljs.build.api)\n>> (cljs.build.api\/build \"src\"\n>>  {:main 'hello-world.core\n>>  :output-to \"main.js\"\n>>  :target :nodejs})\n>>\n>>>\n>>>\n>> These look to be exactly as listed at the tutorial web site. Yes, I am \n>> using a Windows system. I compile this with:\n>>\n>> C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" \n>> clojure.main node.clj\n>>\n>> and get no messages. Then I type:\n>>\n>> C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js\n>> goog.require could not find: hello_world.core\n>>\n>> C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681\n>>     throw Error(errorMessage);\n>>           ^\n>> Error: goog.require could not find: hello_world.core\n>>     at Error (native)\n>>     at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\\n>> out\\goog\\base.js:681:11)\n>>     at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\\n>> main.js:22:6)\n>>     at Module._compile (module.js:570:32)\n>>     at Object.Module._extensions..js (module.js:579:10)\n>>     at Module.load (module.js:487:32)\n>>     at tryModuleLoad (module.js:446:12)\n>>     at Function.Module._load (module.js:438:3)\n>>     at Module.runMain (module.js:604:10)\n>>     at run (bootstrap_node.js:394:7)\n>>\n>> Can anyone help me get this running? TIA\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Trying to get \"how to use Clojurescript in node.js\" to work Mike Frederick Fri, 16 Jun 2017 07:13:28 -0700"},
{"body":"Try renaming your \"hello-world\" directory to \"hello_world\". \nSee: \nhttps:\/\/stackoverflow.com\/questions\/4420944\/why-does-clojure-convert-dashes-in-names-to-underscores-in-the-filesystem\n\nOn Thursday, June 15, 2017 at 5:34:22 PM UTC-6, Mike Frederick wrote:\n>\n> All,\n>\n> It seems like I have setup\/built everything correctly, but I cannot get \n> the tutorial given at https:\/\/clojurescript.org\/guides\/quick-start to \n> work...\n>\n> here is the file *src\\hello-world\\core.cljs*\n>\n> (ns hello-world.core\n>   (:require [cljs.nodejs :as nodejs]))\n>\n> (nodejs\/enable-util-print!)\n>\n> (defn -main [& args]\n>   (println \"Hello world!\"))\n>\n> (set! *main-cli-fn* -main)\n>\n> and here is the file *src\\hello-world\\node.clj*\n>\n> (require 'cljs.build.api)\n> (cljs.build.api\/build \"src\"\n>  {:main 'hello-world.core\n>  :output-to \"main.js\"\n>  :target :nodejs})\n>\n>>\n>>\n> These look to be exactly as listed at the tutorial web site. Yes, I am \n> using a Windows system. I compile this with:\n>\n> C:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" clojure\n> .main node.clj\n>\n> and get no messages. Then I type:\n>\n> C:\\Users\\Michael\\Documents\\src\\hello-world>node main.js\n> goog.require could not find: hello_world.core\n>\n> C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681\n>     throw Error(errorMessage);\n>           ^\n> Error: goog.require could not find: hello_world.core\n>     at Error (native)\n>     at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\out\n> \\goog\\base.js:681:11)\n>     at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\main\n> .js:22:6)\n>     at Module._compile (module.js:570:32)\n>     at Object.Module._extensions..js (module.js:579:10)\n>     at Module.load (module.js:487:32)\n>     at tryModuleLoad (module.js:446:12)\n>     at Function.Module._load (module.js:438:3)\n>     at Module.runMain (module.js:604:10)\n>     at run (bootstrap_node.js:394:7)\n>\n> Can anyone help me get this running? TIA\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Trying to get \"how to use Clojurescript in node.js\" to work Chris Perkins Fri, 16 Jun 2017 05:26:30 -0700"},
{"body":"All,\n\nIt seems like I have setup\/built everything correctly, but I cannot get the \ntutorial given at https:\/\/clojurescript.org\/guides\/quick-start to work... \nhere is the file *src\\hello-world\\core.cljs*\n\n(ns hello-world.core\n  (:require [cljs.nodejs :as nodejs]))\n\n(nodejs\/enable-util-print!)\n\n(defn -main [& args]\n  (println \"Hello world!\"))\n\n(set! *main-cli-fn* -main)\n\nand here is the file *src\\hello-world\\node.clj*\n\n(require 'cljs.build.api)\n(cljs.build.api\/build \"src\"\n {:main 'hello-world.core\n :output-to \"main.js\"\n :target :nodejs})\n\n>\n>\nThese look to be exactly as listed at the tutorial web site. Yes, I am \nusing a Windows system. I compile this with:\n\nC:\\Users\\Michael\\Documents\\src\\hello-world>java -cp \"cljs.jar;src\" clojure.main \nnode.clj\n\nand get no messages. Then I type:\n\nC:\\Users\\Michael\\Documents\\src\\hello-world>node main.js\ngoog.require could not find: hello_world.core\n\nC:\\Users\\Michael\\Documents\\src\\hello-world\\out\\goog\\base.js:681\n    throw Error(errorMessage);\n          ^\nError: goog.require could not find: hello_world.core\n    at Error (native)\n    at Object.goog.require (C:\\Users\\Michael\\Documents\\src\\hello-world\\out\\\ngoog\\base.js:681:11)\n    at Object.<anonymous> (C:\\Users\\Michael\\Documents\\src\\hello-world\\main.\njs:22:6)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.runMain (module.js:604:10)\n    at run (bootstrap_node.js:394:7)\n\nCan anyone help me get this running? TIA\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Trying to get \"how to use Clojurescript in node.js\" to work Mike Frederick Thu, 15 Jun 2017 16:34:56 -0700"},
{"body":"Respo UI code is all functions but many of the functions are wrapped in\ndefcomp at the place of definition. Is it possible to move the defcomp up\nto the root of the UI, so UI code is just functions and no dependency on\nthe macro? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Optimizing virtual dom computation without using React Dustin Getz Wed, 14 Jun 2017 04:47:35 -0700"},
{"body":"I don't get your question. For Respo, if you mean macro, there's only one\nmacro called `defcomp` I just added. Respo itself is built with functions.\nSo a week before, my code was all functions, like this\nhttps:\/\/github.com\/Cirru\/stack-editor\/blob\/master\/src\/stack_editor\/comp\/container.cljs#L21 \nOn Tue, Jun 13, 2017 at 6:12 PM Dustin Getz <dustin.g...@gmail.com> wrote:\n\n> I see very interesting. Is it technically feasible to only run the macro\n> from one place, so usercode is just functions?\n>\n> On Tue, Jun 13, 2017 at 12:42 PM, Jiyin Yiyong <jiyinyiy...@gmail.com>\n> wrote:\n>\n>> I tried something like that. Actually I implemented a simple virtual DOM\n>> library by myself to do that. https:\/\/github.com\/Respo\/respo Since I'm\n>> not using React, I can optimize virtual DOM with  `identical?` function as\n>> I need, and let the library reuse existing components. It's possible, but\n>> I'm not sure if this is what you want.\n>>\n>>\n>> On Saturday, June 10, 2017 at 12:02:50 AM UTC+8, Dustin Getz wrote:\n>>>\n>>> If I define a UI as just functions, no React components or Reagent\n>>> components, is it possible to layer render-tree pruning on top of this, or\n>>> index and reconcile this somehow? For example a macro that walked the tree\n>>> and injected React components at the right places. Memoizing each function\n>>> comes to mind as well.\n>>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>>\n> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>>\n>\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/Fy-8QmJuv80\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Optimizing virtual dom computation without using React jiyinyiyong Tue, 13 Jun 2017 08:52:43 -0700"},
{"body":"Like this:\nhttps:\/\/stackoverflow.com\/questions\/3346382\/clojure-adding-a-debug-trace-to-every-function-in-a-namespace \nOn Tue, Jun 13, 2017 at 1:12 PM, Dustin Getz <dustin.g...@gmail.com> wrote:\n\n> I see very interesting. Is it technically feasible to only run the macro\n> from one place, so usercode is just functions?\n>\n> On Tue, Jun 13, 2017 at 12:42 PM, Jiyin Yiyong <jiyinyiy...@gmail.com>\n> wrote:\n>\n>> I tried something like that. Actually I implemented a simple virtual DOM\n>> library by myself to do that. https:\/\/github.com\/Respo\/respo Since I'm\n>> not using React, I can optimize virtual DOM with  `identical?` function as\n>> I need, and let the library reuse existing components. It's possible, but\n>> I'm not sure if this is what you want.\n>>\n>>\n>> On Saturday, June 10, 2017 at 12:02:50 AM UTC+8, Dustin Getz wrote:\n>>>\n>>> If I define a UI as just functions, no React components or Reagent\n>>> components, is it possible to layer render-tree pruning on top of this, or\n>>> index and reconcile this somehow? For example a macro that walked the tree\n>>> and injected React components at the right places. Memoizing each function\n>>> comes to mind as well.\n>>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Optimizing virtual dom computation without using React Dustin Getz Tue, 13 Jun 2017 03:15:40 -0700"},
{"body":"I see very interesting. Is it technically feasible to only run the macro\nfrom one place, so usercode is just functions? \nOn Tue, Jun 13, 2017 at 12:42 PM, Jiyin Yiyong <jiyinyiy...@gmail.com>\nwrote:\n\n> I tried something like that. Actually I implemented a simple virtual DOM\n> library by myself to do that. https:\/\/github.com\/Respo\/respo Since I'm\n> not using React, I can optimize virtual DOM with  `identical?` function as\n> I need, and let the library reuse existing components. It's possible, but\n> I'm not sure if this is what you want.\n>\n>\n> On Saturday, June 10, 2017 at 12:02:50 AM UTC+8, Dustin Getz wrote:\n>>\n>> If I define a UI as just functions, no React components or Reagent\n>> components, is it possible to layer render-tree pruning on top of this, or\n>> index and reconcile this somehow? For example a macro that walked the tree\n>> and injected React components at the right places. Memoizing each function\n>> comes to mind as well.\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Optimizing virtual dom computation without using React Dustin Getz Tue, 13 Jun 2017 03:12:49 -0700"},
{"body":"I tried something like that. Actually I implemented a simple virtual DOM \nlibrary by myself to do that. https:\/\/github.com\/Respo\/respo Since I'm not \nusing React, I can optimize virtual DOM with  `identical?` function as I \nneed, and let the library reuse existing components. It's possible, but I'm \nnot sure if this is what you want. \nOn Saturday, June 10, 2017 at 12:02:50 AM UTC+8, Dustin Getz wrote:\n>\n> If I define a UI as just functions, no React components or Reagent \n> components, is it possible to layer render-tree pruning on top of this, or \n> index and reconcile this somehow? For example a macro that walked the tree \n> and injected React components at the right places. Memoizing each function \n> comes to mind as well.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Optimizing virtual dom computation without using React Jiyin Yiyong Tue, 13 Jun 2017 02:42:51 -0700"},
{"body":"If I define a UI as just functions, no React components or Reagent \ncomponents, is it possible to layer render-tree pruning on top of this, or \nindex and reconcile this somehow? For example a macro that walked the tree \nand injected React components at the right places. Memoizing each function \ncomes to mind as well. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Optimizing virtual dom computation without using React Dustin Getz Fri, 09 Jun 2017 09:03:06 -0700"},
{"body":"The js code is generally userland custom renderers (eg a forms library) and \nneeds compatibility with as much of the existing js ecosystem as possible. \nUsercode will call back into cljs fns, which means the stack will look like \ncljs-js-cljs-js-cljs-js... \n*Ways to do this?*\nJust use cljs values in js, like Mori \n<https:\/\/github.com\/swannodette\/mori\/blob\/e1269ba57955f4f91b7728c8a759314d9af8b999\/src\/mori.cljs#L10>\n.\nDeep copy at the boundary\nUse immutablejs everywhere, even from cljs code.\nPolyfill the immutablejs api against cljs data structures\nCopy into frozen regular js objects, use react-addons-update \n<https:\/\/github.com\/dustingetz\/update-in> for immutable operations.\n\n*Factors to consider?*\nPerformance in simple path\nPerformance of adapters to 3rd party js\nDifficulty of writing js adapters\nDifficulty of writing cljs adapters\n\nHow costly are these adapters exactly? Has anyone tried to do this?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] data structures interop between js and cljs stack frames Dustin Getz Fri, 09 Jun 2017 06:46:05 -0700"},
{"body":"Hi,\n\nwe have been very busy since :clojureD to make replikativ more\napproachable. Most importantly we have significantly improved our\ndocumentation and material under http:\/\/replikativ.io and for the\nunderlying libraries https:\/\/github.com\/replikativ\/ \nThe most important new features are:\n\n- A test-net running under ws:\/\/replikativ.io:8888\n  Feel free to deploy prototypes against the test-net to have serverless\napplications or run a peer or deploy your own internal cluster.\n- Improved CRDTs, esp. the OR-Map and a new experimental merging OR-Map\n- React native support including a demo project (chat42app with re-natal)\n- Higher throughput of many MiB\/s for high volume CRDTs through a faster\nbinary transport.\n- Status notifications in the browser through hooking into timbre in chat42.\n- A demo of IPFS integration in filesync-replikativ demonstrates how to\nleverage DHTs over immutable data with replikativ's distributed write\ncoordination while staying cryptographically safe through joined merkle\nhashes. Other possibilities are datproject, bittorrent or S3.\n\nWe will also soon have a polished JavaScript API which can be combined\nwith react nicely.\n\nFor 0.3 we currently hammock about index based synchronization with the\nhitchhiker tree (1), that we have ported to ClojureScript recently. We\nare also very interested in a p2p pub-sub overlay protocol like\nPolderCast (2) with WebRTC (4). If you have any experience or\nreferences, please let us know!\n\nWe also collaborate with the nice datsync (3) guys to build eventual\nconsistent datalog synchronization on top of onyx and replikativ for a\nprogramming model for the large (similar to Eve, for example).\n\n\nFeel free to ask any questions! :)\n\n\nBest,\nChristian\n\n(1) https:\/\/github.com\/datacrypt-project\/hitchhiker-tree\n(2) http:\/\/acropolis.cs.vu.nl\/%7Espyros\/www\/papers\/PolderCast.pdf\n(3) https:\/\/github.com\/metasoarous\/datsync\n(4) https:\/\/github.com\/albertlinde\/Legion\/ already has several overlay\nprotocols, we know Albert, so maybe we can also figure something out\ntogether.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"[ClojureScript] [ANN] replikativ 0.2.4 - An open, scalable and distributive infrastructure for a data-driven community of applications. Christian Weilbach Tue, 06 Jun 2017 14:46:35 -0700"},
{"body":"Now we have shadow-cljs ! \nhttps:\/\/github.com\/thheller\/shadow-cljs\/wiki\/ClojureScript-for-JS-Devs \nOn Friday, May 20, 2016 at 1:04:21 AM UTC+8, Jiyin Yiyong wrote:\n>\n> Searched and read some pages on this topic,\n> https:\/\/github.com\/clojure\/clojurescript\/wiki\/Google-Summer-of-Code-2015\n> https:\/\/github.com\/clojure\/clojurescript\/wiki\/Compiler-Options#foreign-libs\n> as a Webpack user I used them quite open. How about CommonJS support now?\n>\n> * Can I require commonjs file?\n> * Can I use commonjs packages?\n> * ES6 is starting to taking over the JavaScript world, does cljs compiler \n> recognise import and export?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How about ClojureScript and CommonJS now? Jiyin Yiyong Thu, 01 Jun 2017 21:32:57 -0700"},
{"body":"Yes we try to note breaking changes in releases but this one obviously\nslipped through. Sorry about that. \nDavid\n\nOn Wed, May 31, 2017 at 7:03 PM, Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> I agree, it does make sense to consolidate to Clojure's behaviour. In the\n> future it could be good to add an extra release notes section for changes\n> like these that break the ClojureScript API contract.\n>\n> Thanks, Daniel.\n>\n> On Thu, Jun 1, 2017 at 10:53 AM David Nolen <dnolen.li...@gmail.com>\n> wrote:\n>\n>> Thanks for the report. That's unfortunate but I think in this case\n>> consolidating the behavior with Clojure is best.\n>>\n>> David\n>>\n>> On Wed, May 31, 2017 at 4:28 PM, Daniel Compton <\n>> daniel.compton.li...@gmail.com> wrote:\n>>\n>>> Hi folks\n>>>\n>>> We ran into issues in production yesterday after upgrading to\n>>> ClojureScript 1.9.456, and I haven't seen anyone else mention this so I\n>>> thought I'd point it out for anyone upgrading.\n>>>\n>>> In versions prior to CLJS 1.9.456, seqable? tested only for the ISeqable\n>>> protocol, i.e. collections. In CLJS-1875\n>>> <https:\/\/dev.clojure.org\/jira\/browse\/CLJS-1875>, released as part of\n>>> 1.9.456\n>>> <https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/wGJeG36GPTk> it\n>>> now tests for anything that you can call seq on. This matches the\n>>> behaviour of the seqable? function in Clojure that was recently added\n>>> for 1.9, but was a breaking change in behaviour for ClojureScript.\n>>>\n>>> *In concrete terms, this means that strings and arrays that previously\n>>> tested false for seqable? will now test true.*\n>>>\n>>> *In 1.9.229*\n>>> cljs.user=> (seqable? [:a :b :c])\n>>> true\n>>> cljs.user=> (seqable? {:a :b :c :d})\n>>> true\n>>> cljs.user=> *(seqable? \"abcd\")*\n>>> *false*\n>>> cljs.user=> *(seqable? (into-array [:a :b :c]))*\n>>> *false*\n>>>\n>>> *In 1.9.456 and beyond*\n>>> cljs.user=> (seqable? [:a :b :c])\n>>> true\n>>> cljs.user=> (seqable? {:a :b :c :d})\n>>> true\n>>> cljs.user=> *(seqable? \"abcd\")*\n>>> *true*\n>>> cljs.user=> *(seqable? (into-array [:a :b :c]))*\n>>> *true*\n>>>\n>>> --\n>>> Daniel\n>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescript+unsubscr...@googlegroups.com.\n>>> To post to this group, send email to clojurescript@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Warning: breaking behaviour change of seqable? in CLJS 1.9.456 David Nolen Thu, 01 Jun 2017 07:48:00 -0700"},
{"body":"I agree, it does make sense to consolidate to Clojure's behaviour. In the\nfuture it could be good to add an extra release notes section for changes\nlike these that break the ClojureScript API contract. \nThanks, Daniel.\n\nOn Thu, Jun 1, 2017 at 10:53 AM David Nolen <dnolen.li...@gmail.com> wrote:\n\n> Thanks for the report. That's unfortunate but I think in this case\n> consolidating the behavior with Clojure is best.\n>\n> David\n>\n> On Wed, May 31, 2017 at 4:28 PM, Daniel Compton <\n> daniel.compton.li...@gmail.com> wrote:\n>\n>> Hi folks\n>>\n>> We ran into issues in production yesterday after upgrading to\n>> ClojureScript 1.9.456, and I haven't seen anyone else mention this so I\n>> thought I'd point it out for anyone upgrading.\n>>\n>> In versions prior to CLJS 1.9.456, seqable? tested only for the ISeqable\n>> protocol, i.e. collections. In CLJS-1875\n>> <https:\/\/dev.clojure.org\/jira\/browse\/CLJS-1875>, released as part of\n>> 1.9.456\n>> <https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/wGJeG36GPTk> it\n>> now tests for anything that you can call seq on. This matches the\n>> behaviour of the seqable? function in Clojure that was recently added\n>> for 1.9, but was a breaking change in behaviour for ClojureScript.\n>>\n>> *In concrete terms, this means that strings and arrays that previously\n>> tested false for seqable? will now test true.*\n>>\n>> *In 1.9.229*\n>> cljs.user=> (seqable? [:a :b :c])\n>> true\n>> cljs.user=> (seqable? {:a :b :c :d})\n>> true\n>> cljs.user=> *(seqable? \"abcd\")*\n>> *false*\n>> cljs.user=> *(seqable? (into-array [:a :b :c]))*\n>> *false*\n>>\n>> *In 1.9.456 and beyond*\n>> cljs.user=> (seqable? [:a :b :c])\n>> true\n>> cljs.user=> (seqable? {:a :b :c :d})\n>> true\n>> cljs.user=> *(seqable? \"abcd\")*\n>> *true*\n>> cljs.user=> *(seqable? (into-array [:a :b :c]))*\n>> *true*\n>>\n>> --\n>> Daniel\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups\n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an\n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Warning: breaking behaviour change of seqable? in CLJS 1.9.456 Daniel Compton Wed, 31 May 2017 16:04:23 -0700"},
{"body":"Thanks for the report. That's unfortunate but I think in this case\nconsolidating the behavior with Clojure is best. \nDavid\n\nOn Wed, May 31, 2017 at 4:28 PM, Daniel Compton <\ndaniel.compton.li...@gmail.com> wrote:\n\n> Hi folks\n>\n> We ran into issues in production yesterday after upgrading to\n> ClojureScript 1.9.456, and I haven't seen anyone else mention this so I\n> thought I'd point it out for anyone upgrading.\n>\n> In versions prior to CLJS 1.9.456, seqable? tested only for the ISeqable\n> protocol, i.e. collections. In CLJS-1875\n> <https:\/\/dev.clojure.org\/jira\/browse\/CLJS-1875>, released as part of\n> 1.9.456\n> <https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/wGJeG36GPTk> it\n> now tests for anything that you can call seq on. This matches the\n> behaviour of the seqable? function in Clojure that was recently added for\n> 1.9, but was a breaking change in behaviour for ClojureScript.\n>\n> *In concrete terms, this means that strings and arrays that previously\n> tested false for seqable? will now test true.*\n>\n> *In 1.9.229*\n> cljs.user=> (seqable? [:a :b :c])\n> true\n> cljs.user=> (seqable? {:a :b :c :d})\n> true\n> cljs.user=> *(seqable? \"abcd\")*\n> *false*\n> cljs.user=> *(seqable? (into-array [:a :b :c]))*\n> *false*\n>\n> *In 1.9.456 and beyond*\n> cljs.user=> (seqable? [:a :b :c])\n> true\n> cljs.user=> (seqable? {:a :b :c :d})\n> true\n> cljs.user=> *(seqable? \"abcd\")*\n> *true*\n> cljs.user=> *(seqable? (into-array [:a :b :c]))*\n> *true*\n>\n> --\n> Daniel\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Warning: breaking behaviour change of seqable? in CLJS 1.9.456 David Nolen Wed, 31 May 2017 15:54:12 -0700"},
{"body":"Hi folks\n\nWe ran into issues in production yesterday after upgrading to ClojureScript\n1.9.456, and I haven't seen anyone else mention this so I thought I'd point\nit out for anyone upgrading. \nIn versions prior to CLJS 1.9.456, seqable? tested only for the ISeqable\nprotocol, i.e. collections. In CLJS-1875\n<https:\/\/dev.clojure.org\/jira\/browse\/CLJS-1875>, released as part of 1.9.456\n<https:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/wGJeG36GPTk> it now\ntests for anything that you can call seq on. This matches the behaviour of\nthe seqable? function in Clojure that was recently added for 1.9, but was a\nbreaking change in behaviour for ClojureScript.\n\n*In concrete terms, this means that strings and arrays that previously\ntested false for seqable? will now test true.*\n\n*In 1.9.229*\ncljs.user=> (seqable? [:a :b :c])\ntrue\ncljs.user=> (seqable? {:a :b :c :d})\ntrue\ncljs.user=> *(seqable? \"abcd\")*\n*false*\ncljs.user=> *(seqable? (into-array [:a :b :c]))*\n*false*\n\n*In 1.9.456 and beyond*\ncljs.user=> (seqable? [:a :b :c])\ntrue\ncljs.user=> (seqable? {:a :b :c :d})\ntrue\ncljs.user=> *(seqable? \"abcd\")*\n*true*\ncljs.user=> *(seqable? (into-array [:a :b :c]))*\n*true*\n\n--\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Warning: breaking behaviour change of seqable? in CLJS 1.9.456 Daniel Compton Wed, 31 May 2017 13:29:06 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.562\"]\n\nThis release coincides with Clojure 1.9.0-alpha17, includes a variety\nof fixes, and updates both the Closure Compiler & Library dependencies.\n\nAs always, feedback welcome!\n\n### Enhancements\n* CLJS-2027: Add language-in for ECMA 2017 and ECMA Next\n* CLJS-2026: Add Compiler option for rewrite polyfills\n\n### Changes\n* CLJS-2021: subvec throws when passed non-vector\n* CLJS-1884: Give a chance to MetaFn to be removed by closure under\n:advanced\n  optimization Replace with-meta calls by -with-meta calls where possible\n* CLJS-2052: Port new spec.alpha enhancements\n* Update Google Closure Compiler dependency\n* Update Google Closure Library dependency\n\n### Fixes\n* CLJS-2053: Regression: cljs.spec.alpha\/any for fdef\n* CLJS-2039: remove extraneous argument from ChunkBuffer.chunk\n* Fix assumption that all closure-compliant JS is goog.*\n* CLJS-2035: Self-host: Add map-entry-test to self-parity\n* CLJS-2033: set-validator! should check current state\n* CLJS-2008: Self-host: backport fixes to threading macros\n* CLJS-2005: Bad error message with duplicate arity function definitions\n* CLJS-2032: Case macro expansion evaluates expression twice when no\nmatching clause\n* CLJS-2023: User supplied type hints stopped working on js\/goog.DEBUG\n* CLJS-2020: defmulti \"miss\" performance poor\n* CLJS-2034: Sequence and Eduction produce infinite loop in transducer that\nappends to the reduction\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.562 - Clojure 1.9.0-alpha17 parity David Nolen Fri, 26 May 2017 14:58:59 -0700"},
{"body":"core.async 0.3.443 is now available.\n\nTry it via:  [org.clojure\/core.async \"0.3.443\"] \n0.3.443 includes the following changes:\n\n   - ASYNC-159 <http:\/\/dev.clojure.org\/jira\/browse\/ASYNC-159> - \n   promise-chan in ClojureScript is broken\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] core.async 0.3.443 Alex Miller Fri, 26 May 2017 08:05:28 -0700"},
{"body":"This one is also cool:\n\nBen Titzer @ VMSS16: A Little on V8 and WebAssembly \nhttps:\/\/www.youtube.com\/watch?v=BRNxM8szTPA \nOn Friday, May 26, 2017 at 2:47:54 AM UTC+8, Nick Pavlica wrote:\n>\n> Lots of great things are happening in the JS community!  If you haven't \n> had an opportunity to watch this video talking about what's next for V8, \n> it's worth the watch.\n>\n> V8, Advanced JavaScript, & the Next Performance Frontier (Google I\/O '17)\n>   - https:\/\/youtu.be\/EdFDJANJJLs\n>\n> -- Nick\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new V8 is coming - Google I\/O 2017 Jiyin Yiyong Fri, 26 May 2017 02:52:23 -0700"},
{"body":"thanks~\n\n\u5728 2017\u5e745\u670825\u65e5\u661f\u671f\u56db UTC+8\u4e0b\u534811:20:03\uff0cMike Rodriguez\u5199\u9053\uff1a\n>\n> https:\/\/groups.google.com\/d\/msg\/reagent-project\/32o3xkXzScw\/Hp30XZN_AgAJ\n>\n> On Wednesday, May 24, 2017 at 11:56:37 PM UTC-4, zhangen...@gmail.com \n> wrote:\n>>\n>> I create a reagent template project, then I want to use a react UI \n>> library, like antd (https:\/\/ant.design\/docs\/react\/introduce), I think \n>> cljsjs\/antd can be used, but doesn't success.\n>>\n>> I change the function current-page like that:\n>>\n>> (defn current-page []\n>>   [js\/antd.Button.])\n>>\n>> but doesn't work.\n>>\n>> other side, the code like that:\n>>\n>> (defn current-page []\n>>   [:div (js\/antd.message.success. \"success\")])\n>>\n>> work success!\n>>\n>> I know that is a function call, not a compontent.\n>> So, how to use compontent like \"Button\"?\n>>\n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: question for reagent, how to use component defined by js, like cljsjs\/antd zhangenqi . 1989 Thu, 25 May 2017 19:31:16 -0700"},
{"body":"thanks~\n\n\u5728 2017\u5e745\u670825\u65e5\u661f\u671f\u56db UTC+8\u4e0b\u53489:59:46\uff0cDustin Getz\u5199\u9053\uff1a\n>\n> have you tried (reagent\/adapt-react-class js\/antd.Button)\n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] question for reagent, how to use component defined by js, like cljsjs\/antd zhangenqi . 1989 Thu, 25 May 2017 19:30:57 -0700"},
{"body":"Lots of great things are happening in the JS community!  If you haven't had \nan opportunity to watch this video talking about what's next for V8, it's \nworth the watch. \nV8, Advanced JavaScript, & the Next Performance Frontier (Google I\/O '17)\n  - https:\/\/youtu.be\/EdFDJANJJLs\n\n-- Nick\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] A new V8 is coming - Google I\/O 2017 Nick Pavlica Thu, 25 May 2017 11:48:05 -0700"},
{"body":"https:\/\/groups.google.com\/d\/msg\/reagent-project\/32o3xkXzScw\/Hp30XZN_AgAJ \nOn Wednesday, May 24, 2017 at 11:56:37 PM UTC-4, zhangen...@gmail.com wrote:\n>\n> I create a reagent template project, then I want to use a react UI \n> library, like antd (https:\/\/ant.design\/docs\/react\/introduce), I think \n> cljsjs\/antd can be used, but doesn't success.\n>\n> I change the function current-page like that:\n>\n> (defn current-page []\n>   [js\/antd.Button.])\n>\n> but doesn't work.\n>\n> other side, the code like that:\n>\n> (defn current-page []\n>   [:div (js\/antd.message.success. \"success\")])\n>\n> work success!\n>\n> I know that is a function call, not a compontent.\n> So, how to use compontent like \"Button\"?\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: question for reagent, how to use component defined by js, like cljsjs\/antd Mike Rodriguez Thu, 25 May 2017 08:20:22 -0700"},
{"body":"have you tried (reagent\/adapt-react-class js\/antd.Button) \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] question for reagent, how to use component defined by js, like cljsjs\/antd Dustin Getz Thu, 25 May 2017 06:59:55 -0700"},
{"body":"I create a reagent template project, then I want to use a react UI library, \nlike antd (https:\/\/ant.design\/docs\/react\/introduce), I think cljsjs\/antd \ncan be used, but doesn't success. \nI change the function current-page like that:\n\n(defn current-page []\n  [js\/antd.Button.])\n\nbut doesn't work.\n\nother side, the code like that:\n\n(defn current-page []\n  [:div (js\/antd.message.success. \"success\")])\n\nwork success!\n\nI know that is a function call, not a compontent.\nSo, how to use compontent like \"Button\"?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] question for reagent, how to use component defined by js, like cljsjs\/antd zhangenqi . 1989 Wed, 24 May 2017 20:57:06 -0700"},
{"body":"Hi Marc\n\nA bit of feedback. Your home page weighs 6.5Mb and takes 24seconds to load. Latency between Australia and London will account for some of that but not much. What seems to exacerbate the problem is that your page makes 179 requests, 154 of which are Javascript files. Are you using `lein cljsbuild`? This concatenates your .js files into a single app.js file which will help you reduce latency. \nReagrds\n\ngvim\n\n\n\n\nOn 13\/05\/2017 07:04, Marc Griffiths wrote:\n Hi,\n\nI recently deployed a 100% cljs\/cls site: organicinvestmentcooperative.com.au\n\nI'm wondering if people can point me towards other clojurescript websites, or \npeople or resources to help build commercial scale websites in clojurescript\n\nFeels like there is a lot of potential here, but lack of front end libraries is \ncausing more development work compared to more mainsteam technologies\n\nThanks!\nMarc\n\n \n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- You received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Large public clojurescript websites gvim Mon, 22 May 2017 19:45:05 -0700"},
{"body":"I've noticed that taxamo.com are using a fair bit of CLJS across their \nsites, though you need to have an account to see most of it. \nOn Wednesday, 17 May 2017 03:19:13 UTC-6, Jiyin Yiyong wrote:\n>\n> On Saturday, May 13, 2017 at 11:43:03 PM UTC+8, Marc Griffiths wrote:\n> > Hi,\n> > \n> > I recently deployed a 100% cljs\/cls site: \n> organicinvestmentcooperative.com.au\n> > \n> > I'm wondering if people can point me towards other clojurescript \n> websites, or people or resources to help build commercial scale websites in \n> clojurescript\n> > \n> > Feels like there is a lot of potential here, but lack of front end \n> libraries is causing more development work compared to more mainsteam \n> technologies\n> > \n> > Thanks!\n> > Marc\n>\n> How about https:\/\/github.com\/status-im\/status-react\/ \n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Large public clojurescript websites Ivan Reese Mon, 22 May 2017 17:13:16 -0700"},
{"body":"I made a quick video showing how you'd use what we have talked about here \nwith \"create-react-app\". \nhttps:\/\/www.youtube.com\/watch?v=BLDX5Twt2zk\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Sun, 21 May 2017 01:47:52 -0700"},
{"body":"Yes Webpack will replace the dependent files. Webpack made a concept called\n\"module tree\" based on dependency tree. File changes will propagate along\nthe tree, and hit the root at last. But if a change propagates to root, the\nwhole page reloads. That's not what we wanted. \nI don't have an example, but you may follow the docs:\nhttps:\/\/webpack.js.org\/guides\/hmr-react\/#app-code\n\nroughly 3 steps(I did that before but not sure about every detail)\n\n1) add configs in `webpack.config.js`\n\n\n\n  entry: [\n    'react-hot-loader\/patch',\n    \/\/ activate HMR for React\n\n    'webpack-dev-server\/client?http:\/\/localhost:8080', <---- add this\n    \/\/ bundle the client for webpack-dev-server\n    \/\/ and connect to the provided endpoint\n\n    'webpack\/hot\/only-dev-server', <---- add this\n    \/\/ bundle the client for hot reloading\n    \/\/ only- means to only hot reload for successful updates\n\n    '.\/index.js'\n    \/\/ the entry point of our app\n  ],\n\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),  <---- add this\n    \/\/ enable HMR globally\n\n    new webpack.NamedModulesPlugin(),\n    \/\/ prints more readable module names in the browser console on HMR updates\n  ],\n\n2) add `module.hot.accept('.\/demo', cb)` to handle the changes from\n'.\/demo', so it will not reload the page:\n\n\/\/ Hot Module Replacement APIif (module.hot) {\n  module.hot.accept('.\/components\/App', () => {\n    render(App)\n  });}\n\n3) replace `webpack` to `webpack-dev-server` to start bunding:\n\nwebpack-dev-server\n\n\nWebpack would inject code that starts a WebSocket and responds to file\nchanges. Since it contains many steps, it's highly possible you run into\nproblems setting up Webpack HMR.\n\nOn Wed, May 17, 2017 at 6:54 PM Thomas Heller <th.hel...@gmail.com> wrote:\n\n> The shadow-cljs compiler already does the correct thing when it comes to\n> macros and recompiles all affected CLJS files.\n>\n> It does however know nothing about JS files that may be affected as well\n> so it would not reload those. I don't know if the webpack HMR will reload\n> dependent files?\n>\n> Does it reload .\/index.js if that does require(\"shadow.cljs\/some.foo\") and\n> some.foo was recompiled?\n>\n> I have never even seen a HMR config, can you share one so I can try a few\n> things?\n>\n> On Wednesday, May 17, 2017 at 12:48:18 PM UTC+2, Jiyin Yiyong wrote:\n> > Just realized that ClojureScript is different from CoffeeScript because\n> of the macro system. If a macro changed, it may cause changes of multiple\n> files. So that it's hard to just detect which file changed and compiled it\n> alone. The only window left is to read and compare file content before\n> writing, if we are trying to get rid of the unnecessary change events...\n> >\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/AGXku7Ous0Y\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm jiyinyiyong Wed, 17 May 2017 04:21:38 -0700"},
{"body":"The shadow-cljs compiler already does the correct thing when it comes to macros \nand recompiles all affected CLJS files. \nIt does however know nothing about JS files that may be affected as well so it \nwould not reload those. I don't know if the webpack HMR will reload dependent \nfiles?\n\nDoes it reload .\/index.js if that does require(\"shadow.cljs\/some.foo\") and \nsome.foo was recompiled?\n\nI have never even seen a HMR config, can you share one so I can try a few \nthings?\n\nOn Wednesday, May 17, 2017 at 12:48:18 PM UTC+2, Jiyin Yiyong wrote:\n> Just realized that ClojureScript is different from CoffeeScript because of \n> the macro system. If a macro changed, it may cause changes of multiple files. \n> So that it's hard to just detect which file changed and compiled it alone. \n> The only window left is to read and compare file content before writing, if \n> we are trying to get rid of the unnecessary change events...\n> \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Wed, 17 May 2017 03:54:52 -0700"},
{"body":"Just realized that ClojureScript is different from CoffeeScript because of\nthe macro system. If a macro changed, it may cause changes of multiple\nfiles. So that it's hard to just detect which file changed and compiled it\nalone. The only window left is to read and compare file content before\nwriting, if we are trying to get rid of the unnecessary change events... \nOn Wed, May 17, 2017 at 6:18 PM Thomas Heller <th.hel...@gmail.com> wrote:\n\n>\n> > * in `node_modules\/` there are always tens or even thousands of folders,\n> which I'm never happy to open it.\n> >\n>\n> That is indeed scary, but you'd never need to open it. Same way you never\n> look at any other node_modules folder probably.\n>\n> >\n> > * for hot module replacement issues, sometimes we want to ignore the\n> whole `node_modules\/` because of the amount of the files,\n> https:\/\/webpack.js.org\/configuration\/watch\/#watchoptions-ignored . I\n> don't think all of us will ignore that folder, but we might do and we\n> consider code in `node_modules\/` remaining the same.\n> >\n>\n> Given that you can specify a regexp you can just use\n>\n> ignored: \/node_modules\\\/(?!shadow-cljs)\/\n>\n> where it still ignores any node_modules folder except shadow-cljs.\n> Watching this folder however is currently not the best idea because I was\n> lazy and didn't optimize for it yet. That means that the compiler will emit\n> all files on compile, not just the files that were actually\n> recompiled\/changed.\n>\n> I will fix that eventually.\n> https:\/\/github.com\/thheller\/shadow-cljs\/issues\/9\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/AGXku7Ous0Y\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm jiyinyiyong Wed, 17 May 2017 03:48:46 -0700"},
{"body":"> * in `node_modules\/` there are always tens or even thousands of folders, \n> which I'm never happy to open it.\n> \nThat is indeed scary, but you'd never need to open it. Same way you never look \nat any other node_modules folder probably.\n\n> \n> * for hot module replacement issues, sometimes we want to ignore the whole \n> `node_modules\/` because of the amount of the files,\u00a0\n> https:\/\/webpack.js.org\/configuration\/watch\/#watchoptions-ignored\u00a0. I don't \n> think all of us will ignore that folder, but we might do and we consider code \n> in `node_modules\/` remaining the same.\n> \n\nGiven that you can specify a regexp you can just use\n\nignored: \/node_modules\\\/(?!shadow-cljs)\/\n\nwhere it still ignores any node_modules folder except shadow-cljs. Watching \nthis folder however is currently not the best idea because I was lazy and \ndidn't optimize for it yet. That means that the compiler will emit all files on \ncompile, not just the files that were actually recompiled\/changed.\n\nI will fix that eventually.\nhttps:\/\/github.com\/thheller\/shadow-cljs\/issues\/9\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Wed, 17 May 2017 03:18:24 -0700"},
{"body":"On Saturday, May 13, 2017 at 11:43:03 PM UTC+8, Marc Griffiths wrote:\n> Hi,\n> \n> I recently deployed a 100% cljs\/cls site: organicinvestmentcooperative.com.au\n> \n> I'm wondering if people can point me towards other clojurescript websites, or \n> people or resources to help build commercial scale websites in clojurescript\n> \n> Feels like there is a lot of potential here, but lack of front end libraries \n> is causing more development work compared to more mainsteam technologies\n> \n> Thanks!\n> Marc \nHow about https:\/\/github.com\/status-im\/status-react\/ \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Large public clojurescript websites Jiyin Yiyong Wed, 17 May 2017 02:19:28 -0700"},
{"body":"> Where is the difference in putting code into node_modules or compiled\nthen using webpack? \nI'm not sure either. But here's what I see:\n\n* in `node_modules\/` there are always tens or even thousands of folders,\nwhich I'm never happy to open it.\n\n* for hot module replacement issues, sometimes we want to ignore the whole\n`node_modules\/` because of the amount of the files,\nhttps:\/\/webpack.js.org\/configuration\/watch\/#watchoptions-ignored . I don't\nthink all of us will ignore that folder, but we might do and we consider\ncode in `node_modules\/` remaining the same.\n\nAs a result, using `resolve.alias` appears more acceptable to me.\n\nOn Wed, May 17, 2017 at 2:12 PM Thomas Heller <th.hel...@gmail.com> wrote:\n\n> On Wednesday, May 17, 2017 at 3:51:14 AM UTC+2, Jiyin Yiyong wrote:\n> > I don't like the way of writing `x.assoc(null, 'foo', 'bar')` by myself.\n> Also I don't people would accept that.\n> >\n>\n>\n> I wouldn't as well, but that was an example to show that you can use CLJS\n> code directly without modifying it in any way.\n>\n> import { assoc } from \"shadow-cljs\/cljs.core\";\n> assoc(null, \"foo\", \"bar\");\n>\n> also works. assoc is an ugly example because of the leading null but it is\n> the shortest form to replace the CLJS {} empty map literal. {} would mean\n> empty JS object which doesn't work with assoc.\n>\n> > I see the problem now. ClojureScript compilers may have tricky behaviors\n> that make it different from CoffeeScript's compiling processes.\n> >\n>\n> The compiler is pretty straightforward actually, the tricky parts are the\n> version conflicts. If there was a way to ensure that everything always used\n> the exact some compiler configuration\/version this would be possible, but\n> there is not AFAICT.\n>\n> > Putting `x.cljs` files in npm is fine, it's just slower. To me compiling\n> ClojureScript is always slower, I already accepted that.\n> >\n>\n> [:script] Build completed. (23 files, 1 compiled, 0 warnings, 0.12s)\n>\n> I think 0.12s is pretty fast. That is running in --dev mode recompiling\n> one changed file with hot-reload enabled.\n>\n> Of course it is slower if you always run \"shadow-cljs --once\" which\n> includes starting the JVM each time. \"shadow-cljs --dev\" will be\n> substantially faster when re-compiling.\n>\n>\n>\n> >\n> > I think here are may main concerns:\n> >\n> >\n> > * in js projects, we regard code in `node_modules` are modules instead\n> of source code. For web projects using Webpack, I would prefer using a\n> 'compiled\/' folder to hold the code and then config `resolve.alias` to make\n> sure I import the code with `require('cljs\/foo.bar.core')`.\n> https:\/\/webpack.js.org\/configuration\/resolve\/\n> >\n>\n> Not sure what you mean. Where is the difference in putting code into\n> node_modules or compiled then using webpack? The behavior is identical, the\n> node_modules version just doesn't need the resolve.alias? Both versions\n> require that you have your code compiled before running webpack, which\n> directory you load them from should be automatic?\n>\n>\n> > *  For nodejs projects, somehow I can accept the solution that we use\n> `require('..\/..\/compiled\/foo.bar.core')`. But I guess it may bring\n> problems, which makes your `shadow-cljs` solution a better choice...\n> >\n>\n> Yes, I hate relative paths. Actually the output folder where things end up\n> is a config option. So if you really wanted to have your compiled folder\n> that can be done. I just don't see an upside to it.\n>\n> >\n> > * does shadow-devtools compiled cljs files incrementally? If it does,\n> Webpack may use it to hot replace module.\n> >\n>\n> Yes, incrementally. Don't know anything about HMR but shadow-devtools\n> already has hot-reloading (ala figwheel) built-in. I just didn't enable it\n> yet because other things were more important.\n>\n> Can't tell if Webpack HMR would work since I have never used it.\n>\n> Thanks for the feedback, I hope I lessened your concerns.\n>\n> Keep it coming.\n>\n> Remember: this is evolving as we discuss it, I have no idea what JS devs\n> want so without feedback I'll be building what I want. That may or may not\n> align.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/AGXku7Ous0Y\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm jiyinyiyong Wed, 17 May 2017 02:18:10 -0700"},
{"body":"Quick Update: Just renamed the repo\/artifact to thheller\/shadow-cljs. Got tired \nof having to differentiate between shadow-devtools and shadow-cljs. \nRelease coming later today.\n\nGithub should take care of redirecting all the old links.\n\nThis is the new home:\nhttps:\/\/github.com\/thheller\/shadow-cljs\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm: The Other Side Thomas Heller Wed, 17 May 2017 00:55:32 -0700"},
{"body":"The original topic [1] was about bringing CLJS to JS devs.\n\nThis is about the other side of the equation: JS for CLJS devs. \nThat is to say using npm\/webpack to generate what we currently do manually or \nvia CLJSJS packages.\n\nIt is my planned alternative to :foreign-libs. It is not official behaviour and \nCLJS itself does not support that. Time will tell whether we can make this \nofficial.\n\nSee:\nhttps:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/src\/dev\/demo\/browser.cljs\nhttps:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/out\/demo-browser\/bundle.js\nhttps:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/out\/demo-browser\/webpack.config.js\n\nThe demo.browser CLJS ns just has a :require for npm.react.\n\nTo make this work I just generate simple stub files to mimic any npm.* \nnamespaces.\n\nFor the :browser target this looks like:\n\ngoog.provide(\"npm.react\");\nnpm.react = window[\"npm$modules\"][\"react\"];\n\nThe window[\"npm$modules\"] is then provided by a js file created by webpack. My \nplan is to automate the webpack config\/bundle.js generation, but manual works \njust fine for now.  \n\nFor the :npm-module, :node-script or :node-library targets this just generates\n\ngoog.provide(\"npm.react\");\nnpm.react = require(\"react\");\n\nSo it works without additional configuration for those targets. :browser is the \nonly one that needs special processing.\n\nI'll make an official proposal once I have moved this into my production app \nand can prove that it is a viable :foreign-libs alternative while also solving \nmost of the issues with that. \n\n\nStay tuned.\n\n\n[1] https:\/\/groups.google.com\/d\/msg\/clojurescript\/AGXku7Ous0Y\/qkdvVQR_BgAJ\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] A new take on ClojureScript and npm: The Other Side Thomas Heller Wed, 17 May 2017 00:35:22 -0700"},
{"body":"On Wednesday, May 17, 2017 at 3:51:14 AM UTC+2, Jiyin Yiyong wrote:\n> I don't like the way of writing `x.assoc(null, 'foo', 'bar')` by myself. Also \n> I don't people would accept that.\n> \n\nI wouldn't as well, but that was an example to show that you can use CLJS code \ndirectly without modifying it in any way.\n\nimport { assoc } from \"shadow-cljs\/cljs.core\";\nassoc(null, \"foo\", \"bar\");\n\nalso works. assoc is an ugly example because of the leading null but it is the \nshortest form to replace the CLJS {} empty map literal. {} would mean empty JS \nobject which doesn't work with assoc.\n\n> I see the problem now. ClojureScript compilers may have tricky behaviors that \n> make it different from CoffeeScript's compiling processes.\n> \n\nThe compiler is pretty straightforward actually, the tricky parts are the \nversion conflicts. If there was a way to ensure that everything always used the \nexact some compiler configuration\/version this would be possible, but there is \nnot AFAICT.\n\n> Putting `x.cljs` files in npm is fine, it's just slower. To me compiling \n> ClojureScript is always slower, I already accepted that.\n> \n\n[:script] Build completed. (23 files, 1 compiled, 0 warnings, 0.12s)\n\nI think 0.12s is pretty fast. That is running in --dev mode recompiling one \nchanged file with hot-reload enabled.\n\nOf course it is slower if you always run \"shadow-cljs --once\" which includes \nstarting the JVM each time. \"shadow-cljs --dev\" will be substantially faster \nwhen re-compiling.\n\n\n\n> \n> I think here are may main concerns:\n> \n> \n> * in js projects, we regard code in `node_modules` are modules instead of \n> source code. For web projects using Webpack, I would prefer using a \n> 'compiled\/' folder to hold the code and then config `resolve.alias` to make \n> sure I import the code with `require('cljs\/foo.bar.core')`.\u00a0\n> https:\/\/webpack.js.org\/configuration\/resolve\/\n> \n\nNot sure what you mean. Where is the difference in putting code into \nnode_modules or compiled then using webpack? The behavior is identical, the \nnode_modules version just doesn't need the resolve.alias? Both versions require \nthat you have your code compiled before running webpack, which directory you \nload them from should be automatic?\n\n\n> * \u00a0For nodejs projects, somehow I can accept the solution that we use \n> `require('..\/..\/compiled\/foo.bar.core')`. But I guess it may bring problems, \n> which makes your `shadow-cljs` solution a better choice...\n> \n\nYes, I hate relative paths. Actually the output folder where things end up is a \nconfig option. So if you really wanted to have your compiled folder that can be \ndone. I just don't see an upside to it.\n\n> \n> * does shadow-devtools compiled cljs files incrementally? If it does, Webpack \n> may use it to hot replace module.\n> \n\nYes, incrementally. Don't know anything about HMR but shadow-devtools already \nhas hot-reloading (ala figwheel) built-in. I just didn't enable it yet because \nother things were more important.\n\nCan't tell if Webpack HMR would work since I have never used it.\n\nThanks for the feedback, I hope I lessened your concerns.\n\nKeep it coming.\n\nRemember: this is evolving as we discuss it, I have no idea what JS devs want \nso without feedback I'll be building what I want. That may or may not align.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Tue, 16 May 2017 23:12:38 -0700"},
{"body":"I don't like the way of writing `x.assoc(null, 'foo', 'bar')` by myself.\nAlso I don't people would accept that. \nI see the problem now. ClojureScript compilers may have tricky behaviors\nthat make it different from CoffeeScript's compiling processes.\n\nPutting `x.cljs` files in npm is fine, it's just slower. To me compiling\nClojureScript is always slower, I already accepted that.\n\nI think here are may main concerns:\n\n* in js projects, we regard code in `node_modules` are modules instead of\nsource code. For web projects using Webpack, I would prefer using a\n'compiled\/' folder to hold the code and then config `resolve.alias` to make\nsure I import the code with `require('cljs\/foo.bar.core')`.\nhttps:\/\/webpack.js.org\/configuration\/resolve\/\n\n*  For nodejs projects, somehow I can accept the solution that we use\n`require('..\/..\/compiled\/foo.bar.core')`. But I guess it may bring\nproblems, which makes your `shadow-cljs` solution a better choice...\n\n* does shadow-devtools compiled cljs files incrementally? If it does,\nWebpack may use it to hot replace module.\n\nOn Wed, May 17, 2017 at 2:56 AM Thomas Heller <th.hel...@gmail.com> wrote:\n\n> On Tuesday, May 16, 2017 at 8:27:44 PM UTC+2, Thomas Heller wrote:\n> > If I understand correctly the short answer is: no.\n> >\n>\n> I should add: You can use shadow-cljs in your coffeescript project if you\n> just want to use cljs.core or some other CLJS package. You do not need to\n> write CLJS yourself to make use of shadow-cljs.\n>\n> var x = require(\"shadow-cljs\/cljs.core\");\n> x.assoc(null, \"foo\", \"bar\");\n>\n> is basically the same as\n>\n> var x = require(\"mori\")\n> x.assoc(null, \"foo\", \"bar\");\n>\n> But you would need to run shadow-cljs in your project.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/AGXku7Ous0Y\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm jiyinyiyong Tue, 16 May 2017 18:51:47 -0700"},
{"body":"There's also https:\/\/www.style.com\/ : clojurescript, reagent, re-frame,\nsecretary, plumatic\/schema, transit among other libraries. \nI've also found a dependency on devcards in the source. Looks like a very\nsolid stack to me.\n\n\nLe mar. 16 mai 2017 \u00e0 17:00, <geoffrey.gaill...@brainsfeed.com> a \u00e9crit :\n\n> On Saturday, May 13, 2017 at 5:43:03 PM UTC+2, Marc Griffiths wrote:\n> > Hi,\n> >\n> > I recently deployed a 100% cljs\/cls site:\n> organicinvestmentcooperative.com.au\n> >\n> > I'm wondering if people can point me towards other clojurescript\n> websites, or people or resources to help build commercial scale websites in\n> clojurescript\n> >\n> > Feels like there is a lot of potential here, but lack of front end\n> libraries is causing more development work compared to more mainsteam\n> technologies\n> >\n> > Thanks!\n> > Marc\n>\n> Hi Mark !\n> I looked at organicinvestmentcooperative.com.au. and noticed that it\n> loaded pretty slowly. Did you compiled your cljs code in :advanced mode ?\n> (Nice site BTW).\n>\n> About your question, what kind of frontend library would you like to be\n> able to use from CLJS? I've always seen the Clojure(Script) ecosystem as\n> one of the most versatile due to its easy interrop.\n> You could look at Re-Frame for a React based functional framework\u2026 But the\n> list is so big I can't simply put it here.  (\n> https:\/\/github.com\/Day8\/re-frame)\n>\n> If you look at real world sites built in CLJS you might be interested in :\n> https:\/\/functional.works-hub.com\/\n> https:\/\/circleci.com\/\n> https:\/\/precursorapp.com\n> https:\/\/asciinema.org\/\n>\n> You can also join the Clojurians Slack (http:\/\/clojurians.net\/), almost\n> 10 000 Clojure developers joined it.\n>\n> Have a nice day !\n> Geoffrey\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Large public clojurescript websites Arnaud BOS Tue, 16 May 2017 16:16:47 -0700"},
{"body":"I just added another demo using react-native+haul.\n\nhttps:\/\/github.com\/thheller\/npm-module-example\/tree\/master\/examples\/AwesomeProject\nhttps:\/\/github.com\/callstack-io\/haul \nThe default react-native packager tries to run cljs.core through a large number \nof babel transforms which we don't need. The code works fine but the \ndevelopment experience is extremely terrible with about 4min of packager bundle \ntime.\n\nhaul seems to be a drop-in replacement for this packager and works without \nmodification since it just uses webpack.\n\nI don't do any react-native development but the proof of concept works well.\n\nI'll work on adding live-reloading and a REPL for everything tomorrow or so.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Tue, 16 May 2017 15:16:01 -0700"},
{"body":"On Tuesday, May 16, 2017 at 8:27:44 PM UTC+2, Thomas Heller wrote:\n> If I understand correctly the short answer is: no.\n> \nI should add: You can use shadow-cljs in your coffeescript project if you just \nwant to use cljs.core or some other CLJS package. You do not need to write CLJS \nyourself to make use of shadow-cljs.\n\nvar x = require(\"shadow-cljs\/cljs.core\");\nx.assoc(null, \"foo\", \"bar\");\n\nis basically the same as\n\nvar x = require(\"mori\")\nx.assoc(null, \"foo\", \"bar\");\n\nBut you would need to run shadow-cljs in your project.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Tue, 16 May 2017 11:56:48 -0700"},
{"body":"If I understand correctly the short answer is: no.\n\nI chose this setup specifically to avoid anyone ever putting compiled CLJS code \nin npm packages. The problem with this would be that everyone would bring their \nown cljs.core version again. \nThat is an issue currently when you write a npm package in CLJS and publish to \nnpm. Each package contains its own conflicting version of cljs.core (and maybe \nothers) even if you compile with :advanced.\n\nAll CLJS sources must be compiled with the same CLJS compiler, you cannot use a \nprecompiled \"some-package\/cljs.core.js\" as there is no way to guarantee that \neveryone was using the same version and so on. The way npm resolves version \nconflicts is by creating nested node_modules folders.\n\n.\/node_modules\/A\n.\/node_modules\/shadow-cljs (v1.0)\n.\/node_modules\/B\n.\/node_modules\/B\/node_modules\/shadow-cljs (v1.1)\nand so on.\n\nThere is no way to ensure that B uses the same shadow-cljs version as A. By not \nhaving any compiled CLJS code in any npm package we can sort of get away with \nit though.\n\nSee:\nhttps:\/\/docs.npmjs.com\/how-npm-works\/npm3-nondet\nhttps:\/\/docs.npmjs.com\/how-npm-works\/npm3-dupe\n\nyarn fixes some of these issues but not all.\n\nI do however think that it would be relatively straightforward to put \nuncompiled CLJS code into npm packages and have them picked up by shadow-cljs.\n\nSo if you have\n\n.\/fancy-package\/src-cljs\/fancy\/foo.cljs\n\nYou could just require(\"shadow-cljs\/fancy.foo\") and (:require [fancy.foo]) to \nuse that. While you can still require(\"fancy-package\") normally if there also \nwas JS code but never require(\"fancy-package\/fancy.foo\").\n\nIt's a bit confusing but I repeat: there must never be compiled CLJS code in a \nnpm package, only uncompiled .cljs files just like we do in CLJS .jar files \npublished to clojars (or maven). For now I do recommend using the normal CLJS \nmethods to publish CLJS libs. Publishing to npm would be something only \ncurrently supported by shadow-cljs and that would not be a good idea (for now). \nThings need to be ironed out first.\n\n\nI cannot explain this very well, as I am still very confused about it myself.\n\nSorry if you wanted something completely different.\n\n\nOn Tuesday, May 16, 2017 at 7:54:41 PM UTC+2, Jiyin Yiyong wrote:\n> Fascinating.. it's using `node_modules\/shadow-cljs` to do the trick. I can \n> see ClojureScript files are compiled into CommonJS compatible form...\n> \n> \n> Do you think it's possible that we put all js built from `cjs.core`(also with \n> `goog`) into a single npm package. And then for each ClojureScript file, it \n> is mapped to a JavaScript file by `shadow-cljs` tools, which use \n> `require(\".\/cljs.core.js\");` to access it's cljs dependencies(like in your \n> demo), and use `require('package_name\/foo\/bar')` to require sibling files. \n> For other packages, maybe we can do the some trick, like precompile them with \n> `shadow-cljs` tools and then release them to npm. Seeing from a CoffeeScript \n> user, I think somehow in this way ClojureScript can also fit into npm's \n> ecosystem.\n> \n> \n> Here's an example, we may create a new project in such file structure, where:\n> \n> \n> `src\/` is for source code,\n> `target` is for compiled code,\n> `package.json` is copied from `assets\/package.json` to `target\/package.json`,\n> \n> \n> ```\n> .\n> \u251c\u2500\u2500 assets\n> \u2502 \u00a0 \u2514\u2500\u2500 package.json\n> \u251c\u2500\u2500 project.clj\n> \u251c\u2500\u2500 src\n> \u2502 \u00a0 \u2514\u2500\u2500 demo\n> \u2502 \u00a0 \u00a0 \u00a0 \u2514\u2500\u2500 main.cljs\n> \u2514\u2500\u2500 target\n> \u00a0 \u00a0 \u251c\u2500\u2500 demo\n> \u00a0 \u00a0 \u2502 \u00a0 \u2514\u2500\u2500 main.js\n> \u00a0 \u00a0 \u2514\u2500\u2500 package.json\n> ```\n> \n> \n> if it's in this way, `target\/` can be released on npm as a module and others \n> surely may use `require('package_name\/demo\/main.js')` to load the package \n> built from ClojureScript.\n> \n> \n> \n> \n> \n> \n> On Wed, May 17, 2017 at 12:15 AM Thomas Heller <th.h...@gmail.com> wrote:\n> \n> \n> > 1. Should we call this \"cljs-require\"?\u00a0 With the understanding that it is a \n> > bit like a portal to cljs's \":require\" form:\n> \n> >\n> \n> > require('cljs-require\/foo.core')\n> \n> \n> \n> The package name must be something you add to your package.json, otherwise \n> yarn will nuke the directory every time you run \"yarn install\". \"npm\" isn't \n> as strict but still. Using the name of the tool seemed like the obvious \n> choice. We can however create an empty cljs-require npm package that just \n> serves as a placeholder.\n> \n> \n> \n> I'm totally for this if other tools want to adopt this idiom. I definitely do \n> not want this to be something you can only do with shadow-cljs.\n> \n> \n> \n> \n> \n> > 2. Is there a way to set the ClojureScript version, or is it tied to \n> > shadow's version?\n> \n> \n> \n> You can specify dependencies in package.json, basically like you would in \n> lein.\n> \n> \n> \n> \"shadow-cljs: {\n> \n> \u00a0 \u00a0 \"version\":\"1.0.20170516\",\n> \n> \u00a0 \u00a0 \"dependencies\": [\n> \n> \u00a0 \u00a0 \u00a0 [\"org.clojure\/clojurescript\", \"1.9.542\"]\n> \n> \u00a0 \u00a0 ]\n> \n> }\n> \n> \n> \n> where \"version\" is the version of shadow-devtools, any other dependencies are \n> resolved using the fantastic pomegrenate lib. (thanks btw for writing the \n> dep-resolver, I didn't think it would be this simple to do the dependency \n> loading).\n> \n> \n> \n> I'm not sure how the conflict resolution works but you should be able to use \n> any cljs version you want. The only things written in stone are the deps of \n> the shadow-cljs uberjar, can't change the clojure version after the fact.\n> \n> \n> \n> See:\n> \n> https:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/npm-package\/project.clj\n> \n> \n> \n> \n> \n> >\n> \n> > 3. Thinking back on Jiyin's question about using cljs in webpack\u2014have you \n> > put any thought into the possibility of this workflow as a webpack loader?\u00a0 \n> > Maybe that's a next step?\n> \n> \n> \n> Don't need a loader. It could be a plugin that just calls \"shadow-cljs --once\"\n> \n> \u00a0before proceeding with the rest of the JS compilation.\n> \n> \n> \n> I actually started by writing a plugin but to be honest I do not think it is \n> super useful. You can achieve the same via npm scripts & co. You'll need the \n> CLI tool for more advanced tasks (eg. REPL) anyways.\n> \n> \n> \n> I want this to be generally useful, not just webpack. No specific webpack \n> configuration is needed, you just somehow need to compile before calling \n> webpack. \"webpack -w\" and \"shadow-cljs --dev\" side-by-side actually just \n> works.\n> \n> \n> \n> > Awesome job turning this webpack discussion into a real tool we can \n> > explore! \ud83c\udf89\n> \n> \n> \n> Thanks.\n> \n> \n> \n> One issue that needs to be addressed is the widespread use of CLJSJS packages \n> in popular libs like reagent&co. Can't have cljsjs.react react.js if you are \n> supposed to use npm react.\n> \n> \n> \n> I can easily skip over all foreign-libs but then (:require [cljsjs.react]) \n> wouldn't have the effect of ensuring that \"React\" is available on global.\u00a0 \n> Not yet sure how to best handle that yet.\n> \n> \n> \n> Still have a few ideas I want to explore, haven't totally given up on the \n> Closure Compiler yet but it making life harder than it should be.\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to a topic in the Google \n> Groups \"ClojureScript\" group.\n> \n> To unsubscribe from this topic, visit \n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/AGXku7Ous0Y\/unsubscribe.\n> \n> To unsubscribe from this group and all its topics, send an email to \n> clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Tue, 16 May 2017 11:28:07 -0700"},
{"body":"Some typo. Since the package name in my previous post is demo, it is\nactually written like `require('demo\/main.js')`, which means the structure\nof the folder should be(no `target\/demo\/`): \n```\n.\n\u251c\u2500\u2500 assets\n\u2502   \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 project.clj\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 demo\n\u2502       \u2514\u2500\u2500 main.cljs\n\u2514\u2500\u2500 target\n    \u251c\u2500\u2500 main.js\n    \u2514\u2500\u2500 package.json\n```\n\nOn Wed, May 17, 2017 at 1:54 AM jiyinyiyong <jiyinyiy...@gmail.com> wrote:\n\n> Fascinating.. it's using `node_modules\/shadow-cljs` to do the trick. I can\n> see ClojureScript files are compiled into CommonJS compatible form...\n>\n> Do you think it's possible that we put all js built from `cjs.core`(also\n> with `goog`) into a single npm package. And then for each ClojureScript\n> file, it is mapped to a JavaScript file by `shadow-cljs` tools, which use\n> `require(\".\/cljs.core.js\");` to access it's cljs dependencies(like in your\n> demo), and use `require('package_name\/foo\/bar')` to require sibling files.\n> For other packages, maybe we can do the some trick, like precompile them\n> with `shadow-cljs` tools and then release them to npm. Seeing from a\n> CoffeeScript user, I think somehow in this way ClojureScript can also fit\n> into npm's ecosystem.\n>\n> Here's an example, we may create a new project in such file structure,\n> where:\n>\n> `src\/` is for source code,\n> `target` is for compiled code,\n> `package.json` is copied from `assets\/package.json` to\n> `target\/package.json`,\n>\n> ```\n> .\n> \u251c\u2500\u2500 assets\n> \u2502   \u2514\u2500\u2500 package.json\n> \u251c\u2500\u2500 project.clj\n> \u251c\u2500\u2500 src\n> \u2502   \u2514\u2500\u2500 demo\n> \u2502       \u2514\u2500\u2500 main.cljs\n> \u2514\u2500\u2500 target\n>     \u251c\u2500\u2500 demo\n>     \u2502   \u2514\u2500\u2500 main.js\n>     \u2514\u2500\u2500 package.json\n> ```\n>\n> if it's in this way, `target\/` can be released on npm as a module and\n> others surely may use `require('package_name\/demo\/main.js')` to load the\n> package built from ClojureScript.\n>\n>\n>\n> On Wed, May 17, 2017 at 12:15 AM Thomas Heller <th.hel...@gmail.com>\n> wrote:\n>\n>>\n>> > 1. Should we call this \"cljs-require\"?  With the understanding that it\n>> is a bit like a portal to cljs's \":require\" form:\n>> >\n>> > require('cljs-require\/foo.core')\n>>\n>> The package name must be something you add to your package.json,\n>> otherwise yarn will nuke the directory every time you run \"yarn install\".\n>> \"npm\" isn't as strict but still. Using the name of the tool seemed like the\n>> obvious choice. We can however create an empty cljs-require npm package\n>> that just serves as a placeholder.\n>>\n>> I'm totally for this if other tools want to adopt this idiom. I\n>> definitely do not want this to be something you can only do with\n>> shadow-cljs.\n>>\n>>\n>> > 2. Is there a way to set the ClojureScript version, or is it tied to\n>> shadow's version?\n>>\n>> You can specify dependencies in package.json, basically like you would in\n>> lein.\n>>\n>> \"shadow-cljs: {\n>>     \"version\":\"1.0.20170516\",\n>>     \"dependencies\": [\n>>       [\"org.clojure\/clojurescript\", \"1.9.542\"]\n>>     ]\n>> }\n>>\n>> where \"version\" is the version of shadow-devtools, any other dependencies\n>> are resolved using the fantastic pomegrenate lib. (thanks btw for writing\n>> the dep-resolver, I didn't think it would be this simple to do the\n>> dependency loading).\n>>\n>> I'm not sure how the conflict resolution works but you should be able to\n>> use any cljs version you want. The only things written in stone are the\n>> deps of the shadow-cljs uberjar, can't change the clojure version after the\n>> fact.\n>>\n>> See:\n>>\n>> https:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/npm-package\/project.clj\n>>\n>>\n>> >\n>> > 3. Thinking back on Jiyin's question about using cljs in webpack\u2014have\n>> you put any thought into the possibility of this workflow as a webpack\n>> loader?  Maybe that's a next step?\n>>\n>> Don't need a loader. It could be a plugin that just calls \"shadow-cljs\n>> --once\"\n>>  before proceeding with the rest of the JS compilation.\n>>\n>> I actually started by writing a plugin but to be honest I do not think it\n>> is super useful. You can achieve the same via npm scripts & co. You'll need\n>> the CLI tool for more advanced tasks (eg. REPL) anyways.\n>>\n>> I want this to be generally useful, not just webpack. No specific webpack\n>> configuration is needed, you just somehow need to compile before calling\n>> webpack. \"webpack -w\" and \"shadow-cljs --dev\" side-by-side actually just\n>> works.\n>>\n>> > Awesome job turning this webpack discussion into a real tool we can\n>> explore! \ud83c\udf89\n>>\n>> Thanks.\n>>\n>> One issue that needs to be addressed is the widespread use of CLJSJS\n>> packages in popular libs like reagent&co. Can't have cljsjs.react react.js\n>> if you are supposed to use npm react.\n>>\n>> I can easily skip over all foreign-libs but then (:require\n>> [cljsjs.react]) wouldn't have the effect of ensuring that \"React\" is\n>> available on global.  Not yet sure how to best handle that yet.\n>>\n>> Still have a few ideas I want to explore, haven't totally given up on the\n>> Closure Compiler yet but it making life harder than it should be.\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with\n>> your first post.\n>> ---\n>> You received this message because you are subscribed to a topic in the\n>> Google Groups \"ClojureScript\" group.\n>> To unsubscribe from this topic, visit\n>> https:\/\/groups.google.com\/d\/topic\/clojurescript\/AGXku7Ous0Y\/unsubscribe.\n>> To unsubscribe from this group and all its topics, send an email to\n>> clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm jiyinyiyong Tue, 16 May 2017 11:19:01 -0700"},
{"body":"Fascinating.. it's using `node_modules\/shadow-cljs` to do the trick. I can\nsee ClojureScript files are compiled into CommonJS compatible form... \nDo you think it's possible that we put all js built from `cjs.core`(also\nwith `goog`) into a single npm package. And then for each ClojureScript\nfile, it is mapped to a JavaScript file by `shadow-cljs` tools, which use\n`require(\".\/cljs.core.js\");` to access it's cljs dependencies(like in your\ndemo), and use `require('package_name\/foo\/bar')` to require sibling files.\nFor other packages, maybe we can do the some trick, like precompile them\nwith `shadow-cljs` tools and then release them to npm. Seeing from a\nCoffeeScript user, I think somehow in this way ClojureScript can also fit\ninto npm's ecosystem.\n\nHere's an example, we may create a new project in such file structure,\nwhere:\n\n`src\/` is for source code,\n`target` is for compiled code,\n`package.json` is copied from `assets\/package.json` to\n`target\/package.json`,\n\n```\n.\n\u251c\u2500\u2500 assets\n\u2502   \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 project.clj\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 demo\n\u2502       \u2514\u2500\u2500 main.cljs\n\u2514\u2500\u2500 target\n    \u251c\u2500\u2500 demo\n    \u2502   \u2514\u2500\u2500 main.js\n    \u2514\u2500\u2500 package.json\n```\n\nif it's in this way, `target\/` can be released on npm as a module and\nothers surely may use `require('package_name\/demo\/main.js')` to load the\npackage built from ClojureScript.\n\n\n\nOn Wed, May 17, 2017 at 12:15 AM Thomas Heller <th.hel...@gmail.com> wrote:\n\n>\n> > 1. Should we call this \"cljs-require\"?  With the understanding that it\n> is a bit like a portal to cljs's \":require\" form:\n> >\n> > require('cljs-require\/foo.core')\n>\n> The package name must be something you add to your package.json, otherwise\n> yarn will nuke the directory every time you run \"yarn install\". \"npm\" isn't\n> as strict but still. Using the name of the tool seemed like the obvious\n> choice. We can however create an empty cljs-require npm package that just\n> serves as a placeholder.\n>\n> I'm totally for this if other tools want to adopt this idiom. I definitely\n> do not want this to be something you can only do with shadow-cljs.\n>\n>\n> > 2. Is there a way to set the ClojureScript version, or is it tied to\n> shadow's version?\n>\n> You can specify dependencies in package.json, basically like you would in\n> lein.\n>\n> \"shadow-cljs: {\n>     \"version\":\"1.0.20170516\",\n>     \"dependencies\": [\n>       [\"org.clojure\/clojurescript\", \"1.9.542\"]\n>     ]\n> }\n>\n> where \"version\" is the version of shadow-devtools, any other dependencies\n> are resolved using the fantastic pomegrenate lib. (thanks btw for writing\n> the dep-resolver, I didn't think it would be this simple to do the\n> dependency loading).\n>\n> I'm not sure how the conflict resolution works but you should be able to\n> use any cljs version you want. The only things written in stone are the\n> deps of the shadow-cljs uberjar, can't change the clojure version after the\n> fact.\n>\n> See:\n>\n> https:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/npm-package\/project.clj\n>\n>\n> >\n> > 3. Thinking back on Jiyin's question about using cljs in webpack\u2014have\n> you put any thought into the possibility of this workflow as a webpack\n> loader?  Maybe that's a next step?\n>\n> Don't need a loader. It could be a plugin that just calls \"shadow-cljs\n> --once\"\n>  before proceeding with the rest of the JS compilation.\n>\n> I actually started by writing a plugin but to be honest I do not think it\n> is super useful. You can achieve the same via npm scripts & co. You'll need\n> the CLI tool for more advanced tasks (eg. REPL) anyways.\n>\n> I want this to be generally useful, not just webpack. No specific webpack\n> configuration is needed, you just somehow need to compile before calling\n> webpack. \"webpack -w\" and \"shadow-cljs --dev\" side-by-side actually just\n> works.\n>\n> > Awesome job turning this webpack discussion into a real tool we can\n> explore! \ud83c\udf89\n>\n> Thanks.\n>\n> One issue that needs to be addressed is the widespread use of CLJSJS\n> packages in popular libs like reagent&co. Can't have cljsjs.react react.js\n> if you are supposed to use npm react.\n>\n> I can easily skip over all foreign-libs but then (:require [cljsjs.react])\n> wouldn't have the effect of ensuring that \"React\" is available on global.\n> Not yet sure how to best handle that yet.\n>\n> Still have a few ideas I want to explore, haven't totally given up on the\n> Closure Compiler yet but it making life harder than it should be.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/AGXku7Ous0Y\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: A new take on ClojureScript and npm jiyinyiyong Tue, 16 May 2017 10:54:53 -0700"},
{"body":"> 1. Should we call this \"cljs-require\"?  With the understanding that it is a \n> bit like a portal to cljs's \":require\" form:\n> \n> require('cljs-require\/foo.core') \nThe package name must be something you add to your package.json, otherwise yarn \nwill nuke the directory every time you run \"yarn install\". \"npm\" isn't as \nstrict but still. Using the name of the tool seemed like the obvious choice. We \ncan however create an empty cljs-require npm package that just serves as a \nplaceholder. \n\nI'm totally for this if other tools want to adopt this idiom. I definitely do \nnot want this to be something you can only do with shadow-cljs.\n\n\n> 2. Is there a way to set the ClojureScript version, or is it tied to shadow's \n> version?\n\nYou can specify dependencies in package.json, basically like you would in lein.\n\n\"shadow-cljs: {\n    \"version\":\"1.0.20170516\",\n    \"dependencies\": [\n      [\"org.clojure\/clojurescript\", \"1.9.542\"]\n    ]\n}\n\nwhere \"version\" is the version of shadow-devtools, any other dependencies are \nresolved using the fantastic pomegrenate lib. (thanks btw for writing the \ndep-resolver, I didn't think it would be this simple to do the dependency \nloading).\n\nI'm not sure how the conflict resolution works but you should be able to use \nany cljs version you want. The only things written in stone are the deps of the \nshadow-cljs uberjar, can't change the clojure version after the fact.\n\nSee:\nhttps:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/npm-package\/project.clj\n\n\n> \n> 3. Thinking back on Jiyin's question about using cljs in webpack\u2014have you put \n> any thought into the possibility of this workflow as a webpack loader?  Maybe \n> that's a next step?\n\nDon't need a loader. It could be a plugin that just calls \"shadow-cljs --once\"\n before proceeding with the rest of the JS compilation.\n\nI actually started by writing a plugin but to be honest I do not think it is \nsuper useful. You can achieve the same via npm scripts & co. You'll need the \nCLI tool for more advanced tasks (eg. REPL) anyways.\n\nI want this to be generally useful, not just webpack. No specific webpack \nconfiguration is needed, you just somehow need to compile before calling \nwebpack. \"webpack -w\" and \"shadow-cljs --dev\" side-by-side actually just works.\n\n> Awesome job turning this webpack discussion into a real tool we can explore! \ud83c\udf89\n\nThanks.\n\nOne issue that needs to be addressed is the widespread use of CLJSJS packages \nin popular libs like reagent&co. Can't have cljsjs.react react.js if you are \nsupposed to use npm react.\n\nI can easily skip over all foreign-libs but then (:require [cljsjs.react]) \nwouldn't have the effect of ensuring that \"React\" is available on global.  Not \nyet sure how to best handle that yet.\n\nStill have a few ideas I want to explore, haven't totally given up on the \nClosure Compiler yet but it making life harder than it should be.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Tue, 16 May 2017 09:16:01 -0700"},
{"body":"On Tuesday, May 16, 2017 at 4:56:03 AM UTC-5, Thomas Heller wrote:\n> I wrote a short introduction here:\n> https:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-JS-Devs\n> \n> Looking for any kind of feedback. \nThe quick start is great!  I have three questions:\n\n1. Should we call this \"cljs-require\"?  With the understanding that it is a bit \nlike a portal to cljs's \":require\" form:\n\nrequire('cljs-require\/foo.core')\n\n2. Is there a way to set the ClojureScript version, or is it tied to shadow's \nversion?\n\n3. Thinking back on Jiyin's question about using cljs in webpack\u2014have you put \nany thought into the possibility of this workflow as a webpack loader?  Maybe \nthat's a next step?\n\nAwesome job turning this webpack discussion into a real tool we can explore! \ud83c\udf89\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Shaun LeBron Tue, 16 May 2017 08:39:41 -0700"},
{"body":"On Saturday, May 13, 2017 at 5:43:03 PM UTC+2, Marc Griffiths wrote:\n> Hi,\n> \n> I recently deployed a 100% cljs\/cls site: organicinvestmentcooperative.com.au\n> \n> I'm wondering if people can point me towards other clojurescript websites, or \n> people or resources to help build commercial scale websites in clojurescript\n> \n> Feels like there is a lot of potential here, but lack of front end libraries \n> is causing more development work compared to more mainsteam technologies\n> \n> Thanks!\n> Marc \nHi Mark !\nI looked at organicinvestmentcooperative.com.au. and noticed that it loaded \npretty slowly. Did you compiled your cljs code in :advanced mode ?  (Nice site \nBTW).\n\nAbout your question, what kind of frontend library would you like to be able to \nuse from CLJS? I've always seen the Clojure(Script) ecosystem as one of the \nmost versatile due to its easy interrop. \nYou could look at Re-Frame for a React based functional framework\u2026 But the list \nis so big I can't simply put it here.  (https:\/\/github.com\/Day8\/re-frame)\n\nIf you look at real world sites built in CLJS you might be interested in :\nhttps:\/\/functional.works-hub.com\/\nhttps:\/\/circleci.com\/\nhttps:\/\/precursorapp.com\nhttps:\/\/asciinema.org\/\n\nYou can also join the Clojurians Slack (http:\/\/clojurians.net\/), almost 10 000 \nClojure developers joined it.\n\nHave a nice day ! \nGeoffrey  \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Large public clojurescript websites geoffrey . gaillard Tue, 16 May 2017 08:00:23 -0700"},
{"body":"My phantom test run crashes with:\nTypeError: undefined is not an object (evaluating \n'schema.core.MapEntry.prototype') \nI'm assuming that is related to this change, but I'll need to investigate \nmore. There's already a merged PR for schema that excludes MapEntry in \nrefer-clojure. I'm hoping that will fix this.\n\n\nmaanantai 15. toukokuuta 2017 14.32.55 UTC+3 David Nolen kirjoitti:\n>\n> That's just a warning. Is there some deeper breakage that you are \n> observing?\n>\n> David\n>\n> On Sun, May 14, 2017 at 3:09 AM, Tatu Tarvainen <anti...@gmail.com \n> <javascript:>> wrote:\n>\n>>\n>> > * CLJS-2013 - Add MapEntry type\n>>\n>> This change seems to break plumatic schema, after upgrading I'm getting \n>> warnings:\n>>\n>> WARNING: ->MapEntry already refers to: cljs.core\/->MapEntry being \n>> replaced by: schema.core\/->MapEntry at ... schema\/core.cljs\n>>\n>> Plumatic also defines a MapEntry record type which clashes with the core \n>> one.\n>>\n>> --\n>> Note that posts from new members are moderated - please be patient with \n>> your first post.\n>> ---\n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescrip...@googlegroups.com <javascript:>.\n>> To post to this group, send email to clojur...@googlegroups.com \n>> <javascript:>.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: ANN: ClojureScript 1.9.542, spec changes & REPL enhancement Tatu Tarvainen Tue, 16 May 2017 08:00:02 -0700"},
{"body":"I wrote a short introduction here:\nhttps:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-JS-Devs \nLooking for any kind of feedback.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Tue, 16 May 2017 02:56:20 -0700"},
{"body":"Too tired to make a proper announcement but I just pushed the first preview \nversion of the shadow-cljs npm package. \nhttps:\/\/www.npmjs.com\/package\/shadow-cljs\n\nnpm install -g shadow-cljs\nshadow-cljs --once\nnode\nvar x = require(\"shadow-cljs\/cljs.core\");\nx.enable_console_print_BANG_(); \/\/ oops\nx.prn(x.assoc(null, \"foo\", \"bar\"));\n\nMore tomorrow ...\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Mon, 15 May 2017 16:39:50 -0700"},
{"body":"> \n> I think it should be possible to use closure-compiler-js [1] with this \n> project to do DCE if needed.\n> \nIn a way you can and you can't. The same way :npm-deps has issues.\n\nThe Closure Compiler (JS or JVM version, doesn't matter) is not yet capable of \ncompiling everything in the npm world. Some things just don't work.\n\nSo instead of making something that \"maybe\" works I opted to drop the Closure \nCompiler entirely.\n\nThe intent here is to enable JS devs to start using CLJS seamlessly without \ngiving up their tools. They don't have the Closure compiler to begin with so \nthey won't miss it.\n\nEnabling the Closure Compiler is my top priority though. I'm definitely keeping \nmy eye on this and will provide a proper solution if it ever becomes solid.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Mon, 15 May 2017 10:40:43 -0700"},
{"body":"On Monday, 15 May 2017 12:48:38 UTC+1, Thomas Heller  wrote:\n> Also removed all traces of lein, the examples now just use an uberjar of \n> shadow-devtools.\n> \n> Certainly not the final solution I have in mind but getting closer. \nI think it should be possible to use closure-compiler-js [1] with this project \nto do DCE if needed.\n\n\n[1] https:\/\/github.com\/google\/closure-compiler-js\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Rohit Aggarwal Mon, 15 May 2017 07:50:40 -0700"},
{"body":"That runtime error doesn't necessarily seem related to the compile time\nwarning. Would need more information. \nOn Mon, May 15, 2017 at 10:16 AM, Tatu Tarvainen <tatu.tarvai...@mac.com>\nwrote:\n\n>\n> My phantom test run crashes with:\n> TypeError: undefined is not an object (evaluating 'schema.core.MapEntry.\n> prototype')\n>\n> I'm assuming that is related to this change, but I'll need to investigate\n> more. There's already a merged PR for schema that excludes MapEntry in\n> refer-clojure. I'm hoping that will fix this.\n>\n>\n> maanantai 15. toukokuuta 2017 14.32.55 UTC+3 David Nolen kirjoitti:\n>>\n>> That's just a warning. Is there some deeper breakage that you are\n>> observing?\n>>\n>> David\n>>\n>> On Sun, May 14, 2017 at 3:09 AM, Tatu Tarvainen <anti...@gmail.com>\n>> wrote:\n>>\n>>>\n>>> > * CLJS-2013 - Add MapEntry type\n>>>\n>>> This change seems to break plumatic schema, after upgrading I'm getting\n>>> warnings:\n>>>\n>>> WARNING: ->MapEntry already refers to: cljs.core\/->MapEntry being\n>>> replaced by: schema.core\/->MapEntry at ... schema\/core.cljs\n>>>\n>>> Plumatic also defines a MapEntry record type which clashes with the core\n>>> one.\n>>>\n>>> --\n>>> Note that posts from new members are moderated - please be patient with\n>>> your first post.\n>>> ---\n>>> You received this message because you are subscribed to the Google\n>>> Groups \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send\n>>> an email to clojurescrip...@googlegroups.com.\n>>> To post to this group, send email to clojur...@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>>>\n>>\n>> --\n> You received this message because you are subscribed to the Google\n> Groups \"Clojure\" group.\n> To post to this group, send email to cloj...@googlegroups.com\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> To unsubscribe from this group, send email to\n> clojure+unsubscr...@googlegroups.com\n> For more options, visit this group at\n> http:\/\/groups.google.com\/group\/clojure?hl=en\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"Clojure\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojure+unsubscr...@googlegroups.com.\n> For more options, visit https:\/\/groups.google.com\/d\/optout.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: ANN: ClojureScript 1.9.542, spec changes & REPL enhancement David Nolen Mon, 15 May 2017 07:24:05 -0700"},
{"body":"Also removed all traces of lein, the examples now just use an uberjar of \nshadow-devtools. \nCertainly not the final solution I have in mind but getting closer.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Mon, 15 May 2017 04:49:06 -0700"},
{"body":"I just did a quick test for React Native.\n\nhttps:\/\/github.com\/thheller\/npm-module-example\/tree\/master\/examples\/react-native-example \nSince it is the first time I started react-native I really have no idea what is \ngoing.  It works but is extremely slow to start. I don't know why, just wanted \nto see if it can work at all.\n\nIf someone has suggestions on how to make it start faster let me know, also \nneed to look into their HMR which doesn't seem to work.\n\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Mon, 15 May 2017 04:35:32 -0700"},
{"body":"That's just a warning. Is there some deeper breakage that you are observing? \nDavid\n\nOn Sun, May 14, 2017 at 3:09 AM, Tatu Tarvainen <antita...@gmail.com> wrote:\n\n>\n> > * CLJS-2013 - Add MapEntry type\n>\n> This change seems to break plumatic schema, after upgrading I'm getting\n> warnings:\n>\n> WARNING: ->MapEntry already refers to: cljs.core\/->MapEntry being replaced\n> by: schema.core\/->MapEntry at ... schema\/core.cljs\n>\n> Plumatic also defines a MapEntry record type which clashes with the core\n> one.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: ANN: ClojureScript 1.9.542, spec changes & REPL enhancement David Nolen Mon, 15 May 2017 04:32:34 -0700"},
{"body":"On Monday, May 15, 2017 at 8:30:26 AM UTC+2, Shaun LeBron wrote:\n> > The example still uses leiningen by I may drop that and create something \n> > standalone.\n> \n> I'd like to show you around my \"cljs\/tool\" some time for your standalone \n> thing. I'm a year into building it to wrap a good UX around cljs on npm \n> things as they become available, and I think this experimental feature could \n> be delivered pretty easily through it. \nHey Shaun,\n\nI've been following your work on github.com\/cljs pretty much since the \nbeginning. It would safe me a ton of work if you want to cover the npm package \nside of things.\n\nMy plan so far was:\n\n- create an uberjar for shadow-devtools (which would contain clojure, \nclojurescript, core.async and could add more)\n- create a npm package with a shadow-cljs bin that uses java or node-jre\n- shadow-cljs cli opts --watch --repl etc\n- zero conf CLJS compilation mode that compiles to the shadow-npm module to \nquickstart things\n\nWhen the user is ready to go into full-blown CLJS first mode it should be as \nsimple as creating a build config and then running the full featured mode which \nincludes Google Closure.\n\nThe hard part for that transition would be that the \nrequire(\"shadow-npm\/cljs.core\") would no longer work since it is pretty much \nimpossible to make that work with :advanced.\n\nThe results of \"webpack -p\" on the shadow-npm thing are ok but nowhere close to \nwhat Closure would give you. I guess it is good enough if you are JS first with \na bit of CLJS sprinkled on top.\n\nI have no attachments to the shadow-cljs or shadow-npm names, I just used them \nbecause there already are so many cljs+npm, clojurescript+npm variations out \nthere that I just didn't want to conflict with.\n\nIf you want to use this for your cljs\/tool I'd be happy to make any changes \nyou'd need. Although your current mix of lumo and figwheel really doesn't \ntranslate too well to the \"create a pseudo node module\" (ie. \n\".\/node_modules\/shadow-npm\/cljs.core.js\" to enable \nrequire(\"shadow-npm\/cljs.core\"). Also the configs for shadow-devtools are \nsubstantially different from lumo\/figwheel\/cljsbuild, hopefully simpler though.\n\nCurrently it is all driven by this little CLI ns:\nhttps:\/\/github.com\/thheller\/shadow-devtools\/blob\/master\/src\/main\/shadow\/npm\/cli.clj\n\nI just use it through leiningen since I didn't want to work through the \ndependency management, but you already have that covered. lein is not needed at \nall beyond that.\n\nSince I'm not a JS dev and have been purely CLJS for 3+ years I really don't \nfeel qualified to make decisions on what would be ideal for a JS dev. Current \nsolutions all felt unnecessary complex though.\n\nHappy to consider all feedback.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Mon, 15 May 2017 00:57:07 -0700"},
{"body":"> The example still uses leiningen by I may drop that and create something \n> standalone. \nI'd like to show you around my \"cljs\/tool\" some time for your standalone thing. \nI'm a year into building it to wrap a good UX around cljs on npm things as they \nbecome available, and I think this experimental feature could be delivered \npretty easily through it.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Shaun LeBron Sun, 14 May 2017 23:31:15 -0700"},
{"body":"Yes, currently it is just shadow-devtools via lein. Could also run it through \nboot, no problem. \nI want to package it all up so you can \"npm install shadow-npm\".\n\nNeed to figure out how to best do that first though. Should probably also chose \na better name.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Sun, 14 May 2017 12:13:08 -0700"},
{"body":"On Sunday, May 14, 2017 at 6:45:48 PM UTC+8, Thomas Heller wrote:\n> Hello,\n> \n> I wrote a few lines of code that should hopefully make it easier to get \n> started with CLJS for people coming from the JS world.\n> \n> I created a demo here:\n> https:\/\/github.com\/thheller\/npm-module-example\n> \n> The gist is that you gain: var foo = require(\"shadow-npm\/demo.foo\");\n> \n> Where \"shadow-npm\" is a pseudo node-module generated by the tool and \n> \"demo.foo\" is just the CLJS namespace you want. The require will return the \n> NS so foo.bar() just works. The CLJS sources can use any npm module and local \n> sources as well.\n> \n> See: \n> https:\/\/github.com\/thheller\/npm-module-example\/blob\/master\/src\/main\/demo\/foo.cljs\n> \n> Given that the generated code is NPM compliant it should work with any npm JS \n> tools. The demo has a basic setup for webpack, no special configuration for \n> CLJS is needed.\n> \n> I barely know anything about any NPM tools so I might be doing something \n> completely wrong, please create issues on the shadow-devtools [1] project if \n> you run into issues. I only tested node itself and webpack.\n> \n> The sacrifice is that you can't use the Closure Compiler but you gain \n> everything the npm world has to offer with hopefully seemless interop. Do not \n> underestimate the impact of this sacrifice though, I cannot recommend using \n> this for production builds.\n> \n> The example still uses leiningen by I may drop that and create something \n> standalone.\n> \n> Need to work on a lot of things still but the proof of concept works, maybe \n> it is useful to someone.\n> \n> Cheers,\n> \/thomas\n> \n> [1] https:\/\/github.com\/thheller\/shadow-devtools\n> \n> PS: This is not related to :npm-deps at all. \nIs that project compiling with something like lein-cljs(in shadow-devtools) \ninside and then emit JavaScript that can be processed by Webpack?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Jiyin Yiyong Sun, 14 May 2017 10:36:37 -0700"},
{"body":"Just added another example that shows how you'd use CLJS in a create-react-app \nsetup. \nhttps:\/\/github.com\/thheller\/npm-module-example\/tree\/master\/examples\/create-react-app\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: A new take on ClojureScript and npm Thomas Heller Sun, 14 May 2017 08:59:43 -0700"},
{"body":"I started a new topic [1] for the implementation.\n\nYou can find an example here:\nhttps:\/\/github.com\/thheller\/npm-module-example \nI'd be very interested in feedback from people that actually use webpack \nalready.\n\n[1] https:\/\/groups.google.com\/forum\/?fromgroups#!topic\/clojurescript\/AGXku7Ous0Y\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? Thomas Heller Sun, 14 May 2017 05:23:23 -0700"},
{"body":"Hello,\n\nI wrote a few lines of code that should hopefully make it easier to get started \nwith CLJS for people coming from the JS world. \nI created a demo here:\nhttps:\/\/github.com\/thheller\/npm-module-example\n\nThe gist is that you gain: var foo = require(\"shadow-npm\/demo.foo\");\n\nWhere \"shadow-npm\" is a pseudo node-module generated by the tool and \"demo.foo\" \nis just the CLJS namespace you want. The require will return the NS so \nfoo.bar() just works. The CLJS sources can use any npm module and local sources \nas well.\n\nSee: \nhttps:\/\/github.com\/thheller\/npm-module-example\/blob\/master\/src\/main\/demo\/foo.cljs\n\nGiven that the generated code is NPM compliant it should work with any npm JS \ntools. The demo has a basic setup for webpack, no special configuration for \nCLJS is needed.\n\nI barely know anything about any NPM tools so I might be doing something \ncompletely wrong, please create issues on the shadow-devtools [1] project if \nyou run into issues. I only tested node itself and webpack.\n\nThe sacrifice is that you can't use the Closure Compiler but you gain \neverything the npm world has to offer with hopefully seemless interop. Do not \nunderestimate the impact of this sacrifice though, I cannot recommend using \nthis for production builds.\n\nThe example still uses leiningen by I may drop that and create something \nstandalone.\n\nNeed to work on a lot of things still but the proof of concept works, maybe it \nis useful to someone.\n\nCheers,\n\/thomas\n\n[1] https:\/\/github.com\/thheller\/shadow-devtools\n\nPS: This is not related to :npm-deps at all.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] A new take on ClojureScript and npm Thomas Heller Sun, 14 May 2017 03:46:14 -0700"},
{"body":"> * CLJS-2013 - Add MapEntry type\n\nThis change seems to break plumatic schema, after upgrading I'm getting \nwarnings: \nWARNING: ->MapEntry already refers to: cljs.core\/->MapEntry being replaced by: \nschema.core\/->MapEntry at ... schema\/core.cljs\n\nPlumatic also defines a MapEntry record type which clashes with the core one.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.542, spec changes & REPL enhancement Tatu Tarvainen Sun, 14 May 2017 00:10:33 -0700"},
{"body":"> I'll probably write the simple version today and see how things work out. \nSo the simple version sort of works.\n\nhttp:\/\/thheller.com\/webpack-cljs-preview\/index.html\nhttp:\/\/thheller.com\/webpack-cljs-preview\/bundle.js\nThis was generated by \"webpack -d\" and\n\nindex.js:\n---\nvar foo = require(\"webpack-cljs\/dummy.foo\");\nconsole.log(foo.bar());\n---\n\ndummy\/foo.cljs:\n---\n(ns dummy.foo)\n\n(js\/console.log \"dummy.foo\")\n\n(defn bar []\n  \"bar\")\n---\n\nNothing special but works well enough, still haven't figured out most of the \nwebpack things though. Currently they shadow-devtools just runs independently \nand generates files into .\/node_modules\/webpack-cljs\/dummy.foo.js to make the \nrequire \"pretty\" (I really do not like  relative paths).\n\nWill polish things a bit and maybe provide a public repo tomorrow. Still \nconvinced that this is a very bad idea though. ;)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? Thomas Heller Sat, 13 May 2017 10:09:06 -0700"},
{"body":"Hi,\n\nI recently deployed a 100% cljs\/cls site: organicinvestmentcooperative.com.au \nI'm wondering if people can point me towards other clojurescript websites, or \npeople or resources to help build commercial scale websites in clojurescript\n\nFeels like there is a lot of potential here, but lack of front end libraries is \ncausing more development work compared to more mainsteam technologies\n\nThanks!\nMarc\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Large public clojurescript websites Marc Griffiths Sat, 13 May 2017 08:43:46 -0700"},
{"body":"On Saturday, May 13, 2017 at 3:47:01 AM UTC+2, Jiyin Yiyong wrote:\n> Cool.... Hope one day it's in Lumo too XD \nNot by me but the features could certainly be ported.\n\nI spent quite a bit of time yesterday fighting through webpack sources trying \nto come up with an efficient way of doing things.\n\nThe easy solution would be to make everything one-way which means JS can \nrequire CLJS but CLJS cannot require \"local\" JS, only modules from npm. So \n(js\/require \"react\") would work but (js\/require \".\/foo\") would not.\n\nSo in JS you would could say var x = require(\"webpack-cljs\/cljs.core\"). The way \nthings are handled in webpack\/npm means you must have a module-name which would \nbe webpack-cljs or something along that line. But a package cannot depend on \nthe local sources.\n\nHaving sources to actually be side-by-side doesn't mirror too well to JS since \nyou usually don't have namespaces there.\n\nImagine\nsrc\/index.js\nsrc\/foo.js\nsrc-cljs\/foo\/bar.cljs\n\nIn index.js you could say require(\".\/webpack-cljs\/foo.bar\") and in the cljs \nfile I could imagine\n(webpack\/require \".\/foo\") where it would always be relative context root (ie. \nsrc). The compiler would actually just generated a src\/webpack-cljs\/foo.bar.js. \nSame way it would for the module version.\n\nThe problem with that is that people may start writing npm packages in CLJS \nwhere each package would contain its own version of cljs.core. That would be \nreally really bad.\n\nIdeally I want\nsrc\/index.js\nsrc\/foo.js\nsrc\/foo\/bar.cljs\n\nbut have not figured out how to do that yet. webpack has a ton of mutable state \nall over the place so trying to figure out what is going on is not that easy.\n\nI'll probably write the simple version today and see how things work out.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? Thomas Heller Sat, 13 May 2017 03:44:55 -0700"},
{"body":"Cool.... Hope one day it's in Lumo too XD\n\nOn Sat, May 13, 2017 at 1:48 AM Thomas Heller <th.hel...@gmail.com> wrote: \n>\n> > However I think it's not we current have for all ClojureScript users,\n> since it's implemented by yourself based on lein\n>\n> That is incorrect. It is a pure Clojure library with no dependency on\n> leiningen. I just happen to use leiningen and do not know enough about boot\n> to create proper instructions for boot.\n>\n> You can use it via the REPL\n>\n> BOOT_CLOJURE_VERSION=1.9.0-alpha15 boot -d\n> thheller\/shadow-devtools:1.0.20170512-13 -s src repl\n>\n> (require '[shadow.cljs.devtools.api :as cljs])\n> (cljs\/once :build-id)\n>\n> https:\/\/github.com\/thheller\/shadow-devtools\/wiki\/REPL\n>\n> Some ideas in boot don't play too well with the design I have in mind for\n> shadow-devtools but you can use it just fine.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/HNuYCfPRtQw\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? jiyinyiyong Fri, 12 May 2017 18:47:23 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.542\"]\n\nThis release is primarily about staying in sync with the latest changes to\nspec. It\nalso includes a small but significant enhancement to REPLs to allow\nhandling multiple forms.\n\nAs always, feedback welcome!\n\n## 1.9.542\n\n### Enhancements\n* CLJS-1572: REPL doesn't give error for expressions with too many right\nparentheses\n\n### Changes\n* cljs.spec -> cljs.spec.alpha\n* CLJS-2013 - Add MapEntry type\n* CLJS-2015: Self-host: `defmacro` should return the Var\n* CLJS-2017: Upgrade Closure Compiler to latest April 2017 release\n\n### Fixes\n* CLJS-485: RegExp flags are being dropped by string\/replace\n* CLJS-1518: Case macro expansion evaluates expression twice\n* CLJS-2024: Self-host: `find-ns-obj` broken for namespaces with 'a' as the\nfirst segment\n* CLJS-2028: `realized?` throws on LazyTransformer\n* CLJS-2010: refer-clojure :rename throws on valid invocations\n* CLJS-2007: Whitespace optimizations should respect :main option.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.542, spec changes & REPL enhancement David Nolen Fri, 12 May 2017 13:31:57 -0700"},
{"body":"Time not enough to read every detail, but I found it great that most of my\npoints are covered in the Wiki, code splitting, file hashing, async loading. \nHowever I think it's not we current have for all ClojureScript users, since\nit's implemented by yourself based on lein, like hashing\nhttps:\/\/github.com\/thheller\/shadow-devtools\/blob\/de6ede2add891aa798a3109c596ecafefdff94fe\/src\/main\/shadow\/cljs\/devtools\/targets\/browser.clj#L235-L237\nI'm\na Boot user, and it became a problem.\n\nI heard about goog.module.ModuleManager before but never thought I could\nmake use of it given that fact it was poorly documented... Your project is\ncool.\n\nOn Fri, May 12, 2017 at 9:23 PM Thomas Heller <th.hel...@gmail.com> wrote:\n\n> I wrote some things down here:\n>\n> https:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-the-browser#productionrelease-builds\n>\n> Code splitting is done by the :modules, whether or not you want to use the\n> loader is up to you. I personally don't but that is because I have a rather\n> traditional website that actually has different pages and I can determine\n> which modules are needed based on the page. If you have an actual SPA you\n> probably want to use the loader.\n>\n> :module-hash-names and :bundle-foreign are the caching bits. I just added\n> the :module-hash-names since that was still in my private build config, but\n> that was in use for about 3 years.\n>\n>\n> I had an idea for webpack, I'll let you know if it works out.\n>\n>\n> On Friday, May 12, 2017 at 1:46:32 PM UTC+2, Jiyin Yiyong wrote:\n> > I used ClojureScript for a year. Probably there are tricks from Closure\n> Compiler that I have no idea.\n> >\n> >\n> > For the size, I saw some of the sites I often use have large JavaScript\n> size(with Disable Cache ticked):\n> >\n> >\n> > weibo.com 1.2M\n> >\n> >\n> > Twitter 437K\n> > teambition.com 1.9M\n> >\n> >\n> >\n> > I don't think 84k is a very big deal, while it is for smaller websites.\n> Besides, we may cache and sure the cljs.core.js part, we may use Prepack in\n> the future. In my case it's tolerable.\n> >\n> >\n> > Today, using tools like\n> https:\/\/github.com\/facebookincubator\/create-react-app and\n> https:\/\/github.com\/vuejs\/vue-cli we almost get long time caching and code\n> splitting with only several lines of code, with assets(images, fronts)\n> bundling out of box. Hard to imagine we sell those people ClojureScript\n> without competitive features.\n> >\n> >\n> > It would still be awesome if you can share about code splitting and\n> permanent caching in ClojureScript :)\n> >\n> >\n> > On Fri, May 12, 2017 at 4:55 PM Thomas Heller <th.h...@gmail.com> wrote:\n> > I'm way too biased towards the Closure Compiler and giving that up is\n> simply not an option for me. I am however very interested in making things\n> simpler for everyone.\n> >\n> >\n> >\n> >\n> https:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-node.js-libraries\n> >\n> >\n> >\n> > This is an example of how I intend to do that for node libraries, ie.\n> something you just require. This actually bundles things up in a UMD format\n> so the same can work for non-node environments. I would happily add a\n> :browser-umd target that solves some of the issues for webpack users.\n> >\n> >\n> >\n> >\n> https:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-the-browser\n> >\n> >\n> >\n> > I have used the underlying shadow-build for over 3 years now to do\n> code-splitting with permanent caching of generated files (ie. each\n> generated file has a unique name). I also recently added the :module-loader\n> which lets you async load modules on demand.\n> >\n> >\n> >\n> > Not sure what asset bundling does so no comment on that.\n> >\n> >\n> >\n> > I can't do anything about the JVM. I have been using it for too long so\n> I may be blind to the issues people are having with it. It isn't that bad?\n> >\n> >\n> >\n> > I would say there is actually a good solution to the issues you mention.\n> They just aren't available in the \"mainstream\" tools and I suck at writing\n> documentation. I'm happy to provide examples any time but need help with\n> the writing.\n> >\n> >\n> >\n> > Coming back to the webpack loader: I have a few ideas how I would write\n> such a thing. The issue I see, and why I don't, is that the end result is\n> bad. CLJS is built very much with the GCL in mind. cljs\/core.js is 1.2MB\n> (151KB gzip) unoptimized. One large file is very non-idiomatic npm\/webpack.\n> That also does not contain any user code. UglifyJS is able to shorten some\n> of the code but you still keep about 84K gzip'd. To me that is unacceptable.\n> >\n> >\n> >\n> > Web-targeted JS needs to be optimized as much as possible and currently\n> that means using the GCL. I don't want to create a \"simple\" solution that\n> sacrifices this just to make dev-time easier.\n> >\n> >\n> >\n> > I have been CLJS first for too long now to imagine which issues people\n> are having who are webpack first. Happy to discuss ideas or proposals.\n> Maybe there are ways (like the :node-library, :node-script) that could work\n> even in :advanced mode.\n> >\n> >\n> >\n> >\n> >\n> >\n> >\n> > On Friday, May 12, 2017 at 5:57:58 AM UTC+2, Jiyin Yiyong wrote:\n> >\n> > > It would be nice if we can require ClojureScript in JavaScript, and\n> let Webpack to handle so many issues.\n> >\n> > >\n> >\n> > >\n> >\n> > > For Webpack use cases, I tried to sell ClojureScript to other\n> front-end developers around me, but saw some problems:\n> >\n> > >\n> >\n> > >\n> >\n> > > * IMPORTANT: hard to install JVM. For JavaScript projects, installing\n> Node.js(with npm inside) would be okay. It's very hard for JavaScript\n> developers to pick up JVM and Boot(or Leiningen).\n> >\n> > > * IMPORTANT: long time caching and code splitting. We use these\n> features in production for years. But I don't see a good solution in\n> ClojureScript.\n> >\n> > > * Async code loading. For large projects some code can be loaded when\n> a router is activated. No good solution found in ClojureScript.\n> >\n> > > * Assets bundling. Now we rely on Webpack to do that, result in using\n> 2 tools.\n> >\n> > >\n> >\n> > >\n> >\n> > > Not sure if they can be solved if we have a ClojureScript running on\n> Webpack. But there are many compiled-to-js languages support those features\n> in by supporting Webpack already. That's the purpose behind the post.\n> >\n> > >\n> >\n> > >\n> >\n> > > Didn't try `node-jre`. I'm guessing we still need to debug JVM stuffs\n> since it's running JVM?\n> >\n> > >\n> >\n> > >\n> >\n> > > On Fri, May 12, 2017 at 6:11 AM Shaun LeBron <shaunew...@gmail.com>\n> wrote:\n> >\n> > > On Wednesday, May 10, 2017 at 11:45:02 PM UTC-5, Jiyin Yiyong wrote:\n> >\n> > >\n> >\n> > > > Already an old boring topic... I'm from JavaScript side and so many\n> people are building apps with Webpack. And so many of alt-js languages got\n> Webpack loaders:\n> >\n> > >\n> >\n> > > >\n> >\n> > >\n> >\n> > > > BuckleScript https:\/\/github.com\/rrdelaney\/bs-loader\n> >\n> > >\n> >\n> > > > PureScript https:\/\/github.com\/ethul\/purs-loader\n> >\n> > >\n> >\n> > > > Elm https:\/\/github.com\/elm-community\/elm-webpack-loader\n> >\n> > >\n> >\n> > > > Fable https:\/\/github.com\/fable-compiler\/Fable\n> >\n> > >\n> >\n> > > >\n> >\n> > >\n> >\n> > > > Exception:\n> >\n> > >\n> >\n> > > >\n> >\n> > >\n> >\n> > > > No Webpack for ReasonML\n> https:\/\/github.com\/chenglou\/reason-react-example\/blob\/master\/webpack.config.js\n> >\n> > >\n> >\n> > > >\n> >\n> > >\n> >\n> > > > Can we make a loader for ClojureScript?\n> >\n> > >\n> >\n> > > >\n> >\n> > >\n> >\n> > > > Or how about the possibility? I guess Closure Compiler will get in\n> the why. But is it possible if I don't use dead code elimination from\n> Closure Compiler? I know many people need it but seriously no other\n> solutions? And how much does ClojureScript depend on Closure Library?\n> >\n> > >\n> >\n> > >\n> >\n> > >\n> >\n> > > I'm from the JS side as well, so I'm glad to see this question!  Are\n> you imagining something like the following?  We should probably start by\n> imagining why someone would want to require cljs this way and if it would\n> even make sense to:\n> >\n> > >\n> >\n> > >\n> >\n> > >\n> >\n> > > ```\n> >\n> > >\n> >\n> > > require('cljs!.\/src-cljs') \/\/ return all goog.provided namespaces?\n> >\n> > >\n> >\n> > > require('cljs!.\/src-cljs\/foo\/core.cljs') \/\/ return a single\n> goog.provide namespace?\n> >\n> > >\n> >\n> > > ```\n> >\n> > >\n> >\n> > >\n> >\n> > >\n> >\n> > > Either way I think it would need Closure Compiler to return a single\n> asset for each require statement, if I understand webpack correctly.\n> >\n> > >\n> >\n> > >\n> >\n> > >\n> >\n> > > It's worth mentioning that the recent \"node-jre\" package allows users\n> to install\/use the full cljs JVM compiler in its fully glory through npm\n> without any external dependencies, which I've tested here:\n> https:\/\/github.com\/cljs\/tool\n> >\n> > >\n> >\n> > >\n> >\n> > >\n> >\n> > > I think it's possible\u2014just unsure of webpack use-cases.  Thoughts?\n> >\n> > >\n> >\n> > >\n> >\n> > >\n> >\n> > > --\n> >\n> > >\n> >\n> > > Note that posts from new members are moderated - please be patient\n> with your first post.\n> >\n> > >\n> >\n> > > ---\n> >\n> > >\n> >\n> > > You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> >\n> > >\n> >\n> > > To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/HNuYCfPRtQw\/unsubscribe.\n> >\n> > >\n> >\n> > > To unsubscribe from this group and all its topics, send an email to\n> clojurescrip...@googlegroups.com.\n> >\n> > >\n> >\n> > > To post to this group, send email to clojur...@googlegroups.com.\n> >\n> > >\n> >\n> > > Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n> >\n> >\n> >\n> > --\n> >\n> > Note that posts from new members are moderated - please be patient with\n> your first post.\n> >\n> > ---\n> >\n> > You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> >\n> > To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/HNuYCfPRtQw\/unsubscribe.\n> >\n> > To unsubscribe from this group and all its topics, send an email to\n> clojurescrip...@googlegroups.com.\n> >\n> > To post to this group, send email to clojur...@googlegroups.com.\n> >\n> > Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/HNuYCfPRtQw\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? jiyinyiyong Fri, 12 May 2017 10:30:06 -0700"},
{"body":"On Friday, May 12, 2017 at 1:55:24 AM UTC-7, Thomas Heller wrote:\n> I'm way too biased towards the Closure Compiler and giving that up is simply \n> not an option for me. I am however very interested in making things simpler \n> for everyone.\n> \n> https:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-node.js-libraries\n> \n\nThis looks very nice, with a colleague here we event went as far as thinking, \nwhat if we completely drop GCP support for node.js targets.\nWe talked about this a bit on Clojurians, I like your idea to get closer to the \nnode way. I am not a JS dev at all, but I understand the pain of existing JS \ndevs when they approach the ClojureScript world.\nThey need to change everything they know, not only learn a language but also \nnew (JVM) tooling. Many say no thanks, which is a pity because they are missing \nout :D\n\nI have recently worked on a POC using Reason. The tooling is rough but it fits \nthe JS ecosystem. The compiler is super fast (faster than Typescript even on my \nmachine!). We ended up picking Typescript because of the tooling basically for \na zero version of our stuff. I already don't like it that much ah ah.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? Andrea Richiardi Fri, 12 May 2017 10:13:26 -0700"},
{"body":"I wrote some things down here:\nhttps:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-the-browser#productionrelease-builds \nCode splitting is done by the :modules, whether or not you want to use the \nloader is up to you. I personally don't but that is because I have a rather \ntraditional website that actually has different pages and I can determine which \nmodules are needed based on the page. If you have an actual SPA you probably \nwant to use the loader.\n\n:module-hash-names and :bundle-foreign are the caching bits. I just added the \n:module-hash-names since that was still in my private build config, but that \nwas in use for about 3 years.\n\n\nI had an idea for webpack, I'll let you know if it works out.\n\n\nOn Friday, May 12, 2017 at 1:46:32 PM UTC+2, Jiyin Yiyong wrote:\n> I used ClojureScript for a year. Probably there are tricks from Closure \n> Compiler that I have no idea.\n> \n> \n> For the size, I saw some of the sites I often use have large JavaScript \n> size(with Disable Cache ticked):\n> \n> \n> weibo.com 1.2M\n> \n> \n> Twitter 437K\n> teambition.com 1.9M\n> \n> \n> \n> I don't think 84k is a very big deal, while it is for smaller websites. \n> Besides, we may cache and sure the cljs.core.js part, we may use Prepack in \n> the future. In my case it's tolerable.\n> \n> \n> Today, using tools like\u00a0https:\/\/github.com\/facebookincubator\/create-react-app\u00a0\n> and\u00a0https:\/\/github.com\/vuejs\/vue-cli\u00a0we almost get long time caching and code \n> splitting with only several lines of code, with assets(images, fronts) \n> bundling out of box. Hard to imagine we sell those people ClojureScript \n> without competitive features.\n> \n> \n> It would still be awesome if you can share about code splitting and permanent \n> caching in ClojureScript :)\n> \n> \n> On Fri, May 12, 2017 at 4:55 PM Thomas Heller <th.h...@gmail.com> wrote:\n> I'm way too biased towards the Closure Compiler and giving that up is simply \n> not an option for me. I am however very interested in making things simpler \n> for everyone.\n> \n> \n> \n> https:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-node.js-libraries\n> \n> \n> \n> This is an example of how I intend to do that for node libraries, ie. \n> something you just require. This actually bundles things up in a UMD format \n> so the same can work for non-node environments. I would happily add a \n> :browser-umd target that solves some of the issues for webpack users.\n> \n> \n> \n> https:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-the-browser\n> \n> \n> \n> I have used the underlying shadow-build for over 3 years now to do \n> code-splitting with permanent caching of generated files (ie. each generated \n> file has a unique name). I also recently added the :module-loader which lets \n> you async load modules on demand.\n> \n> \n> \n> Not sure what asset bundling does so no comment on that.\n> \n> \n> \n> I can't do anything about the JVM. I have been using it for too long so I may \n> be blind to the issues people are having with it. It isn't that bad?\n> \n> \n> \n> I would say there is actually a good solution to the issues you mention. They \n> just aren't available in the \"mainstream\" tools and I suck at writing \n> documentation. I'm happy to provide examples any time but need help with the \n> writing.\n> \n> \n> \n> Coming back to the webpack loader: I have a few ideas how I would write such \n> a thing. The issue I see, and why I don't, is that the end result is bad. \n> CLJS is built very much with the GCL in mind. cljs\/core.js is 1.2MB (151KB \n> gzip) unoptimized. One large file is very non-idiomatic npm\/webpack. That \n> also does not contain any user code. UglifyJS is able to shorten some of the \n> code but you still keep about 84K gzip'd. To me that is unacceptable.\n> \n> \n> \n> Web-targeted JS needs to be optimized as much as possible and currently that \n> means using the GCL. I don't want to create a \"simple\" solution that \n> sacrifices this just to make dev-time easier.\n> \n> \n> \n> I have been CLJS first for too long now to imagine which issues people are \n> having who are webpack first. Happy to discuss ideas or proposals. Maybe \n> there are ways (like the :node-library, :node-script) that could work even in \n> :advanced mode.\n> \n> \n> \n> \n> \n> \n> \n> On Friday, May 12, 2017 at 5:57:58 AM UTC+2, Jiyin Yiyong wrote:\n> \n> > It would be nice if we can require ClojureScript in JavaScript, and let \n> > Webpack to handle so many issues.\n> \n> >\n> \n> >\n> \n> > For Webpack use cases, I tried to sell ClojureScript to other front-end \n> > developers around me, but saw some problems:\n> \n> >\n> \n> >\n> \n> > * IMPORTANT: hard to install JVM. For JavaScript projects, installing \n> > Node.js(with npm inside) would be okay. It's very hard for JavaScript \n> > developers to pick up JVM and Boot(or Leiningen).\n> \n> > * IMPORTANT: long time caching and code splitting. We use these features in \n> > production for years. But I don't see a good solution in ClojureScript.\n> \n> > * Async code loading. For large projects some code can be loaded when a \n> > router is activated. No good solution found in ClojureScript.\n> \n> > * Assets bundling. Now we rely on Webpack to do that, result in using 2 \n> > tools.\n> \n> >\n> \n> >\n> \n> > Not sure if they can be solved if we have a ClojureScript running on \n> > Webpack. But there are many compiled-to-js languages support those features \n> > in by supporting Webpack already. That's the purpose behind the post.\n> \n> >\n> \n> >\n> \n> > Didn't try `node-jre`. I'm guessing we still need to debug JVM stuffs since \n> > it's running JVM?\n> \n> >\n> \n> >\n> \n> > On Fri, May 12, 2017 at 6:11 AM Shaun LeBron <shaunew...@gmail.com> wrote:\n> \n> > On Wednesday, May 10, 2017 at 11:45:02 PM UTC-5, Jiyin Yiyong wrote:\n> \n> >\n> \n> > > Already an old boring topic... I'm from JavaScript side and so many \n> > > people are building apps with Webpack. And so many of alt-js languages \n> > > got Webpack loaders:\n> \n> >\n> \n> > >\n> \n> >\n> \n> > > BuckleScript https:\/\/github.com\/rrdelaney\/bs-loader\n> \n> >\n> \n> > > PureScript https:\/\/github.com\/ethul\/purs-loader\n> \n> >\n> \n> > > Elm https:\/\/github.com\/elm-community\/elm-webpack-loader\n> \n> >\n> \n> > > Fable https:\/\/github.com\/fable-compiler\/Fable\n> \n> >\n> \n> > >\n> \n> >\n> \n> > > Exception:\n> \n> >\n> \n> > >\n> \n> >\n> \n> > > No Webpack for ReasonML \n> > > https:\/\/github.com\/chenglou\/reason-react-example\/blob\/master\/webpack.config.js\n> \n> >\n> \n> > >\n> \n> >\n> \n> > > Can we make a loader for ClojureScript?\n> \n> >\n> \n> > >\n> \n> >\n> \n> > > Or how about the possibility? I guess Closure Compiler will get in the \n> > > why. But is it possible if I don't use dead code elimination from Closure \n> > > Compiler? I know many people need it but seriously no other solutions? \n> > > And how much does ClojureScript depend on Closure Library?\n> \n> >\n> \n> >\n> \n> >\n> \n> > I'm from the JS side as well, so I'm glad to see this question!\u00a0 Are you \n> > imagining something like the following?\u00a0 We should probably start by \n> > imagining why someone would want to require cljs this way and if it would \n> > even make sense to:\n> \n> >\n> \n> >\n> \n> >\n> \n> > ```\n> \n> >\n> \n> > require('cljs!.\/src-cljs') \/\/ return all goog.provided namespaces?\n> \n> >\n> \n> > require('cljs!.\/src-cljs\/foo\/core.cljs') \/\/ return a single goog.provide \n> > namespace?\n> \n> >\n> \n> > ```\n> \n> >\n> \n> >\n> \n> >\n> \n> > Either way I think it would need Closure Compiler to return a single asset \n> > for each require statement, if I understand webpack correctly.\n> \n> >\n> \n> >\n> \n> >\n> \n> > It's worth mentioning that the recent \"node-jre\" package allows users to \n> > install\/use the full cljs JVM compiler in its fully glory through npm \n> > without any external dependencies, which I've tested here: \n> > https:\/\/github.com\/cljs\/tool\n> \n> >\n> \n> >\n> \n> >\n> \n> > I think it's possible\u2014just unsure of webpack use-cases.\u00a0 Thoughts?\n> \n> >\n> \n> >\n> \n> >\n> \n> > --\n> \n> >\n> \n> > Note that posts from new members are moderated - please be patient with \n> > your first post.\n> \n> >\n> \n> > ---\n> \n> >\n> \n> > You received this message because you are subscribed to a topic in the \n> > Google Groups \"ClojureScript\" group.\n> \n> >\n> \n> > To unsubscribe from this topic, visit \n> > https:\/\/groups.google.com\/d\/topic\/clojurescript\/HNuYCfPRtQw\/unsubscribe.\n> \n> >\n> \n> > To unsubscribe from this group and all its topics, send an email to \n> > clojurescrip...@googlegroups.com.\n> \n> >\n> \n> > To post to this group, send email to clojur...@googlegroups.com.\n> \n> >\n> \n> > Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to a topic in the Google \n> Groups \"ClojureScript\" group.\n> \n> To unsubscribe from this topic, visit \n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/HNuYCfPRtQw\/unsubscribe.\n> \n> To unsubscribe from this group and all its topics, send an email to \n> clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? Thomas Heller Fri, 12 May 2017 06:23:32 -0700"},
{"body":"I'm way too biased towards the Closure Compiler and giving that up is simply \nnot an option for me. I am however very interested in making things simpler for \neveryone. \nhttps:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-node.js-libraries\n\nThis is an example of how I intend to do that for node libraries, ie. something \nyou just require. This actually bundles things up in a UMD format so the same \ncan work for non-node environments. I would happily add a :browser-umd target \nthat solves some of the issues for webpack users.\n\nhttps:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-the-browser\n\nI have used the underlying shadow-build for over 3 years now to do \ncode-splitting with permanent caching of generated files (ie. each generated \nfile has a unique name). I also recently added the :module-loader which lets \nyou async load modules on demand.\n\nNot sure what asset bundling does so no comment on that.\n\nI can't do anything about the JVM. I have been using it for too long so I may \nbe blind to the issues people are having with it. It isn't that bad?\n\nI would say there is actually a good solution to the issues you mention. They \njust aren't available in the \"mainstream\" tools and I suck at writing \ndocumentation. I'm happy to provide examples any time but need help with the \nwriting.\n\nComing back to the webpack loader: I have a few ideas how I would write such a \nthing. The issue I see, and why I don't, is that the end result is bad. CLJS is \nbuilt very much with the GCL in mind. cljs\/core.js is 1.2MB (151KB gzip) \nunoptimized. One large file is very non-idiomatic npm\/webpack. That also does \nnot contain any user code. UglifyJS is able to shorten some of the code but you \nstill keep about 84K gzip'd. To me that is unacceptable.\n\nWeb-targeted JS needs to be optimized as much as possible and currently that \nmeans using the GCL. I don't want to create a \"simple\" solution that sacrifices \nthis just to make dev-time easier.\n\nI have been CLJS first for too long now to imagine which issues people are \nhaving who are webpack first. Happy to discuss ideas or proposals. Maybe there \nare ways (like the :node-library, :node-script) that could work even in \n:advanced mode.\n\n\n\nOn Friday, May 12, 2017 at 5:57:58 AM UTC+2, Jiyin Yiyong wrote:\n> It would be nice if we can require ClojureScript in JavaScript, and let \n> Webpack to handle so many issues.\n> \n> \n> For Webpack use cases, I tried to sell ClojureScript to other front-end \n> developers around me, but saw some problems:\n> \n> \n> * IMPORTANT: hard to install JVM. For JavaScript projects, installing \n> Node.js(with npm inside) would be okay. It's very hard for JavaScript \n> developers to pick up JVM and Boot(or Leiningen).\n> * IMPORTANT: long time caching and code splitting. We use these features in \n> production for years. But I don't see a good solution in ClojureScript.\n> * Async code loading. For large projects some code can be loaded when a \n> router is activated. No good solution found in ClojureScript.\n> * Assets bundling. Now we rely on Webpack to do that, result in using 2 tools.\n> \n> \n> Not sure if they can be solved if we have a ClojureScript running on Webpack. \n> But there are many compiled-to-js languages support those features in by \n> supporting Webpack already. That's the purpose behind the post.\n> \n> \n> Didn't try `node-jre`. I'm guessing we still need to debug JVM stuffs since \n> it's running JVM?\n> \n> \n> On Fri, May 12, 2017 at 6:11 AM Shaun LeBron <shaunew...@gmail.com> wrote:\n> On Wednesday, May 10, 2017 at 11:45:02 PM UTC-5, Jiyin Yiyong wrote:\n> \n> > Already an old boring topic... I'm from JavaScript side and so many people \n> > are building apps with Webpack. And so many of alt-js languages got Webpack \n> > loaders:\n> \n> >\n> \n> > BuckleScript https:\/\/github.com\/rrdelaney\/bs-loader\n> \n> > PureScript https:\/\/github.com\/ethul\/purs-loader\n> \n> > Elm https:\/\/github.com\/elm-community\/elm-webpack-loader\n> \n> > Fable https:\/\/github.com\/fable-compiler\/Fable\n> \n> >\n> \n> > Exception:\n> \n> >\n> \n> > No Webpack for ReasonML \n> > https:\/\/github.com\/chenglou\/reason-react-example\/blob\/master\/webpack.config.js\n> \n> >\n> \n> > Can we make a loader for ClojureScript?\n> \n> >\n> \n> > Or how about the possibility? I guess Closure Compiler will get in the why. \n> > But is it possible if I don't use dead code elimination from Closure \n> > Compiler? I know many people need it but seriously no other solutions? And \n> > how much does ClojureScript depend on Closure Library?\n> \n> \n> \n> I'm from the JS side as well, so I'm glad to see this question!\u00a0 Are you \n> imagining something like the following?\u00a0 We should probably start by \n> imagining why someone would want to require cljs this way and if it would \n> even make sense to:\n> \n> \n> \n> ```\n> \n> require('cljs!.\/src-cljs') \/\/ return all goog.provided namespaces?\n> \n> require('cljs!.\/src-cljs\/foo\/core.cljs') \/\/ return a single goog.provide \n> namespace?\n> \n> ```\n> \n> \n> \n> Either way I think it would need Closure Compiler to return a single asset \n> for each require statement, if I understand webpack correctly.\n> \n> \n> \n> It's worth mentioning that the recent \"node-jre\" package allows users to \n> install\/use the full cljs JVM compiler in its fully glory through npm without \n> any external dependencies, which I've tested here: \n> https:\/\/github.com\/cljs\/tool\n> \n> \n> \n> I think it's possible\u2014just unsure of webpack use-cases.\u00a0 Thoughts?\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to a topic in the Google \n> Groups \"ClojureScript\" group.\n> \n> To unsubscribe from this topic, visit \n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/HNuYCfPRtQw\/unsubscribe.\n> \n> To unsubscribe from this group and all its topics, send an email to \n> clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? Thomas Heller Fri, 12 May 2017 01:56:34 -0700"},
{"body":"It would be nice if we can require ClojureScript in JavaScript, and let\nWebpack to handle so many issues. \nFor Webpack use cases, I tried to sell ClojureScript to other front-end\ndevelopers around me, but saw some problems:\n\n* IMPORTANT: hard to install JVM. For JavaScript projects, installing\nNode.js(with npm inside) would be okay. It's very hard for JavaScript\ndevelopers to pick up JVM and Boot(or Leiningen).\n* IMPORTANT: long time caching and code splitting. We use these features in\nproduction for years. But I don't see a good solution in ClojureScript.\n* Async code loading. For large projects some code can be loaded when a\nrouter is activated. No good solution found in ClojureScript.\n* Assets bundling. Now we rely on Webpack to do that, result in using 2\ntools.\n\nNot sure if they can be solved if we have a ClojureScript running on\nWebpack. But there are many compiled-to-js languages support those features\nin by supporting Webpack already. That's the purpose behind the post.\n\nDidn't try `node-jre`. I'm guessing we still need to debug JVM stuffs since\nit's running JVM?\n\nOn Fri, May 12, 2017 at 6:11 AM Shaun LeBron <shaunewilli...@gmail.com>\nwrote:\n\n> On Wednesday, May 10, 2017 at 11:45:02 PM UTC-5, Jiyin Yiyong wrote:\n> > Already an old boring topic... I'm from JavaScript side and so many\n> people are building apps with Webpack. And so many of alt-js languages got\n> Webpack loaders:\n> >\n> > BuckleScript https:\/\/github.com\/rrdelaney\/bs-loader\n> > PureScript https:\/\/github.com\/ethul\/purs-loader\n> > Elm https:\/\/github.com\/elm-community\/elm-webpack-loader\n> > Fable https:\/\/github.com\/fable-compiler\/Fable\n> >\n> > Exception:\n> >\n> > No Webpack for ReasonML\n> https:\/\/github.com\/chenglou\/reason-react-example\/blob\/master\/webpack.config.js\n> >\n> > Can we make a loader for ClojureScript?\n> >\n> > Or how about the possibility? I guess Closure Compiler will get in the\n> why. But is it possible if I don't use dead code elimination from Closure\n> Compiler? I know many people need it but seriously no other solutions? And\n> how much does ClojureScript depend on Closure Library?\n>\n> I'm from the JS side as well, so I'm glad to see this question!  Are you\n> imagining something like the following?  We should probably start by\n> imagining why someone would want to require cljs this way and if it would\n> even make sense to:\n>\n> ```\n> require('cljs!.\/src-cljs') \/\/ return all goog.provided namespaces?\n> require('cljs!.\/src-cljs\/foo\/core.cljs') \/\/ return a single goog.provide\n> namespace?\n> ```\n>\n> Either way I think it would need Closure Compiler to return a single asset\n> for each require statement, if I understand webpack correctly.\n>\n> It's worth mentioning that the recent \"node-jre\" package allows users to\n> install\/use the full cljs JVM compiler in its fully glory through npm\n> without any external dependencies, which I've tested here:\n> https:\/\/github.com\/cljs\/tool\n>\n> I think it's possible\u2014just unsure of webpack use-cases.  Thoughts?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/HNuYCfPRtQw\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? jiyinyiyong Thu, 11 May 2017 20:58:45 -0700"},
{"body":"On Wednesday, May 10, 2017 at 11:45:02 PM UTC-5, Jiyin Yiyong wrote:\n> Already an old boring topic... I'm from JavaScript side and so many people \n> are building apps with Webpack. And so many of alt-js languages got Webpack \n> loaders:\n> \n> BuckleScript https:\/\/github.com\/rrdelaney\/bs-loader\n> PureScript https:\/\/github.com\/ethul\/purs-loader\n> Elm https:\/\/github.com\/elm-community\/elm-webpack-loader\n> Fable https:\/\/github.com\/fable-compiler\/Fable\n> \n> Exception:\n> \n> No Webpack for ReasonML \n> https:\/\/github.com\/chenglou\/reason-react-example\/blob\/master\/webpack.config.js\n> \n> Can we make a loader for ClojureScript? \n> \n> Or how about the possibility? I guess Closure Compiler will get in the why. \n> But is it possible if I don't use dead code elimination from Closure \n> Compiler? I know many people need it but seriously no other solutions? And \n> how much does ClojureScript depend on Closure Library? \nI'm from the JS side as well, so I'm glad to see this question!  Are you \nimagining something like the following?  We should probably start by imagining \nwhy someone would want to require cljs this way and if it would even make sense \nto:\n\n```\nrequire('cljs!.\/src-cljs') \/\/ return all goog.provided namespaces?\nrequire('cljs!.\/src-cljs\/foo\/core.cljs') \/\/ return a single goog.provide \nnamespace?\n```\n\nEither way I think it would need Closure Compiler to return a single asset for \neach require statement, if I understand webpack correctly.\n\nIt's worth mentioning that the recent \"node-jre\" package allows users to \ninstall\/use the full cljs JVM compiler in its fully glory through npm without \nany external dependencies, which I've tested here: https:\/\/github.com\/cljs\/tool\n\nI think it's possible\u2014just unsure of webpack use-cases.  Thoughts?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? Shaun LeBron Thu, 11 May 2017 15:12:07 -0700"},
{"body":"ReasonML can be compiled by bucklescript loader AFAIK. However I think that \nwill make it compile slower. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Any chance we can fit ClojureScript into Webpack ecosystem? Jonas Kello Thu, 11 May 2017 11:16:04 -0700"},
{"body":"On Thursday, May 11, 2017 at 6:08:30 PM UTC+8, Thomas Heller wrote:\n> IMHO the webpack ecosystem and CLJS can live happily side by side, why is it \n> important that they know about each other? Good JS interop ensures that both \n> sides can interact well.\n> \n> What would you expect from a loader that you'd be willing to give up the \n> Closure Compiler?\n> \n> \n> On Thursday, May 11, 2017 at 6:45:02 AM UTC+2, Jiyin Yiyong wrote:\n> > Already an old boring topic... I'm from JavaScript side and so many people \n> > are building apps with Webpack. And so many of alt-js languages got Webpack \n> > loaders:\n> > \n> > BuckleScript https:\/\/github.com\/rrdelaney\/bs-loader\n> > PureScript https:\/\/github.com\/ethul\/purs-loader\n> > Elm https:\/\/github.com\/elm-community\/elm-webpack-loader\n> > Fable https:\/\/github.com\/fable-compiler\/Fable\n> > \n> > Exception:\n> > \n> > No Webpack for ReasonML \n> > https:\/\/github.com\/chenglou\/reason-react-example\/blob\/master\/webpack.config.js\n> > \n> > Can we make a loader for ClojureScript? \n> > \n> > Or how about the possibility? I guess Closure Compiler will get in the why. \n> > But is it possible if I don't use dead code elimination from Closure \n> > Compiler? I know many people need it but seriously no other solutions? And \n> > how much does ClojureScript depend on Closure Library? \nUnhappy. Bundling ClojureScript projects is a pain since we have to use both \nJVM(or Lumo in near future) and Webpack(for CSS and images). And we have to use \n2 package managers, npm and Clojars. It might not be a big deal for a Clojure \ndeveloper who accidentally write web pages, but it's heavy work for front-end \ndevelopers to use 2 sets of toolchains for our projects.\n\nNowadays Webpack contains lots of features for real world projects, like long \ntime caching, async loading, assets bundling, with all kinds of loaders, that \nare not supported(or polished) by Closure Compiler. And that also means many \ncompanies who use Webpack just need them.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? Jiyin Yiyong Thu, 11 May 2017 06:11:04 -0700"},
{"body":"IMHO the webpack ecosystem and CLJS can live happily side by side, why is it \nimportant that they know about each other? Good JS interop ensures that both \nsides can interact well. \nWhat would you expect from a loader that you'd be willing to give up the \nClosure Compiler?\n\n\nOn Thursday, May 11, 2017 at 6:45:02 AM UTC+2, Jiyin Yiyong wrote:\n> Already an old boring topic... I'm from JavaScript side and so many people \n> are building apps with Webpack. And so many of alt-js languages got Webpack \n> loaders:\n> \n> BuckleScript https:\/\/github.com\/rrdelaney\/bs-loader\n> PureScript https:\/\/github.com\/ethul\/purs-loader\n> Elm https:\/\/github.com\/elm-community\/elm-webpack-loader\n> Fable https:\/\/github.com\/fable-compiler\/Fable\n> \n> Exception:\n> \n> No Webpack for ReasonML \n> https:\/\/github.com\/chenglou\/reason-react-example\/blob\/master\/webpack.config.js\n> \n> Can we make a loader for ClojureScript? \n> \n> Or how about the possibility? I guess Closure Compiler will get in the why. \n> But is it possible if I don't use dead code elimination from Closure \n> Compiler? I know many people need it but seriously no other solutions? And \n> how much does ClojureScript depend on Closure Library?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Any chance we can fit ClojureScript into Webpack ecosystem? Thomas Heller Thu, 11 May 2017 03:08:43 -0700"},
{"body":"Already an old boring topic... I'm from JavaScript side and so many people are \nbuilding apps with Webpack. And so many of alt-js languages got Webpack loaders: \nBuckleScript https:\/\/github.com\/rrdelaney\/bs-loader\nPureScript https:\/\/github.com\/ethul\/purs-loader\nElm https:\/\/github.com\/elm-community\/elm-webpack-loader\nFable https:\/\/github.com\/fable-compiler\/Fable\n\nException:\n\nNo Webpack for ReasonML \nhttps:\/\/github.com\/chenglou\/reason-react-example\/blob\/master\/webpack.config.js\n\nCan we make a loader for ClojureScript? \n\nOr how about the possibility? I guess Closure Compiler will get in the why. But \nis it possible if I don't use dead code elimination from Closure Compiler? I \nknow many people need it but seriously no other solutions? And how much does \nClojureScript depend on Closure Library?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Any chance we can fit ClojureScript into Webpack ecosystem? Jiyin Yiyong Wed, 10 May 2017 21:45:40 -0700"},
{"body":"It turned out to be a load timing issue, which I only had to read the \ndocumentation more carefully. \nSorry for the noise!\n\nIkuru\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Browser console vs cljs compiler discrepancy? Ikuru Kanuma Mon, 08 May 2017 18:18:32 -0700"},
{"body":"Background: I want to deploy a single file JavaScript File that is sort of an \nextension of an existing proprietary website (that allows customizations via \nuser uploaded JavaScript). It would be nice to be able to do it in cljs. \nProblem: The site provides JavaScript API's, say that is some.record.getId(). \nThis successfully returns a number when I try it on the browser console, but \nwhen I try to do the following js inter-op, the result is null.\n\nAttempt1:\n```\n(.getId (.-record js\/some))\n```\n\nI also tried this and it does returns a function:\n\nAttempt2\n```\n(.-getId (.-record js\/some))\n=> function (){if(!Qp(Up,Tp,Wp)||!Yw)return null;var a=Number(Yw.id);  \nif(0<a)return a;throw Error();}\n```\n\nBut then calling that returned function returns null as well.\n\nLooking what Attempt1 compiles into (simple optimization), it is doing this:\nsome.record.getId.call(null). Typing this in the browser console returned a \nnumber successfully! ...at which point I got completely confused :(\n\nAppreciate any tips\/pointers & please let me know if any additional info is \nnecessary. Thanks!\n\nIkuru\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Browser console vs cljs compiler discrepancy? Ikuru Kanuma Mon, 08 May 2017 17:12:07 -0700"},
{"body":"Ok, thanks! \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Test existing Javascript with Clojure spec Jos\u00e9 Manuel Aguirre Sat, 06 May 2017 14:19:25 -0700"},
{"body":"On Friday, 5 May 2017 01:12:10 UTC+3, Jos\u00e9 Manuel Aguirre  wrote:\n> I would like to learn Clojurescript and I wonder if there is any way to do it \n> writing tests, using the spec, that targets functions or react components \n> already implemented in javascript?\n> \n> That way I can accomplish two goals at the same time.\n> \n> Thanks \nAs a starting point, you might want to take a look at: \nhttps:\/\/github.com\/viebel\/template-test-js-with-clj - A template for testing \njavascript code with clojurescript: test.check, unit tests, figwheel etc...\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Test existing Javascript with Clojure spec Yehonathan Sharvit Fri, 05 May 2017 06:51:08 -0700"},
{"body":"I would like to learn Clojurescript and I wonder if there is any way to do it \nwriting tests, using the spec, that targets functions or react components \nalready implemented in javascript? \nThat way I can accomplish two goals at the same time.\n\nThanks\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Test existing Javascript with Clojure spec Jos\u00e9 Manuel Aguirre Thu, 04 May 2017 15:12:37 -0700"},
{"body":"On Tuesday, November 12, 2013 at 12:37:09 PM UTC-8, David Nolen wrote:\n> In order to simplify how source maps are resolved I'm considering changing \n> how :output-dir and :source-map work - they will always be relative to the \n> location of the :output-to file. This will eliminate a number of issues and \n> it does not seem particularly problematic to me - :output-dir is just the \n> results of incremental compilation, and :source-map really should live where \n> the :output-to file lives.\n> \n> \n> \n> Is anyone using the results of incremental compilation in :output-dir in some \n> way that I haven't considered?\n> \n> \n> David \nI've started using cljs on Node and was very surprised to see that \"file:\" in a \nsourcemap is a full path. It seems like this thread went off-topic but yes \nplease emit relative paths.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Making :output-dir & :source-map relative to :output-to Matthew Bishop Mon, 01 May 2017 15:39:07 -0700"},
{"body":"I just started an Open Collective campaign to support Lumo's growth long term. \nI've written a post about the reasons that led me to start this initiative, the \nlink is below.\n\nhttps:\/\/anmonteiro.com\/2017\/05\/on-lumos-growth-and-sustainability\/\n\nPlease consider backing or sponsoring the development of Lumo if that's \nsomething you use or intend to use one day. Even if you don't, please share!\n\nThanks,\nAntonio Monteiro\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] On Lumo's Growth and Sustainability Ant\u00f3nio Monteiro Mon, 01 May 2017 13:11:15 -0700"},
{"body":"Ok, I\u2019ll have to dig into your examples and code and see which approach\nI\u2019ll try. \nOn Wed, Apr 26, 2017 at 1:40 AM Jonathan Fischer <jonat...@mohiji.org>\nwrote:\n\n> It kind of comes down to how you're managing the state in your project.\n> I'm using re-frame at the moment, so I have kind of top-level key in my\n> project state to tell me what the user's looking at. Then I register my\n> routes with Secretary and each route just kicks off an event that'll\n> eventually modify that top-level key.\n>\n> So more specifically, my project's state is in one big map, and I have a\n> key `:app\/view` that has a view id I can use to figure out what to render,\n> along with any additional info it might need.\n>\n> (def default-db\n>   {:app\/view {:view\/id :view\/sign-in}})\n>\n> My routing code looks like this (I only start listening to navigation\n> events after a user has signed in, and stop again when she signs out):\n>\n> (ns my-app.routing\n>   (:require-macros [secretary.core :refer [defroute]])\n>   (:require [re-frame.core :refer [console dispatch]]\n>             [goog.events :as events]\n>             [secretary.core :as secretary])\n>   (:import [goog.history Html5History]))\n>\n> (defonce history\n>   (let [h (Html5History.)]\n>     (events\/listen h\n>                    goog.history.EventType.NAVIGATE\n>                    (fn [e]\n>                      (when (.-isNavigation e)\n>                        (secretary\/dispatch! (.-token e)))))\n>     h))\n>\n> (defn set-token! [token]\n>   (.setToken history token))\n>\n> (defn get-token\n>   \"Returns the current history token (e.g. the stuff after the # in the\n> URL)\"\n>   []\n>   (.getToken history))\n>\n> (defn listen!\n>   \"Starts listening for and dispatching history\/navigation events.\"\n>   []\n>   (.setEnabled history true))\n>\n> (defn stop!\n>   \"Stops listening for navigation events.\"\n>   []\n>   (.setEnabled history false))\n>\n> (defroute \"\/data-logging\" []\n>   (dispatch [:events\/navigate {:view\/id :view\/data-logging}]))\n>\n> (defroute \"\/info\" []\n>   (dispatch [:events\/navigate {:view\/id :view\/info}]))\n>\n> (defroute #\"\/page\/(\\d+)\"\n>   [page-id]\n>   (dispatch [:events\/navigate {:view\/id :view\/page :page\/id (js\/parseInt\n> page-id)}]))\n>\n> (defroute \"*\"\n>   ;; Catch-all history token router to show a 404 page, etc.\n>   {:as params}\n>   (dispatch [:events\/navigate {:view\/id :view\/unknown}]))\n>\n> Again, using re-frame, so I dispatch an event and handle it elsewhere, but\n> that navigate event just ends up modifying the :app\/view key, something\n> like:\n>\n> (swap! app-state #(assoc % :app\/view new-value))\n>\n> Where app-state is a Reagent atom and updating it triggers a re-render.\n>\n> On Saturday, April 22, 2017 at 10:13:33 AM UTC-7, Jonathon McKitrick wrote:\n> > I have an app that's been working wonderfully for a few years now. I\n> want to improve it by adding links. If you see a person's name, I want to\n> be able to click on that name and the app will jump to the 'user' page\n> (simple enough) and then move the browser view to that particular item. In\n> static HTML we'd obviously do that with a # and an anchor. But with\n> Reagent, I'm not quite sure.\n> >\n> > I'm exploring Secretary right now, but what's the missing piece that\n> will get me from a link to a Reagent-rendered page and then jumping to that\n> row or even opening a modal with that item?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/7S4axBtK8Pg\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \nJonathon McKitrick\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Reagent\/routing\/SPA question jmckitrick Sun, 30 Apr 2017 14:04:22 -0700"},
{"body":"Thank you, that's it. Thanks a lot! \n\nCiao \n...Jochen\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Automatic map clj to js conversion Jochen Thu, 27 Apr 2017 10:58:33 -0700"},
{"body":"Here's the Reagent-React adapter that does it:\n\nhttps:\/\/github.com\/reagent-project\/reagent\/blob\/93043e86c49c62bc04292b735f5bf524aaebb6ba\/src\/reagent\/impl\/component.cljs#L256-L267 \nOn Thu, Apr 27, 2017 at 7:43 AM, Thomas Heller <th.hel...@gmail.com> wrote:\n\n> That is done by reagent when it interprets the vector created by\n> datetime-picker.\n>\n> Not a CLJS feature.\n>\n> On Thursday, April 27, 2017 at 10:04:35 AM UTC+2, Jochen wrote:\n> > Hi\u2026\n> >\n> > for a few days I am evaluating clojurescript\/reagent et.Al.. I just got\n> integrated all the bits and pieces like reagent, cljsjs\/react-bootstrap and\n> cljsjs\/react-bootstrap-datetimepicker.\n> >\n> > Now I got a working configured datetimepicker on the screen with the\n> following code:\n> >\n> > (def datetime (reagent\/adapt-react-class js\/\n> ReactBootstrapDatetimepicker))\n> >\n> > (defn datetime-picker []\n> >     [datetime {:input-format \"MMM DD, YYYY HH:mm:ss\"\n> >                       :date-time      (js\/Date.)}]\n> >\n> > What I am puzzled about is where the cljs config map conversion to\n> javascript happens.\n> > I read about #js, clj->js and the like everywhere, but here the map\n> seems to be automatically converted (including kebab to camel case\n> conversion).\n> >\n> > Is this a newer clojurescript feature I did not read about yet?\n> >\n> > Ciao\n> >\n> > \u2026Jochen\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Automatic map clj to js conversion Dustin Getz Thu, 27 Apr 2017 05:34:46 -0700"},
{"body":"That is done by reagent when it interprets the vector created by \ndatetime-picker. \nNot a CLJS feature.\n\nOn Thursday, April 27, 2017 at 10:04:35 AM UTC+2, Jochen wrote:\n> Hi\u2026\n> \n> for a few days I am evaluating clojurescript\/reagent et.Al.. I just got \n> integrated all the bits and pieces like reagent, cljsjs\/react-bootstrap and \n> cljsjs\/react-bootstrap-datetimepicker.\n> \n> Now I got a working configured datetimepicker on the screen with the \n> following code:\n> \n> (def datetime (reagent\/adapt-react-class js\/ReactBootstrapDatetimepicker))\n> \n> (defn datetime-picker []\n>     [datetime {:input-format \"MMM DD, YYYY HH:mm:ss\"\n>                       :date-time      (js\/Date.)}]\n> \n> What I am puzzled about is where the cljs config map conversion to javascript \n> happens.\n> I read about #js, clj->js and the like everywhere, but here the map seems to \n> be automatically converted (including kebab to camel case conversion).\n> \n> Is this a newer clojurescript feature I did not read about yet?\n> \n> Ciao\n> \n> \u2026Jochen\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Automatic map clj to js conversion Thomas Heller Thu, 27 Apr 2017 04:44:51 -0700"},
{"body":"Hi\u2026\n\nfor a few days I am evaluating clojurescript\/reagent et.Al.. I just got \nintegrated all the bits and pieces like reagent, cljsjs\/react-bootstrap and \ncljsjs\/react-bootstrap-datetimepicker. \nNow I got a working configured datetimepicker on the screen with the following \ncode:\n\n(def datetime (reagent\/adapt-react-class js\/ReactBootstrapDatetimepicker))\n\n(defn datetime-picker []\n    [datetime {:input-format \"MMM DD, YYYY HH:mm:ss\"\n                      :date-time      (js\/Date.)}]\n\nWhat I am puzzled about is where the cljs config map conversion to javascript \nhappens.\nI read about #js, clj->js and the like everywhere, but here the map seems to be \nautomatically converted (including kebab to camel case conversion).\n\nIs this a newer clojurescript feature I did not read about yet?\n\nCiao\n\n\u2026Jochen\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Automatic map clj to js conversion Jochen Thu, 27 Apr 2017 01:05:30 -0700"},
{"body":"There are a few other client side routing libraries that support bidirectional \nlinking. One of them is Bidi (https:\/\/github.com\/juxt\/bidi) on their README \nthere's a list of possible alternatives. \nIn my app I'm using a combination of Secretary with some parts of Accountant \n(https:\/\/github.com\/venantius\/accountant), in order to navigate between routes \nwithout reloading the page. There's a blog post here that may help: \nhttps:\/\/pez.github.io\/2016\/03\/01\/Reagent-clientside-routing-with-Bidi-and-Accountant.html\n\nFor me, to be able to generate the link from a route, I used Secretary's \"named \nroutes\" feature\n\nSo, in order to get a link I do something like:\n\n#(site\/detail-entry-route {:detailEntryId (.toString (:_id %))})\n\nwhich returns the link to some detail url.\n\nAnd the Secretary part looks like:\n\n(secretary\/defroute detail-entry-route \"\/detail-entry\/:detailEntryId\" \n[timerollEntryId]\n  (session\/put! :current-page :detail-page)\n  (session\/put! :selected-item-id detailEntryId))\n\nIn Secretary the feature is called \"named routes\": \nhttps:\/\/github.com\/gf3\/secretary#named-routes\n\nHope that helps,\nTorsten.\n\n\nAm Samstag, 22. April 2017 19:13:33 UTC+2 schrieb Jonathon McKitrick:\n> I have an app that's been working wonderfully for a few years now. I want to \n> improve it by adding links. If you see a person's name, I want to be able to \n> click on that name and the app will jump to the 'user' page (simple enough) \n> and then move the browser view to that particular item. In static HTML we'd \n> obviously do that with a # and an anchor. But with Reagent, I'm not quite \n> sure.\n> \n> I'm exploring Secretary right now, but what's the missing piece that will get \n> me from a link to a Reagent-rendered page and then jumping to that row or \n> even opening a modal with that item?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Reagent\/routing\/SPA question Torsten Uhlmann Tue, 25 Apr 2017 00:33:07 -0700"},
{"body":"I have an app that's been working wonderfully for a few years now. I want to \nimprove it by adding links. If you see a person's name, I want to be able to \nclick on that name and the app will jump to the 'user' page (simple enough) and \nthen move the browser view to that particular item. In static HTML we'd \nobviously do that with a # and an anchor. But with Reagent, I'm not quite sure. \nI'm exploring Secretary right now, but what's the missing piece that will get \nme from a link to a Reagent-rendered page and then jumping to that row or even \nopening a modal with that item?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Reagent\/routing\/SPA question Jonathon McKitrick Sat, 22 Apr 2017 10:14:40 -0700"},
{"body":"I'm walking through this page \nhttps:\/\/clojurescript.org\/guides\/javascript-modules \nand on the part where you reload the namespace from JS I get this:\n\ncljs.user=> (require '[js.hello :as hello] :reload)\nTypeError: Identifier 'sayHello$$module$src$js$hello' has already been declared\n    at \n\/Users\/mbishop\/Sides\/clojure\/cljs\/hello-es6\/.cljs_node_repl\/src\/js\/hello.js:1:1\n    at ContextifyScript.Script.runInThisContext (vm.js:25:33)\n    at Object.runInThisContext (vm.js:97:38)\n    at nodeGlobalRequire (repl:87:6)\n    at global.CLOSURE_IMPORT_SCRIPT (repl:75:3)\n    at Object.goog.require (repl:21:8)\n    at repl:1:6\n    at ContextifyScript.Script.runInThisContext (vm.js:25:33)\n    at Object.runInThisContext (vm.js:97:38)\n    at Domain.<anonymous> ([stdin]:50:34)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] JavaScript Modules walkthrough fails at the first :reload step Matthew Bishop Fri, 21 Apr 2017 16:27:58 -0700"},
{"body":"On Friday, April 21, 2017 at 9:56:36 AM UTC-4, g vim wrote:\n> With Facebook is about to launch React Fiber and Relay Modern is \n> Clojurescript development likely to target them and, if so, what are the \n> implications for Om Next given that the new React\/Relay is based on GraphQL?\n> \n> gvim \nReact Fiber shouldn't change much for users. However, CLJS wrappers (Reagent, \nOm, etc.) won't need to provide their own requestAnimationFrame scheduling.\n\nRelay Classic was a GraphQL client and a (very JS-centric) React wrapper. The \nGraphQL part has been extracted out in Relay Modern, making it far more \namenable to CLJS. Several teams I know of (including mine) are looking into \ntighter CLJS integration.\n\nAs OmNext doesn't use GraphQL or Relay, these developments shouldn't affect it \nmuch.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: React Fiber, Relay Modern and Clojurescript Dom Kiva-Meyer Fri, 21 Apr 2017 15:13:06 -0700"},
{"body":"The following bits of Clojure infrastructure are now https-only and\nredirect all traffic from http to https: \nhttps:\/\/build.clojure.org - Jenkins\nhttps:\/\/dev.clojure.org\/jira - JIRA\nhttps:\/\/dev.clojure.org - Confluence\n\nLet me know if you see anything amiss.\n\nAlex\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Clojure infrastructure SSL Alex Miller Fri, 21 Apr 2017 14:08:32 -0700"},
{"body":"I'm trying to use the new feature for using node packages on cljs on Windows 10. \nI'm doing a test using the mies template and cljs version 1.9.521\n\nmy project.clj file (using cljs source from master):\n\n```clojure\n(defproject npmtest \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write this!\"\n  :url \"http:\/\/example.com\/FIXME\";\n  ;:dependencies [[org.clojure\/clojure \"1.8.0\"]\n                 ;[org.clojure\/clojurescript \"1.9.521\"]]\n  :dependencies [[org.clojure\/clojure \"1.8.0\"]\n                 [org.clojure\/data.json \"0.2.6\"]\n                 [org.clojure\/tools.reader \"1.0.0-beta3\"]\n                 [org.clojure\/test.check \"0.9.0\" :scope \"test\"]\n                 [com.cognitect\/transit-clj \"0.8.285\"]\n                 [org.clojure\/google-closure-library \"0.0-20160609-f42b4a24\"]\n                 [com.google.javascript\/closure-compiler-unshaded \"v20170409\"]\n                 [org.mozilla\/rhino \"1.7R5\"]]\n  :jvm-opts ^:replace [\"-Xmx1g\" \"-server\"]\n  :plugins [[lein-npm \"0.6.1\"]]\n  :npm {:dependencies [[source-map-support \"0.4.0\"]\n                       [left-pad \"1.1.3\"]]}\n  :source-paths [\"src\" \"target\/classes\" \"clojurescript\/src\/main\/cljs\" \n\"clojurescript\/src\/main\/clojure\" \"clojurescript\/target\/classes\"]\n  :clean-targets [\"out\" \"release\"]\n  :target-path \"target\")\n```\n\nThis is how I modified my build.clj file:\n\n```clojure\n(require '[cljs.build.api :as b])\n\n(println \"Building ...\")\n\n(let [start (System\/nanoTime)]\n  (b\/build \"src\"\n    {:main 'npmtest.core\n     :target :nodejs\n     :npm-deps {:left-pad \"1.1.3\"}\n     :output-to \"out\/npmtest.js\"\n     :output-dir \"out\"\n     :verbose true})\n  (println \"... done. Elapsed\" (\/ (- (System\/nanoTime) start) 1e9) \"seconds\"))\n```\n\nThis is my core.cljs file:\n\n```clojure\n(ns npmtest.core\n  (:require [cljs.nodejs :as nodejs] left-pad))\n\n(nodejs\/enable-util-print!)\n\n(println \"Hello world!\")\n```\n\nThis is the error calling scripts\\build.bat that I've tried to fix (fix below \nthe error):\n\n```\nBuilding ...\nInstalling Node.js dependencies\nException in thread \"main\" java.io.IOException: Cannot run program \"npm\": \nCreateProcess error=2, Impossibile trovare il file specificato, compiling:(C\n\\DevLab\\projects\\npmtest\\scripts\\build.clj:5:1)\n        at clojure.lang.Compiler.load(Compiler.java:7391)\n        at clojure.lang.Compiler.loadFile(Compiler.java:7317)\n        at clojure.main$load_script.invokeStatic(main.clj:275)\n        at clojure.main$script_opt.invokeStatic(main.clj:335)\n        at clojure.main$script_opt.invoke(main.clj:330)\n        at clojure.main$main.invokeStatic(main.clj:421)\n        at clojure.main$main.doInvoke(main.clj:384)\n        at clojure.lang.RestFn.invoke(RestFn.java:408)\n        at clojure.lang.Var.invoke(Var.java:379)\n        at clojure.lang.AFn.applyToHelper(AFn.java:154)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.main.main(main.java:37)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at \nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at \nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:498)\n        at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93)\n        at clojure.lang.Reflector.invokeStaticMethod(Reflector.java:207)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at \nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at \nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:498)\n        at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93)\n        at clojure.lang.Reflector.invokeStaticMethod(Reflector.java:207)\n        at user$eval5.invokeStatic(form-init3240817758129116134.clj:1)\n        at user$eval5.invoke(form-init3240817758129116134.clj:1)\n        at clojure.lang.Compiler.eval(Compiler.java:6927)\n        at clojure.lang.Compiler.eval(Compiler.java:6917)\n        at clojure.lang.Compiler.load(Compiler.java:7379)\n        at clojure.lang.Compiler.loadFile(Compiler.java:7317)\n        at clojure.main$load_script.invokeStatic(main.clj:275)\n        at clojure.main$init_opt.invokeStatic(main.clj:277)\n        at clojure.main$init_opt.invoke(main.clj:277)\n        at clojure.main$initialize.invokeStatic(main.clj:308)\n        at clojure.main$null_opt.invokeStatic(main.clj:342)\n        at clojure.main$null_opt.invoke(main.clj:339)\n        at clojure.main$main.invokeStatic(main.clj:421)\n        at clojure.main$main.doInvoke(main.clj:384)\n        at clojure.lang.RestFn.invoke(RestFn.java:421)\n        at clojure.lang.Var.invoke(Var.java:383)\n        at clojure.lang.AFn.applyToHelper(AFn.java:156)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.main.main(main.java:37)\nCaused by: java.io.IOException: Cannot run program \"npm\": CreateProcess \nerror=2, Impossibile trovare il file specificato\n        at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)\n        at \ncljs.closure$maybe_install_node_deps_BANG_.invokeStatic(closure.clj:2034)\n        at cljs.closure$maybe_install_node_deps_BANG_.invoke(closure.clj:2027)\n        at cljs.closure$build.invokeStatic(closure.clj:2226)\n        at cljs.closure$build.invoke(closure.clj:2213)\n        at cljs.build.api$build.invokeStatic(api.clj:202)\n        at cljs.build.api$build.invoke(api.clj:189)\n        at cljs.build.api$build.invokeStatic(api.clj:192)\n        at cljs.build.api$build.invoke(api.clj:189)\n        at user$eval6481.invokeStatic(build.clj:6)\n        at user$eval6481.invoke(build.clj:5)\n        at clojure.lang.Compiler.eval(Compiler.java:6927)\n        at clojure.lang.Compiler.load(Compiler.java:7379)\n        ... 42 more\nCaused by: java.io.IOException: CreateProcess error=2, Impossibile trovare il \nfile specificato\n        at java.lang.ProcessImpl.create(Native Method)\n        at java.lang.ProcessImpl.<init>(ProcessImpl.java:386)\n        at java.lang.ProcessImpl.start(ProcessImpl.java:137)\n        at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)\n        ... 54 more\n```\n\n\"Impossibile trovare il file specificato\" is italian, means file not found \nprobably because on windows \"npm\" is \"npm.cmd\".\n\nOn cljs.clojure \n(https:\/\/github.com\/clojure\/clojurescript\/blob\/master\/src\/main\/clojure\/cljs\/closure.clj)\n line 2035, I changed \"npm\" to \"npm.cmd\".\n\nAnd I ran into a second problem, this is the error (seems like a path resolving \nproblem?) :\n\n```\nBuilding ...\nInstalling Node.js dependencies\nevents.js:160\n      throw er; \/\/ Unhandled 'error' event\n      ^\n\nError: Cannot find module 'C:\\DevLab\\projects\\npmtest\\DevLabprojects\npmtestoutcljs$node_modules.js' from 'C:\\DevLab\\projects\\npmtest'\n    at C:\\DevLab\\projects\\npmtest\\node_modules\\resolve\\lib\\async.js:61:35\n    at load (C:\\DevLab\\projects\\npmtest\\node_modules\\resolve\\lib\\async.js:80:43)\n    at onex \n(C:\\DevLab\\projects\\npmtest\\node_modules\\resolve\\lib\\async.js:105:17)\n    at C:\\DevLab\\projects\\npmtest\\node_modules\\resolve\\lib\\async.js:26:73\n    at FSReqWrap.oncomplete (fs.js:123:15)\n\nAnalyzing \nfile:\/C:\/DevLab\/projects\/npmtest\/clojurescript\/src\/main\/cljs\/cljs\/core.cljs\nCompiling src\\npmtest\\core.cljs\nAnalyzing \nfile:\/C:\/DevLab\/projects\/npmtest\/clojurescript\/src\/main\/cljs\/clojure\/browser\/repl.cljs\nAnalyzing \nfile:\/C:\/DevLab\/projects\/npmtest\/clojurescript\/src\/main\/cljs\/clojure\/browser\/net.cljs\nAnalyzing \nfile:\/C:\/DevLab\/projects\/npmtest\/clojurescript\/src\/main\/cljs\/clojure\/browser\/event.cljs\nAnalyzing \nfile:\/C:\/DevLab\/projects\/npmtest\/clojurescript\/src\/main\/cljs\/cljs\/repl.cljs\nAnalyzing \nfile:\/C:\/DevLab\/projects\/npmtest\/clojurescript\/src\/main\/cljs\/cljs\/spec.cljs\nAnalyzing \nfile:\/C:\/DevLab\/projects\/npmtest\/clojurescript\/src\/main\/cljs\/clojure\/walk.cljs\nAnalyzing \nfile:\/C:\/DevLab\/projects\/npmtest\/clojurescript\/src\/main\/cljs\/cljs\/spec\/impl\/gen.cljs\nAnalyzing \nfile:\/C:\/DevLab\/projects\/npmtest\/clojurescript\/src\/main\/cljs\/clojure\/string.cljs\nException in thread \"main\" clojure.lang.ExceptionInfo: failed compiling \nfile:src\\npmtest\\core.cljs {:file #object[java.io.File 0x1a7f2d34 \"src\\\\npmtest\n\\\\core.cljs\"]}, compiling:(C:\\DevLab\\projects\\npmtest\\scripts\\build.clj:5:1)\n        at clojure.lang.Compiler.load(Compiler.java:7391)\n        at clojure.lang.Compiler.loadFile(Compiler.java:7317)\n        at clojure.main$load_script.invokeStatic(main.clj:275)\n        at clojure.main$script_opt.invokeStatic(main.clj:335)\n        at clojure.main$script_opt.invoke(main.clj:330)\n        at clojure.main$main.invokeStatic(main.clj:421)\n        at clojure.main$main.doInvoke(main.clj:384)\n        at clojure.lang.RestFn.invoke(RestFn.java:408)\n        at clojure.lang.Var.invoke(Var.java:379)\n        at clojure.lang.AFn.applyToHelper(AFn.java:154)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.main.main(main.java:37)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at \nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at \nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:498)\n        at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93)\n        at clojure.lang.Reflector.invokeStaticMethod(Reflector.java:207)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at \nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at \nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:498)\n        at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93)\n        at clojure.lang.Reflector.invokeStaticMethod(Reflector.java:207)\n        at user$eval5.invokeStatic(form-init7915992400020498856.clj:1)\n        at user$eval5.invoke(form-init7915992400020498856.clj:1)\n        at clojure.lang.Compiler.eval(Compiler.java:6927)\n        at clojure.lang.Compiler.eval(Compiler.java:6917)\n        at clojure.lang.Compiler.load(Compiler.java:7379)\n        at clojure.lang.Compiler.loadFile(Compiler.java:7317)\n        at clojure.main$load_script.invokeStatic(main.clj:275)\n        at clojure.main$init_opt.invokeStatic(main.clj:277)\n        at clojure.main$init_opt.invoke(main.clj:277)\n        at clojure.main$initialize.invokeStatic(main.clj:308)\n        at clojure.main$null_opt.invokeStatic(main.clj:342)\n        at clojure.main$null_opt.invoke(main.clj:339)\n        at clojure.main$main.invokeStatic(main.clj:421)\n        at clojure.main$main.doInvoke(main.clj:384)\n        at clojure.lang.RestFn.invoke(RestFn.java:421)\n        at clojure.lang.Var.invoke(Var.java:383)\n        at clojure.lang.AFn.applyToHelper(AFn.java:156)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.main.main(main.java:37)\nCaused by: clojure.lang.ExceptionInfo: failed compiling \nfile:src\\npmtest\\core.cljs {:file #object[java.io.File 0x1a7f2d34 \n\"src\\\\npmtest\\\\core.cljs\"]}\n        at clojure.core$ex_info.invokeStatic(core.clj:4617)\n        at clojure.core$ex_info.invoke(core.clj:4617)\n        at cljs.compiler$compile_file$fn__3865.invoke(compiler.cljc:1443)\n        at cljs.compiler$compile_file.invokeStatic(compiler.cljc:1408)\n        at cljs.compiler$compile_file.invoke(compiler.cljc:1384)\n        at cljs.closure$compile_file.invokeStatic(closure.clj:488)\n        at cljs.closure$compile_file.invoke(closure.clj:479)\n        at cljs.closure$eval5655$fn__5656.invoke(closure.clj:557)\n        at cljs.closure$eval5591$fn__5592$G__5580__5599.invoke(closure.clj:441)\n        at \ncljs.closure$compile_sources$iter__5791__5795$fn__5796.invoke(closure.clj:905)\n        at clojure.lang.LazySeq.sval(LazySeq.java:40)\n        at clojure.lang.LazySeq.seq(LazySeq.java:49)\n        at clojure.lang.Cons.next(Cons.java:39)\n        at clojure.lang.RT.next(RT.java:688)\n        at clojure.core$next__4341.invokeStatic(core.clj:64)\n        at clojure.core$dorun.invokeStatic(core.clj:3033)\n        at clojure.core$doall.invokeStatic(core.clj:3039)\n        at clojure.core$doall.invoke(core.clj:3039)\n        at cljs.closure$compile_sources.invokeStatic(closure.clj:899)\n        at cljs.closure$compile_sources.invoke(closure.clj:888)\n        at cljs.closure$build.invokeStatic(closure.clj:2281)\n        at cljs.closure$build.invoke(closure.clj:2213)\n        at cljs.build.api$build.invokeStatic(api.clj:202)\n        at cljs.build.api$build.invoke(api.clj:189)\n        at cljs.build.api$build.invokeStatic(api.clj:192)\n        at cljs.build.api$build.invoke(api.clj:189)\n        at user$eval6481.invokeStatic(build.clj:6)\n        at user$eval6481.invoke(build.clj:5)\n        at clojure.lang.Compiler.eval(Compiler.java:6927)\n        at clojure.lang.Compiler.load(Compiler.java:7379)\n        ... 42 more\nCaused by: clojure.lang.ExceptionInfo: No such namespace: left-pad, could not \nlocate left_pad.cljs, left_pad.cljc, or Closure namespace \"left-pad\" in f\nile src\\npmtest\\core.cljs {:tag :cljs\/analysis-error}\n        at clojure.core$ex_info.invokeStatic(core.clj:4617)\n        at clojure.core$ex_info.invoke(core.clj:4617)\n        at cljs.analyzer$error.invokeStatic(analyzer.cljc:645)\n        at cljs.analyzer$error.invoke(analyzer.cljc:641)\n        at cljs.analyzer$error.invokeStatic(analyzer.cljc:643)\n        at cljs.analyzer$error.invoke(analyzer.cljc:641)\n        at cljs.analyzer$analyze_deps.invokeStatic(analyzer.cljc:1894)\n        at cljs.analyzer$analyze_deps.invoke(analyzer.cljc:1870)\n        at cljs.analyzer$ns_side_effects.invokeStatic(analyzer.cljc:3132)\n        at cljs.analyzer$ns_side_effects.invoke(analyzer.cljc:3127)\n        at cljs.analyzer$analyze_STAR_$fn__2775.invoke(analyzer.cljc:3224)\n        at clojure.lang.PersistentVector.reduce(PersistentVector.java:341)\n        at clojure.core$reduce.invokeStatic(core.clj:6544)\n        at clojure.core$reduce.invoke(core.clj:6527)\n        at cljs.analyzer$analyze_STAR_.invokeStatic(analyzer.cljc:3224)\n        at cljs.analyzer$analyze_STAR_.invoke(analyzer.cljc:3214)\n        at cljs.analyzer$analyze.invokeStatic(analyzer.cljc:3242)\n        at cljs.analyzer$analyze.invoke(analyzer.cljc:3226)\n        at cljs.compiler$emit_source.invokeStatic(compiler.cljc:1279)\n        at cljs.compiler$emit_source.invoke(compiler.cljc:1259)\n        at cljs.compiler$compile_file_STAR_$fn__3842.invoke(compiler.cljc:1353)\n        at cljs.compiler$with_core_cljs.invokeStatic(compiler.cljc:1178)\n        at cljs.compiler$with_core_cljs.invoke(compiler.cljc:1167)\n        at cljs.compiler$compile_file_STAR_.invokeStatic(compiler.cljc:1342)\n        at cljs.compiler$compile_file_STAR_.invoke(compiler.cljc:1335)\n        at cljs.compiler$compile_file$fn__3865.invoke(compiler.cljc:1431)\n        ... 69 more\n```\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Error with :npm-deps compiler option on windows marcs . pompili Fri, 21 Apr 2017 09:00:06 -0700"},
{"body":"With Facebook is about to launch React Fiber and Relay Modern is Clojurescript development likely to target them and, if so, what are the implications for Om Next given that the new React\/Relay is based on GraphQL? \ngvim \n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- You received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] React Fiber, Relay Modern and Clojurescript gvim Fri, 21 Apr 2017 06:56:41 -0700"},
{"body":"styled-classnames has now been merged into CLJSJS and is up on Clojars:\n\nhttps:\/\/github.com\/rgdelato\/styled-classnames\nhttps:\/\/clojars.org\/cljsjs\/styled-classnames \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ClojureScript CSS-in-JS Solutions rgdelato Thu, 20 Apr 2017 14:33:07 -0700"},
{"body":"Here's a minimal example: https:\/\/github.com\/tuhlmann\/cljs-pprint-warning \nIt was created with lein chestnut new ... and then I added lein-sass and a \ndummy scss file.\n\nTo reproduce the warnings type:\n\nlein repl\n(run)\n\nIn order to run lein-sass it requires a sassc binary in your path. Precompiled \nbinaries for Ubuntu and Windows can be found at \nhttps:\/\/github.com\/tuhlmann\/sassc-binaries. If that doesn't work for you let me \nknow your environment and I'll cook one for you.\n\nThanks,\nTorsten.\n\nAm Sonntag, 16. April 2017 15:32:46 UTC+2 schrieb Shaun LeBron:\n> cool, sounds like you found the source.  can we get a minimal example?\n> \n> On Sunday, April 16, 2017 at 1:25:48 AM UTC-5, Torsten Uhlmann wrote:\n> > I think I found the source of the problem, but I don't understand it yet :)\n> > \n> > So, for building my project I'm using a setup copied and adapted from the \n> > chestnut template. I do `lein repl` and then `(run)` which minifies assets, \n> > builds scss files and then calls figwheel.\n> > \n> > The problem goes away when I do not build scss files, it uses `[lein-sass \n> > \"0.4.0\"]` for this.\n> > \n> > To build scss files it runs:\n> > \n> > (defn start-scss []\n> >   (future\n> >     (log\/info \"Starting scss.\")\n> >     (lein\/-main [\"sass\" \"auto\"])))\n> > \n> > When running the command in a separate terminal and starting my project \n> > without the scss builder call no warnings appear. Please not I did not \n> > change the project dependencies, just did not call `(start-scss)`.\n> > \n> > I don't understand the relationship between the warning and the lein call, \n> > the lein-sass plugin does (seemingly) not use and Clojurescript.\n> > \n> > Could you give me some pointers where to look further?\n> > \n> > Thanks,\n> > Torsten.\n> > \n> > Am Samstag, 15. April 2017 21:05:29 UTC+2 schrieb Torsten Uhlmann:\n> > > Thanks for your response!\n> > > \n> > > \n> > > I cleaned the output dir multiple times and that didn't change it. I will \n> > > provide a minimal example- maybe doing this will surface the problem...\n> > > \n> > > \n> > > Shaun LeBron schrieb am Sa., 15. Apr. 2017 um 19:40\u00a0Uhr:\n> > > cljs.pprint\/*out* was removed in 1.7.10.\u00a0 see: \n> > > http:\/\/cljs.github.io\/api\/cljs.pprint\/STARoutSTAR\n> > > \n> > > \n> > > \n> > > might be something weird going on with the analysis cache? clean your \n> > > output-dir to clear it.\u00a0 if that doesn't fix, can you give a working \n> > > example?\n> > > \n> > > \n> > > \n> > > On Saturday, April 15, 2017 at 2:16:11 AM UTC-5, Torsten Uhlmann wrote:\n> > > \n> > > > Hi,\n> > > \n> > > >\n> > > \n> > > > after upgrading Clojurscript from 1.9.473 to 1.9.493 I get a bunch of \n> > > > warnings like this:\n> > > \n> > > >\n> > > \n> > > > WARNING: Use of undeclared Var cljs.pprint\/*out* at line 2141 \n> > > > resources\\public\\js\\out\\cljs\\pprint.cljs\n> > > \n> > > >\n> > > \n> > > > The warnings also appear with the latest version 1.9.521.\n> > > \n> > > >\n> > > \n> > > > Is that expected or am I doing something wrong?\n> > > \n> > > >\n> > > \n> > > > Thanks,\n> > > \n> > > > Torsten.\n> > >\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Lots of undeclared Var warnings after upgrading to 1.9.493 Torsten Uhlmann Sun, 16 Apr 2017 07:44:02 -0700"},
{"body":"cool, sounds like you found the source.  can we get a minimal example?\n\nOn Sunday, April 16, 2017 at 1:25:48 AM UTC-5, Torsten Uhlmann wrote:\n> I think I found the source of the problem, but I don't understand it yet :)\n> \n> So, for building my project I'm using a setup copied and adapted from the \n> chestnut template. I do `lein repl` and then `(run)` which minifies assets, \n> builds scss files and then calls figwheel.\n> \n> The problem goes away when I do not build scss files, it uses `[lein-sass \n> \"0.4.0\"]` for this.\n> \n> To build scss files it runs:\n> \n> (defn start-scss []\n>   (future\n>     (log\/info \"Starting scss.\")\n>     (lein\/-main [\"sass\" \"auto\"])))\n> \n> When running the command in a separate terminal and starting my project \n> without the scss builder call no warnings appear. Please not I did not change \n> the project dependencies, just did not call `(start-scss)`.\n> \n> I don't understand the relationship between the warning and the lein call, \n> the lein-sass plugin does (seemingly) not use and Clojurescript.\n> \n> Could you give me some pointers where to look further?\n> \n> Thanks,\n> Torsten.\n> \n> Am Samstag, 15. April 2017 21:05:29 UTC+2 schrieb Torsten Uhlmann:\n> > Thanks for your response!\n> > \n> > \n> > I cleaned the output dir multiple times and that didn't change it. I will \n> > provide a minimal example- maybe doing this will surface the problem...\n> > \n> > \n> > Shaun LeBron schrieb am Sa., 15. Apr. 2017 um 19:40\u00a0Uhr:\n> > cljs.pprint\/*out* was removed in 1.7.10.\u00a0 see: \n> > http:\/\/cljs.github.io\/api\/cljs.pprint\/STARoutSTAR\n> > \n> > \n> > \n> > might be something weird going on with the analysis cache? clean your \n> > output-dir to clear it.\u00a0 if that doesn't fix, can you give a working \n> > example?\n> > \n> > \n> > \n> > On Saturday, April 15, 2017 at 2:16:11 AM UTC-5, Torsten Uhlmann wrote:\n> > \n> > > Hi,\n> > \n> > >\n> > \n> > > after upgrading Clojurscript from 1.9.473 to 1.9.493 I get a bunch of \n> > > warnings like this:\n> > \n> > >\n> > \n> > > WARNING: Use of undeclared Var cljs.pprint\/*out* at line 2141 \n> > > resources\\public\\js\\out\\cljs\\pprint.cljs\n> > \n> > >\n> > \n> > > The warnings also appear with the latest version 1.9.521.\n> > \n> > >\n> > \n> > > Is that expected or am I doing something wrong?\n> > \n> > >\n> > \n> > > Thanks,\n> > \n> > > Torsten.\n> > \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Lots of undeclared Var warnings after upgrading to 1.9.493 Shaun LeBron Sun, 16 Apr 2017 06:33:07 -0700"},
{"body":"I think I found the source of the problem, but I don't understand it yet :) \nSo, for building my project I'm using a setup copied and adapted from the \nchestnut template. I do `lein repl` and then `(run)` which minifies assets, \nbuilds scss files and then calls figwheel.\n\nThe problem goes away when I do not build scss files, it uses `[lein-sass \n\"0.4.0\"]` for this.\n\nTo build scss files it runs:\n\n(defn start-scss []\n  (future\n    (log\/info \"Starting scss.\")\n    (lein\/-main [\"sass\" \"auto\"])))\n\nWhen running the command in a separate terminal and starting my project without \nthe scss builder call no warnings appear. Please not I did not change the \nproject dependencies, just did not call `(start-scss)`.\n\nI don't understand the relationship between the warning and the lein call, the \nlein-sass plugin does (seemingly) not use and Clojurescript.\n\nCould you give me some pointers where to look further?\n\nThanks,\nTorsten.\n\nAm Samstag, 15. April 2017 21:05:29 UTC+2 schrieb Torsten Uhlmann:\n> Thanks for your response!\n> \n> \n> I cleaned the output dir multiple times and that didn't change it. I will \n> provide a minimal example- maybe doing this will surface the problem...\n> \n> \n> Shaun LeBron schrieb am Sa., 15. Apr. 2017 um 19:40\u00a0Uhr:\n> cljs.pprint\/*out* was removed in 1.7.10.\u00a0 see: \n> http:\/\/cljs.github.io\/api\/cljs.pprint\/STARoutSTAR\n> \n> \n> \n> might be something weird going on with the analysis cache? clean your \n> output-dir to clear it.\u00a0 if that doesn't fix, can you give a working example?\n> \n> \n> \n> On Saturday, April 15, 2017 at 2:16:11 AM UTC-5, Torsten Uhlmann wrote:\n> \n> > Hi,\n> \n> >\n> \n> > after upgrading Clojurscript from 1.9.473 to 1.9.493 I get a bunch of \n> > warnings like this:\n> \n> >\n> \n> > WARNING: Use of undeclared Var cljs.pprint\/*out* at line 2141 \n> > resources\\public\\js\\out\\cljs\\pprint.cljs\n> \n> >\n> \n> > The warnings also appear with the latest version 1.9.521.\n> \n> >\n> \n> > Is that expected or am I doing something wrong?\n> \n> >\n> \n> > Thanks,\n> \n> > Torsten.\n> \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Lots of undeclared Var warnings after upgrading to 1.9.493 Torsten Uhlmann Sat, 15 Apr 2017 23:26:37 -0700"},
{"body":"Thanks for your response!\n\nI cleaned the output dir multiple times and that didn't change it. I will\nprovide a minimal example- maybe doing this will surface the problem... \nShaun LeBron <shaunewilli...@gmail.com> schrieb am Sa., 15. Apr. 2017 um\n19:40 Uhr:\n\n> cljs.pprint\/*out* was removed in 1.7.10.  see:\n> http:\/\/cljs.github.io\/api\/cljs.pprint\/STARoutSTAR\n>\n> might be something weird going on with the analysis cache? clean your\n> output-dir to clear it.  if that doesn't fix, can you give a working\n> example?\n>\n> On Saturday, April 15, 2017 at 2:16:11 AM UTC-5, Torsten Uhlmann wrote:\n> > Hi,\n> >\n> > after upgrading Clojurscript from 1.9.473 to 1.9.493 I get a bunch of\n> warnings like this:\n> >\n> > WARNING: Use of undeclared Var cljs.pprint\/*out* at line 2141\n> resources\\public\\js\\out\\cljs\\pprint.cljs\n> >\n> > The warnings also appear with the latest version 1.9.521.\n> >\n> > Is that expected or am I doing something wrong?\n> >\n> > Thanks,\n> > Torsten.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \n\n-- \nAGYNAMIX(R). Passionate Software.\nInh. Torsten Uhlmann | Buchenweg 5 | 09380 Thalheim\nPhone:     +49 3721 273445\nFax:         +49 3721 273446\nMobile:    +49 151 12412427\nWeb:       http:\/\/www.agynamix.de\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Lots of undeclared Var warnings after upgrading to 1.9.493 Torsten Uhlmann Sat, 15 Apr 2017 12:05:43 -0700"},
{"body":"cljs.pprint\/*out* was removed in 1.7.10.  see: \nhttp:\/\/cljs.github.io\/api\/cljs.pprint\/STARoutSTAR \nmight be something weird going on with the analysis cache? clean your \noutput-dir to clear it.  if that doesn't fix, can you give a working example?\n\nOn Saturday, April 15, 2017 at 2:16:11 AM UTC-5, Torsten Uhlmann wrote:\n> Hi,\n> \n> after upgrading Clojurscript from 1.9.473 to 1.9.493 I get a bunch of \n> warnings like this:\n> \n> WARNING: Use of undeclared Var cljs.pprint\/*out* at line 2141 \n> resources\\public\\js\\out\\cljs\\pprint.cljs\n> \n> The warnings also appear with the latest version 1.9.521.\n> \n> Is that expected or am I doing something wrong?\n> \n> Thanks,\n> Torsten.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Lots of undeclared Var warnings after upgrading to 1.9.493 Shaun LeBron Sat, 15 Apr 2017 10:41:20 -0700"},
{"body":"Hi,\n\nafter upgrading Clojurscript from 1.9.473 to 1.9.493 I get a bunch of warnings \nlike this: \nWARNING: Use of undeclared Var cljs.pprint\/*out* at line 2141 \nresources\\public\\js\\out\\cljs\\pprint.cljs\n\nThe warnings also appear with the latest version 1.9.521.\n\nIs that expected or am I doing something wrong?\n\nThanks,\nTorsten.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Lots of undeclared Var warnings after upgrading to 1.9.493 Torsten Uhlmann Sat, 15 Apr 2017 00:16:51 -0700"},
{"body":"I just cut 1.9.521. The only change was to fix a regression to\n:foreign-libs when there are multiple entries which use the same :file. \nDavid\n\nOn Wed, Apr 12, 2017 at 4:52 PM, David Nolen <dnolen.li...@gmail.com> wrote:\n\n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>\n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>\n> Leiningen dependency information:\n>\n> [org.clojure\/clojurescript \"1.9.518\"]\n>\n> This release bumps Closure Compiler, finally resolving the issue with\n> core.async.\n>\n> As always feedback welcome!\n>\n> ## 1.9.518\n>\n> ### Enhancements\n> * CLJS-1973: Add support for `:npm-deps` in upstream `deps.cljs`\n> * CLJS-1968: Enable calling JS modules that export a single function\n> * CLJS-1960: Require CommonJS modules directly from a ClojureScript\n> namespace\n>\n> ### Changes\n> * CLJS-2006: Upgrade Closure Compiler to April 2017 release\n>\n> ### Fixes\n> * CLJS-1497: `find` on an associative collection does not return\n> collection key\n> * CLJS-1996: Support correct checking of :preloads when :optimizations not\n> specified\n> * CLJS-1994: assoc on nil returns PHM (expected PAM)\n> * CLJS-1988: add :npm-deps to recognized compiler options\n> * Fix tiny bug in index-node-modules when no second argument is given\n> * CLJS-1985: `index-node-modules` should pass opts to `node-inputs`\n> * CLJS-1987: don't index node modules blindly\n> * CLJS-1519 Collection invoke errors report arity off by 1\n> * CLJS-1964: Validate that `:target :nodejs` and no optimizations requires\n> a `:main` option to be present\n> * CLJS-1956: Add missing JS reserved keywords\n> * CLJS-1983: res -> mres in spec.cljs\n> * CLJS-1978: port CLJ-2035\n> * CLJS-1979: port CLJ-2043 (fix s\/form of s\/conformer)\n> * CLJS-1980: port CLJ-2100 (s\/nilable form should retain original spec\n> form)\n> * CLJS-1976: hash-map assoc stackoverflow\n> * CLJS-1957: Process JS modules errors and warnings don't get printed\n> * CLJS-1868 - Output simpler dependency rel paths when compiling with\n> Closure libs\n> * CLJS-1967: Missing ^boolean for removed-leaf? in THM impl\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.518, `async` issue resolved David Nolen Fri, 14 Apr 2017 09:42:07 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.518\"]\n\nThis release bumps Closure Compiler, finally resolving the issue with\ncore.async.\n\nAs always feedback welcome!\n\n## 1.9.518\n\n### Enhancements\n* CLJS-1973: Add support for `:npm-deps` in upstream `deps.cljs`\n* CLJS-1968: Enable calling JS modules that export a single function\n* CLJS-1960: Require CommonJS modules directly from a ClojureScript\nnamespace\n\n### Changes\n* CLJS-2006: Upgrade Closure Compiler to April 2017 release\n\n### Fixes\n* CLJS-1497: `find` on an associative collection does not return collection\nkey\n* CLJS-1996: Support correct checking of :preloads when :optimizations not\nspecified\n* CLJS-1994: assoc on nil returns PHM (expected PAM)\n* CLJS-1988: add :npm-deps to recognized compiler options\n* Fix tiny bug in index-node-modules when no second argument is given\n* CLJS-1985: `index-node-modules` should pass opts to `node-inputs`\n* CLJS-1987: don't index node modules blindly\n* CLJS-1519 Collection invoke errors report arity off by 1\n* CLJS-1964: Validate that `:target :nodejs` and no optimizations requires\na `:main` option to be present\n* CLJS-1956: Add missing JS reserved keywords\n* CLJS-1983: res -> mres in spec.cljs\n* CLJS-1978: port CLJ-2035\n* CLJS-1979: port CLJ-2043 (fix s\/form of s\/conformer)\n* CLJS-1980: port CLJ-2100 (s\/nilable form should retain original spec form)\n* CLJS-1976: hash-map assoc stackoverflow\n* CLJS-1957: Process JS modules errors and warnings don't get printed\n* CLJS-1868 - Output simpler dependency rel paths when compiling with\nClosure libs\n* CLJS-1967: Missing ^boolean for removed-leaf? in THM impl\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.518, `async` issue resolved David Nolen Wed, 12 Apr 2017 13:52:54 -0700"},
{"body":"I bumped into this problem this morning. For Windows, in addition to the \nquotes, you also need to change the colon to a semi-colon, giving: \njava -cp \"cljs.jar;src\" clojure.main watch.clj\n\nRegards\nMike\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] ClojureScript Quick Start - Error: Could not find or load main class clojure.main Michael Stedman Wed, 05 Apr 2017 08:05:57 -0700"},
{"body":"On Tuesday, April 4, 2017 at 6:09:52 PM UTC+2, Shaun LeBron wrote:\n> typo: use \"dev\" instead of \"release\" for the full blown dev experience:\n> rlwrap lein run -m shadow.cljs.devtools.cli\/dev script \nThanks Shaun, a typo indeed.\n\nI wrote some more things down in the wiki:\nhttps:\/\/github.com\/thheller\/shadow-devtools\/wiki\/Using-shadow-devtools\nhttps:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-node.js-scripts\nhttps:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-node.js-libraries\n\nand of course the most important browser setup I skipped over before\nhttps:\/\/github.com\/thheller\/shadow-devtools\/wiki\/ClojureScript-for-the-browser\n\nI also fixed some smaller issues that may have prevented some things from \nworking properly.\n\nThe new version is now: [thheller\/shadow-devtools \"0.1.20170405\"]\n\nCheers,\n\/thomas\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] shadow-devtools: simpler CLJS configs Thomas Heller Wed, 05 Apr 2017 05:59:02 -0700"},
{"body":"typo: use \"dev\" instead of \"release\" for the full blown dev experience:\nrlwrap lein run -m shadow.cljs.devtools.cli\/dev script \nOn Monday, April 3, 2017 at 3:35:34 PM UTC-5, Thomas Heller wrote:\n> This thing I wrote is getting to a point where it might be useful to someone \n> else. It might make your CLJS life a bit easier.\n> \n> I have been using my own CLJS tooling (shadow-build) for over 3 years now, it \n> had some of lein-figwheel's features that I never talked about but frankly \n> lein-figwheel was just plain easier to use so I never bothered.\n> \n> Over the years however I noticed a trend in my projects that bothered me. I \n> would repeat all my build configuration at least twice and only change one \n> tiny thing. I would have a :dev build with :optimizations :none and a :min \n> build with :advanced. Some other things might change as well but the bulk of \n> the configuration stayed the same.\n> \n> So the goal was simple, abstract the configuration stuff to the basics. You \n> define the :target and compile this either in :dev or :release mode. The \n> :target defines where your build is supposed to run (ie. browser, \n> node-library or node-script). :dev then provides some good defaults for \n> development (with REPL, live-reloading, source-maps, ...) and :release takes \n> care of everything to produce the most optimized build.\n> \n> The main goal of this was to automate as much as possible and no changes to \n> code should be required when switching between :dev and :release.\n> \n> Say you want to create a node script, something that runs as a standalone \n> node process.\n> \n> {:id :script\n>  :target :node-script\n>  :main demo.script\/main\n>  :output-to \"out\/demo-script\/script.js\"}\n> \n> This creates only the file defined in :output-to. You run that file by \n> calling \"node script.js arg\". It will call \"(demo.script\/main \"arg\") on \n> startup which is a normal `(defn main [& args] ...)` in `(ns demo.script)`. \n> No need to do the usual `(set! *main-cli-fn* ...)` or anything else really.\n> \n> To compile the script in :dev mode you run:\n> lein run -m shadow.cljs.devtools.cli\/once script\n> \n> To compile the script in :release mode:\n> lein run -m shadow.cljs.devtools.cli\/release script\n> \n> Or if you want the full blown dev experience:\n> rlwrap lein run -m shadow.cljs.devtools.cli\/release script\n> \n> This drops you into a REPL that you can use to interact with the running \n> process once you start the node process.\n> \n> \n> If you just want to integrate with some existing node stuff as a library you \n> can use this config:\n> \n> {:id :library\n>  :target :node-library\n>  :output-to \"out\/demo-library\/lib.js\"\n>  :exports\n>  {:hello demo.lib\/hello}}\n> \n> The :exports map specifies which vars should be exported to node.\n> \n> > var x = require('.\/lib');\n> undefined\n> > x.hello()\n> hello\n> 'hello'\n> \n> \n> The caveat of all this is that these default :target configurations (didn't \n> mention :browser yet) are based on what I consider \"good\" setups. That might \n> be totally different from what everyone else is doing. There are also some \n> other differences to other build tools like figwheel or lein-cljsbuild, which \n> may be confusing at first.\n> \n> So should anyone be interested in this at all I'd be happy about any kind of \n> feedback.\n> \n> You can find some more information here:\n> https:\/\/github.com\/thheller\/shadow-devtools\n> \n> I would consider this ALPHA level but I have been using shadow-build for a \n> really long time and some of the devtools things for just as long. I just \n> re-wrote some parts recently to simplify the configuration bits. It is \n> nowhere near the polish of lein-figwheel but it is probably faster and \n> simpler to configure. ;)\n> \n> Cheers,\n> \/thomas\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] shadow-devtools: simpler CLJS configs Shaun LeBron Tue, 04 Apr 2017 09:10:06 -0700"},
{"body":"This thing I wrote is getting to a point where it might be useful to someone \nelse. It might make your CLJS life a bit easier. \nI have been using my own CLJS tooling (shadow-build) for over 3 years now, it \nhad some of lein-figwheel's features that I never talked about but frankly \nlein-figwheel was just plain easier to use so I never bothered.\n\nOver the years however I noticed a trend in my projects that bothered me. I \nwould repeat all my build configuration at least twice and only change one tiny \nthing. I would have a :dev build with :optimizations :none and a :min build \nwith :advanced. Some other things might change as well but the bulk of the \nconfiguration stayed the same.\n\nSo the goal was simple, abstract the configuration stuff to the basics. You \ndefine the :target and compile this either in :dev or :release mode. The \n:target defines where your build is supposed to run (ie. browser, node-library \nor node-script). :dev then provides some good defaults for development (with \nREPL, live-reloading, source-maps, ...) and :release takes care of everything \nto produce the most optimized build.\n\nThe main goal of this was to automate as much as possible and no changes to \ncode should be required when switching between :dev and :release.\n\nSay you want to create a node script, something that runs as a standalone node \nprocess.\n\n{:id :script\n :target :node-script\n :main demo.script\/main\n :output-to \"out\/demo-script\/script.js\"}\n\nThis creates only the file defined in :output-to. You run that file by calling \n\"node script.js arg\". It will call \"(demo.script\/main \"arg\") on startup which \nis a normal `(defn main [& args] ...)` in `(ns demo.script)`. No need to do the \nusual `(set! *main-cli-fn* ...)` or anything else really.\n\nTo compile the script in :dev mode you run:\nlein run -m shadow.cljs.devtools.cli\/once script\n\nTo compile the script in :release mode:\nlein run -m shadow.cljs.devtools.cli\/release script\n\nOr if you want the full blown dev experience:\nrlwrap lein run -m shadow.cljs.devtools.cli\/release script\n\nThis drops you into a REPL that you can use to interact with the running \nprocess once you start the node process.\n\n\nIf you just want to integrate with some existing node stuff as a library you \ncan use this config:\n\n{:id :library\n :target :node-library\n :output-to \"out\/demo-library\/lib.js\"\n :exports\n {:hello demo.lib\/hello}}\n\nThe :exports map specifies which vars should be exported to node.\n\n> var x = require('.\/lib');\nundefined\n> x.hello()\nhello\n'hello'\n\n\nThe caveat of all this is that these default :target configurations (didn't \nmention :browser yet) are based on what I consider \"good\" setups. That might be \ntotally different from what everyone else is doing. There are also some other \ndifferences to other build tools like figwheel or lein-cljsbuild, which may be \nconfusing at first.\n\nSo should anyone be interested in this at all I'd be happy about any kind of \nfeedback.\n\nYou can find some more information here:\nhttps:\/\/github.com\/thheller\/shadow-devtools\n\nI would consider this ALPHA level but I have been using shadow-build for a \nreally long time and some of the devtools things for just as long. I just \nre-wrote some parts recently to simplify the configuration bits. It is nowhere \nnear the polish of lein-figwheel but it is probably faster and simpler to \nconfigure. ;)\n\nCheers,\n\/thomas\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] shadow-devtools: simpler CLJS configs Thomas Heller Mon, 03 Apr 2017 13:36:01 -0700"},
{"body":"According to Maven Central, 1.9.495 is from March 1st and looking at the \ncommits, that means that this single commit is the difference between 1.9.494: \nhttps:\/\/github.com\/clojure\/clojurescript\/commit\/86f26bf267f1c729313320c38e53e64450c0e68d\n\nThe README just didn\u2019t get updated.\n\nSean Corfield -- (970) FOR-SEAN -- (904) 302-SEAN\nAn Architect's View -- http:\/\/corfield.org\/\n\n\"If you're not annoying somebody, you're not really alive.\"\n-- Margaret Atwood\n\nFrom: Linus Ericsson\nSent: Thursday, March 30, 2017 3:39 PM\nTo: clojurescript@googlegroups.com\nSubject: [ClojureScript] What is clojurescript 1.9.495?\n\nWhen running lein ancient\u00a0on a clojurescript project, it suggests there is a \nversion 1.9.495, but the clojurescript github page states that 1.9.494 is the \nlatest released clojurescript version.\n\nWhere does clojurescript 1.9.495 come from, really?\n\nThanks,\nLinus\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"RE: [ClojureScript] What is clojurescript 1.9.495? Sean Corfield Thu, 30 Mar 2017 17:03:07 -0700"},
{"body":"lein ancient is checking the Maven repositories for the latest version.\n1.9.495 has been released to Maven Central, but isn\u2019t marked as an\n\u2018official\u2019 release on GitHub. You can see the tag here:\nhttps:\/\/github.com\/clojure\/clojurescript\/releases\/tag\/r1.9.495. \nIn general, ClojureScript often does smaller releases that are pre-release\nor quick bugfixes, without marking them as \u201cStable\u201d in GitHub.\n\nOn Fri, Mar 31, 2017 at 11:39 AM Linus Ericsson <\noscarlinuserics...@gmail.com> wrote:\n\n> When running lein ancient on a clojurescript project, it suggests there\n> is a version 1.9.495, but the clojurescript github page states that 1.9.494\n> is the latest released clojurescript version.\n>\n> Where does clojurescript 1.9.495 come from, really?\n>\n> Thanks,\n> Linus\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] What is clojurescript 1.9.495? Daniel Compton Thu, 30 Mar 2017 16:25:13 -0700"},
{"body":"When running lein ancient on a clojurescript project, it suggests there is\na version 1.9.495, but the clojurescript github page states that 1.9.494 is\nthe latest released clojurescript version. \nWhere does clojurescript 1.9.495 come from, really?\n\nThanks,\nLinus\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] What is clojurescript 1.9.495? Linus Ericsson Thu, 30 Mar 2017 15:39:50 -0700"},
{"body":"Hi all,\n\nI'm working on my first-ever ClojureScript-heavy project, and it's mostly going \nvery well. But packaging it for deployment is causing me grief; I've clearly \ngot something wrong in my project.clj, but I don't know what it is. \nThe project is here: https:\/\/github.com\/simon-brooke\/youyesyet\n\nThe issues which I'm struggling with are as follows:\n\nWhen the war is packaged up with lein uberwar, the URL that's generated for \nbase.js is wrong, and consequently the app doesn't load. If I go in and \nhand-hack app.js after the war has deployed, I can fix this; but that clearly \nisn't the right thing to do. I *think* this is probably to do with key \n:asset-path on the cljsbuild compiler map, but I've fiddled around with it and \nit still doesn't work. (issue #36 on the github project).\n\nAlso, running from a packaged war, the app tries to open a figwheel connection, \nwhich of course fails. So I'm clearly not getting a production build of the app \nanyway.\n\nThese two problems are almost certainly down to the project.clj; I'd really \nappreciate some advice on this.\n\nThe third issue is just a development annoyance. When I run from the command \nline - running 'lein run' in one terminal and 'lein figwheel' in another, when \nI open the app URL the app fails to load; I get an error in the browser console:\n\nUncaught Error: Assert failed: Invalid Hiccup form: [nil]\n (in page)\n(valid-tag? tag)\n    at reagent$impl$template$vec_to_elem (template.cljs:302)\n    at reagent$impl$template$as_element (template.cljs:329)\n    at template.cljs:403\n    at core.cljs:5145\n    at core.cljs:5145\n    at cljs.core.PersistentVector.cljs$core$IKVReduce$_kv_reduce$arity$3 \n(core.cljs:5149)\n    at Object.cljs$core$_kv_reduce [as _kv_reduce] (core.cljs:600)\n    at cljs$core$reduce_kv (core.cljs:2381)\n    at reagent$impl$template$make_element (template.cljs:401)\n    at reagent$impl$template$native_element (template.cljs:285)\n\nHowever, what's bizarre is that if I then add a single new line to the end of \nany CLJS file and save it, figwheel recompiles the file and pushes it, and the \napp immediately renders. I can live with this, but I'd very much like to fix it.\n\nAny advice on any of these issues very gratefully received!\n \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Uberwar packaging problems 'Simon Brooke' via ClojureScript Sun, 26 Mar 2017 11:21:45 -0700"},
{"body":"Interesting question, I have been struggling with it myself. I tried to use the \nundocumented ReactJS feature described on \nhttps:\/\/gist.github.com\/pesterhazy\/d163a8b3f1f1c6a0dac235858776c14b, but it \ndoes not seem to really work \u2014 but as I understand it from my brief research, \nthis is an unresolved problem for everyone. \nDoes anybody else have a good idea? \n\nRelated to this: in my fairly large Clojurescript codebase (about 200 combined \nCLJC\/CLJS namespaces), most of the waiting time involved \u2014 3.5 seconds on \naverage \u2014 when changing code, is having to hit the reload button in Chrome, \ne.g. due to the unresolved errors messing up the state of my components. Has \nanybody found a solution for faster reloads? I have the impression that the \nFigwheel communication between Chrome and the Figwheel process takes up a fair \nchunk of this time, but that may also be a misunderstanding from my side. An \nideal solution would allow you to perform a clean reset of the page to its \ninitial state, without any reloading involved.. (Note that I tried changing a \nfew of the hidden Chrome flags regarding reloading and code caching, but they \ndo not seem to have any effect.)\n\nMaarten\n\nOn Sunday, March 19, 2017 at 8:11:43 PM UTC+1, Daneel van Tonder wrote:\n> Hi Everyone\n> \n> I'm writing an application in re-frame (awesome framework by the way) but are \n> stuck on handling errors globally.\n> \n> For for the moment I need a simple way to catch unhandled errors and send \n> them to an endpoint in my api.\n> \n> Tried goog.debug.ErrorReporter\/install but it doesn't seem to catch any of my \n> errors. Perhaps I've not placed it at the correct point in my code (tried my \n> application entry file). \n> \n> Any help would be much appreciated.\n> \n> \n> Cheers\n> Daneel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Re-frame global error handling Maarten Truyens Mon, 20 Mar 2017 03:22:15 -0700"},
{"body":"Hi Everyone\n\nI'm writing an application in re-frame (awesome framework by the way) but are \nstuck on handling errors globally. \nFor for the moment I need a simple way to catch unhandled errors and send them \nto an endpoint in my api.\n\nTried goog.debug.ErrorReporter\/install but it doesn't seem to catch any of my \nerrors. Perhaps I've not placed it at the correct point in my code (tried my \napplication entry file). \n\nAny help would be much appreciated.\n\n\nCheers\nDaneel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re-frame global error handling Daneel van Tonder Sun, 19 Mar 2017 12:12:07 -0700"},
{"body":"I'd also recommend checking out radium:\n\nhttps:\/\/github.com\/FormidableLabs\/radium \nIt's an inline style higher-order component for react.\n\nIt supports media queries, pseudo-selectors like :hover, keyframe animations, \ndoes vendor prefixing for you, and supports server side rendering. It will also \nmerge an array of objects intelligently, as well as filtering any falsy \nelements so you can easily compose styles based on the component's state.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ClojureScript CSS-in-JS Solutions Dan Vingo Sat, 18 Mar 2017 08:06:06 -0700"},
{"body":"On Saturday, February 25, 2017 at 3:03:05 PM UTC+1, Oded Badt wrote:\n> Is tab completion supported in lein figwheel as it is in lein repl?\n> \n> for example, say I \"require\" as naespace in a clojurescript (figwheel based) \n> repl. What is the easiest way to list its contents? \nNo it doesn't. With regards to listing the contents of a namespace, you could \nuse the dir function\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: tab completion in lein figwheel Arewa Olakunle Fri, 17 Mar 2017 05:02:14 -0700"},
{"body":"I definitely agree with your last point: `styled-components` includes PostCSS \nand is huge as a result. (I might be wrong, but I remember it being larger than \n20KB gzipped.) They're switching to a smaller parser for v2, but at the moment, \nit's a lot. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ClojureScript CSS-in-JS Solutions rgdelato Fri, 17 Mar 2017 01:07:42 -0700"},
{"body":"On Thursday, March 16, 2017 at 6:55:44 PM UTC+1, rgde...@gmail.com wrote:\n> Thanks for pointing me to your library and to the other thread, I'll take a \n> look!\n> \n> In general, I disagree that a string-based solution is strictly worse than a \n> map-based solution, since using strings can help the library remain \n> evergreen. If the library can inject strings that use \"real\" CSS with little \n> or no parsing, it means that it'll be more likely to support new CSS syntax \n> without needing any updates.\n> \n> It also means that current CSS syntax weirdnesses such as pseudoclasses \n> (:hover, etc) and queries (@media, @supports) work how you'd expected them to. \nIt makes more sense to use strings in JS since you can't achieve what I'm doing \nwithout more work there. JS doesn't have keywords so it can't differentiate \nbetween properties and selectors in objects as easily.\n\nYou will still use strings for selectors so media queries or pseudoclasses just \nwork, property values default to strings as well.\n\nBut the most important part is: It is all just Clojure code. Your Clojure tools \njust work. You can call functions, you can merge styles from different parts. \nGood luck doing this with strings.\n\nFWIW styled-components adds 20KB (min, gzip'd) since it requires a CSS parser \nat runtime. It's hard to measure shadow.markup due to :advanced but it much \nless than that, probably 10%.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ClojureScript CSS-in-JS Solutions Thomas Heller Fri, 17 Mar 2017 00:41:05 -0700"},
{"body":"Thanks for pointing me to your library and to the other thread, I'll take a \nlook! \nIn general, I disagree that a string-based solution is strictly worse than a \nmap-based solution, since using strings can help the library remain evergreen. \nIf the library can inject strings that use \"real\" CSS with little or no \nparsing, it means that it'll be more likely to support new CSS syntax without \nneeding any updates.\n\nIt also means that current CSS syntax weirdnesses such as pseudoclasses \n(:hover, etc) and queries (@media, @supports) work how you'd expected them to.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ClojureScript CSS-in-JS Solutions rgdelato Thu, 16 Mar 2017 10:56:09 -0700"},
{"body":"Hello Tim,\n\nI downloaded your repo and run it with an older figwheel in the project.clj. \nThat doesn't matter.\nYour repo works fine. You need to launch your browser in http:\/\/0.0.0.0:3449\/\nto see your cljs repl in the console. \nOnce in your repl, try this:\n(in-ns 'finops-admin.core)\n(swap! app-state #(assoc % :text \"Hello Tim\"))\n\nI recommend you to follow the clojurescript tutorial to see the flow of \ncompilation and repl launching. Also, the figwheel documentation is great.\n\nSaludos!\n\nJos\u00e9 FM.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Running figwheel with a separate server Jose Figueroa Martinez Thu, 16 Mar 2017 09:59:02 -0700"},
{"body":"As a lein-figwheel novice, hopefully this will be an easy question for\nsomeone with the right knowledge. \nI was able to get Figwheel's separate server example working (see here\n<https:\/\/github.com\/bhauman\/lein-figwheel\/tree\/master\/examples\/separate-server>\n).\n\nBut when I tried to `*lein figwheel*` in a test app of my own, my server is\nlaunched, but no repl launches.\n\n   - https:\/\/github.com\/twashing\/figwheel-docker\/blob\/master\/project.clj\n   - https:\/\/github.com\/twashing\/figwheel-docker\/blob\/master\/dev\/user.clj\n\nAlso, from a `*cider-jack-in*` repl, manually running `*fig-start*` no\nlonger launches my custom jetty server (see here\n<https:\/\/github.com\/twashing\/figwheel-docker\/blob\/master\/dev\/user.clj#L70>\n).\n\nIn either case, what am I missing?\n\n\nThanks\nTim\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Running figwheel with a separate server Timothy Washington Thu, 16 Mar 2017 00:42:08 -0700"},
{"body":"I wrote about this recently [1] [2].\n\n(ns my.demo\n  (:require [shadow.markup.css :as css :refer (defstyled)])) \n(defstyled page-title :h1\n [env]\n {:color \"red\"\n  \"&:hover\"\n  {:color \"green\"})\n\n\nAs I mentioned the API is very much inspired by styled-components although I \nthink template-literals is strictly worse. So instead I used simple clojure \nmaps where keywords keys refer to CSS properties and string keys refer to \nscoped CSS selectors (see details in [2]).\n\nI'm using this in production and so far I'm very happy with it, slowly \nmigrating all my code towards it. Several other people in [1] also mention \nalternate approaches that you might want to look into.\n\nHappy to answer questions about shadow.markup either here or in Slack \n(@thheller).\n\nCheers,\n\/thomas\n\n\n[1] https:\/\/groups.google.com\/d\/msg\/clojurescript\/sc-0hukwfpw\/v_j8rkeOCAAJ\n[2] https:\/\/github.com\/thheller\/shadow\/wiki\/shadow.markup\n\n\nOn Thursday, March 16, 2017 at 7:42:19 AM UTC+1, rgde...@gmail.com wrote:\n> Hello there!\n> \n> I wasn't able to find a CSS solution for ClojureScript that scopes your CSS \n> to a component, but that also lets you write real CSS (think CSS Modules and \n> styled-components in JS-land).\n> \n> So I'm looking into porting over `styled-classnames` (which is a spinoff of \n> `styled-components`) over to cljs, though since `styled-components` uses \n> tagged template literals, I wasn't 100% sure what to do with the API. Here's \n> is what I have so far:\n> \n> https:\/\/cl.ly\/290W3O102u2b (image also attached)\n> \n> I'd love to get some thoughts from more experienced clojurians about 1) \n> whether or not there's already a solution that meets my needs and 2) if not, \n> whether or not this \"string-interpolation-string\" API has any obvious \n> problems. (I'm still fairly new to Clojure, so it's quite possible I'm not \n> seeing something obvious.)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ClojureScript CSS-in-JS Solutions Thomas Heller Thu, 16 Mar 2017 00:15:01 -0700"},
{"body":"Hi Rickesh,\nit looks like you use reagent.\n\n I think the type-ahead functionality in reagent-forms is the simplest way\nto get that functionality. \nhttps:\/\/github.com\/reagent-project\/reagent-forms#typeahead\n\n\/Linus\n\n\n\n2017-03-15 11:31 GMT+01:00 'Rickesh Bedia' via ClojureScript <\nclojurescript@googlegroups.com>:\n\n> I have a html page that contains a navigation bar at the top of the\n> screen. In the navigation bar, I have a search box and what I want it to do\n> is, you type in this box, hit enter and the results are displayed as a\n> dropdown menu\n>\n>     <li><input type=\"text\" id=\"search-bar\" placeholder=\"Search\"><\/li>\n>\n> This is the html search input box. I have given it an id `search-bar` to\n> eventually create the dropdown menu in ClojureScript\n>\n>     (when-let [section (. js\/document (getElementById \"search-bar\"))]\n>                     (r\/render-component [search-bar-component] section))\n>\n> Currently I have a search-form that looks like the following\n>\n>     (defn search-form\n>       []\n>       [:div\n>        [:p \"What are you searching for? \"\n>         [:input\n>          {:type :text\n>           :name :search\n>           :on-change #(do\n>                         (swap! fields assoc :search (-> % .-target\n> .-value))\n>                         (search-index (:search @fields)))\n>           :value (:search @fields)}]]\n>        [:p (create-links @search-results)]])\n>\n>     (defn- search-component\n>       []\n>       [search-form])\n>\n> This is my `search-component`.\n>\n> What I want to happen is when you type in the input box on the navbar (say\n> \"hello\", it calls `search-index` from the search-form with the parameter\n> being the value you type in (\"hello\") and then returns the results as a\n> dropdown menu below.\n>\n> `search-form` works right now as a form on a html page, where you input\n> some text into a form and then the results are displayed below. I want to\n> change it to be on the navbar instead of as a separate page, where the\n> input form is on the navbar and the results are displayed below\n>\n> How would I have to change my search-form in order to do this?\n>\n> I think I can do something along the lines of this\n>\n>     (defn search-bar-form\n>           []\n>           [:div\n>            [:input\n>             {:type :text\n>              :name :search\n>              :on-change #(do\n>                            (swap! fields assoc :search (-> % .-target\n> .-value))\n>                            (search-index (:search @fields)))\n>              :value (:search @fields)}]\n>            [:p (create-links @search-results)]])\n>\n>     (defn- search-bar-component\n>            []\n>            [search-form])\n>\n> Any help would be much appreciated.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] ClojureScript Dropdown Menu Linus Ericsson Wed, 15 Mar 2017 10:08:13 -0700"},
{"body":"I have a html page that contains a navigation bar at the top of the screen. In \nthe navigation bar, I have a search box and what I want it to do is, you type \nin this box, hit enter and the results are displayed as a dropdown menu \n    <li><input type=\"text\" id=\"search-bar\" placeholder=\"Search\"><\/li>\n\nThis is the html search input box. I have given it an id `search-bar` to \neventually create the dropdown menu in ClojureScript\n\n    (when-let [section (. js\/document (getElementById \"search-bar\"))]\n                    (r\/render-component [search-bar-component] section))\n\nCurrently I have a search-form that looks like the following\n\n    (defn search-form\n      []\n      [:div\n       [:p \"What are you searching for? \"\n        [:input\n         {:type :text\n          :name :search\n          :on-change #(do\n                        (swap! fields assoc :search (-> % .-target .-value))\n                        (search-index (:search @fields)))\n          :value (:search @fields)}]]\n       [:p (create-links @search-results)]])\n    \n    (defn- search-component\n      []\n      [search-form])\n\nThis is my `search-component`. \n\nWhat I want to happen is when you type in the input box on the navbar (say \n\"hello\", it calls `search-index` from the search-form with the parameter being \nthe value you type in (\"hello\") and then returns the results as a dropdown menu \nbelow.\n\n`search-form` works right now as a form on a html page, where you input some \ntext into a form and then the results are displayed below. I want to change it \nto be on the navbar instead of as a separate page, where the input form is on \nthe navbar and the results are displayed below\n\nHow would I have to change my search-form in order to do this?\n\nI think I can do something along the lines of this\n\n    (defn search-bar-form\n          []\n          [:div\n           [:input\n            {:type :text\n             :name :search\n             :on-change #(do\n                           (swap! fields assoc :search (-> % .-target .-value))\n                           (search-index (:search @fields)))\n             :value (:search @fields)}]\n           [:p (create-links @search-results)]])\n    \n    (defn- search-bar-component\n           []\n           [search-form])\n\nAny help would be much appreciated.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ClojureScript Dropdown Menu 'Rickesh Bedia' via ClojureScript Wed, 15 Mar 2017 03:31:18 -0700"},
{"body":"On Friday, March 3, 2017 at 6:58:53 PM UTC+1, Victor Igor wrote:\n> I'm using re-frame but I'm not getting to say: \"to go to url\". \n> What's the best way to create it ?  I tried with dispatch! but don't working \n> and also with .-location but secretary does not recognise the route.\n> \n> my code: http:\/\/pastebin.com\/LabamwYc \nHi Victor,\n\nhave you defined a route handler?\ne.g.:\n(defroute #\"\/search\/?\" [{:keys [query-params]}]\n  ;; do stuff)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Secretary in forms Luk\u00e1\u0161 Rychteck\u00fd Mon, 13 Mar 2017 01:25:21 -0700"},
{"body":"There is https:\/\/github.com\/tendant\/graphql-clj now, which is linked to from \nhttp:\/\/graphql.org\/code\/ \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Om.Next <=> GraphQL\/Relay Malcolm Sparks Wed, 08 Mar 2017 10:33:44 -0800"},
{"body":"Also solved my problem by adding [com.google.guava\/guava \"21.0\"] to my \nproject.clj \nOn Thursday, 2 March 2017 13:45:29 UTC+1, Dirk Bergmann wrote:\n>\n> Had the same issue. Fixed it by upgrading guava dependency to \n> [com.google.guava\/guava \"21.0\"]\n>\n> On Sunday, January 29, 2017 at 3:01:16 AM UTC+7, Francesco Bellomi wrote:\n>>\n>> Found, thanks! \n>>\n>> Francesco\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.456, Externs Inference & Comprehensive JS Modules Support Varga Radu Tue, 07 Mar 2017 04:15:37 -0800"},
{"body":"I'm using re-frame but I'm not getting to say: \"to go to url\". \nWhat's the best way to create it ?  I tried with dispatch! but don't working \nand also with .-location but secretary does not recognise the route. \nmy code: http:\/\/pastebin.com\/LabamwYc\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Secretary in forms Victor Igor Fri, 03 Mar 2017 09:59:15 -0800"},
{"body":"Our open source learning group is hosting the free online webinar _Essential \nKlipse_ this Saturday at 7 pm UTC. ClojureScript fundamentals will also be \ndiscussed. Everyone is welcome! \nKlipse is a simple client-side code evaluator, pluggable on any web page. The \nessence of Klipse is interactivity. Interactivity is a vital part of an \neffective learning experience. Klipse embraces the concept of code \ninteractivity and makes it available everywhere, e.g. in any web page!\n\n\nhttp:\/\/discuss.thevalueoflearning.org\/t\/webinar-discussion-2-essential-klipse\/39?u=jay\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Free Clojure webinar about Klipse this weekend Jay Martin Wed, 01 Mar 2017 11:56:38 -0800"},
{"body":"This is a known issue with the latest Closure Compiler release. You will\nneed to specify the previous version of Closure Compiler via your\ndependency tool. \nDavid\n\nOn Fri, Feb 24, 2017 at 11:46 PM, Rangel Spasov <raspa...@gmail.com> wrote:\n\n> Hey guys,\n>\n> I'm getting this error. It seems that it's happening inside the transpiled\n> core.async sources. The error carrot at line 1444 points at the semicolon,\n> pretty strange.\n>\n>\n> Feb 24, 2017 8:38:19 PM com.google.javascript.jscomp.LoggerErrorManager\n> println\n> SEVERE: \n> \/Users\/raspasov\/projects\/project123\/target\/ios\/cljs\/core\/async.js:1444:\n> ERROR - Parse error. No newline allowed before '=>'\n> var inst_33727 = async(inst_33726); (^ points at the semicolon)\n>\n>\n> Feb 24, 2017 8:38:19 PM com.google.javascript.jscomp.LoggerErrorManager\n> printSummary\n> WARNING: 1 error(s), 4 warning(s)\n> ERROR: JSC_PARSE_ERROR. Parse error. No newline allowed before '=>' at\n> \/Users\/raspasov\/projects\/project123\/target\/ios\/cljs\/core\/async.js line\n> 1444 : 34\n>\n> I tried both :parallel-build true\/false but it doesn't make a difference.\n> It works fine on [org.clojure\/clojurescript \"1.9.473\"]\n>\n>\n> Here's how the async.js source looks like around line 1444.\n>\n> return cljs.core.cst$kw$recur;\n> } else {\n> if((state_val_33738 === (2))){\n> var state_33737__$1 = state_33737;\n> return cljs.core.async.impl.ioc_helpers.take_BANG_(state_\n> 33737__$1,(4),jobs);\n> } else {\n> if((state_val_33738 === (3))){\n> var inst_33735 = (state_33737[(2)]);\n> var state_33737__$1 = state_33737;\n> return cljs.core.async.impl.ioc_helpers.return_chan(state_\n> 33737__$1,inst_33735);\n> } else {\n> if((state_val_33738 === (4))){\n> var inst_33726 = (state_33737[(2)]);\n> var inst_33727 = async(inst_33726); <<<<<<<<<<<<<<<< This is the error\n> line number 1444\n> var state_33737__$1 = state_33737;\n> if(cljs.core.truth_(inst_33727)){\n> var statearr_33743_33989 = state_33737__$1;\n> (statearr_33743_33989[(1)] = (5));\n>\n> } else {\n> var statearr_33744_33990 = state_33737__$1;\n> (statearr_33744_33990[(1)] = (6));\n>\n> }\n>\n> return cljs.core.cst$kw$recur;\n> } else {\n> if((state_val_33738 === (5))){\n> var state_33737__$1 = state_33737;\n> var statearr_33745_33992 = state_33737__$1;\n> (statearr_33745_33992[(2)] = null);\n>\n> (statearr_33745_33992[(1)] = (2));\n>\n>\n> return cljs.core.cst$kw$recur;\n> } else {\n> if((state_val_33738 === (6))){\n> var state_33737__$1 = state_33737;\n> var statearr_33746_33993 = state_33737__$1;\n> (statearr_33746_33993[(2)] = null);\n>\n> (statearr_33746_33993[(1)] = (7));\n>\n>\n> return cljs.core.cst$kw$recur;\n> } else {\n> if((state_val_33738 === (7))){\n> var inst_33733 = (state_33737[(2)]);\n> var state_33737__$1 = state_33737;\n> var statearr_33747_33994 = state_33737__$1;\n> (statearr_33747_33994[(2)] = inst_33733);\n>\n> (statearr_33747_33994[(1)] = (3));\n>\n>\n> return cljs.core.cst$kw$recur;\n> } else {\n> return null;\n> }\n> }\n> }\n> }\n> }\n> }\n> }\n>\n>\n> On Friday, February 24, 2017 at 4:21:35 PM UTC-8, David Nolen wrote:\n> > Just cut 1.9.494 to back out some macros that were made unintentionally\n> private.\n> >\n> >\n> > On Fri, Feb 24, 2017 at 4:47 PM, David Nolen <dnolen...@gmail.com>\n> wrote:\n> >\n> >\n> > ClojureScript, the Clojure compiler that emits JavaScript source code.\n> >\n> >\n> > README and source code: https:\/\/github.com\/clojure\/clojurescript\n> >\n> >\n> > Leiningen dependency information:\n> >\n> >\n> > [org.clojure\/clojurescript \"1.9.493\"]\n> >\n> >\n> > This is a bugfix release.\n> >\n> >\n> > As always, feedback welcome!\n> >\n> >\n> > ### Fixes\n> > * CLJS-1948: Possible race condition in compiler w\/ parallel-build true\n> > * CLJS-1941: `cljs.compiler\/cljs-files-in` shouldn't return `.cljc`\n> files if a `.cljs` file exists for the namespace\n> > * CLJS-1940: Undeclared var warning when invoking a protocol method on a\n> `js` interop form\n> > * CLJS-1951: Missing 0 and 1 arity versions of interleave\n> > * CLJS-1952: Bump Closure Compiler to Feb 2017 release\n> > * CLJS-1937: Self-host: undeclared cljs.core$macros\/mod when compiling\n> cljs\/core.cljs\n> > * CLJS-1936: cljs.analyzer declares vars which are only used in Clojure\n> > * CLJS-1949: Self-host: cljs.compiler\/munge doesn't preserve JVM\n> compiler semantics\n> > * CLJS-1950: Eliminate instances of #^\n> > * CLJS-1943: Self-host: `cljs.pprint`'s macros can't be compiled\n> > * CLJS-1945: cljs.spec\/every-impl kind-fn kind-form dead code\n> > * CLJS-1944: Can't spec generate non-vector collections\n> > * CLJS-1946: Self-hosted: don't emit `goog.require` calls for foreign\n> libs if optimizations different than `:none`\n> > * CLJS-1636: Mark some symbols in core macros ns as private\n> > * CLJS-1939: Fix Node load_file call for foreign-deps\n> > * CLJS-1942: Self-host: `cljs.env.macros` and `cljs.analyzer.macros`\n> can't be loaded\n> > * CLJS-1935: When calling cljs.spec\/valid?, subsequent predicates of\n> cljs.spec\/and are evaluated even when early predicate is unsatisfied\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: ANN: ClojureScript 1.9.493, another bugfix release David Nolen Wed, 01 Mar 2017 10:38:36 -0800"},
{"body":"Thanks:) \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: app.js around 1.9MB : need help Oskar Skuteli Wed, 01 Mar 2017 06:50:38 -0800"},
{"body":"I did some digging\/manual shrinking. \n\nIt seems that any core.async code with the latest version of ClojureScript does \nnot compile under :advanced. I suspect the problem lies with the bump of Google \nClosure dependency and\/or core.async. \nI made a repo showing a minimal case:\n\nhttps:\/\/github.com\/raspasov\/cljs-1.9.494-core-async-broken\n\nOn Friday, February 24, 2017 at 8:51:10 PM UTC-8, Rangel Spasov wrote:\n> Forgot to add: this is my :compiler settings map. \n> \n> {:output-to          \"index.ios.js\"\n>  :main               \"env.ios.main\"\n>  :output-dir         \"target\/ios\"\n>  :static-fns         true\n>  :optimize-constants true\n>  :parallel-build     true\n>  ;:pretty-print       true\n>  ;:pseudo-names       true\n>  :source-map         \"cljs-source-map.js\"\n>  :optimizations      :advanced\n>  :externs            [\"externs\/externs.js\"]\n>  :closure-defines    {\"goog.DEBUG\" false}}\n> \n> On Friday, February 24, 2017 at 8:46:03 PM UTC-8, Rangel Spasov wrote:\n> > Hey guys,\n> > \n> > I'm getting this error. It seems that it's happening inside the transpiled \n> > core.async sources. The error carrot at line 1444 points at the semicolon, \n> > pretty strange.\n> > \n> > \n> > Feb 24, 2017 8:38:19 PM com.google.javascript.jscomp.LoggerErrorManager \n> > println\n> > SEVERE: \n> > \/Users\/raspasov\/projects\/project123\/target\/ios\/cljs\/core\/async.js:1444: \n> > ERROR - Parse error. No newline allowed before '=>'\n> > var inst_33727 = async(inst_33726); (^ points at the semicolon)\n> >                                 \n> > \n> > Feb 24, 2017 8:38:19 PM com.google.javascript.jscomp.LoggerErrorManager \n> > printSummary\n> > WARNING: 1 error(s), 4 warning(s)\n> > ERROR: JSC_PARSE_ERROR. Parse error. No newline allowed before '=>' at \n> > \/Users\/raspasov\/projects\/project123\/target\/ios\/cljs\/core\/async.js line 1444 \n> > : 34\n> > \n> > I tried both :parallel-build true\/false but it doesn't make a difference. \n> > It works fine on [org.clojure\/clojurescript \"1.9.473\"]\n> > \n> > \n> > Here's how the async.js source looks like around line 1444.\n> > \n> > return cljs.core.cst$kw$recur;\n> > } else {\n> > if((state_val_33738 === (2))){\n> > var state_33737__$1 = state_33737;\n> > return \n> > cljs.core.async.impl.ioc_helpers.take_BANG_(state_33737__$1,(4),jobs);\n> > } else {\n> > if((state_val_33738 === (3))){\n> > var inst_33735 = (state_33737[(2)]);\n> > var state_33737__$1 = state_33737;\n> > return \n> > cljs.core.async.impl.ioc_helpers.return_chan(state_33737__$1,inst_33735);\n> > } else {\n> > if((state_val_33738 === (4))){\n> > var inst_33726 = (state_33737[(2)]);\n> > var inst_33727 = async(inst_33726); <<<<<<<<<<<<<<<< This is the error line \n> > number 1444\n> > var state_33737__$1 = state_33737;\n> > if(cljs.core.truth_(inst_33727)){\n> > var statearr_33743_33989 = state_33737__$1;\n> > (statearr_33743_33989[(1)] = (5));\n> > \n> > } else {\n> > var statearr_33744_33990 = state_33737__$1;\n> > (statearr_33744_33990[(1)] = (6));\n> > \n> > }\n> > \n> > return cljs.core.cst$kw$recur;\n> > } else {\n> > if((state_val_33738 === (5))){\n> > var state_33737__$1 = state_33737;\n> > var statearr_33745_33992 = state_33737__$1;\n> > (statearr_33745_33992[(2)] = null);\n> > \n> > (statearr_33745_33992[(1)] = (2));\n> > \n> > \n> > return cljs.core.cst$kw$recur;\n> > } else {\n> > if((state_val_33738 === (6))){\n> > var state_33737__$1 = state_33737;\n> > var statearr_33746_33993 = state_33737__$1;\n> > (statearr_33746_33993[(2)] = null);\n> > \n> > (statearr_33746_33993[(1)] = (7));\n> > \n> > \n> > return cljs.core.cst$kw$recur;\n> > } else {\n> > if((state_val_33738 === (7))){\n> > var inst_33733 = (state_33737[(2)]);\n> > var state_33737__$1 = state_33737;\n> > var statearr_33747_33994 = state_33737__$1;\n> > (statearr_33747_33994[(2)] = inst_33733);\n> > \n> > (statearr_33747_33994[(1)] = (3));\n> > \n> > \n> > return cljs.core.cst$kw$recur;\n> > } else {\n> > return null;\n> > }\n> > }\n> > }\n> > }\n> > }\n> > }\n> > }\n> > \n> > \n> > On Friday, February 24, 2017 at 4:21:35 PM UTC-8, David Nolen wrote:\n> > > Just cut 1.9.494 to back out some macros that were made unintentionally \n> > > private.\n> > > \n> > > \n> > > On Fri, Feb 24, 2017 at 4:47 PM, David Nolen <dnolen...@gmail.com> wrote:\n> > > \n> > > \n> > > ClojureScript, the Clojure compiler that emits JavaScript source code.\n> > > \n> > > \n> > > README and source code: https:\/\/github.com\/clojure\/clojurescript\n> > > \n> > > \n> > > Leiningen dependency information:\n> > > \n> > > \n> > > [org.clojure\/clojurescript \"1.9.493\"]\n> > > \n> > > \n> > > This is a bugfix release.\n> > > \n> > > \n> > > As always, feedback welcome!\n> > > \n> > > \n> > > ### Fixes\n> > > * CLJS-1948: Possible race condition in compiler w\/ parallel-build true\n> > > * CLJS-1941: `cljs.compiler\/cljs-files-in` shouldn't return `.cljc` files \n> > > if a `.cljs` file exists for the namespace\n> > > * CLJS-1940: Undeclared var warning when invoking a protocol method on a \n> > > `js` interop form\n> > > * CLJS-1951: Missing 0 and 1 arity versions of interleave\n> > > * CLJS-1952: Bump Closure Compiler to Feb 2017 release\n> > > * CLJS-1937: Self-host: undeclared cljs.core$macros\/mod when compiling \n> > > cljs\/core.cljs\n> > > * CLJS-1936: cljs.analyzer declares vars which are only used in Clojure\n> > > * CLJS-1949: Self-host: cljs.compiler\/munge doesn't preserve JVM compiler \n> > > semantics\n> > > * CLJS-1950: Eliminate instances of #^\n> > > * CLJS-1943: Self-host: `cljs.pprint`'s macros can't be compiled\n> > > * CLJS-1945: cljs.spec\/every-impl kind-fn kind-form dead code\n> > > * CLJS-1944: Can't spec generate non-vector collections\n> > > * CLJS-1946: Self-hosted: don't emit `goog.require` calls for foreign \n> > > libs if optimizations different than `:none`\n> > > * CLJS-1636: Mark some symbols in core macros ns as private\n> > > * CLJS-1939: Fix Node load_file call for foreign-deps\n> > > * CLJS-1942: Self-host: `cljs.env.macros` and `cljs.analyzer.macros` \n> > > can't be loaded\n> > > * CLJS-1935: When calling cljs.spec\/valid?, subsequent predicates of \n> > > cljs.spec\/and are evaluated even when early predicate is unsatisfied\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.493, another bugfix release Rangel Spasov Sun, 26 Feb 2017 13:48:47 -0800"},
{"body":"What version of CLJS are you using? The patch was introduced in CLJS\n1.9.183. Running on Planck this seems to work: \ncljs.user=> (js->clj (clj->js {\"a\" 1}) :keywordize-keys true)\n{:a 1}\n\nI have a vague memory that some of the types in the DOM API behave like JS\nobjects, but aren\u2019t actually JS primitives (strings, arrays), so js->clj\ndoesn\u2019t work as expected on them. From memory ClientRect\n<https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Element\/getClientRects>\n(or something like it) was one of these. That could possibly be the issue?\n\nOn Mon, Feb 27, 2017 at 6:07 AM Varga Radu <varga.radu.anto...@gmail.com>\nwrote:\n\n> On Thursday, 7 January 2016 18:10:22 UTC+1, Nicol\u00e1s Berger  wrote:\n> > Pretty old thread, but it turns out there's a bug in the 1-arity version\n> of js->clj: it passes a map instead of keyword arguments to set the default\n> of :keywordize-keys false. It works fine, because keywordize-keys ends as\n> nil by default, which is falsey of course... But when you (or me, like I\n> did a few minutes ago :) ) try to do the same but passing {:keywordize-keys\n> true} you find that it doesn't work as you expect.\n> >\n> > Just sent a patch to fix this:\n> http:\/\/dev.clojure.org\/jira\/browse\/CLJS-1540\n>\n> The option \":keywordize-keys\" still doesn't work for me.\n> Usage: (js->clj response :keywordize-keys true))\n> I still get the stringed-key array-map.\n> Any ideas why?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: js->clj keywords Daniel Compton Sun, 26 Feb 2017 11:21:44 -0800"},
{"body":"On Thursday, 7 January 2016 18:10:22 UTC+1, Nicol\u00e1s Berger  wrote:\n> Pretty old thread, but it turns out there's a bug in the 1-arity version of \n> js->clj: it passes a map instead of keyword arguments to set the default of \n> :keywordize-keys false. It works fine, because keywordize-keys ends as nil by \n> default, which is falsey of course... But when you (or me, like I did a few \n> minutes ago :) ) try to do the same but passing {:keywordize-keys true} you \n> find that it doesn't work as you expect.\n> \n> Just sent a patch to fix this: http:\/\/dev.clojure.org\/jira\/browse\/CLJS-1540 \nThe option \":keywordize-keys\" still doesn't work for me. \nUsage: (js->clj response :keywordize-keys true))\nI still get the stringed-key array-map.\nAny ideas why?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: js->clj keywords Varga Radu Sun, 26 Feb 2017 09:08:42 -0800"},
{"body":"Is tab completion supported in lein figwheel as it is in lein repl?\n\nfor example, say I \"require\" as naespace in a clojurescript (figwheel based) \nrepl. What is the easiest way to list its contents? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] tab completion in lein figwheel Oded Badt Sat, 25 Feb 2017 06:03:15 -0800"},
{"body":"Forgot to add: this is my :compiler settings map. \n\n{:output-to          \"index.ios.js\"\n :main               \"env.ios.main\"\n :output-dir         \"target\/ios\"\n :static-fns         true\n :optimize-constants true\n :parallel-build     true\n ;:pretty-print       true\n ;:pseudo-names       true\n :source-map         \"cljs-source-map.js\"\n :optimizations      :advanced\n :externs            [\"externs\/externs.js\"]\n :closure-defines    {\"goog.DEBUG\" false}} \nOn Friday, February 24, 2017 at 8:46:03 PM UTC-8, Rangel Spasov wrote:\n> Hey guys,\n> \n> I'm getting this error. It seems that it's happening inside the transpiled \n> core.async sources. The error carrot at line 1444 points at the semicolon, \n> pretty strange.\n> \n> \n> Feb 24, 2017 8:38:19 PM com.google.javascript.jscomp.LoggerErrorManager \n> println\n> SEVERE: \n> \/Users\/raspasov\/projects\/project123\/target\/ios\/cljs\/core\/async.js:1444: ERROR \n> - Parse error. No newline allowed before '=>'\n> var inst_33727 = async(inst_33726); (^ points at the semicolon)\n>                                 \n> \n> Feb 24, 2017 8:38:19 PM com.google.javascript.jscomp.LoggerErrorManager \n> printSummary\n> WARNING: 1 error(s), 4 warning(s)\n> ERROR: JSC_PARSE_ERROR. Parse error. No newline allowed before '=>' at \n> \/Users\/raspasov\/projects\/project123\/target\/ios\/cljs\/core\/async.js line 1444 : \n> 34\n> \n> I tried both :parallel-build true\/false but it doesn't make a difference. It \n> works fine on [org.clojure\/clojurescript \"1.9.473\"]\n> \n> \n> Here's how the async.js source looks like around line 1444.\n> \n> return cljs.core.cst$kw$recur;\n> } else {\n> if((state_val_33738 === (2))){\n> var state_33737__$1 = state_33737;\n> return cljs.core.async.impl.ioc_helpers.take_BANG_(state_33737__$1,(4),jobs);\n> } else {\n> if((state_val_33738 === (3))){\n> var inst_33735 = (state_33737[(2)]);\n> var state_33737__$1 = state_33737;\n> return \n> cljs.core.async.impl.ioc_helpers.return_chan(state_33737__$1,inst_33735);\n> } else {\n> if((state_val_33738 === (4))){\n> var inst_33726 = (state_33737[(2)]);\n> var inst_33727 = async(inst_33726); <<<<<<<<<<<<<<<< This is the error line \n> number 1444\n> var state_33737__$1 = state_33737;\n> if(cljs.core.truth_(inst_33727)){\n> var statearr_33743_33989 = state_33737__$1;\n> (statearr_33743_33989[(1)] = (5));\n> \n> } else {\n> var statearr_33744_33990 = state_33737__$1;\n> (statearr_33744_33990[(1)] = (6));\n> \n> }\n> \n> return cljs.core.cst$kw$recur;\n> } else {\n> if((state_val_33738 === (5))){\n> var state_33737__$1 = state_33737;\n> var statearr_33745_33992 = state_33737__$1;\n> (statearr_33745_33992[(2)] = null);\n> \n> (statearr_33745_33992[(1)] = (2));\n> \n> \n> return cljs.core.cst$kw$recur;\n> } else {\n> if((state_val_33738 === (6))){\n> var state_33737__$1 = state_33737;\n> var statearr_33746_33993 = state_33737__$1;\n> (statearr_33746_33993[(2)] = null);\n> \n> (statearr_33746_33993[(1)] = (7));\n> \n> \n> return cljs.core.cst$kw$recur;\n> } else {\n> if((state_val_33738 === (7))){\n> var inst_33733 = (state_33737[(2)]);\n> var state_33737__$1 = state_33737;\n> var statearr_33747_33994 = state_33737__$1;\n> (statearr_33747_33994[(2)] = inst_33733);\n> \n> (statearr_33747_33994[(1)] = (3));\n> \n> \n> return cljs.core.cst$kw$recur;\n> } else {\n> return null;\n> }\n> }\n> }\n> }\n> }\n> }\n> }\n> \n> \n> On Friday, February 24, 2017 at 4:21:35 PM UTC-8, David Nolen wrote:\n> > Just cut 1.9.494 to back out some macros that were made unintentionally \n> > private.\n> > \n> > \n> > On Fri, Feb 24, 2017 at 4:47 PM, David Nolen <dnolen...@gmail.com> wrote:\n> > \n> > \n> > ClojureScript, the Clojure compiler that emits JavaScript source code.\n> > \n> > \n> > README and source code: https:\/\/github.com\/clojure\/clojurescript\n> > \n> > \n> > Leiningen dependency information:\n> > \n> > \n> > [org.clojure\/clojurescript \"1.9.493\"]\n> > \n> > \n> > This is a bugfix release.\n> > \n> > \n> > As always, feedback welcome!\n> > \n> > \n> > ### Fixes\n> > * CLJS-1948: Possible race condition in compiler w\/ parallel-build true\n> > * CLJS-1941: `cljs.compiler\/cljs-files-in` shouldn't return `.cljc` files \n> > if a `.cljs` file exists for the namespace\n> > * CLJS-1940: Undeclared var warning when invoking a protocol method on a \n> > `js` interop form\n> > * CLJS-1951: Missing 0 and 1 arity versions of interleave\n> > * CLJS-1952: Bump Closure Compiler to Feb 2017 release\n> > * CLJS-1937: Self-host: undeclared cljs.core$macros\/mod when compiling \n> > cljs\/core.cljs\n> > * CLJS-1936: cljs.analyzer declares vars which are only used in Clojure\n> > * CLJS-1949: Self-host: cljs.compiler\/munge doesn't preserve JVM compiler \n> > semantics\n> > * CLJS-1950: Eliminate instances of #^\n> > * CLJS-1943: Self-host: `cljs.pprint`'s macros can't be compiled\n> > * CLJS-1945: cljs.spec\/every-impl kind-fn kind-form dead code\n> > * CLJS-1944: Can't spec generate non-vector collections\n> > * CLJS-1946: Self-hosted: don't emit `goog.require` calls for foreign libs \n> > if optimizations different than `:none`\n> > * CLJS-1636: Mark some symbols in core macros ns as private\n> > * CLJS-1939: Fix Node load_file call for foreign-deps\n> > * CLJS-1942: Self-host: `cljs.env.macros` and `cljs.analyzer.macros` can't \n> > be loaded\n> > * CLJS-1935: When calling cljs.spec\/valid?, subsequent predicates of \n> > cljs.spec\/and are evaluated even when early predicate is unsatisfied\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.493, another bugfix release Rangel Spasov Fri, 24 Feb 2017 20:51:21 -0800"},
{"body":"Hey guys,\n\nI'm getting this error. It seems that it's happening inside the transpiled \ncore.async sources. The error carrot at line 1444 points at the semicolon, \npretty strange. \n\nFeb 24, 2017 8:38:19 PM com.google.javascript.jscomp.LoggerErrorManager println\nSEVERE: \/Users\/raspasov\/projects\/project123\/target\/ios\/cljs\/core\/async.js:1444: \nERROR - Parse error. No newline allowed before '=>'\nvar inst_33727 = async(inst_33726); (^ points at the semicolon)\n                                \n\nFeb 24, 2017 8:38:19 PM com.google.javascript.jscomp.LoggerErrorManager \nprintSummary\nWARNING: 1 error(s), 4 warning(s)\nERROR: JSC_PARSE_ERROR. Parse error. No newline allowed before '=>' at \n\/Users\/raspasov\/projects\/project123\/target\/ios\/cljs\/core\/async.js line 1444 : 34\n\nI tried both :parallel-build true\/false but it doesn't make a difference. It \nworks fine on [org.clojure\/clojurescript \"1.9.473\"]\n\n\nHere's how the async.js source looks like around line 1444.\n\nreturn cljs.core.cst$kw$recur;\n} else {\nif((state_val_33738 === (2))){\nvar state_33737__$1 = state_33737;\nreturn cljs.core.async.impl.ioc_helpers.take_BANG_(state_33737__$1,(4),jobs);\n} else {\nif((state_val_33738 === (3))){\nvar inst_33735 = (state_33737[(2)]);\nvar state_33737__$1 = state_33737;\nreturn cljs.core.async.impl.ioc_helpers.return_chan(state_33737__$1,inst_33735);\n} else {\nif((state_val_33738 === (4))){\nvar inst_33726 = (state_33737[(2)]);\nvar inst_33727 = async(inst_33726); <<<<<<<<<<<<<<<< This is the error line \nnumber 1444\nvar state_33737__$1 = state_33737;\nif(cljs.core.truth_(inst_33727)){\nvar statearr_33743_33989 = state_33737__$1;\n(statearr_33743_33989[(1)] = (5));\n\n} else {\nvar statearr_33744_33990 = state_33737__$1;\n(statearr_33744_33990[(1)] = (6));\n\n}\n\nreturn cljs.core.cst$kw$recur;\n} else {\nif((state_val_33738 === (5))){\nvar state_33737__$1 = state_33737;\nvar statearr_33745_33992 = state_33737__$1;\n(statearr_33745_33992[(2)] = null);\n\n(statearr_33745_33992[(1)] = (2));\n\n\nreturn cljs.core.cst$kw$recur;\n} else {\nif((state_val_33738 === (6))){\nvar state_33737__$1 = state_33737;\nvar statearr_33746_33993 = state_33737__$1;\n(statearr_33746_33993[(2)] = null);\n\n(statearr_33746_33993[(1)] = (7));\n\n\nreturn cljs.core.cst$kw$recur;\n} else {\nif((state_val_33738 === (7))){\nvar inst_33733 = (state_33737[(2)]);\nvar state_33737__$1 = state_33737;\nvar statearr_33747_33994 = state_33737__$1;\n(statearr_33747_33994[(2)] = inst_33733);\n\n(statearr_33747_33994[(1)] = (3));\n\n\nreturn cljs.core.cst$kw$recur;\n} else {\nreturn null;\n}\n}\n}\n}\n}\n}\n}\n\n\nOn Friday, February 24, 2017 at 4:21:35 PM UTC-8, David Nolen wrote:\n> Just cut 1.9.494 to back out some macros that were made unintentionally \n> private.\n> \n> \n> On Fri, Feb 24, 2017 at 4:47 PM, David Nolen <dnolen...@gmail.com> wrote:\n> \n> \n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n> \n> \n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n> \n> \n> Leiningen dependency information:\n> \n> \n> [org.clojure\/clojurescript \"1.9.493\"]\n> \n> \n> This is a bugfix release.\n> \n> \n> As always, feedback welcome!\n> \n> \n> ### Fixes\n> * CLJS-1948: Possible race condition in compiler w\/ parallel-build true\n> * CLJS-1941: `cljs.compiler\/cljs-files-in` shouldn't return `.cljc` files if \n> a `.cljs` file exists for the namespace\n> * CLJS-1940: Undeclared var warning when invoking a protocol method on a `js` \n> interop form\n> * CLJS-1951: Missing 0 and 1 arity versions of interleave\n> * CLJS-1952: Bump Closure Compiler to Feb 2017 release\n> * CLJS-1937: Self-host: undeclared cljs.core$macros\/mod when compiling \n> cljs\/core.cljs\n> * CLJS-1936: cljs.analyzer declares vars which are only used in Clojure\n> * CLJS-1949: Self-host: cljs.compiler\/munge doesn't preserve JVM compiler \n> semantics\n> * CLJS-1950: Eliminate instances of #^\n> * CLJS-1943: Self-host: `cljs.pprint`'s macros can't be compiled\n> * CLJS-1945: cljs.spec\/every-impl kind-fn kind-form dead code\n> * CLJS-1944: Can't spec generate non-vector collections\n> * CLJS-1946: Self-hosted: don't emit `goog.require` calls for foreign libs if \n> optimizations different than `:none`\n> * CLJS-1636: Mark some symbols in core macros ns as private\n> * CLJS-1939: Fix Node load_file call for foreign-deps\n> * CLJS-1942: Self-host: `cljs.env.macros` and `cljs.analyzer.macros` can't be \n> loaded\n> * CLJS-1935: When calling cljs.spec\/valid?, subsequent predicates of \n> cljs.spec\/and are evaluated even when early predicate is unsatisfied\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.493, another bugfix release Rangel Spasov Fri, 24 Feb 2017 20:46:26 -0800"},
{"body":"Just cut 1.9.494 to back out some macros that were made unintentionally\nprivate. \nOn Fri, Feb 24, 2017 at 4:47 PM, David Nolen <dnolen.li...@gmail.com> wrote:\n\n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>\n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>\n> Leiningen dependency information:\n>\n> [org.clojure\/clojurescript \"1.9.493\"]\n>\n> This is a bugfix release.\n>\n> As always, feedback welcome!\n>\n> ### Fixes\n> * CLJS-1948: Possible race condition in compiler w\/ parallel-build true\n> * CLJS-1941: `cljs.compiler\/cljs-files-in` shouldn't return `.cljc` files\n> if a `.cljs` file exists for the namespace\n> * CLJS-1940: Undeclared var warning when invoking a protocol method on a\n> `js` interop form\n> * CLJS-1951: Missing 0 and 1 arity versions of interleave\n> * CLJS-1952: Bump Closure Compiler to Feb 2017 release\n> * CLJS-1937: Self-host: undeclared cljs.core$macros\/mod when compiling\n> cljs\/core.cljs\n> * CLJS-1936: cljs.analyzer declares vars which are only used in Clojure\n> * CLJS-1949: Self-host: cljs.compiler\/munge doesn't preserve JVM compiler\n> semantics\n> * CLJS-1950: Eliminate instances of #^\n> * CLJS-1943: Self-host: `cljs.pprint`'s macros can't be compiled\n> * CLJS-1945: cljs.spec\/every-impl kind-fn kind-form dead code\n> * CLJS-1944: Can't spec generate non-vector collections\n> * CLJS-1946: Self-hosted: don't emit `goog.require` calls for foreign libs\n> if optimizations different than `:none`\n> * CLJS-1636: Mark some symbols in core macros ns as private\n> * CLJS-1939: Fix Node load_file call for foreign-deps\n> * CLJS-1942: Self-host: `cljs.env.macros` and `cljs.analyzer.macros` can't\n> be loaded\n> * CLJS-1935: When calling cljs.spec\/valid?, subsequent predicates of\n> cljs.spec\/and are evaluated even when early predicate is unsatisfied\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.493, another bugfix release David Nolen Fri, 24 Feb 2017 16:22:10 -0800"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.493\"]\n\nThis is a bugfix release.\n\nAs always, feedback welcome!\n\n### Fixes\n* CLJS-1948: Possible race condition in compiler w\/ parallel-build true\n* CLJS-1941: `cljs.compiler\/cljs-files-in` shouldn't return `.cljc` files\nif a `.cljs` file exists for the namespace\n* CLJS-1940: Undeclared var warning when invoking a protocol method on a\n`js` interop form\n* CLJS-1951: Missing 0 and 1 arity versions of interleave\n* CLJS-1952: Bump Closure Compiler to Feb 2017 release\n* CLJS-1937: Self-host: undeclared cljs.core$macros\/mod when compiling\ncljs\/core.cljs\n* CLJS-1936: cljs.analyzer declares vars which are only used in Clojure\n* CLJS-1949: Self-host: cljs.compiler\/munge doesn't preserve JVM compiler\nsemantics\n* CLJS-1950: Eliminate instances of #^\n* CLJS-1943: Self-host: `cljs.pprint`'s macros can't be compiled\n* CLJS-1945: cljs.spec\/every-impl kind-fn kind-form dead code\n* CLJS-1944: Can't spec generate non-vector collections\n* CLJS-1946: Self-hosted: don't emit `goog.require` calls for foreign libs\nif optimizations different than `:none`\n* CLJS-1636: Mark some symbols in core macros ns as private\n* CLJS-1939: Fix Node load_file call for foreign-deps\n* CLJS-1942: Self-host: `cljs.env.macros` and `cljs.analyzer.macros` can't\nbe loaded\n* CLJS-1935: When calling cljs.spec\/valid?, subsequent predicates of\ncljs.spec\/and are evaluated even when early predicate is unsatisfied\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.493, another bugfix release David Nolen Fri, 24 Feb 2017 13:47:38 -0800"},
{"body":"Please file a report in JIRA. Please do not link to anything outside in the\nticket, all instructions to reproduce should be inline in the issue. \nThanks!\nDavid\n\nOn Fri, Feb 17, 2017 at 11:37 AM, Dustin Getz <dustin.g...@gmail.com> wrote:\n\n> Just also repped it with clojure 1.9.0-alpha14 via `lein mies new` (as a\n> tight a test case as I know how) - here's that repo\n> https:\/\/github.com\/dustingetz\/data_readers.cljc-issue-2\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: how to use new data_readers.cljc feature with deftype David Nolen Fri, 24 Feb 2017 13:46:06 -0800"},
{"body":"On Friday, February 24, 2017 at 11:04:32 PM UTC+2, Oskar Skuteli wrote:\n> Hi, can you please give any info on the bug in cljsjs\/material-ui you've \n> found?\n> I'm new to cljsjs packages, but would like to try to fix it, as my app relies \n> on material-ui and its size is slowing things significantly... \nA note on the package readme should mostly take care of this: \nhttps:\/\/github.com\/cljsjs\/packages\/tree\/master\/material-ui#important-note but \nif not, you'd best ask madvas on Slack\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: app.js around 1.9MB : need help Juho Teperi Fri, 24 Feb 2017 13:13:37 -0800"},
{"body":"Hi, can you please give any info on the bug in cljsjs\/material-ui you've found?\nI'm new to cljsjs packages, but would like to try to fix it, as my app relies \non material-ui and its size is slowing things significantly... \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: app.js around 1.9MB : need help Oskar Skuteli Fri, 24 Feb 2017 13:04:47 -0800"},
{"body":"\u201cTransforming Data with ClojureScript\u201d is an online book at \nhttp:\/\/langintro.com\/cljsbook with interactive examples. \nIt is written for people who have not programmed before or are beginning \nprogrammers. The book is about two-thirds complete. Comments welcomed.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: Transforming Data with ClojureScript (online book in progress) J David Eisenberg Wed, 22 Feb 2017 08:40:53 -0800"},
{"body":"On Monday, February 20, 2017 at 8:29:27 AM UTC-7, Nicol\u00e1s Berger wrote:\n> Hi Ben,\n> \n> \n> Just a comment about this:\n> \n> \n> >\u00a0We also need to investigate parallel builds again - we had previously run \n> >into bugs here, but I didn\u2019t take the time to investigate more fully.\n> \n> \n> We also had run into random bugs when using parallel builds, but since\u00a0\n> CLJS-1614 was fixed\u00a0(released in 1.8.51) we are using it in our medium-sized \n> re-frame app (with many dependencies) with no issue. Even though we don't \n> have exact metrics, I'd say it cuts down compilation time by 30-40% in my \n> machine.\n> \n> \n> If you try it and still find any bug, I'd be interested in getting more \n> information about it :)\n> \n> \n> --\n> Nicolas\n> \n> \n> \n> \n> On Fri, Feb 10, 2017 at 12:42 PM, Ben Brinckerhoff <bhbrinc...@gmail.com> \n> wrote:\n> First of all, thanks to everyone for their hard work on Clojurescript and \n> related tooling. It\u2019s an incredibly productive and reliable stack to use.\n> \n> \n> \n> I\u2019m investigating ways to speed up compile times for a closed-source project. \n> We have about 8000 Clojurescript LOC and 200 Clojure LOC (in src and test \n> combined). Some very rough indicators: a fresh compile of our test build \n> takes about 60s. A small change to a file with maybe 15 reverse dependencies \n> takes about 12s using `cljsbuild auto`. We are using lein-cljsbuild 1.1.4 and \n> clojurescript \u201c1.9.293\u201d.\n> \n> \n> \n> These times are pretty good, but of course speeding up compiles shrinks our \n> feedback loop, both locally and on CI, where we do a number of fresh compiles \n> for different builds. As a result, we want to see if there are things we can \n> do to our code to speed up compiles.\n> \n> \n> \n> We have turned on the `verbose` and `compiler-stats` flags so we can see more \n> information about compile times. We hope to upgrade to 1.9.456 soon so we can \n> see per-file compile stats. We also need to investigate parallel builds again \n> - we had previously run into bugs here, but I didn\u2019t take the time to \n> investigate more fully.\n> \n> \n> \n> Besides total LOC, are there other aspects of code bases that are known to \n> slow down compiles? Perhaps macro expansion (we have a lot of core.async `go` \n> blocks in some namespaces)? Perhaps the complexity of the dependency graph \n> between namespaces? Something else? Has anyone else had experience altering a \n> CLJS code base to improve compile times? Or tweaking compiler flags? \n> `optimization` makes a big difference of course, but for my current \n> investigation, I'm ignoring optimization time.\n> \n> \n> \n> Also, I noticed that Clojurescript performance is an idea for the Google \n> Summer of Code \n> https:\/\/github.com\/clojars\/clojure-gsoc-2017\/blob\/master\/project-ideas.md#clojurescript-performance\n> \n> \n> \n> \u201cThere are many impactful enhancements we would like to make to ClojureScript \n> with respect to both runtime and compile time performance \u2026 For compile time \n> enhancements we should examine where parallelization, AST data representation \n> changes, or more aggressive caching of intermediate artifacts may deliver \n> faster development and production build time.\u201d\n> \n> \n> \n> I did a quick search of Clojurescript for perf issues on JIRA, but didn\u2019t see \n> anything related to these (apologies if I just missed something obvious!). Is \n> there a list somewhere of open issues that might improve perf in the \n> compiler? Or are those ideas mostly in the \u201cneeds investigation\u201d stage?\n> \n> \n> \n> Thanks very much!\n> \n> Ben\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> \n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript. \nNicolas,\n\nThat's a good idea. I'll try upgrading to the latest CLJS and give parallel \nbuilds another try!\n\nBen\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Ideas on how to change my code to compile faster Ben Brinckerhoff Tue, 21 Feb 2017 18:30:44 -0800"},
{"body":"You probably want to run\n\n$ script\/bootstrap # to set stuff up\n$ script\/test # to test the ClojureScript std lib \nIIRC, lein test tests the compiler, which would be why you wouldn\u2019t see\nyour ClojureScript test failing.\n\nThere is also https:\/\/github.com\/clojure\/clojurescript\/wiki\/Developers and\nhttps:\/\/github.com\/clojure\/clojurescript\/wiki\/Running-the-tests which will\nhelp you get setup.\n\nOn Sun, Feb 19, 2017 at 5:30 AM Andrea Richiardi <andrea.richia...@gmail.com>\nwrote:\n\nWow great, can't wait to see thrt. There are a bunch of launchers in the\nscript folder. This is how I use to run tests.\n\n--\nNote that posts from new members are moderated - please be patient with\nyour first post.\n---\nYou received this message because you are subscribed to the Google Groups\n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an\nemail to clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Running clojurescript's own test suite Daniel Compton Tue, 21 Feb 2017 16:14:50 -0800"},
{"body":"I ended up adding something like this to the parent component:\n\n[:div#parent\n  {:on-load #(let [items (js\/document.getElementsByClassName \"item\")]\n                        (dotimes [i (.-length items)]\n                          (.setAttribute (aget items i) \"itemscope\" \"\")))}\n  [:div.item \"BRMC\"]] \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Adding schema.org microdata using hiccup Divyansh Prakash Tue, 21 Feb 2017 13:31:42 -0800"},
{"body":"it's like... not possible with hiccup. Usually I do [:div {:itemscope true}\n\"BRMC\"] or perhaps [:div {:itemscope :itemscope} \"BRMC\"]. \nI hope that works out in this case as well.\n\n\/Linus\n\n2017-02-21 21:33 GMT+01:00 Divyansh Prakash <divyanshprakas...@gmail.com>:\n\n> Hi!\n>\n> I'm working on a music discovery website (http:\/\/www.rockhuntrs.com).\n> It's built on top of reagent-template.\n>\n> I now want to add schema.org microdata that looks like this:\n>\n> <div itemscope>\n>   BRMC\n> <\/div>\n>\n> How do I add the itemscope attribute?\n>\n> [:div {:itemscope ??} \"BRMC\"]\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Adding schema.org microdata using hiccup Linus Ericsson Tue, 21 Feb 2017 12:49:35 -0800"},
{"body":"Hi!\n\nI'm working on a music discovery website (http:\/\/www.rockhuntrs.com).\nIt's built on top of reagent-template. \nI now want to add schema.org microdata that looks like this:\n\n<div itemscope>\n  BRMC\n<\/div>\n\nHow do I add the itemscope attribute?\n\n[:div {:itemscope ??} \"BRMC\"]\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Adding schema.org microdata using hiccup Divyansh Prakash Tue, 21 Feb 2017 12:34:00 -0800"},
{"body":"Hi Max,\n\nIf you can do this at compile time, you could embed this logic in a macro, \nwhere Java capabilities are available. \nOtherwise, you\u2019d need to rely on facilities provided in your JavaScript \nenvironment for launching executables, and invoke those facilities using \nJavaScript interop. (For example, if your JavaScript runs in Node, you could \nuse Node\u2019s facilities.)\n\n- Mike\n\n> On Feb 21, 2017, at 5:14 AM, Max Muranov <phot...@gmail.com> wrote:\n> \n> Trying to launch shell from settings of Light Table IDE. \n> \n> ----------\n> (defn get-folder [path]\n>  (reduce #(str %1 \"\/\" %2) (butlast (.split path \"\\\\\"))))\n> \n> (require '(clojure.java shell))\n> \n> (defn exec-shell [file & commands]\n>  (println (:out (clojure.java.shell\/sh \"cmd\" \"\/c\" (str \"cd \" (get-folder \n> file)) (reduce #(str %1 \" & \" %2) \"\" commands)))))\n> \n> (cmd\/command {:command :user.say-hello\n>              :desc \"User: Lein Deps\"\n>              :exec (fn []\n>                      (let [ed (lt.objs.editor.pool\/last-active)]\n>                        (exec-shell (-> @ed :info :path) \"echo 1\")))})\n> ----------\n> \n> But it seems that I can't use java or clojure libs here. How can I execute a \n> command with clojurescript?\n> \n> Maybe there's a way to launch cmd.exe via full path?\n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Clojurescript exec shell command Mike Fikes Tue, 21 Feb 2017 07:46:55 -0800"},
{"body":"Trying to launch shell from settings of Light Table IDE. \n\n----------\n(defn get-folder [path]\n  (reduce #(str %1 \"\/\" %2) (butlast (.split path \"\\\\\")))) \n(require '(clojure.java shell))\n\n(defn exec-shell [file & commands]\n  (println (:out (clojure.java.shell\/sh \"cmd\" \"\/c\" (str \"cd \" (get-folder \nfile)) (reduce #(str %1 \" & \" %2) \"\" commands)))))\n\n(cmd\/command {:command :user.say-hello\n              :desc \"User: Lein Deps\"\n              :exec (fn []\n                      (let [ed (lt.objs.editor.pool\/last-active)]\n                        (exec-shell (-> @ed :info :path) \"echo 1\")))})\n----------\n\nBut it seems that I can't use java or clojure libs here. How can I execute a \ncommand with clojurescript?\n\nMaybe there's a way to launch cmd.exe via full path?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojurescript exec shell command Max Muranov Tue, 21 Feb 2017 07:42:54 -0800"},
{"body":"Hi Ben,\n\nJust a comment about this: \n> We also need to investigate parallel builds again - we had previously run\ninto bugs here, but I didn\u2019t take the time to investigate more fully.\n\nWe also had run into random bugs when using parallel builds, but since\nCLJS-1614\nwas fixed (released in 1.8.51) we are using it in our medium-sized re-frame\napp (with many dependencies) with no issue. Even though we don't have exact\nmetrics, I'd say it cuts down compilation time by 30-40% in my machine.\n\nIf you try it and still find any bug, I'd be interested in getting more\ninformation about it :)\n\n--\nNicolas\n\n\nOn Fri, Feb 10, 2017 at 12:42 PM, Ben Brinckerhoff <bhbrinckerh...@gmail.com\n> wrote:\n\n> First of all, thanks to everyone for their hard work on Clojurescript and\n> related tooling. It\u2019s an incredibly productive and reliable stack to use.\n>\n> I\u2019m investigating ways to speed up compile times for a closed-source\n> project. We have about 8000 Clojurescript LOC and 200 Clojure LOC (in src\n> and test combined). Some very rough indicators: a fresh compile of our test\n> build takes about 60s. A small change to a file with maybe 15 reverse\n> dependencies takes about 12s using `cljsbuild auto`. We are using\n> lein-cljsbuild 1.1.4 and clojurescript \u201c1.9.293\u201d.\n>\n> These times are pretty good, but of course speeding up compiles shrinks\n> our feedback loop, both locally and on CI, where we do a number of fresh\n> compiles for different builds. As a result, we want to see if there are\n> things we can do to our code to speed up compiles.\n>\n> We have turned on the `verbose` and `compiler-stats` flags so we can see\n> more information about compile times. We hope to upgrade to 1.9.456 soon so\n> we can see per-file compile stats. We also need to investigate parallel\n> builds again - we had previously run into bugs here, but I didn\u2019t take the\n> time to investigate more fully.\n>\n> Besides total LOC, are there other aspects of code bases that are known to\n> slow down compiles? Perhaps macro expansion (we have a lot of core.async\n> `go` blocks in some namespaces)? Perhaps the complexity of the dependency\n> graph between namespaces? Something else? Has anyone else had experience\n> altering a CLJS code base to improve compile times? Or tweaking compiler\n> flags? `optimization` makes a big difference of course, but for my current\n> investigation, I'm ignoring optimization time.\n>\n> Also, I noticed that Clojurescript performance is an idea for the Google\n> Summer of Code https:\/\/github.com\/clojars\/clojure-gsoc-2017\/blob\/master\/\n> project-ideas.md#clojurescript-performance\n>\n> \u201cThere are many impactful enhancements we would like to make to\n> ClojureScript with respect to both runtime and compile time performance \u2026\n> For compile time enhancements we should examine where parallelization, AST\n> data representation changes, or more aggressive caching of intermediate\n> artifacts may deliver faster development and production build time.\u201d\n>\n> I did a quick search of Clojurescript for perf issues on JIRA, but didn\u2019t\n> see anything related to these (apologies if I just missed something\n> obvious!). Is there a list somewhere of open issues that might improve perf\n> in the compiler? Or are those ideas mostly in the \u201cneeds investigation\u201d\n> stage?\n>\n> Thanks very much!\n> Ben\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Ideas on how to change my code to compile faster Nicol\u00e1s Berger Mon, 20 Feb 2017 07:30:07 -0800"},
{"body":"A crude and dirty solution would be to set a watcher on the atom directly.\n\nOn a side note: if this behavior remains consistent (:on-change only fires for \nuser interaction) then that's useful for components which affect each other. \nFor instance, consider a Fahrenheit \/ Celsius calculator with fields for each \ntemperature.  When you type a number in either field the other changes.  \n\nIf you implement this using add-watch or a React mechanism to update \n@fahrenheit every time @celsius changes and @celsius every time @fahrenheit \nchanges then you've set up a loop. (Floating point error defeats anything that \nchecks for same-values before updating).\n\n:on-change (meaning on user-instigated change) doesn't suffer that issue.  \nTyping in the Fahrenheit field fires an update to @celsius and hence the \nCelsius field; but there's no round trip.\n\nThat being said, is there a way to simulate user interaction and deliberately \nfire on-change events?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to force checkbox to raise on-change event on atom value change? Nathan Smutz Sat, 18 Feb 2017 10:17:05 -0800"},
{"body":"Wow great, can't wait to see thrt. There are a bunch of launchers in the script \nfolder. This is how I use to run tests. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Running clojurescript's own test suite Andrea Richiardi Sat, 18 Feb 2017 08:30:19 -0800"},
{"body":"Figly is building the next-generation platform as a service (PAAS) to transform \nenterprise software. We are led by a world-class team with a track record of \nsuccessful cloud startups, as well as leadership experience at the largest \nsoftware companies. \nThe platform includes a native mobile client written in written in \nClojureScript and uses React Native. The mobile team is a small team, offering \nour engineers a large share of independence and responsibility. We focus \nprimarily on the end user aspects of the platform: making offline first data \ncharacteristics the default, ensuring smooth, custom animations, designing a \ntemplating language for non-programmers templating language and making the \nplatform as performant as possible across widely varying application domains \nand workloads. In pursuit of this, we work closely with everyone in the \ncompany: other engineering teams, go-to-market teams, and the founders \nthemselves.\n\nYou will:\n\n* Attend a daily stand-up via video call to synchronize your work with the rest \nof the team\n* Design new features, expand the scope and capability of our mobile platform\n* Implement those features using ClojureScript compiled to JavaScript \nintegrated with React Native\n* Write clean, testable code\n* Participate in peer review of your own and other team member's code\n* Be responsible for shipping, updating and generally maintaining our mobile \napplication\n* Attend regular team tech talks, architecture reviews, iteration retrospectives\n\nOur ideal candidate is:\n\n* Versed in Clojure \/ ClojureScript development practices: tooling, testing, \nlibraries, idioms\n* Able to navigate modern JavaScript tooling and libraries, React primarily\n* Has exposure to iOS development: using XCode, reading Objective-C \/ Swift \nsource, understanding iOS APIs\n\nYou'll love working here:\n\n* Fast paced startup environment, rapidly growing and expanding\n* Culture of \u201cFreedom & Responsibility\u201d \n* Sustainable work ethos\n* Health Insurance\n* Work remotely from anywhere in the world: we currently collaborate across 4 \ntime zones and two continents\n\nPlease send your resume to j...@figlyinc.com\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [JOB] Clojurescript\/React Native jobs at Figly (remote) Ben Brinckerhoff Fri, 17 Feb 2017 14:31:23 -0800"},
{"body":"Just also repped it with clojure 1.9.0-alpha14 via `lein mies new` (as a tight \na test case as I know how) - here's that repo \nhttps:\/\/github.com\/dustingetz\/data_readers.cljc-issue-2 \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: how to use new data_readers.cljc feature with deftype Dustin Getz Fri, 17 Feb 2017 08:38:25 -0800"},
{"body":"The test case had an issue, my handler name was wrong (i just resolved and \npushed) but it didn't impact the error. The presence of the #' is causing the \nerror \n{cljs\/tag clojure.core\/identity\n app\/Foo  #'app.core\/read-Foo}\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: how to use new data_readers.cljc feature with deftype Dustin Getz Fri, 17 Feb 2017 08:14:46 -0800"},
{"body":"Hi, I am still a newbie so sorry in advance if I get something wrong!\n\nAssuming this is about reagent, I think you want to look into the \ncreate-class function along with the :component-will-update or the \n:component-did-update options, which is a way to trigger a function when the \ncomponent re-renders (due to state change). \nThat code presumably changes the state by either user click or external update, \nso I think would do the trick.\n\nReferences:\n\nhttp:\/\/stackoverflow.com\/questions\/28410192\/html-select-onchange-doesnt-fire-when-value-changes\n\nhttp:\/\/blog.ducky.io\/reagent-docs\/0.6.0-SNAPSHOT\/reagent.core.html#var-create-class\n\nIkuru\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to force checkbox to raise on-change event on atom value change? Ikuru Kanuma Fri, 17 Feb 2017 08:05:27 -0800"},
{"body":"That makes sense thank you, I have a compiler stack trace now.\n\nHere is a minimum test case that has the same stack trace, clone and run \"boot \ntest\", it is the top commit on master. \nhttps:\/\/github.com\/dustingetz\/data-readers-cljs-bug-test-case \njava.lang.ClassCastException: clojure.lang.Cons cannot be cast to \nclojure.lang.Named\n\nFull stack trace in gist: \nhttps:\/\/gist.github.com\/dustingetz\/30c5e87aaa5876f19a2eb7309b8d19ec\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: how to use new data_readers.cljc feature with deftype Dustin Getz Fri, 17 Feb 2017 08:05:03 -0800"},
{"body":"Hi!\n\nI have a checkbox which state may be changed on other item click. I have \nimplemented this with the following code: \n```\n(defn checkbox [state] ;; - 'state' is a Reagent atom\n  [:input\n    {:type :checkbox\n     :checked @state\n     :on-click #(swap! state not)\n     :value (if @state \"on\" \"off\")\n     :on-change #(.log js\/console \"changed!\" (.-checked (.-target %)))}])\n```\nBut in this case on-change event is fired only if I click directly to checkbox. \nWhen I modify 'state' atom outside (on other item click), checkbox is displayed \ncorrectly, but on-change event is not fired. How to fix this?\n\nThanks in advance!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How to force checkbox to raise on-change event on atom value change? Alexander Yanin Fri, 17 Feb 2017 07:06:40 -0800"},
{"body":"On Fri, Feb 17, 2017 at 9:25 AM, Dustin Getz <dustin.g...@gmail.com> wrote: \n> {DbId hypercrud.types\/read-DbId}\n\n\nI'm pretty sure that needs to be:\n\n{DbId #'hypercrud.types\/read-DbId}\n\nSo we can install the handler before it is actually defined.\n\nDavid\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: how to use new data_readers.cljc feature with deftype David Nolen Fri, 17 Feb 2017 07:05:56 -0800"},
{"body":"My data_readers.cljc file contains: \n{DbId hypercrud.types\/read-DbId}\n\nhypercrud.types.cljs: \n(def read-DbId #(apply ->DbId %))\n(deftype DbId [id conn-id] ...)\n\nThe compiler error suggests that it sees the symbol in data_readers, but not \nthe cljs implementation? Everything works fine in the runtime reader.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: how to use new data_readers.cljc feature with deftype Dustin Getz Fri, 17 Feb 2017 06:26:06 -0800"},
{"body":"Hi,\n\nI've been working on a port of the refs api from clojurescript (it's so much \neasier to implement an STM when there's only one thread to worry about!) and \nI'm getting ready to produce a patch to add to JIRA. There's just one catch: I \ncan't seem to get my tests to run. \nI added a test that consists of `(is false)` to \n`src\/test\/cljs\/cljs\/core_test.cljs` and i get 0 failures.\n\nIs there something I'm missing about how to get tests to run? I'm using `lein \ntest`\n\nCheers,\n\nJames\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Running clojurescript's own test suite james . laver Fri, 17 Feb 2017 06:12:07 -0800"},
{"body":"It doesn't work automatically. You need to setup data_readers.cljc to\nexplicitly handle each tag the reader might encounter. \nDavid\n\nOn Thu, Feb 16, 2017 at 12:40 PM, Dustin Getz <dustin.g...@gmail.com> wrote:\n\n> My expectation is the compiler, when it sees `(def foo #DbId [1 2])` will\n> emit javascript equal to `(def foo (hypercrud.types\/read-DbId [1 2])`\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: how to use new data_readers.cljc feature with deftype David Nolen Fri, 17 Feb 2017 06:02:43 -0800"},
{"body":"On Thursday, February 16, 2017 at 6:40:41 PM UTC+1, Dustin Getz wrote:\n> My expectation is the compiler, when it sees `(def foo #DbId [1 2])` will \n> emit javascript equal to `(def foo (hypercrud.types\/read-DbId [1 2])` \nYour assumption is incorrect. I cannot answer your question since I have not \nused data_readers.cljc in CLJS. I have however used it in Clojure and my one \nand only recommendation is: DON'T!\n\nDon't get me wrong, tagged literals are excellent when it comes to data. Not so \nmuch for code though. Lets look at two variants of code that achieve the same \nthing:\n\ndata_readers.cljc\n(ns my.app)\n\n(def foo #Dbld [1 2])\n\nvs. just plain CLJ(S)\n\n(ns my.app\n  (:require [hypercrud.types :as t]))\n\n(def foo (t\/dbld 1 2))\n\n\nThese both achieve the same thing. However the non-tagged version is self \ncontained. It does not need anything else to run. You can eval it in a REPL and \nit will work. You can see which namespaces are involved and which function is \ncalled.\n\nThe data literal version however cannot run without setting up an environment. \nIt must read the data_readers.cljc and eval things (at READ time). Have fun \ndebugging this. The trouble with this for CLJS is also that you now must teach \nthe compiler about all your objects. Since it must learn what code to emit so \nyour object can be constructed by the JS runtime.\n\nSo my warning is to never use tagged literals for code.\n\nFor data you can use the :readers opts in clojure.edn\/read-string [1].\n\nCLJS has (cljs.reader\/register-tag-parser! \"tag\" parse-fn) or the same as above \nif you are using tools.reader.\n\n\nYMMV,\n\/thomas\n\n[1] https:\/\/clojure.github.io\/clojure\/clojure.edn-api.html\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: how to use new data_readers.cljc feature with deftype Thomas Heller Thu, 16 Feb 2017 11:26:53 -0800"},
{"body":"My expectation is the compiler, when it sees `(def foo #DbId [1 2])` will emit \njavascript equal to `(def foo (hypercrud.types\/read-DbId [1 2])` \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: how to use new data_readers.cljc feature with deftype Dustin Getz Thu, 16 Feb 2017 09:40:50 -0800"},
{"body":"I receive this error:\n\nAttempting to call unbound fn: #'hypercrud.types\/read-DbId \nMy hypercrud.types namespace is a cljs file, since the compiler jvm process \nwill need to emit javascript that calls my deftype constructor. Am I \nmisunderstanding something?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] how to use new data_readers.cljc feature with deftype Dustin Getz Thu, 16 Feb 2017 09:06:28 -0800"},
{"body":"That would be a deal breaker for us!\n\nOn Monday, January 23, 2017 at 10:00:17 PM UTC+1, David Nolen wrote:\n> We're actually looking to address this problem directly. There'll be more \n> details in the very near future.\n> \n> \n> David\n> \n> \n> On Mon, Jan 23, 2017 at 2:22 PM, Michael Blume <blume...@gmail.com> wrote:\n> Apologies for asking what's probably a common newbie question, but Google is \n> failing me today.\n> \n> \n> \n> I have an existing project using react.js, react-router, jsx, and webpack. \n> I'd like to port one component to clojurescript as a proof of concept, \n> perhaps using reagent, and then have a hybrid project with lots of jsx files \n> and one cljs file that builds and works and preferably has source maps for \n> both. Can I do that? I'd rather have a gradual transition than try to port \n> the whole thing in one go.\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> \n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Gradually porting from jsx to cljs Ilya Boyandin Thu, 16 Feb 2017 05:25:25 -0800"},
{"body":"Unfortunately the version of CodeMirror in CLJSJS does not pass my unit tests \nwhereas the latest non-CLJSJS directly from CodeMirror does pass. \n([cljsjs\/codemirror \"5.21.0-2\"] does not return the right value for \ntoken.state.indentStack in the middle of a mult-line form) \nHow can I make a JavaScript library available to unit tests in a boot project \nwithout relying on CLJSJS?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: in boot, how to make external libs available to test code? franko Tue, 14 Feb 2017 17:49:49 -0800"},
{"body":"Hi there,\n  I am new to spec. I've read Clojure.spec guidelines as well as Youtube talks. \nI understand I can REPL validating my code using spec. \n  However, is it possible to automate such validation? Ideally if there is \ntype\/shape mismatch in my code, I would like error message (without having me \nrun REPL on function by function) so I won't inadvertently ship bugs to \ncustomer. My project uses ClojureScript + re-frame\/re-agent + figwheel. Links \nto tutorials\/example projects will be appreciated. \n  Thanks in advance!\nYe \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How to automate validation using spec Ye Zhang Mon, 13 Feb 2017 21:27:07 -0800"},
{"body":"Release 1.9.473 did end up fixing it.  Thanks! \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Upgrading to 1.9.456 challenges with foreign-libs and synchronous XMLHttpRequest in Chrome Hitesh Mon, 13 Feb 2017 17:39:06 -0800"},
{"body":"Apologies -- I chose the wrong subject for my original thread. (My situation \nhas nothing to do with dommy and is only tangentially related to CodeMirror.) \nI've posted the actual question on StackOverflow, reproduced here:\n\nhttp:\/\/stackoverflow.com\/questions\/42212114\/clojurescript-boot-make-external-libs-available-to-test-code\n\nWhen using boot, how does one make external JavaScript libraries available to \ntest code (vs application code)?\n\nApplication code can get access when it's included on the same HTML page as the \nlibrary.\n\n(With leiningen and figwheel, the test code ran in the same context as the \napplication code -- on my index.html page -- so the test code was aware of the \nthird party js library.)\n\nIs there a similar page context in boot for test code? Or is there a way to \nconj something like [\"resources\/third-party\/library.js\"] onto a source or \nresource path, such that unit tests can refer to the same library that \napplication code does?\n\nWhen I run boot auto-test it says #object[ReferenceError ReferenceError: Can't \nfind variable: CodeMirror]. CodeMirror is the third party library in my case. \nMy unit tests need a CodeMirror instance so they can .setValue, then call a \nbunch of CodeMirror methods to tell the instance what to do, then verify the \ninstance's new value and cursor position.\n\nHere's part of my build.boot file:\n\n(deftask testing []\n  (set-env! :source-paths #(conj % \"test\/cljs\"))\n  identity)\n\n(deftask test []\n  (comp (testing)\n        (test-cljs :js-env :phantom\n                   :exit?  true)))\n\n(deftask auto-test []\n  (comp (testing)\n        (watch)\n        (test-cljs :js-env :phantom)))\n\nfor reference, the original thread: \nhttps:\/\/groups.google.com\/d\/msg\/clojurescript\/pmokEiYvwJg\/COtN7SBICwAJ\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] in boot, how to make external libs available to test code? franko Mon, 13 Feb 2017 15:19:31 -0800"},
{"body":"Happy to announce Quil 2.6.0 release.\n\nQuil is a Clojure\/ClojureScript library for creating interactive drawings\nand animations. \nThe release available on clojars: https:\/\/clojars.org\/quil. List of changes:\n\n   - Add random-2d and random-2d functions to generate random vectors. #201\n   <https:\/\/github.com\/quil\/quil\/pull\/201> by @prakhar1989\n   <https:\/\/github.com\/prakhar1989>\n   - Fix current-fill and current-stroke on cljs. #196\n   <https:\/\/github.com\/quil\/quil\/pull\/196> by @satchit8\n   <https:\/\/github.com\/satchit8>\n   - Fix mouse-pressed? and key-pressed? on cljs. #198\n   <https:\/\/github.com\/quil\/quil\/pull\/198> by @Norgat\n   <https:\/\/github.com\/Norgat>\n   - Fix console.log problem that logged every call to rect. Bug\n   <https:\/\/github.com\/quil\/processing-js\/pull\/2>.\n   - Update Processing to 3.2.4 and Processing.js to 1.6.4.\n\nDocumentation on http:\/\/quil.info has been updated as well.\n\nHappy hacking!\n\nNikita\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Quil 2.6.0 Release Nikita Beloglazov Sun, 12 Feb 2017 16:02:05 -0800"},
{"body":"I moved my project to another partition on the ssd out of C drive and that cut \nthe load time in half. It's about 1-2s slower than Linux which I guess that's \nok. \nI did already disable indexing and malware check for my project directory. I \nguess the problem was with the shadow copy service which is initially enabled \nfor the C drive. The move also cut more than 10 seconds compile time from my \nScala project.\n\nTorsten.\n\nAm Sonntag, 12. Februar 2017 15:34:01 UTC+1 schrieb Torsten Uhlmann:\n> It's a Reagent SPA app, each request will basically load the same artefacts \n> and then does client side routing based on the given route.\n> \n> I only compared loading the home route on Windows vs. loading the same route \n> on Linux. Looking at the network tab in Chrome I see that artefacts load a \n> lot slower than on Linux, but I have no explanation why. I wouldn't mind 1-2s \n> difference but this...\n> \n> Btw. the initial load of my app with no optimization is 11.9MB.\n> \n> Thanks,\n> Torsten.\n> \n> Am Sonntag, 12. Februar 2017 13:41:02 UTC+1 schrieb Thomas Heller:\n> > Given that you are probably loading a large number of JS files the total \n> > load time goes up the longer each request takes.\n> > \n> > Did you compare the request time for each request? Maybe something on \n> > Windows makes the requests take longer? Hard to debug without more \n> > information but the devtools should help in finding the slowdown.\n> > \n> > HTH,\n> > \/thomas\n> > \n> > On Sunday, February 12, 2017 at 12:19:48 PM UTC+1, Torsten Uhlmann wrote:\n> > > Hi,\n> > > \n> > > I have a strange problem with my ClojureScript app.\n> > > When in dev mode and compiled Javascript artefacts are not optimized the \n> > > page loads very slow if the app runs on Windows. A page reload takes \n> > > about 12 seconds versus about 3 seconds when the server runs on Linux (in \n> > > both cases I loaded into the same Windows browser).\n> > > \n> > > I tried with ClojureScript 1.8.40 and the latest 1.9.473, they react the \n> > > same.\n> > > \n> > > The problem disappears when removing the line \n> > > `<script>goog.require(\"my.app\");<\/script>`  from the generated `app.js` \n> > > file that gets loaded by the index.html page. \n> > > This of course removes all the JS modules that need to be loaded, but it \n> > > seems to indicate that the problem is related to resolving the modules to \n> > > load and actually loading them.\n> > > \n> > > Did someone else ever ran across a problem like this?\n> > > \n> > > Thanks,\n> > > Torsten.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Page loads very slow if app runs on Windows Torsten Uhlmann Sun, 12 Feb 2017 10:57:06 -0800"},
{"body":"It's a Reagent SPA app, each request will basically load the same artefacts and \nthen does client side routing based on the given route. \nI only compared loading the home route on Windows vs. loading the same route on \nLinux. Looking at the network tab in Chrome I see that artefacts load a lot \nslower than on Linux, but I have no explanation why. I wouldn't mind 1-2s \ndifference but this...\n\nBtw. the initial load of my app with no optimization is 11.9MB.\n\nThanks,\nTorsten.\n\nAm Sonntag, 12. Februar 2017 13:41:02 UTC+1 schrieb Thomas Heller:\n> Given that you are probably loading a large number of JS files the total load \n> time goes up the longer each request takes.\n> \n> Did you compare the request time for each request? Maybe something on Windows \n> makes the requests take longer? Hard to debug without more information but \n> the devtools should help in finding the slowdown.\n> \n> HTH,\n> \/thomas\n> \n> On Sunday, February 12, 2017 at 12:19:48 PM UTC+1, Torsten Uhlmann wrote:\n> > Hi,\n> > \n> > I have a strange problem with my ClojureScript app.\n> > When in dev mode and compiled Javascript artefacts are not optimized the \n> > page loads very slow if the app runs on Windows. A page reload takes about \n> > 12 seconds versus about 3 seconds when the server runs on Linux (in both \n> > cases I loaded into the same Windows browser).\n> > \n> > I tried with ClojureScript 1.8.40 and the latest 1.9.473, they react the \n> > same.\n> > \n> > The problem disappears when removing the line \n> > `<script>goog.require(\"my.app\");<\/script>`  from the generated `app.js` \n> > file that gets loaded by the index.html page. \n> > This of course removes all the JS modules that need to be loaded, but it \n> > seems to indicate that the problem is related to resolving the modules to \n> > load and actually loading them.\n> > \n> > Did someone else ever ran across a problem like this?\n> > \n> > Thanks,\n> > Torsten.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Page loads very slow if app runs on Windows Torsten Uhlmann Sun, 12 Feb 2017 06:34:25 -0800"},
{"body":"Given that you are probably loading a large number of JS files the total load \ntime goes up the longer each request takes. \nDid you compare the request time for each request? Maybe something on Windows \nmakes the requests take longer? Hard to debug without more information but the \ndevtools should help in finding the slowdown.\n\nHTH,\n\/thomas\n\nOn Sunday, February 12, 2017 at 12:19:48 PM UTC+1, Torsten Uhlmann wrote:\n> Hi,\n> \n> I have a strange problem with my ClojureScript app.\n> When in dev mode and compiled Javascript artefacts are not optimized the page \n> loads very slow if the app runs on Windows. A page reload takes about 12 \n> seconds versus about 3 seconds when the server runs on Linux (in both cases I \n> loaded into the same Windows browser).\n> \n> I tried with ClojureScript 1.8.40 and the latest 1.9.473, they react the same.\n> \n> The problem disappears when removing the line \n> `<script>goog.require(\"my.app\");<\/script>`  from the generated `app.js` file \n> that gets loaded by the index.html page. \n> This of course removes all the JS modules that need to be loaded, but it \n> seems to indicate that the problem is related to resolving the modules to \n> load and actually loading them.\n> \n> Did someone else ever ran across a problem like this?\n> \n> Thanks,\n> Torsten.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Page loads very slow if app runs on Windows Thomas Heller Sun, 12 Feb 2017 04:41:26 -0800"},
{"body":"Hi,\n\nI have a strange problem with my ClojureScript app.\nWhen in dev mode and compiled Javascript artefacts are not optimized the page \nloads very slow if the app runs on Windows. A page reload takes about 12 \nseconds versus about 3 seconds when the server runs on Linux (in both cases I \nloaded into the same Windows browser). \nI tried with ClojureScript 1.8.40 and the latest 1.9.473, they react the same.\n\nThe problem disappears when removing the line \n`<script>goog.require(\"my.app\");<\/script>`  from the generated `app.js` file \nthat gets loaded by the index.html page. \nThis of course removes all the JS modules that need to be loaded, but it seems \nto indicate that the problem is related to resolving the modules to load and \nactually loading them.\n\nDid someone else ever ran across a problem like this?\n\nThanks,\nTorsten.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Page loads very slow if app runs on Windows Torsten Uhlmann Sun, 12 Feb 2017 03:20:07 -0800"},
{"body":"Seems like I ought to be able to extern CodeMirror so it's available... \nSomething like putting this ... \n:externs [\"resources\/cm\/lib\/codemirror.js\"]\n\n... somewhere. But where? The boot task I want to affect is auto-test ...\n\n(deftask auto-test []\n  (comp (testing)\n        (watch)\n        (test-cljs :js-env :phantom)))\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to use dommy for testing against a CodeMirror instance? franko Sat, 11 Feb 2017 23:02:32 -0800"},
{"body":"Ah. I probably don't need a text editor. I can create a CodeMirror instance by \ncalling the constructor. But how do I do that from ClojureScript? \nJavascript: CodeMirror(yourFnThatAddsTheInstanceToThePage);\n\nClojureScript: (js\/CodeMirror. fn-that-resets-my-atom)\n\nI get a \"ReferenceError, can't find variable: CodeMirror.\"\n\nIf I try (CodeMirror\/Codemirror. my-fn) it says it cannot find CodeMirror.cljs \nor cljc or namespace...\n\nIs there some place where I get it to know about a CodeMirror namespace like it \nknows about js\/ ?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: How to use dommy for testing against a CodeMirror instance? franko Sat, 11 Feb 2017 22:37:24 -0800"},
{"body":"Hi everyone,\n\nI am trying to write some ClojureScript to use with CodeMirror, like a new \nkeymap. For testing, I have PhantomJS installed. I'm trying to programmatically \ncreate a test page with a CodeMirror instance on it. \nIt would be good if all of my test cases can re-use the same CodeMirror \ninstance.\n\nSo my thought is at the beginning of my test cljs file, I'll create the page \n\n    (dommy\/append! js\/document.body ...\n\nIs this the right starting point? I'd like to get a textarea with some known \nid, then do the equivalent of calling CodeMirror.fromTextArea with it plus a \nproperty map that assigns the keyMap to mine. So the equivalent of javascript:\n\n       var textArea = document.getElementById(\"knownId\");\n       var editor = CodeMirror.fromTextArea(textArea,\n                                           {\n                                             keyMap: \"myMap\"\n                                           });\n       textArea.myCodeMirrorInstance = editor;\n\nWhat would the above look like in ClojureScript with dommy?\n\nAnd I'll save the CM instance ...\n\n    (def cm-instance (-> \"#knownId\" sel1 .-myCodeMirrorInstance))\n\nAnd use `cm-instance` in my tests.\n\nI had an earlier setup (with lein) that seemed to work, but then I realized the \nunit tests were grabbing the actual index.html for my project. Which meant I \ncould just have the plain javascript above as is in index.html, plus the cljs \n(-> \"#knownId\" sel1 .-myCodeMirrorInstance) and I was all set.\n\nI think it's better that the unit tests use some other virtual page it creates. \nNow I'm trying to use boot and I'm not even sure how to get it working either \nway (either using index.html or having a separate dommy-created page \nheadlessly).\n\nAny help would be appreciated!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How to use dommy for testing against a CodeMirror instance? franko Sat, 11 Feb 2017 11:45:06 -0800"},
{"body":"Thanks very much for the ideas!\n\nWe are currently using {:optimizations :simple} for this build. All of the \ntimes I quoted above excluded the optimization time, however (I could see the \ncompile time due to :verbose + :compiler-stats). We're in the process of \nswitching to {:optimizations :whitespace} (we were looking at :none, but we \nneed to generate a single file, since this is for a React Native project). \n>  It would help if you could share your build config. \n\nGood point! Here is the cljsbuild build\n\n:ci {:source-paths [\"src\" \"src-ios\" \"test\" \"test-ios\"]\n       :warning-handlers [foo.cljsbuild-util\/fail-on-warning]\n       :compiler {:output-to \"ios\/foo\/main.jsbundle\"\n       :parallel-build false \n       :output-dir \"target\/ci\/\"\n       :optimizations :simple   ; <- we're in the process of changing this to \n\"whitespace\"\n        ;; Rules for pulling in RN bundle\n        :closure-extra-annotations [\"generated\" \"internal\"]\n       :closure-defines {\"foo.app.config.foo_host\" \"\"\n                                      \"foo.app.config.test_QMARK_\" true}\n       :language-in :ecmascript5\n       :foreign-libs [{:file \"..\/build\/react-native-dev.js\"\n                               :provides [\"react-native\"]}\n                              {:file \"..\/build\/react-requires-dev.js\"\n                               :provides [\"react-requires\"]}]\n      :externs [\"externs.js\"]\n      :verbose true\n       :compiler-stats true}}\n\nand our lein profile is \n\n:ci {:env {:test-multiplier \"0.5\"} ; environ variable\n      :jvm-opts ^:replace [\"-Xms1024m\" \"-Xmx1024m\" \"-server\" \"-Xss2m\"]\n\nI was unaware of shadow-build - thanks for the idea! I'll take a look.\n\nBen\n\nOn Saturday, February 11, 2017 at 1:26:36 AM UTC-7, Thomas Heller wrote:\n> Are you by any chance using anything other than {:optimizations :none} in \n> your dev build config? 12s seems a bit excessive if you are just doing CLJS \n> recompiles.\n> \n> Ensure that your dev build does not use any production build settings. Your \n> CI server should probably run in production mode though as 12s shouldn't hurt \n> that much there. Typically when it comes to building larger projects you want \n> to rely on :none with caching for development. It would help if you could \n> share your build config.\n> \n> \n> If you are feeling adventurous you could try shadow-build if only to get a \n> more detailed report on where the time is spent. It should be a bit faster \n> overall as well but not by much. Happy to walk you through an example if you \n> want to test it.\n> \n> \/thomas\n> \n> On Friday, February 10, 2017 at 6:15:34 PM UTC+1, Ben Brinckerhoff wrote:\n> > First of all, thanks to everyone for their hard work on Clojurescript and \n> > related tooling. It\u2019s an incredibly productive and reliable stack to use.\n> > \n> > I\u2019m investigating ways to speed up compile times for a closed-source \n> > project. We have about 8000 Clojurescript LOC and 200 Clojure LOC (in src \n> > and test combined). Some very rough indicators: a fresh compile of our test \n> > build takes about 60s. A small change to a file with maybe 15 reverse \n> > dependencies takes about 12s using `cljsbuild auto`. We are using \n> > lein-cljsbuild 1.1.4 and clojurescript \u201c1.9.293\u201d.\n> > \n> > These times are pretty good, but of course speeding up compiles shrinks our \n> > feedback loop, both locally and on CI, where we do a number of fresh \n> > compiles for different builds. As a result, we want to see if there are \n> > things we can do to our code to speed up compiles.\n> > \n> > We have turned on the `verbose` and `compiler-stats` flags so we can see \n> > more information about compile times. We hope to upgrade to 1.9.456 soon so \n> > we can see per-file compile stats. We also need to investigate parallel \n> > builds again - we had previously run into bugs here, but I didn\u2019t take the \n> > time to investigate more fully.\n> > \n> > Besides total LOC, are there other aspects of code bases that are known to \n> > slow down compiles? Perhaps macro expansion (we have a lot of core.async \n> > `go` blocks in some namespaces)? Perhaps the complexity of the dependency \n> > graph between namespaces? Something else? Has anyone else had experience \n> > altering a CLJS code base to improve compile times? Or tweaking compiler \n> > flags? `optimization` makes a big difference of course, but for my current \n> > investigation, I'm ignoring optimization time.\n> > \n> > Also, I noticed that Clojurescript performance is an idea for the Google \n> > Summer of Code \n> > https:\/\/github.com\/clojars\/clojure-gsoc-2017\/blob\/master\/project-ideas.md#clojurescript-performance\n> > \n> > \u201cThere are many impactful enhancements we would like to make to \n> > ClojureScript with respect to both runtime and compile time performance \u2026 \n> > For compile time enhancements we should examine where parallelization, AST \n> > data representation changes, or more aggressive caching of intermediate \n> > artifacts may deliver faster development and production build time.\u201d\n> > \n> > I did a quick search of Clojurescript for perf issues on JIRA, but didn\u2019t \n> > see anything related to these (apologies if I just missed something \n> > obvious!). Is there a list somewhere of open issues that might improve perf \n> > in the compiler? Or are those ideas mostly in the \u201cneeds investigation\u201d \n> > stage?\n> > \n> > Thanks very much!\n> > Ben\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Ideas on how to change my code to compile faster Ben Brinckerhoff Sat, 11 Feb 2017 07:24:27 -0800"},
{"body":"Are you by any chance using anything other than {:optimizations :none} in your \ndev build config? 12s seems a bit excessive if you are just doing CLJS \nrecompiles. \nEnsure that your dev build does not use any production build settings. Your CI \nserver should probably run in production mode though as 12s shouldn't hurt that \nmuch there. Typically when it comes to building larger projects you want to \nrely on :none with caching for development. It would help if you could share \nyour build config.\n\n\nIf you are feeling adventurous you could try shadow-build if only to get a more \ndetailed report on where the time is spent. It should be a bit faster overall \nas well but not by much. Happy to walk you through an example if you want to \ntest it.\n\n\/thomas\n\nOn Friday, February 10, 2017 at 6:15:34 PM UTC+1, Ben Brinckerhoff wrote:\n> First of all, thanks to everyone for their hard work on Clojurescript and \n> related tooling. It\u2019s an incredibly productive and reliable stack to use.\n> \n> I\u2019m investigating ways to speed up compile times for a closed-source project. \n> We have about 8000 Clojurescript LOC and 200 Clojure LOC (in src and test \n> combined). Some very rough indicators: a fresh compile of our test build \n> takes about 60s. A small change to a file with maybe 15 reverse dependencies \n> takes about 12s using `cljsbuild auto`. We are using lein-cljsbuild 1.1.4 and \n> clojurescript \u201c1.9.293\u201d.\n> \n> These times are pretty good, but of course speeding up compiles shrinks our \n> feedback loop, both locally and on CI, where we do a number of fresh compiles \n> for different builds. As a result, we want to see if there are things we can \n> do to our code to speed up compiles.\n> \n> We have turned on the `verbose` and `compiler-stats` flags so we can see more \n> information about compile times. We hope to upgrade to 1.9.456 soon so we can \n> see per-file compile stats. We also need to investigate parallel builds again \n> - we had previously run into bugs here, but I didn\u2019t take the time to \n> investigate more fully.\n> \n> Besides total LOC, are there other aspects of code bases that are known to \n> slow down compiles? Perhaps macro expansion (we have a lot of core.async `go` \n> blocks in some namespaces)? Perhaps the complexity of the dependency graph \n> between namespaces? Something else? Has anyone else had experience altering a \n> CLJS code base to improve compile times? Or tweaking compiler flags? \n> `optimization` makes a big difference of course, but for my current \n> investigation, I'm ignoring optimization time.\n> \n> Also, I noticed that Clojurescript performance is an idea for the Google \n> Summer of Code \n> https:\/\/github.com\/clojars\/clojure-gsoc-2017\/blob\/master\/project-ideas.md#clojurescript-performance\n> \n> \u201cThere are many impactful enhancements we would like to make to ClojureScript \n> with respect to both runtime and compile time performance \u2026 For compile time \n> enhancements we should examine where parallelization, AST data representation \n> changes, or more aggressive caching of intermediate artifacts may deliver \n> faster development and production build time.\u201d\n> \n> I did a quick search of Clojurescript for perf issues on JIRA, but didn\u2019t see \n> anything related to these (apologies if I just missed something obvious!). Is \n> there a list somewhere of open issues that might improve perf in the \n> compiler? Or are those ideas mostly in the \u201cneeds investigation\u201d stage?\n> \n> Thanks very much!\n> Ben\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Ideas on how to change my code to compile faster Thomas Heller Sat, 11 Feb 2017 00:26:59 -0800"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.473\"]\n\nThis is a bugfix release.\n\nAs always, feedback welcome!\n\n## Fixes\n* CLJS-1931: Closure Compiler {{--generate_exports}} flag not supported\n* CLJS-1934: Self-host: require-macros :reload \/ :reload-all fails\n* CLJS-1932: Self-host: Perf regression macroexpand-check\n* CLJS-1930: Master broken wrt static field: ES5_STRICT_UNCOMMON\n* CLJS-1929: When expanding libs don't include Hidden files\n* CLJS-1905: Self-host: Stacktraces for script\/test-self-parity\n* CLJS-1795: Support more options in the `:closure-warnings` compiler option\n* CLJS-1922: Use :file as relative output path for foreign-libs\n* CLJS-1831: Self-host: Improperly munge ns names\n* CLJS-1925: Use of undeclared Var cljs.user\/RegExp when extending protocol\nfor RegExp\n* CLJS-1920: cljs.build.api\/node-inputs: package.json files are only added\nif module entries are top-leve\n* CLJS-1916: __dirname and __filename are not defined when compiling for\nNode.js with optimizations :none\n* CLJS-1915: cljs.test: Index out of bounds for stack element w\/o\nline\/column\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.473, bugfix release David Nolen Fri, 10 Feb 2017 11:58:09 -0800"},
{"body":"First of all, thanks to everyone for their hard work on Clojurescript and \nrelated tooling. It\u2019s an incredibly productive and reliable stack to use. \nI\u2019m investigating ways to speed up compile times for a closed-source project. \nWe have about 8000 Clojurescript LOC and 200 Clojure LOC (in src and test \ncombined). Some very rough indicators: a fresh compile of our test build takes \nabout 60s. A small change to a file with maybe 15 reverse dependencies takes \nabout 12s using `cljsbuild auto`. We are using lein-cljsbuild 1.1.4 and \nclojurescript \u201c1.9.293\u201d.\n\nThese times are pretty good, but of course speeding up compiles shrinks our \nfeedback loop, both locally and on CI, where we do a number of fresh compiles \nfor different builds. As a result, we want to see if there are things we can do \nto our code to speed up compiles.\n\nWe have turned on the `verbose` and `compiler-stats` flags so we can see more \ninformation about compile times. We hope to upgrade to 1.9.456 soon so we can \nsee per-file compile stats. We also need to investigate parallel builds again - \nwe had previously run into bugs here, but I didn\u2019t take the time to investigate \nmore fully.\n\nBesides total LOC, are there other aspects of code bases that are known to slow \ndown compiles? Perhaps macro expansion (we have a lot of core.async `go` blocks \nin some namespaces)? Perhaps the complexity of the dependency graph between \nnamespaces? Something else? Has anyone else had experience altering a CLJS code \nbase to improve compile times? Or tweaking compiler flags? `optimization` makes \na big difference of course, but for my current investigation, I'm ignoring \noptimization time.\n\nAlso, I noticed that Clojurescript performance is an idea for the Google Summer \nof Code \nhttps:\/\/github.com\/clojars\/clojure-gsoc-2017\/blob\/master\/project-ideas.md#clojurescript-performance\n\n\u201cThere are many impactful enhancements we would like to make to ClojureScript \nwith respect to both runtime and compile time performance \u2026 For compile time \nenhancements we should examine where parallelization, AST data representation \nchanges, or more aggressive caching of intermediate artifacts may deliver \nfaster development and production build time.\u201d\n\nI did a quick search of Clojurescript for perf issues on JIRA, but didn\u2019t see \nanything related to these (apologies if I just missed something obvious!). Is \nthere a list somewhere of open issues that might improve perf in the compiler? \nOr are those ideas mostly in the \u201cneeds investigation\u201d stage?\n\nThanks very much!\nBen\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Ideas on how to change my code to compile faster Ben Brinckerhoff Fri, 10 Feb 2017 09:16:03 -0800"},
{"body":"I actually spent a whole bunch of time thinking about the tradeoffs. The \nproject has not been in production for that long so my experience is a bit \nlimited. So for now things are heavy on the theory. I actually just had a fun \nidea last night and wrote to the closure compiler guys just now. \nAnyways here is the current state with regards to performance:\n\nCSS is generated by the compiled JS at runtime.\n\nPros:\n- No extra render-blocking <link> tag to fetch styles\n- Dead-code removal also removes unused styles\n- JS caching equals CSS caching.\n- CLJS representation of CSS is probably smaller than actual CSS in total bytes \nused (ie. less for the user to download, need more data to verify though)\n\nCons:\n- CSS is generated at runtime, this takes time.\nFor my current project it amounts to about 25ms total, spread out over time. \nSince styles are generated when they are needed, this can mean 5ms now and 20ms \nwhen the user clicks a thing (maybe never). I have a solution in place to \ngenerate the styles on the server but that is not dead-code aware (ie. all \nstyles are generated, not just the ones you use). Working through some ideas to \nmake this dead-code aware.\n\n\nCannot really comment on the performance of the CSS selectors, they should be \nfaster than nested rules but it is surprisingly hard to find actual good \nbenchmarks for this topic. Most of the information I could find is 2+ years old \nand may not be relevant anymore. The conclusion seems to be that the the \nselectors generated by shadow.markup should be ideal.\n\n\nI can tell you with a bit of confidence that my solution is much faster than \nany other css-in-js solution I looked at (styled-components, fela, aphrodite \nand more I can't remember). Granted some of them are also shipping PostCSS \nwhich isn't exactly fast and quite heavy on the download size.\n\n\nI am committed as the fallback has always been to generate the styles on the \nserver. If everything else fails you still get a .css file you can use \nnormally. So far the client-side story looks promising though. Writing the \nstyles in CLJS has lessened my hate for CSS considerably. It is too early to \ntell whether it will accumulate as much waste as traditional methods over time. \nMy instinct feels good about it though. Cursive already tells me whether or not \nI'm using an element by just showing me whether a \"def\" is used or not.\n\nYMMV\n\/thomas\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Thomas Heller Wed, 08 Feb 2017 03:19:21 -0800"},
{"body":"I'm very interested in that discussion and the conclusions it brings. I've been \nworking in a few large web applications and CSS has always been a big nightmare \nfor me, I'm very grateful for new solutions offered. \n@Thomas Can you comment on the tradeoff having the CSS put inside the html \npage? In past projects we had strict rules not to put any CSS inside html files \nto allow the browser to cache them. I guess the scenario is different here \nsince the CSS would be part of the Javascript send to the browser and cached \nalong with the JS and then injected into the rendered page. Is that correct?\n\nAnother thought, my guess is the created css which is component based is much \nsimpler in terms of used css selectors (because it applies to just the \ncomponent) so it would be faster for the browser to render them compared to \nlarge style files containing nested rule sets- right?\n\nThanks,\nTorsten.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Torsten Uhlmann Wed, 08 Feb 2017 02:32:35 -0800"},
{"body":"Cool, thanks for all the hard work you and others put into Clojurescript!\n \nOn Monday, February 6, 2017 at 12:41:10 PM UTC-5, David Nolen wrote:\n> There was a bug reported and since fixed in master. There will be a release \n> this Friday just to address this regression.\n> \n> \n> David\n> \n> \n> On Sat, Feb 4, 2017 at 11:43 PM, Hitesh <hitesh...@gmail.com> wrote:\n> I'm trying to upgrade a project from 1.8.51.\u00a0 It has some foreign libs and \n> manually defined externs in it which were working fine.\n> \n> \n> \n> \u00a0 \u00a0 \u00a0 :foreign-libs [{:file \n> \"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/gsap\/1.18.5\/TweenMax.min.js\";\n> \n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 :provides [\"TweenMax\"]}]\n> \n> \u00a0 \u00a0 \u00a0 :externs [\"react\/externs\/react.js\"\n> \n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"externs\/greensock.js\"]\n> \n> \n> \n> \n> \n> After upgrading the version of clojurescript, running lein figwheel dumps \n> this exception.\n> \n> \n> \n> \n> \n> java.lang.IllegalArgumentException: \/ajax\/libs\/gsap\/1.18.5\/TweenMax.min.js is \n> no\n> \n> t a relative path\n> \n> \u00a0at clojure.java.io$as_relative_path.invokeStatic (io.clj:414)\n> \n> \u00a0 \u00a0 clojure.java.io$file.invokeStatic (io.clj:426)\n> \n> \u00a0 \u00a0 clojure.java.io$file.invoke (io.clj:418)\n> \n> \u00a0 \u00a0 cljs.closure$write_javascript.invokeStatic (closure.clj:1594)\n> \n> \u00a0 \u00a0 cljs.closure$write_javascript.invoke (closure.clj:1587)\n> \n> \u00a0 \u00a0 cljs.closure$source_on_disk.invokeStatic (closure.clj:1633)\n> \n> \u00a0 \u00a0 cljs.closure$source_on_disk.invoke (closure.clj:1628)\n> \n> \u00a0 \u00a0 cljs.closure$output_unoptimized$fn__6325.invoke (closure.clj:1671)\n> \n> \u00a0 \u00a0 clojure.core$map$fn__4785.invoke (core.clj:2646)\n> \n> \u00a0 \u00a0 clojure.lang.LazySeq.sval (LazySeq.java:40)\n> \n> \u00a0 \u00a0 clojure.lang.LazySeq.seq (LazySeq.java:49)\n> \n> \u00a0 \u00a0 clojure.lang.RT.seq (RT.java:521)\n> \n> \u00a0 \u00a0 clojure.core$seq__4357.invokeStatic (core.clj:137)\n> \n> \u00a0 \u00a0 clojure.core$filter$fn__4812.invoke (core.clj:2700)\n> \n> \u00a0 \u00a0 clojure.lang.LazySeq.sval (LazySeq.java:40)\n> \n> \u00a0 \u00a0 clojure.lang.LazySeq.seq (LazySeq.java:49)\n> \n> \u00a0 \u00a0 clojure.lang.RT.seq (RT.java:521)\n> \n> \u00a0 \u00a0 clojure.core$seq__4357.invokeStatic (core.clj:137)\n> \n> \u00a0 \u00a0 clojure.core$map$fn__4785.invoke (core.clj:2637)\n> \n> \u00a0 \u00a0 clojure.lang.LazySeq.sval (LazySeq.java:40)\n> \n> \u00a0 \u00a0 clojure.lang.LazySeq.seq (LazySeq.java:49)\n> \n> \u00a0 \u00a0 clojure.lang.Cons.next (Cons.java:39)\n> \n> \u00a0 \u00a0 clojure.lang.RT.next (RT.java:688)\n> \n> \u00a0 \u00a0 clojure.core$next__4341.invokeStatic (core.clj:64)\n> \n> \u00a0 \u00a0 clojure.core$str$fn__4419.invoke (core.clj:546)\n> \n> \u00a0 \u00a0 clojure.core$str.invokeStatic (core.clj:544)\n> \n> \u00a0 \u00a0 clojure.core$str.doInvoke (core.clj:533)\n> \n> \u00a0 \u00a0 clojure.lang.RestFn.applyTo (RestFn.java:139)\n> \n> \u00a0 \u00a0 clojure.core$apply.invokeStatic (core.clj:646)\n> \n> \u00a0 \u00a0 clojure.core$apply.invoke (core.clj:641)\n> \n> \n> \n> \n> \n> So although \n> https:\/\/github.com\/clojure\/clojurescript\/wiki\/Compiler-Options#foreign-libs \n> still says that URLs are valid for :file, I downloaded the libs and specified \n> them as relative paths.\n> \n> \n> \n> \n> \n> \u00a0 \u00a0 \u00a0 :foreign-libs [{:file \"gsap\/1.18.5\/TweenMax.min.js\"\n> \n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 :file-min \"gsap\/1.18.5\/TweenMax.min.js\"\n> \n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 :provides [\"TweenMax\"]}]\n> \n> \u00a0 \u00a0 \u00a0 :externs [\"react\/externs\/react.js\"\n> \n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"externs\/greensock.js\"]\n> \n> \n> \n> \n> \n> Lein figwheel now happily starts up.\u00a0 But when I try to access the site in \n> Chrome, it doesn't load and has the following new error in the console:\n> \n> \n> \n> \n> \n> Synchronous XMLHttpRequest on the main thread is deprecated because of its \n> detrimental effects to the end user's experience. For more help, check \n> https:\/\/xhr.spec.whatwg.org\/.\n> \n> \n> \n> goog.loadFileSync_\u00a0 \u00a0 \u00a0 @\u00a0 \u00a0 \u00a0 \u00a0base.js:1396\n> \n> goog.retrieveAndExecModule_\u00a0 \u00a0 \u00a0@\u00a0 \u00a0 \u00a0 \u00a0base.js:1419\n> \n> (anonymous)\u00a0 \u00a0 \u00a0@\u00a0 \u00a0 \u00a0 \u00a0VM113:1\n> \n> goog.writeScriptTag_\u00a0 \u00a0 @\u00a0 \u00a0 \u00a0 \u00a0base.js:1223\n> \n> goog.importScript_\u00a0 \u00a0 \u00a0 @\u00a0 \u00a0 \u00a0 \u00a0base.js:879\n> \n> goog.importModule_\u00a0 \u00a0 \u00a0 @\u00a0 \u00a0 \u00a0 \u00a0base.js:900\n> \n> goog.writeScripts_\u00a0 \u00a0 \u00a0 @\u00a0 \u00a0 \u00a0 \u00a0base.js:1323\n> \n> goog.require\u00a0 \u00a0 @\u00a0 \u00a0 \u00a0 \u00a0base.js:663\n> \n> (anonymous)\u00a0 \u00a0 \u00a0@\u00a0 \u00a0 \u00a0 \u00a0(index):75\n> \n> \n> \n> \n> \n> The site works as normal in Safari, figwheel reloads changes.\u00a0 It's just \n> Chrome that's not working.\u00a0 I'm at a bit of a loss here now.\u00a0 Any ideas?\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> \n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Upgrading to 1.9.456 challenges with foreign-libs and synchronous XMLHttpRequest in Chrome Hitesh Mon, 06 Feb 2017 15:43:34 -0800"},
{"body":"On Monday, February 6, 2017 at 7:15:49 PM UTC+1, mynomoto wrote:\n> Hello,\n> \n> After seeing this message, we extracted a library from work that uses garden \n> and adds the style when the component is rendered (when using React). Code \n> currently lives at https:\/\/github.com\/guilherme-teodoro\/stylish\n> \n\nCool, looks very much like\n\nhttps:\/\/github.com\/cssinjs\/jss\nhttps:\/\/github.com\/css-modules\/css-modules\n\nGreat to see some more work on this topic, feels like JS world has been on this \nfor much longer. CLJS definitely needs to catch up here.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Thomas Heller Mon, 06 Feb 2017 11:24:55 -0800"},
{"body":"> \n> Thanks got it. My mistake was mixing reagent's markup with yours. Would you \n> say this is an alternative, similar to how shadow.markup relates to om.dom? \nYes. While I like the hiccup-ish reagent syntax it does present some \nperformance issues.\n\nIn reagent you first allocate a bunch of vectors, these are then interpreted by \nreagent and turned into ReactElements allocating even more objects. The vectors \nare now \"garbage\" and have to be collected. The reagent approach produces about \ntwice as much garbage and is slower overall (keyword parsing) as you have way \nmore work being done each render, since browsers are pretty fast these days you \ndon't notice this much but the price is there.\n\nom.dom or shadow.markup directly go through React.createElement and the result \nwill then be interpreted by React effectively skipping the \"vector-phase\". I \neven go a little further than om.dom if you look at the shadow.markup.react ns \n(direct drop-in replacement btw). I do some macro magic to further reduce cost. \nThis is probably overkill though, but you get the usual dom\/h1, dom\/div, etc \nfunctions.\n\nI think the reason why the hiccup syntax is so popular is because of the \nshorthand form of :div.class-a.class-b, but since you do not need this with \ndefstyled the argument for the hiccup syntax is weaker.\n\nSo yes, the hiccup-ish syntax is an alternative but I stick to exclusively \nusing the fn-style syntax. Using Cursive indent-only mode it indents just like \nvectors and after doing this for a while now it looks better than the hiccup \nsyntax to me. The price of reagent is that you cannot mix both syntaxes, on the \nclojure version I currently support the mixed style but that is probably going \naway at some point.\n\nSorry, didn't want to turn this into a rant on reagent.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Thomas Heller Mon, 06 Feb 2017 11:12:05 -0800"},
{"body":"Hello,\n\nAfter seeing this message, we extracted a library from work that uses garden \nand adds the style when the component is rendered (when using React). Code \ncurrently lives at https:\/\/github.com\/guilherme-teodoro\/stylish \nUsage is like:\n\n(ns stylish.example\n  (:require [stylish.core :as stylish]\n            [garden.units :as units]))\n\n(defn style\n  [color]\n  [{:font-size (units\/px 40)\n    :background color}])\n\n(def button-style\n  [{:color :yellow}\n   [:&:hover {:color :blue}]])\n\n(defn show\n  []\n  [:div {:class (stylish\/render (style color))} ;; return: \nstylish_example-style-1\n   [:button {:class (stylish\/render button-style)}]]) ;; return: \nstylish_example-button-style-1\n\n\nWe have being using it in prod from months now and it works fine.\n\nHTH,\nmynomoto\n\nOn Thursday, February 2, 2017 at 8:36:43 PM UTC-2, Thomas Heller wrote:\n> Hello,\n> \n> I'm not sure how many of you are in this horrible situation where you have to \n> write CSS for your React Components. I typically have to write way more than \n> I'd like and always hated the way I wrote it. Until a few weeks ago.\n> \n> I wrote this thing and so far I really like it. Too early to tell whether \n> this is actually a good idea but I already prefer it over pretty much \n> everything else I have used in the past (CSS, SCSS, OOCSS, BEM, ...).\n> \n> Anyways here it goes:\n> \n> (ns my.fancy.component\n>   (:require [shadow.markup.css :as css :refer (defstyled)]))\n> \n> (defstyled title :h1\n>  [env]\n>  {:color \"red\"})\n> \n> (h1 {} \"hello world\")\n> \n> In Clojure this produces <h1 class=\"my-fancy-component--title\">hello \n> world<\/h1>. There are also ways to generate the appropriate CSS so the \n> element is actually styled in your page. Not totally settled on the final API \n> but it works well enough for now.\n> \n> In ClojureScript this produces a ReactElement and should work with React \n> natively and most CLJS React Wrappers like OM (although I tried no other than \n> my own). No extra CSS generation is required here, just include it in your \n> page and it will be styled.\n> \n> More here: https:\/\/github.com\/thheller\/shadow\/wiki\/shadow.markup\n> \n> This is basically my take on the whole css-in-js thing that is happening in \n> the JS world if anyone follows this. I wasn't happy with any of their \n> implementations so I wrote this.\n> \n> If you'd like to use this try it with this:\n> \n> [thheller\/shadow-client \"1.0.180\"]\n> \n> The Clojure part also requires hiccup, the CLJS parts require React via \n> cljsjs.react.\n> \n> If anyone is actually interested in this I'd be happy to go over some more \n> details. I just open-sourced this as I wanted to use it in another project \n> and needed a place to put it. Consider this very ALPHA though, you have been \n> warned. ;)\n> \n> Cheers,\n> \/thomas\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS mynomoto Mon, 06 Feb 2017 10:16:18 -0800"},
{"body":"There was a bug reported and since fixed in master. There will be a release\nthis Friday just to address this regression. \nDavid\n\nOn Sat, Feb 4, 2017 at 11:43 PM, Hitesh <hitesh.jas...@gmail.com> wrote:\n\n> I'm trying to upgrade a project from 1.8.51.  It has some foreign libs and\n> manually defined externs in it which were working fine.\n>\n>       :foreign-libs [{:file \"https:\/\/cdnjs.cloudflare.com\/\n> ajax\/libs\/gsap\/1.18.5\/TweenMax.min.js\"\n>                       :provides [\"TweenMax\"]}]\n>       :externs [\"react\/externs\/react.js\"\n>                 \"externs\/greensock.js\"]\n>\n>\n> After upgrading the version of clojurescript, running lein figwheel dumps\n> this exception.\n>\n>\n> java.lang.IllegalArgumentException: \/ajax\/libs\/gsap\/1.18.5\/TweenMax.min.js\n> is no\n> t a relative path\n>  at clojure.java.io$as_relative_path.invokeStatic (io.clj:414)\n>     clojure.java.io$file.invokeStatic (io.clj:426)\n>     clojure.java.io$file.invoke (io.clj:418)\n>     cljs.closure$write_javascript.invokeStatic (closure.clj:1594)\n>     cljs.closure$write_javascript.invoke (closure.clj:1587)\n>     cljs.closure$source_on_disk.invokeStatic (closure.clj:1633)\n>     cljs.closure$source_on_disk.invoke (closure.clj:1628)\n>     cljs.closure$output_unoptimized$fn__6325.invoke (closure.clj:1671)\n>     clojure.core$map$fn__4785.invoke (core.clj:2646)\n>     clojure.lang.LazySeq.sval (LazySeq.java:40)\n>     clojure.lang.LazySeq.seq (LazySeq.java:49)\n>     clojure.lang.RT.seq (RT.java:521)\n>     clojure.core$seq__4357.invokeStatic (core.clj:137)\n>     clojure.core$filter$fn__4812.invoke (core.clj:2700)\n>     clojure.lang.LazySeq.sval (LazySeq.java:40)\n>     clojure.lang.LazySeq.seq (LazySeq.java:49)\n>     clojure.lang.RT.seq (RT.java:521)\n>     clojure.core$seq__4357.invokeStatic (core.clj:137)\n>     clojure.core$map$fn__4785.invoke (core.clj:2637)\n>     clojure.lang.LazySeq.sval (LazySeq.java:40)\n>     clojure.lang.LazySeq.seq (LazySeq.java:49)\n>     clojure.lang.Cons.next (Cons.java:39)\n>     clojure.lang.RT.next (RT.java:688)\n>     clojure.core$next__4341.invokeStatic (core.clj:64)\n>     clojure.core$str$fn__4419.invoke (core.clj:546)\n>     clojure.core$str.invokeStatic (core.clj:544)\n>     clojure.core$str.doInvoke (core.clj:533)\n>     clojure.lang.RestFn.applyTo (RestFn.java:139)\n>     clojure.core$apply.invokeStatic (core.clj:646)\n>     clojure.core$apply.invoke (core.clj:641)\n>\n>\n> So although https:\/\/github.com\/clojure\/clojurescript\/wiki\/Compiler-\n> Options#foreign-libs still says that URLs are valid for :file, I\n> downloaded the libs and specified them as relative paths.\n>\n>\n>       :foreign-libs [{:file \"gsap\/1.18.5\/TweenMax.min.js\"\n>                       :file-min \"gsap\/1.18.5\/TweenMax.min.js\"\n>                       :provides [\"TweenMax\"]}]\n>       :externs [\"react\/externs\/react.js\"\n>                 \"externs\/greensock.js\"]\n>\n>\n> Lein figwheel now happily starts up.  But when I try to access the site in\n> Chrome, it doesn't load and has the following new error in the console:\n>\n>\n> Synchronous XMLHttpRequest on the main thread is deprecated because of its\n> detrimental effects to the end user's experience. For more help, check\n> https:\/\/xhr.spec.whatwg.org\/.\n>\n> goog.loadFileSync_      @       base.js:1396\n> goog.retrieveAndExecModule_     @       base.js:1419\n> (anonymous)     @       VM113:1\n> goog.writeScriptTag_    @       base.js:1223\n> goog.importScript_      @       base.js:879\n> goog.importModule_      @       base.js:900\n> goog.writeScripts_      @       base.js:1323\n> goog.require    @       base.js:663\n> (anonymous)     @       (index):75\n>\n>\n> The site works as normal in Safari, figwheel reloads changes.  It's just\n> Chrome that's not working.  I'm at a bit of a loss here now.  Any ideas?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Upgrading to 1.9.456 challenges with foreign-libs and synchronous XMLHttpRequest in Chrome David Nolen Mon, 06 Feb 2017 09:41:27 -0800"},
{"body":"On Sunday, February 5, 2017 at 5:48:06 PM UTC, Thomas Heller wrote:\n> > Cheers Thomas. When you have the likes of a containing element. How do you \n> > handle the wrap when defstyled returns a ReactElement?\n> > \n> > (defstyled container :div\n> >  [_]\n> >   {:display \"flex\"})\n> \n> Not sure I understand the question? ReactElements can have children, which \n> this fully supports.\n> \n> (defstyled things :div\n>   [_]\n>   {:display \"flex\"})\n> \n> (defstyled thing :div\n>   [_]\n>   {:flex 1\n>    \"&.wide\"\n>    {:flex 2}})\n> \n> (things {}\n>   (thing {} \"one\")\n>   (thing {:classes [\"wide\"]} \"two\")\n>   (thing {} \"three\"))\n> \n> \n> If you are talking about styles that should only apply when B is contained in \n> A you can do this\n> \n> (defstyled A :div\n>   [_]\n>   {})\n> \n> (defstyled B :div\n>   [_]\n>   {:normal \"styles\"\n>    A\n>    {:inside-a \"styles\"}})\n> \n> I just relaxed the requirements for nesting a bit, previously you had to wrap \n> it in a vector and supply a suffix.\n> \n> (defstyled B :div\n>   [_]\n>   {:normal \"styles\"\n>    [A \"\"]\n>    {:inside-a \"styles\"}})\n> \n> But with [thheller\/shadow-client \"1.0.183\"] you can do the above version \n> without the vector.  The suffix is so you can refer to parent selectors as \n> well.\n> \n> I have used this once in my project\n> \n> (defstyled control-group :div\n>   [_]\n>   {:margin-bottom 20\n>    \"&.inline\"\n>    {:display \"flex\"}\n> \n>    \"&:last-child\"\n>    {:margin-bottom 0}\n>    })\n> \n> (defstyled control-label :div\n>   [_]\n>   (css\/root\n>     {}\n>     (css\/rule \"&.select\"\n>       {:line-height 37})\n>     (css\/rule \"&.bold\"\n>       {:font-weight \"bold\"})\n>     (css\/nested-rule [control-group \".inline\"]\n>       {:flex 1})))\n> \n> (css\/...) is the little more verbose syntax, which the maps desugar too. \n> Could have used a map, wrote that before I had the map syntax.\n> \n> The result of this is (assuming \"test\" ns):\n> \n> div.test--control-group {...}\n> div.test--control-group.inline {...}\n> div.test--control-label {...}\n> \n> ;; and the nested rule:\n> div.test--control-group.inline div.test--control-label {..}\n> \n> Hope that answers your question.\n> \n> \/thomas \nThanks got it. My mistake was mixing reagent's markup with yours. Would you say \nthis is an alternative, similar to how shadow.markup relates to om.dom?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Eoin Mon, 06 Feb 2017 09:18:43 -0800"},
{"body":"The initial release of serverless-cljs-plugin\n<https:\/\/www.npmjs.com\/package\/serverless-cljs-plugin> works w\/ cljs-lambda\n<https:\/\/github.com\/nervous-systems\/cljs-lambda> to allow Clojurescript\nfunctions to be deployed via Serverless <http:\/\/serverless.com> - making it\nextremely simple to expose plain functions as HTTP endpoints, schedule\ntheir invocation, or distribute them alongside configuration files which\ndeclare their runtime dependencies (queues, Dynamo tables, execution roles,\netc.) \n$ lein new serverless-cljs example\n\nGenerates a tiny example endpoint\/project.  A short walkthrough of its\noutput:\n\nhttps:\/\/nervous.io\/clojurescript\/lambda\/2017\/02\/06\/serverless-cljs\/\n\nTake care,\nMoe\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] serverless-cljs-plugin Moe Aboulkheir Mon, 06 Feb 2017 05:17:25 -0800"},
{"body":"On Friday, February 3, 2017 at 2:05:55 PM UTC+13, Hari Krishnan wrote:\n> Hello,\n> \n> Can anyone recommend a CarrierWave (for Ruby on Rails) like library for \n> Clojure\/Clojurescript, for S3 and Datomic?  Much appreciated.\n> \n> What is the good practice?  Any thoughts?\n> \n> Thanks in advance.\n> -Hari \nThere is s3-beam (https:\/\/github.com\/martinklepsch\/s3-beam) which lets you \nupload directly to S3 from the browser.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Can anyone recommend a library for saving attachments and images on S3? Daniel Compton Sun, 05 Feb 2017 23:04:56 -0800"},
{"body":"Sorry for the delay on this but should be out this week!\n\nOn Sun, Feb 5, 2017 at 11:07 AM, Rangel Spasov <raspa...@gmail.com> wrote: \n> Looking forward to the results! :)\n>\n> On Monday, December 12, 2016 at 6:43:58 AM UTC-8, Alex Miller wrote:\n> > It's time for the annual State of Clojure Community survey!\n> >\n> > If you are a user of Clojure, ClojureScript, or ClojureCLR, we are\n> greatly interested in your responses to the following survey:\n> >\n> > https:\/\/www.surveymonkey.com\/r\/clojure2016\n> >\n> > The survey contains four pages:\n> >\n> > 1. General questions applicable to any user of Clojure, ClojureScript,\n> or ClojureCLR\n> > 2. Questions specific to the JVM Clojure (skip if not applicable)\n> > 3. Questions specific to ClojureScript (skip if not applicable)\n> > 4. Final comments\n> >\n> > The survey will close December 23rd. We will release all of the data and\n> our analysis in January. We are greatly appreciative of your input!\n> >\n> > If you have any questions, please let me know.\n> >\n> > Alex Miller\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/\n> topic\/clojurescript\/M-kV_AkcWJU\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: [ANN] 2016 State of Clojure Community Survey Alex Miller Sun, 05 Feb 2017 13:39:06 -0800"},
{"body":"> Cheers Thomas. When you have the likes of a containing element. How do you \n> handle the wrap when defstyled returns a ReactElement?\n> \n> (defstyled container :div\n>  [_]\n>   {:display \"flex\"}) \nNot sure I understand the question? ReactElements can have children, which this \nfully supports.\n\n(defstyled things :div\n  [_]\n  {:display \"flex\"})\n\n(defstyled thing :div\n  [_]\n  {:flex 1\n   \"&.wide\"\n   {:flex 2}})\n\n(things {}\n  (thing {} \"one\")\n  (thing {:classes [\"wide\"]} \"two\")\n  (thing {} \"three\"))\n\n\nIf you are talking about styles that should only apply when B is contained in A \nyou can do this\n\n(defstyled A :div\n  [_]\n  {})\n\n(defstyled B :div\n  [_]\n  {:normal \"styles\"\n   A\n   {:inside-a \"styles\"}})\n\nI just relaxed the requirements for nesting a bit, previously you had to wrap \nit in a vector and supply a suffix.\n\n(defstyled B :div\n  [_]\n  {:normal \"styles\"\n   [A \"\"]\n   {:inside-a \"styles\"}})\n\nBut with [thheller\/shadow-client \"1.0.183\"] you can do the above version \nwithout the vector.  The suffix is so you can refer to parent selectors as well.\n\nI have used this once in my project\n\n(defstyled control-group :div\n  [_]\n  {:margin-bottom 20\n   \"&.inline\"\n   {:display \"flex\"}\n\n   \"&:last-child\"\n   {:margin-bottom 0}\n   })\n\n(defstyled control-label :div\n  [_]\n  (css\/root\n    {}\n    (css\/rule \"&.select\"\n      {:line-height 37})\n    (css\/rule \"&.bold\"\n      {:font-weight \"bold\"})\n    (css\/nested-rule [control-group \".inline\"]\n      {:flex 1})))\n\n(css\/...) is the little more verbose syntax, which the maps desugar too. Could \nhave used a map, wrote that before I had the map syntax.\n\nThe result of this is (assuming \"test\" ns):\n\ndiv.test--control-group {...}\ndiv.test--control-group.inline {...}\ndiv.test--control-label {...}\n\n;; and the nested rule:\ndiv.test--control-group.inline div.test--control-label {..}\n\nHope that answers your question.\n\n\/thomas\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Thomas Heller Sun, 05 Feb 2017 09:48:36 -0800"},
{"body":"Looking forward to the results! :) \n\nOn Monday, December 12, 2016 at 6:43:58 AM UTC-8, Alex Miller wrote:\n> It's time for the annual State of Clojure Community survey!\n> \n> If you are a user of Clojure, ClojureScript, or ClojureCLR, we are greatly \n> interested in your responses to the following survey:\n> \n> https:\/\/www.surveymonkey.com\/r\/clojure2016\n> \n> The survey contains four pages:\n> \n> 1. General questions applicable to any user of Clojure, ClojureScript, or \n> ClojureCLR\n> 2. Questions specific to the JVM Clojure (skip if not applicable)\n> 3. Questions specific to ClojureScript (skip if not applicable)\n> 4. Final comments\n> \n> The survey will close December 23rd. We will release all of the data and our \n> analysis in January. We are greatly appreciative of your input!\n> \n> If you have any questions, please let me know.\n> \n> Alex Miller \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] 2016 State of Clojure Community Survey Rangel Spasov Sun, 05 Feb 2017 09:08:06 -0800"},
{"body":"On Thursday, February 2, 2017 at 10:36:43 PM UTC, Thomas Heller wrote:\n> Hello,\n> \n> I'm not sure how many of you are in this horrible situation where you have to \n> write CSS for your React Components. I typically have to write way more than \n> I'd like and always hated the way I wrote it. Until a few weeks ago.\n> \n> I wrote this thing and so far I really like it. Too early to tell whether \n> this is actually a good idea but I already prefer it over pretty much \n> everything else I have used in the past (CSS, SCSS, OOCSS, BEM, ...).\n> \n> Anyways here it goes:\n> \n> (ns my.fancy.component\n>   (:require [shadow.markup.css :as css :refer (defstyled)]))\n> \n> (defstyled title :h1\n>  [env]\n>  {:color \"red\"})\n> \n> (h1 {} \"hello world\")\n> \n> In Clojure this produces <h1 class=\"my-fancy-component--title\">hello \n> world<\/h1>. There are also ways to generate the appropriate CSS so the \n> element is actually styled in your page. Not totally settled on the final API \n> but it works well enough for now.\n> \n> In ClojureScript this produces a ReactElement and should work with React \n> natively and most CLJS React Wrappers like OM (although I tried no other than \n> my own). No extra CSS generation is required here, just include it in your \n> page and it will be styled.\n> \n> More here: https:\/\/github.com\/thheller\/shadow\/wiki\/shadow.markup\n> \n> This is basically my take on the whole css-in-js thing that is happening in \n> the JS world if anyone follows this. I wasn't happy with any of their \n> implementations so I wrote this.\n> \n> If you'd like to use this try it with this:\n> \n> [thheller\/shadow-client \"1.0.180\"]\n> \n> The Clojure part also requires hiccup, the CLJS parts require React via \n> cljsjs.react.\n> \n> If anyone is actually interested in this I'd be happy to go over some more \n> details. I just open-sourced this as I wanted to use it in another project \n> and needed a place to put it. Consider this very ALPHA though, you have been \n> warned. ;)\n> \n> Cheers,\n> \/thomas \nCheers Thomas. When you have the likes of a containing element. How do you \nhandle the wrap when defstyled returns a ReactElement?\n\n(defstyled container :div\n [_]\n  {:display \"flex\"})\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Eoin Sun, 05 Feb 2017 07:09:58 -0800"},
{"body":"Not long ago, Alibaba open sourced two intriguing projects that may interest \nthe ClojureScript community as well. Here are some links: \nWeex - Build web & Mobile Android, iOS Native Apps with JavaScript \/ by Alibaba \n(alternative to ReactNative & NativeScript)  \nhttps:\/\/weex-project.io\/\nhttps:\/\/weex-project.io\/v-0.10\/advanced\/index.html\nhttps:\/\/weex-project.io\/v-0.10\/guide\/index.html\nhttps:\/\/weex-project.io\/v-0.10\/references\/index.html\nhttps:\/\/weex-project.io\/v-0.10\/references\/specs\/js-bundle-format.html\nhttps:\/\/weex-project.io\/v-0.10\/references\/specs\/js-framework-apis.html\nhttps:\/\/market.weex-project.io\nhttps:\/\/market.weex-project.io\/doc.html\n\nRax - Blazing fast, tiny (8.0kb) & universal (browser, Weex\/Native & NodeJS) \nReactJS\/ReactNative compatible rendering virtual DOM engine, by Alibaba \nhttp:\/\/rax.taobaofed.org\nhttp:\/\/rax.taobaofed.org\/playground\/\nhttps:\/\/github.com\/alibaba\/rax\nhttps:\/\/github.com\/alibaba\/rax\/tree\/master\/docs\nhttps:\/\/github.com\/alibaba\/rax\/tree\/master\/examples\n\n@JiyinYiyong [https:\/\/twitter.com\/jiyinyiyong] has a great coverage of \"Weex \nConf 2017\" where Weex, Rax, ReactJS, ReactNative stuff been presented: \nhttps:\/\/medium.com\/@jiyinyiyong\/my-day-in-weex-conf-2017-90258ba0fc51\n\nWith rax using the same ReactJS API (like Inferno as well), all the ReactJS \nwrappers (OmNext, Reagent, Rum, Quisc) may be interested into using rax that is \nsmaller, faster with server-side rendering support but mos importantly \nproviding native deployment\/packaging for iOS & Android over Weex (instead of \nReactNative) ...\n\nI've also created a Twitter list that may be useful for those watching this \nspace: https:\/\/twitter.com\/Jaguard\/lists\/weex\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Weex & Rax by Alibaba - Alternative & compatible ReactJS\/ReactNative JavaScript Frameworks office Sat, 04 Feb 2017 21:53:16 -0800"},
{"body":"I'm trying to upgrade a project from 1.8.51.  It has some foreign libs and \nmanually defined externs in it which were working fine. \n      :foreign-libs [{:file \n\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/gsap\/1.18.5\/TweenMax.min.js\";\n                      :provides [\"TweenMax\"]}]\n      :externs [\"react\/externs\/react.js\"\n                \"externs\/greensock.js\"]\n\n\nAfter upgrading the version of clojurescript, running lein figwheel dumps this \nexception.\n\n\njava.lang.IllegalArgumentException: \/ajax\/libs\/gsap\/1.18.5\/TweenMax.min.js is no\nt a relative path\n at clojure.java.io$as_relative_path.invokeStatic (io.clj:414)\n    clojure.java.io$file.invokeStatic (io.clj:426)\n    clojure.java.io$file.invoke (io.clj:418)\n    cljs.closure$write_javascript.invokeStatic (closure.clj:1594)\n    cljs.closure$write_javascript.invoke (closure.clj:1587)\n    cljs.closure$source_on_disk.invokeStatic (closure.clj:1633)\n    cljs.closure$source_on_disk.invoke (closure.clj:1628)\n    cljs.closure$output_unoptimized$fn__6325.invoke (closure.clj:1671)\n    clojure.core$map$fn__4785.invoke (core.clj:2646)\n    clojure.lang.LazySeq.sval (LazySeq.java:40)\n    clojure.lang.LazySeq.seq (LazySeq.java:49)\n    clojure.lang.RT.seq (RT.java:521)\n    clojure.core$seq__4357.invokeStatic (core.clj:137)\n    clojure.core$filter$fn__4812.invoke (core.clj:2700)\n    clojure.lang.LazySeq.sval (LazySeq.java:40)\n    clojure.lang.LazySeq.seq (LazySeq.java:49)\n    clojure.lang.RT.seq (RT.java:521)\n    clojure.core$seq__4357.invokeStatic (core.clj:137)\n    clojure.core$map$fn__4785.invoke (core.clj:2637)\n    clojure.lang.LazySeq.sval (LazySeq.java:40)\n    clojure.lang.LazySeq.seq (LazySeq.java:49)\n    clojure.lang.Cons.next (Cons.java:39)\n    clojure.lang.RT.next (RT.java:688)\n    clojure.core$next__4341.invokeStatic (core.clj:64)\n    clojure.core$str$fn__4419.invoke (core.clj:546)\n    clojure.core$str.invokeStatic (core.clj:544)\n    clojure.core$str.doInvoke (core.clj:533)\n    clojure.lang.RestFn.applyTo (RestFn.java:139)\n    clojure.core$apply.invokeStatic (core.clj:646)\n    clojure.core$apply.invoke (core.clj:641)\n\n\nSo although \nhttps:\/\/github.com\/clojure\/clojurescript\/wiki\/Compiler-Options#foreign-libs \nstill says that URLs are valid for :file, I downloaded the libs and specified \nthem as relative paths.\n\n\n      :foreign-libs [{:file \"gsap\/1.18.5\/TweenMax.min.js\"\n                      :file-min \"gsap\/1.18.5\/TweenMax.min.js\"\n                      :provides [\"TweenMax\"]}]\n      :externs [\"react\/externs\/react.js\"\n                \"externs\/greensock.js\"]\n\n\nLein figwheel now happily starts up.  But when I try to access the site in \nChrome, it doesn't load and has the following new error in the console:\n\n\nSynchronous XMLHttpRequest on the main thread is deprecated because of its \ndetrimental effects to the end user's experience. For more help, check \nhttps:\/\/xhr.spec.whatwg.org\/.\n\ngoog.loadFileSync_      @       base.js:1396\ngoog.retrieveAndExecModule_     @       base.js:1419\n(anonymous)     @       VM113:1\ngoog.writeScriptTag_    @       base.js:1223\ngoog.importScript_      @       base.js:879\ngoog.importModule_      @       base.js:900\ngoog.writeScripts_      @       base.js:1323\ngoog.require    @       base.js:663\n(anonymous)     @       (index):75\n\n\nThe site works as normal in Safari, figwheel reloads changes.  It's just Chrome \nthat's not working.  I'm at a bit of a loss here now.  Any ideas?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Upgrading to 1.9.456 challenges with foreign-libs and synchronous XMLHttpRequest in Chrome Hitesh Sat, 04 Feb 2017 21:49:06 -0800"},
{"body":"Just define them inside the element.\n\n(defstyled h1 :h1\n  [_]\n  {:color \"red\"\n   \"@media (max-width: 600px)\"\n   {:color \"green\"}}) \nOr put the query inside a def, so you can re-use it.\n\nhttps:\/\/github.com\/thheller\/reagent-test\/blob\/1dd4193273984971fd1f8fb9717d804a475785af\/src\/reagent_test\/core.cljs#L5-L12\n\nAlternatively you could use the CSS env as well.\n\n(css\/set-env!\n  {:media\n   {:smartphone\n    \"@media (max-width: 400px)\"}})\n\n(defstyled h1 :h1\n  [env]\n  {:color \"red\"\n   (-> env :media :smartphone)\n   {:color \"green\"}})\n\nI'm not too happy with the set-env! call as it must be called before the first \nelement is USED (not defined). I call this in my app\/init function. Didn't talk \ntoo much about env yet, but that is basically it. Define anything you want in \nenv, it is passed into every defstyled when the first element is created and \ncan influence your CSS that way (ie. theming support for re-usable components).\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Thomas Heller Sat, 04 Feb 2017 11:15:56 -0800"},
{"body":"On Thursday, February 2, 2017 at 10:36:43 PM UTC, Thomas Heller wrote:\n> Hello,\n> \n> I'm not sure how many of you are in this horrible situation where you have to \n> write CSS for your React Components. I typically have to write way more than \n> I'd like and always hated the way I wrote it. Until a few weeks ago.\n> \n> I wrote this thing and so far I really like it. Too early to tell whether \n> this is actually a good idea but I already prefer it over pretty much \n> everything else I have used in the past (CSS, SCSS, OOCSS, BEM, ...).\n> \n> Anyways here it goes:\n> \n> (ns my.fancy.component\n>   (:require [shadow.markup.css :as css :refer (defstyled)]))\n> \n> (defstyled title :h1\n>  [env]\n>  {:color \"red\"})\n> \n> (h1 {} \"hello world\")\n> \n> In Clojure this produces <h1 class=\"my-fancy-component--title\">hello \n> world<\/h1>. There are also ways to generate the appropriate CSS so the \n> element is actually styled in your page. Not totally settled on the final API \n> but it works well enough for now.\n> \n> In ClojureScript this produces a ReactElement and should work with React \n> natively and most CLJS React Wrappers like OM (although I tried no other than \n> my own). No extra CSS generation is required here, just include it in your \n> page and it will be styled.\n> \n> More here: https:\/\/github.com\/thheller\/shadow\/wiki\/shadow.markup\n> \n> This is basically my take on the whole css-in-js thing that is happening in \n> the JS world if anyone follows this. I wasn't happy with any of their \n> implementations so I wrote this.\n> \n> If you'd like to use this try it with this:\n> \n> [thheller\/shadow-client \"1.0.180\"]\n> \n> The Clojure part also requires hiccup, the CLJS parts require React via \n> cljsjs.react.\n> \n> If anyone is actually interested in this I'd be happy to go over some more \n> details. I just open-sourced this as I wanted to use it in another project \n> and needed a place to put it. Consider this very ALPHA though, you have been \n> warned. ;)\n> \n> Cheers,\n> \/thomas \nThis is great. How do you approach media queries? \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Eoin Sat, 04 Feb 2017 10:48:59 -0800"},
{"body":"FWIW I did a quick test to see if things worked with reagent. Turns out they do. \nBasically works out of the box:\nhttps:\/\/github.com\/thheller\/reagent-test\n\nThe dependency on Clojure 1.9 was not intentional and I would remove it if \nanyone wants to use this with 1.8.\n\nAnyways feel free to clone the test project and mess around, you get the whole \nfigwheel experience + CSS without editing CSS files.\n\n\/thomas\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Thomas Heller Fri, 03 Feb 2017 13:13:13 -0800"},
{"body":"As I said I haven't used garden, can't say how much of a difference there is. \nOne thing I can't change is that selectors have to be strings, they are \nkeywords in garden. The maps of css properties should be portable though and \nyou shouldn't really need the selectors after? \nAs for re-using css classes: Don't! That is the whole point of this, as \nmentioned here: http:\/\/mrmrs.io\/writing\/2016\/03\/24\/scalable-css\/ and elsewhere.\n\nI have been in this situation many times where I'm scared to touch an existing \nclass since I have no direct record of who uses it in which situation. Or where \nI added another class with !important, just to have a quick fix somewhere. Also \nI hated OOCSS with things like <div class=\"foo bar baz boom bang fiddle\"> where \nthe actual order mattered and I never could remember which it was.\n\nYou can and should however abuse all the power of Clojure. I have this for some \nof my styles:\n\n(defn button-style [env]\n  {:padding 10\n   :border (str \"1px solid \" (-> env :colors :border))\n   :background-color (-> env :colors :bg)})\n   \nand then re-use this a couple time for anything that should look like a button:\n\n(defstyled link :a\n  [env]\n  (merge\n    (button-style env)\n    {:display \"inline-block\"\n     :text-decoration \"none\"}))\n\n(defstyled button :button\n  [env]\n  (merge\n    (button-style env)\n    {:you-get \"the-idea\"}))\n\nI currently still have a base.css which includes normalizr.css and some other \ngeneric classes, you can of course still use (button {:className \"generic\"} \n...). Nothing wrong with that.\n\n\nAs for performance: The generated selectors are very specific in that they only \nmatch one thing, too open generic styles tend to cause issues. Also if you \nstick to \"modern\" things (flexbox) the need for some filler HTML elements goes \naway which improves overall performance, not just CSS. Style generation also \nhappens ONCE, so even complex style-fns should not be an issue ever.\n\nAlso thanks for :advanced optimizations the code to generate the CSS should by \nmuch smaller than any actual minified CSS. Did I mention dead code removal yet? \n;)\n\nBut I currently have only 89 \"defstyled\" things in my project myself, as this \nis still fairly new. Too early to make general claims about performance, but it \nshould probably be on par with hand-written CSS. Generating styles on the \nclient might be a bad idea too, my stuff is not yet complex enough to say. Time \nwill tell, I am committed however as the past few weeks produced basically zero \nheadaches about CSS and that is a nice feeling.\n\n\/thomas\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Thomas Heller Fri, 03 Feb 2017 09:48:21 -0800"},
{"body":"On Thursday, February 2, 2017 at 11:36:43 PM UTC+1, Thomas Heller wrote:\n> Hello,\n> \n> I'm not sure how many of you are in this horrible situation where you have to \n> write CSS for your React Components. I typically have to write way more than \n> I'd like and always hated the way I wrote it. Until a few weeks ago.\n> \n> I wrote this thing and so far I really like it. Too early to tell whether \n> this is actually a good idea but I already prefer it over pretty much \n> everything else I have used in the past (CSS, SCSS, OOCSS, BEM, ...).\n> \n> Anyways here it goes:\n> \n> (ns my.fancy.component\n>   (:require [shadow.markup.css :as css :refer (defstyled)]))\n> \n> (defstyled title :h1\n>  [env]\n>  {:color \"red\"})\n> \n> (h1 {} \"hello world\")\n> \n> In Clojure this produces <h1 class=\"my-fancy-component--title\">hello \n> world<\/h1>. There are also ways to generate the appropriate CSS so the \n> element is actually styled in your page. Not totally settled on the final API \n> but it works well enough for now.\n> \n> In ClojureScript this produces a ReactElement and should work with React \n> natively and most CLJS React Wrappers like OM (although I tried no other than \n> my own). No extra CSS generation is required here, just include it in your \n> page and it will be styled.\n> \n> More here: https:\/\/github.com\/thheller\/shadow\/wiki\/shadow.markup\n> \n> This is basically my take on the whole css-in-js thing that is happening in \n> the JS world if anyone follows this. I wasn't happy with any of their \n> implementations so I wrote this.\n> \n> If you'd like to use this try it with this:\n> \n> [thheller\/shadow-client \"1.0.180\"]\n> \n> The Clojure part also requires hiccup, the CLJS parts require React via \n> cljsjs.react.\n> \n> If anyone is actually interested in this I'd be happy to go over some more \n> details. I just open-sourced this as I wanted to use it in another project \n> and needed a place to put it. Consider this very ALPHA though, you have been \n> warned. ;)\n> \n> Cheers,\n> \/thomas \nThis is interesting. A few thoughts...\n\nHave you considered using garden syntax for the style generation? I have a ton \nof garden styles already, and I imagine others do to, direct porting would be \nawesome.\n\nIs there a way to reuse css classes? Generating classes for each element \npotentially produces a lot of redundant css, and in cases where performance is \nan issue, the same class being applied to many elements will be faster\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CSS in CLJS Dylan Butman Fri, 03 Feb 2017 07:14:34 -0800"},
{"body":"I looked at garden but never used it. It seems like a direct alternative to \nSCSS\/Less, but nothing more. \nThe intent of shadow.markup (sorry, couldn't think of a better name yet) is \nthat I basically never want to write a single selector ever again. There are \nseveral cases where this is still needed but way less than I usually do.\n\nYou get several things for free by combining the actual HTML Tag with its CSS.\n\nThis is a pretty good introduction to the topic of css-in-js and \nstyled-components for React\nhttps:\/\/www.youtube.com\/watch?v=19gqsBc_Cx0\n\nMy API is very much inspired by this library, although less strings and more \nClojure. There are many more implementations of this here: \nhttps:\/\/github.com\/search?q=topic%3Acss-in-js&type=Repositories\n\nLet me try with some sample Clojure code. You'd write something like this to \ngenerate a simple html snippet:\n\n(ns my.site\n  (:require [hiccup.page :refer (html5))\n\n(defn page-html [title body]\n (html5\n  [:head]\n  [:body\n   [:div.box\n    [:h1.box__title \"foo\"]\n    [:div.box__content body]]]))\n\nHere we invented tree css classnames that we need to remember here and \nwhereever we get the actual CSS from. This over time leads to this: \nhttp:\/\/mrmrs.io\/writing\/2016\/03\/24\/scalable-css\/ at least it did for me in just \nabout every project ever. Garden does not do anything in this regard I think, \nyou still define things in two different places.\n\nWith shadow.markup you do this:\n\n;; put all defstyled elements in a separate namespace in a .cljc, so you can \nuse it everywhere.\n(ns my.html.box\n  (:require [shadow.markup.css :as css :refer (defstyled)]))\n  \n(defstyled box :div\n [env]\n {:padding 10\n  :border \"1px solid green\"})\n\n(defstyled title :h1\n [env]\n {:color \"red\"})\n\n(defstyled contents :div\n [env]\n {})\n\n;; my\/site.clj\n(ns my.site\n  (:require [my.html.box :as box]\n            [hiccup.page :refer (html5))\n\n(defn page-html [title body]\n  (html5\n    [:head]\n    [:body\n     (box\/box {}\n      (box\/title {} title)\n      (box\/contents {} body)))\n    ]))\n\nYou do not need to remember whether to use a :h1 or :div, you just directly use \nthe elements. Since everything in CLJ(S) is namespaced we get a safe naming \nscheme for CSS classes for free as well. You just write normal CLJ(S) code, you \ndon't need to context switch and synchronize the class names back and forth. \nRefactoring the defstyled name in Cursive will rename all of its uses as well \nthe CSS classnames. The CLJS version with :advanced gives you dead code removal \nfor free, so if you don't use an element it's CSS will be removed as well.\n\nThere are many more things but the basic idea is to bundle the CSS with the \nHTML that uses it while still supporting all of CSS (ie. no inline styles) and \nremaining pure Clojure.\n\nHTH,\n\/thomas\n\n\n\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] CSS in CLJS Thomas Heller Fri, 03 Feb 2017 00:14:44 -0800"},
{"body":"Hello,\n\nCan anyone recommend a CarrierWave (for Ruby on Rails) like library for \nClojure\/Clojurescript, for S3 and Datomic?  Much appreciated. \nWhat is the good practice?  Any thoughts?\n\nThanks in advance.\n-Hari\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Can anyone recommend a library for saving attachments and images on S3? Hari Krishnan Thu, 02 Feb 2017 17:06:07 -0800"},
{"body":"On Thu, Feb 02, 2017 at 02:36:43PM -0800, Thomas Heller wrote:\n> Hello,\n> \n> I'm not sure how many of you are in this horrible situation where you have to \n> write CSS for your React Components. I typically have to write way more than \n> I'd like and always hated the way I wrote it. Until a few weeks ago.\n> \n> I wrote this thing and so far I really like it. Too early to tell whether \n> this is actually a good idea but I already prefer it over pretty much \n> everything else I have used in the past (CSS, SCSS, OOCSS, BEM, ...).\n> \n> Anyways here it goes:\n> \n> (ns my.fancy.component\n>   (:require [shadow.markup.css :as css :refer (defstyled)]))\n> \n> (defstyled title :h1\n>  [env]\n>  {:color \"red\"})\n> \n> (h1 {} \"hello world\")\n> \n> In Clojure this produces <h1 class=\"my-fancy-component--title\">hello \n> world<\/h1>. There are also ways to generate the appropriate CSS so the \n> element is actually styled in your page. Not totally settled on the final API \n> but it works well enough for now.\n> \n> In ClojureScript this produces a ReactElement and should work with React \n> natively and most CLJS React Wrappers like OM (although I tried no other than \n> my own). No extra CSS generation is required here, just include it in your \n> page and it will be styled.\n> \n> More here: https:\/\/github.com\/thheller\/shadow\/wiki\/shadow.markup\n> \n> This is basically my take on the whole css-in-js thing that is happening in \n> the JS world if anyone follows this. I wasn't happy with any of their \n> implementations so I wrote this.\n> \n> If you'd like to use this try it with this:\n> \n> [thheller\/shadow-client \"1.0.180\"]\n> \n> The Clojure part also requires hiccup, the CLJS parts require React via \n> cljsjs.react.\n> \n> If anyone is actually interested in this I'd be happy to go over some more \n> details. I just open-sourced this as I wanted to use it in another project \n> and needed a place to put it. Consider this very ALPHA though, you have been \n> warned. ;)\n> \n> Cheers,\n> \/thomas\n> \nThomas,\n\nThanks for the library. For all of my projects which require CSS, I've bee \nusing garden [1] -- how does your shadow client compare and what would you list \nas the pros\/cons for using shadow over garden?\n\nRegards,\nJeaye\n\n1: https:\/\/github.com\/noprompt\/garden\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: PGP signature","subject":"Re: [ClojureScript] CSS in CLJS Jeaye Thu, 02 Feb 2017 15:44:52 -0800"},
{"body":"Hello,\n\nI'm not sure how many of you are in this horrible situation where you have to \nwrite CSS for your React Components. I typically have to write way more than \nI'd like and always hated the way I wrote it. Until a few weeks ago. \nI wrote this thing and so far I really like it. Too early to tell whether this \nis actually a good idea but I already prefer it over pretty much everything \nelse I have used in the past (CSS, SCSS, OOCSS, BEM, ...).\n\nAnyways here it goes:\n\n(ns my.fancy.component\n  (:require [shadow.markup.css :as css :refer (defstyled)]))\n\n(defstyled title :h1\n [env]\n {:color \"red\"})\n\n(h1 {} \"hello world\")\n\nIn Clojure this produces <h1 class=\"my-fancy-component--title\">hello \nworld<\/h1>. There are also ways to generate the appropriate CSS so the element \nis actually styled in your page. Not totally settled on the final API but it \nworks well enough for now.\n\nIn ClojureScript this produces a ReactElement and should work with React \nnatively and most CLJS React Wrappers like OM (although I tried no other than \nmy own). No extra CSS generation is required here, just include it in your page \nand it will be styled.\n\nMore here: https:\/\/github.com\/thheller\/shadow\/wiki\/shadow.markup\n\nThis is basically my take on the whole css-in-js thing that is happening in the \nJS world if anyone follows this. I wasn't happy with any of their \nimplementations so I wrote this.\n\nIf you'd like to use this try it with this:\n\n[thheller\/shadow-client \"1.0.180\"]\n\nThe Clojure part also requires hiccup, the CLJS parts require React via \ncljsjs.react.\n\nIf anyone is actually interested in this I'd be happy to go over some more \ndetails. I just open-sourced this as I wanted to use it in another project and \nneeded a place to put it. Consider this very ALPHA though, you have been \nwarned. ;)\n\nCheers,\n\/thomas\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] CSS in CLJS Thomas Heller Thu, 02 Feb 2017 14:36:54 -0800"},
{"body":"ote:\n> > Why i ask, what are the key use cases is i thought html5 games and data \n> > visualization might be strong points.\n> > \n> > Though when  i searched it i didnt see a lot https:\/\/github.com\/dparis\/phzr \n> > found this which was the top result it has low stars and no commits in a \n> > fair while.\n> > \n> > What are the uses that best fit?\n> > \n> > Thanks\n> > \n> > Sayth\n> \n> Since you mention games, you might want to take a look at Zetawar by David \n> Whittington: http:\/\/www.zetawar.com\/\n> \n> His approach was interesting. He used a custom but re-frame-like \n> architecture, and used svg instead of canvas. \nZetawar is pretty nice \nhttps:\/\/www.kickstarter.com\/projects\/djwhitt\/zetawar\/updates glad it uses svg.\n\nThanks also for the tip on OM thats definitely well supported. \nhttps:\/\/github.com\/omcljs\/om\n\ndataviz is definteily something I want to look at with clojurescript.\n\nCheers\n\nSayth\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: What are key use cases for clojurescript? Sayth Renshaw Tue, 31 Jan 2017 00:58:10 -0800"},
{"body":"Hi,\n\nI am pleased to announce the 0.2.0 version of kabel. It mainly provides\na new websocket client for the JVM with tyrus. This finally solved race\nconditions (not multithreading, but an unsafe API) I had with\nhttp.async.client (and the underlying apache websocket client). The\nhttp.async.client is still optionally provided. tyrus is also claimed to\nbe small and android compatible, so kabel should allow systems to extend\nboth to the browser and to mobile devices now. I haven't tried Android\nyet though. Additionally serialization is also implemented with the\nmiddleware concept now. I am fairly confident that one can build solid\ncross-platform systems with this release as is done by implementing the\nreplikativ database as middlewares for kabel. \n>From the README:\n\nkabel (German for cable\/wire) is a minimal, modern connection library\nmodelling a bidirectional wire to pass Clojure values between peers.\nPeers in Clojure and ClojureScript are symmetric and hence allow\nsymmetric cross-platform implementations. Clojure peers can connect to\nClojure and ClojureScript peers in the same way and vice versa. kabel\ncan use any bidirectional messaging channel, currently it supports\nweb-sockets. It also ships a transit middleware for efficient serialization.\n\nhttps:\/\/github.com\/replikativ\/kabel\n\nBest,\nChristian\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"[ClojureScript] ANN: kabel 0.2.0 - A library for simple wire-like connectivity semantics. Christian Weilbach Mon, 30 Jan 2017 16:18:07 -0800"},
{"body":"On Sunday, January 29, 2017 at 11:01:17 AM UTC-6, Sayth Renshaw wrote:\n> Why i ask, what are the key use cases is i thought html5 games and data \n> visualization might be strong points.\n> \n> Though when  i searched it i didnt see a lot https:\/\/github.com\/dparis\/phzr \n> found this which was the top result it has low stars and no commits in a fair \n> while.\n> \n> What are the uses that best fit?\n> \n> Thanks\n> \n> Sayth \nSince you mention games, you might want to take a look at Zetawar by David \nWhittington: http:\/\/www.zetawar.com\/\n\nHis approach was interesting. He used a custom but re-frame-like architecture, \nand used svg instead of canvas.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: What are key use cases for clojurescript? Luke Gessler Mon, 30 Jan 2017 09:11:40 -0800"},
{"body":"ClojureScript is well suited to rich client-side web applications and\nserver applications under Node. My rough intuition is that the most common\nuse case for ClojureScript in industry are rich B2B or B2C webapps, often\nusing Om, Reagent, re-frame, or another React wrapper. ClojureScript would\nbe good for games and data viz too. \nOn Mon, Jan 30, 2017 at 6:01 AM Sayth Renshaw <flebber.c...@gmail.com>\nwrote:\n\n> Why i ask, what are the key use cases is i thought html5 games and data\n> visualization might be strong points.\n>\n> Though when  i searched it i didnt see a lot\n> https:\/\/github.com\/dparis\/phzr found this which was the top result it has\n> low stars and no commits in a fair while.\n>\n> What are the uses that best fit?\n>\n> Thanks\n>\n> Sayth\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] What are key use cases for clojurescript? Daniel Compton Mon, 30 Jan 2017 05:45:59 -0800"},
{"body":"Why i ask, what are the key use cases is i thought html5 games and data \nvisualization might be strong points. \nThough when  i searched it i didnt see a lot https:\/\/github.com\/dparis\/phzr \nfound this which was the top result it has low stars and no commits in a fair \nwhile.\n\nWhat are the uses that best fit?\n\nThanks\n\nSayth \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] What are key use cases for clojurescript? Sayth Renshaw Sun, 29 Jan 2017 09:01:56 -0800"},
{"body":"Found, thanks!\n\nFrancesco \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.456, Externs Inference & Comprehensive JS Modules Support Francesco Bellomi Sat, 28 Jan 2017 12:01:32 -0800"},
{"body":"Looks like you have a dependency issue. Use `lein deps :tree` or the\nequivalent command to sort it out. \nHTH\nDavid\n\nOn Saturday, January 28, 2017, Francesco Bellomi <\nfrancesco.bell...@gmail.com> wrote:\n\n> Hi,\n>\n> first of all, congratulations on this release, it's a huge step ahead.\n>\n> I'm having an issue compiling a program with advanced optimizations, which\n> worked fine with .293\n>\n> I get the following exception, any ideas on how can i narrow down the\n> problem within my source?\n>\n> Exception in thread \"main\" java.lang.NoSuchMethodError:\n> com.google.common.base.Preconditions.checkState(\n> ZLjava\/lang\/String;Ljava\/lang\/Object;)V, compiling:(\/tmp\/form-\n> init5778645093287298904.clj:1:73)\n>         at clojure.lang.Compiler.load(Compiler.java:7442)\n>         at clojure.lang.Compiler.loadFile(Compiler.java:7368)\n>         at clojure.main$load_script.invokeStatic(main.clj:277)\n>         at clojure.main$init_opt.invokeStatic(main.clj:279)\n>         at clojure.main$init_opt.invoke(main.clj:279)\n>         at clojure.main$initialize.invokeStatic(main.clj:310)\n>         at clojure.main$null_opt.invokeStatic(main.clj:344)\n>         at clojure.main$null_opt.invoke(main.clj:341)\n>         at clojure.main$main.invokeStatic(main.clj:423)\n>         at clojure.main$main.doInvoke(main.clj:386)\n>         at clojure.lang.RestFn.applyTo(RestFn.java:137)\n>         at clojure.lang.Var.applyTo(Var.java:700)\n>         at clojure.main.main(main.java:37)\n> Caused by: java.lang.NoSuchMethodError: com.google.common.base.\n> Preconditions.checkState(ZLjava\/lang\/String;Ljava\/lang\/Object;)V\n>         at com.google.javascript.rhino.IR.name(IR.java:363)\n>         at com.google.javascript.jscomp.ClosureCodingConvention.<clinit>(\n> ClosureCodingConvention.java:474)\n>         at com.google.javascript.jscomp.Compiler.<init>(Compiler.java:202)\n>         at com.google.javascript.jscomp.Compiler.<init>(Compiler.java:264)\n>         at cljs.closure$make_closure_compiler.invokeStatic(closure.\n> clj:293)\n>         at cljs.closure$optimize.invokeStatic(closure.clj:1255)\n>         at cljs.closure$optimize.doInvoke(closure.clj:1251)\n>         at clojure.lang.RestFn.applyTo(RestFn.java:139)\n>         at clojure.core$apply.invokeStatic(core.clj:659)\n>         at cljs.closure$build.invokeStatic(closure.clj:2113)\n>         at cljs.build.api$build.invokeStatic(api.clj:205)\n>         at cljs.build.api$build.invoke(api.clj:193)\n>         at cljs.build.api$build.invokeStatic(api.clj:196)\n>         at cljsbuild.compiler$compile_cljs$fn__6997.invoke(compiler.\n> clj:59)\n>         at cljsbuild.compiler$compile_cljs.invokeStatic(compiler.clj:59)\n>         at cljsbuild.compiler$run_compiler.invokeStatic(compiler.clj:167)\n>         at user$eval7152$iter__7200__7204$fn__7205$fn__7231.invoke(\n> form-init5778645093287298904.clj:1)\n>         at user$eval7152$iter__7200__7204$fn__7205.invoke(form-\n> init5778645093287298904.clj:1)\n>         at clojure.lang.LazySeq.sval(LazySeq.java:40)\n>         at clojure.lang.LazySeq.seq(LazySeq.java:49)\n>         at clojure.lang.RT.seq(RT.java:525)\n>         at clojure.core$seq__6422.invokeStatic(core.clj:137)\n>         at clojure.core$dorun.invokeStatic(core.clj:3106)\n>         at clojure.core$doall.invokeStatic(core.clj:3121)\n>         at user$eval7152.invokeStatic(form-init5778645093287298904.clj:1)\n>         at user$eval7152.invoke(form-init5778645093287298904.clj:1)\n>         at clojure.lang.Compiler.eval(Compiler.java:6978)\n>         at clojure.lang.Compiler.eval(Compiler.java:6968)\n>         at clojure.lang.Compiler.load(Compiler.java:7430)\n>         ... 12 more\n>\n> thanks in advance\n>\n> Francesco\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com <javascript:;>.\n> To post to this group, send email to clojurescript@googlegroups.com\n> <javascript:;>.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.456, Externs Inference & Comprehensive JS Modules Support David Nolen Sat, 28 Jan 2017 06:42:24 -0800"},
{"body":"Hi,\n\nfirst of all, congratulations on this release, it's a huge step ahead. \nI'm having an issue compiling a program with advanced optimizations, which \nworked fine with .293\n\nI get the following exception, any ideas on how can i narrow down the problem \nwithin my source? \n\nException in thread \"main\" java.lang.NoSuchMethodError: \ncom.google.common.base.Preconditions.checkState(ZLjava\/lang\/String;Ljava\/lang\/Object;)V,\n compiling:(\/tmp\/form-init5778645093287298904.clj:1:73)\n        at clojure.lang.Compiler.load(Compiler.java:7442)\n        at clojure.lang.Compiler.loadFile(Compiler.java:7368)\n        at clojure.main$load_script.invokeStatic(main.clj:277)\n        at clojure.main$init_opt.invokeStatic(main.clj:279)\n        at clojure.main$init_opt.invoke(main.clj:279)\n        at clojure.main$initialize.invokeStatic(main.clj:310)\n        at clojure.main$null_opt.invokeStatic(main.clj:344)\n        at clojure.main$null_opt.invoke(main.clj:341)\n        at clojure.main$main.invokeStatic(main.clj:423)\n        at clojure.main$main.doInvoke(main.clj:386)\n        at clojure.lang.RestFn.applyTo(RestFn.java:137)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.main.main(main.java:37)\nCaused by: java.lang.NoSuchMethodError: \ncom.google.common.base.Preconditions.checkState(ZLjava\/lang\/String;Ljava\/lang\/Object;)V\n        at com.google.javascript.rhino.IR.name(IR.java:363)\n        at \ncom.google.javascript.jscomp.ClosureCodingConvention.<clinit>(ClosureCodingConvention.java:474)\n        at com.google.javascript.jscomp.Compiler.<init>(Compiler.java:202)\n        at com.google.javascript.jscomp.Compiler.<init>(Compiler.java:264)\n        at cljs.closure$make_closure_compiler.invokeStatic(closure.clj:293)\n        at cljs.closure$optimize.invokeStatic(closure.clj:1255)\n        at cljs.closure$optimize.doInvoke(closure.clj:1251)\n        at clojure.lang.RestFn.applyTo(RestFn.java:139)\n        at clojure.core$apply.invokeStatic(core.clj:659)\n        at cljs.closure$build.invokeStatic(closure.clj:2113)\n        at cljs.build.api$build.invokeStatic(api.clj:205)\n        at cljs.build.api$build.invoke(api.clj:193)\n        at cljs.build.api$build.invokeStatic(api.clj:196)\n        at cljsbuild.compiler$compile_cljs$fn__6997.invoke(compiler.clj:59)\n        at cljsbuild.compiler$compile_cljs.invokeStatic(compiler.clj:59)\n        at cljsbuild.compiler$run_compiler.invokeStatic(compiler.clj:167)\n        at \nuser$eval7152$iter__7200__7204$fn__7205$fn__7231.invoke(form-init5778645093287298904.clj:1)\n        at \nuser$eval7152$iter__7200__7204$fn__7205.invoke(form-init5778645093287298904.clj:1)\n        at clojure.lang.LazySeq.sval(LazySeq.java:40)\n        at clojure.lang.LazySeq.seq(LazySeq.java:49)\n        at clojure.lang.RT.seq(RT.java:525)\n        at clojure.core$seq__6422.invokeStatic(core.clj:137)\n        at clojure.core$dorun.invokeStatic(core.clj:3106)\n        at clojure.core$doall.invokeStatic(core.clj:3121)\n        at user$eval7152.invokeStatic(form-init5778645093287298904.clj:1)\n        at user$eval7152.invoke(form-init5778645093287298904.clj:1)\n        at clojure.lang.Compiler.eval(Compiler.java:6978)\n        at clojure.lang.Compiler.eval(Compiler.java:6968)\n        at clojure.lang.Compiler.load(Compiler.java:7430)\n        ... 12 more\n\nthanks in advance \n\nFrancesco\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.456, Externs Inference & Comprehensive JS Modules Support Francesco Bellomi Sat, 28 Jan 2017 04:20:06 -0800"},
{"body":"Actually what I just wrote is misleading - i dont think you need to have\nthe webpack artifact on the resources-path, you just need to get everything\nall in the right place for whatever server you are using (e.g. figwheel).\nOne reason to output webpack artifacts onto the resource path is to combine\nthem into one final output artifact in the cljs step, I use clojurescript's\npreamble to do this, but i have since learned from this mailing list that\nthis is not a supported use of preamble, so you may not want to do it,\nthough it does seem to work fine right now. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Gradually porting from jsx to cljs Dustin Getz Mon, 23 Jan 2017 12:59:10 -0800"},
{"body":"Yes, webpack outputs to a folder \"generated-resources\" which is on the\nresources-path of the clojurescript build. I dont currently have an example\nbuild for you, sorry. \nOn Mon, Jan 23, 2017 at 3:45 PM, Michael Blume <blume.m...@gmail.com> wrote:\n\n> On Monday, January 23, 2017 at 12:11:52 PM UTC-8, Dustin Getz wrote:\n> > yup, I do this with keeping the webpack and cljs artifacts separate,\n> first bundle react and javascript dependencies and jsx code into an\n> artifact with source maps, and second the clojurescript artifact, tell\n> reagent to exclude react, something like [reagent \"0.6.0\" :exclusions\n> [cljsjs\/react cljsjs\/react-dom cljsjs\/react-dom-server]], you will need to\n> provide some empty namespace forms in the proper directories e.g. (ns\n> cljsjs.react) to satisfy reagent at compile time.\n>\n> Interesting, thanks. So it sounds like you have lein and webpack running\n> independently, not interacting with one another, and sending compiled js\n> into the same place? Is there by any chance an example project I could look\n> at?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Gradually porting from jsx to cljs Dustin Getz Mon, 23 Jan 2017 12:56:47 -0800"},
{"body":"On Monday, January 23, 2017 at 12:11:52 PM UTC-8, Dustin Getz wrote:\n> yup, I do this with keeping the webpack and cljs artifacts separate, first \n> bundle react and javascript dependencies and jsx code into an artifact with \n> source maps, and second the clojurescript artifact, tell reagent to exclude \n> react, something like\u00a0[reagent \"0.6.0\" :exclusions [cljsjs\/react \n> cljsjs\/react-dom cljsjs\/react-dom-server]], you will need to provide some \n> empty namespace forms in the proper directories e.g.\u00a0(ns cljsjs.react)\u00a0to \n> satisfy reagent at compile time. \nInteresting, thanks. So it sounds like you have lein and webpack running \nindependently, not interacting with one another, and sending compiled js into \nthe same place? Is there by any chance an example project I could look at?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Gradually porting from jsx to cljs Michael Blume Mon, 23 Jan 2017 12:45:38 -0800"},
{"body":"yup, I do this with keeping the webpack and cljs artifacts separate, first\nbundle react and javascript dependencies and jsx code into an artifact with\nsource maps, and second the clojurescript artifact, tell reagent to exclude\nreact, something like [reagent \"0.6.0\" :exclusions [cljsjs\/react\ncljsjs\/react-dom cljsjs\/react-dom-server]], you will need to provide some\nempty namespace forms in the proper directories e.g. (ns cljsjs.react) to\nsatisfy reagent at compile time. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Gradually porting from jsx to cljs Dustin Getz Mon, 23 Jan 2017 12:12:07 -0800"},
{"body":"Apologies for asking what's probably a common newbie question, but Google is \nfailing me today. \nI have an existing project using react.js, react-router, jsx, and webpack. I'd \nlike to port one component to clojurescript as a proof of concept, perhaps \nusing reagent, and then have a hybrid project with lots of jsx files and one \ncljs file that builds and works and preferably has source maps for both. Can I \ndo that? I'd rather have a gradual transition than try to port the whole thing \nin one go.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Gradually porting from jsx to cljs Michael Blume Mon, 23 Jan 2017 11:23:28 -0800"},
{"body":"Thanks for the helpful suggestions everyone.\n\nOne thing I'm going to try to do is eliminate cljs-ajax and cljs-time from our \ndependencies. These two modules depend on over 100 closure library namespaces. \nI'd also love to look more into HTTP\/2. Thanks Andy! \nInterestingly, in production, depending on 100+ of closure library namespaces \nisn't that big of a deal since advanced optimization and gzip work really well. \nHowever, development is where things become an issue when page load times rise \nto frustrating levels.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Why is each closure library namespace in a separate js file? Justin Ratner Mon, 23 Jan 2017 09:38:24 -0800"},
{"body":"Hello Everyone,\n\nThe team behind Dutch Clojure Day is hard at work and I'd like to share some \nquick updates : \n- We have a nice venue confirmed in the centre of Amsterdam - http:\/\/tq.co \n- We have some great sponsors for our event this time:\n\u2022 http:\/\/www.adgoji.com - Platinum\n\u2022 https:\/\/juxt.pro\/index.html - Silver\n\u2022 https:\/\/infi.nl - Silver\n\u2022 http:\/\/www.functionalbytes.nl - Drinks\n\nOur RFP is going to close on 31st January, if you want to submit your talk \nproposal, hurry now and submit via Google form :) \n\nWe will be publishing speaker line-up in the first half of February!\n\nFor more details and tickets keep checking http:\/\/clojuredays.org and\/or follow \nus on twitter https:\/\/twitter.com\/clojuredays\n\n\nLooking forward to see you in Amsterdam,\nDCD Organisers\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Dutch Clojure Day 2017 Update, and Final Call for RFP Vijay Kiran Mon, 23 Jan 2017 02:57:22 -0800"},
{"body":"I have an OpenResty (nginx) with HTTP-2 running for local development. Just \nswitched off H2 and DomContentLoaded increased from 2.1s to 3.6s. That's for \n~290 js files. The last JS file was done downloading ~1.3s for H2 and 2.4s with \nHTTP-1.1. \nSo maybe also give HTTP-2 a closer look.\n\nHTH\n\nOn Friday, January 20, 2017 at 5:09:54 PM UTC+1, Justin Ratner wrote:\n> We have a fairly large project in which we require a good bit of closure \n> library functionality. While developing with :optimizations :none, hundreds \n> of closure library files are loaded when the page loads. This means that the \n> page takes 7-10 seconds to load. That doesn't seem like much, but when you \n> are refreshing the page many times while developing (I don't always trust \n> code-reload), it adds up.\n> \n> Most of the time is spent waiting for browser connections to open up, so the \n> next file can be downloaded. Most browsers can only download a handful of \n> files from one domain at once.\n> \n> Wouldn't it be better if the closure library was served in a single js file?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Why is each closure library namespace in a separate js file? AndyR Sun, 22 Jan 2017 23:55:09 -0800"},
{"body":"I only put this here so that others can see how interactive programming can be \nso fun.  \nhttps:\/\/www.youtube.com\/watch?v=iPlPk43RbpA\n\nMaybe Dart will make a good clojure target one day...  Compiles to js, compiles \nto android, compiles to ios, has snapshots, optional typing(could be working \ninto clojure maybe), and fast startup times.  Any way it is fun to speculate \nabout things some times!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Check out Flutter with Dart Jacob Goodson Sun, 22 Jan 2017 21:32:48 -0800"},
{"body":"Thinking about the numbers a bit more. They might make sense:\n\n413 files in batches of 6 (Chrome allows 6 connections per domain) where the \naverage download takes 50ms. 413 \/ 6 * 50 = ~3400ms \nIt also makes sense that ~100 files would take less than 1s to load.\n\nI guess we need to think about reducing the number of namespaces in our project.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Why is each closure library namespace in a separate js file? Justin Ratner Sun, 22 Jan 2017 20:36:19 -0800"},
{"body":"We are loading 413 namespaces total. 134 are closure files. 27 are \nclojurescript. 124 are the namespaces of this project. The rest are \ndependencies. These 413 javascript files finish downloading after about 3 \nseconds. DOMContentLoaded then fires at 7 seconds. Many of these javascript \nfiles sit in Chrome's \"stalled\" state for multiple seconds. The \"stalled\" state \nis when the browser is waiting for a connection to come available, so it can \nmake the request. The actual download (after leaving the stalled state) of any \ngiven file (except the very large ones) only takes a few milliseconds. \nI'm attaching some pictures from the network tab that illustrate what I'm \ntalking about.\n\nIt may be that chrome's timing is lying, and something isn't right with our \nlocal dev server. I'll look more into that.\n\n\nOn Sunday, January 22, 2017 at 7:45:23 AM UTC-7, David Nolen wrote:\n> Are you sure this isn't a web server configuration issue? We saw long load \n> times with browser REPL due to insufficient concurrency when serving \n> resources. After that was fixed, loading 100+ namespaces into a web browser \n> took less than 1 second during local dev.\n> \n> \n> David\n> \n> \n> On Fri, Jan 20, 2017 at 2:43 AM, Justin Ratner <jus...@metricfeat.com> wrote:\n> We have a fairly large project in which we require a good bit of closure \n> library functionality. While developing with :optimizations :none, hundreds \n> of closure library files are loaded when the page loads. This means that the \n> page takes 7-10 seconds to load. That doesn't seem like much, but when you \n> are refreshing the page many times while developing (I don't always trust \n> code-reload), it adds up.\n> \n> \n> \n> Most of the time is spent waiting for browser connections to open up, so the \n> next file can be downloaded. Most browsers can only download a handful of \n> files from one domain at once.\n> \n> \n> \n> Wouldn't it be better if the closure library was served in a single js file?\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> \n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Why is each closure library namespace in a separate js file? Justin Ratner Sun, 22 Jan 2017 20:12:50 -0800"},
{"body":"Are you sure this isn't a web server configuration issue? We saw long load\ntimes with browser REPL due to insufficient concurrency when serving\nresources. After that was fixed, loading 100+ namespaces into a web browser\ntook less than 1 second during local dev. \nDavid\n\nOn Fri, Jan 20, 2017 at 2:43 AM, Justin Ratner <jus...@metricfeat.com>\nwrote:\n\n> We have a fairly large project in which we require a good bit of closure\n> library functionality. While developing with :optimizations :none, hundreds\n> of closure library files are loaded when the page loads. This means that\n> the page takes 7-10 seconds to load. That doesn't seem like much, but when\n> you are refreshing the page many times while developing (I don't always\n> trust code-reload), it adds up.\n>\n> Most of the time is spent waiting for browser connections to open up, so\n> the next file can be downloaded. Most browsers can only download a handful\n> of files from one domain at once.\n>\n> Wouldn't it be better if the closure library was served in a single js\n> file?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Why is each closure library namespace in a separate js file? David Nolen Sun, 22 Jan 2017 06:46:11 -0800"},
{"body":"Thanks for confirming + the tips! \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Are multimethods 'expensive' in light of dead code elimination? Ikuru Kanuma Sat, 21 Jan 2017 06:26:17 -0800"},
{"body":"You are correct, no defmethod is ever removed by Closure (and can't be really). \nYou can use :modules to spread them into multiple files, whether or not that is \nuseful depends on your project. Protocols are Closure-compatible and might be \nan alternate solution if you are worried about code size.\n\n\n\nOn Saturday, January 21, 2017 at 8:25:06 AM UTC+1, Ikuru Kanuma wrote:\n> Say I have\n> \n> (defmulti foo :a)\n> \n> (defmethod foo :key1 [arg] (str \"key1\"))\n> (defmethod foo :key2 [arg] (str \"key2\"))\n> ...\n> (defmethod foo :key1000 [arg] (str \"key1000\"))\n> \n> Scattered across couple of namespaces in a project.\n> Since the dispatch relies on runtime data, I am imagining dead code \n> eliminating the unused ones are difficult, and if that is the case want to \n> know whether it is a good idea to include a large body of defmethods in a \n> single library, or it is better to serve them as a separate library.\n> \n> Sorry if this question has been already asked \/ the question is unclear.\n> \n> Thanks!\n> \n> Ikuru\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Are multimethods 'expensive' in light of dead code elimination? Thomas Heller Sat, 21 Jan 2017 03:51:26 -0800"},
{"body":"I had a similar idea a while back which I called \"compact\" mode. It would just \nconcatenate all files into one big JS file that would be included in the page. \nTo my surprise this wasn't much faster. Turns out that loading a 6MB JS file \n(:none) is not much faster than loading 50+ smaller files. Browsers are pretty \ngood at loading things in parallel. \nHowever your idea intrigued me and I implemented it in shadow-build [1]. I see \nonly a very tiny gain in overall performance (1.7s vs 1.9s load time). I am not \nusing much of Closure though so YMMV. What is a bit annoying though is the \nsource-map issue (same reason I eventually abandoned \"compact\"), by which I \nmean that you'll no longer get an error in \"goog\/some\/thing.js line:30\" but \n\"my.js line:51234\". You could generate a proper source-map for all of it I \nguess but I'm not sure it is worth the trouble (and adds considerable compiler \noverhead).\n\nLong story short: The \"download\" may actually not be the slow part, executing \n\"hundreds of closure library files\" might be. Are you sure that you need to \nload all of them all the time?\n\nAre you using :main? Have you tried :modules? Both potentially limit the files \nyou need to load.\n\nI'm happy to walk you through shadow-build if you really want to test this for \nyour project.\n\nCheers,\n\/thomas\n\n[1] \nhttps:\/\/github.com\/thheller\/shadow-build\/commit\/c06fd6544cee5605d0ba8e32a1114919102a10bd\n\n\n\n\n\nOn Friday, January 20, 2017 at 5:09:54 PM UTC+1, Justin Ratner wrote:\n> We have a fairly large project in which we require a good bit of closure \n> library functionality. While developing with :optimizations :none, hundreds \n> of closure library files are loaded when the page loads. This means that the \n> page takes 7-10 seconds to load. That doesn't seem like much, but when you \n> are refreshing the page many times while developing (I don't always trust \n> code-reload), it adds up.\n> \n> Most of the time is spent waiting for browser connections to open up, so the \n> next file can be downloaded. Most browsers can only download a handful of \n> files from one domain at once.\n> \n> Wouldn't it be better if the closure library was served in a single js file?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Why is each closure library namespace in a separate js file? Thomas Heller Sat, 21 Jan 2017 03:23:12 -0800"},
{"body":"Say I have\n\n(defmulti foo :a) \n(defmethod foo :key1 [arg] (str \"key1\"))\n(defmethod foo :key2 [arg] (str \"key2\"))\n...\n(defmethod foo :key1000 [arg] (str \"key1000\"))\n\nScattered across couple of namespaces in a project.\nSince the dispatch relies on runtime data, I am imagining dead code eliminating \nthe unused ones are difficult, and if that is the case want to know whether it \nis a good idea to include a large body of defmethods in a single library, or it \nis better to serve them as a separate library.\n\nSorry if this question has been already asked \/ the question is unclear.\n\nThanks!\n\nIkuru\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Are multimethods 'expensive' in light of dead code elimination? Ikuru Kanuma Fri, 20 Jan 2017 23:26:11 -0800"},
{"body":"We have a fairly large project in which we require a good bit of closure \nlibrary functionality. While developing with :optimizations :none, hundreds of \nclosure library files are loaded when the page loads. This means that the page \ntakes 7-10 seconds to load. That doesn't seem like much, but when you are \nrefreshing the page many times while developing (I don't always trust \ncode-reload), it adds up. \nMost of the time is spent waiting for browser connections to open up, so the \nnext file can be downloaded. Most browsers can only download a handful of files \nfrom one domain at once.\n\nWouldn't it be better if the closure library was served in a single js file?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Why is each closure library namespace in a separate js file? Justin Ratner Fri, 20 Jan 2017 08:10:10 -0800"},
{"body":"On Thursday, 5 January 2017 14:38:51 UTC, Daniel Skarda  wrote:\n> Hi Mike,\n> have you succeeded to run remote REPL without modifications?\n> \n> It is a while I wrote the tutorial. However today I was able to run REPL to \n> debian running inside VirtualBox from Emacs or Cursive with help of \n> piggieback.\n> \n> I see potential issue in your code. :output-dir should be absolute and same \n> on both machines (dev and remote). \n> \n> The reason for same absolute directory (and synchronization) is \n> implementation of JS environment in CLJS. CLJS compiler spits out .js files. \n> JS Environment (browser, node) requests these environment using http \n> (browser) or by reading  local files (node). In case of local files REPL \n> instructs js environment where to get these files. \n> \n> In case of remote js environment (nodejs is executed on remote machine) we \n> trick repl and node to think they run both on same machine and can \"exchange\" \n> files in shared directory. \n> \n> I agree it is dirty hack:) The correct solution would be to make a way how \n> nodejs can request compiled files from repl (in similar way browser requests \n> files from web server running from repl). Unfortunately at this moment I do \n> not have time to shave this yak.\n> \n> To help you to run REPL:\n> \n> 1) Check you have correct dir names for shared directory and they are \n> absolute, eg\n> \n> :output-dir \"\/tmp\/cljs-share-repl\"\n> \n> see wiki page. I made few correction of directory names today.\n> \n> 2) Check \/tmp\/cljs-share-repl synchronization works\n> \n> - does cljs repl create compiled files inside \/tmp\/cljs-repl-share\/out?\n> - are these files visible from remote machine?\n> \n> 2) If it does not work, please provide me some info about your configuration:\n> \n> - which versions of CLJ, CLJS, Lein, piggieback, node?\n> - which OS you run on dev and remote machine?\n> - how do you synchronize \/tmp\/cljs-repl-share? sshfs, samba, nfs?\n> \n> 3) some debugging tips:\n> \n> - check nodejs is running on remote machine and that it listens on some port \n> (netstat, lsof)\n> - try to snoop tcp\/ip communication using wireshark\n> \n> Crossing my fingers,\n> Dan \nI've switched absolute paths but the behaviour is still the same, osxfuse is \nworking fine If I understood more about how it is meant to work it would be \neasier for me to debug. The first problem is I don't understand how it should \nbe invoking node on the remote system. From my original post:\n\"If I invoke node without arguments (as the repl init does) it just appears to \nhang; shouldn't an argument be passed to invoke something on the host?\"\nI know node is being invoked but without arguments because I put an \"echo\" in \nthe repl-host-node script.\n node v4.2.1 is running on the remote. \nAgain thanks for your help with this.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CLJS remote nodejs repl - can't get working Mike Longworth Fri, 13 Jan 2017 03:02:01 -0800"},
{"body":"On Tuesday, 20 December 2016 12:07:58 UTC, Mike Longworth  wrote:\n> I'm trying to get a this working following: \n> https:\/\/github.com\/clojure\/clojurescript\/wiki\/Remote-REPL instructions but \n> without piggiback, from within cursive - clojue.main in normal JVM process.\n> \n> The repl window hangs after:\n> <scripts\/host-node is being invoked here with no arguments>\n> ClojureScript Node.js REPL server listening on 58975\n> <hangs here>\n> \n> invoked clj from cursive is:\n> (cljs.repl\/repl (cljs.repl.node\/repl-env :host \"vibrotub\")\n>                 :node-command \"scripts\/host-node\"\n>                 :output-dir \"share\/out\"\n>                 )\n> \n> I'm not sure how its supposed to work without extensive code analysis and I'm \n> not very familiar with node so hoping for help.\n> I've verified that scripts\/host-node can be called on the dev machine to call \n> node on the host and invoke the compiled js from the shared dir, specified as \n> an argument to the script.\n> \n> If I invoke node without arguments (as the repl init does) it just appears to \n> hang; shouldn't an argument be passed to invoke something on the host? \nHi Dan,\n   thanks very much for the reply, sorry for the delayed response I've only \njust seen it. \nOk I had the paths the same but I didn't realise they had to be absolute I'll \nfix this. Yes all the file sharing and remote node invocation works fine. I'll \ntry this and get back to you with the results. Mike\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CLJS remote nodejs repl - can't get working Mike Longworth Thu, 12 Jan 2017 07:40:13 -0800"},
{"body":"Save the date for Clojure\/west in Portland, OR!\nMarch 30-31, 2017\nHilton Portland & Executive Towers\nhttp:\/\/clojurewest.org \nRegistration: Clojure\/west registration will open on Tuesday, January 17 at 4pm \nPST. A limited number of Early Bird tickets will be available for $350. After \nthat Regular Registration tickets will be available for $400.\n\nCall for Proposals: The Clojure\/west Call for Proposals is now open \n(http:\/\/2017.clojurewest.org\/cfp\/)! Talks are 40 minutes in length in the \nfollowing categories: Language, Experience Report, Library, Tools, Ideas and \nFun.\n\nJan 11 - Call for Proposals Opens\nFeb 3 - Call for Proposals Closes\nFeb 10 - Speakers Notified\n\nSubmit a Topic: You can also submit topic ideas \n(https:\/\/github.com\/clojurewest\/clojurewest2017\/wiki\/Suggested-Topics) that \nothers might be able to speak about. Anyone can feel free to draw from the list \nof ideas when writing their submissions.\n\nTraining: \nMarch 28-29, 9am-5pm: Intro to Clojure Training with Luke VanderHart ($400)\nMarch 29, 9am-5pm: clojure.spec Workshop with Alex Miller ($300)\n\nMore details can be found on the Clojure\/west website. Registration will open \non Tuesday, January 17. \n\nOpportunity Grants: Apply for a Clojure\/west Opportunity Grant! Details can be \nfound on the website. Deadline to apply is Friday, February 3, 2017. \nhttp:\/\/2017.clojurewest.org\/opportunity-grants\/\n\nSponsorship: Interested in reaching an audience of 400+ Clojure developers? \nLearn more about sponsorship here!  http:\/\/2017.clojurewest.org\/sponsorship\/\n\nQuestions? Contact us at eve...@cognitect.com\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Clojure\/west - Portland, OR - Mar 30-31, 2017 Alex Miller Thu, 12 Jan 2017 07:23:45 -0800"},
{"body":"Thanks. This is strange, that (very ancient) issue exactly describes what\nI'm seeing in ClojureScript - but I'm reading some EDN that is definitely\nOK in Clojure 1.8. It also fails with if you add boolean false, btw. \n\nMalcolm Sparks\nDirector\n\nEmail: malc...@juxt.pro\nWeb: https:\/\/juxt.pro\n\nJUXT LTD.\nSoftware Consulting, Delivery, Training\n\nOn 6 January 2017 at 18:17, Nicola Mometto <brobro...@gmail.com> wrote:\n\n> http:\/\/dev.clojure.org\/jira\/browse\/CLJ-1138\n>\n>\n> On 06\/01\/17 18:10, Malcolm Sparks wrote:\n>\n>> ClojureScript version: 1.9.293\n>> Lumo version: 1.0.0\n>>\n>> I'm reading with cljs.reader\/read-string.\n>>\n>> (cljs.reader\/register-tag-parser! \"custom\" identity)\n>> (cljs.read-string \"{:a #custom \\\"foo\\\"}\")\n>>\n>> works fine, but if the value is 'nil'...\n>>\n>> (cljs.reader\/register-tag-parser! \"custom\" identity)\n>> (cljs.read-string \"{:a #custom nil}\")\n>>\n>> it gives the following (strange) error\n>>\n>> Error: No dispatch macro for c\n>>      at \n>> Function.cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic\n>> (<embedded>:2200:350)\n>>      at cljs.reader.read_dispatch (<embedded>:2214:60)\n>>      at Object.cljs.reader.read_delimited_list (<embedded>:2212:6)\n>>      at cljs.reader.read_map (<embedded>:2216:54)\n>>      at Object.cljs.reader.read (<embedded>:2233:72)\n>>      at cljs.reader.read_string (<embedded>:2233:368)\n>>      at mach$core$act (evalmachine.<anonymous>:406:77)\n>>      at tryToString (fs.js:425:3)\n>>      at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:412:12)\n>>\n>>\n>> where c in this case is the first letter of the tag literal.\n>>\n>> I'm trying to get to the bottom of why, but was wondering if anyone on\n>> the list had any insights.\n>>\n>>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Problem with tag literals in read-string Malcolm Sparks Fri, 06 Jan 2017 10:33:31 -0800"},
{"body":"http:\/\/dev.clojure.org\/jira\/browse\/CLJ-1138 \nOn 06\/01\/17 18:10, Malcolm Sparks wrote:\n ClojureScript version: 1.9.293\nLumo version: 1.0.0\n\nI'm reading with cljs.reader\/read-string.\n\n(cljs.reader\/register-tag-parser! \"custom\" identity)\n(cljs.read-string \"{:a #custom \\\"foo\\\"}\")\n\nworks fine, but if the value is 'nil'...\n\n(cljs.reader\/register-tag-parser! \"custom\" identity)\n(cljs.read-string \"{:a #custom nil}\")\n\nit gives the following (strange) error\n\nError: No dispatch macro for c\n     at Function.cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic \n(<embedded>:2200:350)\n     at cljs.reader.read_dispatch (<embedded>:2214:60)\n     at Object.cljs.reader.read_delimited_list (<embedded>:2212:6)\n     at cljs.reader.read_map (<embedded>:2216:54)\n     at Object.cljs.reader.read (<embedded>:2233:72)\n     at cljs.reader.read_string (<embedded>:2233:368)\n     at mach$core$act (evalmachine.<anonymous>:406:77)\n     at tryToString (fs.js:425:3)\n     at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:412:12)\n\n\nwhere c in this case is the first letter of the tag literal.\n\nI'm trying to get to the bottom of why, but was wondering if anyone on the list \nhad any insights.\n\n \n--\nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- You received this message because you are subscribed to the Google Groups \"ClojureScript\" group. To unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Problem with tag literals in read-string Nicola Mometto Fri, 06 Jan 2017 10:18:06 -0800"},
{"body":"ClojureScript version: 1.9.293\nLumo version: 1.0.0\n\nI'm reading with cljs.reader\/read-string. \n(cljs.reader\/register-tag-parser! \"custom\" identity)\n(cljs.read-string \"{:a #custom \\\"foo\\\"}\")\n\nworks fine, but if the value is 'nil'...\n\n(cljs.reader\/register-tag-parser! \"custom\" identity)\n(cljs.read-string \"{:a #custom nil}\")\n\nit gives the following (strange) error\n\nError: No dispatch macro for c\n    at Function.cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic \n(<embedded>:2200:350)\n    at cljs.reader.read_dispatch (<embedded>:2214:60)\n    at Object.cljs.reader.read_delimited_list (<embedded>:2212:6)\n    at cljs.reader.read_map (<embedded>:2216:54)\n    at Object.cljs.reader.read (<embedded>:2233:72)\n    at cljs.reader.read_string (<embedded>:2233:368)\n    at mach$core$act (evalmachine.<anonymous>:406:77)\n    at tryToString (fs.js:425:3)\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:412:12)\n\n\nwhere c in this case is the first letter of the tag literal.\n\nI'm trying to get to the bottom of why, but was wondering if anyone on the list \nhad any insights.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Problem with tag literals in read-string Malcolm Sparks Fri, 06 Jan 2017 10:10:58 -0800"},
{"body":"Hi Mike,\nhave you succeeded to run remote REPL without modifications?\n\nIt is a while I wrote the tutorial. However today I was able to run REPL to \ndebian running inside VirtualBox from Emacs or Cursive with help of piggieback. \nI see potential issue in your code. :output-dir should be absolute and same on \nboth machines (dev and remote). \n\nThe reason for same absolute directory (and synchronization) is implementation \nof JS environment in CLJS. CLJS compiler spits out .js files. JS Environment \n(browser, node) requests these environment using http (browser) or by reading  \nlocal files (node). In case of local files REPL instructs js environment where \nto get these files. \n\nIn case of remote js environment (nodejs is executed on remote machine) we \ntrick repl and node to think they run both on same machine and can \"exchange\" \nfiles in shared directory. \n\nI agree it is dirty hack:) The correct solution would be to make a way how \nnodejs can request compiled files from repl (in similar way browser requests \nfiles from web server running from repl). Unfortunately at this moment I do not \nhave time to shave this yak.\n\nTo help you to run REPL:\n\n1) Check you have correct dir names for shared directory and they are absolute, \neg\n\n:output-dir \"\/tmp\/cljs-share-repl\"\n\nsee wiki page. I made few correction of directory names today.\n\n2) Check \/tmp\/cljs-share-repl synchronization works\n\n- does cljs repl create compiled files inside \/tmp\/cljs-repl-share\/out?\n- are these files visible from remote machine?\n\n2) If it does not work, please provide me some info about your configuration:\n\n- which versions of CLJ, CLJS, Lein, piggieback, node?\n- which OS you run on dev and remote machine?\n- how do you synchronize \/tmp\/cljs-repl-share? sshfs, samba, nfs?\n\n3) some debugging tips:\n\n- check nodejs is running on remote machine and that it listens on some port \n(netstat, lsof)\n- try to snoop tcp\/ip communication using wireshark\n\nCrossing my fingers,\nDan\n \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: CLJS remote nodejs repl - can't get working Daniel Skarda Thu, 05 Jan 2017 06:39:07 -0800"},
{"body":"I have a simple Om.next app:\n\n(def app-state (atom {:key-a \"foo\" :key-b \"bar}))\n(defui Child\n  static om\/IQuery\n  (query [this]\n    [:key-a :key-b])\n  Object\n  (render [this]\n    (let [{:keys [key-a key-b]} (om\/props this)]\n      (dom\/p nil (str \"a is \" a \", b is \" b))))) \nUsing the trivial reader (mapping keys directly to state), I can render this \nfine: \n(om\/add-root! reconciler Child (gdom\/getElement \"app\"))\n\nNow I'm trying to wrap it inside a Parent component, which will become the \ncontainer and include other children:\n\n(def child (om.next\/factory Child))\n(defui Parent\n  static om\/IQuery\n  (query [this]\n    (om\/get-query Child))\n  Object\n  (render [this]\n    (child (om\/props this) nil)))\n(om\/add-root! reconciler Parent (gdom\/getElement \"app\"))\n\nThis breaks; the query triggers what appears to be this error: \nhttps:\/\/github.com\/omcljs\/om\/blob\/c71b8e2ba094b193ab4052082d0ebdc0cdd91952\/src\/main\/om\/next.cljc#L704\n\nHowever, if I swap the query in the Parent to the literal query from Child:\n\n(defui Parent\n  static om\/IQuery\n  (query [this]\n    [:key-a :key-b])\n  ;; render as before)\n\nEverything renders correctly. \n\nWhat does this error mean, and why am I getting it, when it appears that \n`get-query` returns the same value that I'd have when I pass it in literally?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Om.next: Using get-query in parent component throws a Query violation error Feifan Zhou Tue, 03 Jan 2017 19:53:18 -0800"},
{"body":"http:\/\/read.klipse.tech\/om-next-interactive-tutorial\/ \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] The 1st interactive om.next tutorial Yehonathan Sharvit Tue, 03 Jan 2017 15:11:01 -0800"},
{"body":"Is there any way to replace Om's React with Preact Compat or anyone tried here ? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Way to Replace Om's React depend. with Preact Compat Renjith Thankachan Mon, 02 Jan 2017 08:06:23 -0800"},
{"body":"Why replikativ?\n\nAre you tired of building the same kind of glue code for your\ndistributed architecture over and over again? Then, once you have build\nall this often redundant code coordinating state changes between\ndifferent \u2018cloud\u2019 systems, web services (e.g. RESTful) and your\nclient-side applications you try the impossible by bridging strongly\nconsistent storages with eventual consistent and volatile ones? Do you\nthink ad hoc solutions to cache invalidation are stupid? Do you wonder\nwhether there is a better way? \n\nMore information on our new project homepage :): http:\/\/replikativ.io\/\nTo play around I recommend chat42: https:\/\/github.com\/replikativ\/chat42\n\nThe other projects should work, but are not updated yet. Please open an\nissue if you fail with anything!\n\n\n\nThis release in particular offers:\n\n- robustness. We have tested replikativ under serious load and ensured\nthat the frontend APIs developers face are safe to use concurrently with\nour tests. We also have built-in the Erlang-like error handling of\nsuperv.async to never miss an exception (hopefully ;) ).\n- performance: We were able to follow Trump shitstorms on twitter over\nmore than a week including casual online synchronization onto a Laptop\nwith Datomic for analysis. This in particular included >200.000 commit\noperations and more than 10 GiB managed data. There are still small\nmemory leaks, so you cannot run a peer in such a setting without\nsupervision for weeks yet, though.\n- streaming: We now support stream-into-identity! functions for our\nmajor datatypes: CDVCS, OR-Map and LWWR. In particular you can use them\nto replicate data between different instances of databases like Datomic.\n- more datatypes: We now have a very handy OR-Map, which also features\nchat42, so you don't have to care about conflicts anymore with\ndistributed writers. The LWWR is also useful to have simple setable\n(last writer wins) register.\n- libraries: We have improved considerably on our kv-storage layer by\nproviding more backends and durable datastructures like an append-log\n(trees WIP): https:\/\/github.com\/replikativ\/konserve\nOur network library kabel has not seen as much love yet, and it probably\nhas a deadlock somewhere, as its tests get stuck sometimes, this needs\ninvestigation.\n\nI am keen on your feedback. If you miss anything or find something\nunclear, please let us know!\n\nHappy hacking,\nChristian\n\nP.S.: I will present the system at ClojureD.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"[ClojureScript] [ANN] replikativ 0.2.0 - An open, scalable and distributive infrastructure for a data-driven community of applications. Christian Weilbach Mon, 26 Dec 2016 14:21:19 -0800"},
{"body":"Copied the code from klangmeister, mainly (eval.cljs and macros.clj) and tried \neval\/uate function with (require '[cljs.spec]) but it complains 'Unable to load \ncljs.core' 'Unable to load cljs.analyzer' etc.. Included cljs.core to \ndependencies but results in hang. Including cljs.analyzer results in compiler \ncomplaining about libraries that cljs.analyzer depends on missing and on and on.\nHas anyone succeeded in generating cljs.spec expressions and evaluating them? \nSomeone please tell me if there's another way to do instead of cljs.js.eval'ing \nthe spec expressions, because it is not working well. \nOn Friday, December 23, 2016 at 9:44:15 AM UTC+9, Dustin Getz wrote:\n> This might help \n> https:\/\/github.com\/ctford\/klangmeister\/blob\/master\/src\/klangmeister\/compile\/eval.cljs#L86\n> \n> \n> \n> On Thu, Dec 22, 2016 at 6:06 PM, Hyeongmin Jeon <hmn...@gmail.com> wrote:\n> Thank you for your help. I get the general idea but, (eval '(require \n> '[cljs.spec])) complains about *load-fn* not set. I thought there's a default \n> *load-fn* in compiler but clearly not. And successful eval like (eval '(+ 1 \n> 2)) doesn't return compiler state in cb function. It only includes :value \n> key, evaling require form will return some other key? Or is there some other \n> function to get compiler state? Would you please elaborate some more?\n> \n> \n> \n> On Friday, December 23, 2016 at 1:49:01 AM UTC+9, Mike Fikes wrote:\n> \n> > Your two calls to eval will work if you pass the mutated state into the \n> > second call (instead of empty state). (Maintain a state var via a def or \n> > somesuch.)\n> \n> >\n> \n> > In order for the require in the first form to work, you will need to supply \n> > a load function that returns source when requested by cljs.js. In this case \n> > your load function will end up returning the source for the cljs.spec \n> > namespace (and any source that it transitively requires, when requested by \n> > cljs.js).\n> \n> >\n> \n> > - Mike\n> \n> >\n> \n> \n> \n> > > On Dec 22, 2016, at 1:54 AM, Hyeongmin Jeon wrote:\n> \n> > >\n> \n> > > I want to eval the following code.\n> \n> > >\n> \n> > > (s\/def :a\/b any?)\n> \n> > >\n> \n> > > So far, I have wrapped it in do form with cljs.spec like this:\n> \n> > >\n> \n> > > (do\n> \n> > >\u00a0 (require '[cljs.spec :as s])\n> \n> > >\u00a0 (s\/def :a\/b any?))\n> \n> > >\n> \n> > > and tried to eval them separately like this:\n> \n> > >\n> \n> > > (eval\n> \n> > >\u00a0 (empty-state)\n> \n> > >\u00a0 (require '[cljs.spec :as s])\n> \n> > >\u00a0 ...)\n> \n> > > (eval\n> \n> > >\u00a0 (empty-state)\n> \n> > >\u00a0 (s\/def :a\/b any?)\n> \n> > >\u00a0 ...)\n> \n> > >\n> \n> > > but neither works, now I've read somewhere that you should provide \n> > > library loader to eval opts map. Is there some simpler way to do instead? \n> > > if not, how should you implement library loader?\n> \n> > >\n> \n> > > --\n> \n> > > Note that posts from new members are moderated - please be patient with \n> > > your first post.\n> \n> > > ---\n> \n> > > You received this message because you are subscribed to the Google Groups \n> > > \"ClojureScript\" group.\n> \n> > > To unsubscribe from this group and stop receiving emails from it, send an \n> > > email to clojurescrip...@googlegroups.com.\n> \n> > > To post to this group, send email to clojur...@googlegroups.com.\n> \n> > > Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> \n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] How to cljs.js.eval cljs code that references other namespace? Hyeongmin Jeon Fri, 23 Dec 2016 05:12:06 -0800"},
{"body":"This might help\nhttps:\/\/github.com\/ctford\/klangmeister\/blob\/master\/src\/klangmeister\/compile\/eval.cljs#L86 \nOn Thu, Dec 22, 2016 at 6:06 PM, Hyeongmin Jeon <hmnj...@gmail.com> wrote:\n\n> Thank you for your help. I get the general idea but, (eval '(require\n> '[cljs.spec])) complains about *load-fn* not set. I thought there's a\n> default *load-fn* in compiler but clearly not. And successful eval like\n> (eval '(+ 1 2)) doesn't return compiler state in cb function. It only\n> includes :value key, evaling require form will return some other key? Or is\n> there some other function to get compiler state? Would you please elaborate\n> some more?\n>\n> On Friday, December 23, 2016 at 1:49:01 AM UTC+9, Mike Fikes wrote:\n> > Your two calls to eval will work if you pass the mutated state into the\n> second call (instead of empty state). (Maintain a state var via a def or\n> somesuch.)\n> >\n> > In order for the require in the first form to work, you will need to\n> supply a load function that returns source when requested by cljs.js. In\n> this case your load function will end up returning the source for the\n> cljs.spec namespace (and any source that it transitively requires, when\n> requested by cljs.js).\n> >\n> > - Mike\n> >\n> > > On Dec 22, 2016, at 1:54 AM, Hyeongmin Jeon wrote:\n> > >\n> > > I want to eval the following code.\n> > >\n> > > (s\/def :a\/b any?)\n> > >\n> > > So far, I have wrapped it in do form with cljs.spec like this:\n> > >\n> > > (do\n> > >  (require '[cljs.spec :as s])\n> > >  (s\/def :a\/b any?))\n> > >\n> > > and tried to eval them separately like this:\n> > >\n> > > (eval\n> > >  (empty-state)\n> > >  (require '[cljs.spec :as s])\n> > >  ...)\n> > > (eval\n> > >  (empty-state)\n> > >  (s\/def :a\/b any?)\n> > >  ...)\n> > >\n> > > but neither works, now I've read somewhere that you should provide\n> library loader to eval opts map. Is there some simpler way to do instead?\n> if not, how should you implement library loader?\n> > >\n> > > --\n> > > Note that posts from new members are moderated - please be patient\n> with your first post.\n> > > ---\n> > > You received this message because you are subscribed to the Google\n> Groups \"ClojureScript\" group.\n> > > To unsubscribe from this group and stop receiving emails from it, send\n> an email to clojurescript+unsubscr...@googlegroups.com.\n> > > To post to this group, send email to clojurescript@googlegroups.com.\n> > > Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] How to cljs.js.eval cljs code that references other namespace? Dustin Getz Thu, 22 Dec 2016 16:45:07 -0800"},
{"body":"Thank you for your help. I get the general idea but, (eval '(require \n'[cljs.spec])) complains about *load-fn* not set. I thought there's a default \n*load-fn* in compiler but clearly not. And successful eval like (eval '(+ 1 2)) \ndoesn't return compiler state in cb function. It only includes :value key, \nevaling require form will return some other key? Or is there some other \nfunction to get compiler state? Would you please elaborate some more?\n \nOn Friday, December 23, 2016 at 1:49:01 AM UTC+9, Mike Fikes wrote:\n> Your two calls to eval will work if you pass the mutated state into the \n> second call (instead of empty state). (Maintain a state var via a def or \n> somesuch.)\n> \n> In order for the require in the first form to work, you will need to supply a \n> load function that returns source when requested by cljs.js. In this case \n> your load function will end up returning the source for the cljs.spec \n> namespace (and any source that it transitively requires, when requested by \n> cljs.js).\n> \n> - Mike\n> \n> > On Dec 22, 2016, at 1:54 AM, Hyeongmin Jeon wrote:\n> > \n> > I want to eval the following code.\n> > \n> > (s\/def :a\/b any?)\n> > \n> > So far, I have wrapped it in do form with cljs.spec like this:\n> > \n> > (do\n> >  (require '[cljs.spec :as s])\n> >  (s\/def :a\/b any?))\n> > \n> > and tried to eval them separately like this:\n> > \n> > (eval\n> >  (empty-state)\n> >  (require '[cljs.spec :as s])\n> >  ...)\n> > (eval\n> >  (empty-state)\n> >  (s\/def :a\/b any?)\n> >  ...)\n> > \n> > but neither works, now I've read somewhere that you should provide library \n> > loader to eval opts map. Is there some simpler way to do instead? if not, \n> > how should you implement library loader?\n> > \n> > -- \n> > Note that posts from new members are moderated - please be patient with \n> > your first post.\n> > --- \n> > You received this message because you are subscribed to the Google Groups \n> > \"ClojureScript\" group.\n> > To unsubscribe from this group and stop receiving emails from it, send an \n> > email to clojurescript+unsubscr...@googlegroups.com.\n> > To post to this group, send email to clojurescript@googlegroups.com.\n> > Visit this group at https:\/\/groups.google.com\/group\/clojurescript. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] How to cljs.js.eval cljs code that references other namespace? Hyeongmin Jeon Thu, 22 Dec 2016 15:07:01 -0800"},
{"body":"Your two calls to eval will work if you pass the mutated state into the second \ncall (instead of empty state). (Maintain a state var via a def or somesuch.) \nIn order for the require in the first form to work, you will need to supply a \nload function that returns source when requested by cljs.js. In this case your \nload function will end up returning the source for the cljs.spec namespace (and \nany source that it transitively requires, when requested by cljs.js).\n\n- Mike\n\n> On Dec 22, 2016, at 1:54 AM, Hyeongmin Jeon <hmnj...@gmail.com> wrote:\n> \n> I want to eval the following code.\n> \n> (s\/def :a\/b any?)\n> \n> So far, I have wrapped it in do form with cljs.spec like this:\n> \n> (do\n>  (require '[cljs.spec :as s])\n>  (s\/def :a\/b any?))\n> \n> and tried to eval them separately like this:\n> \n> (eval\n>  (empty-state)\n>  (require '[cljs.spec :as s])\n>  ...)\n> (eval\n>  (empty-state)\n>  (s\/def :a\/b any?)\n>  ...)\n> \n> but neither works, now I've read somewhere that you should provide library \n> loader to eval opts map. Is there some simpler way to do instead? if not, how \n> should you implement library loader?\n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] How to cljs.js.eval cljs code that references other namespace? mikefikes18 Thu, 22 Dec 2016 08:49:38 -0800"},
{"body":"I want to eval the following code.\n\n(s\/def :a\/b any?) \nSo far, I have wrapped it in do form with cljs.spec like this:\n\n(do\n  (require '[cljs.spec :as s])\n  (s\/def :a\/b any?))\n\nand tried to eval them separately like this:\n\n(eval\n  (empty-state)\n  (require '[cljs.spec :as s])\n  ...)\n(eval\n  (empty-state)\n  (s\/def :a\/b any?)\n  ...)\n\nbut neither works, now I've read somewhere that you should provide library \nloader to eval opts map. Is there some simpler way to do instead? if not, how \nshould you implement library loader?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] How to cljs.js.eval cljs code that references other namespace? Hyeongmin Jeon Thu, 22 Dec 2016 07:46:19 -0800"},
{"body":"I'm trying to get a this working following: \nhttps:\/\/github.com\/clojure\/clojurescript\/wiki\/Remote-REPL instructions but \nwithout piggiback, from within cursive - clojue.main in normal JVM process. \nThe repl window hangs after:\n<scripts\/host-node is being invoked here with no arguments>\nClojureScript Node.js REPL server listening on 58975\n<hangs here>\n\ninvoked clj from cursive is:\n(cljs.repl\/repl (cljs.repl.node\/repl-env :host \"vibrotub\")\n                :node-command \"scripts\/host-node\"\n                :output-dir \"share\/out\"\n                )\n\nI'm not sure how its supposed to work without extensive code analysis and I'm \nnot very familiar with node so hoping for help.\nI've verified that scripts\/host-node can be called on the dev machine to call \nnode on the host and invoke the compiled js from the shared dir, specified as \nan argument to the script.\n\nIf I invoke node without arguments (as the repl init does) it just appears to \nhang; shouldn't an argument be passed to invoke something on the host?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] CLJS remote nodejs repl - can't get working Mike Longworth Tue, 20 Dec 2016 04:09:12 -0800"},
{"body":"Awesome docs! Thank you for doing it better.\n\nEl mi\u00e9rcoles, 14 de diciembre de 2016, 21:09:03 (UTC-6), Daniel Compton  \nescribi\u00f3:\n> Hi folks\n> \n> \n> re-frame 0.9.0 has been released. The headlining features are vastly improved \n> docs, and making it OK to use subscribe inside form-1 Reagent components.\n> \n> \n> You can see the full changelog here:\u00a0\n> https:\/\/github.com\/Day8\/re-frame\/blob\/master\/CHANGES.md#090-20161215.\n> -- \n> \n> \n> \n> \n> \n> Daniel \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] re-frame 0.9.0 is released Jose Figueroa Martinez Fri, 16 Dec 2016 07:37:42 -0800"},
{"body":"The name says \"once\", but the docstring is more subtle: \"defs name to have the \nroot value of the expr iff the named var has no root value...\" [1] \nThis may be related to issue CLJS-457 [2], although the present case seems more \nconcrete.\n\nYou might submit an issue suggesting a mention on the Differences from Clojure \npage. [3]  \n\nAlso -- since no one probably cares how fast defonce runs, the first time -- if \nexpr yields a void that does not satisfy defonce's test, would it be helpful to \npost a warning to the console?\n\n\n[1] http:\/\/clojure.github.io\/clojure\/clojure.core-api.html#clojure.core\/defonce\n\n[2] http:\/\/dev.clojure.org\/jira\/browse\/CLJS-457\n\n[3] https:\/\/github.com\/clojure\/clojurescript\/wiki\/Differences-from-Clojure\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: defonce to undefined Phill Wolf Thu, 15 Dec 2016 17:18:06 -0800"},
{"body":"kudos from here as well\nmimmo\n\nOn Thu, Dec 15, 2016 at 3:52 PM, Paul Gowder <paul.gow...@gmail.com> wrote: \n> Wow!  The docs really are vastly improved--this is awesome.  Kudos!\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] [ANN] re-frame 0.9.0 is released Giacomo Cosenza Thu, 15 Dec 2016 07:34:42 -0800"},
{"body":"Wow!  The docs really are vastly improved--this is awesome.  Kudos! \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] re-frame 0.9.0 is released Paul Gowder Thu, 15 Dec 2016 07:33:06 -0800"},
{"body":"Hi folks\n\nre-frame 0.9.0 <https:\/\/github.com\/Day8\/re-frame\/releases\/tag\/v0.9.0> has\nbeen released. The headlining features are vastly improved docs, and making\nit OK to use subscribe inside form-1 Reagent components. \nYou can see the full changelog here:\nhttps:\/\/github.com\/Day8\/re-frame\/blob\/master\/CHANGES.md#090-20161215.\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] re-frame 0.9.0 is released Daniel Compton Wed, 14 Dec 2016 19:09:19 -0800"},
{"body":"On Saturday, June 6, 2015 at 1:44:45 AM UTC-4, Alice Bellard wrote:\n> (defonce foo js\/undefined)\n> => nil\n> \n> (defonce foo 1)\n> => 1\n> \n> I put my initialization code to init! and did (defonce _ (init!)) to be \n> called only once. But incidentally, init! called a javascript function that \n> returns nothing(undefined) as the last statement, and init! ran every time I \n> evaluate it!\n> \n> Hope this post can save someone's precious time :) \nI just ran into this with a project in Figwheel and spent about 2 hours \ntroubleshooting before figuring it out. I really wish I had found this, but \nthanks anyways!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: defonce to undefined Milt Reder Wed, 14 Dec 2016 13:56:44 -0800"},
{"body":"Thanks. I saw them in a cljs.jar I have. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: goog component stylesheets Elric Erkose Tue, 13 Dec 2016 10:41:30 -0800"},
{"body":"On Monday, December 12, 2016 at 2:21:20 PM UTC-6, Elric Erkose wrote:\n> I was playing with goog.ui.editor.DefaultToolbar.makeToolbar. It doesn't \n> render properly because, among others, I'm missing the button stylesheet. Is \n> anyone aware of a cdn that provides the goog stylesheets? \nI am unaware of any cdn, but the css for the google closure library components \nis included in the closure-library jar under the \"goog.css\" package (so inside \na jar named \"google-closure-library-#.#-TIME-COMMIT.jar, under the goog\/css \ndirectory in that jar). This jar is a dependency of clojurescript, so if you \nhave clojurescript in your classpath you will also have this. (There is some \nother css at css.inlay, I don't remember that it is for.)\n\nIf you have some kind of ring handler serving static assets off your classpath \nwhen you run clojurescript, you should be able to serve this css off the same \nprocess. The css will be at \"\/goog\/css\/\", possibly with some prefix.\n\nIt's been a long time since I used google closure components, so I don't \nremember how the components got their required css. I think you had to match it \nup manually and make sure you had the right link rel=stylesheet elements set \nup, absent some tooling (plovr?) that did it for you.\n\nI don't mean to discourage your experimentation, but the modern clojurescript \nui libraries (especially the react-based ones like re-frame, reagent, rum, om, \nom.next, etc) are all much, much nicer to work with than the google closure \ncomponent system. Our company made some heroic efforts to use them and to write \nour own components, both from JS and later from clojurescript, but after react \ncame out we switched and never looked back.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: goog component stylesheets Francis Avila Tue, 13 Dec 2016 08:47:04 -0800"},
{"body":"I was playing with goog.ui.editor.DefaultToolbar.makeToolbar. It doesn't render \nproperly because, among others, I'm missing the button stylesheet. Is anyone \naware of a cdn that provides the goog stylesheets? \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] goog component stylesheets Elric Erkose Mon, 12 Dec 2016 12:21:44 -0800"},
{"body":"It's time for the annual State of Clojure Community survey!\n\nIf you are a user of Clojure, ClojureScript, or ClojureCLR, we are greatly \ninterested in your responses to the following survey: \nhttps:\/\/www.surveymonkey.com\/r\/clojure2016\n\nThe survey contains four pages:\n\n1. General questions applicable to any user of Clojure, ClojureScript, or \nClojureCLR\n2. Questions specific to the JVM Clojure (skip if not applicable)\n3. Questions specific to ClojureScript (skip if not applicable)\n4. Final comments\n\nThe survey will close December 23rd. We will release all of the data and our \nanalysis in January. We are greatly appreciative of your input!\n\nIf you have any questions, please let me know.\n\nAlex Miller\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] 2016 State of Clojure Community Survey Alex Miller Mon, 12 Dec 2016 06:45:01 -0800"},
{"body":"Hello Everyone,\n \nWe are working hard on making 2017 Dutch Clojure Day awesome as 2016, and a bit \nmore :) \n\nThe ticket reservations are open now and you can reserve your spot on \nhttps:\/\/www.eventbrite.com\/e\/dutch-clojure-day-2017-tickets-30113550440\n\nIf you want to give a talk - Our CFP is also open - \nhttps:\/\/goo.gl\/forms\/yvTZUAZ2YyCtfEM02\n\nAs a last note - this is a community driven *Free* event and we'd like to keep \nit that way. If you\/your company would like to sponsor the event please drop us \nan email at eve...@clojuredays.org\n\nThanks & Hopefully we see you in Amsterdam!\n\nDCD Team,\n@clojuredays\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Dutch Clojure Day 2017 - Reserve your spot now Vijay Kiran Mon, 12 Dec 2016 03:24:43 -0800"},
{"body":"Hello Everyone!\n\nThe next edition of Dutch Clojure Day will happen on Saturday March 25th, 2017 \nin Amsterdam. The CFP for the event is now open and you can submit your \nproposal via the form : https:\/\/goo.gl\/forms\/yvTZUAZ2YyCtfEM02 \nYou can find more details about the event on http:\/\/clojuredays.org\n\nWe look forward to seeing you in Amsterdam in spring :)\n\nCheers,\nDCD Organisers\n(Carlo\/Max\/Joost & Vijay)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] CFP for Dutch Clojure Day 2017 Is now OPEN! Vijay Kiran Tue, 06 Dec 2016 23:41:09 -0800"},
{"body":"Macros are just a completely different topic from the original post.\nSeparating the macro system from runtime means you don't have 2.5mb of\nJavaScript which can't be dead code eliminated when you start writing a\nsimple client application. \nDavid\n\nOn Tue, Dec 6, 2016 at 6:21 PM, mars0i <marsh...@logical.net> wrote:\n\n> On Tuesday, December 6, 2016 at 11:31:59 AM UTC-6, David Nolen wrote:\n> > Yes we are aware of this and we do not intend to pursue since it offers\n> nothing in the way of real benefits.\n> >\n> >\n> > It does seem potentially useful to third party efforts around\n> bootstrapped ClojureScript, but that's about it.\n>\n> I don't have an understanding of the tradeoffs involved, but given the\n> little bit of semantic and practical funkiness involved in macros being\n> compiled in Clojure and run in Clojurescript, I would have thought that\n> moving to an all Javascript\/Clojurescript system could possibly be a good\n> thing in the long run.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Google Closure Compiler in JavaScript Released David Nolen Tue, 06 Dec 2016 17:40:14 -0800"},
{"body":"On Tuesday, December 6, 2016 at 11:31:59 AM UTC-6, David Nolen wrote:\n> Yes we are aware of this and we do not intend to pursue since it offers \n> nothing in the way of real benefits.\n> \n> \n> It does seem potentially useful to third party efforts around bootstrapped \n> ClojureScript, but that's about it. \nI don't have an understanding of the tradeoffs involved, but given the little \nbit of semantic and practical funkiness involved in macros being compiled in \nClojure and run in Clojurescript, I would have thought that moving to an all \nJavascript\/Clojurescript system could possibly be a good thing in the long run.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Google Closure Compiler in JavaScript Released mars0i Tue, 06 Dec 2016 15:21:41 -0800"},
{"body":"On Monday, December 5, 2016 at 12:20:39 AM UTC-6, Yehonathan Sharvit wrote:\n> Also keep in mind that with self host clojurescript reader conditionals \n> always branch to :cljs even for macros \nAh, I was wondering about that.  More complexity.  Or maybe less, if one could \nmove to an all-Clojurescript system.  I don't know what the options are.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Variant macros with reader conditionals? mars0i Tue, 06 Dec 2016 15:17:05 -0800"},
{"body":"Yes we are aware of this and we do not intend to pursue since it offers\nnothing in the way of real benefits. \nIt does seem potentially useful to third party efforts around bootstrapped\nClojureScript, but that's about it.\n\nDavid\n\nOn Tue, Dec 6, 2016 at 12:21 PM, James Thornton <james.thorn...@gmail.com>\nwrote:\n\n> Google released its JavaScript version of the Closure Compiler \u2013 \"this\n> allows Closure Compiler to run entirely in JS. Java is not required\":\n>\n> * https:\/\/github.com\/google\/closure-compiler-js\n> * https:\/\/developers.googleblog.com\/2016\/08\/closure-compiler-\n> in-javascript.html\n>\n> Switching to the JS compiler means JS devs coming to ClojureScript will be\n> able to use the tools they're familiar with a simplify the onboarding docs\n> on the website.\n>\n> I created a ticket here: http:\/\/dev.clojure.org\/jira\/browse\/CLJS-1865\n>\n> NB: I discovered this while experimenting with using ClojureScript with\n> Polymer:\n>\n> * https:\/\/medium.com\/dev-channel\/polymer-the-closure-\n> compiler-e80dd249d9d7#.10xytauqf\n>\n> * http:\/\/closuretools.blogspot.com\/2016\/06\/using-polymer-\n> with-closure-compiler-part-1.html\n>\n> - James\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Google Closure Compiler in JavaScript Released David Nolen Tue, 06 Dec 2016 09:33:00 -0800"},
{"body":"Google released its JavaScript version of the Closure Compiler \u2013 \"this allows \nClosure Compiler to run entirely in JS. Java is not required\": \n* https:\/\/github.com\/google\/closure-compiler-js\n* https:\/\/developers.googleblog.com\/2016\/08\/closure-compiler-in-javascript.html\n\nSwitching to the JS compiler means JS devs coming to ClojureScript will be able \nto use the tools they're familiar with a simplify the onboarding docs on the \nwebsite.\n\nI created a ticket here: http:\/\/dev.clojure.org\/jira\/browse\/CLJS-1865\n\nNB: I discovered this while experimenting with using ClojureScript with Polymer:\n\n* \nhttps:\/\/medium.com\/dev-channel\/polymer-the-closure-compiler-e80dd249d9d7#.10xytauqf\n\n* \nhttp:\/\/closuretools.blogspot.com\/2016\/06\/using-polymer-with-closure-compiler-part-1.html\n\n- James\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Google Closure Compiler in JavaScript Released James Thornton Tue, 06 Dec 2016 09:26:54 -0800"},
{"body":"SixSq is an SME based in Geneva, Switzerland that provides software for cloud \napplication management.  We\u2019re looking for a ClojureScript developer to work on \nthe user interface.  The full job announcement can be found here: \nhttp:\/\/sixsq.com\/jobs\/web-ui-and-clojurescript-developer\n\nWe prefer candidates that are or can move to the Geneva region.  As such, the \ncandidate must be a Swiss\/EU national or have a Swiss working permit.\n\nYou can contact me directly by email for more information or use the email \naddress in the job ad. \n\n--Cal   \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [JOB] web UI \/ CLJS developer Charles Loomis Tue, 06 Dec 2016 09:10:07 -0800"},
{"body":"Here is the link to a talk I gave in the last Clojure Conj, about developing a \nweb app with ClojureScript: \nhttps:\/\/www.youtube.com\/watch?v=K6ZoF3CHsa0\n\nGood for beginners and intermediates.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Talk about ClojureScript Asher Coren Mon, 05 Dec 2016 01:19:46 -0800"},
{"body":"Also keep in mind that with self host clojurescript reader conditionals always \nbranch to :cljs even for macros \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Variant macros with reader conditionals? Yehonathan Sharvit Sun, 04 Dec 2016 22:20:59 -0800"},
{"body":"Thanks very much - that makes sense now.\n\nI had read the guide, and not noticed the fact that conformed values can be \nused as the *input* to specs. I looked again and the section on composing specs \nwith and and or makes no mention of it. \nThis behaviour does get a mention in the section on spec'ing functions - \"The \nsecond :args predicate takes as input the conformed result of the first \npredicate\".\n\nIs it straightforward to submit a pull request on the docs? I think this could \nuse a sentence or two of clarification.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Bug (?) in clojure.spec (ClojureScript) with s\/or inside s\/and Tom Locke Sat, 03 Dec 2016 07:24:51 -0800"},
{"body":"I just did a quick scan of this but I think this is the expected behavior. s\/or \nconforms to a vector entry containing the tag of the path taken and the value. \ns\/and flows conformed values through each spec in the and, so order is \nimportant. All you're seeing is the conformed or flowing into the second spec \nin the and.\n\nYou might want to check the guide for more detail: \nhttp:\/\/clojure.org\/guides\/spec.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Bug (?) in clojure.spec (ClojureScript) with s\/or inside s\/and Alex Miller Sat, 03 Dec 2016 06:15:07 -0800"},
{"body":"A quick follow-up - if I use s\/assert instead of s\/valid you can see the \nproblem with the s\/or tag (:b in this case) getting into the assertion val \n(s\/assert (s\/and (s\/or :a (s\/and #(empty? (::data %))\n                                 #(empty? (::path %)))\n                       :b #(= (::val %) (get-in (::data %) (::path %))))\n                 (s\/keys :req [::val ::data ::path]))\n  {::data [:zob] ::path [0] ::val :zob})\n\nError: Spec assertion failed\nval: [:b {:clarity.cursors\/data [:zob], :clarity.cursors\/path [0], \n:clarity.cursors\/val :zob}] fails predicate: map?\n:cljs.spec\/failure  :assertion-failed\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Bug (?) in clojure.spec (ClojureScript) with s\/or inside s\/and Tom Locke Fri, 02 Dec 2016 05:18:14 -0800"},
{"body":"Hi all,\n\nI'm writing a spec for a cursor-like type - a map with some ::data, a ::path \ninto the data, and a ::value - the value in the data at that path \nI've written a spec that captures the constraint that (= (get-in data path) \nvalue)\n\n(s\/valid? (s\/and (s\/keys :req [::val ::data ::path])\n                 (s\/or :a (s\/and #(empty? (::data %))\n                                 #(empty? (::path %)))\n                       :b #(= (::val %) (get-in (::data %) (::path %)))))\n  {::data [:zob] ::path [0] ::val :zob})\n\n=> true\n\nHowever, if I swap the operands to s\/and around:\n\n(s\/valid? (s\/and (s\/or :a (s\/and #(empty? (::data %))\n                                 #(empty? (::path %)))\n                       :b #(= (::val %) (get-in (::data %) (::path %))))\n                 (s\/keys :req [::val ::data ::path]))\n  {::data [:zob] ::path [0] ::val :zob})\n=> false\n\nI have a bigger example where the workaround of swapping the operands doesn't \nhelp. Looking at the spec failure message, I notice the :val is not the value I \npassed, but a vector [:kw x] where x is the actual value, and :kw is one of the \nkeyword tags from an (s\/or) used in a sub-spec, which obviously shouldn't be in \nthere.\n\nIs this a known issue?\n\nIf not I'll work on a minimal repro.\n\nThanks\n\nTom\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Bug (?) in clojure.spec (ClojureScript) with s\/or inside s\/and Tom Locke Fri, 02 Dec 2016 05:06:51 -0800"},
{"body":"Hi!\n\nExcited to share that Reify <http:\/\/www.reifyhealth.com\/> is looking to\nhire two mid to senior developers for a primarily Clojure\/ClojureScript\nstack - frontend developer position\n<https:\/\/jobs.lever.co\/reifyhealth\/089e5e4c-13e9-49c8-93a9-11e7f5a8b78f>\nand backend\ndeveloper position\n<https:\/\/jobs.lever.co\/reifyhealth\/dd9f818f-d94c-4a0c-b97c-06e19f5939a2>. We\nare also looking for a head of engineering\n<https:\/\/jobs.lever.co\/reifyhealth\/324941f7-37d9-4813-aa00-39fcec6eaf54>. If\nyou're interested in these positions, please apply through lever. We are\nopen to remote coworkers in North America but are prioritizing candidates\nlocal to Boston or willing to relocate. Full disclosure, I am the technical\nlead on this product. For any questions feel free to ping me at\ngabr...@reifyhealth.com. \nI\u2019ve been with Reify for over 6 months and wake up each day excited to\nbuild clinical trial software that can make a difference in people's lives.\nClinical trials are slow, unpredictable and expensive and we aim to improve\nthis for everyone's benefit. We care about building great products,\nproviding a great user experience and listening to our users to improve on\nour products. Our greenfield apps use postgresql on the backend and a mix\nof quiescent\/react, liberator, clojure.spec and more. If you're piqued by\nour stack, what we do or just want to say hi, give me a shout. We'll also\nbe at the Conj this week!\n\nCheers,\nGabriel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [JOB] Make a difference with Reify and Clojure(Script) in the clinical trial space - Boston or Remote (North America) Gabriel Horner Wed, 30 Nov 2016 12:39:45 -0800"},
{"body":"re-frame <https:\/\/github.com\/Day8\/re-frame> 0.9.0-alpha1 is\nreleased. Please give it a try in your projects and give us any feedback if\nthere are any issues. If not, then we will likely release 0.9.0 shortly.\nYou can see the full list of changes at CHANGES.md\n<https:\/\/github.com\/Day8\/re-frame\/blob\/develop\/CHANGES.md#090-201611xx--unreleased>\n. \nThe changes in re-frame are mainly quality of life improvements and\nbugfixes so there shouldn\u2019t be too much to worry about. One change of note\nis lifting the minimum ClojureScript version to 1.7.48.\n\nThanks!\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] re-frame 0.9.0-alpha1 Daniel Compton Mon, 28 Nov 2016 19:34:34 -0800"},
{"body":"Is this behaviour guaranteed\/safe to rely on in future ClojureScript\nreleases? \nOn Sat, Nov 26, 2016 at 12:17 PM mars0i <marsh...@logical.net> wrote:\n\n> On Friday, November 25, 2016 at 10:27:19 AM UTC-6, Tommi Reiman wrote:\n> > Hi,\n> >\n> > Bumped into the same while writing spec-tools macros for both clj &\n> cljs. You can ask from &env which code it's emitting. There is a good\n> example in Datascript.\n> >\n> >\n> https:\/\/github.com\/tonsky\/datascript\/blob\/master\/src\/datascript\/arrays.cljc\n> >\n> > hope this helps,\n> >\n> > Tommi\n>\n> Thanks Tommi--very nice.  If I understand the test that's used in the\n> macros there, i.e.\n>\n>     (defn- if-cljs [env then else]\n>       (if (:ns env) then else))    ,\n>\n> then the idea is that 'ns' is a name that's defined when Clojure is being\n> used for the Clojurescript pre-processing step, but not for normal Clojure\n> compilation?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: Variant macros with reader conditionals? Daniel Compton Sun, 27 Nov 2016 19:19:39 -0800"},
{"body":"On Friday, November 25, 2016 at 10:27:19 AM UTC-6, Tommi Reiman wrote:\n> Hi,\n> \n> Bumped into the same while writing spec-tools macros for both clj & cljs. You \n> can ask from &env which code it's emitting. There is a good example in \n> Datascript.\n> \n> https:\/\/github.com\/tonsky\/datascript\/blob\/master\/src\/datascript\/arrays.cljc\n> \n> hope this helps,\n> \n> Tommi \nThanks Tommi--very nice.  If I understand the test that's used in the macros \nthere, i.e.\n\n    (defn- if-cljs [env then else]\n      (if (:ns env) then else))    ,\n\nthen the idea is that 'ns' is a name that's defined when Clojure is being used \nfor the Clojurescript pre-processing step, but not for normal Clojure \ncompilation?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Variant macros with reader conditionals? mars0i Fri, 25 Nov 2016 15:18:07 -0800"},
{"body":"Hi,\n\nBumped into the same while writing spec-tools macros for both clj & cljs. You \ncan ask from &env which code it's emitting. There is a good example in \nDatascript. \nhttps:\/\/github.com\/tonsky\/datascript\/blob\/master\/src\/datascript\/arrays.cljc\n\nhope this helps,\n\nTommi\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Variant macros with reader conditionals? Tommi Reiman Fri, 25 Nov 2016 08:27:38 -0800"},
{"body":"Hey,\n\nagreed on external libraries as a rarely changing framework.js served \nseparately. \nWhile you are still developing you could do :simple but again that needs to be \ndone for everything then. You can't do cljs.core as :simple and the rest as \n:advanced. Too much of the cljs internals rely on either everthing running \nthrough advanced or nothing. You can't just write externs for cljs.core and \ntreat it as an external library. Well you maybe could but you might as well \nskip :advanced at that point.\n\nI would recommend to not worry about it too much while prototyping. Once \neverything settles you probably won't deploy that frequently and given the size \nof well optimized CLJS builds we are probably talking about 100kb (gzip'd) \nwhich shouldn't really be significant for an enterprise user. Enterprise users \nsend around Excel\/Word files 10x that size much more frequently. ;) \n\nYou could probably try :simple + closure modules to increase the chance of \ncache hits while developing but in the end you are probably optimizing the \nwrong thing. No one notices 100kb on an enterprise network. Everyone notices \nanimations not running smoothly or otherwise janky app performance. Everyone \nsays React is fast but it really isn't. I would worry much more about the apps \nperformance while running not while downloading. Even :adcanced only buys you \nmaybe 5% here.\n\n\/thomas\n\n\n\nOn Thursday, November 24, 2016 at 6:48:41 PM UTC+1, Scott Klarenbach wrote:\n> Thanks a lot for the response Thomas.  I think we are on the same page, I \n> just wasn't using the correct terminology.\n> \n> I can use :advanced mode for my own code so long as I include an externs file \n> for jquery, material-ui, etc.  \n> \n> Not including the external libraries as part of the build (my framework.js) \n> is what you're proposing, and the same goal I was after.  Even with cljsjs, I \n> was including those in the build, and therefore redeploying a 500k+ js file \n> every time a tiny part of my application code changed.  If I remove all non \n> cljs\/closure code from the build and just use a cdn and externs, much of my \n> code base doesn't have to be redeployed when my application changes, which is \n> my goal.\n> \n> For context, I'm building heavyweight web apps, for a small number of \n> enterprise users.  The code changes rapidly in the beginning due to the \n> prototyping process.  Most traffic is from existing users, not new visitors \n> to a website.  I just wanted a way to return 304s for most of the javascript \n> and only send my app.js code when it changes.\n> \n> My instinct is that even the cljs\/closure runtime could be deployed to my \n> clients once, and only updated a few times a year.  Hence the idea of simple \n> optimizations.  I think you're saying that I should just resend all the \n> cljs\/closure each time with :advanced optimizations.  It just seems to me \n> that in my situation I *could* treat the cljs\/closure core runtimes the same \n> way I do jquery - deploy a :simple version once to the client, and rarely \n> have to send again.  Even in :advanced mode, a lot of redundant cljs\/closure \n> code is resent to the client each time any tiny part of my app.js changes.\n> \n> Thanks,\n> Scott.\n> \n> On Wednesday, November 23, 2016 at 5:12:15 PM UTC-8, Thomas Heller wrote:\n> > Hey,\n> > \n> > I have done quite a few experiments over the years and these would be my \n> > general recommendations.\n> > \n> > TL;DR: Embrace :advanced fully, keep non-cljs\/closure out of your build, \n> > mind your dependencies, use closure modules to split code. \n> > \n> > Most things really depend on your app and your general audience. Say you \n> > have mostly new users that spend some time on your site but only once every \n> > few days\/weeks at most. Their cache will very likely be empty most of the \n> > time. So having a \"larger but re-usable\" framework.js is just worse since \n> > they have to download it anyways. Only because you say \"cache forever\" does \n> > not mean the browser will do so, some (especially mobile) Browsers will \n> > purge on their own terms (LRU, LFU) anyways to save space.\n> > \n> > You can use things like React via a public CDN to increase the chances of \n> > the user having the thing cached. I have no statistics here but in theory \n> > this is a good idea (and fairly common).\n> > \n> > You want to keep things like React and Material-UI completely out of your \n> > CLJS build anyways since the Closure compiler doesn't unterstand them and \n> > can't do much. If you get Material-UI via CLJSJS for example it is one huge \n> > JS file, even the min is 150kb gzip'd + 100kb for the icons. If you only \n> > use 3 out of the 40 or so Components they provide you are better off with \n> > JS tools to handle this. Webpack or Rollup are supposed to be good and will \n> > most likely provide better results until Closure fully understands this.\n> > \n> > CLJS\/Closure code should always go through :advanced though as the \n> > potential savings are huge and you get better performance for some things \n> > on top for free.\n> > \n> > If you have a large site with different sections (ie. landing pages, \n> > signup, logged-in only, etc) it is best to split the code using closure \n> > modules so the initial download is smaller\/faster and only loading the \n> > other stuff when you need it. Closure does very good work here to optimize \n> > the splits.\n> > \n> > There are many more micro tweaks you can do (preloading, async loading, \n> > etc) but not downloading\/evaling code you don't use is probably the single \n> > best thing you can do. If you say your :advanced build is too large I'm \n> > willing to bet that probably 75% or more are due to foreign dependencies. \n> > Optimize those first, even if you just put them in a framework.js. Don't \n> > sacrifice :advanced though.\n> > \n> > HTH,\n> > \/thomas\n> > \n> > \n> > \n> > On Wednesday, November 23, 2016 at 8:00:31 PM UTC+1, Scott Klarenbach wrote:\n> > > I'm curious about Clojurescript deployment best practices.\n> > > \n> > > Even in advanced compilation mode, I'm finding the size my js to be \n> > > pretty large.  But my application code is quite a small fraction of the \n> > > total.  The rest is the Clojurescript runtime, React, Datascript, \n> > > Material-UI components, etc.\n> > > \n> > > On a daily\/weekly deployment basis, only my application code changes.  \n> > > Yet with the practice of advanced compilation, I have to redeploy a large \n> > > .js file to the web clients just to update the application code - the \n> > > majority of the data payload hasn't changed at all.\n> > > \n> > > What I'm thinking of doing is compiling two .js files in simple mode, not \n> > > advanced mode.  The first called framework.js would include \n> > > Clojurescript, React, Datascript, etc.  The second called app.js would \n> > > just be my application code.\n> > > \n> > > Now on a daily basis I only have to cache-invalidate a relatively small \n> > > .js file in order to update the web app.  The framework.js file only \n> > > needs to update every couple months when I want to bump the library \n> > > versions.  \n> > > \n> > > I feel the benefits of no longer re-deploying the Clojurescript runtime \n> > > over and over outway the limitations of not using advanced compilation \n> > > mode.\n> > > \n> > > Am I missing something that makes this a bad idea?  Is anyone else doing \n> > > something similar?\n> > > \n> > > Thanks for your help.\n> > > \n> > > -- \n> > > Regards,\n> > > \n> > > Scott Klarenbach\n> > > Invisible Robot Technologies\n> > > invisiblerobot.io\n> > > \n> > > 604-537-1856\n> > > sc...@invisiblerobot.io\n> > > \n> > > #515 - 207 West Hastings Street\n> > > Vancouver, BC, V6B1H7\n> > > \n> > > _______________________________________\n> > > To iterate is human; to recur, divine\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Deployment Best Practice - Advanced mode vs multiple js files. Thomas Heller Fri, 25 Nov 2016 02:16:32 -0800"},
{"body":"I'm trying to define two versions of a macro, one for Clojure and one for \nClojurescript, using reader conditionals. \nI end up seeing the Clojure version in Clojurescript.  I assume this happens \nbecause the macro definition is processed by Clojure, before Clojurescript \nruns, so it's the #?(:clj ...) version that's compiled rather than the :cljs \nversion.  Then the :clj macro is what is then available in Clojurescript.\n\n(a) Is there a way to do what I'm trying to do without doing somersaults \nthrough twisty hoops?\n\n(b) If I'm invoking Clojure to compile Clojurescript, shouldn't the compiler \nknow that I want the :cljs macro definition, not the one wrapped in :clj?\n\nExample:\n\n#?(:clj  (defmacro inv\n           \"Matrix inversion.\"\n           [x]\n           `(mx\/inverse ~x))\n\n   :cljs (defmacro inv\n           \"Kludgey matrix inversion.\"\n           [x]\n           `(case (mx\/shape ~x)\n              nil   (\/ 1 ~x)\n              [2 2] (inv22 ~x)\n              (throw \n                (js\/Error. (str \"Matrix inversion unavailable for \" ~x))))))\n\nHere mx\/inverse is core.matrix's inverse function (not available in \nClojurescript with the aljabr implementation of core.matrix), and inv22 is my \nsimplistic inverse macro for 2x2 matrices.\n\nWhen I use inv on a 2x2 matrix in Clojurescript (at a figwheel repl), I get an \nerror indicating that core.matrix's inverse function is being called.\n\n(I first tried embedding the reader conditional inside a single macro \ndefinition for inv.  That had the same problem, so I tried the above method.)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Variant macros with reader conditionals? mars0i Thu, 24 Nov 2016 14:29:14 -0800"},
{"body":"Thanks a lot for the response Thomas.  I think we are on the same page, I just \nwasn't using the correct terminology. \nI can use :advanced mode for my own code so long as I include an externs file \nfor jquery, material-ui, etc.  \n\nNot including the external libraries as part of the build (my framework.js) is \nwhat you're proposing, and the same goal I was after.  Even with cljsjs, I was \nincluding those in the build, and therefore redeploying a 500k+ js file every \ntime a tiny part of my application code changed.  If I remove all non \ncljs\/closure code from the build and just use a cdn and externs, much of my \ncode base doesn't have to be redeployed when my application changes, which is \nmy goal.\n\nFor context, I'm building heavyweight web apps, for a small number of \nenterprise users.  The code changes rapidly in the beginning due to the \nprototyping process.  Most traffic is from existing users, not new visitors to \na website.  I just wanted a way to return 304s for most of the javascript and \nonly send my app.js code when it changes.\n\nMy instinct is that even the cljs\/closure runtime could be deployed to my \nclients once, and only updated a few times a year.  Hence the idea of simple \noptimizations.  I think you're saying that I should just resend all the \ncljs\/closure each time with :advanced optimizations.  It just seems to me that \nin my situation I *could* treat the cljs\/closure core runtimes the same way I \ndo jquery - deploy a :simple version once to the client, and rarely have to \nsend again.  Even in :advanced mode, a lot of redundant cljs\/closure code is \nresent to the client each time any tiny part of my app.js changes.\n\nThanks,\nScott.\n\nOn Wednesday, November 23, 2016 at 5:12:15 PM UTC-8, Thomas Heller wrote:\n> Hey,\n> \n> I have done quite a few experiments over the years and these would be my \n> general recommendations.\n> \n> TL;DR: Embrace :advanced fully, keep non-cljs\/closure out of your build, mind \n> your dependencies, use closure modules to split code. \n> \n> Most things really depend on your app and your general audience. Say you have \n> mostly new users that spend some time on your site but only once every few \n> days\/weeks at most. Their cache will very likely be empty most of the time. \n> So having a \"larger but re-usable\" framework.js is just worse since they have \n> to download it anyways. Only because you say \"cache forever\" does not mean \n> the browser will do so, some (especially mobile) Browsers will purge on their \n> own terms (LRU, LFU) anyways to save space.\n> \n> You can use things like React via a public CDN to increase the chances of the \n> user having the thing cached. I have no statistics here but in theory this is \n> a good idea (and fairly common).\n> \n> You want to keep things like React and Material-UI completely out of your \n> CLJS build anyways since the Closure compiler doesn't unterstand them and \n> can't do much. If you get Material-UI via CLJSJS for example it is one huge \n> JS file, even the min is 150kb gzip'd + 100kb for the icons. If you only use \n> 3 out of the 40 or so Components they provide you are better off with JS \n> tools to handle this. Webpack or Rollup are supposed to be good and will most \n> likely provide better results until Closure fully understands this.\n> \n> CLJS\/Closure code should always go through :advanced though as the potential \n> savings are huge and you get better performance for some things on top for \n> free.\n> \n> If you have a large site with different sections (ie. landing pages, signup, \n> logged-in only, etc) it is best to split the code using closure modules so \n> the initial download is smaller\/faster and only loading the other stuff when \n> you need it. Closure does very good work here to optimize the splits.\n> \n> There are many more micro tweaks you can do (preloading, async loading, etc) \n> but not downloading\/evaling code you don't use is probably the single best \n> thing you can do. If you say your :advanced build is too large I'm willing to \n> bet that probably 75% or more are due to foreign dependencies. Optimize those \n> first, even if you just put them in a framework.js. Don't sacrifice :advanced \n> though.\n> \n> HTH,\n> \/thomas\n> \n> \n> \n> On Wednesday, November 23, 2016 at 8:00:31 PM UTC+1, Scott Klarenbach wrote:\n> > I'm curious about Clojurescript deployment best practices.\n> > \n> > Even in advanced compilation mode, I'm finding the size my js to be pretty \n> > large.  But my application code is quite a small fraction of the total.  \n> > The rest is the Clojurescript runtime, React, Datascript, Material-UI \n> > components, etc.\n> > \n> > On a daily\/weekly deployment basis, only my application code changes.  Yet \n> > with the practice of advanced compilation, I have to redeploy a large .js \n> > file to the web clients just to update the application code - the majority \n> > of the data payload hasn't changed at all.\n> > \n> > What I'm thinking of doing is compiling two .js files in simple mode, not \n> > advanced mode.  The first called framework.js would include Clojurescript, \n> > React, Datascript, etc.  The second called app.js would just be my \n> > application code.\n> > \n> > Now on a daily basis I only have to cache-invalidate a relatively small .js \n> > file in order to update the web app.  The framework.js file only needs to \n> > update every couple months when I want to bump the library versions.  \n> > \n> > I feel the benefits of no longer re-deploying the Clojurescript runtime \n> > over and over outway the limitations of not using advanced compilation mode.\n> > \n> > Am I missing something that makes this a bad idea?  Is anyone else doing \n> > something similar?\n> > \n> > Thanks for your help.\n> > \n> > -- \n> > Regards,\n> > \n> > Scott Klarenbach\n> > Invisible Robot Technologies\n> > invisiblerobot.io\n> > \n> > 604-537-1856\n> > sc...@invisiblerobot.io\n> > \n> > #515 - 207 West Hastings Street\n> > Vancouver, BC, V6B1H7\n> > \n> > _______________________________________\n> > To iterate is human; to recur, divine\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Deployment Best Practice - Advanced mode vs multiple js files. Scott Klarenbach Thu, 24 Nov 2016 09:49:08 -0800"},
{"body":"Hey,\n\nI have done quite a few experiments over the years and these would be my \ngeneral recommendations. \nTL;DR: Embrace :advanced fully, keep non-cljs\/closure out of your build, mind \nyour dependencies, use closure modules to split code. \n\nMost things really depend on your app and your general audience. Say you have \nmostly new users that spend some time on your site but only once every few \ndays\/weeks at most. Their cache will very likely be empty most of the time. So \nhaving a \"larger but re-usable\" framework.js is just worse since they have to \ndownload it anyways. Only because you say \"cache forever\" does not mean the \nbrowser will do so, some (especially mobile) Browsers will purge on their own \nterms (LRU, LFU) anyways to save space.\n\nYou can use things like React via a public CDN to increase the chances of the \nuser having the thing cached. I have no statistics here but in theory this is a \ngood idea (and fairly common).\n\nYou want to keep things like React and Material-UI completely out of your CLJS \nbuild anyways since the Closure compiler doesn't unterstand them and can't do \nmuch. If you get Material-UI via CLJSJS for example it is one huge JS file, \neven the min is 150kb gzip'd + 100kb for the icons. If you only use 3 out of \nthe 40 or so Components they provide you are better off with JS tools to handle \nthis. Webpack or Rollup are supposed to be good and will most likely provide \nbetter results until Closure fully understands this.\n\nCLJS\/Closure code should always go through :advanced though as the potential \nsavings are huge and you get better performance for some things on top for free.\n\nIf you have a large site with different sections (ie. landing pages, signup, \nlogged-in only, etc) it is best to split the code using closure modules so the \ninitial download is smaller\/faster and only loading the other stuff when you \nneed it. Closure does very good work here to optimize the splits.\n\nThere are many more micro tweaks you can do (preloading, async loading, etc) \nbut not downloading\/evaling code you don't use is probably the single best \nthing you can do. If you say your :advanced build is too large I'm willing to \nbet that probably 75% or more are due to foreign dependencies. Optimize those \nfirst, even if you just put them in a framework.js. Don't sacrifice :advanced \nthough.\n\nHTH,\n\/thomas\n\n\n\nOn Wednesday, November 23, 2016 at 8:00:31 PM UTC+1, Scott Klarenbach wrote:\n> I'm curious about Clojurescript deployment best practices.\n> \n> Even in advanced compilation mode, I'm finding the size my js to be pretty \n> large.  But my application code is quite a small fraction of the total.  The \n> rest is the Clojurescript runtime, React, Datascript, Material-UI components, \n> etc.\n> \n> On a daily\/weekly deployment basis, only my application code changes.  Yet \n> with the practice of advanced compilation, I have to redeploy a large .js \n> file to the web clients just to update the application code - the majority of \n> the data payload hasn't changed at all.\n> \n> What I'm thinking of doing is compiling two .js files in simple mode, not \n> advanced mode.  The first called framework.js would include Clojurescript, \n> React, Datascript, etc.  The second called app.js would just be my \n> application code.\n> \n> Now on a daily basis I only have to cache-invalidate a relatively small .js \n> file in order to update the web app.  The framework.js file only needs to \n> update every couple months when I want to bump the library versions.  \n> \n> I feel the benefits of no longer re-deploying the Clojurescript runtime over \n> and over outway the limitations of not using advanced compilation mode.\n> \n> Am I missing something that makes this a bad idea?  Is anyone else doing \n> something similar?\n> \n> Thanks for your help.\n> \n> -- \n> Regards,\n> \n> Scott Klarenbach\n> Invisible Robot Technologies\n> invisiblerobot.io\n> \n> 604-537-1856\n> sc...@invisiblerobot.io\n> \n> #515 - 207 West Hastings Street\n> Vancouver, BC, V6B1H7\n> \n> _______________________________________\n> To iterate is human; to recur, divine\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Deployment Best Practice - Advanced mode vs multiple js files. Thomas Heller Wed, 23 Nov 2016 17:12:29 -0800"},
{"body":"David,\n\nIssue created: CLJS-1859. \nThank you for your work on ClojureScript.\n\nCheers,\nJuan\n\nOn Monday, November 21, 2016 at 6:55:30 PM UTC+1, David Nolen wrote:\n> Just a bug. File an issue in JIRA.\n> \n> \n> Thanks!\n> \n> \n> David\n> \n> \n> On Sun, Nov 20, 2016 at 10:58 AM, Juan Facorro <juan.f...@gmail.com> wrote:\n> Hi all,\n> \n> \n> \n> (This might have been asked before, but I couldn't find anything through a \n> search in the group history or google.)\n> \n> \n> \n> First of all, Clojure\/ClojureScript are awesome!\n> \n> \n> \n> I found the result of comparing a map and a record is different based on the \n> order of the arguments to =:\n> \n> \n> \n> To quit, type: :cljs\/quit\n> \n> cljs.user=> (defrecord R [])\n> \n> cljs.user\/R\n> \n> cljs.user=> (= {} (R.))\n> \n> true\n> \n> cljs.user=> (= (R.) {})\n> \n> false\n> \n> \n> \n> I tried the code above with tags r1.7.228, r1.8.34 and 1.9.293.\n> \n> \n> \n> Is this expected behavior?\n> \n> \n> \n> This seems to be rooted in the fact that when a map is the first argument the \n> function used to make the comparison is the implementation of \"equiv\" from \n> the map. But when a record is the first argument the implementation used is \n> the one from the record, which checks if the types of both arguments are \n> equal.\n> \n> \n> \n> The behavior is Clojure (JVM) is consistent:\n> \n> \n> \n> user=> (defrecord R [])\n> \n> user.R\n> \n> user=> (= {} (R.))\n> \n> true\n> \n> user=> (= (R.) {})\n> \n> false\n> \n> \n> \n> I suspect this works consistenly since the implementation of \"equiv\" in \n> \"clojure.lang.APersistentMap\" checks for the marker interface \n> \"MapEquivalence\".\n> \n> \n> \n> Kind regards,\n> \n> Juan\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> \n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Comparing maps and records Juan Facorro Wed, 23 Nov 2016 14:18:07 -0800"},
{"body":"I'm curious about Clojurescript deployment best practices.\n\nEven in advanced compilation mode, I'm finding the size my js to be pretty \nlarge.  But my application code is quite a small fraction of the total.  The \nrest is the Clojurescript runtime, React, Datascript, Material-UI components, \netc. \nOn a daily\/weekly deployment basis, only my application code changes.  Yet with \nthe practice of advanced compilation, I have to redeploy a large .js file to \nthe web clients just to update the application code - the majority of the data \npayload hasn't changed at all.\n\nWhat I'm thinking of doing is compiling two .js files in simple mode, not \nadvanced mode.  The first called framework.js would include Clojurescript, \nReact, Datascript, etc.  The second called app.js would just be my application \ncode.\n\nNow on a daily basis I only have to cache-invalidate a relatively small .js \nfile in order to update the web app.  The framework.js file only needs to \nupdate every couple months when I want to bump the library versions.  \n\nI feel the benefits of no longer re-deploying the Clojurescript runtime over \nand over outway the limitations of not using advanced compilation mode.\n\nAm I missing something that makes this a bad idea?  Is anyone else doing \nsomething similar?\n\nThanks for your help.\n\n-- \nRegards,\n\nScott Klarenbach\nInvisible Robot Technologies\ninvisiblerobot.io\n\n604-537-1856\nsc...@invisiblerobot.io\n\n#515 - 207 West Hastings Street\nVancouver, BC, V6B1H7\n\n_______________________________________\nTo iterate is human; to recur, divine\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Deployment Best Practice - Advanced mode vs multiple js files. Scott Klarenbach Wed, 23 Nov 2016 11:02:11 -0800"},
{"body":"Just a bug. File an issue in JIRA.\n\nThanks! \nDavid\n\nOn Sun, Nov 20, 2016 at 10:58 AM, Juan Facorro <juan.faco...@gmail.com>\nwrote:\n\n> Hi all,\n>\n> (This might have been asked before, but I couldn't find anything through a\n> search in the group history or google.)\n>\n> First of all, Clojure\/ClojureScript are awesome!\n>\n> I found the result of comparing a map and a record is different based on\n> the order of the arguments to =:\n>\n> To quit, type: :cljs\/quit\n> cljs.user=> (defrecord R [])\n> cljs.user\/R\n> cljs.user=> (= {} (R.))\n> true\n> cljs.user=> (= (R.) {})\n> false\n>\n> I tried the code above with tags r1.7.228, r1.8.34 and 1.9.293.\n>\n> Is this expected behavior?\n>\n> This seems to be rooted in the fact that when a map is the first argument\n> the function used to make the comparison is the implementation of \"equiv\"\n> from the map. But when a record is the first argument the implementation\n> used is the one from the record, which checks if the types of both\n> arguments are equal.\n>\n> The behavior is Clojure (JVM) is consistent:\n>\n> user=> (defrecord R [])\n> user.R\n> user=> (= {} (R.))\n> true\n> user=> (= (R.) {})\n> false\n>\n> I suspect this works consistenly since the implementation of \"equiv\" in\n> \"clojure.lang.APersistentMap\" checks for the marker interface\n> \"MapEquivalence\".\n>\n> Kind regards,\n> Juan\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Comparing maps and records David Nolen Mon, 21 Nov 2016 10:02:04 -0800"},
{"body":"Hi all,\n\n(This might have been asked before, but I couldn't find anything through a \nsearch in the group history or google.) \nFirst of all, Clojure\/ClojureScript are awesome!\n\nI found the result of comparing a map and a record is different based on the \norder of the arguments to =:\n\nTo quit, type: :cljs\/quit\ncljs.user=> (defrecord R [])\ncljs.user\/R\ncljs.user=> (= {} (R.))\ntrue\ncljs.user=> (= (R.) {})\nfalse\n\nI tried the code above with tags r1.7.228, r1.8.34 and 1.9.293.\n\nIs this expected behavior?\n\nThis seems to be rooted in the fact that when a map is the first argument the \nfunction used to make the comparison is the implementation of \"equiv\" from the \nmap. But when a record is the first argument the implementation used is the one \nfrom the record, which checks if the types of both arguments are equal.\n\nThe behavior is Clojure (JVM) is consistent:\n\nuser=> (defrecord R [])\nuser.R\nuser=> (= {} (R.))\ntrue\nuser=> (= (R.) {})\nfalse\n\nI suspect this works consistenly since the implementation of \"equiv\" in \n\"clojure.lang.APersistentMap\" checks for the marker interface \"MapEquivalence\".\n\nKind regards,\nJuan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Comparing maps and records Juan Facorro Sun, 20 Nov 2016 09:16:59 -0800"},
{"body":"Your code, when compiled will evaluate that (if ...) expression and on-change \nwill most likely get nil instead of a function value. \nThe value you supply to on-change needs to be a function.\n\nTwo common ways of doing this are using inline anonymous functions:\n\n(fn [event] (if (= (.-target.value event) \"Hello\") (reset! greeting \"Hello, how \nare you\")))\n\nOr using reader shorthand:\n\n#(if (= (.-target.value %) \"Hello\")  (reset! greeting \"Hello, how are you\")))\n\nThe reagent examples use both styles.\n\nAlternatively, you could define a top level function with defn and just place \nthat named function in place of the inline fn.\n\n(defn mygreeting [event] ...)\n\n... elsewhere \n\n:on-change mygreeting \n\nAlso you might want to use a different name for that component function name - \nthe name \"input\" could be confusing and\/or may shadow referred refs\/functions.\n\nThere may be other things wrong but I'm typing this on my phone w\/o a repl.\n\nGood luck!\n\nAlan\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Specific greeting to be shown in browser Alan Moore Sat, 19 Nov 2016 10:55:11 -0800"},
{"body":"I have been working with our hosting provider (thanks Contegix!) to upgrade\nthe hosts underneath *dev.clojure.org <http:\/\/dev.clojure.org>* (JIRA and\nconfluence) and *build.clojure.org <http:\/\/build.clojure.org>* (Hudson).\nThe new hosts are much more recent versions of the OS and seem to be faster. \nI cut *dev* over tonight. There were about 7 ticket changes in CLJS that\nwere lost due to when we copied the data today but I have manually\nrecreated those on the new version. afaik, everything is done with this\nmigration other than re-enabling notification emails on the new box which\nwill happen next. If you experience anything strange, please let me know.\nIdeally, everything should look and work exactly the same.\n\n*build* will take a bit longer before I make the switch. We upgraded from\nthe ancient version of Hudson we were on (which was blocking the ability to\ndo contrib builds with cljc) to newest version of Jenkins. Significant\nportions of the build system are working again (kudos to Jenkins\ncommunity), but I still have some issues to work through and things to\ntest. Hopefully that will be next week.\n\nI would dearly love to upgrade the JIRA\/Confluence\/Crowd versions we're on\ntoo, but this is a significant undertaking intertwined with software\nlicensing and hosting considerations. Over the course of the last year, I\nhave spent several full weeks worth of time analyzing aspects of this and\ndoing (largely failing) test runs. It will get done eventually, but it's\nnot ready yet.\n\nAlex\n\nPS. By sending this I risk opening up questions about infrastructure and\nother choices, so let me preempt some of those. :) We have no plans at this\ntime to: use anything other than jira or confluence, accept github PRs,\nchange the CA, change the license, or change the contribution model. These\ntopics have been rehashed on the mailing list a number of times and I don't\nthink anything has changed such that it's worth doing so again. If you want\nto bend my ear, I will be at the Conj. :)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojure infrastructure update Alex Miller Fri, 18 Nov 2016 18:29:00 -0800"},
{"body":"Didn't you intend for :on-change to lead to a function? Keep in mind, it's a \nfunction *of* something... which will be very helpful in the comparison. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Specific greeting to be shown in browser Phill Wolf Fri, 18 Nov 2016 15:19:40 -0800"},
{"body":"Hi,\n\nI am fairly new to Clojurescript (been learning for around 2 months) and I have \na problem with a small project I am working on. My aim is for a greeting to be \ninputted and then a response to be outputted depending on the greeting, all on \nthe browser. \nMy code:\n\n(ns myproject.greeting\n  (:require [reagent.core :as r]\n            [ajax.core :as ajax]))\n\n(defn input [greeting]\n  [:input {:type  \"text\"\n           :value @greeting\n           :on-change (if (= greeting \"Hello\")\n                        (str \"Hello, how are you?\"))}])\n\n(defn hello-browser []\n  (let [val (r\/atom \"\")]\n    (fn []\n      [:div\n       [:p \"Enter greeting here: \" [input val]]\n       [:p \"My response is: \" @val]\n       ])))\n\nThe core.cljs file contains:\n\n(ns myproject.core\n  (:require ...\n            [myproject.greeting :as g])\n  (:import goog.History))\n\n(defn home-page []\n  [:div.container\n   [g\/hello-browser]]\n  )\n\nWhat I want my function to do is when you type \"Hello\" into the input, the \nresponse is \"Hello, how are you?\". Any help is much appreciated. Thanks.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Specific greeting to be shown in browser 'Rickesh Bedia' via ClojureScript Fri, 18 Nov 2016 05:14:54 -0800"},
{"body":"Hey,\n\nnot yet another kv-store? I written a blog post to clearify the design\ndecisions here: \nhttps:\/\/whilo.github.io\/articles\/16\/unified-storage-io\n\n>From the README:\n\nA simple document store protocol defined with core.async semantics to\nallow Clojuresque collection operations on associative key-value stores,\nboth from Clojure and ClojureScript for different backends. Data is\ngenerally serialized with edn semantics or, if supported, as native\nbinary blobs and can be accessed similar to clojure.core functions\nget-in,assoc-in and update-in. update-in especially allows to run\nfunctions atomically and returns old and new value.\n\nhttps:\/\/github.com\/replikativ\/konserve\n\nThere are now two new backends:\n\n- LevelDB: https:\/\/github.com\/replikativ\/konserve-leveldb\n- Riak: https:\/\/github.com\/replikativ\/konserve-welle\n\n\nI hope you find it useful and ping back,\nChristian\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"[ClojureScript] ANN: konserve 0.4.4 kv-protocol with core.async + new backends Christian Weilbach Sat, 12 Nov 2016 03:53:48 -0800"},
{"body":"The answer is of course laziness, we were rendering into a [:pre] with reagent \nand the bindings unwound before reagent realized the pretty value. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: trouble binding pprint\/*print-right-margin* Dustin Getz Fri, 11 Nov 2016 10:18:15 -0800"},
{"body":"Happy to announce Quil 2.5.0 release.\nQuil is a Clojure\/ClojureScript library for creating interactive drawings\nand animations. \nThe release available on clojars: https:\/\/clojars.org\/quil. List of changes:\n\n   - Support svg rendering. #188 <https:\/\/github.com\/quil\/quil\/issues\/188>.\n   - Add do-record <http:\/\/quil.info\/api\/output\/files#do-record> macro to\n   simplify svg\/pdf generation. #189\n   <https:\/\/github.com\/quil\/quil\/issues\/189>.\n   - Update Processing to 3.2.2 and Processing.js to 1.6.3.\n   - Fix mouse-wheel event propagation outside of sketch. #175\n   <https:\/\/github.com\/quil\/quil\/issues\/175>\n   - Fix reflection warnings. #185 <https:\/\/github.com\/quil\/quil\/issues\/185>\n\nSince 2.5.0 Quil works only on Java 8+ because Processing 3.2.2 doesn't\nsupport Java 7 and below.\n\nDocumentation on http:\/\/quil.info has been updated as well.\n\nHappy hacking!\n\nNikita\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] Quil 2.5.0 Release Nikita Beloglazov Sat, 05 Nov 2016 21:35:10 -0700"},
{"body":"Hi,\n\nIf you are interested, feel free to join us at \nhttps:\/\/www.meetup.com\/brno-clojure\/ . \nOur first meetup is scheduled on Wednesday, November 30, 2017 at 18:15 in \nImpact Hub Brno, Cyrilska 7 .\n\nEveryone is welcome!\nKarel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] (:brno clojure) - new Clojure and ClojureScript focused meetup group in Brno, Czech Republic Karel Miarka Fri, 04 Nov 2016 08:59:37 -0700"},
{"body":"cheers!\n\nOn Monday, 31 October 2016 20:18:35 UTC, Thomas Heller  wrote:\n> If you feel like trying another build tool you could try shadow-build [1]. It \n> has built-in support for web-workers, well it injects the importScripts for \n> you since that is all you need really. You also get modules for :none which \n> makes development easier. ;)\n> \n> Docs are terrible though so be warned. \n> \n> \/thomas\n> \n> @thheller on slack if you have questions.\n> \n> [1] https:\/\/github.com\/thheller\/shadow-build\n> \n> \n> On Monday, October 31, 2016 at 3:47:53 PM UTC+1, Matthew Chadwick wrote:\n> > what approach would you suggest then for prepending the importScripts() \n> > line to generated webworker js code ? I would prefer to use Clojurescript \n> > to write webworkers\n> > \n> > On Sunday, 30 October 2016 21:10:50 UTC, David Nolen  wrote:\n> > > :preamble is just for prepending copyright \/ licenses etc. Nothing more. \n> > > Using it to add code is not recommended and not something we intend to \n> > > support.\n> > > \n> > > \n> > > David\n> > > \n> > > \n> > > On Fri, Oct 28, 2016 at 7:07 PM, Matthew Chadwick <math...@gmail.com> \n> > > wrote:\n> > > any idea why :preamble doesnt seem to work with modular compilation ? I \n> > > want to prepend importScripts() to the start of my generated js, but only \n> > > for one module (a webworker)\n> > > \n> > > \n> > > \n> > > --\n> > > \n> > > Note that posts from new members are moderated - please be patient with \n> > > your first post.\n> > > \n> > > ---\n> > > \n> > > You received this message because you are subscribed to the Google Groups \n> > > \"ClojureScript\" group.\n> > > \n> > > To unsubscribe from this group and stop receiving emails from it, send an \n> > > email to clojurescrip...@googlegroups.com.\n> > > \n> > > To post to this group, send email to clojur...@googlegroups.com.\n> > > \n> > > Visit this group at https:\/\/groups.google.com\/group\/clojurescript. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] :preamble with modular compilation Matthew Chadwick Tue, 01 Nov 2016 13:02:49 -0700"},
{"body":"Hi,\n\nI am pleased to announce the 0.0.17 release of data.avl, a Clojure\nContrib library providing highly performant drop-in replacements for\nClojure(Script)'s built-in sorted maps and sets that support O(log n)\nnth, rank-of, first-class submaps\/subsets (like subseq, but preserving\ncollection type; fully independent from the original for GC purposes)\nand splits by key and index. \nThis release addresses an issue whereby the balancing invariant would\nnot be obeyed in certain cases, leading to degraded performance. The\nproblem was uncovered by newly expanded generative tests for the\nbalancing invariant; these should prevent any regressions in the\nfuture.\n\n  [org.clojure\/data.avl \"0.0.17\"]\n\n  <dependency>\n    <groupId>org.clojure<\/groupId>\n    <artifactId>data.avl<\/artifactId>\n    <version>0.0.17<\/version>\n  <\/dependency>\n\n  org.clojure:data.avl:0.0.17\n\nCheers,\nMicha\u0142\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] data.avl 0.0.17 \u2013 tree balance bugfix, more generative tests Micha\u0142 Marczyk Mon, 31 Oct 2016 15:27:49 -0700"},
{"body":"If you feel like trying another build tool you could try shadow-build [1]. It \nhas built-in support for web-workers, well it injects the importScripts for you \nsince that is all you need really. You also get modules for :none which makes \ndevelopment easier. ;) \nDocs are terrible though so be warned. \n\n\/thomas\n\n@thheller on slack if you have questions.\n\n[1] https:\/\/github.com\/thheller\/shadow-build\n\n\nOn Monday, October 31, 2016 at 3:47:53 PM UTC+1, Matthew Chadwick wrote:\n> what approach would you suggest then for prepending the importScripts() line \n> to generated webworker js code ? I would prefer to use Clojurescript to write \n> webworkers\n> \n> On Sunday, 30 October 2016 21:10:50 UTC, David Nolen  wrote:\n> > :preamble is just for prepending copyright \/ licenses etc. Nothing more. \n> > Using it to add code is not recommended and not something we intend to \n> > support.\n> > \n> > \n> > David\n> > \n> > \n> > On Fri, Oct 28, 2016 at 7:07 PM, Matthew Chadwick <math...@gmail.com> wrote:\n> > any idea why :preamble doesnt seem to work with modular compilation ? I \n> > want to prepend importScripts() to the start of my generated js, but only \n> > for one module (a webworker)\n> > \n> > \n> > \n> > --\n> > \n> > Note that posts from new members are moderated - please be patient with \n> > your first post.\n> > \n> > ---\n> > \n> > You received this message because you are subscribed to the Google Groups \n> > \"ClojureScript\" group.\n> > \n> > To unsubscribe from this group and stop receiving emails from it, send an \n> > email to clojurescrip...@googlegroups.com.\n> > \n> > To post to this group, send email to clojur...@googlegroups.com.\n> > \n> > Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] :preamble with modular compilation Thomas Heller Mon, 31 Oct 2016 13:19:07 -0700"},
{"body":"what approach would you suggest then for prepending the importScripts() line to \ngenerated webworker js code ? I would prefer to use Clojurescript to write \nwebworkers \nOn Sunday, 30 October 2016 21:10:50 UTC, David Nolen  wrote:\n> :preamble is just for prepending copyright \/ licenses etc. Nothing more. \n> Using it to add code is not recommended and not something we intend to \n> support.\n> \n> \n> David\n> \n> \n> On Fri, Oct 28, 2016 at 7:07 PM, Matthew Chadwick <math...@gmail.com> wrote:\n> any idea why :preamble doesnt seem to work with modular compilation ? I want \n> to prepend importScripts() to the start of my generated js, but only for one \n> module (a webworker)\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> \n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] :preamble with modular compilation Matthew Chadwick Mon, 31 Oct 2016 07:48:07 -0700"},
{"body":":preamble is just for prepending copyright \/ licenses etc. Nothing more.\nUsing it to add code is not recommended and not something we intend to\nsupport. \nDavid\n\nOn Fri, Oct 28, 2016 at 7:07 PM, Matthew Chadwick <mathn...@gmail.com>\nwrote:\n\n> any idea why :preamble doesnt seem to work with modular compilation ? I\n> want to prepend importScripts() to the start of my generated js, but only\n> for one module (a webworker)\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] :preamble with modular compilation David Nolen Sun, 30 Oct 2016 14:11:16 -0700"},
{"body":"any idea why :preamble doesnt seem to work with modular compilation ? I want to \nprepend importScripts() to the start of my generated js, but only for one \nmodule (a webworker) \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] :preamble with modular compilation Matthew Chadwick Sun, 30 Oct 2016 07:18:07 -0700"},
{"body":"On Tuesday, February 24, 2015 at 12:37:46 PM UTC, David Nolen wrote:\n> :preamble will only be applied to the base module. When using :modules there \n> is not such thing as a main output file.\n> \n> \n> You cannot currently have a per module :preamble.\n> \nI recently wanted per-module :preamble when playing with webworkers, in order \nto add the importScripts(); line -- is there any other way to get that line \ninto a module ?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: ANN: ClojureScript 0.0-2913, Google Closure Modules, improved nREPL support Matthew Chadwick Sun, 30 Oct 2016 07:18:06 -0700"},
{"body":"Il giorno marted\u00ec 25 ottobre 2016 11:00:50 UTC+2, Peter Taoussanis ha scritto:\n> Hi folks!\n> \n> So this is the 1st of 4 libs I\u2019ve been meaning to publish for forever.\n> \n> Available at: https:\/\/github.com\/ptaoussanis\/tempura\n> Other libs (as usual) at: https:\/\/www.taoensso.com\/clojure\n> \n> Enjoy, cheers! :-)\n> \n> \\- Peter Taoussanis, [@ptaoussanis](https:\/\/twitter.com\/ptaoussanis) \nGreat work! Thank you very much!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [Ann] Tempura, a Clj+Cljs i18n translations lib with support for React Andrea Russo Sat, 29 Oct 2016 11:52:50 -0700"},
{"body":"http:\/\/blog.klipse.tech\/clojure\/2016\/10\/25\/core-match.html \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] core.match interactive tutorial - with KLIPSE Yehonathan Sharvit Tue, 25 Oct 2016 11:33:42 -0700"},
{"body":"Hi folks!\n\nSo this is the 2nd of 4 libs I\u2019ve been meaning to publish for forever. \nAvailable at: https:\/\/github.com\/ptaoussanis\/tengen\nOther libs (as usual) at: https:\/\/www.taoensso.com\/clojure\nRelease announcements on Twitter: https:\/\/twitter.com\/ptaoussanis\n\nEnjoy, cheers! :-)\n\n- Peter Taoussanis\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [Ann] Tengen, a small lib for writing simpler React components (just Reagent for now) Peter Taoussanis Tue, 25 Oct 2016 02:03:08 -0700"},
{"body":"Hi folks!\n\nSo this is the 1st of 4 libs I\u2019ve been meaning to publish for forever. \nAvailable at: https:\/\/github.com\/ptaoussanis\/tempura\nOther libs (as usual) at: https:\/\/www.taoensso.com\/clojure\n\nEnjoy, cheers! :-)\n\n\\- Peter Taoussanis, [@ptaoussanis](https:\/\/twitter.com\/ptaoussanis)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [Ann] Tempura, a Clj+Cljs i18n translations lib with support for React Peter Taoussanis Tue, 25 Oct 2016 02:01:22 -0700"},
{"body":"After more than a year of exploration of different approaches to get\nerror handling right in the Erlang sense with core.async, I am finally\nconfident enough to release it as superv.async. I have tested it a lot\nwith replikativ in a distributed system, but I wouldn't consider it\nproduction ready yet. \nI have written a blog post about the experiences and different\napproaches here:\n\nhttps:\/\/whilo.github.io\/org\/2016\/03\/10\/error-handling1.html\n\n>From the README:\n\nLet it crash. The Erlang approach to build reliable systems.\n\nErrors happen, and proper error handling cannot be bolted on top of\nsubsystems. This library draws on the Erlang philosophy of error\nhandling to help building robust distributed systems that deal with\nerrors by default.\n\nThis is a Clojure(Script) library that extends core.async with error\nhandling and includes a number of convenience functions and macros. This\nlibrary is a fork of full.async. The original attempt to merge this work\nwith it failed due to the limitations of a dynamic binding approach. The\nfork became reasonable, because full.async mostly deals with convenience\nfunctions, but it is not as radically focused on proper error handling.\nSince the error handling cannot happen through a transparent dynamic\nbinding, some convenience is lost in superv.async as you need to carry\naround the supervisor lexically. If binding support comes to\nClojureScript for asynchronous contexts the projects might merge again.\nThe binding approach also has a performance penalty though. Since the\nboundary of both error handling libraries is the exception mechanism and\ncore.async channels, they still compose, but supervision will not\ncompose with full.async contexts.\n\nhttps:\/\/github.com\/replikativ\/superv.async\n\nI hope you find it useful and feedback is very much appreciated.\n\nChristian\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.\n signature.asc Description: OpenPGP digital signature","subject":"[ClojureScript] ANN superv.async 0.2.1 - Erlang-inspired error handling for core.async Christian Weilbach Mon, 24 Oct 2016 16:02:35 -0700"},
{"body":"Hi Mike,\n\nThanks. Yes, it is the exact same issue because of call to shadowing local \nsymbol. Memoization, tracing, etc. are iimpacted by this.\nSeems to me this is an optimization and shouldn't be default behavior. \n\n(defn fib1 [n]\n  (if (< n 2)\n    n\n    (+ (fib1 (dec n))\n      (fib1 (dec (dec n))))))\n      \n(defn fib2 [n]\n  (if (< n 2)\n    n\n    (+ (cljs.user\/fib2 (dec n))\n      (cljs.user\/fib2 (dec (dec n))))))\n\n On Replete repl and iPad Pro:\n\n(time (fib1 20))\n\"Elapsed time: 2.000000 msecs\"\n6765\n\n(time (fib2 20))\n\"Elapsed time: 3.000000 msecs\"\n6765\n\n=> (time (fib1 35))\n\"Elapsed time: 1491.000000 msecs\"\n9227465\n\n=> (time (fib2 35))\n\"Elapsed time: 2159.000000 msecs\"\n9227465\n\n=> (time (fib1 38))\n\"Elapsed time: 6335.000000 msecs\"\n39088169\n\n=> (time (fib2 38))\n\"Elapsed time: 9162.000000 msecs\"\n39088169\n\n\nI'll play around with performance numbers on Planck with static fns etc. later.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Differences in emitted javascript for recursive function definitions Aravindh Johendran Sun, 23 Oct 2016 16:31:31 -0700"},
{"body":"Hi Aravindh,\n\nWhat you show has similarities to the concepts described in \nhttp:\/\/dev.clojure.org\/jira\/browse\/CLJS-1495 FWIW. \n- Mike\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Differences in emitted javascript for recursive function definitions Mike Fikes Sat, 22 Oct 2016 18:59:11 -0700"},
{"body":"I have been trying to write a trace tool for bootstrapped clojurescript \u2014 using \nan approach similar to clojure's tools.trace and CL's dtrace. It involves \nwrapping the traced function and redefining the symbol to point to the wrapped \nfunction. In clojure's tools.trace, the var's root binding is altered. \nI have run into an issue with recursive functions. The emitted javascript turns \nout to be different based on how the function is defined. \n\nConsider the following definitions for calculating factorial recursively. I am \nusing the factorial function just for illustration purposes. I am using Mike \nFikes' excellent Planck real (bootstrapped clojurescript on MacOS). Based on \nanalysis below, I think emitted javascript for definition of f1 should be same \nas that of f2. Any thoughts?\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn f1 [n] (if (< n 2) 1 (* n (f1 (dec n)))))\n(def f2 (fn f2-lbl [n] (if (< n 2) 1 (* n (f2 (dec n))))))\n(def f3 (fn f3-lbl [n] (if (< n 2) 1 (* n (f3-lbl (dec n))))))\n(defn f4 [n] (if (< n 2) 1 (* n (cljs.user\/f4 (dec n)))))\n(def f5 (fn [n] (if (< n 2) 1 (* n (f5 (dec n))))))\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nIf I wrap the factorial function and redefine the name symbol in with-redefs, \nonly f2 and f4 work as expected. No such issues with clojure.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\ncljs.user=>(defn wrapper [f] (fn [x] (println \"wrapped call arg-> \" x) (f x)))\n   #'cljs.user\/wrapper\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n1) \ncljs.user=>with-redefs [f1 (wrapper f1)] (f1 5))\n\n   wrapped call arg->  5\n   120\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n2) \ncljs.user=> (with-redefs [f2 (wrapper f2)] (f2 5))\n\nwrapped call arg->  5\nwrapped call arg->  4\nwrapped call arg->  3\nwrapped call arg->  2\nwrapped call arg->  1\n120\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n3) \ncljs.user=>(with-redefs [f3 (wrapper f3)] (f3 5))\n\nwrapped call arg->  5\n120\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n4) \ncljs.user=>(with-redefs [f4 (wrapper f4)]  (f4 5))\n\nwrapped call arg->  5\nwrapped call arg->  4\nwrapped call arg->  3\nwrapped call arg->  2\nwrapped call arg->  1\n120\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n5) \ncljs.user=>(with-redefs [f5 (wrapper f5)]  (f5 5))\n\nwrapped call arg->  5\n120\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nTurning verbose option on with planck, it is easy to see what is happening.  \nThe emitted javascript is different depending on how we are defining the \nclojurescript recursive function\n\n1) cljs.user=> (defn f1 [n] (if (< n 2) 1 (* n (f1 (dec n)))))\n\nEvaluating Expression\n  cljs.user.f1 = (function cljs$user$f1(n){\n  if((n < (2))){\n  return (1);\n  } else {\n  return (n * cljs$user$f1.call(null,(n - (1))));\n  }\n  })\n#'cljs.user\/f1\n\n ---- Look at the return statement. The recursive ignition calls cljs$user$f1. \nThis means if I redefine cljs.user.f1 , the behavior of the function won't \nchange at all.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n2) cljs.user=> (def f2 (fn f2-lbl [n] (if (< n 2) 1 (* n (f2 (dec n))))))\n\nEvaluating Expression\n   cljs.user.f2 = (function cljs$user$f2_lbl(n){\n   if((n < (2))){\n   return (1);\n   } else {\n   return (n * cljs.user.f2.call(null,(n - (1))));\n  }\n  })\n#'cljs.user\/f2\n\n--- Here, the recursive call in return statement is to cljs.user.f2 rather than \ncljs$user$f2_lbl. \n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n3) cljs.user=> (def f3 (fn f3-lbl [n] (if (< n 2) 1 (* n (f3-lbl (dec n))))))\n\nEvaluating Expression\n   cljs.user.f3 = (function cljs$user$f3_lbl(n){\n   if((n < (2))){\n   return (1);\n   } else {\n   return (n * cljs$user$f3_lbl.call(null,(n - (1))));\n   }\n   })\n#'cljs.user\/f3\n\n-- As expected, the recursive call is to cljs$user$f3_lbl and not cljs.user.f3\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n4) cljs.user=> (defn f4 [n] (if (< n 2) 1 (* n (cljs.user\/f4 (dec n)))))\n\n   Evaluating Expression\n   cljs.user.f4 = (function cljs$user$f4(n){\n   if((n < (2))){\n   return (1);\n   } else {\n   return (n * cljs.user.f4.call(null,(n - (1))));\n   }\n   })\n#'cljs.user\/f4\n\n--- cljs.user.f4 is used for the recursive call\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n5) (def f5 (fn [n] (if (< n 2) 1 (* n (f5 (dec n))))))\nEvaluating Expression\n   cljs.user.f5 = (function cljs$user$f5(n){\n   if((n < (2))){\n   return (1);\n   } else {\n   return (n * cljs$user$f5.call(null,(n - (1))));\n   }\n   })\n#'cljs.user\/f5\n\n-- Quite similar to f1. \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\nAgain, I think the definition for f1 should emit javascript similar to \ndefinition for f2. Any thoughts?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Differences in emitted javascript for recursive function definitions Aravindh Johendran Sat, 22 Oct 2016 08:18:06 -0700"},
{"body":"You should be able to make a minimal case for this without external libs.\nFile an issue in JIRA with the minima reproducer. \nThanks,\nDavid\n\nOn Thu, Oct 20, 2016 at 2:29 AM, Peter Taoussanis <ptaoussa...@gmail.com>\nwrote:\n\n> Hi all,\n>\n> Was wondering if anyone might be familiar with the reason for some\n> unexpected behaviour I'm seeing?\n>\n> (extend-type js\/jQuery\n>   ILookup\n>   (-lookup\n>     ([this k] nil)\n>     ([this k not-found] nil))\n>   IFn\n>   (-invoke\n>     ([this k] (-lookup this k))\n>     ([this k not-found] (-lookup this k not-found))))\n>\n> This works fine against ClojureScript <= 1.8.40, but against >= 1.8.51 (up\n> to 1.9.293) triggers:\n> `WARNING: Use of undeclared Var taoensso.lib.web\/jQuery`.\n>\n> I'll note a peculiarity: it's specifically the `-lookup` call that\n> triggers the compilation warning. Avoiding that call and extending to other\n> protocols like ICounted, etc. work as usual.\n>\n> For example, the following will *not* produce a warning:\n>\n> (extend-type js\/jQuery\n>   ILookup\n>   (-lookup\n>     ([this k] nil)\n>     ([this k not-found] nil))\n>   IFn\n>   (-invoke\n>     ([this k] nil #_(-lookup this k))\n>     ([this k not-found] nil #_(-lookup this k not-found))))\n>\n> Am I possibly missing something simple? Couldn't see any obvious\n> explanation in the changelog at https:\/\/groups.google.com\/\n> forum\/#!topic\/clojurescript\/fR1PVRXtzCI\n>\n> Thanks, cheers!\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Expected change in `extend-type` behaviour after Cljs 1.8.40? David Nolen Thu, 20 Oct 2016 15:58:45 -0700"},
{"body":"Hi all,\n\nWas wondering if anyone might be familiar with the reason for some unexpected \nbehaviour I'm seeing? \n(extend-type js\/jQuery\n  ILookup\n  (-lookup\n    ([this k] nil)\n    ([this k not-found] nil))\n  IFn\n  (-invoke\n    ([this k] (-lookup this k))\n    ([this k not-found] (-lookup this k not-found))))\n\nThis works fine against ClojureScript <= 1.8.40, but against >= 1.8.51 (up to \n1.9.293) triggers:\n`WARNING: Use of undeclared Var taoensso.lib.web\/jQuery`.\n\nI'll note a peculiarity: it's specifically the `-lookup` call that triggers the \ncompilation warning. Avoiding that call and extending to other protocols like \nICounted, etc. work as usual.\n\nFor example, the following will *not* produce a warning:\n\n(extend-type js\/jQuery\n  ILookup\n  (-lookup\n    ([this k] nil)\n    ([this k not-found] nil))\n  IFn\n  (-invoke\n    ([this k] nil #_(-lookup this k))\n    ([this k not-found] nil #_(-lookup this k not-found))))\n\nAm I possibly missing something simple? Couldn't see any obvious explanation in \nthe changelog at \nhttps:\/\/groups.google.com\/forum\/#!topic\/clojurescript\/fR1PVRXtzCI\n\nThanks, cheers!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Expected change in `extend-type` behaviour after Cljs 1.8.40? Peter Taoussanis Wed, 19 Oct 2016 23:30:13 -0700"},
{"body":"Quick update to confirm that the newly released ClojureScript 1.9.293 appears \nto resolve these compiler issue for me. \nCheers!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: INTERNAL COMPILER ERROR starting with Cljs >= 1.8.51 Peter Taoussanis Wed, 19 Oct 2016 22:56:58 -0700"},
{"body":"Works on our Cljs + React Native + om.next iOS app - thanks everyone \ninvolved! \nP.S.\nFor anyone using Om.next: make sure to bump to \"1.0.0-alpha47\".\n\nOn Wednesday, October 19, 2016 at 11:30:01 AM UTC-7, David Nolen wrote:\n>\n> ClojureScript, the Clojure compiler that emits JavaScript source code.\n>\n> README and source code: https:\/\/github.com\/clojure\/clojurescript\n>\n> Leiningen dependency information:\n>\n> [org.clojure\/clojurescript \"1.9.293\"]\n>\n> This release fixes a major issue with transit analysis caching where\n> files were leaked. It also includes a very significant compiler\n> enhancement thanks to Antonio Monteiro - you can now create\n> ClojureScript files without declaring a namespace. This opens the door\n> to making a much larger class of Clojure programs portable to\n> ClojureScript. `require` and other ns related macros are now available\n> granted that they appear at the top of the file. Please take careful\n> note that they are not functions and cannot be used in dynamic\n> situations. Still this eases writing simple scripts and the door is\n> now open to finally support data literals in a comprehensive way.\n>\n> We also bumped the Google Closure compiler dependency. Please note\n> that Closure Compiler has made breaking changes around JS module\n> processing so this version of ClojureScript is pinned to this latest\n> release.\n>\n> A huge thanks to the many people old and new that contributed to this\n> release.\n>\n> As always, feedback is most welcome!\n>\n> ## 1.9.293\n>\n> ### Enhancements\n> * CLJS-1346: Support require outside of ns\n>\n> ### Changes\n> * CLJS-1762: Bump Closure Compiler, refactor module support\n> * CLJS-1658: testing for protocol membership may return false positives\n> * CLJS-1536: REPL def symbol init collision\n> * CLJS-1805: Source map should take false\n> * CLJS-1804: Self-host: process namespace side-effects for new require \n> without NS\n> * CLJS-1803: Use new require capability in REPLs\n> * CLJS-1796: Measure Google Closure specific optimization time\n> * CLJS-1782: Self-host: allow namespaces to require their own macros\n> * CLJS-1563: :source-map option to cljs.build.api\/build should take nil\n> * CLJS-1785: Warn on reference to js\/foo shadowed by local binding\n>\n> ### Fixes\n> * make String an implicit ns like Math. revert char? and clarify \n> docstring. add unit tests for char?\n> * fix cljs.spec.test\/check docstring\n> * CLJS-1826: Self-host: load-deps doesn't honor `:reload` and `reload-all`\n> * CLJS-1825: :source-map error when passing `false` under simple \n> optimizations\n> * CLJS-1821: `add-preloads` should only touch sources if `:preloads` \n> option specified\n> * CLJS-1814: Move docstrings for require, etc. from `cljs.repl` to their \n> new definitions in `cljs.core`\n> * CLJS-1809: Add 0\/1 arity to `into`\n> * CLJS-1824: transit cache feature leaks files\n> * CLJS-1294: Let macroexpand(-1) accept any quoted argument.\n> * CLJS-1818: (hash false) returns different value from Clojure\n> * CLJS-1817: Strange result when assoc'ing 0 to persistent hash map\n> * CLJS-1815: Fix failing analyzer tests\n> * follow-up on CLJS-460 defmulti ignores optional :hierarchy argument\n> * CLJS-1807: Better error messages for `ns*` calls\n> * CLJS-1802: Generated namespaces should be of the form \n> `cljs.user.fileXXXX`\n> * CLJ-1935: Use multimethod dispatch value method lookup to take \n> hierarchies into account in multi-spec\n> * CLJS-1682 :foreign-libs with module conversion does not works properly \n> if it is used form deps.cljs\n> * CLJS-1710: spec\/double-in not implemented\n> * CLJS-1787: Make cljs.spec explain pluggable\n> * CLJS-1781: Add cljs.hash-map-test to self-parity tests\n> * CLJS-1788: Port CLJ-2004: include retag in multi-spec form\n> * CLJS-1765: Empty iterator for hash maps with nil key\n> * CLJS-1784: nth doesn't throw on strings or arrays\n> * CLJS-1773: Self-host: Don't resolve unqualified symbols \/ keywords with \n> $macros\n> * CLJS-1770: goog-defines broken for integers\n> * CLJS-1600: Destructuring defprotocol fn args causes defrecord impls to \n> silently fail\n> * CLJS-1335: resolve-macro-var: information missing for macros\n> * CLJS-1633: Improve error associated with invalid foreign-libs :file path\n> * CLJS-1775: `get` with `nil` returns as if `get` with `0`\n> * CLJS-1780: Records without extmaps fail to iterate\n> * CLJS-1774: Self-host: Report filenames in warns in test-self-parity\n> * CLJS-1779: keyword 2-arity constructor accepts anything for both \n> parameters which leads to different hashing\n>\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: ANN: ClojureScript 1.9.293 Rangel Spasov Wed, 19 Oct 2016 14:27:06 -0700"},
{"body":"ClojureScript, the Clojure compiler that emits JavaScript source code.\n\nREADME and source code: https:\/\/github.com\/clojure\/clojurescript \nLeiningen dependency information:\n\n[org.clojure\/clojurescript \"1.9.293\"]\n\nThis release fixes a major issue with transit analysis caching where\nfiles were leaked. It also includes a very significant compiler\nenhancement thanks to Antonio Monteiro - you can now create\nClojureScript files without declaring a namespace. This opens the door\nto making a much larger class of Clojure programs portable to\nClojureScript. `require` and other ns related macros are now available\ngranted that they appear at the top of the file. Please take careful\nnote that they are not functions and cannot be used in dynamic\nsituations. Still this eases writing simple scripts and the door is\nnow open to finally support data literals in a comprehensive way.\n\nWe also bumped the Google Closure compiler dependency. Please note\nthat Closure Compiler has made breaking changes around JS module\nprocessing so this version of ClojureScript is pinned to this latest\nrelease.\n\nA huge thanks to the many people old and new that contributed to this\nrelease.\n\nAs always, feedback is most welcome!\n\n## 1.9.293\n\n### Enhancements\n* CLJS-1346: Support require outside of ns\n\n### Changes\n* CLJS-1762: Bump Closure Compiler, refactor module support\n* CLJS-1658: testing for protocol membership may return false positives\n* CLJS-1536: REPL def symbol init collision\n* CLJS-1805: Source map should take false\n* CLJS-1804: Self-host: process namespace side-effects for new require\nwithout NS\n* CLJS-1803: Use new require capability in REPLs\n* CLJS-1796: Measure Google Closure specific optimization time\n* CLJS-1782: Self-host: allow namespaces to require their own macros\n* CLJS-1563: :source-map option to cljs.build.api\/build should take nil\n* CLJS-1785: Warn on reference to js\/foo shadowed by local binding\n\n### Fixes\n* make String an implicit ns like Math. revert char? and clarify docstring.\nadd unit tests for char?\n* fix cljs.spec.test\/check docstring\n* CLJS-1826: Self-host: load-deps doesn't honor `:reload` and `reload-all`\n* CLJS-1825: :source-map error when passing `false` under simple\noptimizations\n* CLJS-1821: `add-preloads` should only touch sources if `:preloads` option\nspecified\n* CLJS-1814: Move docstrings for require, etc. from `cljs.repl` to their\nnew definitions in `cljs.core`\n* CLJS-1809: Add 0\/1 arity to `into`\n* CLJS-1824: transit cache feature leaks files\n* CLJS-1294: Let macroexpand(-1) accept any quoted argument.\n* CLJS-1818: (hash false) returns different value from Clojure\n* CLJS-1817: Strange result when assoc'ing 0 to persistent hash map\n* CLJS-1815: Fix failing analyzer tests\n* follow-up on CLJS-460 defmulti ignores optional :hierarchy argument\n* CLJS-1807: Better error messages for `ns*` calls\n* CLJS-1802: Generated namespaces should be of the form `cljs.user.fileXXXX`\n* CLJ-1935: Use multimethod dispatch value method lookup to take\nhierarchies into account in multi-spec\n* CLJS-1682 :foreign-libs with module conversion does not works properly if\nit is used form deps.cljs\n* CLJS-1710: spec\/double-in not implemented\n* CLJS-1787: Make cljs.spec explain pluggable\n* CLJS-1781: Add cljs.hash-map-test to self-parity tests\n* CLJS-1788: Port CLJ-2004: include retag in multi-spec form\n* CLJS-1765: Empty iterator for hash maps with nil key\n* CLJS-1784: nth doesn't throw on strings or arrays\n* CLJS-1773: Self-host: Don't resolve unqualified symbols \/ keywords with\n$macros\n* CLJS-1770: goog-defines broken for integers\n* CLJS-1600: Destructuring defprotocol fn args causes defrecord impls to\nsilently fail\n* CLJS-1335: resolve-macro-var: information missing for macros\n* CLJS-1633: Improve error associated with invalid foreign-libs :file path\n* CLJS-1775: `get` with `nil` returns as if `get` with `0`\n* CLJS-1780: Records without extmaps fail to iterate\n* CLJS-1774: Self-host: Report filenames in warns in test-self-parity\n* CLJS-1779: keyword 2-arity constructor accepts anything for both\nparameters which leads to different hashing\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] ANN: ClojureScript 1.9.293 David Nolen Wed, 19 Oct 2016 11:30:06 -0700"},
{"body":"On Thursday, 4 August 2016 18:10:47 UTC+1, Gary Johnson  wrote:\n> Hi Dviius,\n> \n> You'll need to share your build.boot with us to get any detailed help. \n> However, looking at this error message, I'd say your \"boot dev\" task is \n> expecting to find the cljsjs.semantic-ui namespace as a CLJ file, when it is, \n> in fact, a CLJS file.\n>  \n> I just tried building a dummy project that includes this package and requires \n> its namespace without any problems. My project structure looked like this:\n> \n> .\n> \u251c\u2500\u2500 boot.properties\n> \u251c\u2500\u2500 build.boot\n> \u2514\u2500\u2500 src\n>     \u2514\u2500\u2500 semantic_ui_test\n>         \u2514\u2500\u2500 core.cljs\n> \n> Here's boot.properties:\n> \n> BOOT_CLOJURE_NAME=org.clojure\/clojure\n> BOOT_CLOJURE_VERSION=1.7.0\n> BOOT_VERSION=2.6.0\n> \n> Here's build.boot:\n> \n> (set-env!\n>  :dependencies '[[org.clojure\/clojure       \"1.9.0-alpha10\"]\n>                  [org.clojure\/clojurescript \"1.9.89\"]\n>                  [cljsjs\/semantic-ui        \"2.1.8-0\"]\n>                  [com.cemerick\/piggieback   \"0.2.1\" :scope \"test\"]])\n> \n> Here's core.cljs:\n> \n> (ns semantic-ui-test.core\n>   (:require [cljsjs.semantic-ui :as sem]))\n> \n> (defn try-me []\n>   (println \"Welcome to this project!\"))\n> \n> Opening core.cljs in Emacs and launching M-x cider-jack-in-clojurescript, \n> opens up a regular clojure REPL and a clojurescript (Rhino) REPL. Loading \n> core.cljs into the clojurescript REPL works without errors for me.\n> \n> So, as I said, in order to track down your problem, you'll need to share your \n> build.boot configuration (particularly so we can see your \"boot dev\" task).\n> \n> Good luck,\n>   Gary \nThanks for your reply, and this is my build.boot file:\n\n(set-env!\n  :dependencies '[\n                  [adzerk\/boot-cljs          \"1.7.228-1\"]\n                  [adzerk\/boot-reload        \"0.4.7\"]\n                  [cljsjs\/react-burger-menu \"1.9.9-0\"]\n                  [uk.org.russet\/tawny-owl \"1.5.0\"]\n                  [compojure                 \"1.5.0\"]\n                  [hoplon\/boot-hoplon        \"0.1.13\"]\n                  [hoplon\/castra             \"3.0.0-SNAPSHOT\"]\n                  [hoplon\/hoplon             \"6.0.0-alpha13\"]\n                  [org.clojure\/clojure \"1.9.0-alpha10\"]\n                  [org.clojure\/clojurescript \"1.8.40\"]\n                  [seancorfield\/boot-expectations \"1.0.11\"]\n                  [pandeiro\/boot-http        \"0.7.3\"]\n                  [ring                      \"1.6.0-beta4\"]\n                  [ring\/ring-core \"1.6.0-beta5\"]\n                  [ring\/ring-defaults        \"0.2.0\"]]\n\n  :resource-paths #{\"assets\"  \"src\/clj\"}\n  :source-paths   #{\"src\/cljs\" \"src\/hl\"})\n\n(require\n '[adzerk.boot-cljs      :refer [cljs]]\n'[adzerk.boot-reload    :refer [reload]]\n  '[hoplon.boot-hoplon    :refer [hoplon prerender]]\n  '[pandeiro.boot-http    :refer [serve]])\n\n(deftask run\n  \"Run the project.\"\n  [a args ARG [str] \"the arguments for the application.\"]\n  (require '[coreobjectdesign.core :as app])\n  (apply (resolve 'app\/-main) args))\n\n\n(deftask dev\n  \"Build coreobjectdesign for local development.\"\n  []\n  (comp\n    (serve\n      :port    8000\n      :handler 'coreobjectdesign.handler\/app\n      :reload  true)\n    (watch)\n    (speak)\n    (hoplon)\n    (reload)\n    (cljs)))\n\n(deftask prod\n  \"Build coreobjectdesign for production deployment.\"\n  []\n  (comp\n    (hoplon)\n    (cljs :optimizations :advanced)\n    (prerender)))\n\n(deftask make-war\n  \"Build a war for deployment\"\n  []\n  (comp (hoplon)\n        (cljs :optimizations :advanced)\n        (uber :as-jars true)\n        (web :serve 'coreobjectdesign.domain\/montology)\n        (war)))\n\n\n\nI should add that this now works (apart from a build WARNING: boolean? already \nrefers to: #'clojure.core\/boolean? in namespace: cljs.util, being replaced by: \n#'cljs.util\/boolean?)\n\nMy real struggle is in writing the clojurescript function to instantiate and \ndisplay a menu. The only example is in javascript, and I don't know how to \ntransform it.\n\nAny clues would be appreciated.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Cljsjs & boot problem - Dviius Wed, 19 Oct 2016 09:18:12 -0700"},
{"body":"And the signature of ES6ModuleLoader changed from\n public ES6ModuleLoader(List<String> moduleRoots, Iterable<CompilerInput> \ninputs)\nin v20160315\nto\n public ES6ModuleLoader(AbstractCompiler compiler,\n      List<String> moduleRoots, Iterable<CompilerInput> inputs)\nin v20160517 \nP\n> On 19 Oct 2016, at 7:20 pm, Peter B. West <peter.b.w...@gmail.com> wrote:\n> \n> Provided that the compiler version is later than July 23.\n> \n>> On 19 Oct 2016, at 7:15 pm, Peter B. West <peter.b.w...@gmail.com> wrote:\n>> \n>> ES6ModuleLoader disappeared a while ago.\n>> \n>> https:\/\/github.com\/google\/closure-compiler\/commit\/77805574dbdf21a5526b10a4c1fd866c0144dbba\n>> \n>> That would explain the\n>> No matching ctor found for class com.google.javascript.jscomp.ES6ModuleLoader\n>> error.\n>> \n>> \u2014\n>> Peter West\n>> p...@pbw.id.au\n>> \u201cEvery one to whom much is given, of him will much be required\u2026\u201d\n>> \n>>> On 19 Oct 2016, at 6:43 pm, Peter Taoussanis <ptaoussa...@gmail.com> wrote:\n>>> \n>>> Thanks for the input Thomas, Daniel!\n>>> \n>>> Have ruled out dep conflicts, and only have a single extern that I've had \n>>> around for forever (jquery).\n>>> \n>>> Next step might be a bisect, but honestly not urgent enough to go to the \n>>> effort - especially if (as it looks) I might be the only one experiencing a \n>>> problem atm.\n>>> \n>>> Will see if something changes over the next few Cljs or Closure releases.\n>>> \n>>> For example, notice that this seems to have just been committed? - \n>>> https:\/\/github.com\/clojure\/clojurescript\/commit\/732034bc8cb7e356b211c5d2b88a7af94ba184e5\n>>> \n>>> Will ping here if I have any updates to report.\n>>> \n>>> Cheers :-)\n>>> \n>>> -- \n>>> Note that posts from new members are moderated - please be patient with \n>>> your first post.\n>>> --- \n>>> You received this message because you are subscribed to the Google Groups \n>>> \"ClojureScript\" group.\n>>> To unsubscribe from this group and stop receiving emails from it, send an \n>>> email to clojurescript+unsubscr...@googlegroups.com.\n>>> To post to this group, send email to clojurescript@googlegroups.com.\n>>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>> \n>> \n>> \n> \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] INTERNAL COMPILER ERROR starting with Cljs >= 1.8.51 Peter B. West Wed, 19 Oct 2016 02:28:09 -0700"},
{"body":"Provided that the compiler version is later than July 23.\n\n> On 19 Oct 2016, at 7:15 pm, Peter B. West <peter.b.w...@gmail.com> wrote:\n> \n> ES6ModuleLoader disappeared a while ago.\n> \n> https:\/\/github.com\/google\/closure-compiler\/commit\/77805574dbdf21a5526b10a4c1fd866c0144dbba\n> \n> That would explain the\n> No matching ctor found for class com.google.javascript.jscomp.ES6ModuleLoader\n> error.\n> \n> \u2014\n> Peter West\n> p...@pbw.id.au\n> \u201cEvery one to whom much is given, of him will much be required\u2026\u201d\n> \n>> On 19 Oct 2016, at 6:43 pm, Peter Taoussanis <ptaoussa...@gmail.com> wrote:\n>> \n>> Thanks for the input Thomas, Daniel!\n>> \n>> Have ruled out dep conflicts, and only have a single extern that I've had \n>> around for forever (jquery).\n>> \n>> Next step might be a bisect, but honestly not urgent enough to go to the \n>> effort - especially if (as it looks) I might be the only one experiencing a \n>> problem atm.\n>> \n>> Will see if something changes over the next few Cljs or Closure releases.\n>> \n>> For example, notice that this seems to have just been committed? - \n>> https:\/\/github.com\/clojure\/clojurescript\/commit\/732034bc8cb7e356b211c5d2b88a7af94ba184e5\n>> \n>> Will ping here if I have any updates to report.\n>> \n>> Cheers :-)\n>> \n>> -- \n>> Note that posts from new members are moderated - please be patient with your \n>> first post.\n>> --- \n>> You received this message because you are subscribed to the Google Groups \n>> \"ClojureScript\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an \n>> email to clojurescript+unsubscr...@googlegroups.com.\n>> To post to this group, send email to clojurescript@googlegroups.com.\n>> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n> \n> \n> \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] INTERNAL COMPILER ERROR starting with Cljs >= 1.8.51 Peter B. West Wed, 19 Oct 2016 02:21:08 -0700"},
{"body":"ES6ModuleLoader disappeared a while ago.\n\nhttps:\/\/github.com\/google\/closure-compiler\/commit\/77805574dbdf21a5526b10a4c1fd866c0144dbba \nThat would explain the\nNo matching ctor found for class com.google.javascript.jscomp.ES6ModuleLoader\nerror.\n\n\u2014\nPeter West\np...@pbw.id.au\n\u201cEvery one to whom much is given, of him will much be required\u2026\u201d\n\n> On 19 Oct 2016, at 6:43 pm, Peter Taoussanis <ptaoussa...@gmail.com> wrote:\n> \n> Thanks for the input Thomas, Daniel!\n> \n> Have ruled out dep conflicts, and only have a single extern that I've had \n> around for forever (jquery).\n> \n> Next step might be a bisect, but honestly not urgent enough to go to the \n> effort - especially if (as it looks) I might be the only one experiencing a \n> problem atm.\n> \n> Will see if something changes over the next few Cljs or Closure releases.\n> \n> For example, notice that this seems to have just been committed? - \n> https:\/\/github.com\/clojure\/clojurescript\/commit\/732034bc8cb7e356b211c5d2b88a7af94ba184e5\n> \n> Will ping here if I have any updates to report.\n> \n> Cheers :-)\n> \n> -- \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> --- \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] INTERNAL COMPILER ERROR starting with Cljs >= 1.8.51 Peter B. West Wed, 19 Oct 2016 02:15:35 -0700"},
{"body":"Thanks for the input Thomas, Daniel!\n\nHave ruled out dep conflicts, and only have a single extern that I've had \naround for forever (jquery). \nNext step might be a bisect, but honestly not urgent enough to go to the effort \n- especially if (as it looks) I might be the only one experiencing a problem \natm.\n\nWill see if something changes over the next few Cljs or Closure releases.\n\nFor example, notice that this seems to have just been committed? - \nhttps:\/\/github.com\/clojure\/clojurescript\/commit\/732034bc8cb7e356b211c5d2b88a7af94ba184e5\n\nWill ping here if I have any updates to report.\n\nCheers :-)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: INTERNAL COMPILER ERROR starting with Cljs >= 1.8.51 Peter Taoussanis Wed, 19 Oct 2016 01:44:21 -0700"},
{"body":"Hi Peter\n\nI've had good luck in the past doing a git bisect on ClojureScript to track\ndown exactly which commit introduced the bug. That might help in this case? \nFor those who haven't used git bisect, you give it a good commit and a bad\ncommit. git will then do a binary search through the commits where you mark\neach one as good or bad and it will eventually tell you where the bug was\nintroduced. If you can give it a shell command which passes or fails the\ntest, then it can do this process automatically.\nOn Wed, 19 Oct 2016 at 5:07 AM, Thomas Heller <th.hel...@gmail.com> wrote:\n\n> Just guessing but\n>\n>\n> com.google.javascript.jscomp.VarCheck$RedeclarationCheckHandler.onRedeclaration(VarCheck.java:380)\n>\n> This looks like you maybe have another extern somewhere that tries to\n> declare the coordorigin property. Might be on Object.prototype.coordorigin\n> as this would conflict with Element as well. Do you have many other (not\n> default) externs active?\n>\n> Did you check \"lein deps :tree\" for any conflicts that may mix up the\n> closure compiler deps?\n>\n> \/thomas\n>\n> On Tuesday, October 18, 2016 at 5:15:18 PM UTC+2, Peter Taoussanis wrote:\n> > Hi David, thanks a lot for the quick reply!\n> >\n> > Tried sampling a few newer + older versions of\n> `com.google.javascript\/closure-compiler` against ClojureScript 1.9.75\n> without much luck:\n> >\n> > v20160713 - No matching ctor found for class\n> com.google.javascript.jscomp.ES6ModuleLoader\n> > v20160619 - No matching ctor found for class\n> com.google.javascript.jscomp.ES6ModuleLoader\n> > v20160517 - No matching ctor found for class\n> com.google.javascript.jscomp.ES6ModuleLoader\n> > v20160315 - INTERNAL COMPILER ERROR [1]\n> > v20160208 - INTERNAL COMPILER ERROR\n> > v20151216 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be\n> cast to java.lang.String [2]\n> > v20151015 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be\n> cast to java.lang.String\n> > v20150920 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be\n> cast to java.lang.String\n> > v20150729 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be\n> cast to java.lang.String\n> >\n> > [1]: Default for Cljs 1.9.75\n> > [2]: Default for Cljs 1.8.40\n> >\n> > That is: newer versions seem to fail with \"No matching ctor found for\n> class com.google.javascript.jscomp.ES6ModuleLoader\" and older versions with\n> \"No matching ctor found for class\n> com.google.javascript.jscomp.ES6ModuleLoader\".\n> >\n> > For these tests, I'm just using the following Lein config:\n> >\n> > [com.google.javascript\/closure-compiler <version>]\n> > [org.clojure\/clojurescript \"1.9.75\" :exclusions\n> [com.google.javascript\/closure-compiler]]\n> >\n> > Should I perhaps be doing this some other way?\n> >\n> > (No urgency on this btw, happy to keep using Cljs v1.8.40 for now)\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] INTERNAL COMPILER ERROR starting with Cljs >= 1.8.51 Daniel Compton Tue, 18 Oct 2016 11:12:07 -0700"},
{"body":"Just guessing but\n\ncom.google.javascript.jscomp.VarCheck$RedeclarationCheckHandler.onRedeclaration(VarCheck.java:380) \nThis looks like you maybe have another extern somewhere that tries to declare \nthe coordorigin property. Might be on Object.prototype.coordorigin as this \nwould conflict with Element as well. Do you have many other (not default) \nexterns active?\n\nDid you check \"lein deps :tree\" for any conflicts that may mix up the closure \ncompiler deps?\n\n\/thomas\n\nOn Tuesday, October 18, 2016 at 5:15:18 PM UTC+2, Peter Taoussanis wrote:\n> Hi David, thanks a lot for the quick reply!\n> \n> Tried sampling a few newer + older versions of \n> `com.google.javascript\/closure-compiler` against ClojureScript 1.9.75 without \n> much luck:\n> \n> v20160713 - No matching ctor found for class \n> com.google.javascript.jscomp.ES6ModuleLoader\n> v20160619 - No matching ctor found for class \n> com.google.javascript.jscomp.ES6ModuleLoader\n> v20160517 - No matching ctor found for class \n> com.google.javascript.jscomp.ES6ModuleLoader\n> v20160315 - INTERNAL COMPILER ERROR [1]\n> v20160208 - INTERNAL COMPILER ERROR\n> v20151216 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be cast to \n> java.lang.String [2]\n> v20151015 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be cast to \n> java.lang.String\n> v20150920 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be cast to \n> java.lang.String\n> v20150729 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be cast to \n> java.lang.String\n> \n> [1]: Default for Cljs 1.9.75\n> [2]: Default for Cljs 1.8.40\n> \n> That is: newer versions seem to fail with \"No matching ctor found for class \n> com.google.javascript.jscomp.ES6ModuleLoader\" and older versions with \"No \n> matching ctor found for class com.google.javascript.jscomp.ES6ModuleLoader\".\n> \n> For these tests, I'm just using the following Lein config:\n> \n> [com.google.javascript\/closure-compiler <version>]\n> [org.clojure\/clojurescript \"1.9.75\" :exclusions \n> [com.google.javascript\/closure-compiler]]\n> \n> Should I perhaps be doing this some other way?\n> \n> (No urgency on this btw, happy to keep using Cljs v1.8.40 for now)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] INTERNAL COMPILER ERROR starting with Cljs >= 1.8.51 Thomas Heller Tue, 18 Oct 2016 09:08:21 -0700"},
{"body":"Hi David, thanks a lot for the quick reply!\n\nTried sampling a few newer + older versions of \n`com.google.javascript\/closure-compiler` against ClojureScript 1.9.75 without \nmuch luck: \nv20160713 - No matching ctor found for class \ncom.google.javascript.jscomp.ES6ModuleLoader\nv20160619 - No matching ctor found for class \ncom.google.javascript.jscomp.ES6ModuleLoader\nv20160517 - No matching ctor found for class \ncom.google.javascript.jscomp.ES6ModuleLoader\nv20160315 - INTERNAL COMPILER ERROR [1]\nv20160208 - INTERNAL COMPILER ERROR\nv20151216 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be cast to \njava.lang.String [2]\nv20151015 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be cast to \njava.lang.String\nv20150920 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be cast to \njava.lang.String\nv20150729 - java.lang.ClassCastException: sun.nio.cs.UTF_8 cannot be cast to \njava.lang.String\n\n[1]: Default for Cljs 1.9.75\n[2]: Default for Cljs 1.8.40\n\nThat is: newer versions seem to fail with \"No matching ctor found for class \ncom.google.javascript.jscomp.ES6ModuleLoader\" and older versions with \"No \nmatching ctor found for class com.google.javascript.jscomp.ES6ModuleLoader\".\n\nFor these tests, I'm just using the following Lein config:\n\n[com.google.javascript\/closure-compiler <version>]\n[org.clojure\/clojurescript \"1.9.75\" :exclusions \n[com.google.javascript\/closure-compiler]]\n\nShould I perhaps be doing this some other way?\n\n(No urgency on this btw, happy to keep using Cljs v1.8.40 for now)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] INTERNAL COMPILER ERROR starting with Cljs >= 1.8.51 Peter Taoussanis Tue, 18 Oct 2016 08:15:46 -0700"},
{"body":"2016-10-18 8:42 GMT+02:00 Daniel Compton <daniel.compton.li...@gmail.com>: \n> > I'd really think twice before requiring your users to insert matching\n> pairs of mutation in their code. It goes against the grain of clojure and\n> is error-prone.\n> > Why can\u2019t on-jsload (is that figwheel's?) just run the update within a\n> (binding [*warn-on-overwrite* false] ...)?\n>\n> The (simplified) structure of the Figwheel reload code is\n>\n> (do\n>   (before-jsload)\n>   (figwheel-reloads-code)\n>   (on-jsload))\n>\n> I would prefer to use binding, but Figwheel doesn\u2019t run it\u2019s reload within\n> the scope of my before-jsload function, so binding and with-redefs wouldn\u2019t\n> work here. I\u2019m not in love with the matching mutations, but I\u2019m not sure if\n> there\u2019s a better option? A PR to Figwheel is always possible, but this is a\n> fairly niche requirement, so I\u2019m hesitant to add more configuration to it.\n>\n\nMaybe you can get rid of load-time side-effects, such that a reload won't\ntrigger warnings, but only the main function, called by on-jsload, would?\n\nEven though, this is out of scope for re-frame and figwheel alone, some\nmore thoughts: Setting up the environment of your program doesn't seem like\nsuch a niche thing to me. Other use cases include reader tags, various\n(pretty-)print variables, ... The tricky part is finding an approach that\nworks across:\na) cljs classic (where the macro environment is clj)\nb) cljs self-hosted\nc) repls \/ dynamic loaders, like figwheel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] When to use dynamic vars in ClojureScript? Herwig Hochleitner Tue, 18 Oct 2016 07:04:58 -0700"},
{"body":"JHust looks like a Google Closure problem. We occasionally bump Google\nClosure and they occasionally introduce bugs. You might want to try more\nslightly older or slightly more recent versions of Google Closure. \nHTH,\nDavid\n\nOn Tue, Oct 18, 2016 at 8:53 AM, Peter Taoussanis <ptaoussa...@gmail.com>\nwrote:\n\n> Hi there!\n>\n> Would anyone possibly know where to start debugging this?\n>\n> I have a large codebase that compiles fine with ClojureScript <= 1.8.40.\n>\n> Starting from ClojureScript 1.8.51 (that is 1.8.51, 1.9.14, 1.9.76) I see:\n>\n> java.lang.RuntimeException: INTERNAL COMPILER ERROR.\n> Please report this problem.\n>\n> null\n>   Node(NAME Element): externs.zip\/\/browser\/ie_vml.js:29:0\n> Element.prototype.coordorigin;\n>   Parent(GETPROP): externs.zip\/\/browser\/ie_vml.js:29:0\n> Element.prototype.coordorigin;\n>\n>         at com.google.javascript.jscomp.VarCheck$\n> RedeclarationCheckHandler.onRedeclaration(VarCheck.java:380)\n>         at com.google.javascript.jscomp.Es6SyntacticScopeCreator.\n> declareVar(Es6SyntacticScopeCreator.java:262)\n>         at com.google.javascript.jscomp.Es6SyntacticScopeCreator.\n> declareLHS(Es6SyntacticScopeCreator.java:138)\n>         at com.google.javascript.jscomp.Es6SyntacticScopeCreator.scanVars(\n> Es6SyntacticScopeCreator.java:165)\n>         at com.google.javascript.jscomp.Es6SyntacticScopeCreator.scanVars(\n> Es6SyntacticScopeCreator.java:233)\n>         at com.google.javascript.jscomp.Es6SyntacticScopeCreator.scanVars(\n> Es6SyntacticScopeCreator.java:233)\n>         at com.google.javascript.jscomp.Es6SyntacticScopeCreator.scanRoot(\n> Es6SyntacticScopeCreator.java:120)\n>         at com.google.javascript.jscomp.Es6SyntacticScopeCreator.\n> createScope(Es6SyntacticScopeCreator.java:65)\n>         at com.google.javascript.jscomp.NodeTraversal.getScope(\n> NodeTraversal.java:787)\n>         at com.google.javascript.jscomp.VarCheck$\n> NameRefInExternsCheck.visit(VarCheck.java:287)\n>         at com.google.javascript.jscomp.NodeTraversal.traverseBranch(\n> NodeTraversal.java:623)\n>         at com.google.javascript.jscomp.NodeTraversal.traverseBranch(\n> NodeTraversal.java:617)\n>         at com.google.javascript.jscomp.NodeTraversal.traverseBranch(\n> NodeTraversal.java:617)\n>         at com.google.javascript.jscomp.NodeTraversal.traverseBranch(\n> NodeTraversal.java:617)\n>         at com.google.javascript.jscomp.NodeTraversal.traverseBranch(\n> NodeTraversal.java:617)\n>         at com.google.javascript.jscomp.NodeTraversal.traverseBranch(\n> NodeTraversal.java:617)\n>         at com.google.javascript.jscomp.NodeTraversal.traverse(\n> NodeTraversal.java:297)\n>         at com.google.javascript.jscomp.VarCheck.process(VarCheck.\n> java:138)\n>         at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.\n> process(PhaseOptimizer.java:285)\n>         at com.google.javascript.jscomp.PhaseOptimizer.process(\n> PhaseOptimizer.java:217)\n>         at com.google.javascript.jscomp.Compiler.check(Compiler.java:777)\n>         at com.google.javascript.jscomp.Compiler.compileInternal(\n> Compiler.java:693)\n>         at com.google.javascript.jscomp.Compiler.access$000(Compiler.\n> java:83)\n>         at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:651)\n>         at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:648)\n>         at com.google.javascript.jscomp.CompilerExecutor$2.call(\n> CompilerExecutor.java:93)\n>         at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n>         at java.util.concurrent.ThreadPoolExecutor.runWorker(\n> ThreadPoolExecutor.java:1142)\n>         at java.util.concurrent.ThreadPoolExecutor$Worker.run(\n> ThreadPoolExecutor.java:617)\n>         at java.lang.Thread.run(Thread.java:745)\n> Caused by: java.lang.NullPointerException\n>         ... 30 more\n> Subprocess failed\n>\n>\n> Any pointers would be welcome, thanks!\n>\n> Cheers :-)\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] INTERNAL COMPILER ERROR starting with Cljs >= 1.8.51 David Nolen Tue, 18 Oct 2016 06:11:05 -0700"},
{"body":"Hi there!\n\nWould anyone possibly know where to start debugging this? \nI have a large codebase that compiles fine with ClojureScript <= 1.8.40.\n\nStarting from ClojureScript 1.8.51 (that is 1.8.51, 1.9.14, 1.9.76) I see:\n\njava.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\n\nnull\n  Node(NAME Element): externs.zip\/\/browser\/ie_vml.js:29:0\nElement.prototype.coordorigin;\n  Parent(GETPROP): externs.zip\/\/browser\/ie_vml.js:29:0\nElement.prototype.coordorigin;\n\n        at \ncom.google.javascript.jscomp.VarCheck$RedeclarationCheckHandler.onRedeclaration(VarCheck.java:380)\n        at \ncom.google.javascript.jscomp.Es6SyntacticScopeCreator.declareVar(Es6SyntacticScopeCreator.java:262)\n        at \ncom.google.javascript.jscomp.Es6SyntacticScopeCreator.declareLHS(Es6SyntacticScopeCreator.java:138)\n        at \ncom.google.javascript.jscomp.Es6SyntacticScopeCreator.scanVars(Es6SyntacticScopeCreator.java:165)\n        at \ncom.google.javascript.jscomp.Es6SyntacticScopeCreator.scanVars(Es6SyntacticScopeCreator.java:233)\n        at \ncom.google.javascript.jscomp.Es6SyntacticScopeCreator.scanVars(Es6SyntacticScopeCreator.java:233)\n        at \ncom.google.javascript.jscomp.Es6SyntacticScopeCreator.scanRoot(Es6SyntacticScopeCreator.java:120)\n        at \ncom.google.javascript.jscomp.Es6SyntacticScopeCreator.createScope(Es6SyntacticScopeCreator.java:65)\n        at \ncom.google.javascript.jscomp.NodeTraversal.getScope(NodeTraversal.java:787)\n        at \ncom.google.javascript.jscomp.VarCheck$NameRefInExternsCheck.visit(VarCheck.java:287)\n        at \ncom.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:623)\n        at \ncom.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:617)\n        at \ncom.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:617)\n        at \ncom.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:617)\n        at \ncom.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:617)\n        at \ncom.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:617)\n        at \ncom.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:297)\n        at com.google.javascript.jscomp.VarCheck.process(VarCheck.java:138)\n        at \ncom.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:285)\n        at \ncom.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:217)\n        at com.google.javascript.jscomp.Compiler.check(Compiler.java:777)\n        at \ncom.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:693)\n        at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:83)\n        at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:651)\n        at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:648)\n        at \ncom.google.javascript.jscomp.CompilerExecutor$2.call(CompilerExecutor.java:93)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n        at \njava.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at \njava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.NullPointerException\n        ... 30 more\nSubprocess failed\n\n\nAny pointers would be welcome, thanks!\n\nCheers :-)\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] INTERNAL COMPILER ERROR starting with Cljs >= 1.8.51 Peter Taoussanis Tue, 18 Oct 2016 05:54:04 -0700"},
{"body":"> I'd really think twice before requiring your users to insert matching\npairs of mutation in their code. It goes against the grain of clojure and\nis error-prone.\n> Why can\u2019t on-jsload (is that figwheel's?) just run the update within a\n(binding [*warn-on-overwrite* false] ...)? \nThe (simplified) structure of the Figwheel reload code is\n\n(do\n  (before-jsload)\n  (figwheel-reloads-code)\n  (on-jsload))\n\nI would prefer to use binding, but Figwheel doesn\u2019t run it\u2019s reload within\nthe scope of my before-jsload function, so binding and with-redefs wouldn\u2019t\nwork here. I\u2019m not in love with the matching mutations, but I\u2019m not sure if\nthere\u2019s a better option? A PR to Figwheel is always possible, but this is a\nfairly niche requirement, so I\u2019m hesitant to add more configuration to it.\n\nOn Tue, Oct 18, 2016 at 11:15 AM Herwig Hochleitner <hhochleit...@gmail.com>\nwrote:\n\n> In clojure, set! can only be used on dynamic vars, that are currently\n> bound.\n> Apparently, clojurescript allows set! on root-bound vars, but I wouldn't\n> rely on that.\n> Your use case with matching set! pairs really has the semantics of just\n> calling def.\n> \u200bA much safer way to temporarily alter the root binding of a var (though\n> still prone to concurrency bugs), is with-redefs.\n>\n> I'd really think twice before requiring your users to insert matching\n> pairs of mutation in their code. It goes against the grain of clojure and\n> is error-prone.\n> Why can't on-jsload (is that figwheel's?) just run the update within a\n> (binding [*warn-on-overwrite* false] ...)?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] When to use dynamic vars in ClojureScript? Daniel Compton Mon, 17 Oct 2016 23:42:59 -0700"},
{"body":"In clojure, set! can only be used on dynamic vars, that are currently bound.\nApparently, clojurescript allows set! on root-bound vars, but I wouldn't\nrely on that.\nYour use case with matching set! pairs really has the semantics of just\ncalling def.\n\u200bA much safer way to temporarily alter the root binding of a var (though\nstill prone to concurrency bugs), is with-redefs. \nI'd really think twice before requiring your users to insert matching pairs\nof mutation in their code. It goes against the grain of clojure and is\nerror-prone.\nWhy can't on-jsload (is that figwheel's?) just run the update within a\n(binding [*warn-on-overwrite* false] ...)?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] When to use dynamic vars in ClojureScript? Herwig Hochleitner Mon, 17 Oct 2016 15:15:56 -0700"},
{"body":"When figwheel reloads re-frame code, there are some warnings that I would\nlike to turn off, as they are expected. \nIn the part of the code which logs a warning, I have defined\n**warn-on-overwrite** as a dynamic var and check if it is true before\nemitting a warning. In my figwheel config, I have :before-jsload and\n:on-jsload keys. The :before-jsload function set!\u2019s *warn-on-overwrite* to\nfalse, and the :on-jsload function set!\u2019s *warn-on-overwrite to true.\n\nShould I be:\n\n   - Putting earmuffs around the var\n   - Marking it as ^:dynamic or not\n   - Using an atom instead?\n\nA var feels better than an atom here, but I don\u2019t have a strong\njustification for that.\n\nCan someone give some guidance on when to use ^:dynamic in ClojureScript\ncode? I can see it should be used in conjunction with binding, but I\u2019m not\nsure about with set!. This is going to be called by users of the re-frame\nframework if that makes a difference?\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] When to use dynamic vars in ClojureScript? Daniel Compton Sun, 16 Oct 2016 18:27:07 -0700"},
{"body":"On Wednesday, October 12, 2016 at 8:30:06 AM UTC-7, Hector Lucero wrote:\n\n> Is there a way to have jdbc and mysql work with ClojureScript?  How can you \n> get to a mysql connection and display selected records from a mysql table \n> with ClojureScript?  \nFirst off welcome to clojure!\n\nSo clojurescript compiles down to javascript which means it runs on a \njavascript engine, either in a web browser or on the server side with nodejs. \nJDBC is what applications running on the java virtual machine(JVM) use to \naccess sql databases. This means that you're not really able to use JDBC with \nclojurescript (unless you try to run clojurescript in the JVM which while \npossible I don't know much about and is not common at all). \n\nHere are 2 ways to use clojure\/clojurescript and access a sql database:\n\n1. Use clojure+jvm+jdbc on the server side to access mysql, and return json or \nedn to the browser which is running clojurescript. This is pretty well \ndocumented, and is how most all applications are constructed.\n\nThe luminus web framework has lots of great docs on how to accomplish this.\nhttp:\/\/www.luminusweb.net\/\n\n\n2. If you would like to run clojurescript on the server side, you should be \nable to use the same libraries nodejs uses to access mysql(non jdbc), and it \nshould be usable from clojurescript. That said I don't know much about running \nclojurescript on the server side, and I don't know if it's well documented how \nto accomplish this.\n\n\n &nbsp;\n\n\n> It seems as though the only database you can use is datomic or just an \n> atom....  I am completely new to ClojureScript and would like some help \n> concerning this issue.\n\nNot at all clojure\/clojurescript are perfect fits for talking to mysql and \npostgresql and I would say most all applications use sql databases with clojure.\n\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Using mySQL with clojurescript mike Thu, 13 Oct 2016 09:14:53 -0700"},
{"body":"I am also completely new to cljs,\nand more generally how to import java classes in a js repl on the jvm\nis an interesting question as I have only been running it in the browser so far. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Using mySQL with clojurescript Ikuru Kanuma Wed, 12 Oct 2016 18:28:06 -0700"},
{"body":"Is there a way to have jdbc and mysql work with ClojureScript?  How can you get \nto a mysql connection and display selected records from a mysql table with \nClojureScript?  It seems as though the only database you can use is datomic or \njust an atom....  I am completely new to ClojureScript and would like some help \nconcerning this issue. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Using mySQL with clojurescript Hector Lucero Wed, 12 Oct 2016 08:30:30 -0700"},
{"body":"On Monday, October 10, 2016 at 9:29:35 AM UTC-7, Yehonathan Sharvit wrote:\n> https:\/\/github.com\/viebel\/codox-klipse-theme\n> \n> codox\u00a0is a great tool for generating API documentation from Clojure or \n> ClojureScript source code. \nThis is very cool stuff thanks!\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: [ANN] codox-klipse-theme 0.0.1- Clojure[script] automatically generated live documentation Andrea Richiardi Tue, 11 Oct 2016 10:14:37 -0700"},
{"body":"https:\/\/github.com\/viebel\/codox-klipse-theme \ncodox <https:\/\/github.com\/weavejester\/codox> is a great tool for generating\nAPI documentation from Clojure or ClojureScript source code.\n\nWith the klipse theme for codox, you can make your codox documentation live\nand interactive powered by the KLIPSE plugin\n<https:\/\/github.com\/viebel\/klipse>.\n\nIn addition to words that describe your functions, now you can add interactive\ncode examples. It will be much easier for your users to understand how to\nuse your functions.\n\nhttps:\/\/github.com\/viebel\/codox-klipse-theme\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] [ANN] codox-klipse-theme 0.0.1- Clojure[script] automatically generated live documentation Yehonathan Sharvit Mon, 10 Oct 2016 09:30:05 -0700"},
{"body":"On Thursday, October 6, 2016 at 3:28:13 PM UTC-4, Daniel Compton wrote:\n> Hi Luke\n> \n> \n> You\u2019re spot on here, and this is something that took me a little while to \n> figure out as well. Sourcemaps don\u2019t necessarily have to include the cljs\/js \n> sources, they just have a mapping from the generated JS to the original \n> source file. For a browser (or exception tracker) to be able to show you the \n> original file, it needs to have access to it. In development this isn\u2019t \n> usually a problem, but in production, you either need to upload your original \n> CLJS files to your webserver along with main.js and main.js.map, or you can \n> send them all to Raygun separately. As you\u2019ve mentioned, neither of those \n> options are particularly great.\n> \n> \n> Luckily, the source map spec allows for providing sourcesContent in the \n> sourcemap file. This includes the content of all of the original cljs \n> sources, which will give you one (very large) sourcemap file you could upload \n> to your exception tracker. There is an open ticket on the closure-compiler to \n> support sourcesContent for sourcemaps. It looks like this is 95% of the way \n> there to being usable in the Closure Compiler, and is probably already usable \n> from the ClojureScript compiler, it just needs someone to do the work to \n> integrate it. CLJS-658\u00a0is some prior art on this, and CLJS-1755\u00a0is the ticket \n> I created to track this.\n> \n> \n> On Fri, Oct 7, 2016 at 5:10 AM Luke Horton <luke.w...@gmail.com> wrote:\n> Hi guys,\n> \n> \n> \n> I'm having a misunderstanding with sourcemaps, and I was hoping someone can \n> clarify things.\n> \n> \n> \n> If I compile in :advanced mode, I get a single main.js file and the main.out \n> directory containing both js and cljs versions of my application code.\n> \n> \n> \n> If I add a :source-map \"main.js.map\" configuration, I get the main.js file \n> with the correct \/\/# sourceMapUrl=main.js.map directive appended, and the \n> main.js.map file itself.\n> \n> \n> \n> If I serve \/build which contains main.js, main.js.map, as well as the output \n> main.out directory, sourcemaps work perfectly.\n> \n> \n> \n> If I serve only main.js and main.js.map (and don't include main.out inside \n> \/build), the application still runs fine. However, the sourcemaps no longer \n> work.\n> \n> \n> \n> I guess this means I don't understand how the sourcemaps are linked.\n> \n> \n> \n> If I look at the generated map, I see the sources array contains mostly links \n> pointing to main.out, such as [\"main.out\/foo\/bar.js\", \n> \"main.out\/foo\/bar.cljs\"].\n> \n> \n> \n> Does this mean, then, that the entire main.out directory must be available \n> when serving main.js in order for main.js.map to correctly map to source \n> files?\n> \n> \n> \n> This makes things like sentry.io and raygun much more complicated to \n> configure correctly. For example, sentry.io allows you to pre-upload source \n> files (minified) and sourcemaps. If an error is encountered, rather than \n> running a GET \/some-source.js.map (which could be huge and therefor slow to \n> respond), it will reference the already uploaded map file to find the correct \n> line\/col of the error.\n> \n> \n> \n> For cljs apps to work properly with similar error capture tools, we would \n> have to pre-upload every single file (both js and cljs) inside main.out OR \n> expose main.out\/* so that an error would trigger GET main.js.map -> \n> main.out\/foo\/bar.js -> main.out\/foo\/bar.cljs.\n> \n> \n> \n> Is this correct, or am I going about this all wrong?\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> \n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n> \n> \n> -- \n> \n> \n> \n> \n> \n> Daniel \n\nThanks for the great reply Daniel. As I continued to search for answers it felt \nlike I was following in your footsteps a-la \nhttps:\/\/github.com\/google\/closure-compiler\/issues\/1890\/\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] sourcemaps require main.out? Luke Horton Thu, 06 Oct 2016 12:34:39 -0700"},
{"body":"Hi Luke\n\nYou\u2019re spot on here, and this is something that took me a little while to\nfigure out as well. Sourcemaps don\u2019t necessarily have to include the\ncljs\/js sources, they just have a mapping from the generated JS to the\noriginal source file. For a browser (or exception tracker) to be able to\nshow you the original file, it needs to have access to it. In development\nthis isn\u2019t usually a problem, but in production, you either need to upload\nyour original CLJS files to your webserver along with main.js and\nmain.js.map, or you can send them all to Raygun separately. As you\u2019ve\nmentioned, neither of those options are particularly great. \nLuckily, the source map spec allows for providing sourcesContent in the\nsourcemap file. This includes the content of all of the original cljs\nsources, which will give you one (very large) sourcemap file you could\nupload to your exception tracker. There is an open ticket on the\nclosure-compiler to support sourcesContent for sourcemaps\n<https:\/\/github.com\/google\/closure-compiler\/issues\/1890>. It looks like\nthis is 95% of the way there to being usable in the Closure Compiler, and\nis probably already usable from the ClojureScript compiler, it just needs\nsomeone to do the work to integrate it. CLJS-658\n<http:\/\/dev.clojure.org\/jira\/browse\/CLJS-658> is some prior art on this,\nand CLJS-1755 <http:\/\/dev.clojure.org\/jira\/browse\/CLJS-1755> is the ticket\nI created to track this.\n\nOn Fri, Oct 7, 2016 at 5:10 AM Luke Horton <luke.w.hor...@gmail.com> wrote:\n\n> Hi guys,\n>\n> I'm having a misunderstanding with sourcemaps, and I was hoping someone\n> can clarify things.\n>\n> If I compile in :advanced mode, I get a single main.js file and the\n> main.out directory containing both js and cljs versions of my application\n> code.\n>\n> If I add a :source-map \"main.js.map\" configuration, I get the main.js file\n> with the correct \/\/# sourceMapUrl=main.js.map directive appended, and the\n> main.js.map file itself.\n>\n> If I serve \/build which contains main.js, main.js.map, as well as the\n> output main.out directory, sourcemaps work perfectly.\n>\n> If I serve only main.js and main.js.map (and don't include main.out inside\n> \/build), the application still runs fine. However, the sourcemaps no longer\n> work.\n>\n> I guess this means I don't understand how the sourcemaps are linked.\n>\n> If I look at the generated map, I see the sources array contains mostly\n> links pointing to main.out, such as [\"main.out\/foo\/bar.js\",\n> \"main.out\/foo\/bar.cljs\"].\n>\n> Does this mean, then, that the entire main.out directory must be available\n> when serving main.js in order for main.js.map to correctly map to source\n> files?\n>\n> This makes things like sentry.io and raygun much more complicated to\n> configure correctly. For example, sentry.io allows you to pre-upload\n> source files (minified) and sourcemaps. If an error is encountered, rather\n> than running a GET \/some-source.js.map (which could be huge and therefor\n> slow to respond), it will reference the already uploaded map file to find\n> the correct line\/col of the error.\n>\n> For cljs apps to work properly with similar error capture tools, we would\n> have to pre-upload every single file (both js and cljs) inside main.out OR\n> expose main.out\/* so that an error would trigger GET main.js.map ->\n> main.out\/foo\/bar.js -> main.out\/foo\/bar.cljs.\n>\n> Is this correct, or am I going about this all wrong?\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n-- \n\nDaniel\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] sourcemaps require main.out? Daniel Compton Thu, 06 Oct 2016 12:28:17 -0700"},
{"body":"Hi guys,\n\nI'm having a misunderstanding with sourcemaps, and I was hoping someone can \nclarify things. \nIf I compile in :advanced mode, I get a single main.js file and the main.out \ndirectory containing both js and cljs versions of my application code.\n\nIf I add a :source-map \"main.js.map\" configuration, I get the main.js file with \nthe correct \/\/# sourceMapUrl=main.js.map directive appended, and the \nmain.js.map file itself.\n\nIf I serve \/build which contains main.js, main.js.map, as well as the output \nmain.out directory, sourcemaps work perfectly.\n\nIf I serve only main.js and main.js.map (and don't include main.out inside \n\/build), the application still runs fine. However, the sourcemaps no longer \nwork. \n\nI guess this means I don't understand how the sourcemaps are linked.\n\nIf I look at the generated map, I see the sources array contains mostly links \npointing to main.out, such as [\"main.out\/foo\/bar.js\", \"main.out\/foo\/bar.cljs\"].\n\nDoes this mean, then, that the entire main.out directory must be available when \nserving main.js in order for main.js.map to correctly map to source files?\n\nThis makes things like sentry.io and raygun much more complicated to configure \ncorrectly. For example, sentry.io allows you to pre-upload source files \n(minified) and sourcemaps. If an error is encountered, rather than running a \nGET \/some-source.js.map (which could be huge and therefor slow to respond), it \nwill reference the already uploaded map file to find the correct line\/col of \nthe error.\n\nFor cljs apps to work properly with similar error capture tools, we would have \nto pre-upload every single file (both js and cljs) inside main.out OR expose \nmain.out\/* so that an error would trigger GET main.js.map -> \nmain.out\/foo\/bar.js -> main.out\/foo\/bar.cljs.\n\nIs this correct, or am I going about this all wrong? \n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] sourcemaps require main.out? Luke Horton Thu, 06 Oct 2016 09:10:18 -0700"},
{"body":"Cljsjs\/material-ui required by cljs-react-material-ui increases output size by \nabout 1.4MB. \n700KB of that is necessary, other 700KB is caused by bug in cljsjs\/material-ui \nwhich causes the code be included twice.\n\n- To save 700KB, fix cljsjs\/material-ui\n- To save more, stop using material-ui, or\n- Wait for Closure and ClojureScript to support npm\/commonjs module processing \nwhich would allow running dead code elimination on material-ui code\n\nOn Saturday, October 1, 2016 at 8:15:08 PM UTC+3, Raghu K wrote:\n> Hi All,\n> I have created a luminus web project and after the final compilation i get \n> the app.js to be around 1.9MB. I am using the advanced compilation.\n> Any ideas on how to reduce the file size.\n> My project.clj is as follows\n> :description \"FIXME: write description\"\n>   :url \"http:\/\/example.com\/FIXME\";\n> \n>   :dependencies [[ch.qos.logback\/logback-classic \"1.1.7\"]\n>                  [re-frame \"0.8.0\"]\n>                  [cljs-ajax \"0.5.8\"]\n>                  [secretary \"1.2.3\"]\n>                  [reagent-utils \"0.2.0\"]\n>                  ;[reagent \"0.6.0-rc\"]\n>                  [reagent \"0.6.0-rc\" :exclusions [org.clojure\/tools.reader \n> cljsjs\/react]]\n>                  [org.clojure\/clojurescript \"1.9.225\" :scope \"provided\"]\n>                  [org.clojure\/clojure \"1.8.0\"]\n>                  [selmer \"1.0.7\"]\n>                  [markdown-clj \"0.9.89\"]\n>                  [ring-middleware-format \"0.7.0\"]\n>                  [metosin\/ring-http-response \"0.8.0\"]\n>                  [bouncer \"1.0.0\"]\n>                  [org.webjars\/bootstrap \"4.0.0-alpha.3\"]\n>                  [org.webjars\/font-awesome \"4.6.3\"]\n>                  [org.webjars.bower\/tether \"1.3.3\"]\n>                  [org.clojure\/tools.logging \"0.3.1\"]\n>                  [compojure \"1.5.1\"]\n>                  [ring-webjars \"0.1.1\"]\n>                  [ring\/ring-defaults \"0.2.1\"]\n>                  [luminus\/ring-ttl-session \"0.3.1\"]\n>                  [mount \"0.1.10\"]\n>                  [cprop \"0.1.9\"]\n>                  [org.clojure\/tools.cli \"0.3.5\"]\n>                  [cljs-react-material-ui \"0.2.19\"]\n>                  [luminus-nrepl \"0.1.4\"]\n>                  [buddy \"1.0.0\"]\n>                  [com.draines\/postal \"2.0.0\"]\n>                  [com.taoensso\/timbre \"4.1.1\"]\n>                  [org.clojure\/core.async \"0.1.346.0-17112a-alpha\"]\n>                  [alandipert\/storage-atom \"2.0.1\"]\n>                  [twilio-api \"1.0.1\"]\n>                  [luminus-http-kit \"0.1.4\"]]\n> \n>   :min-lein-version \"2.0.0\"\n> \n>   :jvm-opts [\"-server\" \"-Dconf=.lein-env\"]\n>   :source-paths [\"src\/clj\" \"src\/cljc\"]\n>   :resource-paths [\"resources\" \"target\/cljsbuild\"]\n>   :target-path \"target\/%s\/\"\n>   :main materiall.core\n> \n>   :plugins [[lein-cprop \"1.0.1\"]\n>             [lein-cljsbuild \"1.1.4\"]]\n>   :clean-targets ^{:protect false}\n>   [:target-path [:cljsbuild :builds :app :compiler :output-dir] [:cljsbuild \n> :builds :app :compiler :output-to]]\n>   :figwheel\n>   {:http-server-root \"public\"\n>    :nrepl-port 7002\n>    :css-dirs [\"resources\/public\/css\"]\n>    :nrepl-middleware [cemerick.piggieback\/wrap-cljs-repl]}\n>   \n> \n>   :profiles\n>   {:uberjar {:omit-source true\n>              :prep-tasks [\"compile\" [\"cljsbuild\" \"once\" \"min\"]]\n>              :cljsbuild\n>              {:builds\n>               {:min\n>                {:source-paths [\"src\/cljc\" \"src\/cljs\" \"env\/prod\/cljs\"]\n>                 :compiler\n>                 {:output-to \"target\/cljsbuild\/public\/js\/app.js\"\n>                  :externs [\"react\/externs\/react.js\"]\n>                  :optimizations :advanced\n>                  :pretty-print false\n>                  :closure-warnings\n>                  {:externs-validation :off :non-standard-jsdoc :off}}}}}\n>              \n>              \n>              :aot :all\n>              :uberjar-name \"mater.jar\"\n>              :source-paths [\"env\/prod\/clj\"]\n>              :resource-paths [\"env\/prod\/resources\"]}\n> \n>    :dev           [:project\/dev :profiles\/dev]\n>    :test          [:project\/test :profiles\/test]\n> \n>    :project\/dev  {:dependencies [[prone \"1.1.1\"]\n>                                  [ring\/ring-mock \"0.3.0\"]\n>                                  [ring\/ring-devel \"1.5.0\"]\n>                                  [pjstadig\/humane-test-output \"0.8.1\"]\n>                                  [doo \"0.1.7\"]\n>                                  [binaryage\/devtools \"0.8.1\"]\n>                                  [figwheel-sidecar \"0.5.4-7\"]\n>                                  [com.cemerick\/piggieback \"0.2.2-SNAPSHOT\"]]\n>                   :plugins      [[com.jakemccrary\/lein-test-refresh \"0.14.0\"]\n>                                  [lein-doo \"0.1.7\"]\n>                                  [lein-figwheel \"0.5.4-7\"]\n>                                  [org.clojure\/clojurescript \"1.9.225\"]]\n>                   :cljsbuild\n>                   {:builds\n>                    {:app\n>                     {:source-paths [\"src\/cljs\" \"src\/cljc\" \"env\/dev\/cljs\"]\n>                      :compiler\n>                      {:main \"mater.app\"\n>                       :asset-path \"\/js\/out\"\n>                       :output-to \"target\/cljsbuild\/public\/js\/app.js\"\n>                       :output-dir \"target\/cljsbuild\/public\/js\/out\"\n>                       :source-map true\n>                       :optimizations :none\n>                       :pretty-print true}}}}\n>                   \n>                   \n>                   \n>                   :doo {:build \"test\"}\n>                   :source-paths [\"env\/dev\/clj\" \"test\/clj\"]\n>                   :resource-paths [\"env\/dev\/resources\"]\n>                   :repl-options {:init-ns user}\n>                   :injections [(require 'pjstadig.humane-test-output)\n>                                (pjstadig.humane-test-output\/activate!)]}\n>    :project\/test {:resource-paths [\"env\/dev\/resources\" \"env\/test\/resources\"]\n>                   :cljsbuild\n>                   {:builds\n>                    {:test\n>                     {:source-paths [\"src\/cljc\" \"src\/cljs\" \"test\/cljs\"]\n>                      :compiler\n>                      {:output-to \"target\/test.js\"\n>                       :main \"mate.doo-runner\"\n>                       :optimizations :whitespace\n>                       :pretty-print true}}}}\n>                   \n>                   }\n>    :profiles\/dev {}\n>    :profiles\/test {}})\n> \n> \n> Any pointers where i couldbe going wrong\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: app.js around 1.9MB : need help Juho Teperi Tue, 04 Oct 2016 03:09:48 -0700"},
{"body":"TL;DR\nBackground - Why?\n\n1. We have a Clojure code base which deploys as a Jar local on a user's PC. It \nis running as a web socket server, serving a local browser application which \ntalks to it, using messages and response events. It also as an intelligent \nproxy gateway to remote servers. \n2. We have started to build a new client application and that progressing \nnicely (Om.next). We are going to need to pop it into an Electron Shell (Local \nFile Access and Needs to talk to some hardware device). We are approaching the \nclient like a server.  The Render threads handling 'defui' and process thread \nhandling the state reconciliation and talk to the local socket server.\n\n3. Today we have Clojure Server in one code base, and separate Repo, the \nClojurescript in another, ProtoRepl in Atom for the Clojure stuff and \n'binaryage \/ Dirac and cljs-devtools'. All very nice and everyone is happy.\n\n4. The objective is to bring both the new client (Om.Next Electron) and the \nsocket client-server and into one project. The rationale here is that start \nblurring the line between the main thread in electron and the socket server and \nmove code into the client as we deprecate some of the Java dependencies. We are \ngoing to have to maintain a Clojure code base, as the Application is simulation \nintensive and multi-treaded, in Clojure the steady progression towards Java \ntreading insanity is indeed halted. We hope to simplify the server side down to \nan nRepl like architecture where we are just sending evals from the client and \nfarm out processing locally or remotely.\n\n5. Before attempting to bring all these project elements together, I wanted to \nsee if anyone has done the above and published a blog about it? I also wanted \nto get some community feedback. From Googling the pieces are out there, just \nnot in a unified fashion.\nShould the above be unique and appears to be of interest to others. I will \nensure that we publish and share anything we come up with in the area.\nThen we will feedback our experiences.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Clojure + ClojureScript + Electron + Om.Next + Boot and ProtoRepl on Atom to co-exist? Ray King Mon, 03 Oct 2016 19:19:25 -0700"},
{"body":"JS is generally served gzipped, so measure that.\n\nDavid \nOn Sat, Oct 1, 2016 at 5:19 AM, Raghu K <raghu...@gmail.com> wrote:\n\n> Hi All,\n> I have created a luminus web project and after the final compilation i get\n> the app.js to be around 1.9MB. I am using the advanced compilation.\n> Any ideas on how to reduce the file size.\n> My project.clj is as follows\n> :description \"FIXME: write description\"\n>   :url \"http:\/\/example.com\/FIXME\";\n>\n>   :dependencies [[ch.qos.logback\/logback-classic \"1.1.7\"]\n>                  [re-frame \"0.8.0\"]\n>                  [cljs-ajax \"0.5.8\"]\n>                  [secretary \"1.2.3\"]\n>                  [reagent-utils \"0.2.0\"]\n>                  ;[reagent \"0.6.0-rc\"]\n>                  [reagent \"0.6.0-rc\" :exclusions [org.clojure\/tools.reader\n> cljsjs\/react]]\n>                  [org.clojure\/clojurescript \"1.9.225\" :scope \"provided\"]\n>                  [org.clojure\/clojure \"1.8.0\"]\n>                  [selmer \"1.0.7\"]\n>                  [markdown-clj \"0.9.89\"]\n>                  [ring-middleware-format \"0.7.0\"]\n>                  [metosin\/ring-http-response \"0.8.0\"]\n>                  [bouncer \"1.0.0\"]\n>                  [org.webjars\/bootstrap \"4.0.0-alpha.3\"]\n>                  [org.webjars\/font-awesome \"4.6.3\"]\n>                  [org.webjars.bower\/tether \"1.3.3\"]\n>                  [org.clojure\/tools.logging \"0.3.1\"]\n>                  [compojure \"1.5.1\"]\n>                  [ring-webjars \"0.1.1\"]\n>                  [ring\/ring-defaults \"0.2.1\"]\n>                  [luminus\/ring-ttl-session \"0.3.1\"]\n>                  [mount \"0.1.10\"]\n>                  [cprop \"0.1.9\"]\n>                  [org.clojure\/tools.cli \"0.3.5\"]\n>                  [cljs-react-material-ui \"0.2.19\"]\n>                  [luminus-nrepl \"0.1.4\"]\n>                  [buddy \"1.0.0\"]\n>                  [com.draines\/postal \"2.0.0\"]\n>                  [com.taoensso\/timbre \"4.1.1\"]\n>                  [org.clojure\/core.async \"0.1.346.0-17112a-alpha\"]\n>                  [alandipert\/storage-atom \"2.0.1\"]\n>                  [twilio-api \"1.0.1\"]\n>                  [luminus-http-kit \"0.1.4\"]]\n>\n>   :min-lein-version \"2.0.0\"\n>\n>   :jvm-opts [\"-server\" \"-Dconf=.lein-env\"]\n>   :source-paths [\"src\/clj\" \"src\/cljc\"]\n>   :resource-paths [\"resources\" \"target\/cljsbuild\"]\n>   :target-path \"target\/%s\/\"\n>   :main materiall.core\n>\n>   :plugins [[lein-cprop \"1.0.1\"]\n>             [lein-cljsbuild \"1.1.4\"]]\n>   :clean-targets ^{:protect false}\n>   [:target-path [:cljsbuild :builds :app :compiler :output-dir]\n> [:cljsbuild :builds :app :compiler :output-to]]\n>   :figwheel\n>   {:http-server-root \"public\"\n>    :nrepl-port 7002\n>    :css-dirs [\"resources\/public\/css\"]\n>    :nrepl-middleware [cemerick.piggieback\/wrap-cljs-repl]}\n>\n>\n>   :profiles\n>   {:uberjar {:omit-source true\n>              :prep-tasks [\"compile\" [\"cljsbuild\" \"once\" \"min\"]]\n>              :cljsbuild\n>              {:builds\n>               {:min\n>                {:source-paths [\"src\/cljc\" \"src\/cljs\" \"env\/prod\/cljs\"]\n>                 :compiler\n>                 {:output-to \"target\/cljsbuild\/public\/js\/app.js\"\n>                  :externs [\"react\/externs\/react.js\"]\n>                  :optimizations :advanced\n>                  :pretty-print false\n>                  :closure-warnings\n>                  {:externs-validation :off :non-standard-jsdoc :off}}}}}\n>\n>\n>              :aot :all\n>              :uberjar-name \"mater.jar\"\n>              :source-paths [\"env\/prod\/clj\"]\n>              :resource-paths [\"env\/prod\/resources\"]}\n>\n>    :dev           [:project\/dev :profiles\/dev]\n>    :test          [:project\/test :profiles\/test]\n>\n>    :project\/dev  {:dependencies [[prone \"1.1.1\"]\n>                                  [ring\/ring-mock \"0.3.0\"]\n>                                  [ring\/ring-devel \"1.5.0\"]\n>                                  [pjstadig\/humane-test-output \"0.8.1\"]\n>                                  [doo \"0.1.7\"]\n>                                  [binaryage\/devtools \"0.8.1\"]\n>                                  [figwheel-sidecar \"0.5.4-7\"]\n>                                  [com.cemerick\/piggieback\n> \"0.2.2-SNAPSHOT\"]]\n>                   :plugins      [[com.jakemccrary\/lein-test-refresh\n> \"0.14.0\"]\n>                                  [lein-doo \"0.1.7\"]\n>                                  [lein-figwheel \"0.5.4-7\"]\n>                                  [org.clojure\/clojurescript \"1.9.225\"]]\n>                   :cljsbuild\n>                   {:builds\n>                    {:app\n>                     {:source-paths [\"src\/cljs\" \"src\/cljc\" \"env\/dev\/cljs\"]\n>                      :compiler\n>                      {:main \"mater.app\"\n>                       :asset-path \"\/js\/out\"\n>                       :output-to \"target\/cljsbuild\/public\/js\/app.js\"\n>                       :output-dir \"target\/cljsbuild\/public\/js\/out\"\n>                       :source-map true\n>                       :optimizations :none\n>                       :pretty-print true}}}}\n>\n>\n>\n>                   :doo {:build \"test\"}\n>                   :source-paths [\"env\/dev\/clj\" \"test\/clj\"]\n>                   :resource-paths [\"env\/dev\/resources\"]\n>                   :repl-options {:init-ns user}\n>                   :injections [(require 'pjstadig.humane-test-output)\n>                                (pjstadig.humane-test-output\/activate!)]}\n>    :project\/test {:resource-paths [\"env\/dev\/resources\"\n> \"env\/test\/resources\"]\n>                   :cljsbuild\n>                   {:builds\n>                    {:test\n>                     {:source-paths [\"src\/cljc\" \"src\/cljs\" \"test\/cljs\"]\n>                      :compiler\n>                      {:output-to \"target\/test.js\"\n>                       :main \"mate.doo-runner\"\n>                       :optimizations :whitespace\n>                       :pretty-print true}}}}\n>\n>                   }\n>    :profiles\/dev {}\n>    :profiles\/test {}})\n>\n>\n> Any pointers where i couldbe going wrong\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] app.js around 1.9MB : need help David Nolen Sat, 01 Oct 2016 10:40:57 -0700"},
{"body":"Hi All,\nI have created a luminus web project and after the final compilation i get the \napp.js to be around 1.9MB. I am using the advanced compilation.\nAny ideas on how to reduce the file size.\nMy project.clj is as follows\n:description \"FIXME: write description\"\n  :url \"http:\/\/example.com\/FIXME\"; \n  :dependencies [[ch.qos.logback\/logback-classic \"1.1.7\"]\n                 [re-frame \"0.8.0\"]\n                 [cljs-ajax \"0.5.8\"]\n                 [secretary \"1.2.3\"]\n                 [reagent-utils \"0.2.0\"]\n                 ;[reagent \"0.6.0-rc\"]\n                 [reagent \"0.6.0-rc\" :exclusions [org.clojure\/tools.reader \ncljsjs\/react]]\n                 [org.clojure\/clojurescript \"1.9.225\" :scope \"provided\"]\n                 [org.clojure\/clojure \"1.8.0\"]\n                 [selmer \"1.0.7\"]\n                 [markdown-clj \"0.9.89\"]\n                 [ring-middleware-format \"0.7.0\"]\n                 [metosin\/ring-http-response \"0.8.0\"]\n                 [bouncer \"1.0.0\"]\n                 [org.webjars\/bootstrap \"4.0.0-alpha.3\"]\n                 [org.webjars\/font-awesome \"4.6.3\"]\n                 [org.webjars.bower\/tether \"1.3.3\"]\n                 [org.clojure\/tools.logging \"0.3.1\"]\n                 [compojure \"1.5.1\"]\n                 [ring-webjars \"0.1.1\"]\n                 [ring\/ring-defaults \"0.2.1\"]\n                 [luminus\/ring-ttl-session \"0.3.1\"]\n                 [mount \"0.1.10\"]\n                 [cprop \"0.1.9\"]\n                 [org.clojure\/tools.cli \"0.3.5\"]\n                 [cljs-react-material-ui \"0.2.19\"]\n                 [luminus-nrepl \"0.1.4\"]\n                 [buddy \"1.0.0\"]\n                 [com.draines\/postal \"2.0.0\"]\n                 [com.taoensso\/timbre \"4.1.1\"]\n                 [org.clojure\/core.async \"0.1.346.0-17112a-alpha\"]\n                 [alandipert\/storage-atom \"2.0.1\"]\n                 [twilio-api \"1.0.1\"]\n                 [luminus-http-kit \"0.1.4\"]]\n\n  :min-lein-version \"2.0.0\"\n\n  :jvm-opts [\"-server\" \"-Dconf=.lein-env\"]\n  :source-paths [\"src\/clj\" \"src\/cljc\"]\n  :resource-paths [\"resources\" \"target\/cljsbuild\"]\n  :target-path \"target\/%s\/\"\n  :main materiall.core\n\n  :plugins [[lein-cprop \"1.0.1\"]\n            [lein-cljsbuild \"1.1.4\"]]\n  :clean-targets ^{:protect false}\n  [:target-path [:cljsbuild :builds :app :compiler :output-dir] [:cljsbuild \n:builds :app :compiler :output-to]]\n  :figwheel\n  {:http-server-root \"public\"\n   :nrepl-port 7002\n   :css-dirs [\"resources\/public\/css\"]\n   :nrepl-middleware [cemerick.piggieback\/wrap-cljs-repl]}\n  \n\n  :profiles\n  {:uberjar {:omit-source true\n             :prep-tasks [\"compile\" [\"cljsbuild\" \"once\" \"min\"]]\n             :cljsbuild\n             {:builds\n              {:min\n               {:source-paths [\"src\/cljc\" \"src\/cljs\" \"env\/prod\/cljs\"]\n                :compiler\n                {:output-to \"target\/cljsbuild\/public\/js\/app.js\"\n                 :externs [\"react\/externs\/react.js\"]\n                 :optimizations :advanced\n                 :pretty-print false\n                 :closure-warnings\n                 {:externs-validation :off :non-standard-jsdoc :off}}}}}\n             \n             \n             :aot :all\n             :uberjar-name \"mater.jar\"\n             :source-paths [\"env\/prod\/clj\"]\n             :resource-paths [\"env\/prod\/resources\"]}\n\n   :dev           [:project\/dev :profiles\/dev]\n   :test          [:project\/test :profiles\/test]\n\n   :project\/dev  {:dependencies [[prone \"1.1.1\"]\n                                 [ring\/ring-mock \"0.3.0\"]\n                                 [ring\/ring-devel \"1.5.0\"]\n                                 [pjstadig\/humane-test-output \"0.8.1\"]\n                                 [doo \"0.1.7\"]\n                                 [binaryage\/devtools \"0.8.1\"]\n                                 [figwheel-sidecar \"0.5.4-7\"]\n                                 [com.cemerick\/piggieback \"0.2.2-SNAPSHOT\"]]\n                  :plugins      [[com.jakemccrary\/lein-test-refresh \"0.14.0\"]\n                                 [lein-doo \"0.1.7\"]\n                                 [lein-figwheel \"0.5.4-7\"]\n                                 [org.clojure\/clojurescript \"1.9.225\"]]\n                  :cljsbuild\n                  {:builds\n                   {:app\n                    {:source-paths [\"src\/cljs\" \"src\/cljc\" \"env\/dev\/cljs\"]\n                     :compiler\n                     {:main \"mater.app\"\n                      :asset-path \"\/js\/out\"\n                      :output-to \"target\/cljsbuild\/public\/js\/app.js\"\n                      :output-dir \"target\/cljsbuild\/public\/js\/out\"\n                      :source-map true\n                      :optimizations :none\n                      :pretty-print true}}}}\n                  \n                  \n                  \n                  :doo {:build \"test\"}\n                  :source-paths [\"env\/dev\/clj\" \"test\/clj\"]\n                  :resource-paths [\"env\/dev\/resources\"]\n                  :repl-options {:init-ns user}\n                  :injections [(require 'pjstadig.humane-test-output)\n                               (pjstadig.humane-test-output\/activate!)]}\n   :project\/test {:resource-paths [\"env\/dev\/resources\" \"env\/test\/resources\"]\n                  :cljsbuild\n                  {:builds\n                   {:test\n                    {:source-paths [\"src\/cljc\" \"src\/cljs\" \"test\/cljs\"]\n                     :compiler\n                     {:output-to \"target\/test.js\"\n                      :main \"mate.doo-runner\"\n                      :optimizations :whitespace\n                      :pretty-print true}}}}\n                  \n                  }\n   :profiles\/dev {}\n   :profiles\/test {}})\n\n\nAny pointers where i couldbe going wrong\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] app.js around 1.9MB : need help Raghu K Sat, 01 Oct 2016 10:15:16 -0700"},
{"body":"Oh, no. Even if that's possible, it's not allowed to do in Respo since it's\nalready optimized with some mechanism like `shouldComponentUpdate` to\nreduce renderings. It's an anti-pattern. \nOn Sat, Oct 1, 2016 at 5:35 AM Dustin Getz <dustin.g...@gmail.com> wrote:\n\n>\n> cljs.user=> (ns foo.core (:require [reagent.core :as reagent]))\n> nil\n> foo.core=> (def ^:dynamic *foo* 42)\n> #'foo.core\/*foo*\n> foo.core=> (defn inner [] [:div *foo*])\n> #'foo.core\/inner\n> foo.core=> (defn root1 [] (binding [*foo* (inc *foo*)] [inner]))\n> #'foo.core\/root1\n> foo.core=> (defn root2 [] (binding [*foo* (inc *foo*)] (inner)))\n> #'foo.core\/root2\n> foo.core=> (reagent\/render-to-string [root1])\n> \"<div ...>42<\/div>\"\n> foo.core=> (reagent\/render-to-string [root2])\n> \"<div ...>43<\/div>\"\n> foo.core=>\n>\n>\n> On Thu, Sep 29, 2016 at 9:36 PM, Jiyin Yiyong <jiyinyiy...@gmail.com>\n> wrote:\n>\n> I'm not sure about dynamic binding, could you give a demo on that?\n>\n> Respo is like subset and a strict version of React. I suppose it's doing\n> less compared to React.\n>\n> On Thursday, September 29, 2016 at 10:43:31 PM UTC+8, Dustin Getz wrote:\n> > Does Respo work with dynamic bindings in render functions? My biggest\n> complaint with React and derivatives are broken dynamic scope.\n> >\n> >\n> > On Thu, Sep 29, 2016 at 4:47 AM, Jiyin Yiyong <jiyin...@gmail.com>\n> wrote:\n> > http:\/\/respo.site\n> >\n> >\n> >\n> > Respo is a front-end MVC library in ClojureScript. It's like Reagent but\n> built totally in ClojureScript, so it's purer and more friendly to hot code\n> swapping. The shortcomings is it has quite less features comparing to\n> React.js , for example side effects.\n> >\n> >\n> >\n> > This is the first version of the docs, small update will still come.\n> >\n> >\n> >\n> > --\n> >\n> > Note that posts from new members are moderated - please be patient with\n> your first post.\n> >\n> > ---\n> >\n> > You received this message because you are subscribed to the Google\n> Groups \"ClojureScript\" group.\n> >\n> > To unsubscribe from this group and stop receiving emails from it, send\n> an email to clojurescrip...@googlegroups.com.\n> >\n> > To post to this group, send email to clojur...@googlegroups.com.\n>\n> >\n> > Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n>\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n>\n>\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/pEVrbSHFSYg\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Respo's home page is up: respo.site jiyinyiyong Fri, 30 Sep 2016 19:41:33 -0700"},
{"body":"cljs.user=> (ns foo.core (:require [reagent.core :as reagent]))\nnil\nfoo.core=> (def ^:dynamic *foo* 42)\n#'foo.core\/*foo*\nfoo.core=> (defn inner [] [:div *foo*])\n#'foo.core\/inner\nfoo.core=> (defn root1 [] (binding [*foo* (inc *foo*)] [inner]))\n#'foo.core\/root1\nfoo.core=> (defn root2 [] (binding [*foo* (inc *foo*)] (inner)))\n#'foo.core\/root2\nfoo.core=> (reagent\/render-to-string [root1])\n\"<div ...>42<\/div>\"\nfoo.core=> (reagent\/render-to-string [root2])\n\"<div ...>43<\/div>\"\nfoo.core=> \n\nOn Thu, Sep 29, 2016 at 9:36 PM, Jiyin Yiyong <jiyinyiy...@gmail.com> wrote:\n\n> I'm not sure about dynamic binding, could you give a demo on that?\n>\n> Respo is like subset and a strict version of React. I suppose it's doing\n> less compared to React.\n>\n> On Thursday, September 29, 2016 at 10:43:31 PM UTC+8, Dustin Getz wrote:\n> > Does Respo work with dynamic bindings in render functions? My biggest\n> complaint with React and derivatives are broken dynamic scope.\n> >\n> >\n> > On Thu, Sep 29, 2016 at 4:47 AM, Jiyin Yiyong <jiyin...@gmail.com>\n> wrote:\n> > http:\/\/respo.site\n> >\n> >\n> >\n> > Respo is a front-end MVC library in ClojureScript. It's like Reagent but\n> built totally in ClojureScript, so it's purer and more friendly to hot code\n> swapping. The shortcomings is it has quite less features comparing to\n> React.js , for example side effects.\n> >\n> >\n> >\n> > This is the first version of the docs, small update will still come.\n> >\n> >\n> >\n> > --\n> >\n> > Note that posts from new members are moderated - please be patient with\n> your first post.\n> >\n> > ---\n> >\n> > You received this message because you are subscribed to the Google\n> Groups \"ClojureScript\" group.\n> >\n> > To unsubscribe from this group and stop receiving emails from it, send\n> an email to clojurescrip...@googlegroups.com.\n> >\n> > To post to this group, send email to clojur...@googlegroups.com.\n> >\n> > Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Respo's home page is up: respo.site Dustin Getz Fri, 30 Sep 2016 14:36:06 -0700"},
{"body":"http:\/\/blog.klipse.tech\/clojure\/2016\/09\/30\/automata-segments-1.html \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Interesting work by Mark Engleberg using regular expressions to solve (hard) programming riddles Yehonathan Sharvit Fri, 30 Sep 2016 04:23:43 -0700"},
{"body":"I'm not sure about dynamic binding, could you give a demo on that?\n\nRespo is like subset and a strict version of React. I suppose it's doing less \ncompared to React. \nOn Thursday, September 29, 2016 at 10:43:31 PM UTC+8, Dustin Getz wrote:\n> Does Respo work with dynamic bindings in render functions? My biggest \n> complaint with React and derivatives are broken dynamic scope.\n> \n> \n> On Thu, Sep 29, 2016 at 4:47 AM, Jiyin Yiyong <jiyin...@gmail.com> wrote:\n> http:\/\/respo.site\n> \n> \n> \n> Respo is a front-end MVC library in ClojureScript. It's like Reagent but \n> built totally in ClojureScript, so it's purer and more friendly to hot code \n> swapping. The shortcomings is it has quite less features comparing to \n> React.js , for example side effects.\n> \n> \n> \n> This is the first version of the docs, small update will still come.\n> \n> \n> \n> --\n> \n> Note that posts from new members are moderated - please be patient with your \n> first post.\n> \n> ---\n> \n> You received this message because you are subscribed to the Google Groups \n> \"ClojureScript\" group.\n> \n> To unsubscribe from this group and stop receiving emails from it, send an \n> email to clojurescrip...@googlegroups.com.\n> \n> To post to this group, send email to clojur...@googlegroups.com.\n> \n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Respo's home page is up: respo.site Jiyin Yiyong Thu, 29 Sep 2016 18:36:58 -0700"},
{"body":"Does Respo work with dynamic bindings in render functions? My biggest\ncomplaint with React and derivatives are broken dynamic scope. \nOn Thu, Sep 29, 2016 at 4:47 AM, Jiyin Yiyong <jiyinyiy...@gmail.com> wrote:\n\n> http:\/\/respo.site\n>\n> Respo is a front-end MVC library in ClojureScript. It's like Reagent but\n> built totally in ClojureScript, so it's purer and more friendly to hot code\n> swapping. The shortcomings is it has quite less features comparing to\n> React.js , for example side effects.\n>\n> This is the first version of the docs, small update will still come.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to the Google Groups\n> \"ClojureScript\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Respo's home page is up: respo.site Dustin Getz Thu, 29 Sep 2016 07:44:07 -0700"},
{"body":"http:\/\/respo.site\n\nRespo is a front-end MVC library in ClojureScript. It's like Reagent but built \ntotally in ClojureScript, so it's purer and more friendly to hot code swapping. \nThe shortcomings is it has quite less features comparing to React.js , for \nexample side effects. \nThis is the first version of the docs, small update will still come.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Respo's home page is up: respo.site Jiyin Yiyong Thu, 29 Sep 2016 01:48:07 -0700"},
{"body":"On Mon, Sep 26, 2016 at 5:38 PM, Ant\u00f3nio Monteiro <anmonte...@gmail.com>\nwrote: \n>\n>\n> FWIW, beware that locking this down further would have to account for\n> ClojureScript's `:refer-macros` and `:include-macros`, etc.\n>\n\nCLJS will already need a different spec than CLJ for ns to account for this\nso we're already planning on that.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: No :exclude option for :require in Clojurescript? Alex Miller Mon, 26 Sep 2016 16:31:14 -0700"},
{"body":"On Monday, September 26, 2016 at 1:39:47 PM UTC+1, Alex Miller wrote:\n> On Sunday, September 25, 2016 at 10:41:33 PM UTC-5, mars0i wrote:\n> > This compiles in Clojure 1.9.0-alpha12 but not in Clojurescript 1.9.229:\n> > \n> > (ns free.matrix-arithmetic\n> >   (:require [clojure.core.matrix :as mx :exclude [e*]]))\n> > \n> > The error in Clojurescript is:\n> > \n> > clojure.lang.ExceptionInfo: Only :as, :refer and :rename options supported \n> > in :require \/ :require-macros; offending spec: [clojure.core.matrix :as mx \n> > :exclude [e*]] ...\n> > \n> > \n> > \n> > The code compiels in Clojurescript if I remove \":exclude [e*]\".\n> > \n> > Is :exclude going away as an option to require and :require, and \n> > Clojurescript is ahead of Clojure?  Is this a bug?\n> \n> :exclude is not a valid option here (it's not having any effect). (doc \n> require) mentions only :as and :refer as valid options in the libspec. \n> :exclude is an option for :refer and :refer-clojure, not for :require.\n> \n> It's maybe interesting that the spec for ns does not report this problem here \n> in :clojure.core.specs\/prefix-list because of the use of keys*, which takes \n> an open map view of options. I'll have to check with Rich if this is \n> something we want to lock down more. \nFWIW, beware that locking this down further would have to account for \nClojureScript's `:refer-macros` and `:include-macros`, etc.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: No :exclude option for :require in Clojurescript? Ant\u00f3nio Monteiro Mon, 26 Sep 2016 15:44:25 -0700"},
{"body":"On Monday, September 26, 2016 at 1:24:27 PM UTC-5, mars0i wrote:\n> On Monday, September 26, 2016 at 10:13:58 AM UTC-5, Alex Miller wrote:\n> > I think this would do what you want:\n> > \n> > (ns free.matrix-arithmetic\n> > \u00a0 (:require [clojure.core.matrix :as mx])\n> > \u00a0 (:refer clojure.core.matrix :exclude [e*]))\n> \n> Thanks very much.  I didn't understand that the :refer expression is separate \n> from the :require expression in an ns statement.\n> \n> This still produces an error in Clojurescript 1.9.229.  It seems to say that \n> :refer is not allowed in ns:\n> \n> clojure.lang.ExceptionInfo: Only :refer-clojure, :require, :require-macros, \n> :use, :use-macros, and :import libspecs supported at line 1 ... :tag \n> :cljs\/analysis-error \nThis may be one area where Clojure and ClojureScript differ (I don't follow \nClojureScript with close enough attention to know). It's also possible that the \nspec is wrong and it should *not* include refer at all. In that case, I run the \nrisk that my suggestion above that will be deemed invalid in a later alpha. :)  \nYou can also do the refer outside the ns as another (perhaps preferred) \nalternative:\n\n(refer 'clojure.core.matrix :exclude '[e*])\n\n> I just noticed some things about ns docstrings:\n> \n> The docstrings for ns in Clojure 1.8.0 and 1.9.0-alpha12 don't mention :refer \n> at all.\n\nYeah, there are a number of places where the docstrings are imprecise. We are \ntrying to bring more precision by defining specs here. The specs should help \nachieve greater alignment over time. \n\n> The docstring in Clojurescript 1.9.299 says that \":require supports :as, \n> :refer, and :rename\", which I would read as implying that :refer belongs \n> somewhere inside a :require expression.  However, :exclude is only mentioned \n> in relation to :refer-clojure.\n\n:require has support for some (but not all) refer functionality. :refer-clojure \nis just refer applied specifically to clojure.core so they share the same \noptions pretty much.\n\nDoes this all make perfect sense? Perhaps not. Unfortunately ns and friends \nwere added early in Clojure with perhaps less scrutiny than was prudent given \ntheir importance and they have evolved in non-optimal ways.\n\n> At this point, :exclude is just something to be curious about for me, since I \n> rarely pull all or almost all of a namespace into another one.  Maybe I'll \n> leave it alone now that I've flagged some questions?  I don't understand \n> enough to submit relevant tickets.\n\nI don't know that anything needs to be followed. If anything, I think a CLJ \nticket about whether :refer should be supported in the ns spec is my biggest \nquestion.\n\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: No :exclude option for :require in Clojurescript? Alex Miller Mon, 26 Sep 2016 11:57:51 -0700"},
{"body":"On Monday, September 26, 2016 at 10:13:58 AM UTC-5, Alex Miller wrote:\n> I think this would do what you want:\n> \n> (ns free.matrix-arithmetic\n> \u00a0 (:require [clojure.core.matrix :as mx])\n> \u00a0 (:refer clojure.core.matrix :exclude [e*])) \nThanks very much.  I didn't understand that the :refer expression is separate \nfrom the :require expression in an ns statement.\n\nThis still produces an error in Clojurescript 1.9.229.  It seems to say that \n:refer is not allowed in ns:\n\nclojure.lang.ExceptionInfo: Only :refer-clojure, :require, :require-macros, \n:use, :use-macros, and :import libspecs supported at line 1 ... :tag \n:cljs\/analysis-error\n\n\nI just noticed some things about ns docstrings:\n\nThe docstrings for ns in Clojure 1.8.0 and 1.9.0-alpha12 don't mention :refer \nat all.\n\nThe docstring in Clojurescript 1.9.299 says that \":require supports :as, \n:refer, and :rename\", which I would read as implying that :refer belongs \nsomewhere inside a :require expression.  However, :exclude is only mentioned in \nrelation to :refer-clojure.\n\n\nAt this point, :exclude is just something to be curious about for me, since I \nrarely pull all or almost all of a namespace into another one.  Maybe I'll \nleave it alone now that I've flagged some questions?  I don't understand enough \nto submit relevant tickets.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: No :exclude option for :require in Clojurescript? mars0i Mon, 26 Sep 2016 11:24:46 -0700"},
{"body":"I think this would do what you want:\n\n(ns free.matrix-arithmetic\n  (:require [clojure.core.matrix :as mx])\n  (:refer clojure.core.matrix :exclude [e*])) \n\nOn Mon, Sep 26, 2016 at 9:54 AM, mars0i <marsh...@logical.net> wrote:\n\n> > :exclude is not a valid option here (it's not having any effect). (doc\n> require) mentions only :as and :refer as valid options in the libspec.\n> :exclude is an option for :refer and :refer-clojure, not for :require.\n> >\n> > It's maybe interesting that the spec for ns does not report this problem\n> here in :clojure.core.specs\/prefix-list because of the use of keys*,\n> which takes an open map view of options. I'll have to check with Rich if\n> this is something we want to lock down more.\n>\n> I see.  Thanks.  If I wanted to pull in everything but e*, for example, I\n> could use :exclude, but there's no reason to exclude anything if I'm only\n> using specific, namespace-qualified functions from clojure.core.matrix.\n>\n> I had noticed that the docstring for require didn't mention exclude, but\n> with some of the more complex macros and functions like require, there are\n> sometimes minor points missing from docstrings.  (That's not a complaint.)\n>\n> I don't need :exclude at present, but I still can't figure out how I could\n> pull in all functions but one from a namespace.  For example, the\n> Clojurescript compiler doesn't like this:\n>\n> (ns free.matrix-arithmetic\n>   (:require [clojure.core.matrix :as mx :refer :all :exclude [e*]]))\n>\n> The spec failure report:\n>\n> clojure.lang.ExceptionInfo: Only :as, :refer and :rename options supported\n> in :require \/ :require-macros; offending spec: [clojure.core.matrix :refer\n> :all :exclude [e*]] ...\n>\n> Similarly, this\n>\n> (ns free.matrix-arithmetic\n>   (:use [clojure.core.matrix :exclude [e*]]))\n>\n> results in this\n>\n> clojure.lang.ExceptionInfo: Only [lib.ns :only (names)] and optionally\n> `:rename {from to}` specs supported in :use \/ :use-macros; offending spec:\n> [clojure.core.matrix :exclude [e*]] ...\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit https:\/\/groups.google.com\/d\/\n> topic\/clojurescript\/y1vVdKp5EYw\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Re: No :exclude option for :require in Clojurescript? Alex Miller Mon, 26 Sep 2016 08:14:56 -0700"},
{"body":"> :exclude is not a valid option here (it's not having any effect). (doc \n> require) mentions only :as and :refer as valid options in the libspec. \n> :exclude is an option for :refer and :refer-clojure, not for :require.\n> \n> It's maybe interesting that the spec for ns does not report this problem here \n> in :clojure.core.specs\/prefix-list because of the use of keys*, which takes \n> an open map view of options. I'll have to check with Rich if this is \n> something we want to lock down more. \nI see.  Thanks.  If I wanted to pull in everything but e*, for example, I could \nuse :exclude, but there's no reason to exclude anything if I'm only using \nspecific, namespace-qualified functions from clojure.core.matrix.\n\nI had noticed that the docstring for require didn't mention exclude, but with \nsome of the more complex macros and functions like require, there are sometimes \nminor points missing from docstrings.  (That's not a complaint.)\n\nI don't need :exclude at present, but I still can't figure out how I could pull \nin all functions but one from a namespace.  For example, the Clojurescript \ncompiler doesn't like this:\n\n(ns free.matrix-arithmetic\n  (:require [clojure.core.matrix :as mx :refer :all :exclude [e*]]))\n\nThe spec failure report:\n\nclojure.lang.ExceptionInfo: Only :as, :refer and :rename options supported in \n:require \/ :require-macros; offending spec: [clojure.core.matrix :refer :all \n:exclude [e*]] ...\n\nSimilarly, this\n\n(ns free.matrix-arithmetic\n  (:use [clojure.core.matrix :exclude [e*]]))\n\nresults in this\n\nclojure.lang.ExceptionInfo: Only [lib.ns :only (names)] and optionally `:rename \n{from to}` specs supported in :use \/ :use-macros; offending spec: \n[clojure.core.matrix :exclude [e*]] ...\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: No :exclude option for :require in Clojurescript? mars0i Mon, 26 Sep 2016 08:01:40 -0700"},
{"body":"On Sunday, September 25, 2016 at 10:41:33 PM UTC-5, mars0i wrote:\n> This compiles in Clojure 1.9.0-alpha12 but not in Clojurescript 1.9.229:\n> \n> (ns free.matrix-arithmetic\n>   (:require [clojure.core.matrix :as mx :exclude [e*]]))\n> \n> The error in Clojurescript is:\n> \n> clojure.lang.ExceptionInfo: Only :as, :refer and :rename options supported in \n> :require \/ :require-macros; offending spec: [clojure.core.matrix :as mx \n> :exclude [e*]] ...\n> \n> \n> \n> The code compiels in Clojurescript if I remove \":exclude [e*]\".\n> \n> Is :exclude going away as an option to require and :require, and \n> Clojurescript is ahead of Clojure?  Is this a bug? \n:exclude is not a valid option here (it's not having any effect). (doc require) \nmentions only :as and :refer as valid options in the libspec. :exclude is an \noption for :refer and :refer-clojure, not for :require.\n\nIt's maybe interesting that the spec for ns does not report this problem here \nin :clojure.core.specs\/prefix-list because of the use of keys*, which takes an \nopen map view of options. I'll have to check with Rich if this is something we \nwant to lock down more.\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: No :exclude option for :require in Clojurescript? Alex Miller Mon, 26 Sep 2016 05:40:31 -0700"},
{"body":"There is no :exclude in the Clojure API documentation for require.  The errant \nline of code might be a mix-up between require and use. \n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: No :exclude option for :require in Clojurescript? Phill Wolf Mon, 26 Sep 2016 02:28:30 -0700"},
{"body":"There is KLIPSE here:\n\nhttp:\/\/app.klipse.tech\/\nhttps:\/\/github.com\/viebel\/klipse \nYou might also take a look at:\n\ncljsfiddle.com\nhttps:\/\/gitlab.com\/escherize\/cljsfiddle\n\nThere are other online REPLs listed here:\n\nhttp:\/\/clojurescript.org\/community\/resources\n\nThe self hosted clojurescript compiler has been used to good effect in quite a \nfew places.\n\nGood luck!\n\nAlan\n\nOn Friday, September 23, 2016 at 9:43:21 AM UTC-7, Simon Brooke wrote:\n> This is probably not a problem that affects many people...\n> \n> As I understand it, I cannot compile a function in ClojureScript and have it \n> integrated into the current ClojureScript compiled image (if I'm wrong, \n> please tell me so. I'd really, really like to be wrong).\n> \n> I have a web app which allows people to write rules for a cellular automaton, \n> and watch them run (you can see it here http:\/\/www.journeyman.cc\/microworld\/ \n> if you're interested). The problem is that all the computation happens server \n> side, so it doesn't scale. I need to move as much as possible of the \n> computation to client side.\n> \n> A key feature of the application is that users can edit the rules - in fact, \n> they're encouraged to. That's what it's about. When the rules are edited \n> they're compiled into Clojure functions, which then run.\n> \n> I can move all the function of the application client side except (at this \n> stage) compiling the rules. So I'm envisaging a version of the app which, \n> when the user edits the rules, the parsing happens client side and any parser \n> errors are shown to the user immediately, but when they decide to commit \n> their changes, the generated Clojure text is sent back to the server, where \n> it is compiled with the rest of the CLJC code into a new app.js JavaScript \n> image and served back to the client. The state of the world can be cached in \n> HTML5 local storage while this is being done.\n> \n> The problem I see is this: if Alice and Bob are both using the system at the \n> same time, both edit rules, I don't want Alice getting an image with Bob's \n> rules in it (or vice versa). So I'm going to need to compile separate copies \n> of app.js for each client that connects, and serve the right one to the right \n> client.\n> \n> Has anyone else tried anything like this? Did it work? What were the problems?\n> \n> Cheers\n> \n> Simon\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] Re: Compiling different ClojureScript for different clients Alan Moore Sun, 25 Sep 2016 21:26:46 -0700"},
{"body":"By the way, the klipse plugin does something similar. You might want to\ntake a look at\nhttps:\/\/github.com\/viebel\/klipse \nOn Mon, Sep 26, 2016, 00:44 mars0i <marsh...@logical.net> wrote:\n\n> On Sunday, September 25, 2016 at 3:10:29 PM UTC-5, Yehonathan Sharvit\n> wrote:\n> > There might me security issues if the website allows users to modify the\n> contents of the page - like Wikipedia or clojuredocs.org.\n> >\n> > A malicious user might write cljs code that will do malicious actions\n> that run on the browser of all your visitors\n> >\n> > On Sunday, 25 September 2016 19:47:03 UTC+3, mars0i  wrote:\n> > > On Sunday, September 25, 2016 at 12:32:36 AM UTC-5, Brandon Adams\n> wrote:\n> > > > The users already have a javascript repl with the same abilities and\n> permissions as the cljs repl you give them.\n> > >\n> > > Oh!  Good point.  Got it.  Thanks.\n> >\n> > There might me security issues if the website allow users to modify the\n> contents of the page - like Wikipedia or clojuredocs.org.\n> >\n> > A malicious user might write cljs code that will do malicious actions\n> that run on the browser of all your visitors...\n>\n> I understand.  In my application, users will affect the output they see in\n> their browser, but I don't see any way that they could modify what I put on\n> the server, which will always be the same unless I change it.  Thanks for\n> clarifying that.\n>\n> --\n> Note that posts from new members are moderated - please be patient with\n> your first post.\n> ---\n> You received this message because you are subscribed to a topic in the\n> Google Groups \"ClojureScript\" group.\n> To unsubscribe from this topic, visit\n> https:\/\/groups.google.com\/d\/topic\/clojurescript\/VczAamZK9xQ\/unsubscribe.\n> To unsubscribe from this group and all its topics, send an email to\n> clojurescript+unsubscr...@googlegroups.com.\n> To post to this group, send email to clojurescript@googlegroups.com.\n> Visit this group at https:\/\/groups.google.com\/group\/clojurescript.\n>\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"Re: [ClojureScript] Why isn't giving end-users a repl dangerous? Yehonathan Sharvit Sun, 25 Sep 2016 21:02:19 -0700"},
{"body":"This compiles in Clojure 1.9.0-alpha12 but not in Clojurescript 1.9.229:\n\n(ns free.matrix-arithmetic\n  (:require [clojure.core.matrix :as mx :exclude [e*]])) \nThe error in Clojurescript is:\n\nclojure.lang.ExceptionInfo: Only :as, :refer and :rename options supported in \n:require \/ :require-macros; offending spec: [clojure.core.matrix :as mx \n:exclude [e*]] ...\n\n\n\nThe code compiels in Clojurescript if I remove \":exclude [e*]\".\n\nIs :exclude going away as an option to require and :require, and Clojurescript \nis ahead of Clojure?  Is this a bug?\n\n-- \nNote that posts from new members are moderated - please be patient with your \nfirst post.\n--- \nYou received this message because you are subscribed to the Google Groups \n\"ClojureScript\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email \nto clojurescript+unsubscr...@googlegroups.com.\nTo post to this group, send email to clojurescript@googlegroups.com.\nVisit this group at https:\/\/groups.google.com\/group\/clojurescript.","subject":"[ClojureScript] No :exclude option for :require in Clojurescript? mars0i Sun, 25 Sep 2016 20:42:07 -0700"}
]